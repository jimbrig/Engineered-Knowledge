"use strict";var t=require("obsidian");function e(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var n=e(t);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function r(t,e,n,r){return new(n||(n=Promise))((function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function l(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,l)}u((r=r.apply(t,e||[])).next())}))}function a(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function i(t){let e=t,n=t;function r(t,e,r,a){for(null==r&&(r=0),null==a&&(a=t.length);r<a;){const i=r+a>>>1;n(t[i],e)<0?r=i+1:a=i}return r}return 1===t.length&&(e=(e,n)=>t(e)-n,n=function(t){return(e,n)=>a(t(e),n)}(t)),{left:r,center:function(t,n,a,i){null==a&&(a=0),null==i&&(i=t.length);const o=r(t,n,a,i-1);return o>a&&e(t[o-1],n)>-e(t[o],n)?o-1:o},right:function(t,e,r,a){for(null==r&&(r=0),null==a&&(a=t.length);r<a;){const i=r+a>>>1;n(t[i],e)>0?a=i:r=i+1}return r}}}const o=i(a).right;function l(t,e,n){return t(n={path:e,exports:{},require:function(t,e){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==e&&n.path)}},n.exports),n.exports}i((function(t){return null===t?NaN:+t})).center;var u=Math.sqrt(50),s=Math.sqrt(10),c=Math.sqrt(2);function f(t,e,n){var r=(e-t)/Math.max(0,n),a=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,a);return a>=0?(i>=u?10:i>=s?5:i>=c?2:1)*Math.pow(10,a):-Math.pow(10,-a)/(i>=u?10:i>=s?5:i>=c?2:1)}function h(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),a=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/a;return i>=u?a*=10:i>=s?a*=5:i>=c&&(a*=2),e<t?-a:a}function d(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n<e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let a of t)null!=(a=e(a,++r,t))&&(n<a||void 0===n&&a>=a)&&(n=a)}return n}function g(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n>e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let a of t)null!=(a=e(a,++r,t))&&(n>a||void 0===n&&a>=a)&&(n=a)}return n}function p(t,e,n=0,r=t.length-1,i=a){for(;r>n;){if(r-n>600){const a=r-n+1,o=e-n+1,l=Math.log(a),u=.5*Math.exp(2*l/3),s=.5*Math.sqrt(l*u*(a-u)/a)*(o-a/2<0?-1:1);p(t,e,Math.max(n,Math.floor(e-o*u/a+s)),Math.min(r,Math.floor(e+(a-o)*u/a+s)),i)}const a=t[e];let o=n,l=r;for(m(t,n,e),i(t[r],a)>0&&m(t,n,r);o<l;){for(m(t,o,l),++o,--l;i(t[o],a)<0;)++o;for(;i(t[l],a)>0;)--l}0===i(t[n],a)?m(t,n,l):(++l,m(t,l,r)),l<=e&&(n=l+1),e<=l&&(r=l-1)}return t}function m(t,e,n){const r=t[e];t[e]=t[n],t[n]=r}function y(t,e,n){if(r=(t=Float64Array.from(function*(t,e){if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(yield e);else{let n=-1;for(let r of t)null!=(r=e(r,++n,t))&&(r=+r)>=r&&(yield r)}}(t,n))).length){if((e=+e)<=0||r<2)return g(t);if(e>=1)return d(t);var r,a=(r-1)*e,i=Math.floor(a),o=d(p(t,i).subarray(0,i+1));return o+(g(t.subarray(i+1))-o)*(a-i)}}function v(t,e,n){t=+t,e=+e,n=(a=arguments.length)<2?(e=t,t=0,1):a<3?1:+n;for(var r=-1,a=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(a);++r<a;)i[r]=t+r*n;return i}function w(t,e){let n=0;if(void 0===e)for(let e of t)(e=+e)&&(n+=e);else{let r=-1;for(let a of t)(a=+e(a,++r,t))&&(n+=a)}return n}var A=Array.prototype.slice;function x(t){return t}function b(t){return"translate("+t+",0)"}function D(t){return"translate(0,"+t+")"}function C(t){return e=>+t(e)}function F(t,e){return e=Math.max(0,t.bandwidth()-2*e)/2,t.round()&&(e=Math.round(e)),n=>+t(n)+e}function M(){return!this.__axis}function k(t,e){var n=[],r=null,a=null,i=6,o=6,l=3,u="undefined"!=typeof window&&window.devicePixelRatio>1?0:.5,s=1===t||4===t?-1:1,c=4===t||2===t?"x":"y",f=1===t||3===t?b:D;function h(h){var d=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,g=null==a?e.tickFormat?e.tickFormat.apply(e,n):x:a,p=Math.max(i,0)+l,m=e.range(),y=+m[0]+u,v=+m[m.length-1]+u,w=(e.bandwidth?F:C)(e.copy(),u),A=h.selection?h.selection():h,b=A.selectAll(".domain").data([null]),D=A.selectAll(".tick").data(d,e).order(),k=D.exit(),T=D.enter().append("g").attr("class","tick"),_=D.select("line"),S=D.select("text");b=b.merge(b.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),D=D.merge(T),_=_.merge(T.append("line").attr("stroke","currentColor").attr(c+"2",s*i)),S=S.merge(T.append("text").attr("fill","currentColor").attr(c,s*p).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),h!==A&&(b=b.transition(h),D=D.transition(h),_=_.transition(h),S=S.transition(h),k=k.transition(h).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=w(t))?f(t+u):this.getAttribute("transform")})),T.attr("opacity",1e-6).attr("transform",(function(t){var e=this.parentNode.__axis;return f((e&&isFinite(e=e(t))?e:w(t))+u)}))),k.remove(),b.attr("d",4===t||2===t?o?"M"+s*o+","+y+"H"+u+"V"+v+"H"+s*o:"M"+u+","+y+"V"+v:o?"M"+y+","+s*o+"V"+u+"H"+v+"V"+s*o:"M"+y+","+u+"H"+v),D.attr("opacity",1).attr("transform",(function(t){return f(w(t)+u)})),_.attr(c+"2",s*i),S.attr(c,s*p).text(g),A.filter(M).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),A.each((function(){this.__axis=w}))}return h.scale=function(t){return arguments.length?(e=t,h):e},h.ticks=function(){return n=A.call(arguments),h},h.tickArguments=function(t){return arguments.length?(n=null==t?[]:A.call(t),h):n.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:A.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(a=t,h):a},h.tickSize=function(t){return arguments.length?(i=o=+t,h):i},h.tickSizeInner=function(t){return arguments.length?(i=+t,h):i},h.tickSizeOuter=function(t){return arguments.length?(o=+t,h):o},h.tickPadding=function(t){return arguments.length?(l=+t,h):l},h.offset=function(t){return arguments.length?(u=+t,h):u},h}function T(t){return k(3,t)}function _(t){return k(4,t)}var S={value:()=>{}};function B(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new N(r)}function N(t){this._=t}function E(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function I(t,e){for(var n,r=0,a=t.length;r<a;++r)if((n=t[r]).name===e)return n.value}function L(t,e,n){for(var r=0,a=t.length;r<a;++r)if(t[r].name===e){t[r]=S,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}N.prototype=B.prototype={constructor:N,on:function(t,e){var n,r=this._,a=E(t+"",r),i=-1,o=a.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++i<o;)if(n=(t=a[i]).type)r[n]=L(r[n],t.name,e);else if(null==e)for(n in r)r[n]=L(r[n],t.name,null);return this}for(;++i<o;)if((n=(t=a[i]).type)&&(n=I(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new N(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,a=new Array(n),i=0;i<n;++i)a[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,a)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],a=0,i=r.length;a<i;++a)r[a].value.apply(e,n)}};var P="http://www.w3.org/1999/xhtml",Y={svg:"http://www.w3.org/2000/svg",xhtml:P,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function V(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),Y.hasOwnProperty(e)?{space:Y[e],local:t}:t}function z(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===P&&e.documentElement.namespaceURI===P?e.createElement(t):e.createElementNS(n,t)}}function U(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function O(t){var e=V(t);return(e.local?U:z)(e)}function H(){}function R(t){return null==t?H:function(){return this.querySelector(t)}}function W(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function q(){return[]}function X(t){return null==t?q:function(){return this.querySelectorAll(t)}}function $(t){return function(){return this.matches(t)}}function j(t){return function(e){return e.matches(t)}}var Z=Array.prototype.find;function G(){return this.firstElementChild}var Q=Array.prototype.filter;function J(){return this.children}function K(t){return new Array(t.length)}function tt(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function et(t){return function(){return t}}function nt(t,e,n,r,a,i){for(var o,l=0,u=e.length,s=i.length;l<s;++l)(o=e[l])?(o.__data__=i[l],r[l]=o):n[l]=new tt(t,i[l]);for(;l<u;++l)(o=e[l])&&(a[l]=o)}function rt(t,e,n,r,a,i,o){var l,u,s,c=new Map,f=e.length,h=i.length,d=new Array(f);for(l=0;l<f;++l)(u=e[l])&&(d[l]=s=o.call(u,u.__data__,l,e)+"",c.has(s)?a[l]=u:c.set(s,u));for(l=0;l<h;++l)s=o.call(t,i[l],l,i)+"",(u=c.get(s))?(r[l]=u,u.__data__=i[l],c.delete(s)):n[l]=new tt(t,i[l]);for(l=0;l<f;++l)(u=e[l])&&c.get(d[l])===u&&(a[l]=u)}function at(t){return t.__data__}function it(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function ot(t){return function(){this.removeAttribute(t)}}function lt(t){return function(){this.removeAttributeNS(t.space,t.local)}}function ut(t,e){return function(){this.setAttribute(t,e)}}function st(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function ct(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function ft(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function ht(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function dt(t){return function(){this.style.removeProperty(t)}}function gt(t,e,n){return function(){this.style.setProperty(t,e,n)}}function pt(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function mt(t,e){return t.style.getPropertyValue(e)||ht(t).getComputedStyle(t,null).getPropertyValue(e)}function yt(t){return function(){delete this[t]}}function vt(t,e){return function(){this[t]=e}}function wt(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function At(t){return t.trim().split(/^|\s+/)}function xt(t){return t.classList||new bt(t)}function bt(t){this._node=t,this._names=At(t.getAttribute("class")||"")}function Dt(t,e){for(var n=xt(t),r=-1,a=e.length;++r<a;)n.add(e[r])}function Ct(t,e){for(var n=xt(t),r=-1,a=e.length;++r<a;)n.remove(e[r])}function Ft(t){return function(){Dt(this,t)}}function Mt(t){return function(){Ct(this,t)}}function kt(t,e){return function(){(e.apply(this,arguments)?Dt:Ct)(this,t)}}function Tt(){this.textContent=""}function _t(t){return function(){this.textContent=t}}function St(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function Bt(){this.innerHTML=""}function Nt(t){return function(){this.innerHTML=t}}function Et(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function It(){this.nextSibling&&this.parentNode.appendChild(this)}function Lt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Pt(){return null}function Yt(){var t=this.parentNode;t&&t.removeChild(this)}function Vt(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function zt(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Ut(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function Ot(t){return function(){var e=this.__on;if(e){for(var n,r=0,a=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++a]=n:this.removeEventListener(n.type,n.listener,n.options);++a?e.length=a:delete this.__on}}}function Ht(t,e,n){return function(){var r,a=this.__on,i=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(a)for(var o=0,l=a.length;o<l;++o)if((r=a[o]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=i,r.options=n),void(r.value=e);this.addEventListener(t.type,i,n),r={type:t.type,name:t.name,value:e,listener:i,options:n},a?a.push(r):this.__on=[r]}}function Rt(t,e,n){var r=ht(t),a=r.CustomEvent;"function"==typeof a?a=new a(e,n):(a=r.document.createEvent("Event"),n?(a.initEvent(e,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(e,!1,!1)),t.dispatchEvent(a)}function Wt(t,e){return function(){return Rt(this,t,e)}}function qt(t,e){return function(){return Rt(this,t,e.apply(this,arguments))}}tt.prototype={constructor:tt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}},bt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Xt=[null];function $t(t,e){this._groups=t,this._parents=e}function jt(){return new $t([[document.documentElement]],Xt)}function Zt(t){return"string"==typeof t?new $t([[document.querySelector(t)]],[document.documentElement]):new $t([[t]],Xt)}function Gt(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function Qt(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Jt(){}$t.prototype=jt.prototype={constructor:$t,select:function(t){"function"!=typeof t&&(t=R(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o,l=e[a],u=l.length,s=r[a]=new Array(u),c=0;c<u;++c)(i=l[c])&&(o=t.call(i,i.__data__,c,l))&&("__data__"in i&&(o.__data__=i.__data__),s[c]=o);return new $t(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);return null==e?[]:W(e)}}(t):X(t);for(var e=this._groups,n=e.length,r=[],a=[],i=0;i<n;++i)for(var o,l=e[i],u=l.length,s=0;s<u;++s)(o=l[s])&&(r.push(t.call(o,o.__data__,s,l)),a.push(o));return new $t(r,a)},selectChild:function(t){return this.select(null==t?G:function(t){return function(){return Z.call(this.children,t)}}("function"==typeof t?t:j(t)))},selectChildren:function(t){return this.selectAll(null==t?J:function(t){return function(){return Q.call(this.children,t)}}("function"==typeof t?t:j(t)))},filter:function(t){"function"!=typeof t&&(t=$(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],l=o.length,u=r[a]=[],s=0;s<l;++s)(i=o[s])&&t.call(i,i.__data__,s,o)&&u.push(i);return new $t(r,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,at);var n=e?rt:nt,r=this._parents,a=this._groups;"function"!=typeof t&&(t=et(t));for(var i=a.length,o=new Array(i),l=new Array(i),u=new Array(i),s=0;s<i;++s){var c=r[s],f=a[s],h=f.length,d=W(t.call(c,c&&c.__data__,s,r)),g=d.length,p=l[s]=new Array(g),m=o[s]=new Array(g),y=u[s]=new Array(h);n(c,f,p,m,y,d,e);for(var v,w,A=0,x=0;A<g;++A)if(v=p[A]){for(A>=x&&(x=A+1);!(w=m[x])&&++x<g;);v._next=w||null}}return(o=new $t(o,r))._enter=l,o._exit=u,o},enter:function(){return new $t(this._enter||this._groups.map(K),this._parents)},exit:function(){return new $t(this._exit||this._groups.map(K),this._parents)},join:function(t,e,n){var r=this.enter(),a=this,i=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(a=e(a)),null==n?i.remove():n(i),r&&a?r.merge(a).order():a},merge:function(t){if(!(t instanceof $t))throw new Error("invalid merge");for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),l=0;l<i;++l)for(var u,s=e[l],c=n[l],f=s.length,h=o[l]=new Array(f),d=0;d<f;++d)(u=s[d]||c[d])&&(h[d]=u);for(;l<r;++l)o[l]=e[l];return new $t(o,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,a=t[e],i=a.length-1,o=a[i];--i>=0;)(r=a[i])&&(o&&4^r.compareDocumentPosition(o)&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=it);for(var n=this._groups,r=n.length,a=new Array(r),i=0;i<r;++i){for(var o,l=n[i],u=l.length,s=a[i]=new Array(u),c=0;c<u;++c)(o=l[c])&&(s[c]=o);s.sort(e)}return new $t(a,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],a=0,i=r.length;a<i;++a){var o=r[a];if(o)return o}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var a,i=e[n],o=0,l=i.length;o<l;++o)(a=i[o])&&t.call(a,a.__data__,o,i);return this},attr:function(t,e){var n=V(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?lt:ot:"function"==typeof e?n.local?ft:ct:n.local?st:ut)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?dt:"function"==typeof e?pt:gt)(t,e,null==n?"":n)):mt(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?yt:"function"==typeof e?wt:vt)(t,e)):this.node()[t]},classed:function(t,e){var n=At(t+"");if(arguments.length<2){for(var r=xt(this.node()),a=-1,i=n.length;++a<i;)if(!r.contains(n[a]))return!1;return!0}return this.each(("function"==typeof e?kt:e?Ft:Mt)(n,e))},text:function(t){return arguments.length?this.each(null==t?Tt:("function"==typeof t?St:_t)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Bt:("function"==typeof t?Et:Nt)(t)):this.node().innerHTML},raise:function(){return this.each(It)},lower:function(){return this.each(Lt)},append:function(t){var e="function"==typeof t?t:O(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:O(t),r=null==e?Pt:"function"==typeof e?e:R(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Yt)},clone:function(t){return this.select(t?zt:Vt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,a,i=Ut(t+""),o=i.length;if(!(arguments.length<2)){for(l=e?Ht:Ot,r=0;r<o;++r)this.each(l(i[r],e,n));return this}var l=this.node().__on;if(l)for(var u,s=0,c=l.length;s<c;++s)for(r=0,u=l[s];r<o;++r)if((a=i[r]).type===u.type&&a.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?qt:Wt)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r,a=t[e],i=0,o=a.length;i<o;++i)(r=a[i])&&(yield r)}};var Kt=1/.7,te="\\s*([+-]?\\d+)\\s*",ee="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",ne="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",re=/^#([0-9a-f]{3,8})$/,ae=new RegExp("^rgb\\("+[te,te,te]+"\\)$"),ie=new RegExp("^rgb\\("+[ne,ne,ne]+"\\)$"),oe=new RegExp("^rgba\\("+[te,te,te,ee]+"\\)$"),le=new RegExp("^rgba\\("+[ne,ne,ne,ee]+"\\)$"),ue=new RegExp("^hsl\\("+[ee,ne,ne]+"\\)$"),se=new RegExp("^hsla\\("+[ee,ne,ne,ee]+"\\)$"),ce={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function fe(){return this.rgb().formatHex()}function he(){return this.rgb().formatRgb()}function de(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=re.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?ge(e):3===n?new ve(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?pe(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?pe(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=ae.exec(t))?new ve(e[1],e[2],e[3],1):(e=ie.exec(t))?new ve(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=oe.exec(t))?pe(e[1],e[2],e[3],e[4]):(e=le.exec(t))?pe(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=ue.exec(t))?be(e[1],e[2]/100,e[3]/100,1):(e=se.exec(t))?be(e[1],e[2]/100,e[3]/100,e[4]):ce.hasOwnProperty(t)?ge(ce[t]):"transparent"===t?new ve(NaN,NaN,NaN,0):null}function ge(t){return new ve(t>>16&255,t>>8&255,255&t,1)}function pe(t,e,n,r){return r<=0&&(t=e=n=NaN),new ve(t,e,n,r)}function me(t){return t instanceof Jt||(t=de(t)),t?new ve((t=t.rgb()).r,t.g,t.b,t.opacity):new ve}function ye(t,e,n,r){return 1===arguments.length?me(t):new ve(t,e,n,null==r?1:r)}function ve(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function we(){return"#"+xe(this.r)+xe(this.g)+xe(this.b)}function Ae(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function xe(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function be(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Ce(t,e,n,r)}function De(t){if(t instanceof Ce)return new Ce(t.h,t.s,t.l,t.opacity);if(t instanceof Jt||(t=de(t)),!t)return new Ce;if(t instanceof Ce)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,a=Math.min(e,n,r),i=Math.max(e,n,r),o=NaN,l=i-a,u=(i+a)/2;return l?(o=e===i?(n-r)/l+6*(n<r):n===i?(r-e)/l+2:(e-n)/l+4,l/=u<.5?i+a:2-i-a,o*=60):l=u>0&&u<1?0:o,new Ce(o,l,u,t.opacity)}function Ce(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Fe(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}Gt(Jt,de,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:fe,formatHex:fe,formatHsl:function(){return De(this).formatHsl()},formatRgb:he,toString:he}),Gt(ve,ye,Qt(Jt,{brighter:function(t){return t=null==t?Kt:Math.pow(Kt,t),new ve(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ve(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:we,formatHex:we,formatRgb:Ae,toString:Ae})),Gt(Ce,(function(t,e,n,r){return 1===arguments.length?De(t):new Ce(t,e,n,null==r?1:r)}),Qt(Jt,{brighter:function(t){return t=null==t?Kt:Math.pow(Kt,t),new Ce(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ce(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,a=2*n-r;return new ve(Fe(t>=240?t-240:t+120,a,r),Fe(t,a,r),Fe(t<120?t+240:t-120,a,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));const Me=Math.PI/180,ke=180/Math.PI,Te=4/29,_e=6/29,Se=3*_e*_e;function Be(t){if(t instanceof Ee)return new Ee(t.l,t.a,t.b,t.opacity);if(t instanceof ze)return Ue(t);t instanceof ve||(t=me(t));var e,n,r=Ye(t.r),a=Ye(t.g),i=Ye(t.b),o=Ie((.2225045*r+.7168786*a+.0606169*i)/1);return r===a&&a===i?e=n=o:(e=Ie((.4360747*r+.3850649*a+.1430804*i)/.96422),n=Ie((.0139322*r+.0971045*a+.7141733*i)/.82521)),new Ee(116*o-16,500*(e-o),200*(o-n),t.opacity)}function Ne(t,e,n,r){return 1===arguments.length?Be(t):new Ee(t,e,n,null==r?1:r)}function Ee(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function Ie(t){return t>.008856451679035631?Math.pow(t,1/3):t/Se+Te}function Le(t){return t>_e?t*t*t:Se*(t-Te)}function Pe(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Ye(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Ve(t){if(t instanceof ze)return new ze(t.h,t.c,t.l,t.opacity);if(t instanceof Ee||(t=Be(t)),0===t.a&&0===t.b)return new ze(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*ke;return new ze(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function ze(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function Ue(t){if(isNaN(t.h))return new Ee(t.l,0,0,t.opacity);var e=t.h*Me;return new Ee(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}Gt(Ee,Ne,Qt(Jt,{brighter:function(t){return new Ee(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Ee(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new ve(Pe(3.1338561*(e=.96422*Le(e))-1.6168667*(t=1*Le(t))-.4906146*(n=.82521*Le(n))),Pe(-.9787684*e+1.9161415*t+.033454*n),Pe(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),Gt(ze,(function(t,e,n,r){return 1===arguments.length?Ve(t):new ze(t,e,n,null==r?1:r)}),Qt(Jt,{brighter:function(t){return new ze(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new ze(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Ue(this).rgb()}}));var Oe,He,Re=0,We=0,qe=0,Xe=0,$e=0,je=0,Ze="object"==typeof performance&&performance.now?performance:Date,Ge="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Qe(){return $e||(Ge(Je),$e=Ze.now()+je)}function Je(){$e=0}function Ke(){this._call=this._time=this._next=null}function tn(t,e,n){var r=new Ke;return r.restart(t,e,n),r}function en(){$e=(Xe=Ze.now())+je,Re=We=0;try{!function(){Qe(),++Re;for(var t,e=Oe;e;)(t=$e-e._time)>=0&&e._call.call(null,t),e=e._next;--Re}()}finally{Re=0,function(){var t,e,n=Oe,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Oe=e);He=t,rn(r)}(),$e=0}}function nn(){var t=Ze.now(),e=t-Xe;e>1e3&&(je-=e,Xe=t)}function rn(t){Re||(We&&(We=clearTimeout(We)),t-$e>24?(t<1/0&&(We=setTimeout(en,t-Ze.now()-je)),qe&&(qe=clearInterval(qe))):(qe||(Xe=Ze.now(),qe=setInterval(nn,1e3)),Re=1,Ge(en)))}function an(t,e,n){var r=new Ke;return e=null==e?0:+e,r.restart((n=>{r.stop(),t(n+e)}),e,n),r}Ke.prototype=tn.prototype={constructor:Ke,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Qe():+n)+(null==e?0:+e),this._next||He===this||(He?He._next=this:Oe=this,He=this),this._call=t,this._time=n,rn()},stop:function(){this._call&&(this._call=null,this._time=1/0,rn())}};var on=B("start","end","cancel","interrupt"),ln=[];function un(t,e,n,r,a,i){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var r,a=t.__transition;function i(t){n.state=1,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}function o(i){var s,c,f,h;if(1!==n.state)return u();for(s in a)if((h=a[s]).name===n.name){if(3===h.state)return an(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete a[s]):+s<e&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete a[s])}if(an((function(){3===n.state&&(n.state=4,n.timer.restart(l,n.delay,n.time),l(i))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(f=n.tween.length),s=0,c=-1;s<f;++s)(h=n.tween[s].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=h);r.length=c+1}}function l(e){for(var a=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(u),n.state=5,1),i=-1,o=r.length;++i<o;)r[i].call(t,a);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),u())}function u(){for(var r in n.state=6,n.timer.stop(),delete a[e],a)return;delete t.__transition}a[e]=n,n.timer=tn(i,0,n.time)}(t,n,{name:e,index:r,group:a,on:on,tween:ln,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:0})}function sn(t,e){var n=fn(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function cn(t,e){var n=fn(t,e);if(n.state>3)throw new Error("too late; already running");return n}function fn(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var hn=t=>()=>t;function dn(t){return 1==(t=+t)?gn:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):hn(isNaN(e)?n:e)}}function gn(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):hn(isNaN(t)?e:t)}var pn=function t(e){var n=dn(e);function r(t,e){var r=n((t=ye(t)).r,(e=ye(e)).r),a=n(t.g,e.g),i=n(t.b,e.b),o=gn(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=a(e),t.b=i(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);function mn(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}var yn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,vn=new RegExp(yn.source,"g");function wn(t,e){var n,r,a,i=yn.lastIndex=vn.lastIndex=0,o=-1,l=[],u=[];for(t+="",e+="";(n=yn.exec(t))&&(r=vn.exec(e));)(a=r.index)>i&&(a=e.slice(i,a),l[o]?l[o]+=a:l[++o]=a),(n=n[0])===(r=r[0])?l[o]?l[o]+=r:l[++o]=r:(l[++o]=null,u.push({i:o,x:mn(n,r)})),i=vn.lastIndex;return i<e.length&&(a=e.slice(i),l[o]?l[o]+=a:l[++o]=a),l.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)l[(n=u[r]).i]=n.x(t);return l.join("")})}var An,xn=180/Math.PI,bn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Dn(t,e,n,r,a,i){var o,l,u;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(u=t*n+e*r)&&(n-=t*u,r-=e*u),(l=Math.sqrt(n*n+r*r))&&(n/=l,r/=l,u/=l),t*r<e*n&&(t=-t,e=-e,u=-u,o=-o),{translateX:a,translateY:i,rotate:Math.atan2(e,t)*xn,skewX:Math.atan(u)*xn,scaleX:o,scaleY:l}}function Cn(t,e,n,r){function a(t){return t.length?t.pop()+" ":""}return function(i,o){var l=[],u=[];return i=t(i),o=t(o),function(t,r,a,i,o,l){if(t!==a||r!==i){var u=o.push("translate(",null,e,null,n);l.push({i:u-4,x:mn(t,a)},{i:u-2,x:mn(r,i)})}else(a||i)&&o.push("translate("+a+e+i+n)}(i.translateX,i.translateY,o.translateX,o.translateY,l,u),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(a(n)+"rotate(",null,r)-2,x:mn(t,e)})):e&&n.push(a(n)+"rotate("+e+r)}(i.rotate,o.rotate,l,u),function(t,e,n,i){t!==e?i.push({i:n.push(a(n)+"skewX(",null,r)-2,x:mn(t,e)}):e&&n.push(a(n)+"skewX("+e+r)}(i.skewX,o.skewX,l,u),function(t,e,n,r,i,o){if(t!==n||e!==r){var l=i.push(a(i)+"scale(",null,",",null,")");o.push({i:l-4,x:mn(t,n)},{i:l-2,x:mn(e,r)})}else 1===n&&1===r||i.push(a(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,o.scaleX,o.scaleY,l,u),i=o=null,function(t){for(var e,n=-1,r=u.length;++n<r;)l[(e=u[n]).i]=e.x(t);return l.join("")}}}var Fn=Cn((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?bn:Dn(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),Mn=Cn((function(t){return null==t?bn:(An||(An=document.createElementNS("http://www.w3.org/2000/svg","g")),An.setAttribute("transform",t),(t=An.transform.baseVal.consolidate())?Dn((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):bn)}),", ",")",")");function kn(t,e){var n,r;return function(){var a=cn(this,t),i=a.tween;if(i!==n)for(var o=0,l=(r=n=i).length;o<l;++o)if(r[o].name===e){(r=r.slice()).splice(o,1);break}a.tween=r}}function Tn(t,e,n){var r,a;if("function"!=typeof n)throw new Error;return function(){var i=cn(this,t),o=i.tween;if(o!==r){a=(r=o).slice();for(var l={name:e,value:n},u=0,s=a.length;u<s;++u)if(a[u].name===e){a[u]=l;break}u===s&&a.push(l)}i.tween=a}}function _n(t,e,n){var r=t._id;return t.each((function(){var t=cn(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return fn(t,r).value[e]}}function Sn(t,e){var n;return("number"==typeof e?mn:e instanceof de?pn:(n=de(e))?(e=n,pn):wn)(t,e)}function Bn(t){return function(){this.removeAttribute(t)}}function Nn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function En(t,e,n){var r,a,i=n+"";return function(){var o=this.getAttribute(t);return o===i?null:o===r?a:a=e(r=o,n)}}function In(t,e,n){var r,a,i=n+"";return function(){var o=this.getAttributeNS(t.space,t.local);return o===i?null:o===r?a:a=e(r=o,n)}}function Ln(t,e,n){var r,a,i;return function(){var o,l,u=n(this);if(null!=u)return(o=this.getAttribute(t))===(l=u+"")?null:o===r&&l===a?i:(a=l,i=e(r=o,u));this.removeAttribute(t)}}function Pn(t,e,n){var r,a,i;return function(){var o,l,u=n(this);if(null!=u)return(o=this.getAttributeNS(t.space,t.local))===(l=u+"")?null:o===r&&l===a?i:(a=l,i=e(r=o,u));this.removeAttributeNS(t.space,t.local)}}function Yn(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}function Vn(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}function zn(t,e){var n,r;function a(){var a=e.apply(this,arguments);return a!==r&&(n=(r=a)&&Vn(t,a)),n}return a._value=e,a}function Un(t,e){var n,r;function a(){var a=e.apply(this,arguments);return a!==r&&(n=(r=a)&&Yn(t,a)),n}return a._value=e,a}function On(t,e){return function(){sn(this,t).delay=+e.apply(this,arguments)}}function Hn(t,e){return e=+e,function(){sn(this,t).delay=e}}function Rn(t,e){return function(){cn(this,t).duration=+e.apply(this,arguments)}}function Wn(t,e){return e=+e,function(){cn(this,t).duration=e}}function qn(t,e){if("function"!=typeof e)throw new Error;return function(){cn(this,t).ease=e}}function Xn(t,e,n){var r,a,i=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?sn:cn;return function(){var o=i(this,t),l=o.on;l!==r&&(a=(r=l).copy()).on(e,n),o.on=a}}var $n=jt.prototype.constructor;function jn(t){return function(){this.style.removeProperty(t)}}function Zn(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}function Gn(t,e,n){var r,a;function i(){var i=e.apply(this,arguments);return i!==a&&(r=(a=i)&&Zn(t,i,n)),r}return i._value=e,i}function Qn(t){return function(e){this.textContent=t.call(this,e)}}function Jn(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&Qn(r)),e}return r._value=t,r}var Kn=0;function tr(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function er(){return++Kn}var nr=jt.prototype;tr.prototype={constructor:tr,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=R(t));for(var r=this._groups,a=r.length,i=new Array(a),o=0;o<a;++o)for(var l,u,s=r[o],c=s.length,f=i[o]=new Array(c),h=0;h<c;++h)(l=s[h])&&(u=t.call(l,l.__data__,h,s))&&("__data__"in l&&(u.__data__=l.__data__),f[h]=u,un(f[h],e,n,h,f,fn(l,n)));return new tr(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=X(t));for(var r=this._groups,a=r.length,i=[],o=[],l=0;l<a;++l)for(var u,s=r[l],c=s.length,f=0;f<c;++f)if(u=s[f]){for(var h,d=t.call(u,u.__data__,f,s),g=fn(u,n),p=0,m=d.length;p<m;++p)(h=d[p])&&un(h,e,n,p,d,g);i.push(d),o.push(u)}return new tr(i,o,e,n)},filter:function(t){"function"!=typeof t&&(t=$(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],l=o.length,u=r[a]=[],s=0;s<l;++s)(i=o[s])&&t.call(i,i.__data__,s,o)&&u.push(i);return new tr(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),l=0;l<i;++l)for(var u,s=e[l],c=n[l],f=s.length,h=o[l]=new Array(f),d=0;d<f;++d)(u=s[d]||c[d])&&(h[d]=u);for(;l<r;++l)o[l]=e[l];return new tr(o,this._parents,this._name,this._id)},selection:function(){return new $n(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=er(),r=this._groups,a=r.length,i=0;i<a;++i)for(var o,l=r[i],u=l.length,s=0;s<u;++s)if(o=l[s]){var c=fn(o,e);un(o,t,n,s,l,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new tr(r,this._parents,t,n)},call:nr.call,nodes:nr.nodes,node:nr.node,size:nr.size,empty:nr.empty,each:nr.each,on:function(t,e){var n=this._id;return arguments.length<2?fn(this.node(),n).on.on(t):this.each(Xn(n,t,e))},attr:function(t,e){var n=V(t),r="transform"===n?Mn:Sn;return this.attrTween(t,"function"==typeof e?(n.local?Pn:Ln)(n,r,_n(this,"attr."+t,e)):null==e?(n.local?Nn:Bn)(n):(n.local?In:En)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=V(t);return this.tween(n,(r.local?zn:Un)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Fn:Sn;return null==e?this.styleTween(t,function(t,e){var n,r,a;return function(){var i=mt(this,t),o=(this.style.removeProperty(t),mt(this,t));return i===o?null:i===n&&o===r?a:a=e(n=i,r=o)}}(t,r)).on("end.style."+t,jn(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,a,i;return function(){var o=mt(this,t),l=n(this),u=l+"";return null==l&&(this.style.removeProperty(t),u=l=mt(this,t)),o===u?null:o===r&&u===a?i:(a=u,i=e(r=o,l))}}(t,r,_n(this,"style."+t,e))).each(function(t,e){var n,r,a,i,o="style."+e,l="end."+o;return function(){var u=cn(this,t),s=u.on,c=null==u.value[o]?i||(i=jn(e)):void 0;s===n&&a===c||(r=(n=s).copy()).on(l,a=c),u.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,a,i=n+"";return function(){var o=mt(this,t);return o===i?null:o===r?a:a=e(r=o,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,Gn(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(_n(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,Jn(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,a=fn(this.node(),n).tween,i=0,o=a.length;i<o;++i)if((r=a[i]).name===t)return r.value;return null}return this.each((null==e?kn:Tn)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?On:Hn)(e,t)):fn(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Rn:Wn)(e,t)):fn(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(qn(e,t)):fn(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;cn(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,r=n._id,a=n.size();return new Promise((function(i,o){var l={value:o},u={value:function(){0==--a&&i()}};n.each((function(){var n=cn(this,r),a=n.on;a!==t&&((e=(t=a).copy())._.cancel.push(l),e._.interrupt.push(l),e._.end.push(u)),n.on=e})),0===a&&i()}))},[Symbol.iterator]:nr[Symbol.iterator]};var rr={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function ar(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}jt.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,r,a,i=t.__transition,o=!0;if(i){for(a in e=null==e?null:e+"",i)(n=i[a]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete i[a]):o=!1;o&&delete t.__transition}}(this,t)}))},jt.prototype.transition=function(t){var e,n;t instanceof tr?(e=t._id,t=t._name):(e=er(),(n=rr).time=Qe(),t=null==t?null:t+"");for(var r=this._groups,a=r.length,i=0;i<a;++i)for(var o,l=r[i],u=l.length,s=0;s<u;++s)(o=l[s])&&un(o,t,e,s,l,n||ar(o,e));return new tr(r,this._parents,t,e)};const ir=Math.PI,or=2*ir,lr=or-1e-6;function ur(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function sr(){return new ur}function cr(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function fr(t){return(t=cr(Math.abs(t)))?t[1]:NaN}ur.prototype=sr.prototype={constructor:ur,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,a,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+a)+","+(this._y1=+i)},arcTo:function(t,e,n,r,a){t=+t,e=+e,n=+n,r=+r,a=+a;var i=this._x1,o=this._y1,l=n-t,u=r-e,s=i-t,c=o-e,f=s*s+c*c;if(a<0)throw new Error("negative radius: "+a);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>1e-6)if(Math.abs(c*l-u*s)>1e-6&&a){var h=n-i,d=r-o,g=l*l+u*u,p=h*h+d*d,m=Math.sqrt(g),y=Math.sqrt(f),v=a*Math.tan((ir-Math.acos((g+f-p)/(2*m*y)))/2),w=v/y,A=v/m;Math.abs(w-1)>1e-6&&(this._+="L"+(t+w*s)+","+(e+w*c)),this._+="A"+a+","+a+",0,0,"+ +(c*h>s*d)+","+(this._x1=t+A*l)+","+(this._y1=e+A*u)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,a,i){t=+t,e=+e,i=!!i;var o=(n=+n)*Math.cos(r),l=n*Math.sin(r),u=t+o,s=e+l,c=1^i,f=i?r-a:a-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+u+","+s:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-s)>1e-6)&&(this._+="L"+u+","+s),n&&(f<0&&(f=f%or+or),f>lr?this._+="A"+n+","+n+",0,1,"+c+","+(t-o)+","+(e-l)+"A"+n+","+n+",0,1,"+c+","+(this._x1=u)+","+(this._y1=s):f>1e-6&&(this._+="A"+n+","+n+",0,"+ +(f>=ir)+","+c+","+(this._x1=t+n*Math.cos(a))+","+(this._y1=e+n*Math.sin(a))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var hr,dr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function gr(t){if(!(e=dr.exec(t)))throw new Error("invalid format: "+t);var e;return new pr({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function pr(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function mr(t,e){var n=cr(t,e);if(!n)return t+"";var r=n[0],a=n[1];return a<0?"0."+new Array(-a).join("0")+r:r.length>a+1?r.slice(0,a+1)+"."+r.slice(a+1):r+new Array(a-r.length+2).join("0")}gr.prototype=pr.prototype,pr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var yr={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>mr(100*t,e),r:mr,s:function(t,e){var n=cr(t,e);if(!n)return t+"";var r=n[0],a=n[1],i=a-(hr=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,o=r.length;return i===o?r:i>o?r+new Array(i-o+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+cr(t,Math.max(0,e+i-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function vr(t){return t}var wr,Ar,xr,br=Array.prototype.map,Dr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Cr(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?vr:(e=br.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var a=t.length,i=[],o=0,l=e[0],u=0;a>0&&l>0&&(u+l+1>r&&(l=Math.max(1,r-u)),i.push(t.substring(a-=l,a+l)),!((u+=l+1)>r));)l=e[o=(o+1)%e.length];return i.reverse().join(n)}),a=void 0===t.currency?"":t.currency[0]+"",i=void 0===t.currency?"":t.currency[1]+"",o=void 0===t.decimal?".":t.decimal+"",l=void 0===t.numerals?vr:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(br.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",s=void 0===t.minus?"−":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=gr(t)).fill,n=t.align,f=t.sign,h=t.symbol,d=t.zero,g=t.width,p=t.comma,m=t.precision,y=t.trim,v=t.type;"n"===v?(p=!0,v="g"):yr[v]||(void 0===m&&(m=12),y=!0,v="g"),(d||"0"===e&&"="===n)&&(d=!0,e="0",n="=");var w="$"===h?a:"#"===h&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",A="$"===h?i:/[%p]/.test(v)?u:"",x=yr[v],b=/[defgprs%]/.test(v);function D(t){var a,i,u,h=w,D=A;if("c"===v)D=x(t)+D,t="";else{var C=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:x(Math.abs(t),m),y&&(t=function(t){t:for(var e,n=t.length,r=1,a=-1;r<n;++r)switch(t[r]){case".":a=e=r;break;case"0":0===a&&(a=r),e=r;break;default:if(!+t[r])break t;a>0&&(a=0)}return a>0?t.slice(0,a)+t.slice(e+1):t}(t)),C&&0==+t&&"+"!==f&&(C=!1),h=(C?"("===f?f:s:"-"===f||"("===f?"":f)+h,D=("s"===v?Dr[8+hr/3]:"")+D+(C&&"("===f?")":""),b)for(a=-1,i=t.length;++a<i;)if(48>(u=t.charCodeAt(a))||u>57){D=(46===u?o+t.slice(a+1):t.slice(a))+D,t=t.slice(0,a);break}}p&&!d&&(t=r(t,1/0));var F=h.length+t.length+D.length,M=F<g?new Array(g-F+1).join(e):"";switch(p&&d&&(t=r(M+t,M.length?g-D.length:1/0),M=""),n){case"<":t=h+t+D+M;break;case"=":t=h+M+t+D;break;case"^":t=M.slice(0,F=M.length>>1)+h+t+D+M.slice(F);break;default:t=M+h+t+D}return l(t)}return m=void 0===m?6:/[gprs]/.test(v)?Math.max(1,Math.min(21,m)):Math.max(0,Math.min(20,m)),D.toString=function(){return t+""},D}return{format:f,formatPrefix:function(t,e){var n=f(((t=gr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(fr(e)/3))),a=Math.pow(10,-r),i=Dr[8+r/3];return function(t){return n(a*t)+i}}}}wr=Cr({thousands:",",grouping:[3],currency:["$",""]}),Ar=wr.format,xr=wr.formatPrefix;function Fr(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):(t=>()=>t)(isNaN(t)?e:t)}function Mr(t,e){var n=Fr((t=Ne(t)).l,(e=Ne(e)).l),r=Fr(t.a,e.a),a=Fr(t.b,e.b),i=Fr(t.opacity,e.opacity);return function(e){return t.l=n(e),t.a=r(e),t.b=a(e),t.opacity=i(e),t+""}}function kr(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}var Tr=t=>()=>t;function _r(t){return 1==(t=+t)?Sr:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Tr(isNaN(e)?n:e)}}function Sr(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):Tr(isNaN(t)?e:t)}var Br=function t(e){var n=_r(e);function r(t,e){var r=n((t=ye(t)).r,(e=ye(e)).r),a=n(t.g,e.g),i=n(t.b,e.b),o=Sr(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=a(e),t.b=i(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);function Nr(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,a=e.slice();return function(i){for(n=0;n<r;++n)a[n]=t[n]*(1-i)+e[n]*i;return a}}function Er(t,e){var n,r=e?e.length:0,a=t?Math.min(r,t.length):0,i=new Array(a),o=new Array(r);for(n=0;n<a;++n)i[n]=Ur(t[n],e[n]);for(;n<r;++n)o[n]=e[n];return function(t){for(n=0;n<a;++n)o[n]=i[n](t);return o}}function Ir(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}}function Lr(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function Pr(t,e){var n,r={},a={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Ur(t[n],e[n]):a[n]=e[n];return function(t){for(n in r)a[n]=r[n](t);return a}}var Yr=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Vr=new RegExp(Yr.source,"g");function zr(t,e){var n,r,a,i=Yr.lastIndex=Vr.lastIndex=0,o=-1,l=[],u=[];for(t+="",e+="";(n=Yr.exec(t))&&(r=Vr.exec(e));)(a=r.index)>i&&(a=e.slice(i,a),l[o]?l[o]+=a:l[++o]=a),(n=n[0])===(r=r[0])?l[o]?l[o]+=r:l[++o]=r:(l[++o]=null,u.push({i:o,x:Lr(n,r)})),i=Vr.lastIndex;return i<e.length&&(a=e.slice(i),l[o]?l[o]+=a:l[++o]=a),l.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)l[(n=u[r]).i]=n.x(t);return l.join("")})}function Ur(t,e){var n,r=typeof e;return null==e||"boolean"===r?Tr(e):("number"===r?Lr:"string"===r?(n=de(e))?(e=n,Br):zr:e instanceof de?Br:e instanceof Date?Ir:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}(e)?Nr:Array.isArray(e)?Er:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Pr:Lr)(t,e)}function Or(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}function Hr(t){return+t}var Rr=[0,1];function Wr(t){return t}function qr(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:function(t){return function(){return t}}(isNaN(e)?NaN:.5)}function Xr(t,e,n){var r=t[0],a=t[1],i=e[0],o=e[1];return a<r?(r=qr(a,r),i=n(o,i)):(r=qr(r,a),i=n(i,o)),function(t){return i(r(t))}}function $r(t,e,n){var r=Math.min(t.length,e.length)-1,a=new Array(r),i=new Array(r),l=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++l<r;)a[l]=qr(t[l],t[l+1]),i[l]=n(e[l],e[l+1]);return function(e){var n=o(t,e,1,r)-1;return i[n](a[n](e))}}function jr(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Zr(){var t,e,n,r,a,i,o=Rr,l=Rr,u=Ur,s=Wr;function c(){var t,e,n,u=Math.min(o.length,l.length);return s!==Wr&&(t=o[0],e=o[u-1],t>e&&(n=t,t=e,e=n),s=function(n){return Math.max(t,Math.min(e,n))}),r=u>2?$r:Xr,a=i=null,f}function f(e){return null==e||isNaN(e=+e)?n:(a||(a=r(o.map(t),l,u)))(t(s(e)))}return f.invert=function(n){return s(e((i||(i=r(l,o.map(t),Lr)))(n)))},f.domain=function(t){return arguments.length?(o=Array.from(t,Hr),c()):o.slice()},f.range=function(t){return arguments.length?(l=Array.from(t),c()):l.slice()},f.rangeRound=function(t){return l=Array.from(t),u=Or,c()},f.clamp=function(t){return arguments.length?(s=!!t||Wr,c()):s!==Wr},f.interpolate=function(t){return arguments.length?(u=t,c()):u},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,c()}}function Gr(){return Zr()(Wr,Wr)}function Qr(t,e,n,r){var a,i=h(t,e,n);switch((r=gr(null==r?",f":r)).type){case"s":var o=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(a=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(fr(e)/3)))-fr(Math.abs(t)))}(i,o))||(r.precision=a),xr(r,o);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(a=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,fr(e)-fr(t))+1}(i,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=a-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(a=function(t){return Math.max(0,-fr(Math.abs(t)))}(i))||(r.precision=a-2*("%"===r.type))}return Ar(r)}function Jr(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var r,a,i,o,l=-1;if(n=+n,(t=+t)==(e=+e)&&n>0)return[t];if((r=e<t)&&(a=t,t=e,e=a),0===(o=f(t,e,n))||!isFinite(o))return[];if(o>0){let n=Math.round(t/o),r=Math.round(e/o);for(n*o<t&&++n,r*o>e&&--r,i=new Array(a=r-n+1);++l<a;)i[l]=(n+l)*o}else{o=-o;let n=Math.round(t*o),r=Math.round(e*o);for(n/o<t&&++n,r/o>e&&--r,i=new Array(a=r-n+1);++l<a;)i[l]=(n+l)/o}return r&&i.reverse(),i}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return Qr(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,a,i=e(),o=0,l=i.length-1,u=i[o],s=i[l],c=10;for(s<u&&(a=u,u=s,s=a,a=o,o=l,l=a);c-- >0;){if((a=f(u,s,n))===r)return i[o]=u,i[l]=s,e(i);if(a>0)u=Math.floor(u/a)*a,s=Math.ceil(s/a)*a;else{if(!(a<0))break;u=Math.ceil(u*a)/a,s=Math.floor(s*a)/a}r=a}return t},t}function Kr(){var t=Gr();return t.copy=function(){return jr(t,Kr())},kr.apply(t,arguments),Jr(t)}var ta=new Date,ea=new Date;function na(t,e,n,r){function a(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return a.floor=function(e){return t(e=new Date(+e)),e},a.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},a.round=function(t){var e=a(t),n=a.ceil(t);return t-e<n-t?e:n},a.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},a.range=function(n,r,i){var o,l=[];if(n=a.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return l;do{l.push(o=new Date(+n)),e(n,i),t(n)}while(o<n&&n<r);return l},a.filter=function(n){return na((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(a.count=function(e,r){return ta.setTime(+e),ea.setTime(+r),t(ta),t(ea),Math.floor(n(ta,ea))},a.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?a.filter(r?function(e){return r(e)%t==0}:function(e){return a.count(0,e)%t==0}):a:null}),a}var ra=na((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t}));ra.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?na((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):ra:null};var aa=na((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()})),ia=na((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getMinutes()})),oa=na((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()})),la=na((t=>t.setHours(0,0,0,0)),((t,e)=>t.setDate(t.getDate()+e)),((t,e)=>(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/864e5),(t=>t.getDate()-1));function ua(t){return na((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var sa=ua(0),ca=ua(1);ua(2),ua(3);var fa=ua(4);ua(5),ua(6);var ha=na((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),da=na((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));da.every=function(t){return isFinite(t=Math.floor(t))&&t>0?na((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null},na((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getUTCMinutes()})),na((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}));var ga=na((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}));function pa(t){return na((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/6048e5}))}var ma=pa(0),ya=pa(1);pa(2),pa(3);var va=pa(4);pa(5),pa(6),na((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()}));var wa=na((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));wa.every=function(t){return isFinite(t=Math.floor(t))&&t>0?na((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};const[Aa,xa]=function(t,e,n,r,a,o){const l=[[aa,1,1e3],[aa,5,5e3],[aa,15,15e3],[aa,30,3e4],[o,1,6e4],[o,5,3e5],[o,15,9e5],[o,30,18e5],[a,1,36e5],[a,3,108e5],[a,6,216e5],[a,12,432e5],[r,1,864e5],[r,2,1728e5],[n,1,6048e5],[e,1,2592e6],[e,3,7776e6],[t,1,31536e6]];function u(e,n,r){const a=Math.abs(n-e)/r,o=i((([,,t])=>t)).right(l,a);if(o===l.length)return t.every(h(e/31536e6,n/31536e6,r));if(0===o)return ra.every(Math.max(h(e,n,r),1));const[u,s]=l[a/l[o-1][2]<l[o][2]/a?o-1:o];return u.every(s)}return[function(t,e,n){const r=e<t;r&&([t,e]=[e,t]);const a=n&&"function"==typeof n.range?n:u(t,e,n),i=a?a.range(t,+e+1):[];return r?i.reverse():i},u]}(da,ha,sa,la,oa,ia);function ba(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Da(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Ca(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var Fa,Ma,ka,Ta,_a,Sa={"-":"",_:" ",0:"0"},Ba=/^\s*\d+/,Na=/^%/,Ea=/[\\^$*+?|[\]().{}]/g;function Ia(t,e,n){var r=t<0?"-":"",a=(r?-t:t)+"",i=a.length;return r+(i<n?new Array(n-i+1).join(e)+a:a)}function La(t){return t.replace(Ea,"\\$&")}function Pa(t){return new RegExp("^(?:"+t.map(La).join("|")+")","i")}function Ya(t){return new Map(t.map(((t,e)=>[t.toLowerCase(),e])))}function Va(t,e,n){var r=Ba.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function za(t,e,n){var r=Ba.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function Ua(t,e,n){var r=Ba.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function Oa(t,e,n){var r=Ba.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function Ha(t,e,n){var r=Ba.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function Ra(t,e,n){var r=Ba.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function Wa(t,e,n){var r=Ba.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function qa(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Xa(t,e,n){var r=Ba.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function $a(t,e,n){var r=Ba.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function ja(t,e,n){var r=Ba.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Za(t,e,n){var r=Ba.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function Ga(t,e,n){var r=Ba.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function Qa(t,e,n){var r=Ba.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function Ja(t,e,n){var r=Ba.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Ka(t,e,n){var r=Ba.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function ti(t,e,n){var r=Ba.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function ei(t,e,n){var r=Na.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function ni(t,e,n){var r=Ba.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function ri(t,e,n){var r=Ba.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function ai(t,e){return Ia(t.getDate(),e,2)}function ii(t,e){return Ia(t.getHours(),e,2)}function oi(t,e){return Ia(t.getHours()%12||12,e,2)}function li(t,e){return Ia(1+la.count(da(t),t),e,3)}function ui(t,e){return Ia(t.getMilliseconds(),e,3)}function si(t,e){return ui(t,e)+"000"}function ci(t,e){return Ia(t.getMonth()+1,e,2)}function fi(t,e){return Ia(t.getMinutes(),e,2)}function hi(t,e){return Ia(t.getSeconds(),e,2)}function di(t){var e=t.getDay();return 0===e?7:e}function gi(t,e){return Ia(sa.count(da(t)-1,t),e,2)}function pi(t){var e=t.getDay();return e>=4||0===e?fa(t):fa.ceil(t)}function mi(t,e){return t=pi(t),Ia(fa.count(da(t),t)+(4===da(t).getDay()),e,2)}function yi(t){return t.getDay()}function vi(t,e){return Ia(ca.count(da(t)-1,t),e,2)}function wi(t,e){return Ia(t.getFullYear()%100,e,2)}function Ai(t,e){return Ia((t=pi(t)).getFullYear()%100,e,2)}function xi(t,e){return Ia(t.getFullYear()%1e4,e,4)}function bi(t,e){var n=t.getDay();return Ia((t=n>=4||0===n?fa(t):fa.ceil(t)).getFullYear()%1e4,e,4)}function Di(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Ia(e/60|0,"0",2)+Ia(e%60,"0",2)}function Ci(t,e){return Ia(t.getUTCDate(),e,2)}function Fi(t,e){return Ia(t.getUTCHours(),e,2)}function Mi(t,e){return Ia(t.getUTCHours()%12||12,e,2)}function ki(t,e){return Ia(1+ga.count(wa(t),t),e,3)}function Ti(t,e){return Ia(t.getUTCMilliseconds(),e,3)}function _i(t,e){return Ti(t,e)+"000"}function Si(t,e){return Ia(t.getUTCMonth()+1,e,2)}function Bi(t,e){return Ia(t.getUTCMinutes(),e,2)}function Ni(t,e){return Ia(t.getUTCSeconds(),e,2)}function Ei(t){var e=t.getUTCDay();return 0===e?7:e}function Ii(t,e){return Ia(ma.count(wa(t)-1,t),e,2)}function Li(t){var e=t.getUTCDay();return e>=4||0===e?va(t):va.ceil(t)}function Pi(t,e){return t=Li(t),Ia(va.count(wa(t),t)+(4===wa(t).getUTCDay()),e,2)}function Yi(t){return t.getUTCDay()}function Vi(t,e){return Ia(ya.count(wa(t)-1,t),e,2)}function zi(t,e){return Ia(t.getUTCFullYear()%100,e,2)}function Ui(t,e){return Ia((t=Li(t)).getUTCFullYear()%100,e,2)}function Oi(t,e){return Ia(t.getUTCFullYear()%1e4,e,4)}function Hi(t,e){var n=t.getUTCDay();return Ia((t=n>=4||0===n?va(t):va.ceil(t)).getUTCFullYear()%1e4,e,4)}function Ri(){return"+0000"}function Wi(){return"%"}function qi(t){return+t}function Xi(t){return Math.floor(+t/1e3)}function $i(t){return new Date(t)}function ji(t){return t instanceof Date?+t:+new Date(+t)}function Zi(t,e,n,r,a,i,o,l,u,s){var c=Gr(),f=c.invert,h=c.domain,d=s(".%L"),g=s(":%S"),p=s("%I:%M"),m=s("%I %p"),y=s("%a %d"),v=s("%b %d"),w=s("%B"),A=s("%Y");function x(t){return(u(t)<t?d:l(t)<t?g:o(t)<t?p:i(t)<t?m:r(t)<t?a(t)<t?y:v:n(t)<t?w:A)(t)}return c.invert=function(t){return new Date(f(t))},c.domain=function(t){return arguments.length?h(Array.from(t,ji)):h().map($i)},c.ticks=function(e){var n=h();return t(n[0],n[n.length-1],null==e?10:e)},c.tickFormat=function(t,e){return null==e?x:s(e)},c.nice=function(t){var n=h();return t&&"function"==typeof t.range||(t=e(n[0],n[n.length-1],null==t?10:t)),t?h(function(t,e){var n,r=0,a=(t=t.slice()).length-1,i=t[r],o=t[a];return o<i&&(n=r,r=a,a=n,n=i,i=o,o=n),t[r]=e.floor(i),t[a]=e.ceil(o),t}(n,t)):c},c.copy=function(){return jr(c,Zi(t,e,n,r,a,i,o,l,u,s))},c}function Gi(t){return function(){return t}}function Qi(t){this._context=t}function Ji(t){return new Qi(t)}function Ki(t){return t[0]}function to(t){return t[1]}function eo(t,e){var n=Gi(!0),r=null,a=Ji,i=null;function o(o){var l,u,s,c=(o=function(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}(o)).length,f=!1;for(null==r&&(i=a(s=sr())),l=0;l<=c;++l)!(l<c&&n(u=o[l],l,o))===f&&((f=!f)?i.lineStart():i.lineEnd()),f&&i.point(+t(u,l,o),+e(u,l,o));if(s)return i=null,s+""||null}return t="function"==typeof t?t:void 0===t?Ki:Gi(t),e="function"==typeof e?e:void 0===e?to:Gi(e),o.x=function(e){return arguments.length?(t="function"==typeof e?e:Gi(+e),o):t},o.y=function(t){return arguments.length?(e="function"==typeof t?t:Gi(+t),o):e},o.defined=function(t){return arguments.length?(n="function"==typeof t?t:Gi(!!t),o):n},o.curve=function(t){return arguments.length?(a=t,null!=r&&(i=a(r)),o):a},o.context=function(t){return arguments.length?(null==t?r=i=null:i=a(r=t),o):r},o}!function(t){Fa=function(t){var e=t.dateTime,n=t.date,r=t.time,a=t.periods,i=t.days,o=t.shortDays,l=t.months,u=t.shortMonths,s=Pa(a),c=Ya(a),f=Pa(i),h=Ya(i),d=Pa(o),g=Ya(o),p=Pa(l),m=Ya(l),y=Pa(u),v=Ya(u),w={a:function(t){return o[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return l[t.getMonth()]},c:null,d:ai,e:ai,f:si,g:Ai,G:bi,H:ii,I:oi,j:li,L:ui,m:ci,M:fi,p:function(t){return a[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:qi,s:Xi,S:hi,u:di,U:gi,V:mi,w:yi,W:vi,x:null,X:null,y:wi,Y:xi,Z:Di,"%":Wi},A={a:function(t){return o[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return l[t.getUTCMonth()]},c:null,d:Ci,e:Ci,f:_i,g:Ui,G:Hi,H:Fi,I:Mi,j:ki,L:Ti,m:Si,M:Bi,p:function(t){return a[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:qi,s:Xi,S:Ni,u:Ei,U:Ii,V:Pi,w:Yi,W:Vi,x:null,X:null,y:zi,Y:Oi,Z:Ri,"%":Wi},x={a:function(t,e,n){var r=d.exec(e.slice(n));return r?(t.w=g.get(r[0].toLowerCase()),n+r[0].length):-1},A:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.w=h.get(r[0].toLowerCase()),n+r[0].length):-1},b:function(t,e,n){var r=y.exec(e.slice(n));return r?(t.m=v.get(r[0].toLowerCase()),n+r[0].length):-1},B:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.m=m.get(r[0].toLowerCase()),n+r[0].length):-1},c:function(t,n,r){return C(t,e,n,r)},d:ja,e:ja,f:ti,g:Wa,G:Ra,H:Ga,I:Ga,j:Za,L:Ka,m:$a,M:Qa,p:function(t,e,n){var r=s.exec(e.slice(n));return r?(t.p=c.get(r[0].toLowerCase()),n+r[0].length):-1},q:Xa,Q:ni,s:ri,S:Ja,u:za,U:Ua,V:Oa,w:Va,W:Ha,x:function(t,e,r){return C(t,n,e,r)},X:function(t,e,n){return C(t,r,e,n)},y:Wa,Y:Ra,Z:qa,"%":ei};function b(t,e){return function(n){var r,a,i,o=[],l=-1,u=0,s=t.length;for(n instanceof Date||(n=new Date(+n));++l<s;)37===t.charCodeAt(l)&&(o.push(t.slice(u,l)),null!=(a=Sa[r=t.charAt(++l)])?r=t.charAt(++l):a="e"===r?" ":"0",(i=e[r])&&(r=i(n,a)),o.push(r),u=l+1);return o.push(t.slice(u,l)),o.join("")}}function D(t,e){return function(n){var r,a,i=Ca(1900,void 0,1);if(C(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("s"in i)return new Date(1e3*i.s+("L"in i?i.L:0));if(e&&!("Z"in i)&&(i.Z=0),"p"in i&&(i.H=i.H%12+12*i.p),void 0===i.m&&(i.m="q"in i?i.q:0),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(a=(r=Da(Ca(i.y,0,1))).getUTCDay(),r=a>4||0===a?ya.ceil(r):ya(r),r=ga.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(a=(r=ba(Ca(i.y,0,1))).getDay(),r=a>4||0===a?ca.ceil(r):ca(r),r=la.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),a="Z"in i?Da(Ca(i.y,0,1)).getUTCDay():ba(Ca(i.y,0,1)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(a+5)%7:i.w+7*i.U-(a+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Da(i)):ba(i)}}function C(t,e,n,r){for(var a,i,o=0,l=e.length,u=n.length;o<l;){if(r>=u)return-1;if(37===(a=e.charCodeAt(o++))){if(a=e.charAt(o++),!(i=x[a in Sa?e.charAt(o++):a])||(r=i(t,n,r))<0)return-1}else if(a!=n.charCodeAt(r++))return-1}return r}return w.x=b(n,w),w.X=b(r,w),w.c=b(e,w),A.x=b(n,A),A.X=b(r,A),A.c=b(e,A),{format:function(t){var e=b(t+="",w);return e.toString=function(){return t},e},parse:function(t){var e=D(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=b(t+="",A);return e.toString=function(){return t},e},utcParse:function(t){var e=D(t+="",!0);return e.toString=function(){return t},e}}}(t),Ma=Fa.format,Fa.parse,Fa.utcFormat,Fa.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]}),Qi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}},function(t){t[t.Tag=0]="Tag",t[t.Frontmatter=1]="Frontmatter",t[t.Wiki=2]="Wiki",t[t.Text=3]="Text",t[t.dvField=4]="dvField",t[t.Table=5]="Table",t[t.FileMeta=6]="FileMeta",t[t.Task=7]="Task"}(ka||(ka={})),function(t){t[t.Line=0]="Line",t[t.Bar=1]="Bar",t[t.Pie=2]="Pie",t[t.Radar=3]="Radar",t[t.Summary=4]="Summary",t[t.Table=5]="Table",t[t.Month=6]="Month",t[t.Heatmap=7]="Heatmap",t[t.Bullet=8]="Bullet",t[t.Unknown=9]="Unknown"}(Ta||(Ta={})),function(t){t[t.Number=0]="Number",t[t.Int=1]="Int",t[t.Date=2]="Date",t[t.Time=3]="Time",t[t.DateTime=4]="DateTime",t[t.String=5]="String"}(_a||(_a={}));class no{constructor(t,e){this.date=t,this.value=e}}class ro{constructor(t,e,n){if(this.type=e,this.subType="",this.target=n,this.separator="/",this.id=t,this.accessor=-1,this.accessor1=-1,this.accessor2=-1,this.valueType=_a.Number,this.usedAsXDataset=!1,this.numTargets=0,e===ka.Table){let t,e=new RegExp("\\[(?<accessor>[0-9]+)\\]\\[(?<accessor1>[0-9]+)\\](\\[(?<accessor2>[0-9]+)\\])?","gm");for(;t=e.exec(n);)if(void 0!==t.groups.accessor){let r=parseFloat(t.groups.accessor);if(Number.isNumber(r)&&void 0!==t.groups.accessor1){let a=parseFloat(t.groups.accessor1);if(Number.isNumber(a)){let i;void 0!==t.groups.accessor2&&(i=parseFloat(t.groups.accessor2)),this.accessor=r,this.accessor1=a,Number.isNumber(i)&&(this.accessor2=i),this.parentTarget=n.replace(e,"")}break}}}else{let t,e=new RegExp("\\[(?<accessor>[0-9]+)\\]","gm");for(;t=e.exec(n);)if(void 0!==t.groups.accessor){let r=parseFloat(t.groups.accessor);Number.isNumber(r)&&(this.accessor=r,this.parentTarget=n.replace(e,""));break}}}equalTo(t){return this.type===t.type&&this.target===t.target}getType(){return this.type}getSubType(){return this.subType}setSubType(t){this.subType=t}getTarget(){return this.target}getParentTarget(){return this.parentTarget}getId(){return this.id}getAccessor(t=0){switch(t){case 0:return this.accessor;case 1:return this.accessor1;case 2:return this.accessor2}return null}setSeparator(t){this.separator=t}getSeparator(){return this.separator}addNumTargets(t=1){this.numTargets=this.numTargets+t}getNumTargets(){return this.numTargets}}class ao{constructor(t,e){this.currentIndex=0,this.name="untitled",this.query=e,this.values=[],this.parent=t,this.id=-1,this.yMin=null,this.yMax=null,this.startDate=null,this.endDate=null,this.numTargets=0,this.lineInfo=null,this.barInfo=null,this.valueType=e.valueType;for(let e=0;e<t.getDates().length;e++)this.values.push(null)}getName(){return this.name}setName(t){this.name=t}getId(){return this.id}setId(t){this.id=t}addNumTargets(t){this.numTargets=this.numTargets+t}getNumTargets(){return this.numTargets}getValue(t,e=0){let n=this.parent.getIndexOfDate(t)+Math.floor(e);return n>=0&&n<this.values.length?this.values[n]:null}setValue(t,e){let n=this.parent.getIndexOfDate(t);n>=0&&(this.values[n]=e,(null===this.yMin||e<this.yMin)&&(this.yMin=e),(null===this.yMax||e>this.yMax)&&(this.yMax=e),(null===this.startDate||t<this.startDate)&&(this.startDate=t.clone()),(null===this.endDate||t>this.endDate)&&(this.endDate=t.clone()))}getYMin(){return this.yMin}getYMax(){return this.yMax}getStartDate(){return this.startDate}getEndDate(){return this.endDate}shift(t){for(let e=0;e<this.values.length;e++)null!==this.values[e]&&(this.values[e]=this.values[e]+t);this.yMin=this.yMin+t,this.yMax=this.yMax+t}setPenalty(t){for(let e=0;e<this.values.length;e++)null===this.values[e]&&(this.values[e]=t,t<this.yMin&&(this.yMin=t),t>this.yMax&&(this.yMax=t))}getQuery(){return this.query}accumulateValues(){let t=0;for(let e=0;e<this.values.length;e++)null!==this.values[e]&&(t+=this.values[e]),this.values[e]=t,t<this.yMin&&(this.yMin=t),t>this.yMax&&(this.yMax=t)}getValues(){return this.values}getLength(){return this.values.length}getLengthNotNull(){let t=0;for(let e=0;e<this.values.length;e++)null!==this.values[e]&&t++;return t}next(){if(this.currentIndex<this.values.length){let t=this.currentIndex++;return{done:!1,value:new no(this.parent.getDates()[t],this.values[t])}}return this.currentIndex=0,{done:!0,value:null}}[Symbol.iterator](){return this}}class io{constructor(t,e){this.currentIndex=0,this.dates=[],this.datasets=[];const n=t.creationData().format.toString();for(let r=t.clone();r<=e;r.add(1,"days")){let t=window.moment(r.format(n),n,!0);this.dates.push(t)}}createDataset(t,e){let n=new ao(this,t);return n.setId(t.getId()),e&&n.setName(e.datasetName[t.getId()]),this.datasets.push(n),n}getIndexOfDate(t){const e=t.creationData().format.toString();for(let n=0;n<this.dates.length;n++)if(this.dates[n].format(e)===t.format(e))return n;return-1}getDatasetByQuery(t){for(let e of this.datasets)if(e.getQuery().equalTo(t))return e;return null}getDatasetById(t){for(let e of this.datasets)if(e.getId()===t)return e;return null}getXDatasetIds(){let t=[];for(let e of this.datasets)if(e.getQuery().usedAsXDataset){let n=e.getQuery().getId();t.includes(n)||-1===n||t.push(n)}return t}getDates(){return this.dates}getNames(){let t=[];for(let e of this.datasets)t.push(e.getName());return t}next(){return this.currentIndex<this.datasets.length?{done:!1,value:this.datasets[this.currentIndex++]}:(this.currentIndex=0,{done:!0,value:null})}[Symbol.iterator](){return this}}class oo{constructor(t){this.queries=t,this.xDataset=[],this.folder="/",this.dateFormat="YYYY-MM-DD",this.dateFormatPrefix="",this.dateFormatSuffix="",this.startDate=null,this.endDate=null,this.datasetName=[],this.constValue=[1],this.ignoreAttachedValue=[],this.ignoreZeroValue=[],this.accum=[],this.penalty=[],this.valueShift=[],this.valueType=[],this.dataAreaSize=new yo(300,300),this.margin=new vo(10,10,10,10),this.tooltipSize=new yo(90,45),this.fixedScale=1,this.fitPanelWidth=!1,this.output=[],this.line=[],this.bar=[],this.pie=[],this.summary=[],this.month=[],this.heatmap=[],this.bullet=[],this.datasets=null}getQueryById(t){for(let e of this.queries)if(e.getId()===t)return e}}class lo{constructor(){}}class uo extends lo{constructor(){super(),this.title="",this.xAxisLabel="Date",this.xAxisColor="",this.xAxisLabelColor="",this.yAxisLabel=[],this.yAxisColor=[],this.yAxisLabelColor=[],this.yAxisUnit=[],this.yMin=[],this.yMax=[],this.reverseYAxis=[],this.allowInspectData=!0,this.showLegend=!1,this.legendPosition="",this.legendOrientation="",this.legendBgColor="",this.legendBorderColor="",this.chartType=Ta.Unknown}GetChartType(){return this.chartType}}class so extends uo{constructor(){super(),this.lineColor=[],this.lineWidth=[],this.showLine=[],this.showPoint=[],this.pointColor=[],this.pointBorderColor=[],this.pointBorderWidth=[],this.pointSize=[],this.fillGap=[],this.yAxisLocation=[]}GetChartType(){return Ta.Line}}class co extends uo{constructor(){super(),this.barColor=[],this.yAxisLocation=[]}GetChartType(){return Ta.Bar}}class fo extends lo{constructor(){super(),this.title="",this.data=[],this.dataColor=[],this.ratioInnerRadius=0}}class ho extends lo{constructor(){super(),this.template="",this.style=""}}class go extends lo{constructor(){super(),this.mode="circle",this.dataset=[],this.startWeekOn="Sun",this.threshold=[],this.yMin=[],this.yMax=[],this.showCircle=!0,this.color=null,this.dimNotInMonth=!0,this.showStreak=!0,this.showTodayRing=!0,this.showSelectedValue=!0,this.showSelectedRing=!0,this.circleColor=null,this.circleColorByValue=!1,this.headerYearColor=null,this.headerMonthColor=null,this.dividingLineColor=null,this.todayRingColor="",this.selectedRingColor="firebrick",this.initMonth="",this.selectedDate="",this.selectedDataset=null}}class po{constructor(){this.dataset="0",this.startWeekOn="Sun",this.orientation="vertical",this.yMin=null,this.yMax=null,this.color=null}}class mo extends lo{constructor(){super(),this.title="",this.dataset="0",this.orientation="horizontal",this.value="",this.valueUnit="",this.valueColor="#69b3a2",this.range=[],this.rangeColor=[],this.showMarker=!1,this.markerValue=0,this.markerColor=""}}class yo{constructor(t,e){this.width=t,this.height=e}}class vo{constructor(t,e,n,r){this.top=t,this.right=e,this.bottom=n,this.left=r}}class wo{constructor(t){if(this.translateX=0,this.translateY=0,"string"==typeof t){let e=t.match(/translate\(\s*(?<x>[\d\.\/-]+)\s*,\s*(?<y>[\d\.\/-]+)\s*\)/).groups;e&&(this.translateX=parseFloat(e.x),this.translateY=parseFloat(e.y))}}}class Ao{constructor(t,e){this.filePath=t,this.tableIndex=e,this.xDataset=null,this.yDatasets=[]}}const xo=["HH:mm","HH:m","H:mm","H:m","hh:mm A","hh:mm a","hh:m A","hh:m a","h:mm A","h:mm a","h:m A","h:m a"];function bo(t,e){let n=e;t.length>4&&t.startsWith("[[")&&t.endsWith("]]")&&(t=t.substring(2,t.length-2)),"iso-8601"===e.toLowerCase()&&(n=window.moment.ISO_8601);let r=window.moment(t,n,!0);return r=r.startOf("day"),r}function Do(t,e){let n=null;const r=/^(?<value>[\-\+]?[0-9]+)(?<unit>[dwmy])$/;if(r.test(t)){let a=r.exec(t);if(void 0!==a.groups&&void 0!==a.groups.value&&void 0!==a.groups.unit){let t=parseFloat(a.groups.value),r=a.groups.unit;n=Mo(e),"d"===r?n=n.add(t,"days"):"w"===r?n=n.add(t,"weeks"):"m"===r?n=n.add(t,"months"):"y"===r&&(n=n.add(t,"years"))}}return n&&n.isValid()?n:null}function Co(t,e){return null==t?null:"iso-8601"===e.toLowerCase()?t.format():t.format(e)}function Fo(t,e){return bo(Co(window.moment(t),e),e)}function Mo(t){return bo(Co(window.moment(),t),t)}function ko(t,e){for(var n=(e=e.replace(/^\./,"")).split("."),r=0,a=n.length;r<a;++r){var i=n[r];if(!(i in t))return;t=t[i]}return t}function To(t,e){const n=Array.from(t),r=n.findIndex((t=>t!==e)),a=n.reverse().findIndex((t=>t!==e));return-1===r&&-1===a?t:t.substring(r,t.length-a)}function _o(t){let e=null,n=_a.Number;if("string"==typeof t)if(t.includes(":")){let r=!1;t.startsWith("-")&&(r=!0,t=t.substring(1));let a=window.moment(t,xo,!0);a.isValid()&&(e=a.diff(window.moment("00:00","HH:mm",!0),"seconds"),r&&(e*=-1),n=_a.Time)}else e=parseFloat(t);else"number"==typeof t&&(e=t);return{type:n,value:e}}function So(t,e="",n=""){var r=Zt("body").append("svg");let a=r.append("text").text(t).attr("x",-99999).attr("y",-99999);e&&a.attr("class",e),n&&a.attr("transform","rotate("+n+")");var i=r.node().getBBox();return r.remove(),{width:i.width,height:i.height}}function Bo(t,e,n){let r=(0|parseFloat(t.attr("width")))+e,a=(0|parseFloat(t.attr("height")))+n;t.attr("width",r),t.attr("height",a)}function No(t,e,n){let r=new wo(t.attr("transform"));t.attr("transform","translate("+(r.translateX+e)+","+(r.translateY+n)+")")}function Eo(t){return t=(t=(t=t.replace(/(^\\s\*)|(\\s\*$)/gi,"")).replace(/\[ \]{2,}/gi," ")).replace(/\\n /,"\\n")}l((function(t,e){var n,r,a,i,o,l,u,s,c,f,h,d,g,p,m,y,v;n="Compound",r="MemberExpression",a="Literal",i=function(t,e){var n=new Error(t+" at character "+e);throw n.index=e,n.description=t,n},u={"||":1,"&&":2,"|":3,"^":4,"&":5,"==":6,"!=":6,"===":6,"!==":6,"<":7,">":7,"<=":7,">=":7,"<<":8,">>":8,">>>":8,"+":9,"-":9,"*":10,"/":10,"%":10},c=(s=function(t){var e,n=0;for(var r in t)(e=r.length)>n&&t.hasOwnProperty(r)&&(n=e);return n})(l={"-":o=!0,"!":o,"~":o,"+":o}),f=s(u),h={true:!0,false:!1,null:null},d=function(t){return u[t]||0},g=function(t,e,n){return{type:"||"===t||"&&"===t?"LogicalExpression":"BinaryExpression",operator:t,left:e,right:n}},p=function(t){return t>=48&&t<=57},m=function(t){return 36===t||95===t||t>=65&&t<=90||t>=97&&t<=122||t>=128&&!u[String.fromCharCode(t)]},y=function(t){return 36===t||95===t||t>=65&&t<=90||t>=97&&t<=122||t>=48&&t<=57||t>=128&&!u[String.fromCharCode(t)]},(v=function(t){for(var e,o,s=0,v=t.charAt,w=t.charCodeAt,A=function(e){return v.call(t,e)},x=function(e){return w.call(t,e)},b=t.length,D=function(){for(var t=x(s);32===t||9===t||10===t||13===t;)t=x(++s)},C=function(){var t,e,n=M();return D(),63!==x(s)?n:(s++,(t=C())||i("Expected expression",s),D(),58===x(s)?(s++,(e=C())||i("Expected expression",s),{type:"ConditionalExpression",test:n,consequent:t,alternate:e}):void i("Expected :",s))},F=function(){D();for(var e=t.substr(s,f),n=e.length;n>0;){if(u.hasOwnProperty(e)&&(!m(x(s))||s+e.length<t.length&&!y(x(s+e.length))))return s+=n,e;e=e.substr(0,--n)}return!1},M=function(){var t,e,n,r,a,o,l,u,c;if(o=k(),!(e=F()))return o;for(a={value:e,prec:d(e)},(l=k())||i("Expected expression after "+e,s),r=[o,a,l];(e=F())&&0!==(n=d(e));){for(a={value:e,prec:n},c=e;r.length>2&&n<=r[r.length-2].prec;)l=r.pop(),e=r.pop().value,o=r.pop(),t=g(e,o,l),r.push(t);(t=k())||i("Expected expression after "+c,s),r.push(a,t)}for(t=r[u=r.length-1];u>1;)t=g(r[u-1].value,r[u-2],t),u-=2;return t},k=function(){var e,n,r;if(D(),e=x(s),p(e)||46===e)return T();if(39===e||34===e)return _();if(91===e)return I();for(r=(n=t.substr(s,c)).length;r>0;){if(l.hasOwnProperty(n)&&(!m(x(s))||s+n.length<t.length&&!y(x(s+n.length))))return s+=r,{type:"UnaryExpression",operator:n,argument:k(),prefix:!0};n=n.substr(0,--r)}return!(!m(e)&&40!==e)&&N()},T=function(){for(var t,e,n="";p(x(s));)n+=A(s++);if(46===x(s))for(n+=A(s++);p(x(s));)n+=A(s++);if("e"===(t=A(s))||"E"===t){for(n+=A(s++),"+"!==(t=A(s))&&"-"!==t||(n+=A(s++));p(x(s));)n+=A(s++);p(x(s-1))||i("Expected exponent ("+n+A(s)+")",s)}return e=x(s),m(e)?i("Variable names cannot start with a number ("+n+A(s)+")",s):46===e&&i("Unexpected period",s),{type:a,value:parseFloat(n),raw:n}},_=function(){for(var t,e="",n=A(s++),r=!1;s<b;){if((t=A(s++))===n){r=!0;break}if("\\"===t)switch(t=A(s++)){case"n":e+="\n";break;case"r":e+="\r";break;case"t":e+="\t";break;case"b":e+="\b";break;case"f":e+="\f";break;case"v":e+="\v";break;default:e+=t}else e+=t}return r||i('Unclosed quote after "'+e+'"',s),{type:a,value:e,raw:n+e+n}},S=function(){var e,n=x(s),r=s;for(m(n)?s++:i("Unexpected "+A(s),s);s<b&&(n=x(s),y(n));)s++;return e=t.slice(r,s),h.hasOwnProperty(e)?{type:a,value:h[e],raw:e}:"this"===e?{type:"ThisExpression"}:{type:"Identifier",name:e}},B=function(t){for(var e,r,a=[],o=!1,l=0;s<b;){if(D(),(e=x(s))===t){o=!0,s++,41===t&&l&&l>=a.length&&i("Unexpected token "+String.fromCharCode(t),s);break}if(44===e){if(s++,++l!==a.length)if(41===t)i("Unexpected token ,",s);else if(93===t)for(var u=a.length;u<l;u++)a.push(null)}else(r=C())&&r.type!==n||i("Expected comma",s),a.push(r)}return o||i("Expected "+String.fromCharCode(t),s),a},N=function(){var t,e;for(e=40===(t=x(s))?E():S(),D(),t=x(s);46===t||91===t||40===t;)s++,46===t?(D(),e={type:r,computed:!1,object:e,property:S()}):91===t?(e={type:r,computed:!0,object:e,property:C()},D(),93!==(t=x(s))&&i("Unclosed [",s),s++):40===t&&(e={type:"CallExpression",arguments:B(41),callee:e}),D(),t=x(s);return e},E=function(){s++;var t=C();if(D(),41===x(s))return s++,t;i("Unclosed (",s)},I=function(){return s++,{type:"ArrayExpression",elements:B(93)}},L=[];s<b;)59===(e=x(s))||44===e?s++:(o=C())?L.push(o):s<b&&i('Unexpected "'+A(s)+'"',s);return 1===L.length?L[0]:{type:n,body:L}}).version="0.3.5",v.toString=function(){return"JavaScript Expression Parser (JSEP) v"+v.version},v.addUnaryOp=function(t){return c=Math.max(t.length,c),l[t]=o,this},v.addBinaryOp=function(t,e){return f=Math.max(t.length,f),u[t]=e,this},v.addLiteral=function(t,e){return h[t]=e,this},v.removeUnaryOp=function(t){return delete l[t],t.length===c&&(c=s(l)),this},v.removeAllUnaryOps=function(){return l={},c=0,this},v.removeBinaryOp=function(t){return delete u[t],t.length===f&&(f=s(u)),this},v.removeAllBinaryOps=function(){return u={},f=0,this},v.removeLiteral=function(t){return delete h[t],this},v.removeAllLiterals=function(){return h={},this},t.exports?e=t.exports=v:e.parse=v}));let Io={min:function(t,e){return g(t.datasets.getDatasetById(e).getValues())},minDate:function(t,e){let n=t.datasets.getDatasetById(e),r=g(n.getValues());if(Number.isNumber(r)){let e=Array.from(n);for(let n of e.reverse())if(null!==n.value&&n.value===r)return Co(n.date,t.dateFormat)}return"min not found"},max:function(t,e){return d(t.datasets.getDatasetById(e).getValues())},maxDate:function(t,e){let n=t.datasets.getDatasetById(e),r=d(n.getValues());if(Number.isNumber(r)){let e=Array.from(n);for(let n of e.reverse())if(null!==n.value&&n.value===r)return Co(n.date,t.dateFormat)}return"max not found"},startDate:function(t,e){let n=t.datasets.getDatasetById(e);if(n){let e=n.getStartDate();if(e&&e.isValid())return Co(e,t.dateFormat)}return Co(t.startDate,t.dateFormat)},endDate:function(t,e){let n=t.datasets.getDatasetById(e);if(n){let e=n.getEndDate();if(e&&e.isValid())return Co(e,t.dateFormat)}return Co(t.endDate,t.dateFormat)},sum:function(t,e){return w(t.datasets.getDatasetById(e).getValues())},count:function(t,e){return"deprecated template variable 'count'"},numTargets:function(t,e){return t.datasets.getDatasetById(e).getNumTargets()},days:function(t,e){return"deprecated template variable 'days'"},numDays:function(t,e){return t.datasets.getDatasetById(e).getLength()},numDaysHavingData:function(t,e){return t.datasets.getDatasetById(e).getLengthNotNull()},maxStreak:function(t,e){let n=0,r=0,a=t.datasets.getDatasetById(e);for(let t of a)null!==t.value?n++:n=0,n>=r&&(r=n);return r},maxStreakStart:function(t,e){let n=0,r=0,a=null,i=null,o=t.datasets.getDatasetById(e);if(o)for(let t of o)null!==t.value?(0===n&&(a=t.date),n++):n=0,n>=r&&(r=n,i=a);return Co(i,t.dateFormat)},maxStreakEnd:function(t,e){let n=0,r=0,a=null,i=null,o=t.datasets.getDatasetById(e);if(o){let t=Array.from(o);for(let e=0;e<t.length;e++){let o=t[e],l=null;e<t.length-1&&(l=t[e+1]),null!==o.value?(n++,null===(null==l?void 0:l.value)&&(a=o.date)):n=0,n>=r&&(r=n,i=a)}}return Co(i,t.dateFormat)},maxBreaks:function(t,e){let n=0,r=0,a=t.datasets.getDatasetById(e);for(let t of a)null===t.value?n++:n=0,n>r&&(r=n);return r},maxBreaksStart:function(t,e){let n=0,r=0,a=null,i=null,o=t.datasets.getDatasetById(e);if(o)for(let t of o)null===t.value?(0===n&&(a=t.date),n++):n=0,n>=r&&(r=n,i=a);return Co(i,t.dateFormat)},maxBreaksEnd:function(t,e){let n=0,r=0,a=null,i=null,o=t.datasets.getDatasetById(e);if(o){let t=Array.from(o);for(let e=0;e<t.length;e++){let o=t[e],l=null;e<t.length-1&&(l=t[e+1]),null===o.value?(n++,null!==(null==l?void 0:l.value)&&(a=o.date)):n=0,n>=r&&(r=n,i=a)}}return Co(i,t.dateFormat)},lastStreak:function(t,e){return"deprecated template variable 'lastStreak'"},currentStreak:function(t,e){let n=0,r=t.datasets.getDatasetById(e);if(r){let t=Array.from(r);for(let e=t.length-1;e>=0;e--){if(null===t[e].value)break;n++}}return n},currentStreakStart:function(t,e){let n=null,r=t.datasets.getDatasetById(e);if(r){let t=Array.from(r);for(let e=t.length-1;e>=0;e--){let r=t[e];if(e<t.length-1&&(n=t[e+1].date),null===r.value)break}}return null===n?"absense":Co(n,t.dateFormat)},currentStreakEnd:function(t,e){let n=0,r=null,a=t.datasets.getDatasetById(e);if(a){let t=Array.from(a);for(let e=t.length-1;e>=0;e--){let a=t[e];if(null===a.value)break;0===n&&(r=a.date),n++}}return null===r?"absense":Co(r,t.dateFormat)},currentBreaks:function(t,e){let n=0,r=t.datasets.getDatasetById(e);if(r){let t=Array.from(r);for(let e=t.length-1;e>=0;e--){if(null!==t[e].value)break;n++}}return n},currentBreaksStart:function(t,e){let n=null,r=t.datasets.getDatasetById(e);if(r){let t=Array.from(r);for(let e=t.length-1;e>=0;e--){let r=t[e];if(e<t.length-1&&(n=t[e+1].date),null!==r.value)break}}return null===n?"absense":Co(n,t.dateFormat)},currentBreaksEnd:function(t,e){let n=0,r=null,a=t.datasets.getDatasetById(e);if(a){let t=Array.from(a);for(let e=t.length-1;e>=0;e--){let a=t[e];if(null!==a.value)break;0===n&&(r=a.date),n++}}return null===r?"absense":Co(r,t.dateFormat)},average:function(t,e){let n=t.datasets.getDatasetById(e),r=n.getLengthNotNull();if(r>0){return w(n.getValues())/r}return null},median:function(t,e){let n=t.datasets.getDatasetById(e);return y(n.getValues(),.5,r);var r},variance:function(t,e){return function(t,e){let n,r=0,a=0,i=0;if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(n=e-a,a+=n/++r,i+=n*(e-a));else{let o=-1;for(let l of t)null!=(l=e(l,++o,t))&&(l=+l)>=l&&(n=l-a,a+=n/++r,i+=n*(l-a))}if(r>1)return i/(r-1)}(t.datasets.getDatasetById(e).getValues())}};function Lo(t,e){let n={};Object.entries(Io).forEach((([r,a])=>{let i,o=new RegExp("{{\\s*"+r+"(\\(\\s*Dataset\\(\\s*((?<datasetId>\\d+)|(?<datasetName>\\w+))\\s*\\)\\s*\\))?\\s*}}","gm");for(;i=o.exec(t);)if(void 0!==i.groups)if(void 0!==i.groups.datasetId){let t=parseInt(i.groups.datasetId);if(Number.isInteger(t)){let i="{{\\s*"+r+"(\\(\\s*Dataset\\(\\s*"+t.toString()+"\\s*\\)\\s*\\))?\\s*}}";if(!(i in n)){let r=a(e,t),o="{{NA}}";null!=r&&(o=Number.isInteger(r)?r.toFixed(0):r.toFixed(2)),n[i]=o}}}else if(void 0!==i.groups.datasetName){let t=i.groups.datasetName,o="{{\\s*"+r+"(\\(\\s*Dataset\\(\\s*"+t+"\\s*\\)\\s*\\))?\\s*}}",l=e.datasetName.indexOf(t);if(!(o in n)){let t="{{NA}}";if(l>=0){let n=a(e,l);null!=n&&(t=Number.isInteger(n)?n.toFixed(0):n.toFixed(2))}n[o]=t}}else{let t="{{\\s*"+r+"\\s*}}";if(!(t in n)){let r=a(e,0),i="{{NA}}";null!=r&&("number"==typeof r?i=Number.isInteger(r)?r.toFixed(0):r.toFixed(2):"string"==typeof r&&(i=r)),n[t]=i}}else{let t="{{\\s*"+r+"\\s*}}";if(!(t in n)){let r=a(e,0),i="{{NA}}";null!=r?i=Number.isInteger(r)?r.toFixed(0):r.toFixed(2):"string"==typeof r&&(i=r),n[t]=i}}}));for(let e in n){let r=n[e],a=new RegExp(e,"gi");t=t.replace(a,r)}return t}function Po(t,e,n){if(e&&n)return"Under construction"}function Yo(t,e,n){if(!e||!n)return;let r="";if(n.template,r=n.template,r=Lo(r,e),""!==r){let e=Zt(t).append("div");if(r.includes("\n")){let t=r.split("\n");for(let n of t)e.append("div").text(n)}else e.text(r);""!==n.style&&e.attr("style",n.style)}}function Vo(t,e){let n=e.dataset;if(0===n.length)return!1;let r=null;if(null===e.selectedDataset){for(let e of n)if(r=t.datasets.getDatasetById(e),r&&!r.getQuery().usedAsXDataset)break;if(r)return e.selectedDataset=r.getId(),!0}else{let a=e.selectedDataset,i=n.findIndex((t=>t===a));if(i>=0){if(i===e.dataset.length-1){for(let e of n)if(r=t.datasets.getDatasetById(e),r&&!r.getQuery().usedAsXDataset)break;return!!r&&(e.selectedDataset=r.getId(),!0)}{i++;let a=n[i];if(r=t.datasets.getDatasetById(a),e.selectedDataset=a,r&&!r.getQuery().usedAsXDataset)return!0;Vo(t,e)}}}return!1}function zo(t,e,n,r){Zt(e).select("#svg").remove();for(var a=Object.getOwnPropertyNames(t),i=0;i<a.length;i++)delete t[a[i]];let o=Zt(e).append("svg").attr("id","svg").attr("width",n.dataAreaSize.width+n.margin.left+n.margin.right).attr("height",n.dataAreaSize.height+n.margin.top+n.margin.bottom);t.svg=o;let l=o.append("g").attr("id","graphArea").attr("transform","translate("+n.margin.left+","+n.margin.top+")").attr("width",n.dataAreaSize.width+n.margin.right).attr("height",n.dataAreaSize.height+n.margin.bottom);t.graphArea=l;let u=l.append("g").attr("id","dataArea").attr("width",n.dataAreaSize.width).attr("height",n.dataAreaSize.height);return t.dataArea=u,t}function Uo(t,e){let n=t.svg.selectAll("circle");for(let t of n){let e=Zt(t).attr("id");e&&e.startsWith("tracker-selected-circle-")&&Zt(t).style("stroke","none")}e.selectedDate="",t.monitor.text("")}function Oo(t,e,n,r,a){if(!n||!r)return;let i=r.selectedDataset;if(null===i)return;let o=n.datasets.getDatasetById(i);if(!o)return;let l=o.getName();a.month(),a.daysInMonth(),a.year();let u=So("30","tracker-axis-label"),s=2.8*Math.max(u.width,u.height),c=a.format("YYYY"),f=a.format("MMM"),h=So(c,"tracker-month-header-year"),d=So(f,"tracker-month-header-month"),g=0,p=e.graphArea.append("g"),m=null;r.headerMonthColor?m=r.headerMonthColor:r.color&&(m=r.color);let y=p.append("text").text(f).attr("id","titleMonth").attr("transform","translate("+s/4+","+d.height+")").attr("class","tracker-month-header-month").style("cursor","default").on("click",(function(t){Uo(e,r)}));m&&y.style("fill",m),g+=d.height;let v=null;r.headerYearColor?v=r.headerYearColor:r.color&&(v=r.color);let w=p.append("text").text(c).attr("id","titleYear").attr("transform","translate("+s/4+","+(g+h.height)+")").attr("class","tracker-month-header-year").style("cursor","default").attr("font-weight","bold").on("click",(function(t){Uo(e,r)}));v&&w.style("fill",v),g+=h.height;let A=So(l,"tracker-month-title-rotator"),x=p.append("text").text(l).attr("transform","translate("+3.5*s+","+A.height+")").attr("class","tracker-month-title-rotator").style("cursor","pointer").on("click",(function(i){Vo(n,r)&&(Uo(e,r),Ro(t,e,n,r,a))}));e.rotator=x;let b=So("0.0000","tracker-month-title-monitor"),D=p.append("text").text("").attr("id","monitor").attr("class","tracker-month-title-monitor").attr("transform","translate("+3.5*s+","+(A.height+b.height)+")").style("cursor","pointer").style("fill",r.selectedRingColor);e.monitor=D;let C=So("<","tracker-month-title-arrow");p.append("text").text("<").attr("id","arrowLeft").attr("transform","translate("+5.5*s+","+(g/2+C.height/2)+")").attr("class","tracker-month-title-arrow").on("click",(function(i){Uo(e,r),r.selectedDate="";let o=a.clone().add(-1,"month");Ro(t,e,n,r,o)})).style("cursor","pointer"),p.append("text").text(">").attr("id","arrowLeft").attr("transform","translate("+6.5*s+","+(g/2+C.height/2)+")").attr("class","tracker-month-title-arrow").on("click",(function(i){Uo(e,r);let o=a.clone().add(1,"month");Ro(t,e,n,r,o)})).style("cursor","pointer"),p.append("text").text("◦").attr("id","arrowToday").attr("transform","translate("+6*s+","+(g/2+C.height/2)+")").attr("class","tracker-month-title-arrow").on("click",(function(a){Uo(e,r);let i=Mo(n.dateFormat);Ro(t,e,n,r,i)})).style("cursor","pointer"),g+=8;let F=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];"mon"===r.startWeekOn.toLowerCase()&&F.push(F.shift());let M=So(F[0],"tracker-month-weekday");e.graphArea.selectAll("weekDays").data(F).enter().append("text").text((function(t){return t})).attr("transform",(function(t,e){return"translate("+(e+.5)*s+","+(g+M.height)+")"})).attr("class","tracker-month-weekday").attr("text-anchor","middle").style("cursor","default").on("click",(function(t){Uo(e,r)})),g+=M.height+8;let k=null;r.dividingLineColor?k=r.dividingLineColor:r.color&&(k=r.color);let T=e.graphArea.append("rect").attr("x",0).attr("y",g).attr("width",6.5*s+M.width).attr("height",1).attr("class","tracker-month-dividing-line");k&&T.style("fill",k),g+=1,p.attr("height",g),e.header=p,No(e.dataArea,0,g)}function Ho(t,e,n,r,a){if(!n||!r)return;let i=r.selectedDataset;if(null===i)return;let o=n.datasets.getDatasetById(i);if(!o)return;let l=r.dataset.findIndex((t=>t===i)),u=r.threshold[l];a.month(),a.daysInMonth();let s=So("30","tracker-axis-label"),c=2.8*Math.max(s.width,s.height),f=c/2.8*1.8/2,h=(c-2*f)/2,p=g(o.getValues());null!==r.yMin[l]&&(p=r.yMin[l]);let m=d(o.getValues());null!==r.yMax[l]&&(m=r.yMax[l]);let y=!0;(null===m||null===p||m<=p)&&(y=!1);const v=a.clone().startOf("month");let w=v.clone().subtract(v.day(),"days");"mon"===r.startWeekOn.toLowerCase()&&(w=w.add(1,"days"));const A=a.clone().endOf("month");let x=A.clone().add(7-A.day()-1,"days");"mon"===r.startWeekOn.toLowerCase()&&(x=x.add(1,"days"));const b=o.getStartDate(),D=o.getEndDate();let C=[],F=0,M=0,k=0;for(let t=w.clone();t<=x;t.add(1,"days")){"mon"===r.startWeekOn.toLowerCase()?(F=t.day()-1,F<0&&(F=6),M=Math.floor(k/7)):(F=t.day(),M=Math.floor(k/7));let e=!0;(t.diff(v)<0||t.diff(A)>0)&&(e=!1);let a=!0;b&&D&&t.diff(b)>=0&&t.diff(D)<=0&&(a=!1);let i=o.getValue(t),l=!1;r.circleColorByValue?(y||null!==i&&i>u)&&(l=!0):null!==i&&i>u&&(l=!0);let s=null;r.circleColorByValue&&y&&null!==i&&(s=(i-p)/(m-p));let c=o.getValue(t,1),f=o.getValue(t,-1),h=!1;null!==i&&i>u&&null!==f&&f>u&&(h=!0);let d=!1;null!==i&&i>u&&null!==c&&c>u&&(d=!0),C.push({date:Co(t,n.dateFormat),value:i,scaledValue:s,dayInMonth:t.date(),isInThisMonth:e,isOutOfDataRange:a,row:M,col:F,showCircle:l,streakIn:h,streakOut:d}),k++}let T=(F+1)*c,_=Kr().domain([-.5,6.5]).range([0,T]);if(r.showStreak){let t="#69b3a2";r.circleColor?t=r.circleColor:r.color&&(t=r.color),e.dataArea.selectAll("streakIn").data(C.filter((function(t){return t.streakIn}))).enter().append("rect").attr("x",(function(t){return _(t.col)-f-h})).attr("y",(function(t){return _(t.row)-1.5})).attr("width",h).attr("height",3).style("fill",(function(e){return e.showCircle?r.circleColorByValue&&null!==e.scaledValue?Mr("white",t)(.8*e.scaledValue+.2):t:"none"})).style("opacity",(function(t){return t.isOutOfDataRange||r.dimNotInMonth&&!t.isInThisMonth?.2:1})),e.dataArea.selectAll("streakOut").data(C.filter((function(t){return t.streakOut}))).enter().append("rect").attr("x",(function(t){return _(t.col)+f})).attr("y",(function(t){return _(t.row)-1.5})).attr("width",h).attr("height",3).style("fill",(function(e){return e.showCircle?r.circleColorByValue&&null!==e.scaledValue?Mr("white",t)(.8*e.scaledValue+.2):t:"none"})).style("opacity",(function(t){return t.isOutOfDataRange||r.dimNotInMonth&&!t.isInThisMonth?.2:1}))}let S="#69b3a2";r.circleColor?S=r.circleColor:r.color&&(S=r.color),r.showCircle&&e.dataArea.selectAll("dot").data(C).enter().append("circle").attr("r",f).attr("cx",(function(t){return _(t.col)})).attr("cy",(function(t){return _(t.row)})).style("fill",(function(t){if(t.showCircle){if(!r.circleColorByValue)return S;if(null!==t.scaledValue){return Mr("white",S)(.8*t.scaledValue+.2)}return S}return"none"})).style("opacity",(function(t){return t.isOutOfDataRange||r.dimNotInMonth&&!t.isInThisMonth?.2:1})).style("cursor","default");let B=Co(window.moment(),n.dateFormat);if(r.showTodayRing){let t=e.dataArea.selectAll("todayRing").data(C.filter((function(t){return t.date===B}))).enter().append("circle").attr("r",.9*f).attr("cx",(function(t){return _(t.col)})).attr("cy",(function(t){return _(t.row)})).attr("class","tracker-month-today-circle").style("cursor","default");""!==r.todayRingColor?t.style("stroke",r.todayRingColor):t.style("stroke","white")}r.showSelectedRing&&e.dataArea.selectAll("selectedRing").data(C).enter().append("circle").attr("r",f).attr("cx",(function(t){return _(t.col)})).attr("cy",(function(t){return _(t.row)})).attr("id",(function(t){return"tracker-selected-circle-"+t.date})).attr("class","tracker-month-selected-circle").style("cursor","default").style("stroke","none"),e.dataArea.selectAll("dayLabel").data(C).enter().append("text").text((function(t){return t.dayInMonth.toString()})).attr("transform",(function(t){return"translate("+_(t.col)+","+(_(t.row)+s.height/4)+")"})).style("fill-opacity",(function(t){return t.isOutOfDataRange||r.dimNotInMonth&&!t.isInThisMonth?.2:1})).attr("date",(function(t){return t.date})).attr("value",(function(t){return t.value})).attr("valueType",(function(t){return _a[o.valueType]})).attr("class","tracker-axis-label").on("click",(function(t){Uo(e,r);let n=Zt(this).attr("date");if(r.selectedDate=n,r.showSelectedRing&&e.dataArea.select("#tracker-selected-circle-"+n).style("stroke",r.selectedRingColor),r.showSelectedValue){let t=Zt(this).attr("value"),n="";if("Time"===Zt(this).attr("valueType")){n=window.moment("00:00","HH:mm",!0).add(parseFloat(t),"seconds").format("HH:mm")}else n=t;e.monitor.text(n)}})).style("cursor","pointer");let N=parseFloat(e.svg.attr("width")),E=parseFloat(e.svg.attr("height")),I=parseFloat(e.graphArea.attr("width")),L=parseFloat(e.graphArea.attr("height")),P=7*c+parseFloat(e.header.attr("height")),Y=7*c;P>E&&Bo(e.svg,0,P-E),Y>N&&Bo(e.svg,Y-N,0),P>L&&Bo(e.graphArea,0,P-L),Y>I&&Bo(e.svg,Y-I,0)}function Ro(t,e,n,r,a){n&&Wo&&(Oo(t,e=zo(e,t,n),n,r,a),Ho(0,e,n,r,a))}function Wo(t,e,n){if(!e||!Wo)return;n.dataset;let r=0;for(let t of e.datasets)t.getQuery().usedAsXDataset||r++;if(0===r)return"No available dataset found";if(Vo(e,n),null===n.selectedDataset)return"No available dataset found";let a={};a=zo(a,t,e);let i=null;if(n.initMonth){let t=window.moment(n.initMonth,"YYYY-MM",!0);if(!t.isValid())return"Invalid initMonth";i=t}else window.moment(),i=e.datasets.getDates().last();i&&(Oo(t,a,e,n,i),Ho(0,a,e,n,i))}function qo(t,e,n){if(e&&qo)return"Under construction"}function Xo(t,e,n){if(!e||!n)return;let r=parseFloat(n.dataset);e.datasets.getDatasetById(r),"horizontal"===n.orientation?e.dataAreaSize={width:250,height:24}:"vertical"===n.orientation&&(e.dataAreaSize={width:24,height:250});let a=function(t,e,n){let r={};if(!e||!n)return;let a=Zt(t).append("svg").attr("id","svg").attr("width",e.dataAreaSize.width+e.margin.left+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.top+e.margin.bottom);r.svg=a;let i=a.append("g").attr("id","graphArea").attr("transform","translate("+e.margin.left+","+e.margin.top+")").attr("width",e.dataAreaSize.width+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.bottom);r.graphArea=i;let o=i.append("g").attr("id","dataArea").attr("width",e.dataAreaSize.width).attr("height",e.dataAreaSize.height);return r.dataArea=o,r}(t,e,n),i=function(t,e,n,r){if(!e||!n)return;let a=n.range,i=a[a.length-1],o=[0,i],l=n.valueUnit,u=function(t){return l&&l.endsWith("%")?Qr(0,i,7)(t)+" %":Qr(0,i,7)(t)},s=So(u(i),"tracker-tick-label");if("horizontal"===n.orientation){let n=Kr();n.domain(o).range([0,e.dataAreaSize.width]),t.scale=n;let r=T(n);r.tickFormat(u);let a=t.dataArea.append("g").attr("id","axis").attr("transform","translate(0,"+e.dataAreaSize.height+")").call(r).attr("class","tracker-axis");t.axis=a,a.selectAll("path").style("stroke","none"),a.selectAll("line"),a.selectAll("text").attr("class","tracker-tick-label"),a.attr("width",e.dataAreaSize.width+s.width),a.attr("height",6+s.height),Bo(t.svg,+s.width,6+s.height),Bo(t.graphArea,+s.width,6+s.height)}else if("vertical"===n.orientation){let n=Kr();n.domain(o).range([e.dataAreaSize.height,0]),t.scale=n;let r=_(n);r.tickFormat(u);let a=t.dataArea.append("g").attr("id","axis").attr("x",0).attr("y",0).call(r).attr("class","tracker-axis");t.axis=a,a.selectAll("path").style("stroke","none"),a.selectAll("line"),a.selectAll("text").attr("class","tracker-tick-label"),a.attr("width",6+s.width),a.attr("height",e.dataAreaSize.width),Bo(t.svg,6+s.width,0),Bo(t.graphArea,6+s.width,0),No(t.dataArea,6+s.width,0)}}(a,e,n);if("string"==typeof i)return i;!function(t,e,n){if(!e||!n)return;if(n.title){let r=So(n.title,"tracker-title-small");if("horizontal"===n.orientation){let a=t.graphArea.append("text").text(n.title).attr("id","title").attr("x",r.width/2).attr("y",e.dataAreaSize.height/2).attr("height",r.height).attr("class","tracker-title-small");t.title=a,Bo(t.svg,r.width+6,0),Bo(t.graphArea,r.width+6,0),No(t.dataArea,r.width+6,0)}else if("vertical"===n.orientation){let a=e.dataAreaSize.width/2;r.width>e.dataAreaSize.width&&(Bo(t.svg,r.width-e.dataAreaSize.width,0),Bo(t.graphArea,r.width-e.dataAreaSize.width,0),No(t.dataArea,r.width/2-e.dataAreaSize.width/2,0),a=r.width/2);let i=parseFloat(t.axis.attr("width")),o=t.graphArea.append("text").text(n.title).attr("id","title").attr("x",a+i).attr("y",r.height/2).attr("height",r.height).attr("class","tracker-title-small");t.title=o,Bo(t.svg,0,r.height+6),Bo(t.graphArea,0,r.height+6),No(t.dataArea,0,r.height+6)}}if(n.valueUnit){let r=So(n.valueUnit,"tracker-tick-label");if("horizontal"===n.orientation){let a=t.dataArea.append("text").text(n.valueUnit).attr("id","unit").attr("x",-1*(r.width+6)).attr("y",e.dataAreaSize.height+6).attr("height",r.height).attr("class","tracker-tick-label");t.unit=a}else if("vertical"===n.orientation){let a=t.dataArea.append("text").text(n.valueUnit).attr("id","unit").attr("x",e.dataAreaSize.width/2-r.width/2).attr("y",-(r.height/2+6)).attr("height",r.height).attr("class","tracker-tick-label");t.unit=a,Bo(t.svg,0,r.height+6),Bo(t.graphArea,0,r.height+6),No(t.dataArea,0,r.height+6)}}}(a,e,n),function(t,e,n,r){if(!e||!n)return;let a=t.scale,i=n.range,o=n.rangeColor,l=[],u=0;for(let t=0;t<i.length;t++)l.push({start:u,end:i[t],color:o[t]}),u=i[t];"horizontal"===n.orientation?t.dataArea.selectAll("backPanel").data(l).enter().append("rect").attr("x",(function(t,e){return Math.floor(a(t.start))})).attr("y",(function(t){return 0})).attr("width",(function(t,e){return Math.ceil(a(t.end-t.start))})).attr("height",e.dataAreaSize.height).style("fill",(function(t){return t.color})):"vertical"===n.orientation&&t.dataArea.selectAll("backPanel").data(l).enter().append("rect").attr("x",(function(t,e){return 0})).attr("y",(function(t){return Math.floor(a(t.end))})).attr("width",e.dataAreaSize.width).attr("height",(function(t){return e.dataAreaSize.height-Math.floor(a(t.end-t.start))})).style("fill",(function(t){return t.color}))}(a,e,n);let o=function(t,e,n,r){let a="";if(!e||!n)return;let i=n.value;i=Lo(i,e);let o=parseFloat(i);if(Number.isNaN(o))return a="Invalid input value: "+i,a;let l=n.valueColor,u=t.scale;if("horizontal"===n.orientation){let n=e.dataAreaSize.height/3;t.dataArea.append("rect").attr("x",u(0)).attr("y",n).attr("width",Math.floor(u(o))).attr("height",n).style("fill",l)}else if("vertical"===n.orientation){let n=e.dataAreaSize.width/3;t.dataArea.append("rect").attr("x",n).attr("y",Math.floor(u(o))).attr("width",n).attr("height",e.dataAreaSize.height-Math.floor(u(o))).style("fill",l)}}(a,e,n);if("string"==typeof o)return o;!function(t,e,n,r){if(!e||!n)return;if(!n.showMarker)return;let a=n.markerValue,i=n.markerColor,o=t.scale;if("horizontal"===n.orientation){let n=2*e.dataAreaSize.height/3;t.dataArea.append("rect").attr("x",o(a)-1.5).attr("y",n/4).attr("width",3).attr("height",n).style("fill",i)}else if("vertical"===n.orientation){let n=2*e.dataAreaSize.width/3;t.dataArea.append("rect").attr("x",n/4).attr("y",o(a)-1.5).attr("width",n).attr("height",3).style("fill",i)}}(a,e,n),function(t,e,n){let r=Zt(t),a=e.svg,i=parseFloat(a.attr("width")),o=parseFloat(a.attr("height"));a.attr("width",null).attr("height",null).attr("viewBox",`0 0 ${i} ${o}`).attr("preserveAspectRatio","xMidYMid meet"),n.fitPanelWidth?r.style("width","100%"):(r.style("width",(i*n.fixedScale).toString()+"px"),r.style("height",(o*n.fixedScale).toString()+"px"))}(t,a,e)}function $o(t,e,n=!0){return function(r){const a=Math.abs(e-t);let i=window.moment("00:00","HH:mm",!0).add(r,"seconds"),o=i.format("HH:mm");if(n&&a>43200){let n=(r-t)/3600%2;o=r<=t||r>=e?"":n>1?i.format("HH:mm"):""}return o}}function jo(t,e,n){if(!e||!n)return;let r=e.datasets,a=function(t,e){let n,r;if(void 0===e)for(const e of t)null!=e&&(void 0===n?e>=e&&(n=r=e):(n>e&&(n=e),r<e&&(r=e)));else{let a=-1;for(let i of t)null!=(i=e(i,++a,t))&&(void 0===n?i>=i&&(n=r=i):(n>i&&(n=i),r<i&&(r=i)))}return[n,r]}(r.getDates()),i=function(){return kr.apply(Zi(Aa,xa,da,ha,sa,la,oa,ia,aa,Ma).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}().domain(a).range([0,e.dataAreaSize.width]);t.xScale=i;let o=function(t){let e,n=t.getDates().length;return e=n<=15?la:n<=60?la.every(4):n<=105?sa:n<=450?ha:n<=900?ha.every(2):da,e}(r),l=function(t){let e,n=t.getDates().length;return e=Ma(n<=15||n<=60||n<=105?"%y-%m-%d":n<=450||n<=900?"%y %b":"%Y"),e}(r),u=T(i).ticks(o).tickFormat(l),s=t.dataArea.append("g").attr("id","xAxis").attr("transform","translate(0,"+e.dataAreaSize.height+")").call(u).attr("class","tracker-axis");n.xAxisColor&&s.style("stroke",n.xAxisColor),t.xAxis=s;let c=So("99-99-99"),f=s.selectAll("text").attr("x",-1*c.height*Math.cos(65/180*Math.PI)).attr("y",0).attr("transform","rotate(-65)").style("text-anchor","end").attr("class","tracker-tick-label");n.xAxisColor&&f.style("fill",n.xAxisColor);let h=c.width*Math.sin(65/180*Math.PI),d=s.append("text").text(n.xAxisLabel).attr("transform","translate("+e.dataAreaSize.width/2+","+(6+h)+")").attr("class","tracker-axis-label");n.xAxisLabelColor&&d.style("fill",n.xAxisLabelColor),s.attr("height",6+h),Bo(t.svg,0,6+h),Bo(t.graphArea,0,6+h)}function Zo(t,e,n,r,a){if(!e||!n)return;let i=e.datasets;if(0===a.length)return;if("left"!==r&&"right"!==r)return;let o=null,l=null,u=null,s=!1;for(let t of a){let e=i.getDatasetById(t);if(!e.getQuery().usedAsXDataset)if((null===o||e.getYMin()<o)&&(o=e.getYMin()),(null===l||e.getYMax()>l)&&(l=e.getYMax()),s=e.valueType===_a.Time,null===u)u=s;else if(s!==u)return"Not all values in time format"}let c=null;"left"===r?c=n.yMin[0]:"right"===r&&(c=n.yMin[1]);let f=!1;"number"!=typeof c?c=o:f=!0;let h=null;"left"===r?h=n.yMax[0]:"right"===r&&(h=n.yMax[1]);let d=!1;if("number"!=typeof h?h=l:d=!0,h<c){let t=c;c=h,h=t;let e=f;f=d,d=e}let g,p,m=h-c,y=Kr();g=f?c:c-.2*m,p=d?h:h+.2*m,n.GetChartType()===Ta.Bar&&(p<0&&(p=0),g>0&&(g=0));let w=[g,p];("left"===r&&n.reverseYAxis[0]||"right"===r&&n.reverseYAxis[1])&&(w=[p,g]),y.domain(w).range([e.dataAreaSize.height,0]),"left"===r?t.leftYScale=y:"right"===r&&(t.rightYScale=y);let A="";"left"===r?A=n.yAxisColor[0]:"right"===r&&(A=n.yAxisColor[1]);let x="";"left"===r?x=n.yAxisLabelColor[0]:"right"===r&&(x=n.yAxisLabelColor[1]);let b="";"left"===r?b=n.yAxisLabel[0]:"right"===r&&(b=n.yAxisLabel[1]);let D,C="";if("left"===r?C=n.yAxisUnit[0]:"right"===r&&(C=n.yAxisUnit[1]),"left"===r?D=_(y):"right"===r&&(D=k(2,y)),D&&s){let t=$o(g,p),e=function(t,e){let n=[];return n=Math.abs(e-t)>18e3?v(t=3600*Math.floor(t/3600),e=3600*Math.ceil(e/3600),3600):v(t=1800*Math.floor(t/1800),e=1800*Math.ceil(e/1800),1800),n}(g,p);D.tickValues(e).tickFormat(t)}let F=t.dataArea.append("g").attr("id","yAxis").call(D).attr("class","tracker-axis");"right"==r&&F.attr("transform","translate("+e.dataAreaSize.width+" ,0)"),"left"===r?t.leftYAxis=F:"right"===r&&(t.rightYAxis=F);let M=F.selectAll("path");A&&M.style("stroke",A);let T=F.selectAll("line");A&&T.style("stroke",A);let S=F.selectAll("text").attr("class","tracker-tick-label");A&&S.style("fill",A);let B=Qr(g,p,10);s&&(B=$o(g,p,!1));let N=So(B(g),"tracker-axis-label"),E=So(B(p),"tracker-axis-label"),I=Math.max(N.width,E.width);""!==C&&(b+=" ("+C+")");let L=So(b),P=F.append("text").text(b).attr("transform","rotate(-90)").attr("x",-1*e.dataAreaSize.height/2).attr("class","tracker-axis-label");"left"===r?P.attr("y",-6-I-L.height/2):P.attr("y",6+I+L.height),x&&P.style("fill",x);let Y=L.height+I+6;F.attr("width",Y),Bo(t.svg,Y,0),Bo(t.graphArea,Y,0),"left"===r&&(No(t.dataArea,Y,0),t.title&&No(t.title,Y,0))}function Go(t,e,n,r,a){if(!e||!n)return;let i=null;if("left"===a?i=t.leftYScale:"right"===a&&(i=t.rightYScale),n.showLine[r.getId()]){let e=eo().defined((function(t){return null!==t.value})).x((function(e){return t.xScale(e.date)})).y((function(t){return i(t.value)})),a=t.dataArea.append("path").attr("class","tracker-line").style("stroke-width",n.lineWidth[r.getId()]);n.fillGap[r.getId()]?a.datum(Array.from(r).filter((function(t){return null!==t.value}))).attr("d",e):a.datum(r).attr("d",e),n.lineColor[r.getId()]&&a.style("stroke",n.lineColor[r.getId()])}}function Qo(t,e,n,r,a){if(!e||!n)return;let i=null;if("left"===a?i=t.leftYScale:"right"===a&&(i=t.rightYScale),n.showPoint[r.getId()]){let a=t.dataArea.selectAll("dot").data(Array.from(r).filter((function(t){return null!==t.value}))).enter().append("circle").attr("r",n.pointSize[r.getId()]).attr("cx",(function(e){return t.xScale(e.date)})).attr("cy",(function(t){return i(t.value)})).attr("date",(function(t){return Ma("%y-%m-%d")(t.date)})).attr("value",(function(t){if(null!==t.value)return Number.isInteger(t.value)?t.value.toFixed(0):t.value.toFixed(2)})).attr("valueType",_a[r.valueType]).attr("class","tracker-dot");if(n.pointColor[r.getId()]&&(a.style("fill",n.pointColor[r.getId()]),n.pointBorderColor[r.getId()]&&n.pointBorderWidth[r.getId()]>0&&(a.style("stroke",n.pointBorderColor[r.getId()]),a.style("stroke-width",n.pointBorderWidth[r.getId()]))),n.allowInspectData){let n=t.svg.append("g").style("opacity",0);n.append("rect").attr("width",e.tooltipSize.width).attr("height",e.tooltipSize.height).attr("class","tracker-tooltip");let r=n.append("text").attr("width",e.tooltipSize.width).attr("height",e.tooltipSize.height).attr("class","tracker-tooltip-label"),i=r.append("tspan").attr("x",4).attr("y",e.tooltipSize.height/5*2),o=r.append("tspan").attr("x",4).attr("y",e.tooltipSize.height/5*4);a.on("mouseenter",(function(t){i.text("date:"+Zt(this).attr("date"));let r=Zt(this).attr("valueType"),a=Zt(this).attr("value");if("Time"===r){let t=window.moment("00:00","HH:mm",!0).add(parseFloat(a),"seconds").format("HH:mm");o.text("value:"+t)}else o.text("value:"+a);const[l,u]=function(t,e){if(t=function(t){let e;for(;e=t.sourceEvent;)t=e;return t}(t),void 0===e&&(e=t.currentTarget),e){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}if(e.getBoundingClientRect){var a=e.getBoundingClientRect();return[t.clientX-a.left-e.clientLeft,t.clientY-a.top-e.clientTop]}}return[t.pageX,t.pageY]}(t);l<e.dataAreaSize.width/2?n.attr("transform","translate("+(l+1.3*e.tooltipSize.width)+","+(u-1*e.tooltipSize.height)+")"):n.attr("transform","translate("+(l-0*e.tooltipSize.width)+","+(u-1*e.tooltipSize.height)+")"),n.transition().duration(200).style("opacity",1)})).on("mouseleave",(function(){n.transition().duration(500).style("opacity",0)}))}}}function Jo(t,e,n,r,a,i,o){if(!e||!n)return;let l=e.dataAreaSize.width/r.getLength(),u=l;l-1>0&&(u=l-1),u/=o;let s=null;"left"===a?s=t.leftYScale:"right"===a&&(s=t.rightYScale);let c=t.dataArea.selectAll("bar").data(Array.from(r).filter((function(t){return null!==t.value}))).enter().append("rect").attr("x",(function(e,n){if(0===n){let n=i+1-o/2;if(n<1)return t.xScale(e.date)-l/2+i*u+n*u}return t.xScale(e.date)-l/2+i*u})).attr("y",(function(t){return s(Math.max(t.value,0))})).attr("width",(function(t,e){if(0===e){let t=i+1-o/2;return t<0?0:t<1?u*t:u}if(e===r.getLength()-1){let t=1-(i+1-o/2);return t<0?0:t<1?u*t:u}return u})).attr("height",(function(t){if(null!==t.value)return Math.abs(s(t.value)-s(0))})).attr("class","tracker-bar");n.barColor[r.getId()]&&c.style("fill",n.barColor[r.getId()])}function Ko(t,e,n){let r=t.svg;t.graphArea;let a=t.dataArea,i=t.title,o=t.xAxis,l=t.leftYAxis,u=t.rightYAxis,s=0;i&&(s=parseFloat(i.attr("height")));let c=parseFloat(o.attr("height")),f=0;l&&(f=parseFloat(l.attr("width")));let h=0;u&&(h=parseFloat(u.attr("width")));let d=e.datasets,g=d.getXDatasetIds(),p=d.getNames(),m=p.map((function(t){return So(t,"tracker-legend-label")})),y=0,v=0;for(let t=0;t<p.length;t++)g.includes(t)||m[t].width>v&&(v=m[t].width,y=t);let A=v/p[y].length,x=m[y].height,b=p.length-g.length,D=2*A,C=x,F=2*A,M=0,k=0;"vertical"===n.legendOrientation?(M=3*D+F+v,k=(b+1)*C):"horizontal"===n.legendOrientation&&(M=(2*D+F)*b+D+w(m,(function(t,e){return g.includes(e)?0:t.width})),k=C+x);let T=0,_=0;if("top"===n.legendPosition)T=f+e.dataAreaSize.width/2-M/2,_=s,Bo(r,0,k+C),No(a,0,k+C);else if("bottom"===n.legendPosition)T=f+e.dataAreaSize.width/2-M/2,_=s+e.dataAreaSize.height+c+C,Bo(r,0,k+C);else if("left"===n.legendPosition)T=0,_=s+e.dataAreaSize.height/2-k/2,Bo(r,M+D,0),No(a,M+D,0);else{if("right"!==n.legendPosition)return;T=e.dataAreaSize.width+f+h+D,_=s+e.dataAreaSize.height/2-k/2,Bo(r,M+D,0)}let S=t.graphArea.append("g").attr("id","legend").attr("transform","translate("+T+","+_+")"),B=S.append("rect").attr("class","tracker-legend").attr("width",M).attr("height",k);n.legendBgColor&&B.style("fill",n.legendBgColor),n.legendBorderColor&&B.style("stroke",n.legendBorderColor);let N=D,E=x,I=N+D+F,L=E;if("vertical"===n.legendOrientation){n.GetChartType()===Ta.Line?(S.selectAll("markers").data(p).enter().append("line").attr("x1",N).attr("x2",N+F).attr("y1",(function(t,e){let n=g.filter((t=>t<e)).length;return E+(e-=n)*C})).attr("y2",(function(t,e){let n=g.filter((t=>t<e)).length;return E+(e-=n)*C})).style("stroke",(function(t,e){if(!g.includes(e))return n.lineColor[e]})),S.selectAll("markers").data(p).enter().append("circle").attr("cx",N+F/2).attr("cy",(function(t,e){let n=g.filter((t=>t<e)).length;return E+(e-=n)*C})).attr("r",(function(t,e){if(!g.includes(e))return n.showPoint[e]?n.pointSize[e]:0})).style("fill",(function(t,e){if(!g.includes(e))return n.pointColor[e]}))):n.GetChartType()===Ta.Bar&&S.selectAll("markers").data(p).enter().append("rect").attr("x",N).attr("y",(function(t,e){let n=g.filter((t=>t<e)).length;return E+(e-=n)*C-x/2})).attr("width",F).attr("height",x).style("fill",(function(t,e){if(!g.includes(e))return n.barColor[e]}));let t=S.selectAll("labels").data(p).enter().append("text").attr("x",I).attr("y",(function(t,e){let n=g.filter((t=>t<e)).length;return L+(e-=n)*C})).text((function(t,e){return g.includes(e)?"":t})).style("alignment-baseline","middle").attr("class","tracker-legend-label");n.GetChartType()===Ta.Line?t.style("fill",(function(t,e){if(!g.includes(e))return n.lineColor[e]})):n.GetChartType()===Ta.Bar&&t.style("fill",(function(t,e){if(!g.includes(e))return n.barColor[e]}))}else if("horizontal"===n.legendOrientation){let t=0,e=0;n.GetChartType()===Ta.Line?(S.selectAll("markers").data(p).enter().append("line").attr("x1",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=N:t+=m[n].width+D+F+D,t})).attr("x2",(function(t,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?e=N+F:e+=m[n].width+D+F+D,e})).attr("y1",E).attr("y2",E).style("stroke",(function(t,e){if(!g.includes(e))return n.lineColor[e]})),t=0,S.selectAll("markers").data(p).enter().append("circle").attr("cx",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=N+F/2:t+=m[n].width+D+F+D,t})).attr("cy",E).attr("r",(function(t,e){if(!g.includes(e))return n.showPoint[e]?n.pointSize[e]:0})).style("fill",(function(t,e){if(!g.includes(e))return n.pointColor[e]}))):n.GetChartType()===Ta.Bar&&(t=0,S.selectAll("markers").data(p.filter(((t,e)=>!g.includes(e)))).enter().append("rect").attr("x",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=N:t+=m[n].width+D+F+D,t})).attr("y",E-x/2).attr("width",F).attr("height",x).style("fill",(function(t,e){if(!g.includes(e))return n.barColor[e]}))),t=0;let r=S.selectAll("labels").data(p).enter().append("text").attr("x",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=I:t+=m[n].width+D+F+D,t})).attr("y",L).text((function(t,e){return g.includes(e)?"":t})).style("alignment-baseline","middle").attr("class","tracker-legend-label");n.GetChartType()===Ta.Line?r.style("fill",(function(t,e){if(!g.includes(e))return n.lineColor[e]})):n.GetChartType()===Ta.Bar&&r.style("fill",(function(t,e){if(!g.includes(e))return n.barColor[e]}))}}function tl(t,e,n){if(!e||!n)return;if(!n.title)return;let r=So(n.title,"tracker-title"),a=t.graphArea.append("text").text(n.title).attr("id","title").attr("transform","translate("+e.dataAreaSize.width/2+","+r.height/2+")").attr("height",r.height).attr("class","tracker-title");t.title=a,Bo(t.svg,0,r.height),Bo(t.graphArea,0,r.height),No(t.dataArea,0,r.height)}function el(t,e,n){let r=Zt(t),a=e.svg,i=parseFloat(a.attr("width")),o=parseFloat(a.attr("height"));a.attr("width",null).attr("height",null).attr("viewBox",`0 0 ${i} ${o}`).attr("preserveAspectRatio","xMidYMid meet"),n.fitPanelWidth?r.style("width","100%"):(r.style("width",(i*n.fixedScale).toString()+"px"),r.style("height",(o*n.fixedScale).toString()+"px"))}function nl(t,e){let n={},r=Zt(t).append("svg").attr("id","svg").attr("width",e.dataAreaSize.width+e.margin.left+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.top+e.margin.bottom);n.svg=r;let a=r.append("g").attr("id","graphArea").attr("transform","translate("+e.margin.left+","+e.margin.top+")").attr("width",e.dataAreaSize.width+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.bottom);n.graphArea=a;let i=a.append("g").attr("id","dataArea").attr("width",e.dataAreaSize.width).attr("height",e.dataAreaSize.height);return n.dataArea=i,n}function rl(t,e,n){if(!e||!n)return;let r=nl(t,e);tl(r,e,n),jo(r,e,n);let a=[],i=[],o=e.datasets.getXDatasetIds();for(let t=0;t<n.yAxisLocation.length;t++){if(o.includes(t))continue;let e=n.yAxisLocation[t];"left"===e.toLowerCase()?a.push(t):"right"===e.toLocaleLowerCase()&&i.push(t)}let l=Zo(r,e,n,"left",a);if("string"==typeof l)return l;if(r.leftYAxis&&r.leftYScale)for(let t of a){let a=e.datasets.getDatasetById(t);a.getQuery().usedAsXDataset||(Go(r,e,n,a,"left"),Qo(r,e,n,a,"left"))}let u=Zo(r,e,n,"right",i);if("string"==typeof u)return u;if(r.rightYAxis&&r.rightYScale)for(let t of i){let a=e.datasets.getDatasetById(t);a.getQuery().usedAsXDataset||(Go(r,e,n,a,"right"),Qo(r,e,n,a,"right"))}n.showLegend&&Ko(r,e,n),el(t,r,e)}function al(t,e,n){if(!e||!n)return;let r=nl(t,e);tl(r,e,n),jo(r,e,n);let a=[],i=[],o=e.datasets.getXDatasetIds();for(let t=0;t<n.yAxisLocation.length;t++){if(o.includes(t))continue;let e=n.yAxisLocation[t];"left"===e.toLowerCase()?a.push(t):"right"===e.toLocaleLowerCase()&&i.push(t)}let l=Zo(r,e,n,"left",a);if("string"==typeof l)return l;let u=a.length+i.length,s=0;if(r.leftYAxis&&r.leftYScale)for(let t of a){let a=e.datasets.getDatasetById(t);a.getQuery().usedAsXDataset||(Jo(r,e,n,a,"left",s,u),s++)}let c=Zo(r,e,n,"right",i);if("string"==typeof c)return c;if(r.rightYAxis&&r.rightYScale)for(let t of i){let a=e.datasets.getDatasetById(t);a.getQuery().usedAsXDataset||(Jo(r,e,n,a,"right",s,u),s++)}n.showLegend&&Ko(r,e,n),el(t,r,e)}function il(t,e){Zt(t).select("#svg").remove(),Zt(t).append("div").text(e).style("background-color","white").style("margin-bottom","20px").style("padding","10px").style("color","red")}var ol=l((function(t,e){Object.defineProperty(e,"__esModule",{value:!0});const r="YYYY-MM-DD",a="gggg-[W]ww",i="YYYY-MM";function o(t){const e=window.app.plugins.getPlugin("periodic-notes");return e&&e.settings?.[t]?.enabled}function l(){try{const{internalPlugins:t,plugins:e}=window.app;if(o("daily")){const{format:t,folder:n,template:a}=e.getPlugin("periodic-notes")?.settings?.daily||{};return{format:t||r,folder:n?.trim()||"",template:a?.trim()||""}}const{folder:n,format:a,template:i}=t.getPluginById("daily-notes")?.instance?.options||{};return{format:a||r,folder:n?.trim()||"",template:i?.trim()||""}}catch(t){console.info("No custom daily note settings found!",t)}}function u(){try{const t=window.app.plugins,e=t.getPlugin("calendar")?.options,n=t.getPlugin("periodic-notes")?.settings?.weekly;if(o("weekly"))return{format:n.format||a,folder:n.folder?.trim()||"",template:n.template?.trim()||""};const r=e||{};return{format:r.weeklyNoteFormat||a,folder:r.weeklyNoteFolder?.trim()||"",template:r.weeklyNoteTemplate?.trim()||""}}catch(t){console.info("No custom weekly note settings found!",t)}}function s(){const t=window.app.plugins;try{const e=o("monthly")&&t.getPlugin("periodic-notes")?.settings?.monthly||{};return{format:e.format||i,folder:e.folder?.trim()||"",template:e.template?.trim()||""}}catch(t){console.info("No custom monthly note settings found!",t)}}function c(...t){let e=[];for(let n=0,r=t.length;n<r;n++)e=e.concat(t[n].split("/"));const n=[];for(let t=0,r=e.length;t<r;t++){const r=e[t];r&&"."!==r&&n.push(r)}return""===e[0]&&n.unshift(""),n.join("/")}async function f(t,e){e.endsWith(".md")||(e+=".md");const r=n.default.normalizePath(c(t,e));return await async function(t){const e=t.replace(/\\/g,"/").split("/");if(e.pop(),e.length){const t=c(...e);window.app.vault.getAbstractFileByPath(t)||await window.app.vault.createFolder(t)}}(r),r}async function h(t){const{metadataCache:e,vault:r}=window.app,a=n.default.normalizePath(t);if("/"===a)return Promise.resolve(["",null]);try{const t=e.getFirstLinkpathDest(a,""),n=await r.cachedRead(t);return[n,window.app.foldManager.load(t)]}catch(t){return console.error(`Failed to read the daily note template '${a}'`,t),new n.default.Notice("Failed to read the daily note template"),["",null]}}function d(t,e="day"){return`${e}-${t.clone().startOf(e).format()}`}function g(t){return t.replace(/\[[^\]]*\]/g,"")}function p(t,e){return m(t.basename,e)}function m(t,e){const n={day:l,week:u,month:s}[e]().format.split("/").pop(),r=window.moment(t,n,!0);if(!r.isValid())return null;if(function(t,e){if("week"===e){const e=g(t);return/w{1,2}/i.test(e)&&(/M{1,4}/.test(e)||/D{1,4}/.test(e))}return!1}(n,e)&&"week"===e){const e=g(n);if(/w{1,2}/i.test(e))return window.moment(t,n.replace(/M{1,4}/g,"").replace(/D{1,4}/g,""),!1)}return r}class y extends Error{}async function v(t){const e=window.app,{vault:r}=e,a=window.moment,{template:i,format:o,folder:u}=l(),[s,c]=await h(i),d=t.format(o),g=await f(u,d);try{const n=await r.create(g,s.replace(/{{\s*date\s*}}/gi,d).replace(/{{\s*time\s*}}/gi,a().format("HH:mm")).replace(/{{\s*title\s*}}/gi,d).replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,((e,n,r,i,l,u)=>{const s=a(),c=t.clone().set({hour:s.get("hour"),minute:s.get("minute"),second:s.get("second")});return r&&c.add(parseInt(i,10),l),u?c.format(u.substring(1).trim()):c.format(o)})).replace(/{{\s*yesterday\s*}}/gi,t.clone().subtract(1,"day").format(o)).replace(/{{\s*tomorrow\s*}}/gi,t.clone().add(1,"d").format(o)));return e.foldManager.save(n,c),n}catch(t){console.error(`Failed to create file: '${g}'`,t),new n.default.Notice("Unable to create new file.")}}class w extends Error{}function A(t){return function(){const{moment:t}=window;let e=t.localeData()._week.dow;const n=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"];for(;e;)n.push(n.shift()),e--;return n}().indexOf(t.toLowerCase())}async function x(t){const{vault:e}=window.app,{template:r,format:a,folder:i}=u(),[o,l]=await h(r),s=t.format(a),c=await f(i,s);try{const n=await e.create(c,o.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,((e,n,r,i,o,l)=>{const u=window.moment(),s=t.clone().set({hour:u.get("hour"),minute:u.get("minute"),second:u.get("second")});return r&&s.add(parseInt(i,10),o),l?s.format(l.substring(1).trim()):s.format(a)})).replace(/{{\s*title\s*}}/gi,s).replace(/{{\s*time\s*}}/gi,window.moment().format("HH:mm")).replace(/{{\s*(sunday|monday|tuesday|wednesday|thursday|friday|saturday)\s*:(.*?)}}/gi,((e,n,r)=>{const a=A(n);return t.weekday(a).format(r.trim())})));return window.app.foldManager.save(n,l),n}catch(t){console.error(`Failed to create file: '${c}'`,t),new n.default.Notice("Unable to create new file.")}}class b extends Error{}async function D(t){const{vault:e}=window.app,{template:r,format:a,folder:i}=s(),[o,l]=await h(r),u=t.format(a),c=await f(i,u);try{const n=await e.create(c,o.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,((e,n,r,i,o,l)=>{const u=window.moment(),s=t.clone().set({hour:u.get("hour"),minute:u.get("minute"),second:u.get("second")});return r&&s.add(parseInt(i,10),o),l?s.format(l.substring(1).trim()):s.format(a)})).replace(/{{\s*date\s*}}/gi,u).replace(/{{\s*time\s*}}/gi,window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi,u));return window.app.foldManager.save(n,l),n}catch(t){console.error(`Failed to create file: '${c}'`,t),new n.default.Notice("Unable to create new file.")}}function C(){const{app:t}=window;if(t.plugins.getPlugin("calendar"))return!0;const e=t.plugins.getPlugin("periodic-notes");return e&&e.settings?.weekly?.enabled}function F(){const{app:t}=window,e=t.plugins.getPlugin("periodic-notes");return e&&e.settings?.monthly?.enabled}e.DEFAULT_DAILY_NOTE_FORMAT=r,e.DEFAULT_MONTHLY_NOTE_FORMAT=i,e.DEFAULT_WEEKLY_NOTE_FORMAT=a,e.appHasDailyNotesPluginLoaded=function(){const{app:t}=window,e=t.internalPlugins.plugins["daily-notes"];if(e&&e.enabled)return!0;const n=t.plugins.getPlugin("periodic-notes");return n&&n.settings?.daily?.enabled},e.appHasMonthlyNotesPluginLoaded=F,e.appHasWeeklyNotesPluginLoaded=C,e.createDailyNote=v,e.createMonthlyNote=D,e.createPeriodicNote=function(t,e){return{day:v,month:D,week:x}[t](e)},e.createWeeklyNote=x,e.getAllDailyNotes=function(){const{vault:t}=window.app,{folder:e}=l(),r=t.getAbstractFileByPath(n.default.normalizePath(e));if(!r)throw new y("Failed to find daily notes folder");const a={};return n.default.Vault.recurseChildren(r,(t=>{if(t instanceof n.default.TFile){const e=p(t,"day");if(e){const n=d(e,"day");a[n]=t}}})),a},e.getAllMonthlyNotes=function(){const t={};if(!F())return t;const{vault:e}=window.app,{folder:r}=s(),a=e.getAbstractFileByPath(n.default.normalizePath(r));if(!a)throw new b("Failed to find monthly notes folder");return n.default.Vault.recurseChildren(a,(e=>{if(e instanceof n.default.TFile){const n=p(e,"month");if(n){const r=d(n,"month");t[r]=e}}})),t},e.getAllWeeklyNotes=function(){const t={};if(!C())return t;const{vault:e}=window.app,{folder:r}=u(),a=e.getAbstractFileByPath(n.default.normalizePath(r));if(!a)throw new w("Failed to find weekly notes folder");return n.default.Vault.recurseChildren(a,(e=>{if(e instanceof n.default.TFile){const n=p(e,"week");if(n){const r=d(n,"week");t[r]=e}}})),t},e.getDailyNote=function(t,e){return e[d(t,"day")]??null},e.getDailyNoteSettings=l,e.getDateFromFile=p,e.getDateFromPath=function(t,e){return m(function(t){let e=t.substring(t.lastIndexOf("/")+1);return-1!=e.lastIndexOf(".")&&(e=e.substring(0,e.lastIndexOf("."))),e}(t),e)},e.getDateUID=d,e.getMonthlyNote=function(t,e){return e[d(t,"month")]??null},e.getMonthlyNoteSettings=s,e.getPeriodicNoteSettings=function(t){return(0,{day:l,week:u,month:s}[t])()},e.getTemplateInfo=h,e.getWeeklyNote=function(t,e){return e[d(t,"week")]??null},e.getWeeklyNoteSettings=u}));function ll(t){switch(t=t.trim().toLowerCase()){case"true":case"1":case"on":case"yes":return!0;case"false":case"0":case"off":case"no":return!1}return null}function ul(t){return"tag"===t.toLowerCase()||"text"===t.toLowerCase()||"frontmatter"===t.toLowerCase()||"wiki"===t.toLowerCase()||"dvfield"===t.toLowerCase()||"table"===t.toLowerCase()||"filemeta"===t.toLowerCase()||"task"===t.toLowerCase()||"task.all"===t.toLowerCase()||"task.done"===t.toLowerCase()||"task.notdone"===t.toLowerCase()}function sl(t){return"left"===t||"right"===t||"none"===t}function cl(t){return!0}function fl(t,e,n,r,a){let i=[],o="",l=0;for(;n>i.length;)i.push(r);if(null==e);else if("object"==typeof e&&null!==e){if(Array.isArray(e)){if(e.length>n)return o="Too many inputs for parameter '"+t+"'",o;if(0===e.length)return o="Empty array not allowd for "+t,o;for(let n=0;n<i.length;n++)if(n<e.length){let a=e[n],u=null;if(n>0&&(u=e[n-1].trim()),"string"==typeof a){if(a=a.trim(),""!==a){o="Invalid inputs for "+t;break}i[n]=null!==u?u:r}else{if("boolean"!=typeof a){o="Invalid inputs for "+t;break}i[n]=a,l++}}else{let t=e[e.length-1];i[n]=l>0?t:r}}}else if("string"==typeof e){let a=e.split(",");if(a.length>1){if(a.length>n)return o="Too many inputs for parameter '"+t+"'",o;for(let e=0;e<i.length;e++)if(e<a.length){let n=a[e].trim(),u=null;if(e>0&&(u=ll(a[e-1].trim())),""===n)i[e]=null!==u?u:r;else{let r=ll(n);if(null===r){o="Invalid inputs for "+t;break}i[e]=r,l++}}else{let t=ll(a[a.length-1].trim());i[e]=l>0&&null!==t?t:r}}else if(""===e);else{let n=ll(e);if(null!==n){i[0]=n,l++;for(let t=1;t<i.length;t++)i[t]=n}else o="Invalid inputs for "+t}}else if("boolean"==typeof e){i[0]=e,l++;for(let t=1;t<i.length;t++)i[t]=e}else o="Invalid inputs for "+t;return a||0!==l||(o="No valid input for "+t),""!==o?o:i}function hl(t,e,n,r,a){let i=[],o="",l=0;for(;n>i.length;)i.push(r);if(null==e);else if("object"==typeof e&&null!==e){if(Array.isArray(e)){if(e.length>n)return o="Too many inputs for parameter '"+t+"'",o;if(0===e.length)return o="Empty array not allowd for "+t,o;for(let n=0;n<i.length;n++)if(n<e.length){let a=e[n],u=null;if(n>0&&(u=e[n-1].trim()),"string"==typeof a){if(a=a.trim(),""!==a){o="Invalid inputs for "+t;break}i[n]=null!==u?u:r}else{if("number"!=typeof a){o="Invalid inputs for "+t;break}i[n]=a,l++}}else{let t=e[e.length-1];i[n]=l>0?t:r}}}else if("string"==typeof e){let a=e.split(",");if(a.length>1){if(a.length>n)return o="Too many inputs for parameter '"+t+"'",o;for(let n=0;n<i.length;n++)if(n<a.length){let e=a[n].trim(),u=null;if(n>0&&(u=_o(a[n-1].trim()).value),""===e)null!==u&&Number.isNumber(u)?i[n]=u:i[n]=r;else{let r=_o(e).value;if(!Number.isNumber(r)){o="Invalid inputs for "+t;break}i[n]=r,l++}}else{let t=_o(a[e.length-1].trim()).value;l>0&&Number.isNumber(t)?i[n]=t:i[n]=r}}else if(""===e);else{let n=_o(e).value;if(Number.isNumber(n)){i[0]=n,l++;for(let t=1;t<i.length;t++)i[t]=n}else o="Invalid inputs for "+t}}else if("number"==typeof e)if(Number.isNumber(e)){i[0]=e,l++;for(let t=1;t<i.length;t++)i[t]=e}else o="Invalid inputs for "+t;else o="Invalid inputs for "+t;return a||0!==l||(o="No valid input for "+t),""!==o?o:i}function dl(t,e,n,r,a,i){let o=[],l="",u=0;for(;n>o.length;)o.push(r);if(null==e);else if("object"==typeof e&&null!==e){if(Array.isArray(e)){if(e.length>n)return l="Too many inputs for parameter '"+t+"'",l;if(0===e.length)return l="Empty array not allowd for "+t,l;for(let n=0;n<o.length;n++)if(n<e.length){let i=e[n],s=null;if(n>0&&(s=e[n-1].trim()),"string"!=typeof i){l="Invalid inputs for "+t;break}if(i=i.trim(),""===i)o[n]=null!==s?s:r;else if(a){if(!a(i)){l="Invalid inputs for "+t;break}o[n]=i,u++}else o[n]=i,u++}else{let t=e[e.length-1].trim();o[n]=u>0?t:r}}}else if("string"==typeof e){let i=e.split(",");if(i.length>1){if(i.length>n)return l="Too many inputs for parameter '"+t+"'",l;for(let e=0;e<o.length;e++)if(e<i.length){let n=i[e].trim(),s=null;if(e>0&&(s=i[e-1].trim()),""===n)o[e]=null!==s?s:r;else if(a){if(!a(n)){l="Invalid inputs for "+t;break}o[e]=n,u++}else o[e]=n,u++}else{let t=i[i.length-1].trim();o[e]=u>0?t:r}}else if(""===e);else if(a)if(a(e)){o[0]=e,u++;for(let t=1;t<o.length;t++)o[t]=e}else l="Invalid inputs for "+t;else{o[0]=e,u++;for(let t=1;t<o.length;t++)o[t]=e}}else l="Invalid inputs for "+t;return i||0!==u||(l="No valid input for "+t),""!==l?l:o}function gl(t,e){let n=[];if(null==e)return n;if("object"==typeof e){if(Array.isArray(e))for(let r of e)if("string"==typeof r){let e=parseFloat(r);if(!Number.isNumber(e)){return`Parameter '${t}' accepts only numbers`}n.push(e)}}else if("string"==typeof e){let r=e.split(",");if(r.length>1)for(let e of r){let r=parseFloat(e.trim());if(Number.isNaN(r)){return`Parameter '${t}' accepts only numbers`}n.push(r)}else{if(""===e){return`Empty ${t} is not allowed.`}{let r=parseFloat(e);if(!Number.isNumber(r)){return`Parameter '${t}' accepts only numbers`}n.push(r)}}}else{if("number"!=typeof e){return`Invalid ${t}`}n.push(e)}return n}function pl(t,e){let n=[];if(null==e)return n;if("object"==typeof e){if(Array.isArray(e))for(let t of e)"string"==typeof t&&n.push(t)}else{if("string"!=typeof e){return`Invalid ${t}`}{let r=e.split(",");if(r.length>1)for(let t of r)n.push(t);else{if(""===e){return`Empty ${t} is not allowed.`}n.push(e)}}}return n}function ml(t,e){t&&("string"==typeof t.title&&(e.title=t.title),"string"==typeof t.xAxisLabel&&(e.xAxisLabel=t.xAxisLabel),"string"==typeof t.xAxisColor&&(e.xAxisColor=t.xAxisColor),"string"==typeof t.xAxisLabelColor&&(e.xAxisLabelColor=t.xAxisLabelColor),"boolean"==typeof t.allowInspectData&&(e.allowInspectData=t.allowInspectData),"boolean"==typeof t.showLegend&&(e.showLegend=t.showLegend),"string"==typeof t.legendPosition?e.legendPosition=t.legendPosition:e.legendPosition="bottom","string"==typeof t.legendOrientation?e.legendOrientation=t.legendOrientation:"top"===e.legendPosition||"bottom"===e.legendPosition?e.legendOrientation="horizontal":"left"===e.legendPosition||"right"===e.legendPosition?e.legendOrientation="vertical":e.legendOrientation="horizontal","string"==typeof t.legendBgColor&&(e.legendBgColor=t.legendBgColor),"string"==typeof t.legendBorderColor&&(e.legendBorderColor=t.legendBorderColor));let n=dl("yAxisLabel",null==t?void 0:t.yAxisLabel,2,"Value",null,!0);if("string"==typeof n)return n;if(n.length>2)return"yAxisLabel accepts not more than two values for left and right y-axes";e.yAxisLabel=n;let r=dl("yAxisColor",null==t?void 0:t.yAxisColor,2,"",cl,!0);if("string"==typeof r)return r;if(r.length>2)return"yAxisColor accepts not more than two values for left and right y-axes";e.yAxisColor=r;let a=dl("yAxisLabelColor",null==t?void 0:t.yAxisLabelColor,2,"",cl,!0);if("string"==typeof a)return a;if(a.length>2)return"yAxisLabelColor accepts not more than two values for left and right y-axes";e.yAxisLabelColor=a;let i=dl("yAxisUnit",null==t?void 0:t.yAxisUnit,2,"",null,!0);if("string"==typeof i)return i;if(i.length>2)return"yAxisUnit accepts not more than two values for left and right y-axes";e.yAxisUnit=i;let o=hl("yMin",null==t?void 0:t.yMin,2,null,!0);if("string"==typeof o)return o;if(o.length>2)return"yMin accepts not more than two values for left and right y-axes";e.yMin=o;let l=hl("yMax",null==t?void 0:t.yMax,2,null,!0);if("string"==typeof l)return l;if(l.length>2)return"yMax accepts not more than two values for left and right y-axes";e.yMax=l;let u=fl("reverseYAxis",null==t?void 0:t.reverseYAxis,2,!1,!0);return"string"==typeof u?u:u.length>2?"reverseYAxis accepts not more than two values for left and right y-axes":void(e.reverseYAxis=u)}function yl(t){let e=[];if(null!==t){const n=Object.keys(t);for(let t of n)e.push(t.toString())}return e}function vl(t,e){let n=t.basename;return e.dateFormatPrefix&&n.startsWith(e.dateFormatPrefix)&&(n=n.slice(e.dateFormatPrefix.length)),e.dateFormatSuffix&&n.endsWith(e.dateFormatSuffix)&&(n=n.slice(0,n.length-e.dateFormatSuffix.length)),bo(n,e.dateFormat)}function wl(t,e,n){let r=window.moment(""),a=t.frontmatter;if(a&&ko(a,e.getTarget())){r=bo(ko(a,e.getTarget()),n.dateFormat)}return r}function Al(t,e,n){let r=window.moment(""),a=e.getTarget();e.getParentTarget()&&(a=e.getParentTarget());let i,o=new RegExp("(^|\\s)#"+a+"(\\/[\\w-]+)*(:(?<values>[\\d\\.\\/-]*)[a-zA-Z]*)?([\\.!,\\?;~-]*)?(\\s|$)","gm");for(;i=o.exec(t);)if(void 0!==i.groups&&void 0!==i.groups.values){if(r=bo(i.groups.values,n.dateFormat),r.isValid())break}return r}function xl(t,e,n){let r,a=window.moment(""),i=e.getTarget(),o=new RegExp(i,"gm");for(;r=o.exec(t);)if(void 0!==r.groups&&void 0!==r.groups.value){if(a=bo(r.groups.value.trim(),n.dateFormat),a.isValid())break}return a}function bl(t,e,n){let r=window.moment(""),a=e.getTarget();e.getParentTarget()&&(a=e.getParentTarget()),a=a.replace("-","[\\s\\-]");let i,o=new RegExp("(^|\\s)\\*{0,2}"+a+"\\*{0,2}(::\\s*(?<values>[\\d\\.\\/\\-\\w,@;\\s]*))(\r?\n|\r)","gm");for(;i=o.exec(t);)if(void 0!==i.groups&&void 0!==i.groups.values){if(r=bo(i.groups.values.trim(),n.dateFormat),r.isValid())break}return r}function Dl(e,n,r){let a=window.moment("");if(e&&e instanceof t.TFile){let t=n.getTarget();if("cDate"===t){a=Fo(e.stat.ctime,r.dateFormat)}else if("mDate"===t){a=Fo(e.stat.mtime,r.dateFormat)}}return a}function Cl(t,e,n){let r=e.getSubType(),a=window.moment(""),i=e.getTarget();i="all"===r?"\\[[\\sx]\\]\\s"+i:"done"===r?"\\[x\\]\\s"+i:"notdone"===r?"\\[\\s\\]\\s"+i:"\\[[\\sx]\\]\\s"+i;let o,l=new RegExp(i,"gm");for(;o=l.exec(t);)if(void 0!==o.groups&&void 0!==o.groups.value){if(a=bo(o.groups.value.trim(),n.dateFormat),a.isValid())break}return a}function Fl(t,e,n,r){if(t.has(e)){t.get(e).push({query:n,value:r})}else{let a=new Array;a.push({query:n,value:r}),t.set(e,a)}}function Ml(e,n,r,a,i,o){if(e&&e instanceof t.TFile){let t=r.getTarget(),l=o.get(a.xDataset[r.getId()]);if("cDate"===t){let t=e.stat.ctime;r.valueType=_a.Date,r.addNumTargets(),Fl(i,l,r,t)}else if("mDate"===t){let t=e.stat.mtime;r.valueType=_a.Date,r.addNumTargets(),Fl(i,l,r,t)}else if("size"===t){let t=e.stat.size;r.addNumTargets(),Fl(i,l,r,t)}else if("numWords"===t){Fl(i,l,r,function(t){t=Eo(t);var e=new RegExp(["(?:[0-9]+(?:(?:,|\\.)[0-9]+)*|[\\-"+/A-Za-z\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC/.source+"])+",/[\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u4E00-\u9FD5]{1}/.source].join("|"),"g");return(t.match(e)||[]).length}(n))}else if("numChars"===t){let t=n.length;r.addNumTargets(),Fl(i,l,r,t)}else if("numSentences"===t){let t=function(t){return(((t=Eo(t))||"").match(/[^.。!！?？\s][^.。!！?？]*(?:[.!?](?!['‘’"“”「」『』]?\s|$)[^.。!！?？]*)*[.。!！?？]?['’"”」』]?(?=\s||$)/gm)||[]).length}(n);r.addNumTargets(),Fl(i,l,r,t)}}}const kl={folder:"/",dateFormat:"YYYY-MM-DD"};class Tl extends t.PluginSettingTab{constructor(t,e){super(t,e),this.plugin=e}display(){let{containerEl:e}=this;e.empty(),new t.Setting(e).setName("Default folder location").setDesc("Files in this folder will be parsed and used as input data of the tracker plugin.\nYou can also override it using 'folder' argument int the tracker codeblock.").addText((t=>t.setPlaceholder("Folder Path").setValue(this.plugin.settings.folder).onChange((t=>r(this,void 0,void 0,(function*(){this.plugin.settings.folder=t,yield this.plugin.saveSettings()})))))),new t.Setting(e).setName("Default date format").setDesc("This format is used to parse the date in your diary title.\nYou can also override it using 'date-format' argument in the tracker codeblock.").addText((t=>t.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange((t=>r(this,void 0,void 0,(function*(){this.plugin.settings.dateFormat=t,yield this.plugin.saveSettings()}))))))}}class _l extends t.Plugin{onload(){return r(this,void 0,void 0,(function*(){console.log("loading obsidian-tracker plugin"),yield this.loadSettings(),this.addSettingTab(new Tl(this.app,this)),this.registerMarkdownCodeBlockProcessor("tracker",this.postprocessor.bind(this)),this.addCommand({id:"add-line-chart-tracker",name:"Add Line Chart Tracker",callback:()=>this.addCodeBlock(Ta.Line)}),this.addCommand({id:"add-bar-chart-tracker",name:"Add Bar Chart Tracker",callback:()=>this.addCodeBlock(Ta.Bar)}),this.addCommand({id:"add-summary-tracker",name:"Add Summary Tracker",callback:()=>this.addCodeBlock(Ta.Summary)})}))}loadSettings(){return r(this,void 0,void 0,(function*(){this.settings=Object.assign({},kl,yield this.loadData())}))}saveSettings(){return r(this,void 0,void 0,(function*(){yield this.saveData(this.settings)}))}onunload(){console.log("unloading obsidian-tracker plugin")}getFilesInFolder(e,n=!0){let r=[];for(let a of e.children)a instanceof t.TFile?"md"===a.extension&&r.push(a):a instanceof t.TFolder&&n&&(r=r.concat(this.getFilesInFolder(a)));return r}getFiles(e,n=!0){let r=[],a=this.app.vault.getAbstractFileByPath(t.normalizePath(e));return a&&a instanceof t.TFolder&&(r=r.concat(this.getFilesInFolder(a))),r}postprocessor(e,n,a){return r(this,void 0,void 0,(function*(){const a=document.createElement("div");let i=function(e,n){let r;try{r=t.parseYaml(e)}catch(t){let e="Error parsing YAML";return console.log(t),e}if(!r)return"Error parsing YAML";let a=yl(r),i="";if(!a.includes("searchTarget"))return"Parameter 'searchTarget' not found in YAML";let o=[];if("object"==typeof r.searchTarget&&null!==r.searchTarget){if(Array.isArray(r.searchTarget))for(let t of r.searchTarget)if("string"==typeof t){if(""===t){i="Empty search target is not allowed.";break}o.push(t)}}else if("string"==typeof r.searchTarget){let t=r.searchTarget.split(",");if(t.length>1)for(let e of t){if(e=e.trim(),""===e){i="Empty search target is not allowed.";break}o.push(e)}else""===r.searchTarget?i="Empty search target is not allowed.":o.push(r.searchTarget)}else i="Invalid search target (searchTarget)";if(""!==i)return i;let l=o.length;if(!a.includes("searchType"))return"Parameter 'searchType' not found in YAML";let u=[],s=[],c=dl("searchType",r.searchType,l,"",ul,!1);if("string"==typeof c)return c;for(let t of c)switch(t){case"tag":u.push(ka.Tag),s.push("");break;case"frontmatter":u.push(ka.Frontmatter),s.push("");break;case"wiki":u.push(ka.Wiki),s.push("");break;case"text":u.push(ka.Text),s.push("");break;case"dvField":u.push(ka.dvField),s.push("");break;case"table":u.push(ka.Table),s.push("");break;case"fileMeta":u.push(ka.FileMeta),s.push("");break;case"task":case"task.all":u.push(ka.Task),s.push("all");break;case"task.done":u.push(ka.Task),s.push("done");break;case"task.notdone":u.push(ka.Task),s.push("notdone")}if(u.includes(ka.Table)&&u.filter((t=>t!==ka.Table)).length>0)return"searchType 'table' doestn't work with other types for now";let f=[],h=dl("separator",r.separator,l,"/",null,!0);if("string"==typeof h)return h;f=h.map((t=>"comma"===t?",":t));let d=hl("xDataset",r.xDataset,l,-1,!0);if("string"==typeof d)return d;let g=d.map((t=>t<0||t>=l?-1:t)),p=[];for(let t=0;t<o.length;t++){let e=new ro(p.length,u[t],o[t]);e.setSeparator(f[t]),""!==s[t]&&e.setSubType(s[t]),g.includes(t)&&(e.usedAsXDataset=!0),p.push(e)}let m=new oo(p),y=yl(m),v=["searchType","searchTarget","separator"],w=[],A=[],x=[],b=[],D=[],C=[],F=[];for(let t of a)/^line[0-9]*$/.test(t)&&(w.push(t),v.push(t)),/^bar[0-9]*$/.test(t)&&(A.push(t),v.push(t)),/^pie[0-9]*$/.test(t)&&(x.push(t),v.push(t)),/^summary[0-9]*$/.test(t)&&(b.push(t),v.push(t)),/^bullet[0-9]*$/.test(t)&&(F.push(t),v.push(t)),/^month[0-9]*$/.test(t)&&(D.push(t),v.push(t)),/^heatmap[0-9]*$/.test(t)&&(C.push(t),v.push(t));for(let t of a)if(!y.includes(t)&&!v.includes(t))return i="'"+t+"' is not an available key",i;if(0===w.length+A.length+x.length+b.length+F.length+D.length+C.length)return"No output parameter provided, please place line, bar, pie, month, bullet, or summary.";ol.getDailyNoteSettings(),"string"==typeof r.folder?""===r.folder?m.folder=n.settings.folder:m.folder=r.folder:m.folder=n.settings.folder;let M=n.app.vault.getAbstractFileByPath(t.normalizePath(m.folder));if(!(M&&M instanceof t.TFolder))return"Folder '"+m.folder+"' doesn't exist";const k=r.dateFormat;if("string"==typeof r.dateFormat?""===r.dateFormat?m.dateFormat=n.settings.dateFormat:m.dateFormat=k:m.dateFormat=n.settings.dateFormat,"string"==typeof r.dateFormatPrefix&&(m.dateFormatPrefix=r.dateFormatPrefix),"string"==typeof r.dateFormatSuffix&&(m.dateFormatSuffix=r.dateFormatSuffix),"string"==typeof r.startDate){let t=r.startDate;m.dateFormatPrefix&&t.startsWith(m.dateFormatPrefix)&&(t=t.slice(m.dateFormatPrefix.length)),m.dateFormatSuffix&&t.endsWith(m.dateFormatSuffix)&&(t=t.slice(0,t.length-m.dateFormatSuffix.length));let e=null,n=!1;if(e=Do(t,m.dateFormat),e?n=!0:(e=bo(t,m.dateFormat),e.isValid()&&(n=!0)),!n||null===e)return"Invalid startDate, the format of startDate may not match your dateFormat "+m.dateFormat;m.startDate=e}if("string"==typeof r.endDate){let t=r.endDate;m.dateFormatPrefix&&t.startsWith(m.dateFormatPrefix)&&(t=t.slice(m.dateFormatPrefix.length)),m.dateFormatSuffix&&t.endsWith(m.dateFormatSuffix)&&(t=t.slice(0,t.length-m.dateFormatSuffix.length));let e=null,n=!1;if(e=Do(t,m.dateFormat),e?n=!0:(e=bo(t,m.dateFormat),e.isValid()&&(n=!0)),!n||null===e)return"Invalid endDate, the format of endDate may not match your dateFormat "+m.dateFormat;m.endDate=e}if(null!==m.startDate&&m.startDate.isValid()&&null!==m.endDate&&m.endDate.isValid()&&m.endDate<m.startDate)return"Invalid date range (startDate larger than endDate)";m.xDataset=g;let T=dl("datasetName",r.datasetName,l,"untitled",null,!0);if("string"==typeof T)return T;let _=0;for(let t=0;t<T.length;t++)m.xDataset.includes(t)||"untitled"===T[t]&&(T[t]="untitled"+_.toString(),_++);if(new Set(T).size!==T.length)return"Not enough dataset names or duplicated names";m.datasetName=T;let S=hl("constValue",r.constValue,l,1,!0);if("string"==typeof S)return S;m.constValue=S;let B=fl("ignoreAttachedValue",r.ignoreAttachedValue,l,!1,!0);if("string"==typeof B)return B;m.ignoreAttachedValue=B;let N=fl("ignoreZeroValue",r.ignoreZeroValue,l,!1,!0);if("string"==typeof N)return N;m.ignoreZeroValue=N;let E=fl("accum",r.accum,l,!1,!0);if("string"==typeof E)return E;m.accum=E;let I=hl("penalty",r.penalty,l,null,!0);if("string"==typeof I)return I;m.penalty=I;let L=hl("valueShift",r.valueShift,l,0,!0);if("string"==typeof L)return L;m.valueShift=L,"number"==typeof r.fixedScale&&(m.fixedScale=r.fixedScale),"boolean"==typeof r.fitPanelWidth&&(m.fitPanelWidth=r.fitPanelWidth);let P=hl("margin",r.margin,4,10,!0);if("string"==typeof P)return P;if(P.length>4)return"margin accepts not more than four values for top, right, bottom, and left margins.";m.margin=new vo(P[0],P[1],P[2],P[3]);for(let t of w){let e=new so,n=r[t],a=yl(e),o=yl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;let u=ml(n,e);if("string"==typeof u)return u;let s=dl("lineColor",null==n?void 0:n.lineColor,l,"",cl,!0);if("string"==typeof s)return s;e.lineColor=s;let c=hl("lineWidth",null==n?void 0:n.lineWidth,l,1.5,!0);if("string"==typeof c)return c;e.lineWidth=c;let f=fl("showLine",null==n?void 0:n.showLine,l,!0,!0);if("string"==typeof f)return f;e.showLine=f;let h=fl("showPoint",null==n?void 0:n.showPoint,l,!0,!0);if("string"==typeof h)return h;e.showPoint=h;let d=dl("pointColor",null==n?void 0:n.pointColor,l,"#69b3a2",cl,!0);if("string"==typeof d)return d;e.pointColor=d;let g=dl("pointBorderColor",null==n?void 0:n.pointBorderColor,l,"#69b3a2",cl,!0);if("string"==typeof g)return g;e.pointBorderColor=g;let p=hl("pointBorderWidth",null==n?void 0:n.pointBorderWidth,l,0,!0);if("string"==typeof p)return p;e.pointBorderWidth=p;let y=hl("pointSize",null==n?void 0:n.pointSize,l,3,!0);if("string"==typeof y)return y;e.pointSize=y;let v=fl("fillGap",null==n?void 0:n.fillGap,l,!1,!0);if("string"==typeof v)return v;e.fillGap=v;let w=dl("yAxisLocation",null==n?void 0:n.yAxisLocation,l,"left",sl,!0);if("string"==typeof w)return w;e.yAxisLocation=w,m.line.push(e)}for(let t of A){let e=new co,n=r[t],a=yl(e),o=yl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;let u=ml(n,e);if("string"==typeof u)return u;let s=dl("barColor",null==n?void 0:n.barColor,l,"",cl,!0);if("string"==typeof s)return s;e.barColor=s;let c=dl("yAxisLocation",null==n?void 0:n.yAxisLocation,l,"left",sl,!0);if("string"==typeof c)return c;e.yAxisLocation=c,m.bar.push(e)}for(let t of x){let e=new fo,n=r[t],a=yl(e),o=yl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;"string"==typeof(null==n?void 0:n.title)&&(e.title=n.title);let l=pl("data",null==n?void 0:n.data);if("string"==typeof l)return l;e.data=l;let u=e.data.length,s=dl("dataColor",null==n?void 0:n.dataColor,u,"none",cl,!0);if("string"==typeof s)return s;e.dataColor=s,"number"==typeof(null==n?void 0:n.ratioInnerRadius)&&(e.ratioInnerRadius=n.ratioInnerRadius),m.pie.push(e)}for(let t of b){let e=new ho,n=r[t],a=yl(e),o=yl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;"string"==typeof(null==n?void 0:n.template)&&(e.template=n.template),"string"==typeof(null==n?void 0:n.style)&&(e.style=n.style),m.summary.push(e)}for(let t of D){let e=new go,n=r[t],a=yl(e),o=yl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;let l=gl("dataset",null==n?void 0:n.dataset);if("string"==typeof l)return l;if(0===l.length)for(let t of p)l.push(t.getId());e.dataset=l;let u=e.dataset.length;"string"==typeof(null==n?void 0:n.startWeekOn)&&(e.startWeekOn=n.startWeekOn),"boolean"==typeof(null==n?void 0:n.showCircle)&&(e.showCircle=n.showCircle);let s=gl("threshold",null==n?void 0:n.threshold);if("string"==typeof s)return s;if(e.threshold=s,0===e.threshold.length)for(let t=0;t<u;t++)e.threshold.push(0);if(e.threshold.length!==e.dataset.length)return"The number of inputs of threshold and dataset not matched";let c=gl("yMin",null==n?void 0:n.yMin);if("string"==typeof c)return c;if(e.yMin=c,0===e.yMin.length)for(let t=0;t<u;t++)e.yMin.push(null);if(e.yMin.length!==e.dataset.length)return"The number of inputs of yMin and dataset not matched";let f=gl("yMax",null==n?void 0:n.yMax);if("string"==typeof f)return f;if(e.yMax=f,0===e.yMax.length)for(let t=0;t<u;t++)e.yMax.push(null);if(e.yMax.length!==e.dataset.length)return"The number of inputs of yMin and dataset not matched";"string"==typeof(null==n?void 0:n.color)&&(e.color=n.color),"boolean"==typeof(null==n?void 0:n.dimNotInMonth)&&(e.dimNotInMonth=n.dimNotInMonth),"boolean"==typeof(null==n?void 0:n.showStreak)&&(e.showStreak=n.showStreak),"boolean"==typeof(null==n?void 0:n.showTodayRing)&&(e.showTodayRing=n.showTodayRing),"boolean"==typeof(null==n?void 0:n.showSelectedValue)&&(e.showSelectedValue=n.showSelectedValue),"boolean"==typeof(null==n?void 0:n.showSelectedRing)&&(e.showSelectedRing=n.showSelectedRing),"string"==typeof(null==n?void 0:n.circleColor)&&(e.circleColor=n.circleColor),"boolean"==typeof(null==n?void 0:n.circleColorByValue)&&(e.circleColorByValue=n.circleColorByValue),"string"==typeof(null==n?void 0:n.headerYearColor)&&(e.headerYearColor=n.headerYearColor),"string"==typeof(null==n?void 0:n.headerMonthColor)&&(e.headerMonthColor=n.headerMonthColor),"string"==typeof(null==n?void 0:n.dividingLineColor)&&(e.dividingLineColor=n.dividingLineColor),"string"==typeof(null==n?void 0:n.todayRingColor)&&(e.todayRingColor=n.todayRingColor),"string"==typeof(null==n?void 0:n.selectedRingColor)&&(e.selectedRingColor=n.selectedRingColor),"string"==typeof(null==n?void 0:n.initMonth)&&(e.initMonth=n.initMonth),m.month.push(e)}for(let t of C){let e=new po,n=r[t],a=yl(e),o=yl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;m.heatmap.push(e)}for(let t of F){let e=new mo,n=r[t],a=yl(e),o=yl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;"string"==typeof(null==n?void 0:n.title)&&(e.title=n.title),"string"==typeof(null==n?void 0:n.dataset)&&(e.dataset=n.dataset),"string"==typeof(null==n?void 0:n.orientation)&&(e.orientation=n.orientation);let l=gl("range",null==n?void 0:n.range);if("string"==typeof l)return l;let u=l;if(1===u.length){if(u[0]<0)return i="Negative range value is not allowed",i}else{if(!(u.length>1))return i="Empty range is not allowed",i;{let t=u[0];if(t<0)return i="Negative range value is not allowed",i;for(let e=1;e<u.length;e++)if(u[e]<=t)return i="Values in parameter 'range' should be monotonically increasing",i}}e.range=u;let s=u.length,c=dl("rangeColor",null==n?void 0:n.rangeColor,s,"",cl,!0);if("string"==typeof c)return c;e.rangeColor=c,"string"==typeof(null==n?void 0:n.value)&&(e.value=n.value),"string"==typeof(null==n?void 0:n.valueUnit)&&(e.valueUnit=n.valueUnit),"string"==typeof(null==n?void 0:n.valueColor)&&(e.valueColor=n.valueColor),"boolean"==typeof(null==n?void 0:n.showMarker)&&(e.showMarker=n.showMarker),"number"==typeof(null==n?void 0:n.markerValue)&&(e.markerValue=n.markerValue),"string"==typeof(null==n?void 0:n.markerColor)&&(e.markerColor=n.markerColor),m.bullet.push(e)}return m}(e.trim(),this);if("string"==typeof i){return il(a,i),void n.appendChild(a)}let o,l=i;try{o=this.getFiles(l.folder)}catch(t){return il(a,t.message),void n.appendChild(a)}let u=window.moment(""),s=window.moment(""),c=0,f=new Map;const h=o.map((t=>r(this,void 0,void 0,(function*(){let e=null;l.queries.some((t=>{let e=t.getType();return t.getTarget(),e===ka.Frontmatter||e===ka.Tag||e===ka.Wiki}))&&(e=this.app.metadataCache.getFileCache(t));let n=null;l.queries.some((t=>{let e=t.getType(),n=t.getTarget();return e===ka.Tag||e===ka.Text||e===ka.dvField||e===ka.Task||e===ka.FileMeta&&("numWords"===n||"numChars"===n||"numSentences"===n)}))&&(n=yield this.app.vault.adapter.read(t.path));let a=new Map,i=!1;for(let r of l.xDataset)if(!a.has(r)){let o=window.moment("");if(-1===r)o=vl(t,l);else{let a=l.queries[r];switch(a.getType()){case ka.Frontmatter:o=wl(e,a,l);break;case ka.Tag:o=Al(n,a,l);break;case ka.Text:o=xl(n,a,l);break;case ka.dvField:o=bl(n,a,l);break;case ka.FileMeta:o=Dl(t,a,l);break;case ka.Task:o=Cl(n,a,l)}}o.isValid()?(null!==l.startDate&&o<l.startDate&&(i=!0),null!==l.endDate&&o>l.endDate&&(i=!0)):i=!0,i||(a.set(r,Co(o,l.dateFormat)),c++,1==c?(u=o.clone(),s=o.clone()):(o<u&&(u=o.clone()),o>s&&(s=o.clone())))}if(i)return;const o=l.queries.filter((t=>t.getType()!==ka.Table&&!t.usedAsXDataset)).map((i=>r(this,void 0,void 0,(function*(){e&&i.getType()===ka.Tag&&function(t,e,n,r,a){let i=t.frontmatter,o=[];if(i&&i.tags){let t=0,l=!1;Array.isArray(i.tags)?o=o.concat(i.tags):o.push(i.tags);for(let i of o){if(i===e.getTarget())t+=n.constValue[e.getId()],l=!0,e.addNumTargets();else{if(!i.startsWith(e.getTarget()+"/"))continue;t+=n.constValue[e.getId()],l=!0,e.addNumTargets()}let o=null;l&&(o=t),Fl(r,a.get(n.xDataset[e.getId()]),e,o)}}}(e,i,l,f,a),e&&i.getType()===ka.Frontmatter&&"tags"!==i.getTarget()&&function(t,e,n,r,a){let i=t.frontmatter;if(i)if(ko(i,e.getTarget())){let t=_o(ko(i,e.getTarget()));null!==t.value&&(t.type===_a.Time&&(e.valueType=_a.Time),e.addNumTargets(),Fl(r,a.get(n.xDataset[e.getId()]),e,t.value))}else if(e.getParentTarget()&&ko(i,e.getParentTarget())){let t=ko(i,e.getParentTarget()),o=null;if(Array.isArray(t)?o=t.map((t=>t.toString())):"string"==typeof t&&(o=t.split(e.getSeparator())),o&&o.length>e.getAccessor()&&e.getAccessor()>=0){let t=_o(o[e.getAccessor()].trim());null!==t.value&&(t.type===_a.Time&&(e.valueType=_a.Time),e.addNumTargets(),Fl(r,a.get(n.xDataset[e.getId()]),e,t.value))}}}(e,i,l,f,a),e&&i.getType()===ka.Wiki&&function(t,e,n,r,a){let i=t.links,o=0,l=!1;for(let t of i)t.link===e.getTarget()&&(l=!0,o+=n.constValue[e.getId()],e.addNumTargets());let u=null;l&&(u=o),Fl(r,a.get(n.xDataset[e.getId()]),e,u)}(e,i,l,f,a),n&&i.getType()===ka.Tag&&function(t,e,n,r,a){let i=e.getTarget();e.getParentTarget()&&(i=e.getParentTarget()),i.length>1&&i.startsWith("#")&&(i=i.substring(1));let o,l=new RegExp("(^|\\s)#"+i+"(\\/[\\w-]+)*(:(?<values>[\\d\\.\\/-]*)[a-zA-Z]*)?([\\.!,\\?;~-]*)?(\\s|$)","gm"),u=0,s=!1;for(;o=l.exec(t);)if(n.ignoreAttachedValue[e.getId()]||void 0===o.groups||void 0===o.groups.values)u+=n.constValue[e.getId()],s=!0,e.addNumTargets();else{let t=o.groups.values.split(e.getSeparator());if(!t)continue;if(1===t.length){let r=_o(t[0].trim());null!==r.value&&(r.type===_a.Time?(u=r.value,s=!0,e.valueType=_a.Time,e.addNumTargets()):n.ignoreZeroValue[e.getId()]&&0===r.value||(u+=r.value,s=!0,e.addNumTargets()))}else if(t.length>e.getAccessor()&&e.getAccessor()>=0){let n=_o(t[e.getAccessor()].trim());null!==n.value&&(n.type===_a.Time?(u=n.value,s=!0,e.valueType=_a.Time,e.addNumTargets()):(u+=n.value,s=!0,e.addNumTargets()))}}let c=null;s&&(c=u),Fl(r,a.get(n.xDataset[e.getId()]),e,c)}(n,i,l,f,a),n&&i.getType()===ka.Text&&function(t,e,n,r,a){let i,o=e.getTarget(),l=new RegExp(o,"gm"),u=0,s=!1;for(;i=l.exec(t);)if(n.ignoreAttachedValue[e.getId()]||void 0===i.groups)u+=n.constValue[e.getId()],s=!0,e.addNumTargets();else if(void 0!==i.groups.value){let t=parseFloat(i.groups.value);Number.isNaN(t)||n.ignoreZeroValue[e.getId()]&&0===t||(u+=t,s=!0,e.addNumTargets())}s&&Fl(r,a.get(n.xDataset[e.getId()]),e,u)}(n,i,l,f,a),i.getType()===ka.FileMeta&&Ml(t,n,i,l,f,a),n&&i.getType()===ka.dvField&&function(t,e,n,r,a){let i=e.getTarget();e.getParentTarget()&&(i=e.getParentTarget()),i=i.replace("-","[\\s\\-]");let o,l=new RegExp("(^|\\s)\\*{0,2}"+i+"\\*{0,2}(::\\s*(?<values>[\\d\\.\\/\\-\\w,@;\\s]*))(\r?\n|\r|$)","gm"),u=0,s=!1;for(;o=l.exec(t);)if(void 0!==o.groups&&void 0!==o.groups.values){let t=o.groups.values.trim().split(e.getSeparator());if(!t)continue;if(1===t.length){let r=_o(t[0]);null!==r.value&&(r.type===_a.Time?(u=r.value,s=!0,e.valueType=_a.Time,e.addNumTargets()):n.ignoreZeroValue[e.getId()]&&0===r.value||(u+=r.value,s=!0,e.addNumTargets()))}else if(t.length>e.getAccessor()&&e.getAccessor()>=0){let n=_o(t[e.getAccessor()].trim());null!==n.value&&(n.type===_a.Time?(u=n.value,s=!0,e.valueType=_a.Time,e.addNumTargets()):(u+=n.value,s=!0,e.addNumTargets()))}}else u+=n.constValue[e.getId()],s=!0,e.addNumTargets();let c=null;s&&(c=u),Fl(r,a.get(n.xDataset[e.getId()]),e,c)}(n,i,l,f,a),n&&i.getType()===ka.Task&&function(t,e,n,r,a){let i=e.getSubType(),o=e.getTarget();o="all"===i?"\\[[\\sx]\\]\\s"+o:"done"===i?"\\[x\\]\\s"+o:"notdone"===i?"\\[\\s\\]\\s"+o:"\\[[\\sx]\\]\\s"+o;let l,u=new RegExp(o,"gm"),s=0,c=!1;for(;l=u.exec(t);)if(n.ignoreAttachedValue[e.getId()]||void 0===l.groups)s+=n.constValue[e.getId()],c=!0,e.addNumTargets();else if(void 0!==l.groups.value){let t=parseFloat(l.groups.value);Number.isNaN(t)||n.ignoreZeroValue[e.getId()]&&0===t||(s+=t,c=!0,e.addNumTargets())}c&&Fl(r,a.get(n.xDataset[e.getId()]),e,s)}(n,i,l,f,a)}))));yield Promise.all(o)}))));yield Promise.all(h);let d=l.queries.filter((t=>t.getType()===ka.Table)),g=[];for(let t of d){let e=t.getParentTarget(),n=t.getAccessor(),r=t.usedAsXDataset,a=g.find((t=>t.filePath===e&&t.tableIndex===n));if(a)r?a.xDataset=t:a.yDatasets.push(t);else{let a=new Ao(e,n);r?a.xDataset=t:a.yDatasets.push(t),g.push(a)}}for(let e of g){let r=e.xDataset,i=e.yDatasets,o=r.getParentTarget(),h=r.getAccessor(),d="";o+=".md";let g=this.app.vault.getAbstractFileByPath(t.normalizePath(o));if(!(g&&g instanceof t.TFile))continue;{c++;let t,e=yield this.app.vault.adapter.read(g.path),n=new RegExp("((\\r?\\n){2}|^)([^\\r\\n]*\\|[^\\r\\n]*(\\r?\\n)?)+(?=(\\r?\\n){2}|$)","gm"),r=0;for(;t=n.exec(e);){if(r===h){d=t[0];break}r++}}let p=d.split(/\r?\n/);p=p.filter((t=>""!==t));let m=0,y=0;if(p.length>=2){let t=p.shift().trim();t=To(t,"|"),m=t.split("|").length;let e=p.shift().trim();e=To(e,"|");let n=e.split("|");for(let t of n)if(!t.includes("-"))break;y=p.length}if(0==y)continue;let v=r.getAccessor(1);if(v>=m)continue;let w=[];for(let t of p){let e=To(t.trim(),"|").split("|");if(v<e.length){let t=bo(e[v].trim(),l.dateFormat);t.isValid()?(w.push(t),u.isValid()||s.isValid()?(t<u&&(u=t.clone()),t>s&&(s=t.clone())):(u=t.clone(),s=t.clone())):w.push(null)}else w.push(null)}if(w.every((t=>null===t))){return il(a,"No valid X value found"),void n.appendChild(a)}for(let t of i){let e=t.getAccessor(1);if(e>=m)continue;let n=0;for(let r of p){let a=To(r.trim(),"|").split("|");if(e<a.length){let r=a[e].trim().split(t.getSeparator());if(!r)continue;if(1===r.length){let e=parseFloat(r[0]);Number.isNumber(e)&&n<w.length&&w[n]&&Fl(f,Co(w[n],l.dateFormat),t,e)}else if(r.length>t.getAccessor(2)&&t.getAccessor(2)>=0){let e=null,a=r[t.getAccessor(2)].trim();e=parseFloat(a),Number.isNumber(e)&&n<w.length&&w[n]&&Fl(f,Co(w[n],l.dateFormat),t,e)}}n++}}}if(0===c){return il(a,"No notes found under the given search condition"),void n.appendChild(a)}if(!u.isValid()||!s.isValid()){return il(a,"Invalid date range"),void n.appendChild(a)}if(null===l.startDate&&null===l.endDate)l.startDate=u.clone(),l.endDate=s.clone();else if(null!==l.startDate&&null===l.endDate){if(!(l.startDate<s)){return il(a,"Invalid date range"),void n.appendChild(a)}l.endDate=s.clone()}else if(null!==l.endDate&&null===l.startDate){if(!(l.endDate>u)){return il(a,"Invalid date range"),void n.appendChild(a)}l.startDate=u.clone()}else if(l.startDate<u&&l.endDate<u||l.startDate>s&&l.endDate>s){return il(a,"Invalid date range"),void n.appendChild(a)}let p=new io(l.startDate,l.endDate);for(let t of l.queries){let e=p.createDataset(t,l);e.addNumTargets(t.getNumTargets());for(let n=l.startDate.clone();n<=l.endDate;n.add(1,"days"))if(f.has(Co(n,l.dateFormat))){let r=f.get(Co(n,l.dateFormat)).filter((function(e){return e.query.equalTo(t)}));if(r.length>0){let t=null;for(let e=0;e<r.length;e++){let n=r[e].value;Number.isNumber(n)&&!Number.isNaN(n)&&(null===t?t=n:t+=n)}null!==t&&e.setValue(n,t)}}}l.datasets=p;let m=function(t,e){for(let t of e.datasets)t.getQuery().usedAsXDataset||(null!==e.valueShift[t.getId()]&&t.shift(e.valueShift[t.getId()]),null!==e.penalty[t.getId()]&&t.setPenalty(e.penalty[t.getId()]),e.accum[t.getId()]&&t.accumulateValues());for(let n of e.line){let r=rl(t,e,n);if("string"==typeof r)return r}for(let n of e.bar){let r=al(t,e,n);if("string"==typeof r)return r}for(let t of e.pie){let n=Po(0,e,t);if("string"==typeof n)return n}for(let n of e.summary){let r=Yo(t,e,n);if("string"==typeof r)return r}for(let n of e.bullet){let r=Xo(t,e,n);if("string"==typeof r)return r}for(let n of e.month){let r=Wo(t,e,n);if("string"==typeof r)return r}for(let t of e.heatmap){let t=qo(0,e);if("string"==typeof t)return t}}(a,l);if("string"==typeof m){return il(a,m),void n.appendChild(a)}n.appendChild(a)}))}getEditor(){return this.app.workspace.getActiveViewOfType(t.MarkdownView).editor}addCodeBlock(e){if(!(this.app.workspace.activeLeaf.view instanceof t.MarkdownView))return;let n="";switch(e){case Ta.Line:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nline:\n    title: "Line Chart"\n    xAxisLabel: Date\n    yAxisLabel: Value\n```';break;case Ta.Bar:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nbar:\n    title: "Bar Chart"\n    xAxisLabel: Date\n    yAxisLabel: Value\n```';break;case Ta.Summary:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nsummary:\n    template: "Average value of tagName is {{average}}"\n    style: "color:white;"\n```'}""!==n&&this.insertToNextLine(n)}insertToNextLine(t){let e=this.getEditor();if(e){let n=e.getCursor(),r=n.line,a=e.getLine(r);return n.ch=a.length,e.setSelection(n),e.replaceSelection("\n"+t),!0}return!1}}module.exports=_l;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIm5vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYXNjZW5kaW5nLmpzIiwibm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0LmpzIiwibm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9udW1iZXIuanMiLCJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RpY2tzLmpzIiwibm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tYXguanMiLCJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21pbi5qcyIsIm5vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvcXVpY2tzZWxlY3QuanMiLCJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3F1YW50aWxlLmpzIiwibm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9yYW5nZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvc3VtLmpzIiwibm9kZV9tb2R1bGVzL2QzLWF4aXMvc3JjL2FycmF5LmpzIiwibm9kZV9tb2R1bGVzL2QzLWF4aXMvc3JjL2lkZW50aXR5LmpzIiwibm9kZV9tb2R1bGVzL2QzLWF4aXMvc3JjL2F4aXMuanMiLCJub2RlX21vZHVsZXMvZDMtZGlzcGF0Y2gvc3JjL2Rpc3BhdGNoLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlcy5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NyZWF0b3IuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2FycmF5LmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3JBbGwuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9tYXRjaGVyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdENoaWxkLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdENoaWxkcmVuLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NwYXJzZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbnRlci5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NvbnN0YW50LmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdGEuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc29ydC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hdHRyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvd2luZG93LmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3N0eWxlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3Byb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NsYXNzZWQuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vdGV4dC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9odG1sLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JhaXNlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2xvd2VyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2luc2VydC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yZW1vdmUuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xvbmUuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb24uanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGlzcGF0Y2guanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3QuanMiLCJub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2RlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY29sb3IuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0LmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdEFsbC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9maWx0ZXIuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZXhpdC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9qb2luLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL21lcmdlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL29yZGVyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NhbGwuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZXMuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zaXplLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VtcHR5LmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VhY2guanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vYXBwZW5kLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdHVtLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2l0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9tYXRoLmpzIiwibm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9sYWIuanMiLCJub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL3RpbWVyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lb3V0LmpzIiwibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2NoZWR1bGUuanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbnN0YW50LmpzIiwibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb2xvci5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcmdiLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9udW1iZXIuanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3N0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2RlY29tcG9zZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL3BhcnNlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vaW5kZXguanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90d2Vlbi5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ludGVycG9sYXRlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0ci5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHJUd2Vlbi5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2RlbGF5LmpzIiwibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZHVyYXRpb24uanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lYXNlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vb24uanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3Rpb24uanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zdHlsZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlVHdlZW4uanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0VHdlZW4uanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdEFsbC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ZpbHRlci5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL21lcmdlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHJhbnNpdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RleHQuanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9yZW1vdmUuanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lYXNlVmFyeWluZy5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2VuZC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vdHJhbnNpdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9jdWJpYy5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2ludGVycnVwdC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9pbnRlcnJ1cHQuanMiLCJub2RlX21vZHVsZXMvZDMtcGF0aC9zcmMvcGF0aC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdERlY2ltYWwuanMiLCJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9leHBvbmVudC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFNwZWNpZmllci5qcyIsIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFByZWZpeEF1dG8uanMiLCJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRSb3VuZGVkLmpzIiwibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHlwZXMuanMiLCJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9pZGVudGl0eS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdE51bWVyYWxzLmpzIiwibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHJpbS5qcyIsIm5vZGVfbW9kdWxlcy9kMy9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbG9yLmpzIiwibm9kZV9tb2R1bGVzL2QzL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29uc3RhbnQuanMiLCJub2RlX21vZHVsZXMvZDMvbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9sYWIuanMiLCJub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2luaXQuanMiLCJub2RlX21vZHVsZXMvZDMtc2NhbGUvbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb25zdGFudC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zY2FsZS9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbG9yLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNjYWxlL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcmdiLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNjYWxlL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbnVtYmVyQXJyYXkuanMiLCJub2RlX21vZHVsZXMvZDMtc2NhbGUvbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zY2FsZS9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2RhdGUuanMiLCJub2RlX21vZHVsZXMvZDMtc2NhbGUvbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9udW1iZXIuanMiLCJub2RlX21vZHVsZXMvZDMtc2NhbGUvbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9vYmplY3QuanMiLCJub2RlX21vZHVsZXMvZDMtc2NhbGUvbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvZDMtc2NhbGUvbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy92YWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zY2FsZS9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JvdW5kLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9udW1iZXIuanMiLCJub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2NvbnRpbnVvdXMuanMiLCJub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2NvbnN0YW50LmpzIiwibm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy90aWNrRm9ybWF0LmpzIiwibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uUHJlZml4LmpzIiwibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uUm91bmQuanMiLCJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25GaXhlZC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbGluZWFyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2ludGVydmFsLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21pbGxpc2Vjb25kLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3NlY29uZC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9kdXJhdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9taW51dGUuanMiLCJub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvaG91ci5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9kYXkuanMiLCJub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvd2Vlay5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9tb250aC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy95ZWFyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y01pbnV0ZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNIb3VyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y0RheS5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNXZWVrLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y01vbnRoLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y1llYXIuanMiLCJub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdGlja3MuanMiLCJub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvZGVmYXVsdExvY2FsZS5qcyIsInNyYy9kYXRhLnRzIiwibm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy90aW1lLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9uaWNlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jb25zdGFudC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbGluZWFyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9wb2ludC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvbGluZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvYXJyYXkuanMiLCJzcmMvaGVscGVyLnRzIiwibm9kZV9tb2R1bGVzL2pzZXAvYnVpbGQvanNlcC5qcyIsInNyYy9leHByLnRzIiwibm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tZWRpYW4uanMiLCJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3ZhcmlhbmNlLmpzIiwic3JjL3BpZS50cyIsInNyYy9zdW1tYXJ5LnRzIiwic3JjL21vbnRoLnRzIiwic3JjL2hlYXRtYXAudHMiLCJzcmMvYnVsbGV0LnRzIiwic3JjL3JlbmRlcmluZy50cyIsIm5vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvZXh0ZW50LmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvcG9pbnRlci5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NvdXJjZUV2ZW50LmpzIiwibm9kZV9tb2R1bGVzL29ic2lkaWFuLWRhaWx5LW5vdGVzLWludGVyZmFjZS9kaXN0L21haW4uanMiLCJzcmMvcGFyc2luZy50cyIsInNyYy9jb2xsZWN0aW5nLnRzIiwic3JjL3NldHRpbmdzLnRzIiwic3JjL21haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20pIHtcclxuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxyXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcclxuICAgIHJldHVybiB0bztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xyXG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmcuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZikge1xuICBsZXQgZGVsdGEgPSBmO1xuICBsZXQgY29tcGFyZSA9IGY7XG5cbiAgaWYgKGYubGVuZ3RoID09PSAxKSB7XG4gICAgZGVsdGEgPSAoZCwgeCkgPT4gZihkKSAtIHg7XG4gICAgY29tcGFyZSA9IGFzY2VuZGluZ0NvbXBhcmF0b3IoZik7XG4gIH1cblxuICBmdW5jdGlvbiBsZWZ0KGEsIHgsIGxvLCBoaSkge1xuICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgIGNvbnN0IG1pZCA9IChsbyArIGhpKSA+Pj4gMTtcbiAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPCAwKSBsbyA9IG1pZCArIDE7XG4gICAgICBlbHNlIGhpID0gbWlkO1xuICAgIH1cbiAgICByZXR1cm4gbG87XG4gIH1cblxuICBmdW5jdGlvbiByaWdodChhLCB4LCBsbywgaGkpIHtcbiAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICBjb25zdCBtaWQgPSAobG8gKyBoaSkgPj4+IDE7XG4gICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpID4gMCkgaGkgPSBtaWQ7XG4gICAgICBlbHNlIGxvID0gbWlkICsgMTtcbiAgICB9XG4gICAgcmV0dXJuIGxvO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudGVyKGEsIHgsIGxvLCBoaSkge1xuICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgY29uc3QgaSA9IGxlZnQoYSwgeCwgbG8sIGhpIC0gMSk7XG4gICAgcmV0dXJuIGkgPiBsbyAmJiBkZWx0YShhW2kgLSAxXSwgeCkgPiAtZGVsdGEoYVtpXSwgeCkgPyBpIC0gMSA6IGk7XG4gIH1cblxuICByZXR1cm4ge2xlZnQsIGNlbnRlciwgcmlnaHR9O1xufVxuXG5mdW5jdGlvbiBhc2NlbmRpbmdDb21wYXJhdG9yKGYpIHtcbiAgcmV0dXJuIChkLCB4KSA9PiBhc2NlbmRpbmcoZihkKSwgeCk7XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZy5qc1wiO1xuaW1wb3J0IGJpc2VjdG9yIGZyb20gXCIuL2Jpc2VjdG9yLmpzXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuXG5jb25zdCBhc2NlbmRpbmdCaXNlY3QgPSBiaXNlY3Rvcihhc2NlbmRpbmcpO1xuZXhwb3J0IGNvbnN0IGJpc2VjdFJpZ2h0ID0gYXNjZW5kaW5nQmlzZWN0LnJpZ2h0O1xuZXhwb3J0IGNvbnN0IGJpc2VjdExlZnQgPSBhc2NlbmRpbmdCaXNlY3QubGVmdDtcbmV4cG9ydCBjb25zdCBiaXNlY3RDZW50ZXIgPSBiaXNlY3RvcihudW1iZXIpLmNlbnRlcjtcbmV4cG9ydCBkZWZhdWx0IGJpc2VjdFJpZ2h0O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geCA9PT0gbnVsbCA/IE5hTiA6ICt4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24qIG51bWJlcnModmFsdWVzLCB2YWx1ZW9mKSB7XG4gIGlmICh2YWx1ZW9mID09PSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmICh2YWx1ZSA9ICt2YWx1ZSkgPj0gdmFsdWUpIHtcbiAgICAgICAgeWllbGQgdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCBpbmRleCA9IC0xO1xuICAgIGZvciAobGV0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWUsICsraW5kZXgsIHZhbHVlcykpICE9IG51bGwgJiYgKHZhbHVlID0gK3ZhbHVlKSA+PSB2YWx1ZSkge1xuICAgICAgICB5aWVsZCB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsInZhciBlMTAgPSBNYXRoLnNxcnQoNTApLFxuICAgIGU1ID0gTWF0aC5zcXJ0KDEwKSxcbiAgICBlMiA9IE1hdGguc3FydCgyKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciByZXZlcnNlLFxuICAgICAgaSA9IC0xLFxuICAgICAgbixcbiAgICAgIHRpY2tzLFxuICAgICAgc3RlcDtcblxuICBzdG9wID0gK3N0b3AsIHN0YXJ0ID0gK3N0YXJ0LCBjb3VudCA9ICtjb3VudDtcbiAgaWYgKHN0YXJ0ID09PSBzdG9wICYmIGNvdW50ID4gMCkgcmV0dXJuIFtzdGFydF07XG4gIGlmIChyZXZlcnNlID0gc3RvcCA8IHN0YXJ0KSBuID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IG47XG4gIGlmICgoc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSkgPT09IDAgfHwgIWlzRmluaXRlKHN0ZXApKSByZXR1cm4gW107XG5cbiAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgbGV0IHIwID0gTWF0aC5yb3VuZChzdGFydCAvIHN0ZXApLCByMSA9IE1hdGgucm91bmQoc3RvcCAvIHN0ZXApO1xuICAgIGlmIChyMCAqIHN0ZXAgPCBzdGFydCkgKytyMDtcbiAgICBpZiAocjEgKiBzdGVwID4gc3RvcCkgLS1yMTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gcjEgLSByMCArIDEpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChyMCArIGkpICogc3RlcDtcbiAgfSBlbHNlIHtcbiAgICBzdGVwID0gLXN0ZXA7XG4gICAgbGV0IHIwID0gTWF0aC5yb3VuZChzdGFydCAqIHN0ZXApLCByMSA9IE1hdGgucm91bmQoc3RvcCAqIHN0ZXApO1xuICAgIGlmIChyMCAvIHN0ZXAgPCBzdGFydCkgKytyMDtcbiAgICBpZiAocjEgLyBzdGVwID4gc3RvcCkgLS1yMTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gcjEgLSByMCArIDEpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChyMCArIGkpIC8gc3RlcDtcbiAgfVxuXG4gIGlmIChyZXZlcnNlKSB0aWNrcy5yZXZlcnNlKCk7XG5cbiAgcmV0dXJuIHRpY2tzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHBvd2VyID0gTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwKSAvIE1hdGguTE4xMCksXG4gICAgICBlcnJvciA9IHN0ZXAgLyBNYXRoLnBvdygxMCwgcG93ZXIpO1xuICByZXR1cm4gcG93ZXIgPj0gMFxuICAgICAgPyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKSAqIE1hdGgucG93KDEwLCBwb3dlcilcbiAgICAgIDogLU1hdGgucG93KDEwLCAtcG93ZXIpIC8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAwID0gTWF0aC5hYnMoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHN0ZXAxID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcDApIC8gTWF0aC5MTjEwKSksXG4gICAgICBlcnJvciA9IHN0ZXAwIC8gc3RlcDE7XG4gIGlmIChlcnJvciA+PSBlMTApIHN0ZXAxICo9IDEwO1xuICBlbHNlIGlmIChlcnJvciA+PSBlNSkgc3RlcDEgKj0gNTtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTIpIHN0ZXAxICo9IDI7XG4gIHJldHVybiBzdG9wIDwgc3RhcnQgPyAtc3RlcDEgOiBzdGVwMTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1heCh2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgbGV0IG1heDtcbiAgaWYgKHZhbHVlb2YgPT09IHVuZGVmaW5lZCkge1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbFxuICAgICAgICAgICYmIChtYXggPCB2YWx1ZSB8fCAobWF4ID09PSB1bmRlZmluZWQgJiYgdmFsdWUgPj0gdmFsdWUpKSkge1xuICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZSwgKytpbmRleCwgdmFsdWVzKSkgIT0gbnVsbFxuICAgICAgICAgICYmIChtYXggPCB2YWx1ZSB8fCAobWF4ID09PSB1bmRlZmluZWQgJiYgdmFsdWUgPj0gdmFsdWUpKSkge1xuICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1heDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgbGV0IG1pbjtcbiAgaWYgKHZhbHVlb2YgPT09IHVuZGVmaW5lZCkge1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbFxuICAgICAgICAgICYmIChtaW4gPiB2YWx1ZSB8fCAobWluID09PSB1bmRlZmluZWQgJiYgdmFsdWUgPj0gdmFsdWUpKSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZSwgKytpbmRleCwgdmFsdWVzKSkgIT0gbnVsbFxuICAgICAgICAgICYmIChtaW4gPiB2YWx1ZSB8fCAobWluID09PSB1bmRlZmluZWQgJiYgdmFsdWUgPj0gdmFsdWUpKSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1pbjtcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nLmpzXCI7XG5cbi8vIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3VybmVyL3F1aWNrc2VsZWN0XG4vLyBJU0MgbGljZW5zZSwgQ29weXJpZ2h0IDIwMTggVmxhZGltaXIgQWdhZm9ua2luLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcXVpY2tzZWxlY3QoYXJyYXksIGssIGxlZnQgPSAwLCByaWdodCA9IGFycmF5Lmxlbmd0aCAtIDEsIGNvbXBhcmUgPSBhc2NlbmRpbmcpIHtcbiAgd2hpbGUgKHJpZ2h0ID4gbGVmdCkge1xuICAgIGlmIChyaWdodCAtIGxlZnQgPiA2MDApIHtcbiAgICAgIGNvbnN0IG4gPSByaWdodCAtIGxlZnQgKyAxO1xuICAgICAgY29uc3QgbSA9IGsgLSBsZWZ0ICsgMTtcbiAgICAgIGNvbnN0IHogPSBNYXRoLmxvZyhuKTtcbiAgICAgIGNvbnN0IHMgPSAwLjUgKiBNYXRoLmV4cCgyICogeiAvIDMpO1xuICAgICAgY29uc3Qgc2QgPSAwLjUgKiBNYXRoLnNxcnQoeiAqIHMgKiAobiAtIHMpIC8gbikgKiAobSAtIG4gLyAyIDwgMCA/IC0xIDogMSk7XG4gICAgICBjb25zdCBuZXdMZWZ0ID0gTWF0aC5tYXgobGVmdCwgTWF0aC5mbG9vcihrIC0gbSAqIHMgLyBuICsgc2QpKTtcbiAgICAgIGNvbnN0IG5ld1JpZ2h0ID0gTWF0aC5taW4ocmlnaHQsIE1hdGguZmxvb3IoayArIChuIC0gbSkgKiBzIC8gbiArIHNkKSk7XG4gICAgICBxdWlja3NlbGVjdChhcnJheSwgaywgbmV3TGVmdCwgbmV3UmlnaHQsIGNvbXBhcmUpO1xuICAgIH1cblxuICAgIGNvbnN0IHQgPSBhcnJheVtrXTtcbiAgICBsZXQgaSA9IGxlZnQ7XG4gICAgbGV0IGogPSByaWdodDtcblxuICAgIHN3YXAoYXJyYXksIGxlZnQsIGspO1xuICAgIGlmIChjb21wYXJlKGFycmF5W3JpZ2h0XSwgdCkgPiAwKSBzd2FwKGFycmF5LCBsZWZ0LCByaWdodCk7XG5cbiAgICB3aGlsZSAoaSA8IGopIHtcbiAgICAgIHN3YXAoYXJyYXksIGksIGopLCArK2ksIC0tajtcbiAgICAgIHdoaWxlIChjb21wYXJlKGFycmF5W2ldLCB0KSA8IDApICsraTtcbiAgICAgIHdoaWxlIChjb21wYXJlKGFycmF5W2pdLCB0KSA+IDApIC0tajtcbiAgICB9XG5cbiAgICBpZiAoY29tcGFyZShhcnJheVtsZWZ0XSwgdCkgPT09IDApIHN3YXAoYXJyYXksIGxlZnQsIGopO1xuICAgIGVsc2UgKytqLCBzd2FwKGFycmF5LCBqLCByaWdodCk7XG5cbiAgICBpZiAoaiA8PSBrKSBsZWZ0ID0gaiArIDE7XG4gICAgaWYgKGsgPD0gaikgcmlnaHQgPSBqIC0gMTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbmZ1bmN0aW9uIHN3YXAoYXJyYXksIGksIGopIHtcbiAgY29uc3QgdCA9IGFycmF5W2ldO1xuICBhcnJheVtpXSA9IGFycmF5W2pdO1xuICBhcnJheVtqXSA9IHQ7XG59XG4iLCJpbXBvcnQgbWF4IGZyb20gXCIuL21heC5qc1wiO1xuaW1wb3J0IG1pbiBmcm9tIFwiLi9taW4uanNcIjtcbmltcG9ydCBxdWlja3NlbGVjdCBmcm9tIFwiLi9xdWlja3NlbGVjdC5qc1wiO1xuaW1wb3J0IG51bWJlciwge251bWJlcnN9IGZyb20gXCIuL251bWJlci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBxdWFudGlsZSh2YWx1ZXMsIHAsIHZhbHVlb2YpIHtcbiAgdmFsdWVzID0gRmxvYXQ2NEFycmF5LmZyb20obnVtYmVycyh2YWx1ZXMsIHZhbHVlb2YpKTtcbiAgaWYgKCEobiA9IHZhbHVlcy5sZW5ndGgpKSByZXR1cm47XG4gIGlmICgocCA9ICtwKSA8PSAwIHx8IG4gPCAyKSByZXR1cm4gbWluKHZhbHVlcyk7XG4gIGlmIChwID49IDEpIHJldHVybiBtYXgodmFsdWVzKTtcbiAgdmFyIG4sXG4gICAgICBpID0gKG4gLSAxKSAqIHAsXG4gICAgICBpMCA9IE1hdGguZmxvb3IoaSksXG4gICAgICB2YWx1ZTAgPSBtYXgocXVpY2tzZWxlY3QodmFsdWVzLCBpMCkuc3ViYXJyYXkoMCwgaTAgKyAxKSksXG4gICAgICB2YWx1ZTEgPSBtaW4odmFsdWVzLnN1YmFycmF5KGkwICsgMSkpO1xuICByZXR1cm4gdmFsdWUwICsgKHZhbHVlMSAtIHZhbHVlMCkgKiAoaSAtIGkwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHF1YW50aWxlU29ydGVkKHZhbHVlcywgcCwgdmFsdWVvZiA9IG51bWJlcikge1xuICBpZiAoIShuID0gdmFsdWVzLmxlbmd0aCkpIHJldHVybjtcbiAgaWYgKChwID0gK3ApIDw9IDAgfHwgbiA8IDIpIHJldHVybiArdmFsdWVvZih2YWx1ZXNbMF0sIDAsIHZhbHVlcyk7XG4gIGlmIChwID49IDEpIHJldHVybiArdmFsdWVvZih2YWx1ZXNbbiAtIDFdLCBuIC0gMSwgdmFsdWVzKTtcbiAgdmFyIG4sXG4gICAgICBpID0gKG4gLSAxKSAqIHAsXG4gICAgICBpMCA9IE1hdGguZmxvb3IoaSksXG4gICAgICB2YWx1ZTAgPSArdmFsdWVvZih2YWx1ZXNbaTBdLCBpMCwgdmFsdWVzKSxcbiAgICAgIHZhbHVlMSA9ICt2YWx1ZW9mKHZhbHVlc1tpMCArIDFdLCBpMCArIDEsIHZhbHVlcyk7XG4gIHJldHVybiB2YWx1ZTAgKyAodmFsdWUxIC0gdmFsdWUwKSAqIChpIC0gaTApO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgc3RhcnQgPSArc3RhcnQsIHN0b3AgPSArc3RvcCwgc3RlcCA9IChuID0gYXJndW1lbnRzLmxlbmd0aCkgPCAyID8gKHN0b3AgPSBzdGFydCwgc3RhcnQgPSAwLCAxKSA6IG4gPCAzID8gMSA6ICtzdGVwO1xuXG4gIHZhciBpID0gLTEsXG4gICAgICBuID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKChzdG9wIC0gc3RhcnQpIC8gc3RlcCkpIHwgMCxcbiAgICAgIHJhbmdlID0gbmV3IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgcmFuZ2VbaV0gPSBzdGFydCArIGkgKiBzdGVwO1xuICB9XG5cbiAgcmV0dXJuIHJhbmdlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3VtKHZhbHVlcywgdmFsdWVvZikge1xuICBsZXQgc3VtID0gMDtcbiAgaWYgKHZhbHVlb2YgPT09IHVuZGVmaW5lZCkge1xuICAgIGZvciAobGV0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKHZhbHVlID0gK3ZhbHVlKSB7XG4gICAgICAgIHN1bSArPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAodmFsdWUgPSArdmFsdWVvZih2YWx1ZSwgKytpbmRleCwgdmFsdWVzKSkge1xuICAgICAgICBzdW0gKz0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBzdW07XG59XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5LmpzXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHkuanNcIjtcblxudmFyIHRvcCA9IDEsXG4gICAgcmlnaHQgPSAyLFxuICAgIGJvdHRvbSA9IDMsXG4gICAgbGVmdCA9IDQsXG4gICAgZXBzaWxvbiA9IDFlLTY7XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVgoeCkge1xuICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB4ICsgXCIsMClcIjtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlWSh5KSB7XG4gIHJldHVybiBcInRyYW5zbGF0ZSgwLFwiICsgeSArIFwiKVwiO1xufVxuXG5mdW5jdGlvbiBudW1iZXIoc2NhbGUpIHtcbiAgcmV0dXJuIGQgPT4gK3NjYWxlKGQpO1xufVxuXG5mdW5jdGlvbiBjZW50ZXIoc2NhbGUsIG9mZnNldCkge1xuICBvZmZzZXQgPSBNYXRoLm1heCgwLCBzY2FsZS5iYW5kd2lkdGgoKSAtIG9mZnNldCAqIDIpIC8gMjtcbiAgaWYgKHNjYWxlLnJvdW5kKCkpIG9mZnNldCA9IE1hdGgucm91bmQob2Zmc2V0KTtcbiAgcmV0dXJuIGQgPT4gK3NjYWxlKGQpICsgb2Zmc2V0O1xufVxuXG5mdW5jdGlvbiBlbnRlcmluZygpIHtcbiAgcmV0dXJuICF0aGlzLl9fYXhpcztcbn1cblxuZnVuY3Rpb24gYXhpcyhvcmllbnQsIHNjYWxlKSB7XG4gIHZhciB0aWNrQXJndW1lbnRzID0gW10sXG4gICAgICB0aWNrVmFsdWVzID0gbnVsbCxcbiAgICAgIHRpY2tGb3JtYXQgPSBudWxsLFxuICAgICAgdGlja1NpemVJbm5lciA9IDYsXG4gICAgICB0aWNrU2l6ZU91dGVyID0gNixcbiAgICAgIHRpY2tQYWRkaW5nID0gMyxcbiAgICAgIG9mZnNldCA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmRldmljZVBpeGVsUmF0aW8gPiAxID8gMCA6IDAuNSxcbiAgICAgIGsgPSBvcmllbnQgPT09IHRvcCB8fCBvcmllbnQgPT09IGxlZnQgPyAtMSA6IDEsXG4gICAgICB4ID0gb3JpZW50ID09PSBsZWZ0IHx8IG9yaWVudCA9PT0gcmlnaHQgPyBcInhcIiA6IFwieVwiLFxuICAgICAgdHJhbnNmb3JtID0gb3JpZW50ID09PSB0b3AgfHwgb3JpZW50ID09PSBib3R0b20gPyB0cmFuc2xhdGVYIDogdHJhbnNsYXRlWTtcblxuICBmdW5jdGlvbiBheGlzKGNvbnRleHQpIHtcbiAgICB2YXIgdmFsdWVzID0gdGlja1ZhbHVlcyA9PSBudWxsID8gKHNjYWxlLnRpY2tzID8gc2NhbGUudGlja3MuYXBwbHkoc2NhbGUsIHRpY2tBcmd1bWVudHMpIDogc2NhbGUuZG9tYWluKCkpIDogdGlja1ZhbHVlcyxcbiAgICAgICAgZm9ybWF0ID0gdGlja0Zvcm1hdCA9PSBudWxsID8gKHNjYWxlLnRpY2tGb3JtYXQgPyBzY2FsZS50aWNrRm9ybWF0LmFwcGx5KHNjYWxlLCB0aWNrQXJndW1lbnRzKSA6IGlkZW50aXR5KSA6IHRpY2tGb3JtYXQsXG4gICAgICAgIHNwYWNpbmcgPSBNYXRoLm1heCh0aWNrU2l6ZUlubmVyLCAwKSArIHRpY2tQYWRkaW5nLFxuICAgICAgICByYW5nZSA9IHNjYWxlLnJhbmdlKCksXG4gICAgICAgIHJhbmdlMCA9ICtyYW5nZVswXSArIG9mZnNldCxcbiAgICAgICAgcmFuZ2UxID0gK3JhbmdlW3JhbmdlLmxlbmd0aCAtIDFdICsgb2Zmc2V0LFxuICAgICAgICBwb3NpdGlvbiA9IChzY2FsZS5iYW5kd2lkdGggPyBjZW50ZXIgOiBudW1iZXIpKHNjYWxlLmNvcHkoKSwgb2Zmc2V0KSxcbiAgICAgICAgc2VsZWN0aW9uID0gY29udGV4dC5zZWxlY3Rpb24gPyBjb250ZXh0LnNlbGVjdGlvbigpIDogY29udGV4dCxcbiAgICAgICAgcGF0aCA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoXCIuZG9tYWluXCIpLmRhdGEoW251bGxdKSxcbiAgICAgICAgdGljayA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoXCIudGlja1wiKS5kYXRhKHZhbHVlcywgc2NhbGUpLm9yZGVyKCksXG4gICAgICAgIHRpY2tFeGl0ID0gdGljay5leGl0KCksXG4gICAgICAgIHRpY2tFbnRlciA9IHRpY2suZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcInRpY2tcIiksXG4gICAgICAgIGxpbmUgPSB0aWNrLnNlbGVjdChcImxpbmVcIiksXG4gICAgICAgIHRleHQgPSB0aWNrLnNlbGVjdChcInRleHRcIik7XG5cbiAgICBwYXRoID0gcGF0aC5tZXJnZShwYXRoLmVudGVyKCkuaW5zZXJ0KFwicGF0aFwiLCBcIi50aWNrXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkb21haW5cIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJjdXJyZW50Q29sb3JcIikpO1xuXG4gICAgdGljayA9IHRpY2subWVyZ2UodGlja0VudGVyKTtcblxuICAgIGxpbmUgPSBsaW5lLm1lcmdlKHRpY2tFbnRlci5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiY3VycmVudENvbG9yXCIpXG4gICAgICAgIC5hdHRyKHggKyBcIjJcIiwgayAqIHRpY2tTaXplSW5uZXIpKTtcblxuICAgIHRleHQgPSB0ZXh0Lm1lcmdlKHRpY2tFbnRlci5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKVxuICAgICAgICAuYXR0cih4LCBrICogc3BhY2luZylcbiAgICAgICAgLmF0dHIoXCJkeVwiLCBvcmllbnQgPT09IHRvcCA/IFwiMGVtXCIgOiBvcmllbnQgPT09IGJvdHRvbSA/IFwiMC43MWVtXCIgOiBcIjAuMzJlbVwiKSk7XG5cbiAgICBpZiAoY29udGV4dCAhPT0gc2VsZWN0aW9uKSB7XG4gICAgICBwYXRoID0gcGF0aC50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgdGljayA9IHRpY2sudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIGxpbmUgPSBsaW5lLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICB0ZXh0ID0gdGV4dC50cmFuc2l0aW9uKGNvbnRleHQpO1xuXG4gICAgICB0aWNrRXhpdCA9IHRpY2tFeGl0LnRyYW5zaXRpb24oY29udGV4dClcbiAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgZXBzaWxvbilcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBpc0Zpbml0ZShkID0gcG9zaXRpb24oZCkpID8gdHJhbnNmb3JtKGQgKyBvZmZzZXQpIDogdGhpcy5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7IH0pO1xuXG4gICAgICB0aWNrRW50ZXJcbiAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgZXBzaWxvbilcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHZhciBwID0gdGhpcy5wYXJlbnROb2RlLl9fYXhpczsgcmV0dXJuIHRyYW5zZm9ybSgocCAmJiBpc0Zpbml0ZShwID0gcChkKSkgPyBwIDogcG9zaXRpb24oZCkpICsgb2Zmc2V0KTsgfSk7XG4gICAgfVxuXG4gICAgdGlja0V4aXQucmVtb3ZlKCk7XG5cbiAgICBwYXRoXG4gICAgICAgIC5hdHRyKFwiZFwiLCBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09PSByaWdodFxuICAgICAgICAgICAgPyAodGlja1NpemVPdXRlciA/IFwiTVwiICsgayAqIHRpY2tTaXplT3V0ZXIgKyBcIixcIiArIHJhbmdlMCArIFwiSFwiICsgb2Zmc2V0ICsgXCJWXCIgKyByYW5nZTEgKyBcIkhcIiArIGsgKiB0aWNrU2l6ZU91dGVyIDogXCJNXCIgKyBvZmZzZXQgKyBcIixcIiArIHJhbmdlMCArIFwiVlwiICsgcmFuZ2UxKVxuICAgICAgICAgICAgOiAodGlja1NpemVPdXRlciA/IFwiTVwiICsgcmFuZ2UwICsgXCIsXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiVlwiICsgb2Zmc2V0ICsgXCJIXCIgKyByYW5nZTEgKyBcIlZcIiArIGsgKiB0aWNrU2l6ZU91dGVyIDogXCJNXCIgKyByYW5nZTAgKyBcIixcIiArIG9mZnNldCArIFwiSFwiICsgcmFuZ2UxKSk7XG5cbiAgICB0aWNrXG4gICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCAxKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB0cmFuc2Zvcm0ocG9zaXRpb24oZCkgKyBvZmZzZXQpOyB9KTtcblxuICAgIGxpbmVcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcik7XG5cbiAgICB0ZXh0XG4gICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAudGV4dChmb3JtYXQpO1xuXG4gICAgc2VsZWN0aW9uLmZpbHRlcihlbnRlcmluZylcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAuYXR0cihcImZvbnQtc2l6ZVwiLCAxMClcbiAgICAgICAgLmF0dHIoXCJmb250LWZhbWlseVwiLCBcInNhbnMtc2VyaWZcIilcbiAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBvcmllbnQgPT09IHJpZ2h0ID8gXCJzdGFydFwiIDogb3JpZW50ID09PSBsZWZ0ID8gXCJlbmRcIiA6IFwibWlkZGxlXCIpO1xuXG4gICAgc2VsZWN0aW9uXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkgeyB0aGlzLl9fYXhpcyA9IHBvc2l0aW9uOyB9KTtcbiAgfVxuXG4gIGF4aXMuc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2NhbGUgPSBfLCBheGlzKSA6IHNjYWxlO1xuICB9O1xuXG4gIGF4aXMudGlja3MgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGlja0FyZ3VtZW50cyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKSwgYXhpcztcbiAgfTtcblxuICBheGlzLnRpY2tBcmd1bWVudHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0FyZ3VtZW50cyA9IF8gPT0gbnVsbCA/IFtdIDogc2xpY2UuY2FsbChfKSwgYXhpcykgOiB0aWNrQXJndW1lbnRzLnNsaWNlKCk7XG4gIH07XG5cbiAgYXhpcy50aWNrVmFsdWVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tWYWx1ZXMgPSBfID09IG51bGwgPyBudWxsIDogc2xpY2UuY2FsbChfKSwgYXhpcykgOiB0aWNrVmFsdWVzICYmIHRpY2tWYWx1ZXMuc2xpY2UoKTtcbiAgfTtcblxuICBheGlzLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0Zvcm1hdCA9IF8sIGF4aXMpIDogdGlja0Zvcm1hdDtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSB0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVJbm5lcjtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplSW5uZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVJbm5lciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZU91dGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplT3V0ZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZU91dGVyO1xuICB9O1xuXG4gIGF4aXMudGlja1BhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1BhZGRpbmcgPSArXywgYXhpcykgOiB0aWNrUGFkZGluZztcbiAgfTtcblxuICBheGlzLm9mZnNldCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChvZmZzZXQgPSArXywgYXhpcykgOiBvZmZzZXQ7XG4gIH07XG5cbiAgcmV0dXJuIGF4aXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzVG9wKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHRvcCwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc1JpZ2h0KHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHJpZ2h0LCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzQm90dG9tKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKGJvdHRvbSwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc0xlZnQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMobGVmdCwgc2NhbGUpO1xufVxuIiwidmFyIG5vb3AgPSB7dmFsdWU6ICgpID0+IHt9fTtcblxuZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aCwgXyA9IHt9LCB0OyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKCEodCA9IGFyZ3VtZW50c1tpXSArIFwiXCIpIHx8ICh0IGluIF8pIHx8IC9bXFxzLl0vLnRlc3QodCkpIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgdHlwZTogXCIgKyB0KTtcbiAgICBfW3RdID0gW107XG4gIH1cbiAgcmV0dXJuIG5ldyBEaXNwYXRjaChfKTtcbn1cblxuZnVuY3Rpb24gRGlzcGF0Y2goXykge1xuICB0aGlzLl8gPSBfO1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMsIHR5cGVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICBpZiAodCAmJiAhdHlwZXMuaGFzT3duUHJvcGVydHkodCkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0KTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuRGlzcGF0Y2gucHJvdG90eXBlID0gZGlzcGF0Y2gucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGlzcGF0Y2gsXG4gIG9uOiBmdW5jdGlvbih0eXBlbmFtZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgXyA9IHRoaXMuXyxcbiAgICAgICAgVCA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiwgXyksXG4gICAgICAgIHQsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IFQubGVuZ3RoO1xuXG4gICAgLy8gSWYgbm8gY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmV0dXJuIHRoZSBjYWxsYmFjayBvZiB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSAmJiAodCA9IGdldChfW3RdLCB0eXBlbmFtZS5uYW1lKSkpIHJldHVybiB0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIGEgdHlwZSB3YXMgc3BlY2lmaWVkLCBzZXQgdGhlIGNhbGxiYWNrIGZvciB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICAvLyBPdGhlcndpc2UsIGlmIGEgbnVsbCBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZW1vdmUgY2FsbGJhY2tzIG9mIHRoZSBnaXZlbiBuYW1lLlxuICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrOiBcIiArIGNhbGxiYWNrKTtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIGNhbGxiYWNrKTtcbiAgICAgIGVsc2UgaWYgKGNhbGxiYWNrID09IG51bGwpIGZvciAodCBpbiBfKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIG51bGwpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBjb3B5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29weSA9IHt9LCBfID0gdGhpcy5fO1xuICAgIGZvciAodmFyIHQgaW4gXykgY29weVt0XSA9IF9bdF0uc2xpY2UoKTtcbiAgICByZXR1cm4gbmV3IERpc3BhdGNoKGNvcHkpO1xuICB9LFxuICBjYWxsOiBmdW5jdGlvbih0eXBlLCB0aGF0KSB7XG4gICAgaWYgKChuID0gYXJndW1lbnRzLmxlbmd0aCAtIDIpID4gMCkgZm9yICh2YXIgYXJncyA9IG5ldyBBcnJheShuKSwgaSA9IDAsIG4sIHQ7IGkgPCBuOyArK2kpIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9LFxuICBhcHBseTogZnVuY3Rpb24odHlwZSwgdGhhdCwgYXJncykge1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh2YXIgdCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0KHR5cGUsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aCwgYzsgaSA8IG47ICsraSkge1xuICAgIGlmICgoYyA9IHR5cGVbaV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHJldHVybiBjLnZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXQodHlwZSwgbmFtZSwgY2FsbGJhY2spIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGlmICh0eXBlW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHR5cGVbaV0gPSBub29wLCB0eXBlID0gdHlwZS5zbGljZSgwLCBpKS5jb25jYXQodHlwZS5zbGljZShpICsgMSkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChjYWxsYmFjayAhPSBudWxsKSB0eXBlLnB1c2goe25hbWU6IG5hbWUsIHZhbHVlOiBjYWxsYmFja30pO1xuICByZXR1cm4gdHlwZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGlzcGF0Y2g7XG4iLCJleHBvcnQgdmFyIHhodG1sID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gIHhodG1sOiB4aHRtbCxcbiAgeGxpbms6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICB4bWw6IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCJcbn07XG4iLCJpbXBvcnQgbmFtZXNwYWNlcyBmcm9tIFwiLi9uYW1lc3BhY2VzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIHByZWZpeCA9IG5hbWUgKz0gXCJcIiwgaSA9IHByZWZpeC5pbmRleE9mKFwiOlwiKTtcbiAgaWYgKGkgPj0gMCAmJiAocHJlZml4ID0gbmFtZS5zbGljZSgwLCBpKSkgIT09IFwieG1sbnNcIikgbmFtZSA9IG5hbWUuc2xpY2UoaSArIDEpO1xuICByZXR1cm4gbmFtZXNwYWNlcy5oYXNPd25Qcm9wZXJ0eShwcmVmaXgpID8ge3NwYWNlOiBuYW1lc3BhY2VzW3ByZWZpeF0sIGxvY2FsOiBuYW1lfSA6IG5hbWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuL25hbWVzcGFjZS5qc1wiO1xuaW1wb3J0IHt4aHRtbH0gZnJvbSBcIi4vbmFtZXNwYWNlcy5qc1wiO1xuXG5mdW5jdGlvbiBjcmVhdG9ySW5oZXJpdChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsXG4gICAgICAgIHVyaSA9IHRoaXMubmFtZXNwYWNlVVJJO1xuICAgIHJldHVybiB1cmkgPT09IHhodG1sICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkkgPT09IHhodG1sXG4gICAgICAgID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKVxuICAgICAgICA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh1cmksIG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdG9yRml4ZWQoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gKGZ1bGxuYW1lLmxvY2FsXG4gICAgICA/IGNyZWF0b3JGaXhlZFxuICAgICAgOiBjcmVhdG9ySW5oZXJpdCkoZnVsbG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gbm9uZSgpIHt9XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gbm9uZSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09IFwib2JqZWN0XCIgJiYgXCJsZW5ndGhcIiBpbiB4XG4gICAgPyB4IC8vIEFycmF5LCBUeXBlZEFycmF5LCBOb2RlTGlzdCwgYXJyYXktbGlrZVxuICAgIDogQXJyYXkuZnJvbSh4KTsgLy8gTWFwLCBTZXQsIGl0ZXJhYmxlLCBzdHJpbmcsIG9yIGFueXRoaW5nIGVsc2Vcbn1cbiIsImZ1bmN0aW9uIGVtcHR5KCkge1xuICByZXR1cm4gW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gZW1wdHkgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoaWxkTWF0Y2hlcihzZWxlY3Rvcikge1xuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiBub2RlLm1hdGNoZXMoc2VsZWN0b3IpO1xuICB9O1xufVxuXG4iLCJpbXBvcnQge2NoaWxkTWF0Y2hlcn0gZnJvbSBcIi4uL21hdGNoZXIuanNcIjtcblxudmFyIGZpbmQgPSBBcnJheS5wcm90b3R5cGUuZmluZDtcblxuZnVuY3Rpb24gY2hpbGRGaW5kKG1hdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZmluZC5jYWxsKHRoaXMuY2hpbGRyZW4sIG1hdGNoKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2hpbGRGaXJzdCgpIHtcbiAgcmV0dXJuIHRoaXMuZmlyc3RFbGVtZW50Q2hpbGQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdChtYXRjaCA9PSBudWxsID8gY2hpbGRGaXJzdFxuICAgICAgOiBjaGlsZEZpbmQodHlwZW9mIG1hdGNoID09PSBcImZ1bmN0aW9uXCIgPyBtYXRjaCA6IGNoaWxkTWF0Y2hlcihtYXRjaCkpKTtcbn1cbiIsImltcG9ydCB7Y2hpbGRNYXRjaGVyfSBmcm9tIFwiLi4vbWF0Y2hlci5qc1wiO1xuXG52YXIgZmlsdGVyID0gQXJyYXkucHJvdG90eXBlLmZpbHRlcjtcblxuZnVuY3Rpb24gY2hpbGRyZW4oKSB7XG4gIHJldHVybiB0aGlzLmNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjaGlsZHJlbkZpbHRlcihtYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZpbHRlci5jYWxsKHRoaXMuY2hpbGRyZW4sIG1hdGNoKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0QWxsKG1hdGNoID09IG51bGwgPyBjaGlsZHJlblxuICAgICAgOiBjaGlsZHJlbkZpbHRlcih0eXBlb2YgbWF0Y2ggPT09IFwiZnVuY3Rpb25cIiA/IG1hdGNoIDogY2hpbGRNYXRjaGVyKG1hdGNoKSkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odXBkYXRlKSB7XG4gIHJldHVybiBuZXcgQXJyYXkodXBkYXRlLmxlbmd0aCk7XG59XG4iLCJpbXBvcnQgc3BhcnNlIGZyb20gXCIuL3NwYXJzZS5qc1wiO1xuaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9lbnRlciB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRW50ZXJOb2RlKHBhcmVudCwgZGF0dW0pIHtcbiAgdGhpcy5vd25lckRvY3VtZW50ID0gcGFyZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHRoaXMubmFtZXNwYWNlVVJJID0gcGFyZW50Lm5hbWVzcGFjZVVSSTtcbiAgdGhpcy5fbmV4dCA9IG51bGw7XG4gIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5fX2RhdGFfXyA9IGRhdHVtO1xufVxuXG5FbnRlck5vZGUucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRW50ZXJOb2RlLFxuICBhcHBlbmRDaGlsZDogZnVuY3Rpb24oY2hpbGQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHRoaXMuX25leHQpOyB9LFxuICBpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uKGNoaWxkLCBuZXh0KSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBuZXh0KTsgfSxcbiAgcXVlcnlTZWxlY3RvcjogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsgfSxcbiAgcXVlcnlTZWxlY3RvckFsbDogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTsgfVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQge0VudGVyTm9kZX0gZnJvbSBcIi4vZW50ZXIuanNcIjtcbmltcG9ydCBhcnJheSBmcm9tIFwiLi4vYXJyYXkuanNcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi4vY29uc3RhbnQuanNcIjtcblxuZnVuY3Rpb24gYmluZEluZGV4KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEpIHtcbiAgdmFyIGkgPSAwLFxuICAgICAgbm9kZSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBmaXQgaW50byB1cGRhdGUuXG4gIC8vIFB1dCBhbnkgbnVsbCBub2RlcyBpbnRvIGVudGVyLlxuICAvLyBQdXQgYW55IHJlbWFpbmluZyBkYXRhIGludG8gZW50ZXIuXG4gIGZvciAoOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZG9u4oCZdCBmaXQgaW50byBleGl0LlxuICBmb3IgKDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYmluZEtleShwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhLCBrZXkpIHtcbiAgdmFyIGksXG4gICAgICBub2RlLFxuICAgICAgbm9kZUJ5S2V5VmFsdWUgPSBuZXcgTWFwLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpLFxuICAgICAga2V5VmFsdWU7XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIG5vZGUuXG4gIC8vIElmIG11bHRpcGxlIG5vZGVzIGhhdmUgdGhlIHNhbWUga2V5LCB0aGUgZHVwbGljYXRlcyBhcmUgYWRkZWQgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBrZXlWYWx1ZXNbaV0gPSBrZXlWYWx1ZSA9IGtleS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSArIFwiXCI7XG4gICAgICBpZiAobm9kZUJ5S2V5VmFsdWUuaGFzKGtleVZhbHVlKSkge1xuICAgICAgICBleGl0W2ldID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVCeUtleVZhbHVlLnNldChrZXlWYWx1ZSwgbm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIGRhdHVtLlxuICAvLyBJZiB0aGVyZSBhIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LCBqb2luIGFuZCBhZGQgaXQgdG8gdXBkYXRlLlxuICAvLyBJZiB0aGVyZSBpcyBub3QgKG9yIHRoZSBrZXkgaXMgYSBkdXBsaWNhdGUpLCBhZGQgaXQgdG8gZW50ZXIuXG4gIGZvciAoaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBrZXlWYWx1ZSA9IGtleS5jYWxsKHBhcmVudCwgZGF0YVtpXSwgaSwgZGF0YSkgKyBcIlwiO1xuICAgIGlmIChub2RlID0gbm9kZUJ5S2V5VmFsdWUuZ2V0KGtleVZhbHVlKSkge1xuICAgICAgdXBkYXRlW2ldID0gbm9kZTtcbiAgICAgIG5vZGUuX19kYXRhX18gPSBkYXRhW2ldO1xuICAgICAgbm9kZUJ5S2V5VmFsdWUuZGVsZXRlKGtleVZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW50ZXJbaV0gPSBuZXcgRW50ZXJOb2RlKHBhcmVudCwgZGF0YVtpXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIGFueSByZW1haW5pbmcgbm9kZXMgdGhhdCB3ZXJlIG5vdCBib3VuZCB0byBkYXRhIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChub2RlQnlLZXlWYWx1ZS5nZXQoa2V5VmFsdWVzW2ldKSA9PT0gbm9kZSkpIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkYXR1bShub2RlKSB7XG4gIHJldHVybiBub2RlLl9fZGF0YV9fO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIEFycmF5LmZyb20odGhpcywgZGF0dW0pO1xuXG4gIHZhciBiaW5kID0ga2V5ID8gYmluZEtleSA6IGJpbmRJbmRleCxcbiAgICAgIHBhcmVudHMgPSB0aGlzLl9wYXJlbnRzLFxuICAgICAgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdmFsdWUgPSBjb25zdGFudCh2YWx1ZSk7XG5cbiAgZm9yICh2YXIgbSA9IGdyb3Vwcy5sZW5ndGgsIHVwZGF0ZSA9IG5ldyBBcnJheShtKSwgZW50ZXIgPSBuZXcgQXJyYXkobSksIGV4aXQgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgdmFyIHBhcmVudCA9IHBhcmVudHNbal0sXG4gICAgICAgIGdyb3VwID0gZ3JvdXBzW2pdLFxuICAgICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgZGF0YSA9IGFycmF5KHZhbHVlLmNhbGwocGFyZW50LCBwYXJlbnQgJiYgcGFyZW50Ll9fZGF0YV9fLCBqLCBwYXJlbnRzKSksXG4gICAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZW50ZXJHcm91cCA9IGVudGVyW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICB1cGRhdGVHcm91cCA9IHVwZGF0ZVtqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgZXhpdEdyb3VwID0gZXhpdFtqXSA9IG5ldyBBcnJheShncm91cExlbmd0aCk7XG5cbiAgICBiaW5kKHBhcmVudCwgZ3JvdXAsIGVudGVyR3JvdXAsIHVwZGF0ZUdyb3VwLCBleGl0R3JvdXAsIGRhdGEsIGtleSk7XG5cbiAgICAvLyBOb3cgY29ubmVjdCB0aGUgZW50ZXIgbm9kZXMgdG8gdGhlaXIgZm9sbG93aW5nIHVwZGF0ZSBub2RlLCBzdWNoIHRoYXRcbiAgICAvLyBhcHBlbmRDaGlsZCBjYW4gaW5zZXJ0IHRoZSBtYXRlcmlhbGl6ZWQgZW50ZXIgbm9kZSBiZWZvcmUgdGhpcyBub2RlLFxuICAgIC8vIHJhdGhlciB0aGFuIGF0IHRoZSBlbmQgb2YgdGhlIHBhcmVudCBub2RlLlxuICAgIGZvciAodmFyIGkwID0gMCwgaTEgPSAwLCBwcmV2aW91cywgbmV4dDsgaTAgPCBkYXRhTGVuZ3RoOyArK2kwKSB7XG4gICAgICBpZiAocHJldmlvdXMgPSBlbnRlckdyb3VwW2kwXSkge1xuICAgICAgICBpZiAoaTAgPj0gaTEpIGkxID0gaTAgKyAxO1xuICAgICAgICB3aGlsZSAoIShuZXh0ID0gdXBkYXRlR3JvdXBbaTFdKSAmJiArK2kxIDwgZGF0YUxlbmd0aCk7XG4gICAgICAgIHByZXZpb3VzLl9uZXh0ID0gbmV4dCB8fCBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZSA9IG5ldyBTZWxlY3Rpb24odXBkYXRlLCBwYXJlbnRzKTtcbiAgdXBkYXRlLl9lbnRlciA9IGVudGVyO1xuICB1cGRhdGUuX2V4aXQgPSBleGl0O1xuICByZXR1cm4gdXBkYXRlO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgaWYgKCFjb21wYXJlKSBjb21wYXJlID0gYXNjZW5kaW5nO1xuXG4gIGZ1bmN0aW9uIGNvbXBhcmVOb2RlKGEsIGIpIHtcbiAgICByZXR1cm4gYSAmJiBiID8gY29tcGFyZShhLl9fZGF0YV9fLCBiLl9fZGF0YV9fKSA6ICFhIC0gIWI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzb3J0Z3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzb3J0Z3JvdXAgPSBzb3J0Z3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzb3J0Z3JvdXBbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3J0Z3JvdXAuc29ydChjb21wYXJlTm9kZSk7XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzb3J0Z3JvdXBzLCB0aGlzLl9wYXJlbnRzKS5vcmRlcigpO1xufVxuXG5mdW5jdGlvbiBhc2NlbmRpbmcoYSwgYikge1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuLi9uYW1lc3BhY2UuanNcIjtcblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBub2RlID0gdGhpcy5ub2RlKCk7XG4gICAgcmV0dXJuIGZ1bGxuYW1lLmxvY2FsXG4gICAgICAgID8gbm9kZS5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpXG4gICAgICAgIDogbm9kZS5nZXRBdHRyaWJ1dGUoZnVsbG5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyRnVuY3Rpb25OUyA6IGF0dHJGdW5jdGlvbilcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKSkoZnVsbG5hbWUsIHZhbHVlKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlKSB7XG4gIHJldHVybiAobm9kZS5vd25lckRvY3VtZW50ICYmIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldykgLy8gbm9kZSBpcyBhIE5vZGVcbiAgICAgIHx8IChub2RlLmRvY3VtZW50ICYmIG5vZGUpIC8vIG5vZGUgaXMgYSBXaW5kb3dcbiAgICAgIHx8IG5vZGUuZGVmYXVsdFZpZXc7IC8vIG5vZGUgaXMgYSBEb2N1bWVudFxufVxuIiwiaW1wb3J0IGRlZmF1bHRWaWV3IGZyb20gXCIuLi93aW5kb3cuanNcIjtcblxuZnVuY3Rpb24gc3R5bGVSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVDb25zdGFudChuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsdWUsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVGdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICAgIGVsc2UgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2LCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgICA/IHN0eWxlUmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgID8gc3R5bGVGdW5jdGlvblxuICAgICAgICAgICAgOiBzdHlsZUNvbnN0YW50KShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkgPT0gbnVsbCA/IFwiXCIgOiBwcmlvcml0eSkpXG4gICAgICA6IHN0eWxlVmFsdWUodGhpcy5ub2RlKCksIG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3R5bGVWYWx1ZShub2RlLCBuYW1lKSB7XG4gIHJldHVybiBub2RlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSlcbiAgICAgIHx8IGRlZmF1bHRWaWV3KG5vZGUpLmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKTtcbn1cbiIsImZ1bmN0aW9uIHByb3BlcnR5UmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzW25hbWVdID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5RnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSBkZWxldGUgdGhpc1tuYW1lXTtcbiAgICBlbHNlIHRoaXNbbmFtZV0gPSB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBwcm9wZXJ0eVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBwcm9wZXJ0eUZ1bmN0aW9uXG4gICAgICAgICAgOiBwcm9wZXJ0eUNvbnN0YW50KShuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpW25hbWVdO1xufVxuIiwiZnVuY3Rpb24gY2xhc3NBcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50cmltKCkuc3BsaXQoL158XFxzKy8pO1xufVxuXG5mdW5jdGlvbiBjbGFzc0xpc3Qobm9kZSkge1xuICByZXR1cm4gbm9kZS5jbGFzc0xpc3QgfHwgbmV3IENsYXNzTGlzdChub2RlKTtcbn1cblxuZnVuY3Rpb24gQ2xhc3NMaXN0KG5vZGUpIHtcbiAgdGhpcy5fbm9kZSA9IG5vZGU7XG4gIHRoaXMuX25hbWVzID0gY2xhc3NBcnJheShub2RlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIpO1xufVxuXG5DbGFzc0xpc3QucHJvdG90eXBlID0ge1xuICBhZGQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgdGhpcy5fbmFtZXMuc3BsaWNlKGksIDEpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICBjb250YWluczogZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpID49IDA7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNsYXNzZWRBZGQobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QuYWRkKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFJlbW92ZShub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5yZW1vdmUobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkVHJ1ZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZEFkZCh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGYWxzZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZFJlbW92ZSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGdW5jdGlvbihuYW1lcywgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICh2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpID8gY2xhc3NlZEFkZCA6IGNsYXNzZWRSZW1vdmUpKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIG5hbWVzID0gY2xhc3NBcnJheShuYW1lICsgXCJcIik7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIGxpc3QgPSBjbGFzc0xpc3QodGhpcy5ub2RlKCkpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghbGlzdC5jb250YWlucyhuYW1lc1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGNsYXNzZWRGdW5jdGlvbiA6IHZhbHVlXG4gICAgICA/IGNsYXNzZWRUcnVlXG4gICAgICA6IGNsYXNzZWRGYWxzZSkobmFtZXMsIHZhbHVlKSk7XG59XG4iLCJmdW5jdGlvbiB0ZXh0UmVtb3ZlKCkge1xuICB0aGlzLnRleHRDb250ZW50ID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHRleHRSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHRleHRGdW5jdGlvblxuICAgICAgICAgIDogdGV4dENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLnRleHRDb250ZW50O1xufVxuIiwiZnVuY3Rpb24gaHRtbFJlbW92ZSgpIHtcbiAgdGhpcy5pbm5lckhUTUwgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBodG1sQ29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGh0bWxGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBodG1sUmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBodG1sRnVuY3Rpb25cbiAgICAgICAgICA6IGh0bWxDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS5pbm5lckhUTUw7XG59XG4iLCJmdW5jdGlvbiByYWlzZSgpIHtcbiAgaWYgKHRoaXMubmV4dFNpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmFpc2UpO1xufVxuIiwiZnVuY3Rpb24gbG93ZXIoKSB7XG4gIGlmICh0aGlzLnByZXZpb3VzU2libGluZykgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLCB0aGlzLnBhcmVudE5vZGUuZmlyc3RDaGlsZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKGxvd2VyKTtcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yLmpzXCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yLmpzXCI7XG5cbmZ1bmN0aW9uIGNvbnN0YW50TnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGJlZm9yZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpLFxuICAgICAgc2VsZWN0ID0gYmVmb3JlID09IG51bGwgPyBjb25zdGFudE51bGwgOiB0eXBlb2YgYmVmb3JlID09PSBcImZ1bmN0aW9uXCIgPyBiZWZvcmUgOiBzZWxlY3RvcihiZWZvcmUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0QmVmb3JlKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBzZWxlY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCBudWxsKTtcbiAgfSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmUoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmVtb3ZlKTtcbn1cbiIsImZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZVNoYWxsb3coKSB7XG4gIHZhciBjbG9uZSA9IHRoaXMuY2xvbmVOb2RlKGZhbHNlKSwgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICByZXR1cm4gcGFyZW50ID8gcGFyZW50Lmluc2VydEJlZm9yZShjbG9uZSwgdGhpcy5uZXh0U2libGluZykgOiBjbG9uZTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lRGVlcCgpIHtcbiAgdmFyIGNsb25lID0gdGhpcy5jbG9uZU5vZGUodHJ1ZSksIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgcmV0dXJuIHBhcmVudCA/IHBhcmVudC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRoaXMubmV4dFNpYmxpbmcpIDogY2xvbmU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRlZXApIHtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGRlZXAgPyBzZWxlY3Rpb25fY2xvbmVEZWVwIDogc2VsZWN0aW9uX2Nsb25lU2hhbGxvdyk7XG59XG4iLCJmdW5jdGlvbiBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudCwgdGhpcy5fX2RhdGFfXyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uUmVtb3ZlKHR5cGVuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb247XG4gICAgaWYgKCFvbikgcmV0dXJuO1xuICAgIGZvciAodmFyIGogPSAwLCBpID0gLTEsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGlmIChvID0gb25bal0sICghdHlwZW5hbWUudHlwZSB8fCBvLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUpICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLm9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25bKytpXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgrK2kpIG9uLmxlbmd0aCA9IGk7XG4gICAgZWxzZSBkZWxldGUgdGhpcy5fX29uO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbkFkZCh0eXBlbmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbiwgbywgbGlzdGVuZXIgPSBjb250ZXh0TGlzdGVuZXIodmFsdWUpO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICAgIGlmICgobyA9IG9uW2pdKS50eXBlID09PSB0eXBlbmFtZS50eXBlICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLm9wdGlvbnMpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyID0gbGlzdGVuZXIsIG8ub3B0aW9ucyA9IG9wdGlvbnMpO1xuICAgICAgICBvLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKHR5cGVuYW1lLnR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgICBvID0ge3R5cGU6IHR5cGVuYW1lLnR5cGUsIG5hbWU6IHR5cGVuYW1lLm5hbWUsIHZhbHVlOiB2YWx1ZSwgbGlzdGVuZXI6IGxpc3RlbmVyLCBvcHRpb25zOiBvcHRpb25zfTtcbiAgICBpZiAoIW9uKSB0aGlzLl9fb24gPSBbb107XG4gICAgZWxzZSBvbi5wdXNoKG8pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlbmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHR5cGVuYW1lcyA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiksIGksIG4gPSB0eXBlbmFtZXMubGVuZ3RoLCB0O1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBvbiA9IHRoaXMubm9kZSgpLl9fb247XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgZm9yIChpID0gMCwgbyA9IG9uW2pdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgodCA9IHR5cGVuYW1lc1tpXSkudHlwZSA9PT0gby50eXBlICYmIHQubmFtZSA9PT0gby5uYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIG8udmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb24gPSB2YWx1ZSA/IG9uQWRkIDogb25SZW1vdmU7XG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHRoaXMuZWFjaChvbih0eXBlbmFtZXNbaV0sIHZhbHVlLCBvcHRpb25zKSk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IGRlZmF1bHRWaWV3IGZyb20gXCIuLi93aW5kb3cuanNcIjtcblxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChub2RlLCB0eXBlLCBwYXJhbXMpIHtcbiAgdmFyIHdpbmRvdyA9IGRlZmF1bHRWaWV3KG5vZGUpLFxuICAgICAgZXZlbnQgPSB3aW5kb3cuQ3VzdG9tRXZlbnQ7XG5cbiAgaWYgKHR5cGVvZiBldmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZXZlbnQgPSBuZXcgZXZlbnQodHlwZSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBldmVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuICAgIGlmIChwYXJhbXMpIGV2ZW50LmluaXRFdmVudCh0eXBlLCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUpLCBldmVudC5kZXRhaWwgPSBwYXJhbXMuZGV0YWlsO1xuICAgIGVsc2UgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIGZhbHNlLCBmYWxzZSk7XG4gIH1cblxuICBub2RlLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaENvbnN0YW50KHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hGdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBkaXNwYXRjaEZ1bmN0aW9uXG4gICAgICA6IGRpc3BhdGNoQ29uc3RhbnQpKHR5cGUsIHBhcmFtcykpO1xufVxuIiwiaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NlbGVjdEFsbCBmcm9tIFwiLi9zZWxlY3RBbGwuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2VsZWN0Q2hpbGQgZnJvbSBcIi4vc2VsZWN0Q2hpbGQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2VsZWN0Q2hpbGRyZW4gZnJvbSBcIi4vc2VsZWN0Q2hpbGRyZW4uanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlci5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXRhIGZyb20gXCIuL2RhdGEuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW50ZXIgZnJvbSBcIi4vZW50ZXIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZXhpdCBmcm9tIFwiLi9leGl0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2pvaW4gZnJvbSBcIi4vam9pbi5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9tZXJnZSBmcm9tIFwiLi9tZXJnZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9vcmRlciBmcm9tIFwiLi9vcmRlci5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zb3J0IGZyb20gXCIuL3NvcnQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2FsbCBmcm9tIFwiLi9jYWxsLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGVzIGZyb20gXCIuL25vZGVzLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGUgZnJvbSBcIi4vbm9kZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zaXplIGZyb20gXCIuL3NpemUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW1wdHkgZnJvbSBcIi4vZW1wdHkuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZWFjaCBmcm9tIFwiLi9lYWNoLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2F0dHIgZnJvbSBcIi4vYXR0ci5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9wcm9wZXJ0eSBmcm9tIFwiLi9wcm9wZXJ0eS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbGFzc2VkIGZyb20gXCIuL2NsYXNzZWQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fdGV4dCBmcm9tIFwiLi90ZXh0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2h0bWwgZnJvbSBcIi4vaHRtbC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9yYWlzZSBmcm9tIFwiLi9yYWlzZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9sb3dlciBmcm9tIFwiLi9sb3dlci5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9hcHBlbmQgZnJvbSBcIi4vYXBwZW5kLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2luc2VydCBmcm9tIFwiLi9pbnNlcnQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbG9uZSBmcm9tIFwiLi9jbG9uZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXR1bSBmcm9tIFwiLi9kYXR1bS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9vbiBmcm9tIFwiLi9vbi5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9kaXNwYXRjaCBmcm9tIFwiLi9kaXNwYXRjaC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9pdGVyYXRvciBmcm9tIFwiLi9pdGVyYXRvci5qc1wiO1xuXG5leHBvcnQgdmFyIHJvb3QgPSBbbnVsbF07XG5cbmV4cG9ydCBmdW5jdGlvbiBTZWxlY3Rpb24oZ3JvdXBzLCBwYXJlbnRzKSB7XG4gIHRoaXMuX2dyb3VwcyA9IGdyb3VwcztcbiAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdXSwgcm9vdCk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9zZWxlY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzO1xufVxuXG5TZWxlY3Rpb24ucHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNlbGVjdGlvbixcbiAgc2VsZWN0OiBzZWxlY3Rpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHNlbGVjdGlvbl9zZWxlY3RBbGwsXG4gIHNlbGVjdENoaWxkOiBzZWxlY3Rpb25fc2VsZWN0Q2hpbGQsXG4gIHNlbGVjdENoaWxkcmVuOiBzZWxlY3Rpb25fc2VsZWN0Q2hpbGRyZW4sXG4gIGZpbHRlcjogc2VsZWN0aW9uX2ZpbHRlcixcbiAgZGF0YTogc2VsZWN0aW9uX2RhdGEsXG4gIGVudGVyOiBzZWxlY3Rpb25fZW50ZXIsXG4gIGV4aXQ6IHNlbGVjdGlvbl9leGl0LFxuICBqb2luOiBzZWxlY3Rpb25fam9pbixcbiAgbWVyZ2U6IHNlbGVjdGlvbl9tZXJnZSxcbiAgc2VsZWN0aW9uOiBzZWxlY3Rpb25fc2VsZWN0aW9uLFxuICBvcmRlcjogc2VsZWN0aW9uX29yZGVyLFxuICBzb3J0OiBzZWxlY3Rpb25fc29ydCxcbiAgY2FsbDogc2VsZWN0aW9uX2NhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fbm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX2VhY2gsXG4gIGF0dHI6IHNlbGVjdGlvbl9hdHRyLFxuICBzdHlsZTogc2VsZWN0aW9uX3N0eWxlLFxuICBwcm9wZXJ0eTogc2VsZWN0aW9uX3Byb3BlcnR5LFxuICBjbGFzc2VkOiBzZWxlY3Rpb25fY2xhc3NlZCxcbiAgdGV4dDogc2VsZWN0aW9uX3RleHQsXG4gIGh0bWw6IHNlbGVjdGlvbl9odG1sLFxuICByYWlzZTogc2VsZWN0aW9uX3JhaXNlLFxuICBsb3dlcjogc2VsZWN0aW9uX2xvd2VyLFxuICBhcHBlbmQ6IHNlbGVjdGlvbl9hcHBlbmQsXG4gIGluc2VydDogc2VsZWN0aW9uX2luc2VydCxcbiAgcmVtb3ZlOiBzZWxlY3Rpb25fcmVtb3ZlLFxuICBjbG9uZTogc2VsZWN0aW9uX2Nsb25lLFxuICBkYXR1bTogc2VsZWN0aW9uX2RhdHVtLFxuICBvbjogc2VsZWN0aW9uX29uLFxuICBkaXNwYXRjaDogc2VsZWN0aW9uX2Rpc3BhdGNoLFxuICBbU3ltYm9sLml0ZXJhdG9yXTogc2VsZWN0aW9uX2l0ZXJhdG9yXG59O1xuXG5leHBvcnQgZGVmYXVsdCBzZWxlY3Rpb247XG4iLCJpbXBvcnQge1NlbGVjdGlvbiwgcm9vdH0gZnJvbSBcIi4vc2VsZWN0aW9uL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCJcbiAgICAgID8gbmV3IFNlbGVjdGlvbihbW2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXV0sIFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdKVxuICAgICAgOiBuZXcgU2VsZWN0aW9uKFtbc2VsZWN0b3JdXSwgcm9vdCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb25zdHJ1Y3RvciwgZmFjdG9yeSwgcHJvdG90eXBlKSB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGZhY3RvcnkucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICBwcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3Rvcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChwYXJlbnQsIGRlZmluaXRpb24pIHtcbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocGFyZW50LnByb3RvdHlwZSk7XG4gIGZvciAodmFyIGtleSBpbiBkZWZpbml0aW9uKSBwcm90b3R5cGVba2V5XSA9IGRlZmluaXRpb25ba2V5XTtcbiAgcmV0dXJuIHByb3RvdHlwZTtcbn1cbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZS5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ29sb3IoKSB7fVxuXG5leHBvcnQgdmFyIGRhcmtlciA9IDAuNztcbmV4cG9ydCB2YXIgYnJpZ2h0ZXIgPSAxIC8gZGFya2VyO1xuXG52YXIgcmVJID0gXCJcXFxccyooWystXT9cXFxcZCspXFxcXHMqXCIsXG4gICAgcmVOID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPylcXFxccypcIixcbiAgICByZVAgPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KSVcXFxccypcIixcbiAgICByZUhleCA9IC9eIyhbMC05YS1mXXszLDh9KSQvLFxuICAgIHJlUmdiSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZUksIHJlSSwgcmVJXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYUludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlSSwgcmVJLCByZUksIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xcXFxcKFwiICsgW3JlTiwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsYVxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpO1xuXG52YXIgbmFtZWQgPSB7XG4gIGFsaWNlYmx1ZTogMHhmMGY4ZmYsXG4gIGFudGlxdWV3aGl0ZTogMHhmYWViZDcsXG4gIGFxdWE6IDB4MDBmZmZmLFxuICBhcXVhbWFyaW5lOiAweDdmZmZkNCxcbiAgYXp1cmU6IDB4ZjBmZmZmLFxuICBiZWlnZTogMHhmNWY1ZGMsXG4gIGJpc3F1ZTogMHhmZmU0YzQsXG4gIGJsYWNrOiAweDAwMDAwMCxcbiAgYmxhbmNoZWRhbG1vbmQ6IDB4ZmZlYmNkLFxuICBibHVlOiAweDAwMDBmZixcbiAgYmx1ZXZpb2xldDogMHg4YTJiZTIsXG4gIGJyb3duOiAweGE1MmEyYSxcbiAgYnVybHl3b29kOiAweGRlYjg4NyxcbiAgY2FkZXRibHVlOiAweDVmOWVhMCxcbiAgY2hhcnRyZXVzZTogMHg3ZmZmMDAsXG4gIGNob2NvbGF0ZTogMHhkMjY5MWUsXG4gIGNvcmFsOiAweGZmN2Y1MCxcbiAgY29ybmZsb3dlcmJsdWU6IDB4NjQ5NWVkLFxuICBjb3Juc2lsazogMHhmZmY4ZGMsXG4gIGNyaW1zb246IDB4ZGMxNDNjLFxuICBjeWFuOiAweDAwZmZmZixcbiAgZGFya2JsdWU6IDB4MDAwMDhiLFxuICBkYXJrY3lhbjogMHgwMDhiOGIsXG4gIGRhcmtnb2xkZW5yb2Q6IDB4Yjg4NjBiLFxuICBkYXJrZ3JheTogMHhhOWE5YTksXG4gIGRhcmtncmVlbjogMHgwMDY0MDAsXG4gIGRhcmtncmV5OiAweGE5YTlhOSxcbiAgZGFya2toYWtpOiAweGJkYjc2YixcbiAgZGFya21hZ2VudGE6IDB4OGIwMDhiLFxuICBkYXJrb2xpdmVncmVlbjogMHg1NTZiMmYsXG4gIGRhcmtvcmFuZ2U6IDB4ZmY4YzAwLFxuICBkYXJrb3JjaGlkOiAweDk5MzJjYyxcbiAgZGFya3JlZDogMHg4YjAwMDAsXG4gIGRhcmtzYWxtb246IDB4ZTk5NjdhLFxuICBkYXJrc2VhZ3JlZW46IDB4OGZiYzhmLFxuICBkYXJrc2xhdGVibHVlOiAweDQ4M2Q4YixcbiAgZGFya3NsYXRlZ3JheTogMHgyZjRmNGYsXG4gIGRhcmtzbGF0ZWdyZXk6IDB4MmY0ZjRmLFxuICBkYXJrdHVycXVvaXNlOiAweDAwY2VkMSxcbiAgZGFya3Zpb2xldDogMHg5NDAwZDMsXG4gIGRlZXBwaW5rOiAweGZmMTQ5MyxcbiAgZGVlcHNreWJsdWU6IDB4MDBiZmZmLFxuICBkaW1ncmF5OiAweDY5Njk2OSxcbiAgZGltZ3JleTogMHg2OTY5NjksXG4gIGRvZGdlcmJsdWU6IDB4MWU5MGZmLFxuICBmaXJlYnJpY2s6IDB4YjIyMjIyLFxuICBmbG9yYWx3aGl0ZTogMHhmZmZhZjAsXG4gIGZvcmVzdGdyZWVuOiAweDIyOGIyMixcbiAgZnVjaHNpYTogMHhmZjAwZmYsXG4gIGdhaW5zYm9ybzogMHhkY2RjZGMsXG4gIGdob3N0d2hpdGU6IDB4ZjhmOGZmLFxuICBnb2xkOiAweGZmZDcwMCxcbiAgZ29sZGVucm9kOiAweGRhYTUyMCxcbiAgZ3JheTogMHg4MDgwODAsXG4gIGdyZWVuOiAweDAwODAwMCxcbiAgZ3JlZW55ZWxsb3c6IDB4YWRmZjJmLFxuICBncmV5OiAweDgwODA4MCxcbiAgaG9uZXlkZXc6IDB4ZjBmZmYwLFxuICBob3RwaW5rOiAweGZmNjliNCxcbiAgaW5kaWFucmVkOiAweGNkNWM1YyxcbiAgaW5kaWdvOiAweDRiMDA4MixcbiAgaXZvcnk6IDB4ZmZmZmYwLFxuICBraGFraTogMHhmMGU2OGMsXG4gIGxhdmVuZGVyOiAweGU2ZTZmYSxcbiAgbGF2ZW5kZXJibHVzaDogMHhmZmYwZjUsXG4gIGxhd25ncmVlbjogMHg3Y2ZjMDAsXG4gIGxlbW9uY2hpZmZvbjogMHhmZmZhY2QsXG4gIGxpZ2h0Ymx1ZTogMHhhZGQ4ZTYsXG4gIGxpZ2h0Y29yYWw6IDB4ZjA4MDgwLFxuICBsaWdodGN5YW46IDB4ZTBmZmZmLFxuICBsaWdodGdvbGRlbnJvZHllbGxvdzogMHhmYWZhZDIsXG4gIGxpZ2h0Z3JheTogMHhkM2QzZDMsXG4gIGxpZ2h0Z3JlZW46IDB4OTBlZTkwLFxuICBsaWdodGdyZXk6IDB4ZDNkM2QzLFxuICBsaWdodHBpbms6IDB4ZmZiNmMxLFxuICBsaWdodHNhbG1vbjogMHhmZmEwN2EsXG4gIGxpZ2h0c2VhZ3JlZW46IDB4MjBiMmFhLFxuICBsaWdodHNreWJsdWU6IDB4ODdjZWZhLFxuICBsaWdodHNsYXRlZ3JheTogMHg3Nzg4OTksXG4gIGxpZ2h0c2xhdGVncmV5OiAweDc3ODg5OSxcbiAgbGlnaHRzdGVlbGJsdWU6IDB4YjBjNGRlLFxuICBsaWdodHllbGxvdzogMHhmZmZmZTAsXG4gIGxpbWU6IDB4MDBmZjAwLFxuICBsaW1lZ3JlZW46IDB4MzJjZDMyLFxuICBsaW5lbjogMHhmYWYwZTYsXG4gIG1hZ2VudGE6IDB4ZmYwMGZmLFxuICBtYXJvb246IDB4ODAwMDAwLFxuICBtZWRpdW1hcXVhbWFyaW5lOiAweDY2Y2RhYSxcbiAgbWVkaXVtYmx1ZTogMHgwMDAwY2QsXG4gIG1lZGl1bW9yY2hpZDogMHhiYTU1ZDMsXG4gIG1lZGl1bXB1cnBsZTogMHg5MzcwZGIsXG4gIG1lZGl1bXNlYWdyZWVuOiAweDNjYjM3MSxcbiAgbWVkaXVtc2xhdGVibHVlOiAweDdiNjhlZSxcbiAgbWVkaXVtc3ByaW5nZ3JlZW46IDB4MDBmYTlhLFxuICBtZWRpdW10dXJxdW9pc2U6IDB4NDhkMWNjLFxuICBtZWRpdW12aW9sZXRyZWQ6IDB4YzcxNTg1LFxuICBtaWRuaWdodGJsdWU6IDB4MTkxOTcwLFxuICBtaW50Y3JlYW06IDB4ZjVmZmZhLFxuICBtaXN0eXJvc2U6IDB4ZmZlNGUxLFxuICBtb2NjYXNpbjogMHhmZmU0YjUsXG4gIG5hdmFqb3doaXRlOiAweGZmZGVhZCxcbiAgbmF2eTogMHgwMDAwODAsXG4gIG9sZGxhY2U6IDB4ZmRmNWU2LFxuICBvbGl2ZTogMHg4MDgwMDAsXG4gIG9saXZlZHJhYjogMHg2YjhlMjMsXG4gIG9yYW5nZTogMHhmZmE1MDAsXG4gIG9yYW5nZXJlZDogMHhmZjQ1MDAsXG4gIG9yY2hpZDogMHhkYTcwZDYsXG4gIHBhbGVnb2xkZW5yb2Q6IDB4ZWVlOGFhLFxuICBwYWxlZ3JlZW46IDB4OThmYjk4LFxuICBwYWxldHVycXVvaXNlOiAweGFmZWVlZSxcbiAgcGFsZXZpb2xldHJlZDogMHhkYjcwOTMsXG4gIHBhcGF5YXdoaXA6IDB4ZmZlZmQ1LFxuICBwZWFjaHB1ZmY6IDB4ZmZkYWI5LFxuICBwZXJ1OiAweGNkODUzZixcbiAgcGluazogMHhmZmMwY2IsXG4gIHBsdW06IDB4ZGRhMGRkLFxuICBwb3dkZXJibHVlOiAweGIwZTBlNixcbiAgcHVycGxlOiAweDgwMDA4MCxcbiAgcmViZWNjYXB1cnBsZTogMHg2NjMzOTksXG4gIHJlZDogMHhmZjAwMDAsXG4gIHJvc3licm93bjogMHhiYzhmOGYsXG4gIHJveWFsYmx1ZTogMHg0MTY5ZTEsXG4gIHNhZGRsZWJyb3duOiAweDhiNDUxMyxcbiAgc2FsbW9uOiAweGZhODA3MixcbiAgc2FuZHlicm93bjogMHhmNGE0NjAsXG4gIHNlYWdyZWVuOiAweDJlOGI1NyxcbiAgc2Vhc2hlbGw6IDB4ZmZmNWVlLFxuICBzaWVubmE6IDB4YTA1MjJkLFxuICBzaWx2ZXI6IDB4YzBjMGMwLFxuICBza3libHVlOiAweDg3Y2VlYixcbiAgc2xhdGVibHVlOiAweDZhNWFjZCxcbiAgc2xhdGVncmF5OiAweDcwODA5MCxcbiAgc2xhdGVncmV5OiAweDcwODA5MCxcbiAgc25vdzogMHhmZmZhZmEsXG4gIHNwcmluZ2dyZWVuOiAweDAwZmY3ZixcbiAgc3RlZWxibHVlOiAweDQ2ODJiNCxcbiAgdGFuOiAweGQyYjQ4YyxcbiAgdGVhbDogMHgwMDgwODAsXG4gIHRoaXN0bGU6IDB4ZDhiZmQ4LFxuICB0b21hdG86IDB4ZmY2MzQ3LFxuICB0dXJxdW9pc2U6IDB4NDBlMGQwLFxuICB2aW9sZXQ6IDB4ZWU4MmVlLFxuICB3aGVhdDogMHhmNWRlYjMsXG4gIHdoaXRlOiAweGZmZmZmZixcbiAgd2hpdGVzbW9rZTogMHhmNWY1ZjUsXG4gIHllbGxvdzogMHhmZmZmMDAsXG4gIHllbGxvd2dyZWVuOiAweDlhY2QzMlxufTtcblxuZGVmaW5lKENvbG9yLCBjb2xvciwge1xuICBjb3B5OiBmdW5jdGlvbihjaGFubmVscykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyB0aGlzLmNvbnN0cnVjdG9yLCB0aGlzLCBjaGFubmVscyk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5kaXNwbGF5YWJsZSgpO1xuICB9LFxuICBoZXg6IGNvbG9yX2Zvcm1hdEhleCwgLy8gRGVwcmVjYXRlZCEgVXNlIGNvbG9yLmZvcm1hdEhleC5cbiAgZm9ybWF0SGV4OiBjb2xvcl9mb3JtYXRIZXgsXG4gIGZvcm1hdEhzbDogY29sb3JfZm9ybWF0SHNsLFxuICBmb3JtYXRSZ2I6IGNvbG9yX2Zvcm1hdFJnYixcbiAgdG9TdHJpbmc6IGNvbG9yX2Zvcm1hdFJnYlxufSk7XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhleCgpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0SGV4KCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhzbCgpIHtcbiAgcmV0dXJuIGhzbENvbnZlcnQodGhpcykuZm9ybWF0SHNsKCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdFJnYigpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0UmdiKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbG9yKGZvcm1hdCkge1xuICB2YXIgbSwgbDtcbiAgZm9ybWF0ID0gKGZvcm1hdCArIFwiXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKG0gPSByZUhleC5leGVjKGZvcm1hdCkpID8gKGwgPSBtWzFdLmxlbmd0aCwgbSA9IHBhcnNlSW50KG1bMV0sIDE2KSwgbCA9PT0gNiA/IHJnYm4obSkgLy8gI2ZmMDAwMFxuICAgICAgOiBsID09PSAzID8gbmV3IFJnYigobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpLCAxKSAvLyAjZjAwXG4gICAgICA6IGwgPT09IDggPyByZ2JhKG0gPj4gMjQgJiAweGZmLCBtID4+IDE2ICYgMHhmZiwgbSA+PiA4ICYgMHhmZiwgKG0gJiAweGZmKSAvIDB4ZmYpIC8vICNmZjAwMDAwMFxuICAgICAgOiBsID09PSA0ID8gcmdiYSgobSA+PiAxMiAmIDB4ZikgfCAobSA+PiA4ICYgMHhmMCksIChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4ZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpKSAvIDB4ZmYpIC8vICNmMDAwXG4gICAgICA6IG51bGwpIC8vIGludmFsaWQgaGV4XG4gICAgICA6IChtID0gcmVSZ2JJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0sIG1bMl0sIG1bM10sIDEpIC8vIHJnYigyNTUsIDAsIDApXG4gICAgICA6IChtID0gcmVSZ2JQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIDEpIC8vIHJnYigxMDAlLCAwJSwgMCUpXG4gICAgICA6IChtID0gcmVSZ2JhSW50ZWdlci5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdLCBtWzJdLCBtWzNdLCBtWzRdKSAvLyByZ2JhKDI1NSwgMCwgMCwgMSlcbiAgICAgIDogKG0gPSByZVJnYmFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIG1bNF0pIC8vIHJnYigxMDAlLCAwJSwgMCUsIDEpXG4gICAgICA6IChtID0gcmVIc2xQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIDEpIC8vIGhzbCgxMjAsIDUwJSwgNTAlKVxuICAgICAgOiAobSA9IHJlSHNsYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgbVs0XSkgLy8gaHNsYSgxMjAsIDUwJSwgNTAlLCAxKVxuICAgICAgOiBuYW1lZC5oYXNPd25Qcm9wZXJ0eShmb3JtYXQpID8gcmdibihuYW1lZFtmb3JtYXRdKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgOiBmb3JtYXQgPT09IFwidHJhbnNwYXJlbnRcIiA/IG5ldyBSZ2IoTmFOLCBOYU4sIE5hTiwgMClcbiAgICAgIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gcmdibihuKSB7XG4gIHJldHVybiBuZXcgUmdiKG4gPj4gMTYgJiAweGZmLCBuID4+IDggJiAweGZmLCBuICYgMHhmZiwgMSk7XG59XG5cbmZ1bmN0aW9uIHJnYmEociwgZywgYiwgYSkge1xuICBpZiAoYSA8PSAwKSByID0gZyA9IGIgPSBOYU47XG4gIHJldHVybiBuZXcgUmdiKHIsIGcsIGIsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiQ29udmVydChvKSB7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IFJnYjtcbiAgbyA9IG8ucmdiKCk7XG4gIHJldHVybiBuZXcgUmdiKG8uciwgby5nLCBvLmIsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IHJnYkNvbnZlcnQocikgOiBuZXcgUmdiKHIsIGcsIGIsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMuciA9ICtyO1xuICB0aGlzLmcgPSArZztcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoUmdiLCByZ2IsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgtMC41IDw9IHRoaXMuciAmJiB0aGlzLnIgPCAyNTUuNSlcbiAgICAgICAgJiYgKC0wLjUgPD0gdGhpcy5nICYmIHRoaXMuZyA8IDI1NS41KVxuICAgICAgICAmJiAoLTAuNSA8PSB0aGlzLmIgJiYgdGhpcy5iIDwgMjU1LjUpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGhleDogcmdiX2Zvcm1hdEhleCwgLy8gRGVwcmVjYXRlZCEgVXNlIGNvbG9yLmZvcm1hdEhleC5cbiAgZm9ybWF0SGV4OiByZ2JfZm9ybWF0SGV4LFxuICBmb3JtYXRSZ2I6IHJnYl9mb3JtYXRSZ2IsXG4gIHRvU3RyaW5nOiByZ2JfZm9ybWF0UmdiXG59KSk7XG5cbmZ1bmN0aW9uIHJnYl9mb3JtYXRIZXgoKSB7XG4gIHJldHVybiBcIiNcIiArIGhleCh0aGlzLnIpICsgaGV4KHRoaXMuZykgKyBoZXgodGhpcy5iKTtcbn1cblxuZnVuY3Rpb24gcmdiX2Zvcm1hdFJnYigpIHtcbiAgdmFyIGEgPSB0aGlzLm9wYWNpdHk7IGEgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gIHJldHVybiAoYSA9PT0gMSA/IFwicmdiKFwiIDogXCJyZ2JhKFwiKVxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5yKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuZykgfHwgMCkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmIpIHx8IDApKVxuICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbn1cblxuZnVuY3Rpb24gaGV4KHZhbHVlKSB7XG4gIHZhbHVlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHZhbHVlKSB8fCAwKSk7XG4gIHJldHVybiAodmFsdWUgPCAxNiA/IFwiMFwiIDogXCJcIikgKyB2YWx1ZS50b1N0cmluZygxNik7XG59XG5cbmZ1bmN0aW9uIGhzbGEoaCwgcywgbCwgYSkge1xuICBpZiAoYSA8PSAwKSBoID0gcyA9IGwgPSBOYU47XG4gIGVsc2UgaWYgKGwgPD0gMCB8fCBsID49IDEpIGggPSBzID0gTmFOO1xuICBlbHNlIGlmIChzIDw9IDApIGggPSBOYU47XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbmV3IEhzbChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBIc2w7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbztcbiAgbyA9IG8ucmdiKCk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKSxcbiAgICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLFxuICAgICAgaCA9IE5hTixcbiAgICAgIHMgPSBtYXggLSBtaW4sXG4gICAgICBsID0gKG1heCArIG1pbikgLyAyO1xuICBpZiAocykge1xuICAgIGlmIChyID09PSBtYXgpIGggPSAoZyAtIGIpIC8gcyArIChnIDwgYikgKiA2O1xuICAgIGVsc2UgaWYgKGcgPT09IG1heCkgaCA9IChiIC0gcikgLyBzICsgMjtcbiAgICBlbHNlIGggPSAociAtIGcpIC8gcyArIDQ7XG4gICAgcyAvPSBsIDwgMC41ID8gbWF4ICsgbWluIDogMiAtIG1heCAtIG1pbjtcbiAgICBoICo9IDYwO1xuICB9IGVsc2Uge1xuICAgIHMgPSBsID4gMCAmJiBsIDwgMSA/IDAgOiBoO1xuICB9XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhzbENvbnZlcnQoaCkgOiBuZXcgSHNsKGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gSHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShIc2wsIGhzbCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCA9IHRoaXMuaCAlIDM2MCArICh0aGlzLmggPCAwKSAqIDM2MCxcbiAgICAgICAgcyA9IGlzTmFOKGgpIHx8IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zLFxuICAgICAgICBsID0gdGhpcy5sLFxuICAgICAgICBtMiA9IGwgKyAobCA8IDAuNSA/IGwgOiAxIC0gbCkgKiBzLFxuICAgICAgICBtMSA9IDIgKiBsIC0gbTI7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICBoc2wycmdiKGggPj0gMjQwID8gaCAtIDI0MCA6IGggKyAxMjAsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGgsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGggPCAxMjAgPyBoICsgMjQwIDogaCAtIDEyMCwgbTEsIG0yKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKDAgPD0gdGhpcy5zICYmIHRoaXMucyA8PSAxIHx8IGlzTmFOKHRoaXMucykpXG4gICAgICAgICYmICgwIDw9IHRoaXMubCAmJiB0aGlzLmwgPD0gMSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfSxcbiAgZm9ybWF0SHNsOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSA9IHRoaXMub3BhY2l0eTsgYSA9IGlzTmFOKGEpID8gMSA6IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIGEpKTtcbiAgICByZXR1cm4gKGEgPT09IDEgPyBcImhzbChcIiA6IFwiaHNsYShcIilcbiAgICAgICAgKyAodGhpcy5oIHx8IDApICsgXCIsIFwiXG4gICAgICAgICsgKHRoaXMucyB8fCAwKSAqIDEwMCArIFwiJSwgXCJcbiAgICAgICAgKyAodGhpcy5sIHx8IDApICogMTAwICsgXCIlXCJcbiAgICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbiAgfVxufSkpO1xuXG4vKiBGcm9tIEZ2RCAxMy4zNywgQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCAzICovXG5mdW5jdGlvbiBoc2wycmdiKGgsIG0xLCBtMikge1xuICByZXR1cm4gKGggPCA2MCA/IG0xICsgKG0yIC0gbTEpICogaCAvIDYwXG4gICAgICA6IGggPCAxODAgPyBtMlxuICAgICAgOiBoIDwgMjQwID8gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MFxuICAgICAgOiBtMSkgKiAyNTU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBhcnJheSBmcm9tIFwiLi4vYXJyYXkuanNcIjtcbmltcG9ydCBzZWxlY3RvckFsbCBmcm9tIFwiLi4vc2VsZWN0b3JBbGwuanNcIjtcblxuZnVuY3Rpb24gYXJyYXlBbGwoc2VsZWN0KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZ3JvdXAgPSBzZWxlY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gZ3JvdXAgPT0gbnVsbCA/IFtdIDogYXJyYXkoZ3JvdXApO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgPT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gYXJyYXlBbGwoc2VsZWN0KTtcbiAgZWxzZSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSk7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHBhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgbWF0Y2hlciBmcm9tIFwiLi4vbWF0Y2hlci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlLmpzXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2V4aXQgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9uZW50ZXIsIG9udXBkYXRlLCBvbmV4aXQpIHtcbiAgdmFyIGVudGVyID0gdGhpcy5lbnRlcigpLCB1cGRhdGUgPSB0aGlzLCBleGl0ID0gdGhpcy5leGl0KCk7XG4gIGVudGVyID0gdHlwZW9mIG9uZW50ZXIgPT09IFwiZnVuY3Rpb25cIiA/IG9uZW50ZXIoZW50ZXIpIDogZW50ZXIuYXBwZW5kKG9uZW50ZXIgKyBcIlwiKTtcbiAgaWYgKG9udXBkYXRlICE9IG51bGwpIHVwZGF0ZSA9IG9udXBkYXRlKHVwZGF0ZSk7XG4gIGlmIChvbmV4aXQgPT0gbnVsbCkgZXhpdC5yZW1vdmUoKTsgZWxzZSBvbmV4aXQoZXhpdCk7XG4gIHJldHVybiBlbnRlciAmJiB1cGRhdGUgPyBlbnRlci5tZXJnZSh1cGRhdGUpLm9yZGVyKCkgOiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0aW9uKSB7XG4gIGlmICghKHNlbGVjdGlvbiBpbnN0YW5jZW9mIFNlbGVjdGlvbikpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgbWVyZ2VcIik7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHNlbGVjdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gLTEsIG0gPSBncm91cHMubGVuZ3RoOyArK2ogPCBtOykge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gZ3JvdXAubGVuZ3RoIC0gMSwgbmV4dCA9IGdyb3VwW2ldLCBub2RlOyAtLWkgPj0gMDspIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgaWYgKG5leHQgJiYgbm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihuZXh0KSBeIDQpIG5leHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dCk7XG4gICAgICAgIG5leHQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1swXTtcbiAgYXJndW1lbnRzWzBdID0gdGhpcztcbiAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIEFycmF5LmZyb20odGhpcyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIG5vZGUgPSBncm91cFtpXTtcbiAgICAgIGlmIChub2RlKSByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICBsZXQgc2l6ZSA9IDA7XG4gIGZvciAoY29uc3Qgbm9kZSBvZiB0aGlzKSArK3NpemU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgcmV0dXJuIHNpemU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICF0aGlzLm5vZGUoKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGNhbGxiYWNrLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kQ2hpbGQoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMucHJvcGVydHkoXCJfX2RhdGFfX1wiLCB2YWx1ZSlcbiAgICAgIDogdGhpcy5ub2RlKCkuX19kYXRhX187XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiooKSB7XG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB5aWVsZCBub2RlO1xuICAgIH1cbiAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IHJhZGlhbnMgPSBNYXRoLlBJIC8gMTgwO1xuZXhwb3J0IGNvbnN0IGRlZ3JlZXMgPSAxODAgLyBNYXRoLlBJO1xuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lLmpzXCI7XG5pbXBvcnQge0NvbG9yLCByZ2JDb252ZXJ0LCBSZ2J9IGZyb20gXCIuL2NvbG9yLmpzXCI7XG5pbXBvcnQge2RlZ3JlZXMsIHJhZGlhbnN9IGZyb20gXCIuL21hdGguanNcIjtcblxuLy8gaHR0cHM6Ly9vYnNlcnZhYmxlaHEuY29tL0BtYm9zdG9jay9sYWItYW5kLXJnYlxuY29uc3QgSyA9IDE4LFxuICAgIFhuID0gMC45NjQyMixcbiAgICBZbiA9IDEsXG4gICAgWm4gPSAwLjgyNTIxLFxuICAgIHQwID0gNCAvIDI5LFxuICAgIHQxID0gNiAvIDI5LFxuICAgIHQyID0gMyAqIHQxICogdDEsXG4gICAgdDMgPSB0MSAqIHQxICogdDE7XG5cbmZ1bmN0aW9uIGxhYkNvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIExhYikgcmV0dXJuIG5ldyBMYWIoby5sLCBvLmEsIG8uYiwgby5vcGFjaXR5KTtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIY2wpIHJldHVybiBoY2wybGFiKG8pO1xuICBpZiAoIShvIGluc3RhbmNlb2YgUmdiKSkgbyA9IHJnYkNvbnZlcnQobyk7XG4gIHZhciByID0gcmdiMmxyZ2Ioby5yKSxcbiAgICAgIGcgPSByZ2IybHJnYihvLmcpLFxuICAgICAgYiA9IHJnYjJscmdiKG8uYiksXG4gICAgICB5ID0geHl6MmxhYigoMC4yMjI1MDQ1ICogciArIDAuNzE2ODc4NiAqIGcgKyAwLjA2MDYxNjkgKiBiKSAvIFluKSwgeCwgejtcbiAgaWYgKHIgPT09IGcgJiYgZyA9PT0gYikgeCA9IHogPSB5OyBlbHNlIHtcbiAgICB4ID0geHl6MmxhYigoMC40MzYwNzQ3ICogciArIDAuMzg1MDY0OSAqIGcgKyAwLjE0MzA4MDQgKiBiKSAvIFhuKTtcbiAgICB6ID0geHl6MmxhYigoMC4wMTM5MzIyICogciArIDAuMDk3MTA0NSAqIGcgKyAwLjcxNDE3MzMgKiBiKSAvIFpuKTtcbiAgfVxuICByZXR1cm4gbmV3IExhYigxMTYgKiB5IC0gMTYsIDUwMCAqICh4IC0geSksIDIwMCAqICh5IC0geiksIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBncmF5KGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIG5ldyBMYWIobCwgMCwgMCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsYWIobCwgYSwgYiwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGxhYkNvbnZlcnQobCkgOiBuZXcgTGFiKGwsIGEsIGIsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIExhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLmEgPSArYTtcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoTGFiLCBsYWIsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCArIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sIC0gSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB5ID0gKHRoaXMubCArIDE2KSAvIDExNixcbiAgICAgICAgeCA9IGlzTmFOKHRoaXMuYSkgPyB5IDogeSArIHRoaXMuYSAvIDUwMCxcbiAgICAgICAgeiA9IGlzTmFOKHRoaXMuYikgPyB5IDogeSAtIHRoaXMuYiAvIDIwMDtcbiAgICB4ID0gWG4gKiBsYWIyeHl6KHgpO1xuICAgIHkgPSBZbiAqIGxhYjJ4eXooeSk7XG4gICAgeiA9IFpuICogbGFiMnh5eih6KTtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGxyZ2IycmdiKCAzLjEzMzg1NjEgKiB4IC0gMS42MTY4NjY3ICogeSAtIDAuNDkwNjE0NiAqIHopLFxuICAgICAgbHJnYjJyZ2IoLTAuOTc4NzY4NCAqIHggKyAxLjkxNjE0MTUgKiB5ICsgMC4wMzM0NTQwICogeiksXG4gICAgICBscmdiMnJnYiggMC4wNzE5NDUzICogeCAtIDAuMjI4OTkxNCAqIHkgKyAxLjQwNTI0MjcgKiB6KSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH1cbn0pKTtcblxuZnVuY3Rpb24geHl6MmxhYih0KSB7XG4gIHJldHVybiB0ID4gdDMgPyBNYXRoLnBvdyh0LCAxIC8gMykgOiB0IC8gdDIgKyB0MDtcbn1cblxuZnVuY3Rpb24gbGFiMnh5eih0KSB7XG4gIHJldHVybiB0ID4gdDEgPyB0ICogdCAqIHQgOiB0MiAqICh0IC0gdDApO1xufVxuXG5mdW5jdGlvbiBscmdiMnJnYih4KSB7XG4gIHJldHVybiAyNTUgKiAoeCA8PSAwLjAwMzEzMDggPyAxMi45MiAqIHggOiAxLjA1NSAqIE1hdGgucG93KHgsIDEgLyAyLjQpIC0gMC4wNTUpO1xufVxuXG5mdW5jdGlvbiByZ2IybHJnYih4KSB7XG4gIHJldHVybiAoeCAvPSAyNTUpIDw9IDAuMDQwNDUgPyB4IC8gMTIuOTIgOiBNYXRoLnBvdygoeCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xufVxuXG5mdW5jdGlvbiBoY2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIY2wpIHJldHVybiBuZXcgSGNsKG8uaCwgby5jLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBMYWIpKSBvID0gbGFiQ29udmVydChvKTtcbiAgaWYgKG8uYSA9PT0gMCAmJiBvLmIgPT09IDApIHJldHVybiBuZXcgSGNsKE5hTiwgMCA8IG8ubCAmJiBvLmwgPCAxMDAgPyAwIDogTmFOLCBvLmwsIG8ub3BhY2l0eSk7XG4gIHZhciBoID0gTWF0aC5hdGFuMihvLmIsIG8uYSkgKiBkZWdyZWVzO1xuICByZXR1cm4gbmV3IEhjbChoIDwgMCA/IGggKyAzNjAgOiBoLCBNYXRoLnNxcnQoby5hICogby5hICsgby5iICogby5iKSwgby5sLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGNoKGwsIGMsIGgsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGwpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoY2woaCwgYywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQoaCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLmMgPSArYztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5mdW5jdGlvbiBoY2wybGFiKG8pIHtcbiAgaWYgKGlzTmFOKG8uaCkpIHJldHVybiBuZXcgTGFiKG8ubCwgMCwgMCwgby5vcGFjaXR5KTtcbiAgdmFyIGggPSBvLmggKiByYWRpYW5zO1xuICByZXR1cm4gbmV3IExhYihvLmwsIE1hdGguY29zKGgpICogby5jLCBNYXRoLnNpbihoKSAqIG8uYywgby5vcGFjaXR5KTtcbn1cblxuZGVmaW5lKEhjbCwgaGNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaGNsMmxhYih0aGlzKS5yZ2IoKTtcbiAgfVxufSkpO1xuIiwidmFyIGZyYW1lID0gMCwgLy8gaXMgYW4gYW5pbWF0aW9uIGZyYW1lIHBlbmRpbmc/XG4gICAgdGltZW91dCA9IDAsIC8vIGlzIGEgdGltZW91dCBwZW5kaW5nP1xuICAgIGludGVydmFsID0gMCwgLy8gYXJlIGFueSB0aW1lcnMgYWN0aXZlP1xuICAgIHBva2VEZWxheSA9IDEwMDAsIC8vIGhvdyBmcmVxdWVudGx5IHdlIGNoZWNrIGZvciBjbG9jayBza2V3XG4gICAgdGFza0hlYWQsXG4gICAgdGFza1RhaWwsXG4gICAgY2xvY2tMYXN0ID0gMCxcbiAgICBjbG9ja05vdyA9IDAsXG4gICAgY2xvY2tTa2V3ID0gMCxcbiAgICBjbG9jayA9IHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gXCJvYmplY3RcIiAmJiBwZXJmb3JtYW5jZS5ub3cgPyBwZXJmb3JtYW5jZSA6IERhdGUsXG4gICAgc2V0RnJhbWUgPSB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KSA6IGZ1bmN0aW9uKGYpIHsgc2V0VGltZW91dChmLCAxNyk7IH07XG5cbmV4cG9ydCBmdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBjbG9ja05vdyB8fCAoc2V0RnJhbWUoY2xlYXJOb3cpLCBjbG9ja05vdyA9IGNsb2NrLm5vdygpICsgY2xvY2tTa2V3KTtcbn1cblxuZnVuY3Rpb24gY2xlYXJOb3coKSB7XG4gIGNsb2NrTm93ID0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFRpbWVyKCkge1xuICB0aGlzLl9jYWxsID1cbiAgdGhpcy5fdGltZSA9XG4gIHRoaXMuX25leHQgPSBudWxsO1xufVxuXG5UaW1lci5wcm90b3R5cGUgPSB0aW1lci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUaW1lcixcbiAgcmVzdGFydDogZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gICAgdGltZSA9ICh0aW1lID09IG51bGwgPyBub3coKSA6ICt0aW1lKSArIChkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheSk7XG4gICAgaWYgKCF0aGlzLl9uZXh0ICYmIHRhc2tUYWlsICE9PSB0aGlzKSB7XG4gICAgICBpZiAodGFza1RhaWwpIHRhc2tUYWlsLl9uZXh0ID0gdGhpcztcbiAgICAgIGVsc2UgdGFza0hlYWQgPSB0aGlzO1xuICAgICAgdGFza1RhaWwgPSB0aGlzO1xuICAgIH1cbiAgICB0aGlzLl9jYWxsID0gY2FsbGJhY2s7XG4gICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgc2xlZXAoKTtcbiAgfSxcbiAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2NhbGwpIHtcbiAgICAgIHRoaXMuX2NhbGwgPSBudWxsO1xuICAgICAgdGhpcy5fdGltZSA9IEluZmluaXR5O1xuICAgICAgc2xlZXAoKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lcihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIHQucmVzdGFydChjYWxsYmFjaywgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyRmx1c2goKSB7XG4gIG5vdygpOyAvLyBHZXQgdGhlIGN1cnJlbnQgdGltZSwgaWYgbm90IGFscmVhZHkgc2V0LlxuICArK2ZyYW1lOyAvLyBQcmV0ZW5kIHdl4oCZdmUgc2V0IGFuIGFsYXJtLCBpZiB3ZSBoYXZlbuKAmXQgYWxyZWFkeS5cbiAgdmFyIHQgPSB0YXNrSGVhZCwgZTtcbiAgd2hpbGUgKHQpIHtcbiAgICBpZiAoKGUgPSBjbG9ja05vdyAtIHQuX3RpbWUpID49IDApIHQuX2NhbGwuY2FsbChudWxsLCBlKTtcbiAgICB0ID0gdC5fbmV4dDtcbiAgfVxuICAtLWZyYW1lO1xufVxuXG5mdW5jdGlvbiB3YWtlKCkge1xuICBjbG9ja05vdyA9IChjbG9ja0xhc3QgPSBjbG9jay5ub3coKSkgKyBjbG9ja1NrZXc7XG4gIGZyYW1lID0gdGltZW91dCA9IDA7XG4gIHRyeSB7XG4gICAgdGltZXJGbHVzaCgpO1xuICB9IGZpbmFsbHkge1xuICAgIGZyYW1lID0gMDtcbiAgICBuYXAoKTtcbiAgICBjbG9ja05vdyA9IDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gcG9rZSgpIHtcbiAgdmFyIG5vdyA9IGNsb2NrLm5vdygpLCBkZWxheSA9IG5vdyAtIGNsb2NrTGFzdDtcbiAgaWYgKGRlbGF5ID4gcG9rZURlbGF5KSBjbG9ja1NrZXcgLT0gZGVsYXksIGNsb2NrTGFzdCA9IG5vdztcbn1cblxuZnVuY3Rpb24gbmFwKCkge1xuICB2YXIgdDAsIHQxID0gdGFza0hlYWQsIHQyLCB0aW1lID0gSW5maW5pdHk7XG4gIHdoaWxlICh0MSkge1xuICAgIGlmICh0MS5fY2FsbCkge1xuICAgICAgaWYgKHRpbWUgPiB0MS5fdGltZSkgdGltZSA9IHQxLl90aW1lO1xuICAgICAgdDAgPSB0MSwgdDEgPSB0MS5fbmV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdDIgPSB0MS5fbmV4dCwgdDEuX25leHQgPSBudWxsO1xuICAgICAgdDEgPSB0MCA/IHQwLl9uZXh0ID0gdDIgOiB0YXNrSGVhZCA9IHQyO1xuICAgIH1cbiAgfVxuICB0YXNrVGFpbCA9IHQwO1xuICBzbGVlcCh0aW1lKTtcbn1cblxuZnVuY3Rpb24gc2xlZXAodGltZSkge1xuICBpZiAoZnJhbWUpIHJldHVybjsgLy8gU29vbmVzdCBhbGFybSBhbHJlYWR5IHNldCwgb3Igd2lsbCBiZS5cbiAgaWYgKHRpbWVvdXQpIHRpbWVvdXQgPSBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIHZhciBkZWxheSA9IHRpbWUgLSBjbG9ja05vdzsgLy8gU3RyaWN0bHkgbGVzcyB0aGFuIGlmIHdlIHJlY29tcHV0ZWQgY2xvY2tOb3cuXG4gIGlmIChkZWxheSA+IDI0KSB7XG4gICAgaWYgKHRpbWUgPCBJbmZpbml0eSkgdGltZW91dCA9IHNldFRpbWVvdXQod2FrZSwgdGltZSAtIGNsb2NrLm5vdygpIC0gY2xvY2tTa2V3KTtcbiAgICBpZiAoaW50ZXJ2YWwpIGludGVydmFsID0gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFpbnRlcnZhbCkgY2xvY2tMYXN0ID0gY2xvY2subm93KCksIGludGVydmFsID0gc2V0SW50ZXJ2YWwocG9rZSwgcG9rZURlbGF5KTtcbiAgICBmcmFtZSA9IDEsIHNldEZyYW1lKHdha2UpO1xuICB9XG59XG4iLCJpbXBvcnQge1RpbWVyfSBmcm9tIFwiLi90aW1lci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIGRlbGF5ID0gZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXk7XG4gIHQucmVzdGFydChlbGFwc2VkID0+IHtcbiAgICB0LnN0b3AoKTtcbiAgICBjYWxsYmFjayhlbGFwc2VkICsgZGVsYXkpO1xuICB9LCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge3RpbWVyLCB0aW1lb3V0fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGVtcHR5T24gPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZW5kXCIsIFwiY2FuY2VsXCIsIFwiaW50ZXJydXB0XCIpO1xudmFyIGVtcHR5VHdlZW4gPSBbXTtcblxuZXhwb3J0IHZhciBDUkVBVEVEID0gMDtcbmV4cG9ydCB2YXIgU0NIRURVTEVEID0gMTtcbmV4cG9ydCB2YXIgU1RBUlRJTkcgPSAyO1xuZXhwb3J0IHZhciBTVEFSVEVEID0gMztcbmV4cG9ydCB2YXIgUlVOTklORyA9IDQ7XG5leHBvcnQgdmFyIEVORElORyA9IDU7XG5leHBvcnQgdmFyIEVOREVEID0gNjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSwgaWQsIGluZGV4LCBncm91cCwgdGltaW5nKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZXMpIG5vZGUuX190cmFuc2l0aW9uID0ge307XG4gIGVsc2UgaWYgKGlkIGluIHNjaGVkdWxlcykgcmV0dXJuO1xuICBjcmVhdGUobm9kZSwgaWQsIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIGluZGV4OiBpbmRleCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIGdyb3VwOiBncm91cCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIG9uOiBlbXB0eU9uLFxuICAgIHR3ZWVuOiBlbXB0eVR3ZWVuLFxuICAgIHRpbWU6IHRpbWluZy50aW1lLFxuICAgIGRlbGF5OiB0aW1pbmcuZGVsYXksXG4gICAgZHVyYXRpb246IHRpbWluZy5kdXJhdGlvbixcbiAgICBlYXNlOiB0aW1pbmcuZWFzZSxcbiAgICB0aW1lcjogbnVsbCxcbiAgICBzdGF0ZTogQ1JFQVRFRFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gQ1JFQVRFRCkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGU7IGFscmVhZHkgc2NoZWR1bGVkXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gU1RBUlRFRCkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGU7IGFscmVhZHkgcnVubmluZ1wiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IG5vZGUuX190cmFuc2l0aW9uO1xuICBpZiAoIXNjaGVkdWxlIHx8ICEoc2NoZWR1bGUgPSBzY2hlZHVsZVtpZF0pKSB0aHJvdyBuZXcgRXJyb3IoXCJ0cmFuc2l0aW9uIG5vdCBmb3VuZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGUobm9kZSwgaWQsIHNlbGYpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgdHdlZW47XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgc2VsZiB0aW1lciB3aGVuIHRoZSB0cmFuc2l0aW9uIGlzIGNyZWF0ZWQuXG4gIC8vIE5vdGUgdGhlIGFjdHVhbCBkZWxheSBpcyBub3Qga25vd24gdW50aWwgdGhlIGZpcnN0IGNhbGxiYWNrIVxuICBzY2hlZHVsZXNbaWRdID0gc2VsZjtcbiAgc2VsZi50aW1lciA9IHRpbWVyKHNjaGVkdWxlLCAwLCBzZWxmLnRpbWUpO1xuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlKGVsYXBzZWQpIHtcbiAgICBzZWxmLnN0YXRlID0gU0NIRURVTEVEO1xuICAgIHNlbGYudGltZXIucmVzdGFydChzdGFydCwgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcblxuICAgIC8vIElmIHRoZSBlbGFwc2VkIGRlbGF5IGlzIGxlc3MgdGhhbiBvdXIgZmlyc3Qgc2xlZXAsIHN0YXJ0IGltbWVkaWF0ZWx5LlxuICAgIGlmIChzZWxmLmRlbGF5IDw9IGVsYXBzZWQpIHN0YXJ0KGVsYXBzZWQgLSBzZWxmLmRlbGF5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGVsYXBzZWQpIHtcbiAgICB2YXIgaSwgaiwgbiwgbztcblxuICAgIC8vIElmIHRoZSBzdGF0ZSBpcyBub3QgU0NIRURVTEVELCB0aGVuIHdlIHByZXZpb3VzbHkgZXJyb3JlZCBvbiBzdGFydC5cbiAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU0NIRURVTEVEKSByZXR1cm4gc3RvcCgpO1xuXG4gICAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgICAgbyA9IHNjaGVkdWxlc1tpXTtcbiAgICAgIGlmIChvLm5hbWUgIT09IHNlbGYubmFtZSkgY29udGludWU7XG5cbiAgICAgIC8vIFdoaWxlIHRoaXMgZWxlbWVudCBhbHJlYWR5IGhhcyBhIHN0YXJ0aW5nIHRyYW5zaXRpb24gZHVyaW5nIHRoaXMgZnJhbWUsXG4gICAgICAvLyBkZWZlciBzdGFydGluZyBhbiBpbnRlcnJ1cHRpbmcgdHJhbnNpdGlvbiB1bnRpbCB0aGF0IHRyYW5zaXRpb24gaGFzIGFcbiAgICAgIC8vIGNoYW5jZSB0byB0aWNrIChhbmQgcG9zc2libHkgZW5kKTsgc2VlIGQzL2QzLXRyYW5zaXRpb24jNTQhXG4gICAgICBpZiAoby5zdGF0ZSA9PT0gU1RBUlRFRCkgcmV0dXJuIHRpbWVvdXQoc3RhcnQpO1xuXG4gICAgICAvLyBJbnRlcnJ1cHQgdGhlIGFjdGl2ZSB0cmFuc2l0aW9uLCBpZiBhbnkuXG4gICAgICBpZiAoby5zdGF0ZSA9PT0gUlVOTklORykge1xuICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICBvLm9uLmNhbGwoXCJpbnRlcnJ1cHRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgby5pbmRleCwgby5ncm91cCk7XG4gICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICB9XG5cbiAgICAgIC8vIENhbmNlbCBhbnkgcHJlLWVtcHRlZCB0cmFuc2l0aW9ucy5cbiAgICAgIGVsc2UgaWYgKCtpIDwgaWQpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgby5vbi5jYWxsKFwiY2FuY2VsXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIG8uaW5kZXgsIG8uZ3JvdXApO1xuICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERlZmVyIHRoZSBmaXJzdCB0aWNrIHRvIGVuZCBvZiB0aGUgY3VycmVudCBmcmFtZTsgc2VlIGQzL2QzIzE1NzYuXG4gICAgLy8gTm90ZSB0aGUgdHJhbnNpdGlvbiBtYXkgYmUgY2FuY2VsZWQgYWZ0ZXIgc3RhcnQgYW5kIGJlZm9yZSB0aGUgZmlyc3QgdGljayFcbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBzY2hlZHVsZWQgYmVmb3JlIHRoZSBzdGFydCBldmVudDsgc2VlIGQzL2QzLXRyYW5zaXRpb24jMTYhXG4gICAgLy8gQXNzdW1pbmcgdGhpcyBpcyBzdWNjZXNzZnVsLCBzdWJzZXF1ZW50IGNhbGxiYWNrcyBnbyBzdHJhaWdodCB0byB0aWNrLlxuICAgIHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gU1RBUlRFRCkge1xuICAgICAgICBzZWxmLnN0YXRlID0gUlVOTklORztcbiAgICAgICAgc2VsZi50aW1lci5yZXN0YXJ0KHRpY2ssIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG4gICAgICAgIHRpY2soZWxhcHNlZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBEaXNwYXRjaCB0aGUgc3RhcnQgZXZlbnQuXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgdGhlIHR3ZWVuIGFyZSBpbml0aWFsaXplZC5cbiAgICBzZWxmLnN0YXRlID0gU1RBUlRJTkc7XG4gICAgc2VsZi5vbi5jYWxsKFwic3RhcnRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNUQVJUSU5HKSByZXR1cm47IC8vIGludGVycnVwdGVkXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJURUQ7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSB0d2VlbiwgZGVsZXRpbmcgbnVsbCB0d2Vlbi5cbiAgICB0d2VlbiA9IG5ldyBBcnJheShuID0gc2VsZi50d2Vlbi5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGogPSAtMTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG8gPSBzZWxmLnR3ZWVuW2ldLnZhbHVlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCkpIHtcbiAgICAgICAgdHdlZW5bKytqXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIHR3ZWVuLmxlbmd0aCA9IGogKyAxO1xuICB9XG5cbiAgZnVuY3Rpb24gdGljayhlbGFwc2VkKSB7XG4gICAgdmFyIHQgPSBlbGFwc2VkIDwgc2VsZi5kdXJhdGlvbiA/IHNlbGYuZWFzZS5jYWxsKG51bGwsIGVsYXBzZWQgLyBzZWxmLmR1cmF0aW9uKSA6IChzZWxmLnRpbWVyLnJlc3RhcnQoc3RvcCksIHNlbGYuc3RhdGUgPSBFTkRJTkcsIDEpLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSB0d2Vlbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgdHdlZW5baV0uY2FsbChub2RlLCB0KTtcbiAgICB9XG5cbiAgICAvLyBEaXNwYXRjaCB0aGUgZW5kIGV2ZW50LlxuICAgIGlmIChzZWxmLnN0YXRlID09PSBFTkRJTkcpIHtcbiAgICAgIHNlbGYub24uY2FsbChcImVuZFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICAgIHN0b3AoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wKCkge1xuICAgIHNlbGYuc3RhdGUgPSBFTkRFRDtcbiAgICBzZWxmLnRpbWVyLnN0b3AoKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2lkXTtcbiAgICBmb3IgKHZhciBpIGluIHNjaGVkdWxlcykgcmV0dXJuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCB4ID0+ICgpID0+IHg7XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcblxuZnVuY3Rpb24gbGluZWFyKGEsIGQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIHQgKiBkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleHBvbmVudGlhbChhLCBiLCB5KSB7XG4gIHJldHVybiBhID0gTWF0aC5wb3coYSwgeSksIGIgPSBNYXRoLnBvdyhiLCB5KSAtIGEsIHkgPSAxIC8geSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhhICsgdCAqIGIsIHkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHVlKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCA+IDE4MCB8fCBkIDwgLTE4MCA/IGQgLSAzNjAgKiBNYXRoLnJvdW5kKGQgLyAzNjApIDogZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdhbW1hKHkpIHtcbiAgcmV0dXJuICh5ID0gK3kpID09PSAxID8gbm9nYW1tYSA6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGEgPyBleHBvbmVudGlhbChhLCBiLCB5KSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2dhbW1hKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cbiIsImltcG9ydCB7cmdiIGFzIGNvbG9yUmdifSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBiYXNpcyBmcm9tIFwiLi9iYXNpcy5qc1wiO1xuaW1wb3J0IGJhc2lzQ2xvc2VkIGZyb20gXCIuL2Jhc2lzQ2xvc2VkLmpzXCI7XG5pbXBvcnQgbm9nYW1tYSwge2dhbW1hfSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gcmdiR2FtbWEoeSkge1xuICB2YXIgY29sb3IgPSBnYW1tYSh5KTtcblxuICBmdW5jdGlvbiByZ2Ioc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gY29sb3IoKHN0YXJ0ID0gY29sb3JSZ2Ioc3RhcnQpKS5yLCAoZW5kID0gY29sb3JSZ2IoZW5kKSkuciksXG4gICAgICAgIGcgPSBjb2xvcihzdGFydC5nLCBlbmQuZyksXG4gICAgICAgIGIgPSBjb2xvcihzdGFydC5iLCBlbmQuYiksXG4gICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuciA9IHIodCk7XG4gICAgICBzdGFydC5nID0gZyh0KTtcbiAgICAgIHN0YXJ0LmIgPSBiKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cblxuICByZ2IuZ2FtbWEgPSByZ2JHYW1tYTtcblxuICByZXR1cm4gcmdiO1xufSkoMSk7XG5cbmZ1bmN0aW9uIHJnYlNwbGluZShzcGxpbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbG9ycykge1xuICAgIHZhciBuID0gY29sb3JzLmxlbmd0aCxcbiAgICAgICAgciA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgZyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgaSwgY29sb3I7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgY29sb3IgPSBjb2xvclJnYihjb2xvcnNbaV0pO1xuICAgICAgcltpXSA9IGNvbG9yLnIgfHwgMDtcbiAgICAgIGdbaV0gPSBjb2xvci5nIHx8IDA7XG4gICAgICBiW2ldID0gY29sb3IuYiB8fCAwO1xuICAgIH1cbiAgICByID0gc3BsaW5lKHIpO1xuICAgIGcgPSBzcGxpbmUoZyk7XG4gICAgYiA9IHNwbGluZShiKTtcbiAgICBjb2xvci5vcGFjaXR5ID0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgY29sb3IuciA9IHIodCk7XG4gICAgICBjb2xvci5nID0gZyh0KTtcbiAgICAgIGNvbG9yLmIgPSBiKHQpO1xuICAgICAgcmV0dXJuIGNvbG9yICsgXCJcIjtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIHJnYkJhc2lzID0gcmdiU3BsaW5lKGJhc2lzKTtcbmV4cG9ydCB2YXIgcmdiQmFzaXNDbG9zZWQgPSByZ2JTcGxpbmUoYmFzaXNDbG9zZWQpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSAqICgxIC0gdCkgKyBiICogdDtcbiAgfTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbnZhciByZUEgPSAvWy0rXT8oPzpcXGQrXFwuP1xcZCp8XFwuP1xcZCspKD86W2VFXVstK10/XFxkKyk/L2csXG4gICAgcmVCID0gbmV3IFJlZ0V4cChyZUEuc291cmNlLCBcImdcIik7XG5cbmZ1bmN0aW9uIHplcm8oYikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGI7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uZShiKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGIodCkgKyBcIlwiO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBiaSA9IHJlQS5sYXN0SW5kZXggPSByZUIubGFzdEluZGV4ID0gMCwgLy8gc2NhbiBpbmRleCBmb3IgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYW0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYVxuICAgICAgYm0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYlxuICAgICAgYnMsIC8vIHN0cmluZyBwcmVjZWRpbmcgY3VycmVudCBudW1iZXIgaW4gYiwgaWYgYW55XG4gICAgICBpID0gLTEsIC8vIGluZGV4IGluIHNcbiAgICAgIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG5cbiAgLy8gQ29lcmNlIGlucHV0cyB0byBzdHJpbmdzLlxuICBhID0gYSArIFwiXCIsIGIgPSBiICsgXCJcIjtcblxuICAvLyBJbnRlcnBvbGF0ZSBwYWlycyBvZiBudW1iZXJzIGluIGEgJiBiLlxuICB3aGlsZSAoKGFtID0gcmVBLmV4ZWMoYSkpXG4gICAgICAmJiAoYm0gPSByZUIuZXhlYyhiKSkpIHtcbiAgICBpZiAoKGJzID0gYm0uaW5kZXgpID4gYmkpIHsgLy8gYSBzdHJpbmcgcHJlY2VkZXMgdGhlIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGJzID0gYi5zbGljZShiaSwgYnMpO1xuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJzO1xuICAgIH1cbiAgICBpZiAoKGFtID0gYW1bMF0pID09PSAoYm0gPSBibVswXSkpIHsgLy8gbnVtYmVycyBpbiBhICYgYiBtYXRjaFxuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYm07IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJtO1xuICAgIH0gZWxzZSB7IC8vIGludGVycG9sYXRlIG5vbi1tYXRjaGluZyBudW1iZXJzXG4gICAgICBzWysraV0gPSBudWxsO1xuICAgICAgcS5wdXNoKHtpOiBpLCB4OiBudW1iZXIoYW0sIGJtKX0pO1xuICAgIH1cbiAgICBiaSA9IHJlQi5sYXN0SW5kZXg7XG4gIH1cblxuICAvLyBBZGQgcmVtYWlucyBvZiBiLlxuICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgIGJzID0gYi5zbGljZShiaSk7XG4gICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgZWxzZSBzWysraV0gPSBicztcbiAgfVxuXG4gIC8vIFNwZWNpYWwgb3B0aW1pemF0aW9uIGZvciBvbmx5IGEgc2luZ2xlIG1hdGNoLlxuICAvLyBPdGhlcndpc2UsIGludGVycG9sYXRlIGVhY2ggb2YgdGhlIG51bWJlcnMgYW5kIHJlam9pbiB0aGUgc3RyaW5nLlxuICByZXR1cm4gcy5sZW5ndGggPCAyID8gKHFbMF1cbiAgICAgID8gb25lKHFbMF0ueClcbiAgICAgIDogemVybyhiKSlcbiAgICAgIDogKGIgPSBxLmxlbmd0aCwgZnVuY3Rpb24odCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvOyBpIDwgYjsgKytpKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICAgICAgfSk7XG59XG4iLCJ2YXIgZGVncmVlcyA9IDE4MCAvIE1hdGguUEk7XG5cbmV4cG9ydCB2YXIgaWRlbnRpdHkgPSB7XG4gIHRyYW5zbGF0ZVg6IDAsXG4gIHRyYW5zbGF0ZVk6IDAsXG4gIHJvdGF0ZTogMCxcbiAgc2tld1g6IDAsXG4gIHNjYWxlWDogMSxcbiAgc2NhbGVZOiAxXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhciBzY2FsZVgsIHNjYWxlWSwgc2tld1g7XG4gIGlmIChzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYikpIGEgLz0gc2NhbGVYLCBiIC89IHNjYWxlWDtcbiAgaWYgKHNrZXdYID0gYSAqIGMgKyBiICogZCkgYyAtPSBhICogc2tld1gsIGQgLT0gYiAqIHNrZXdYO1xuICBpZiAoc2NhbGVZID0gTWF0aC5zcXJ0KGMgKiBjICsgZCAqIGQpKSBjIC89IHNjYWxlWSwgZCAvPSBzY2FsZVksIHNrZXdYIC89IHNjYWxlWTtcbiAgaWYgKGEgKiBkIDwgYiAqIGMpIGEgPSAtYSwgYiA9IC1iLCBza2V3WCA9IC1za2V3WCwgc2NhbGVYID0gLXNjYWxlWDtcbiAgcmV0dXJuIHtcbiAgICB0cmFuc2xhdGVYOiBlLFxuICAgIHRyYW5zbGF0ZVk6IGYsXG4gICAgcm90YXRlOiBNYXRoLmF0YW4yKGIsIGEpICogZGVncmVlcyxcbiAgICBza2V3WDogTWF0aC5hdGFuKHNrZXdYKSAqIGRlZ3JlZXMsXG4gICAgc2NhbGVYOiBzY2FsZVgsXG4gICAgc2NhbGVZOiBzY2FsZVlcbiAgfTtcbn1cbiIsImltcG9ydCBkZWNvbXBvc2UsIHtpZGVudGl0eX0gZnJvbSBcIi4vZGVjb21wb3NlLmpzXCI7XG5cbnZhciBzdmdOb2RlO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ3NzKHZhbHVlKSB7XG4gIGNvbnN0IG0gPSBuZXcgKHR5cGVvZiBET01NYXRyaXggPT09IFwiZnVuY3Rpb25cIiA/IERPTU1hdHJpeCA6IFdlYktpdENTU01hdHJpeCkodmFsdWUgKyBcIlwiKTtcbiAgcmV0dXJuIG0uaXNJZGVudGl0eSA/IGlkZW50aXR5IDogZGVjb21wb3NlKG0uYSwgbS5iLCBtLmMsIG0uZCwgbS5lLCBtLmYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdmcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFzdmdOb2RlKSBzdmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJnXCIpO1xuICBzdmdOb2RlLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB2YWx1ZSk7XG4gIGlmICghKHZhbHVlID0gc3ZnTm9kZS50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpKSkgcmV0dXJuIGlkZW50aXR5O1xuICB2YWx1ZSA9IHZhbHVlLm1hdHJpeDtcbiAgcmV0dXJuIGRlY29tcG9zZSh2YWx1ZS5hLCB2YWx1ZS5iLCB2YWx1ZS5jLCB2YWx1ZS5kLCB2YWx1ZS5lLCB2YWx1ZS5mKTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4uL251bWJlci5qc1wiO1xuaW1wb3J0IHtwYXJzZUNzcywgcGFyc2VTdmd9IGZyb20gXCIuL3BhcnNlLmpzXCI7XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlLCBweENvbW1hLCBweFBhcmVuLCBkZWdQYXJlbikge1xuXG4gIGZ1bmN0aW9uIHBvcChzKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoID8gcy5wb3AoKSArIFwiIFwiIDogXCJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgcHhDb21tYSwgbnVsbCwgcHhQYXJlbik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiIHx8IHliKSB7XG4gICAgICBzLnB1c2goXCJ0cmFuc2xhdGUoXCIgKyB4YiArIHB4Q29tbWEgKyB5YiArIHB4UGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0ZShhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIGlmIChhIC0gYiA+IDE4MCkgYiArPSAzNjA7IGVsc2UgaWYgKGIgLSBhID4gMTgwKSBhICs9IDM2MDsgLy8gc2hvcnRlc3QgcGF0aFxuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBza2V3WChhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiICE9PSAxIHx8IHliICE9PSAxKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiArIHhiICsgXCIsXCIgKyB5YiArIFwiKVwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG4gICAgYSA9IHBhcnNlKGEpLCBiID0gcGFyc2UoYik7XG4gICAgdHJhbnNsYXRlKGEudHJhbnNsYXRlWCwgYS50cmFuc2xhdGVZLCBiLnRyYW5zbGF0ZVgsIGIudHJhbnNsYXRlWSwgcywgcSk7XG4gICAgcm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG4gICAgc2tld1goYS5za2V3WCwgYi5za2V3WCwgcywgcSk7XG4gICAgc2NhbGUoYS5zY2FsZVgsIGEuc2NhbGVZLCBiLnNjYWxlWCwgYi5zY2FsZVksIHMsIHEpO1xuICAgIGEgPSBiID0gbnVsbDsgLy8gZ2NcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IHEubGVuZ3RoLCBvO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlQ3NzLCBcInB4LCBcIiwgXCJweClcIiwgXCJkZWcpXCIpO1xuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlU3ZnLCBcIiwgXCIsIFwiKVwiLCBcIilcIik7XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiB0d2VlblJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gdHdlZW4wID0gdHdlZW47XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xID0gdHdlZW4xLnNsaWNlKCk7XG4gICAgICAgICAgdHdlZW4xLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0d2VlbkZ1bmN0aW9uKGlkLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9ICh0d2VlbjAgPSB0d2Vlbikuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIHQgPSB7bmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlfSwgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMVtpXSA9IHQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpID09PSBuKSB0d2VlbjEucHVzaCh0KTtcbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgbmFtZSArPSBcIlwiO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciB0d2VlbiA9IGdldCh0aGlzLm5vZGUoKSwgaWQpLnR3ZWVuO1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4ubGVuZ3RoLCB0OyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKHQgPSB0d2VlbltpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICByZXR1cm4gdC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsID8gdHdlZW5SZW1vdmUgOiB0d2VlbkZ1bmN0aW9uKShpZCwgbmFtZSwgdmFsdWUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR3ZWVuVmFsdWUodHJhbnNpdGlvbiwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdHJhbnNpdGlvbi5faWQ7XG5cbiAgdHJhbnNpdGlvbi5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCk7XG4gICAgKHNjaGVkdWxlLnZhbHVlIHx8IChzY2hlZHVsZS52YWx1ZSA9IHt9KSlbbmFtZV0gPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiBnZXQobm9kZSwgaWQpLnZhbHVlW25hbWVdO1xuICB9O1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlTnVtYmVyLCBpbnRlcnBvbGF0ZVJnYiwgaW50ZXJwb2xhdGVTdHJpbmd9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBjO1xuICByZXR1cm4gKHR5cGVvZiBiID09PSBcIm51bWJlclwiID8gaW50ZXJwb2xhdGVOdW1iZXJcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gaW50ZXJwb2xhdGVSZ2JcbiAgICAgIDogKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIGludGVycG9sYXRlUmdiKVxuICAgICAgOiBpbnRlcnBvbGF0ZVN0cmluZykoYSwgYik7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtU3ZnIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7bmFtZXNwYWNlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuLmpzXCI7XG5pbXBvcnQgaW50ZXJwb2xhdGUgZnJvbSBcIi4vaW50ZXJwb2xhdGUuanNcIjtcblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCwgdmFsdWUxID0gdmFsdWUodGhpcyksIHN0cmluZzE7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKSwgaSA9IGZ1bGxuYW1lID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHRoaXMuYXR0clR3ZWVuKG5hbWUsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKShmdWxsbmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcImF0dHIuXCIgKyBuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHZhbHVlID09IG51bGwgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKShmdWxsbmFtZSlcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKGZ1bGxuYW1lLCBpLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZnVuY3Rpb24gYXR0ckludGVycG9sYXRlKG5hbWUsIGkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCBpLmNhbGwodGhpcywgdCkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGVOUyhmdWxsbmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCBpLmNhbGwodGhpcywgdCkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyVHdlZW5OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgdmFyIHQwLCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdDAgPSAoaTAgPSBpKSAmJiBhdHRySW50ZXJwb2xhdGVOUyhmdWxsbmFtZSwgaSk7XG4gICAgcmV0dXJuIHQwO1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2VlbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgdDAsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0MCA9IChpMCA9IGkpICYmIGF0dHJJbnRlcnBvbGF0ZShuYW1lLCBpKTtcbiAgICByZXR1cm4gdDA7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGtleSA9IFwiYXR0ci5cIiArIG5hbWU7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIChmdWxsbmFtZS5sb2NhbCA/IGF0dHJUd2Vlbk5TIDogYXR0clR3ZWVuKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBkZWxheUZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVsYXlDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBkZWxheUZ1bmN0aW9uXG4gICAgICAgICAgOiBkZWxheUNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5kZWxheTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGR1cmF0aW9uRnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGR1cmF0aW9uQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5kdXJhdGlvbiA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBkdXJhdGlvbkZ1bmN0aW9uXG4gICAgICAgICAgOiBkdXJhdGlvbkNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5kdXJhdGlvbjtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGVhc2VDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmVhc2UgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKGVhc2VDb25zdGFudChpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5lYXNlO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldCwgaW5pdH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gc3RhcnQobmFtZSkge1xuICByZXR1cm4gKG5hbWUgKyBcIlwiKS50cmltKCkuc3BsaXQoL158XFxzKy8pLmV2ZXJ5KGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgcmV0dXJuICF0IHx8IHQgPT09IFwic3RhcnRcIjtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSB7XG4gIHZhciBvbjAsIG9uMSwgc2l0ID0gc3RhcnQobmFtZSkgPyBpbml0IDogc2V0O1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2l0KHRoaXMsIGlkKSxcbiAgICAgICAgb24gPSBzY2hlZHVsZS5vbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCBkaXNwYXRjaCBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAob24gIT09IG9uMCkgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihuYW1lLCBsaXN0ZW5lcik7XG5cbiAgICBzY2hlZHVsZS5vbiA9IG9uMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyXG4gICAgICA/IGdldCh0aGlzLm5vZGUoKSwgaWQpLm9uLm9uKG5hbWUpXG4gICAgICA6IHRoaXMuZWFjaChvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxudmFyIFNlbGVjdGlvbiA9IHNlbGVjdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3I7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9ncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyBhcyBpbnRlcnBvbGF0ZVRyYW5zZm9ybX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge3N0eWxlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZS5qc1wiO1xuXG5mdW5jdGlvbiBzdHlsZU51bGwobmFtZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpLFxuICAgICAgICBzdHJpbmcxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlKHRoaXMsIG5hbWUpKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgc3RyaW5nMTAgPSBzdHJpbmcxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVDb25zdGFudChuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSBzdHlsZSh0aGlzLCBuYW1lKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVGdW5jdGlvbihuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpLFxuICAgICAgICB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSxcbiAgICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCI7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSBzdHJpbmcxID0gdmFsdWUxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlKHRoaXMsIG5hbWUpKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlTWF5YmVSZW1vdmUoaWQsIG5hbWUpIHtcbiAgdmFyIG9uMCwgb24xLCBsaXN0ZW5lcjAsIGtleSA9IFwic3R5bGUuXCIgKyBuYW1lLCBldmVudCA9IFwiZW5kLlwiICsga2V5LCByZW1vdmU7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uLFxuICAgICAgICBsaXN0ZW5lciA9IHNjaGVkdWxlLnZhbHVlW2tleV0gPT0gbnVsbCA/IHJlbW92ZSB8fCAocmVtb3ZlID0gc3R5bGVSZW1vdmUobmFtZSkpIDogdW5kZWZpbmVkO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wIHx8IGxpc3RlbmVyMCAhPT0gbGlzdGVuZXIpIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24oZXZlbnQsIGxpc3RlbmVyMCA9IGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGkgPSAobmFtZSArPSBcIlwiKSA9PT0gXCJ0cmFuc2Zvcm1cIiA/IGludGVycG9sYXRlVHJhbnNmb3JtIDogaW50ZXJwb2xhdGU7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVOdWxsKG5hbWUsIGkpKVxuICAgICAgLm9uKFwiZW5kLnN0eWxlLlwiICsgbmFtZSwgc3R5bGVSZW1vdmUobmFtZSkpXG4gICAgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IHRoaXNcbiAgICAgIC5zdHlsZVR3ZWVuKG5hbWUsIHN0eWxlRnVuY3Rpb24obmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcInN0eWxlLlwiICsgbmFtZSwgdmFsdWUpKSlcbiAgICAgIC5lYWNoKHN0eWxlTWF5YmVSZW1vdmUodGhpcy5faWQsIG5hbWUpKVxuICAgIDogdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVDb25zdGFudChuYW1lLCBpLCB2YWx1ZSksIHByaW9yaXR5KVxuICAgICAgLm9uKFwiZW5kLnN0eWxlLlwiICsgbmFtZSwgbnVsbCk7XG59XG4iLCJmdW5jdGlvbiBzdHlsZUludGVycG9sYXRlKG5hbWUsIGksIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBpLmNhbGwodGhpcywgdCksIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIHQsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0ID0gKGkwID0gaSkgJiYgc3R5bGVJbnRlcnBvbGF0ZShuYW1lLCBpLCBwcmlvcml0eSk7XG4gICAgcmV0dXJuIHQ7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciBrZXkgPSBcInN0eWxlLlwiICsgKG5hbWUgKz0gXCJcIik7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSk7XG59XG4iLCJmdW5jdGlvbiB0ZXh0SW50ZXJwb2xhdGUoaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSBpLmNhbGwodGhpcywgdCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRUd2Vlbih2YWx1ZSkge1xuICB2YXIgdDAsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0MCA9IChpMCA9IGkpICYmIHRleHRJbnRlcnBvbGF0ZShpKTtcbiAgICByZXR1cm4gdDA7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGtleSA9IFwidGV4dFwiO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgdGV4dFR3ZWVuKHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0ciBmcm9tIFwiLi9hdHRyLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyVHdlZW4gZnJvbSBcIi4vYXR0clR3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kZWxheSBmcm9tIFwiLi9kZWxheS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZHVyYXRpb24gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2Vhc2UgZnJvbSBcIi4vZWFzZS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZWFzZVZhcnlpbmcgZnJvbSBcIi4vZWFzZVZhcnlpbmcuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXIuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX21lcmdlIGZyb20gXCIuL21lcmdlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9vbiBmcm9tIFwiLi9vbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdC5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0QWxsIGZyb20gXCIuL3NlbGVjdEFsbC5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0aW9uIGZyb20gXCIuL3NlbGVjdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGUuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3N0eWxlVHdlZW4gZnJvbSBcIi4vc3R5bGVUd2Vlbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdGV4dCBmcm9tIFwiLi90ZXh0LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0VHdlZW4gZnJvbSBcIi4vdGV4dFR3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90cmFuc2l0aW9uIGZyb20gXCIuL3RyYW5zaXRpb24uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3R3ZWVuIGZyb20gXCIuL3R3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lbmQgZnJvbSBcIi4vZW5kLmpzXCI7XG5cbnZhciBpZCA9IDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBUcmFuc2l0aW9uKGdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpIHtcbiAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcbiAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gIHRoaXMuX2lkID0gaWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zaXRpb24obmFtZSkge1xuICByZXR1cm4gc2VsZWN0aW9uKCkudHJhbnNpdGlvbihuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5ld0lkKCkge1xuICByZXR1cm4gKytpZDtcbn1cblxudmFyIHNlbGVjdGlvbl9wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlO1xuXG5UcmFuc2l0aW9uLnByb3RvdHlwZSA9IHRyYW5zaXRpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNpdGlvbixcbiAgc2VsZWN0OiB0cmFuc2l0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiB0cmFuc2l0aW9uX3NlbGVjdEFsbCxcbiAgZmlsdGVyOiB0cmFuc2l0aW9uX2ZpbHRlcixcbiAgbWVyZ2U6IHRyYW5zaXRpb25fbWVyZ2UsXG4gIHNlbGVjdGlvbjogdHJhbnNpdGlvbl9zZWxlY3Rpb24sXG4gIHRyYW5zaXRpb246IHRyYW5zaXRpb25fdHJhbnNpdGlvbixcbiAgY2FsbDogc2VsZWN0aW9uX3Byb3RvdHlwZS5jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlcyxcbiAgbm9kZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fcHJvdG90eXBlLnNpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fcHJvdG90eXBlLmVtcHR5LFxuICBlYWNoOiBzZWxlY3Rpb25fcHJvdG90eXBlLmVhY2gsXG4gIG9uOiB0cmFuc2l0aW9uX29uLFxuICBhdHRyOiB0cmFuc2l0aW9uX2F0dHIsXG4gIGF0dHJUd2VlbjogdHJhbnNpdGlvbl9hdHRyVHdlZW4sXG4gIHN0eWxlOiB0cmFuc2l0aW9uX3N0eWxlLFxuICBzdHlsZVR3ZWVuOiB0cmFuc2l0aW9uX3N0eWxlVHdlZW4sXG4gIHRleHQ6IHRyYW5zaXRpb25fdGV4dCxcbiAgdGV4dFR3ZWVuOiB0cmFuc2l0aW9uX3RleHRUd2VlbixcbiAgcmVtb3ZlOiB0cmFuc2l0aW9uX3JlbW92ZSxcbiAgdHdlZW46IHRyYW5zaXRpb25fdHdlZW4sXG4gIGRlbGF5OiB0cmFuc2l0aW9uX2RlbGF5LFxuICBkdXJhdGlvbjogdHJhbnNpdGlvbl9kdXJhdGlvbixcbiAgZWFzZTogdHJhbnNpdGlvbl9lYXNlLFxuICBlYXNlVmFyeWluZzogdHJhbnNpdGlvbl9lYXNlVmFyeWluZyxcbiAgZW5kOiB0cmFuc2l0aW9uX2VuZCxcbiAgW1N5bWJvbC5pdGVyYXRvcl06IHNlbGVjdGlvbl9wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXVxufTtcbiIsImltcG9ydCB7c2VsZWN0b3J9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkID0gdGhpcy5faWQ7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICAgIHNjaGVkdWxlKHN1Ymdyb3VwW2ldLCBuYW1lLCBpZCwgaSwgc3ViZ3JvdXAsIGdldChub2RlLCBpZCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0b3JBbGx9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkID0gdGhpcy5faWQ7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBmb3IgKHZhciBjaGlsZHJlbiA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSwgY2hpbGQsIGluaGVyaXQgPSBnZXQobm9kZSwgaWQpLCBrID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgayA8IGw7ICsraykge1xuICAgICAgICAgIGlmIChjaGlsZCA9IGNoaWxkcmVuW2tdKSB7XG4gICAgICAgICAgICBzY2hlZHVsZShjaGlsZCwgbmFtZSwgaWQsIGssIGNoaWxkcmVuLCBpbmhlcml0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3ViZ3JvdXBzLnB1c2goY2hpbGRyZW4pO1xuICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiaW1wb3J0IHttYXRjaGVyfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIGlmICh0eXBlb2YgbWF0Y2ggIT09IFwiZnVuY3Rpb25cIikgbWF0Y2ggPSBtYXRjaGVyKG1hdGNoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgbWF0Y2guY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpIHtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCB0aGlzLl9uYW1lLCB0aGlzLl9pZCk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRyYW5zaXRpb24pIHtcbiAgaWYgKHRyYW5zaXRpb24uX2lkICE9PSB0aGlzLl9pZCkgdGhyb3cgbmV3IEVycm9yO1xuXG4gIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSB0cmFuc2l0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbiwgbmV3SWR9IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZDAgPSB0aGlzLl9pZCxcbiAgICAgIGlkMSA9IG5ld0lkKCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgdmFyIGluaGVyaXQgPSBnZXQobm9kZSwgaWQwKTtcbiAgICAgICAgc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQxLCBpLCBncm91cCwge1xuICAgICAgICAgIHRpbWU6IGluaGVyaXQudGltZSArIGluaGVyaXQuZGVsYXkgKyBpbmhlcml0LmR1cmF0aW9uLFxuICAgICAgICAgIGRlbGF5OiAwLFxuICAgICAgICAgIGR1cmF0aW9uOiBpbmhlcml0LmR1cmF0aW9uLFxuICAgICAgICAgIGVhc2U6IGluaGVyaXQuZWFzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZDEpO1xufVxuIiwiaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuXG5mdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlMSA9PSBudWxsID8gXCJcIiA6IHZhbHVlMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMudHdlZW4oXCJ0ZXh0XCIsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IHRleHRGdW5jdGlvbih0d2VlblZhbHVlKHRoaXMsIFwidGV4dFwiLCB2YWx1ZSkpXG4gICAgICA6IHRleHRDb25zdGFudCh2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIikpO1xufVxuIiwiZnVuY3Rpb24gcmVtb3ZlRnVuY3Rpb24oaWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLl9fdHJhbnNpdGlvbikgaWYgKCtpICE9PSBpZCkgcmV0dXJuO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm9uKFwiZW5kLnJlbW92ZVwiLCByZW1vdmVGdW5jdGlvbih0aGlzLl9pZCkpO1xufVxuIiwiaW1wb3J0IHtzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGVhc2VWYXJ5aW5nKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh0eXBlb2YgdiAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gICAgc2V0KHRoaXMsIGlkKS5lYXNlID0gdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiB0aGlzLmVhY2goZWFzZVZhcnlpbmcodGhpcy5faWQsIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBvbjAsIG9uMSwgdGhhdCA9IHRoaXMsIGlkID0gdGhhdC5faWQsIHNpemUgPSB0aGF0LnNpemUoKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBjYW5jZWwgPSB7dmFsdWU6IHJlamVjdH0sXG4gICAgICAgIGVuZCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7IGlmICgtLXNpemUgPT09IDApIHJlc29sdmUoKTsgfX07XG5cbiAgICB0aGF0LmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgICBpZiAob24gIT09IG9uMCkge1xuICAgICAgICBvbjEgPSAob24wID0gb24pLmNvcHkoKTtcbiAgICAgICAgb24xLl8uY2FuY2VsLnB1c2goY2FuY2VsKTtcbiAgICAgICAgb24xLl8uaW50ZXJydXB0LnB1c2goY2FuY2VsKTtcbiAgICAgICAgb24xLl8uZW5kLnB1c2goZW5kKTtcbiAgICAgIH1cblxuICAgICAgc2NoZWR1bGUub24gPSBvbjE7XG4gICAgfSk7XG5cbiAgICAvLyBUaGUgc2VsZWN0aW9uIHdhcyBlbXB0eSwgcmVzb2x2ZSBlbmQgaW1tZWRpYXRlbHlcbiAgICBpZiAoc2l6ZSA9PT0gMCkgcmVzb2x2ZSgpO1xuICB9KTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbiwgbmV3SWR9IGZyb20gXCIuLi90cmFuc2l0aW9uL2luZGV4LmpzXCI7XG5pbXBvcnQgc2NoZWR1bGUgZnJvbSBcIi4uL3RyYW5zaXRpb24vc2NoZWR1bGUuanNcIjtcbmltcG9ydCB7ZWFzZUN1YmljSW5PdXR9IGZyb20gXCJkMy1lYXNlXCI7XG5pbXBvcnQge25vd30gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBkZWZhdWx0VGltaW5nID0ge1xuICB0aW1lOiBudWxsLCAvLyBTZXQgb24gdXNlLlxuICBkZWxheTogMCxcbiAgZHVyYXRpb246IDI1MCxcbiAgZWFzZTogZWFzZUN1YmljSW5PdXRcbn07XG5cbmZ1bmN0aW9uIGluaGVyaXQobm9kZSwgaWQpIHtcbiAgdmFyIHRpbWluZztcbiAgd2hpbGUgKCEodGltaW5nID0gbm9kZS5fX3RyYW5zaXRpb24pIHx8ICEodGltaW5nID0gdGltaW5nW2lkXSkpIHtcbiAgICBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGB0cmFuc2l0aW9uICR7aWR9IG5vdCBmb3VuZGApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGltaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBpZCxcbiAgICAgIHRpbWluZztcblxuICBpZiAobmFtZSBpbnN0YW5jZW9mIFRyYW5zaXRpb24pIHtcbiAgICBpZCA9IG5hbWUuX2lkLCBuYW1lID0gbmFtZS5fbmFtZTtcbiAgfSBlbHNlIHtcbiAgICBpZCA9IG5ld0lkKCksICh0aW1pbmcgPSBkZWZhdWx0VGltaW5nKS50aW1lID0gbm93KCksIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZCwgaSwgZ3JvdXAsIHRpbWluZyB8fCBpbmhlcml0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW4odCkge1xuICByZXR1cm4gdCAqIHQgKiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNPdXQodCkge1xuICByZXR1cm4gLS10ICogdCAqIHQgKyAxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IHQgKiB0ICogdCA6ICh0IC09IDIpICogdCAqIHQgKyAyKSAvIDI7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnRlcnJ1cHQgZnJvbSBcIi4vaW50ZXJydXB0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvbi5qc1wiO1xuXG5zZWxlY3Rpb24ucHJvdG90eXBlLmludGVycnVwdCA9IHNlbGVjdGlvbl9pbnRlcnJ1cHQ7XG5zZWxlY3Rpb24ucHJvdG90eXBlLnRyYW5zaXRpb24gPSBzZWxlY3Rpb25fdHJhbnNpdGlvbjtcbiIsImltcG9ydCBpbnRlcnJ1cHQgZnJvbSBcIi4uL2ludGVycnVwdC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgaW50ZXJydXB0KHRoaXMsIG5hbWUpO1xuICB9KTtcbn1cbiIsImltcG9ydCB7U1RBUlRJTkcsIEVORElORywgRU5ERUR9IGZyb20gXCIuL3RyYW5zaXRpb24vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSkge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICBzY2hlZHVsZSxcbiAgICAgIGFjdGl2ZSxcbiAgICAgIGVtcHR5ID0gdHJ1ZSxcbiAgICAgIGk7XG5cbiAgaWYgKCFzY2hlZHVsZXMpIHJldHVybjtcblxuICBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuXG4gIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICBpZiAoKHNjaGVkdWxlID0gc2NoZWR1bGVzW2ldKS5uYW1lICE9PSBuYW1lKSB7IGVtcHR5ID0gZmFsc2U7IGNvbnRpbnVlOyB9XG4gICAgYWN0aXZlID0gc2NoZWR1bGUuc3RhdGUgPiBTVEFSVElORyAmJiBzY2hlZHVsZS5zdGF0ZSA8IEVORElORztcbiAgICBzY2hlZHVsZS5zdGF0ZSA9IEVOREVEO1xuICAgIHNjaGVkdWxlLnRpbWVyLnN0b3AoKTtcbiAgICBzY2hlZHVsZS5vbi5jYWxsKGFjdGl2ZSA/IFwiaW50ZXJydXB0XCIgOiBcImNhbmNlbFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzY2hlZHVsZS5pbmRleCwgc2NoZWR1bGUuZ3JvdXApO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gIH1cblxuICBpZiAoZW1wdHkpIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbn1cbiIsImNvbnN0IHBpID0gTWF0aC5QSSxcbiAgICB0YXUgPSAyICogcGksXG4gICAgZXBzaWxvbiA9IDFlLTYsXG4gICAgdGF1RXBzaWxvbiA9IHRhdSAtIGVwc2lsb247XG5cbmZ1bmN0aW9uIFBhdGgoKSB7XG4gIHRoaXMuX3gwID0gdGhpcy5feTAgPSAvLyBzdGFydCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5feDEgPSB0aGlzLl95MSA9IG51bGw7IC8vIGVuZCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5fID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gcGF0aCgpIHtcbiAgcmV0dXJuIG5ldyBQYXRoO1xufVxuXG5QYXRoLnByb3RvdHlwZSA9IHBhdGgucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUGF0aCxcbiAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl94MSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5feDEgPSB0aGlzLl94MCwgdGhpcy5feTEgPSB0aGlzLl95MDtcbiAgICAgIHRoaXMuXyArPSBcIlpcIjtcbiAgICB9XG4gIH0sXG4gIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkxcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBxdWFkcmF0aWNDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJRXCIgKyAoK3gxKSArIFwiLFwiICsgKCt5MSkgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkNcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKCt4MikgKyBcIixcIiArICgreTIpICsgXCIsXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgYXJjVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCByKSB7XG4gICAgeDEgPSAreDEsIHkxID0gK3kxLCB4MiA9ICt4MiwgeTIgPSAreTIsIHIgPSArcjtcbiAgICB2YXIgeDAgPSB0aGlzLl94MSxcbiAgICAgICAgeTAgPSB0aGlzLl95MSxcbiAgICAgICAgeDIxID0geDIgLSB4MSxcbiAgICAgICAgeTIxID0geTIgLSB5MSxcbiAgICAgICAgeDAxID0geDAgLSB4MSxcbiAgICAgICAgeTAxID0geTAgLSB5MSxcbiAgICAgICAgbDAxXzIgPSB4MDEgKiB4MDEgKyB5MDEgKiB5MDE7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDEseTEpLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3IsIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4MCx5MCk/IERvIG5vdGhpbmcuXG4gICAgZWxzZSBpZiAoIShsMDFfMiA+IGVwc2lsb24pKTtcblxuICAgIC8vIE9yLCBhcmUgKHgwLHkwKSwgKHgxLHkxKSBhbmQgKHgyLHkyKSBjb2xsaW5lYXI/XG4gICAgLy8gRXF1aXZhbGVudGx5LCBpcyAoeDEseTEpIGNvaW5jaWRlbnQgd2l0aCAoeDIseTIpP1xuICAgIC8vIE9yLCBpcyB0aGUgcmFkaXVzIHplcm8/IExpbmUgdG8gKHgxLHkxKS5cbiAgICBlbHNlIGlmICghKE1hdGguYWJzKHkwMSAqIHgyMSAtIHkyMSAqIHgwMSkgPiBlcHNpbG9uKSB8fCAhcikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlLCBkcmF3IGFuIGFyYyFcbiAgICBlbHNlIHtcbiAgICAgIHZhciB4MjAgPSB4MiAtIHgwLFxuICAgICAgICAgIHkyMCA9IHkyIC0geTAsXG4gICAgICAgICAgbDIxXzIgPSB4MjEgKiB4MjEgKyB5MjEgKiB5MjEsXG4gICAgICAgICAgbDIwXzIgPSB4MjAgKiB4MjAgKyB5MjAgKiB5MjAsXG4gICAgICAgICAgbDIxID0gTWF0aC5zcXJ0KGwyMV8yKSxcbiAgICAgICAgICBsMDEgPSBNYXRoLnNxcnQobDAxXzIpLFxuICAgICAgICAgIGwgPSByICogTWF0aC50YW4oKHBpIC0gTWF0aC5hY29zKChsMjFfMiArIGwwMV8yIC0gbDIwXzIpIC8gKDIgKiBsMjEgKiBsMDEpKSkgLyAyKSxcbiAgICAgICAgICB0MDEgPSBsIC8gbDAxLFxuICAgICAgICAgIHQyMSA9IGwgLyBsMjE7XG5cbiAgICAgIC8vIElmIHRoZSBzdGFydCB0YW5nZW50IGlzIG5vdCBjb2luY2lkZW50IHdpdGggKHgwLHkwKSwgbGluZSB0by5cbiAgICAgIGlmIChNYXRoLmFicyh0MDEgLSAxKSA+IGVwc2lsb24pIHtcbiAgICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHgxICsgdDAxICogeDAxKSArIFwiLFwiICsgKHkxICsgdDAxICogeTAxKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMCxcIiArICgrKHkwMSAqIHgyMCA+IHgwMSAqIHkyMCkpICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MSArIHQyMSAqIHgyMSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxICsgdDIxICogeTIxKTtcbiAgICB9XG4gIH0sXG4gIGFyYzogZnVuY3Rpb24oeCwgeSwgciwgYTAsIGExLCBjY3cpIHtcbiAgICB4ID0gK3gsIHkgPSAreSwgciA9ICtyLCBjY3cgPSAhIWNjdztcbiAgICB2YXIgZHggPSByICogTWF0aC5jb3MoYTApLFxuICAgICAgICBkeSA9IHIgKiBNYXRoLnNpbihhMCksXG4gICAgICAgIHgwID0geCArIGR4LFxuICAgICAgICB5MCA9IHkgKyBkeSxcbiAgICAgICAgY3cgPSAxIF4gY2N3LFxuICAgICAgICBkYSA9IGNjdyA/IGEwIC0gYTEgOiBhMSAtIGEwO1xuXG4gICAgLy8gSXMgdGhlIHJhZGl1cyBuZWdhdGl2ZT8gRXJyb3IuXG4gICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXM6IFwiICsgcik7XG5cbiAgICAvLyBJcyB0aGlzIHBhdGggZW1wdHk/IE1vdmUgdG8gKHgwLHkwKS5cbiAgICBpZiAodGhpcy5feDEgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuXyArPSBcIk1cIiArIHgwICsgXCIsXCIgKyB5MDtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgwLHkwKSBub3QgY29pbmNpZGVudCB3aXRoIHRoZSBwcmV2aW91cyBwb2ludD8gTGluZSB0byAoeDAseTApLlxuICAgIGVsc2UgaWYgKE1hdGguYWJzKHRoaXMuX3gxIC0geDApID4gZXBzaWxvbiB8fCBNYXRoLmFicyh0aGlzLl95MSAtIHkwKSA+IGVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkxcIiArIHgwICsgXCIsXCIgKyB5MDtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBlbXB0eT8gV2XigJlyZSBkb25lLlxuICAgIGlmICghcikgcmV0dXJuO1xuXG4gICAgLy8gRG9lcyB0aGUgYW5nbGUgZ28gdGhlIHdyb25nIHdheT8gRmxpcCB0aGUgZGlyZWN0aW9uLlxuICAgIGlmIChkYSA8IDApIGRhID0gZGEgJSB0YXUgKyB0YXU7XG5cbiAgICAvLyBJcyB0aGlzIGEgY29tcGxldGUgY2lyY2xlPyBEcmF3IHR3byBhcmNzIHRvIGNvbXBsZXRlIHRoZSBjaXJjbGUuXG4gICAgaWYgKGRhID4gdGF1RXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAoeCAtIGR4KSArIFwiLFwiICsgKHkgLSBkeSkgKyBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDEsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geDApICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MCk7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhpcyBhcmMgbm9uLWVtcHR5PyBEcmF3IGFuIGFyYyFcbiAgICBlbHNlIGlmIChkYSA+IGVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLFwiICsgKCsoZGEgPj0gcGkpKSArIFwiLFwiICsgY3cgKyBcIixcIiArICh0aGlzLl94MSA9IHggKyByICogTWF0aC5jb3MoYTEpKSArIFwiLFwiICsgKHRoaXMuX3kxID0geSArIHIgKiBNYXRoLnNpbihhMSkpO1xuICAgIH1cbiAgfSxcbiAgcmVjdDogZnVuY3Rpb24oeCwgeSwgdywgaCkge1xuICAgIHRoaXMuXyArPSBcIk1cIiArICh0aGlzLl94MCA9IHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTAgPSB0aGlzLl95MSA9ICt5KSArIFwiaFwiICsgKCt3KSArIFwidlwiICsgKCtoKSArIFwiaFwiICsgKC13KSArIFwiWlwiO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuXztcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcGF0aDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIE1hdGguYWJzKHggPSBNYXRoLnJvdW5kKHgpKSA+PSAxZTIxXG4gICAgICA/IHgudG9Mb2NhbGVTdHJpbmcoXCJlblwiKS5yZXBsYWNlKC8sL2csIFwiXCIpXG4gICAgICA6IHgudG9TdHJpbmcoMTApO1xufVxuXG4vLyBDb21wdXRlcyB0aGUgZGVjaW1hbCBjb2VmZmljaWVudCBhbmQgZXhwb25lbnQgb2YgdGhlIHNwZWNpZmllZCBudW1iZXIgeCB3aXRoXG4vLyBzaWduaWZpY2FudCBkaWdpdHMgcCwgd2hlcmUgeCBpcyBwb3NpdGl2ZSBhbmQgcCBpcyBpbiBbMSwgMjFdIG9yIHVuZGVmaW5lZC5cbi8vIEZvciBleGFtcGxlLCBmb3JtYXREZWNpbWFsUGFydHMoMS4yMykgcmV0dXJucyBbXCIxMjNcIiwgMF0uXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RGVjaW1hbFBhcnRzKHgsIHApIHtcbiAgaWYgKChpID0gKHggPSBwID8geC50b0V4cG9uZW50aWFsKHAgLSAxKSA6IHgudG9FeHBvbmVudGlhbCgpKS5pbmRleE9mKFwiZVwiKSkgPCAwKSByZXR1cm4gbnVsbDsgLy8gTmFOLCDCsUluZmluaXR5XG4gIHZhciBpLCBjb2VmZmljaWVudCA9IHguc2xpY2UoMCwgaSk7XG5cbiAgLy8gVGhlIHN0cmluZyByZXR1cm5lZCBieSB0b0V4cG9uZW50aWFsIGVpdGhlciBoYXMgdGhlIGZvcm0gXFxkXFwuXFxkK2VbLStdXFxkK1xuICAvLyAoZS5nLiwgMS4yZSszKSBvciB0aGUgZm9ybSBcXGRlWy0rXVxcZCsgKGUuZy4sIDFlKzMpLlxuICByZXR1cm4gW1xuICAgIGNvZWZmaWNpZW50Lmxlbmd0aCA+IDEgPyBjb2VmZmljaWVudFswXSArIGNvZWZmaWNpZW50LnNsaWNlKDIpIDogY29lZmZpY2llbnQsXG4gICAgK3guc2xpY2UoaSArIDEpXG4gIF07XG59XG4iLCJpbXBvcnQge2Zvcm1hdERlY2ltYWxQYXJ0c30gZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4ID0gZm9ybWF0RGVjaW1hbFBhcnRzKE1hdGguYWJzKHgpKSwgeCA/IHhbMV0gOiBOYU47XG59XG4iLCIvLyBbW2ZpbGxdYWxpZ25dW3NpZ25dW3N5bWJvbF1bMF1bd2lkdGhdWyxdWy5wcmVjaXNpb25dW35dW3R5cGVdXG52YXIgcmUgPSAvXig/OiguKT8oWzw+PV5dKSk/KFsrXFwtKCBdKT8oWyQjXSk/KDApPyhcXGQrKT8oLCk/KFxcLlxcZCspPyh+KT8oW2EteiVdKT8kL2k7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgaWYgKCEobWF0Y2ggPSByZS5leGVjKHNwZWNpZmllcikpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGZvcm1hdDogXCIgKyBzcGVjaWZpZXIpO1xuICB2YXIgbWF0Y2g7XG4gIHJldHVybiBuZXcgRm9ybWF0U3BlY2lmaWVyKHtcbiAgICBmaWxsOiBtYXRjaFsxXSxcbiAgICBhbGlnbjogbWF0Y2hbMl0sXG4gICAgc2lnbjogbWF0Y2hbM10sXG4gICAgc3ltYm9sOiBtYXRjaFs0XSxcbiAgICB6ZXJvOiBtYXRjaFs1XSxcbiAgICB3aWR0aDogbWF0Y2hbNl0sXG4gICAgY29tbWE6IG1hdGNoWzddLFxuICAgIHByZWNpc2lvbjogbWF0Y2hbOF0gJiYgbWF0Y2hbOF0uc2xpY2UoMSksXG4gICAgdHJpbTogbWF0Y2hbOV0sXG4gICAgdHlwZTogbWF0Y2hbMTBdXG4gIH0pO1xufVxuXG5mb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlID0gRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZTsgLy8gaW5zdGFuY2VvZlxuXG5leHBvcnQgZnVuY3Rpb24gRm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICB0aGlzLmZpbGwgPSBzcGVjaWZpZXIuZmlsbCA9PT0gdW5kZWZpbmVkID8gXCIgXCIgOiBzcGVjaWZpZXIuZmlsbCArIFwiXCI7XG4gIHRoaXMuYWxpZ24gPSBzcGVjaWZpZXIuYWxpZ24gPT09IHVuZGVmaW5lZCA/IFwiPlwiIDogc3BlY2lmaWVyLmFsaWduICsgXCJcIjtcbiAgdGhpcy5zaWduID0gc3BlY2lmaWVyLnNpZ24gPT09IHVuZGVmaW5lZCA/IFwiLVwiIDogc3BlY2lmaWVyLnNpZ24gKyBcIlwiO1xuICB0aGlzLnN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBzcGVjaWZpZXIuc3ltYm9sICsgXCJcIjtcbiAgdGhpcy56ZXJvID0gISFzcGVjaWZpZXIuemVybztcbiAgdGhpcy53aWR0aCA9IHNwZWNpZmllci53aWR0aCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogK3NwZWNpZmllci53aWR0aDtcbiAgdGhpcy5jb21tYSA9ICEhc3BlY2lmaWVyLmNvbW1hO1xuICB0aGlzLnByZWNpc2lvbiA9IHNwZWNpZmllci5wcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6ICtzcGVjaWZpZXIucHJlY2lzaW9uO1xuICB0aGlzLnRyaW0gPSAhIXNwZWNpZmllci50cmltO1xuICB0aGlzLnR5cGUgPSBzcGVjaWZpZXIudHlwZSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IHNwZWNpZmllci50eXBlICsgXCJcIjtcbn1cblxuRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5maWxsXG4gICAgICArIHRoaXMuYWxpZ25cbiAgICAgICsgdGhpcy5zaWduXG4gICAgICArIHRoaXMuc3ltYm9sXG4gICAgICArICh0aGlzLnplcm8gPyBcIjBcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLndpZHRoID09PSB1bmRlZmluZWQgPyBcIlwiIDogTWF0aC5tYXgoMSwgdGhpcy53aWR0aCB8IDApKVxuICAgICAgKyAodGhpcy5jb21tYSA/IFwiLFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMucHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyBcIlwiIDogXCIuXCIgKyBNYXRoLm1heCgwLCB0aGlzLnByZWNpc2lvbiB8IDApKVxuICAgICAgKyAodGhpcy50cmltID8gXCJ+XCIgOiBcIlwiKVxuICAgICAgKyB0aGlzLnR5cGU7XG59O1xuIiwiaW1wb3J0IHtmb3JtYXREZWNpbWFsUGFydHN9IGZyb20gXCIuL2Zvcm1hdERlY2ltYWwuanNcIjtcblxuZXhwb3J0IHZhciBwcmVmaXhFeHBvbmVudDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICB2YXIgZCA9IGZvcm1hdERlY2ltYWxQYXJ0cyh4LCBwKTtcbiAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICBleHBvbmVudCA9IGRbMV0sXG4gICAgICBpID0gZXhwb25lbnQgLSAocHJlZml4RXhwb25lbnQgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCAvIDMpKSkgKiAzKSArIDEsXG4gICAgICBuID0gY29lZmZpY2llbnQubGVuZ3RoO1xuICByZXR1cm4gaSA9PT0gbiA/IGNvZWZmaWNpZW50XG4gICAgICA6IGkgPiBuID8gY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoaSAtIG4gKyAxKS5qb2luKFwiMFwiKVxuICAgICAgOiBpID4gMCA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGkpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShpKVxuICAgICAgOiBcIjAuXCIgKyBuZXcgQXJyYXkoMSAtIGkpLmpvaW4oXCIwXCIpICsgZm9ybWF0RGVjaW1hbFBhcnRzKHgsIE1hdGgubWF4KDAsIHAgKyBpIC0gMSkpWzBdOyAvLyBsZXNzIHRoYW4gMXkhXG59XG4iLCJpbXBvcnQge2Zvcm1hdERlY2ltYWxQYXJ0c30gZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbFBhcnRzKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXTtcbiAgcmV0dXJuIGV4cG9uZW50IDwgMCA/IFwiMC5cIiArIG5ldyBBcnJheSgtZXhwb25lbnQpLmpvaW4oXCIwXCIpICsgY29lZmZpY2llbnRcbiAgICAgIDogY29lZmZpY2llbnQubGVuZ3RoID4gZXhwb25lbnQgKyAxID8gY29lZmZpY2llbnQuc2xpY2UoMCwgZXhwb25lbnQgKyAxKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoZXhwb25lbnQgKyAxKVxuICAgICAgOiBjb2VmZmljaWVudCArIG5ldyBBcnJheShleHBvbmVudCAtIGNvZWZmaWNpZW50Lmxlbmd0aCArIDIpLmpvaW4oXCIwXCIpO1xufVxuIiwiaW1wb3J0IGZvcm1hdERlY2ltYWwgZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuaW1wb3J0IGZvcm1hdFByZWZpeEF1dG8gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0by5qc1wiO1xuaW1wb3J0IGZvcm1hdFJvdW5kZWQgZnJvbSBcIi4vZm9ybWF0Um91bmRlZC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFwiJVwiOiAoeCwgcCkgPT4gKHggKiAxMDApLnRvRml4ZWQocCksXG4gIFwiYlwiOiAoeCkgPT4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygyKSxcbiAgXCJjXCI6ICh4KSA9PiB4ICsgXCJcIixcbiAgXCJkXCI6IGZvcm1hdERlY2ltYWwsXG4gIFwiZVwiOiAoeCwgcCkgPT4geC50b0V4cG9uZW50aWFsKHApLFxuICBcImZcIjogKHgsIHApID0+IHgudG9GaXhlZChwKSxcbiAgXCJnXCI6ICh4LCBwKSA9PiB4LnRvUHJlY2lzaW9uKHApLFxuICBcIm9cIjogKHgpID0+IE1hdGgucm91bmQoeCkudG9TdHJpbmcoOCksXG4gIFwicFwiOiAoeCwgcCkgPT4gZm9ybWF0Um91bmRlZCh4ICogMTAwLCBwKSxcbiAgXCJyXCI6IGZvcm1hdFJvdW5kZWQsXG4gIFwic1wiOiBmb3JtYXRQcmVmaXhBdXRvLFxuICBcIlhcIjogKHgpID0+IE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCksXG4gIFwieFwiOiAoeCkgPT4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNilcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5pbXBvcnQgZm9ybWF0R3JvdXAgZnJvbSBcIi4vZm9ybWF0R3JvdXAuanNcIjtcbmltcG9ydCBmb3JtYXROdW1lcmFscyBmcm9tIFwiLi9mb3JtYXROdW1lcmFscy5qc1wiO1xuaW1wb3J0IGZvcm1hdFNwZWNpZmllciBmcm9tIFwiLi9mb3JtYXRTcGVjaWZpZXIuanNcIjtcbmltcG9ydCBmb3JtYXRUcmltIGZyb20gXCIuL2Zvcm1hdFRyaW0uanNcIjtcbmltcG9ydCBmb3JtYXRUeXBlcyBmcm9tIFwiLi9mb3JtYXRUeXBlcy5qc1wiO1xuaW1wb3J0IHtwcmVmaXhFeHBvbmVudH0gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0by5qc1wiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5LmpzXCI7XG5cbnZhciBtYXAgPSBBcnJheS5wcm90b3R5cGUubWFwLFxuICAgIHByZWZpeGVzID0gW1wieVwiLFwielwiLFwiYVwiLFwiZlwiLFwicFwiLFwiblwiLFwiwrVcIixcIm1cIixcIlwiLFwia1wiLFwiTVwiLFwiR1wiLFwiVFwiLFwiUFwiLFwiRVwiLFwiWlwiLFwiWVwiXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obG9jYWxlKSB7XG4gIHZhciBncm91cCA9IGxvY2FsZS5ncm91cGluZyA9PT0gdW5kZWZpbmVkIHx8IGxvY2FsZS50aG91c2FuZHMgPT09IHVuZGVmaW5lZCA/IGlkZW50aXR5IDogZm9ybWF0R3JvdXAobWFwLmNhbGwobG9jYWxlLmdyb3VwaW5nLCBOdW1iZXIpLCBsb2NhbGUudGhvdXNhbmRzICsgXCJcIiksXG4gICAgICBjdXJyZW5jeVByZWZpeCA9IGxvY2FsZS5jdXJyZW5jeSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IGxvY2FsZS5jdXJyZW5jeVswXSArIFwiXCIsXG4gICAgICBjdXJyZW5jeVN1ZmZpeCA9IGxvY2FsZS5jdXJyZW5jeSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IGxvY2FsZS5jdXJyZW5jeVsxXSArIFwiXCIsXG4gICAgICBkZWNpbWFsID0gbG9jYWxlLmRlY2ltYWwgPT09IHVuZGVmaW5lZCA/IFwiLlwiIDogbG9jYWxlLmRlY2ltYWwgKyBcIlwiLFxuICAgICAgbnVtZXJhbHMgPSBsb2NhbGUubnVtZXJhbHMgPT09IHVuZGVmaW5lZCA/IGlkZW50aXR5IDogZm9ybWF0TnVtZXJhbHMobWFwLmNhbGwobG9jYWxlLm51bWVyYWxzLCBTdHJpbmcpKSxcbiAgICAgIHBlcmNlbnQgPSBsb2NhbGUucGVyY2VudCA9PT0gdW5kZWZpbmVkID8gXCIlXCIgOiBsb2NhbGUucGVyY2VudCArIFwiXCIsXG4gICAgICBtaW51cyA9IGxvY2FsZS5taW51cyA9PT0gdW5kZWZpbmVkID8gXCLiiJJcIiA6IGxvY2FsZS5taW51cyArIFwiXCIsXG4gICAgICBuYW4gPSBsb2NhbGUubmFuID09PSB1bmRlZmluZWQgPyBcIk5hTlwiIDogbG9jYWxlLm5hbiArIFwiXCI7XG5cbiAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllcikge1xuICAgIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpO1xuXG4gICAgdmFyIGZpbGwgPSBzcGVjaWZpZXIuZmlsbCxcbiAgICAgICAgYWxpZ24gPSBzcGVjaWZpZXIuYWxpZ24sXG4gICAgICAgIHNpZ24gPSBzcGVjaWZpZXIuc2lnbixcbiAgICAgICAgc3ltYm9sID0gc3BlY2lmaWVyLnN5bWJvbCxcbiAgICAgICAgemVybyA9IHNwZWNpZmllci56ZXJvLFxuICAgICAgICB3aWR0aCA9IHNwZWNpZmllci53aWR0aCxcbiAgICAgICAgY29tbWEgPSBzcGVjaWZpZXIuY29tbWEsXG4gICAgICAgIHByZWNpc2lvbiA9IHNwZWNpZmllci5wcmVjaXNpb24sXG4gICAgICAgIHRyaW0gPSBzcGVjaWZpZXIudHJpbSxcbiAgICAgICAgdHlwZSA9IHNwZWNpZmllci50eXBlO1xuXG4gICAgLy8gVGhlIFwiblwiIHR5cGUgaXMgYW4gYWxpYXMgZm9yIFwiLGdcIi5cbiAgICBpZiAodHlwZSA9PT0gXCJuXCIpIGNvbW1hID0gdHJ1ZSwgdHlwZSA9IFwiZ1wiO1xuXG4gICAgLy8gVGhlIFwiXCIgdHlwZSwgYW5kIGFueSBpbnZhbGlkIHR5cGUsIGlzIGFuIGFsaWFzIGZvciBcIi4xMn5nXCIuXG4gICAgZWxzZSBpZiAoIWZvcm1hdFR5cGVzW3R5cGVdKSBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCAmJiAocHJlY2lzaW9uID0gMTIpLCB0cmltID0gdHJ1ZSwgdHlwZSA9IFwiZ1wiO1xuXG4gICAgLy8gSWYgemVybyBmaWxsIGlzIHNwZWNpZmllZCwgcGFkZGluZyBnb2VzIGFmdGVyIHNpZ24gYW5kIGJlZm9yZSBkaWdpdHMuXG4gICAgaWYgKHplcm8gfHwgKGZpbGwgPT09IFwiMFwiICYmIGFsaWduID09PSBcIj1cIikpIHplcm8gPSB0cnVlLCBmaWxsID0gXCIwXCIsIGFsaWduID0gXCI9XCI7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAvLyBGb3IgU0ktcHJlZml4LCB0aGUgc3VmZml4IGlzIGxhemlseSBjb21wdXRlZC5cbiAgICB2YXIgcHJlZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5UHJlZml4IDogc3ltYm9sID09PSBcIiNcIiAmJiAvW2JveFhdLy50ZXN0KHR5cGUpID8gXCIwXCIgKyB0eXBlLnRvTG93ZXJDYXNlKCkgOiBcIlwiLFxuICAgICAgICBzdWZmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lTdWZmaXggOiAvWyVwXS8udGVzdCh0eXBlKSA/IHBlcmNlbnQgOiBcIlwiO1xuXG4gICAgLy8gV2hhdCBmb3JtYXQgZnVuY3Rpb24gc2hvdWxkIHdlIHVzZT9cbiAgICAvLyBJcyB0aGlzIGFuIGludGVnZXIgdHlwZT9cbiAgICAvLyBDYW4gdGhpcyB0eXBlIGdlbmVyYXRlIGV4cG9uZW50aWFsIG5vdGF0aW9uP1xuICAgIHZhciBmb3JtYXRUeXBlID0gZm9ybWF0VHlwZXNbdHlwZV0sXG4gICAgICAgIG1heWJlU3VmZml4ID0gL1tkZWZncHJzJV0vLnRlc3QodHlwZSk7XG5cbiAgICAvLyBTZXQgdGhlIGRlZmF1bHQgcHJlY2lzaW9uIGlmIG5vdCBzcGVjaWZpZWQsXG4gICAgLy8gb3IgY2xhbXAgdGhlIHNwZWNpZmllZCBwcmVjaXNpb24gdG8gdGhlIHN1cHBvcnRlZCByYW5nZS5cbiAgICAvLyBGb3Igc2lnbmlmaWNhbnQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFsxLCAyMV0uXG4gICAgLy8gRm9yIGZpeGVkIHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMCwgMjBdLlxuICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gNlxuICAgICAgICA6IC9bZ3Byc10vLnRlc3QodHlwZSkgPyBNYXRoLm1heCgxLCBNYXRoLm1pbigyMSwgcHJlY2lzaW9uKSlcbiAgICAgICAgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigyMCwgcHJlY2lzaW9uKSk7XG5cbiAgICBmdW5jdGlvbiBmb3JtYXQodmFsdWUpIHtcbiAgICAgIHZhciB2YWx1ZVByZWZpeCA9IHByZWZpeCxcbiAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IHN1ZmZpeCxcbiAgICAgICAgICBpLCBuLCBjO1xuXG4gICAgICBpZiAodHlwZSA9PT0gXCJjXCIpIHtcbiAgICAgICAgdmFsdWVTdWZmaXggPSBmb3JtYXRUeXBlKHZhbHVlKSArIHZhbHVlU3VmZml4O1xuICAgICAgICB2YWx1ZSA9IFwiXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9ICt2YWx1ZTtcblxuICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIHNpZ24uIC0wIGlzIG5vdCBsZXNzIHRoYW4gMCwgYnV0IDEgLyAtMCBpcyFcbiAgICAgICAgdmFyIHZhbHVlTmVnYXRpdmUgPSB2YWx1ZSA8IDAgfHwgMSAvIHZhbHVlIDwgMDtcblxuICAgICAgICAvLyBQZXJmb3JtIHRoZSBpbml0aWFsIGZvcm1hdHRpbmcuXG4gICAgICAgIHZhbHVlID0gaXNOYU4odmFsdWUpID8gbmFuIDogZm9ybWF0VHlwZShNYXRoLmFicyh2YWx1ZSksIHByZWNpc2lvbik7XG5cbiAgICAgICAgLy8gVHJpbSBpbnNpZ25pZmljYW50IHplcm9zLlxuICAgICAgICBpZiAodHJpbSkgdmFsdWUgPSBmb3JtYXRUcmltKHZhbHVlKTtcblxuICAgICAgICAvLyBJZiBhIG5lZ2F0aXZlIHZhbHVlIHJvdW5kcyB0byB6ZXJvIGFmdGVyIGZvcm1hdHRpbmcsIGFuZCBubyBleHBsaWNpdCBwb3NpdGl2ZSBzaWduIGlzIHJlcXVlc3RlZCwgaGlkZSB0aGUgc2lnbi5cbiAgICAgICAgaWYgKHZhbHVlTmVnYXRpdmUgJiYgK3ZhbHVlID09PSAwICYmIHNpZ24gIT09IFwiK1wiKSB2YWx1ZU5lZ2F0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgICAgIHZhbHVlUHJlZml4ID0gKHZhbHVlTmVnYXRpdmUgPyAoc2lnbiA9PT0gXCIoXCIgPyBzaWduIDogbWludXMpIDogc2lnbiA9PT0gXCItXCIgfHwgc2lnbiA9PT0gXCIoXCIgPyBcIlwiIDogc2lnbikgKyB2YWx1ZVByZWZpeDtcbiAgICAgICAgdmFsdWVTdWZmaXggPSAodHlwZSA9PT0gXCJzXCIgPyBwcmVmaXhlc1s4ICsgcHJlZml4RXhwb25lbnQgLyAzXSA6IFwiXCIpICsgdmFsdWVTdWZmaXggKyAodmFsdWVOZWdhdGl2ZSAmJiBzaWduID09PSBcIihcIiA/IFwiKVwiIDogXCJcIik7XG5cbiAgICAgICAgLy8gQnJlYWsgdGhlIGZvcm1hdHRlZCB2YWx1ZSBpbnRvIHRoZSBpbnRlZ2VyIOKAnHZhbHVl4oCdIHBhcnQgdGhhdCBjYW4gYmVcbiAgICAgICAgLy8gZ3JvdXBlZCwgYW5kIGZyYWN0aW9uYWwgb3IgZXhwb25lbnRpYWwg4oCcc3VmZml44oCdIHBhcnQgdGhhdCBpcyBub3QuXG4gICAgICAgIGlmIChtYXliZVN1ZmZpeCkge1xuICAgICAgICAgIGkgPSAtMSwgbiA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgICAgaWYgKGMgPSB2YWx1ZS5jaGFyQ29kZUF0KGkpLCA0OCA+IGMgfHwgYyA+IDU3KSB7XG4gICAgICAgICAgICAgIHZhbHVlU3VmZml4ID0gKGMgPT09IDQ2ID8gZGVjaW1hbCArIHZhbHVlLnNsaWNlKGkgKyAxKSA6IHZhbHVlLnNsaWNlKGkpKSArIHZhbHVlU3VmZml4O1xuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIG5vdCBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBiZWZvcmUgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiAhemVybykgdmFsdWUgPSBncm91cCh2YWx1ZSwgSW5maW5pdHkpO1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBwYWRkaW5nLlxuICAgICAgdmFyIGxlbmd0aCA9IHZhbHVlUHJlZml4Lmxlbmd0aCArIHZhbHVlLmxlbmd0aCArIHZhbHVlU3VmZml4Lmxlbmd0aCxcbiAgICAgICAgICBwYWRkaW5nID0gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpIDogXCJcIjtcblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGFmdGVyIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgemVybykgdmFsdWUgPSBncm91cChwYWRkaW5nICsgdmFsdWUsIHBhZGRpbmcubGVuZ3RoID8gd2lkdGggLSB2YWx1ZVN1ZmZpeC5sZW5ndGggOiBJbmZpbml0eSksIHBhZGRpbmcgPSBcIlwiO1xuXG4gICAgICAvLyBSZWNvbnN0cnVjdCB0aGUgZmluYWwgb3V0cHV0IGJhc2VkIG9uIHRoZSBkZXNpcmVkIGFsaWdubWVudC5cbiAgICAgIHN3aXRjaCAoYWxpZ24pIHtcbiAgICAgICAgY2FzZSBcIjxcIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nOyBicmVhaztcbiAgICAgICAgY2FzZSBcIj1cIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHBhZGRpbmcgKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgICAgY2FzZSBcIl5cIjogdmFsdWUgPSBwYWRkaW5nLnNsaWNlKDAsIGxlbmd0aCA9IHBhZGRpbmcubGVuZ3RoID4+IDEpICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZy5zbGljZShsZW5ndGgpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDogdmFsdWUgPSBwYWRkaW5nICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bWVyYWxzKHZhbHVlKTtcbiAgICB9XG5cbiAgICBmb3JtYXQudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzcGVjaWZpZXIgKyBcIlwiO1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9ybWF0O1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpIHtcbiAgICB2YXIgZiA9IG5ld0Zvcm1hdCgoc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciksIHNwZWNpZmllci50eXBlID0gXCJmXCIsIHNwZWNpZmllcikpLFxuICAgICAgICBlID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMsXG4gICAgICAgIGsgPSBNYXRoLnBvdygxMCwgLWUpLFxuICAgICAgICBwcmVmaXggPSBwcmVmaXhlc1s4ICsgZSAvIDNdO1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGYoayAqIHZhbHVlKSArIHByZWZpeDtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IG5ld0Zvcm1hdCxcbiAgICBmb3JtYXRQcmVmaXg6IGZvcm1hdFByZWZpeFxuICB9O1xufVxuIiwiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGUuanNcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgZm9ybWF0O1xuZXhwb3J0IHZhciBmb3JtYXRQcmVmaXg7XG5cbmRlZmF1bHRMb2NhbGUoe1xuICB0aG91c2FuZHM6IFwiLFwiLFxuICBncm91cGluZzogWzNdLFxuICBjdXJyZW5jeTogW1wiJFwiLCBcIlwiXVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUoZGVmaW5pdGlvbikge1xuICBsb2NhbGUgPSBmb3JtYXRMb2NhbGUoZGVmaW5pdGlvbik7XG4gIGZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gIGZvcm1hdFByZWZpeCA9IGxvY2FsZS5mb3JtYXRQcmVmaXg7XG4gIHJldHVybiBsb2NhbGU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihncm91cGluZywgdGhvdXNhbmRzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgd2lkdGgpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmxlbmd0aCxcbiAgICAgICAgdCA9IFtdLFxuICAgICAgICBqID0gMCxcbiAgICAgICAgZyA9IGdyb3VwaW5nWzBdLFxuICAgICAgICBsZW5ndGggPSAwO1xuXG4gICAgd2hpbGUgKGkgPiAwICYmIGcgPiAwKSB7XG4gICAgICBpZiAobGVuZ3RoICsgZyArIDEgPiB3aWR0aCkgZyA9IE1hdGgubWF4KDEsIHdpZHRoIC0gbGVuZ3RoKTtcbiAgICAgIHQucHVzaCh2YWx1ZS5zdWJzdHJpbmcoaSAtPSBnLCBpICsgZykpO1xuICAgICAgaWYgKChsZW5ndGggKz0gZyArIDEpID4gd2lkdGgpIGJyZWFrO1xuICAgICAgZyA9IGdyb3VwaW5nW2ogPSAoaiArIDEpICUgZ3JvdXBpbmcubGVuZ3RoXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdC5yZXZlcnNlKCkuam9pbih0aG91c2FuZHMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obnVtZXJhbHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1swLTldL2csIGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJldHVybiBudW1lcmFsc1sraV07XG4gICAgfSk7XG4gIH07XG59XG4iLCIvLyBUcmltcyBpbnNpZ25pZmljYW50IHplcm9zLCBlLmcuLCByZXBsYWNlcyAxLjIwMDBrIHdpdGggMS4yay5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHMpIHtcbiAgb3V0OiBmb3IgKHZhciBuID0gcy5sZW5ndGgsIGkgPSAxLCBpMCA9IC0xLCBpMTsgaSA8IG47ICsraSkge1xuICAgIHN3aXRjaCAoc1tpXSkge1xuICAgICAgY2FzZSBcIi5cIjogaTAgPSBpMSA9IGk7IGJyZWFrO1xuICAgICAgY2FzZSBcIjBcIjogaWYgKGkwID09PSAwKSBpMCA9IGk7IGkxID0gaTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBpZiAoIStzW2ldKSBicmVhayBvdXQ7IGlmIChpMCA+IDApIGkwID0gMDsgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBpMCA+IDAgPyBzLnNsaWNlKDAsIGkwKSArIHMuc2xpY2UoaTEgKyAxKSA6IHM7XG59XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcblxuZnVuY3Rpb24gbGluZWFyKGEsIGQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIHQgKiBkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleHBvbmVudGlhbChhLCBiLCB5KSB7XG4gIHJldHVybiBhID0gTWF0aC5wb3coYSwgeSksIGIgPSBNYXRoLnBvdyhiLCB5KSAtIGEsIHkgPSAxIC8geSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhhICsgdCAqIGIsIHkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHVlKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCA+IDE4MCB8fCBkIDwgLTE4MCA/IGQgLSAzNjAgKiBNYXRoLnJvdW5kKGQgLyAzNjApIDogZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdhbW1hKHkpIHtcbiAgcmV0dXJuICh5ID0gK3kpID09PSAxID8gbm9nYW1tYSA6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGEgPyBleHBvbmVudGlhbChhLCBiLCB5KSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2dhbW1hKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IHggPT4gKCkgPT4geDtcbiIsImltcG9ydCB7bGFiIGFzIGNvbG9yTGFifSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciBmcm9tIFwiLi9jb2xvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsYWIoc3RhcnQsIGVuZCkge1xuICB2YXIgbCA9IGNvbG9yKChzdGFydCA9IGNvbG9yTGFiKHN0YXJ0KSkubCwgKGVuZCA9IGNvbG9yTGFiKGVuZCkpLmwpLFxuICAgICAgYSA9IGNvbG9yKHN0YXJ0LmEsIGVuZC5hKSxcbiAgICAgIGIgPSBjb2xvcihzdGFydC5iLCBlbmQuYiksXG4gICAgICBvcGFjaXR5ID0gY29sb3Ioc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHN0YXJ0LmwgPSBsKHQpO1xuICAgIHN0YXJ0LmEgPSBhKHQpO1xuICAgIHN0YXJ0LmIgPSBiKHQpO1xuICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gIH07XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gaW5pdFJhbmdlKGRvbWFpbiwgcmFuZ2UpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiBicmVhaztcbiAgICBjYXNlIDE6IHRoaXMucmFuZ2UoZG9tYWluKTsgYnJlYWs7XG4gICAgZGVmYXVsdDogdGhpcy5yYW5nZShyYW5nZSkuZG9tYWluKGRvbWFpbik7IGJyZWFrO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdEludGVycG9sYXRvcihkb21haW4sIGludGVycG9sYXRvcikge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IGJyZWFrO1xuICAgIGNhc2UgMToge1xuICAgICAgaWYgKHR5cGVvZiBkb21haW4gPT09IFwiZnVuY3Rpb25cIikgdGhpcy5pbnRlcnBvbGF0b3IoZG9tYWluKTtcbiAgICAgIGVsc2UgdGhpcy5yYW5nZShkb21haW4pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHRoaXMuZG9tYWluKGRvbWFpbik7XG4gICAgICBpZiAodHlwZW9mIGludGVycG9sYXRvciA9PT0gXCJmdW5jdGlvblwiKSB0aGlzLmludGVycG9sYXRvcihpbnRlcnBvbGF0b3IpO1xuICAgICAgZWxzZSB0aGlzLnJhbmdlKGludGVycG9sYXRvcik7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCB4ID0+ICgpID0+IHg7XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcblxuZnVuY3Rpb24gbGluZWFyKGEsIGQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIHQgKiBkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleHBvbmVudGlhbChhLCBiLCB5KSB7XG4gIHJldHVybiBhID0gTWF0aC5wb3coYSwgeSksIGIgPSBNYXRoLnBvdyhiLCB5KSAtIGEsIHkgPSAxIC8geSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhhICsgdCAqIGIsIHkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHVlKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCA+IDE4MCB8fCBkIDwgLTE4MCA/IGQgLSAzNjAgKiBNYXRoLnJvdW5kKGQgLyAzNjApIDogZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdhbW1hKHkpIHtcbiAgcmV0dXJuICh5ID0gK3kpID09PSAxID8gbm9nYW1tYSA6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGEgPyBleHBvbmVudGlhbChhLCBiLCB5KSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2dhbW1hKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cbiIsImltcG9ydCB7cmdiIGFzIGNvbG9yUmdifSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBiYXNpcyBmcm9tIFwiLi9iYXNpcy5qc1wiO1xuaW1wb3J0IGJhc2lzQ2xvc2VkIGZyb20gXCIuL2Jhc2lzQ2xvc2VkLmpzXCI7XG5pbXBvcnQgbm9nYW1tYSwge2dhbW1hfSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gcmdiR2FtbWEoeSkge1xuICB2YXIgY29sb3IgPSBnYW1tYSh5KTtcblxuICBmdW5jdGlvbiByZ2Ioc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gY29sb3IoKHN0YXJ0ID0gY29sb3JSZ2Ioc3RhcnQpKS5yLCAoZW5kID0gY29sb3JSZ2IoZW5kKSkuciksXG4gICAgICAgIGcgPSBjb2xvcihzdGFydC5nLCBlbmQuZyksXG4gICAgICAgIGIgPSBjb2xvcihzdGFydC5iLCBlbmQuYiksXG4gICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuciA9IHIodCk7XG4gICAgICBzdGFydC5nID0gZyh0KTtcbiAgICAgIHN0YXJ0LmIgPSBiKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cblxuICByZ2IuZ2FtbWEgPSByZ2JHYW1tYTtcblxuICByZXR1cm4gcmdiO1xufSkoMSk7XG5cbmZ1bmN0aW9uIHJnYlNwbGluZShzcGxpbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbG9ycykge1xuICAgIHZhciBuID0gY29sb3JzLmxlbmd0aCxcbiAgICAgICAgciA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgZyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgaSwgY29sb3I7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgY29sb3IgPSBjb2xvclJnYihjb2xvcnNbaV0pO1xuICAgICAgcltpXSA9IGNvbG9yLnIgfHwgMDtcbiAgICAgIGdbaV0gPSBjb2xvci5nIHx8IDA7XG4gICAgICBiW2ldID0gY29sb3IuYiB8fCAwO1xuICAgIH1cbiAgICByID0gc3BsaW5lKHIpO1xuICAgIGcgPSBzcGxpbmUoZyk7XG4gICAgYiA9IHNwbGluZShiKTtcbiAgICBjb2xvci5vcGFjaXR5ID0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgY29sb3IuciA9IHIodCk7XG4gICAgICBjb2xvci5nID0gZyh0KTtcbiAgICAgIGNvbG9yLmIgPSBiKHQpO1xuICAgICAgcmV0dXJuIGNvbG9yICsgXCJcIjtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIHJnYkJhc2lzID0gcmdiU3BsaW5lKGJhc2lzKTtcbmV4cG9ydCB2YXIgcmdiQmFzaXNDbG9zZWQgPSByZ2JTcGxpbmUoYmFzaXNDbG9zZWQpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICBpZiAoIWIpIGIgPSBbXTtcbiAgdmFyIG4gPSBhID8gTWF0aC5taW4oYi5sZW5ndGgsIGEubGVuZ3RoKSA6IDAsXG4gICAgICBjID0gYi5zbGljZSgpLFxuICAgICAgaTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjW2ldID0gYVtpXSAqICgxIC0gdCkgKyBiW2ldICogdDtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyQXJyYXkoeCkge1xuICByZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KHgpICYmICEoeCBpbnN0YW5jZW9mIERhdGFWaWV3KTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZS5qc1wiO1xuaW1wb3J0IG51bWJlckFycmF5LCB7aXNOdW1iZXJBcnJheX0gZnJvbSBcIi4vbnVtYmVyQXJyYXkuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gKGlzTnVtYmVyQXJyYXkoYikgPyBudW1iZXJBcnJheSA6IGdlbmVyaWNBcnJheSkoYSwgYik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmljQXJyYXkoYSwgYikge1xuICB2YXIgbmIgPSBiID8gYi5sZW5ndGggOiAwLFxuICAgICAgbmEgPSBhID8gTWF0aC5taW4obmIsIGEubGVuZ3RoKSA6IDAsXG4gICAgICB4ID0gbmV3IEFycmF5KG5hKSxcbiAgICAgIGMgPSBuZXcgQXJyYXkobmIpLFxuICAgICAgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgeFtpXSA9IHZhbHVlKGFbaV0sIGJbaV0pO1xuICBmb3IgKDsgaSA8IG5iOyArK2kpIGNbaV0gPSBiW2ldO1xuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIGNbaV0gPSB4W2ldKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgZCA9IG5ldyBEYXRlO1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gZC5zZXRUaW1lKGEgKiAoMSAtIHQpICsgYiAqIHQpLCBkO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSAqICgxIC0gdCkgKyBiICogdDtcbiAgfTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBpID0ge30sXG4gICAgICBjID0ge30sXG4gICAgICBrO1xuXG4gIGlmIChhID09PSBudWxsIHx8IHR5cGVvZiBhICE9PSBcIm9iamVjdFwiKSBhID0ge307XG4gIGlmIChiID09PSBudWxsIHx8IHR5cGVvZiBiICE9PSBcIm9iamVjdFwiKSBiID0ge307XG5cbiAgZm9yIChrIGluIGIpIHtcbiAgICBpZiAoayBpbiBhKSB7XG4gICAgICBpW2tdID0gdmFsdWUoYVtrXSwgYltrXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNba10gPSBiW2tdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChrIGluIGkpIGNba10gPSBpW2tdKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcblxudmFyIHJlQSA9IC9bLStdPyg/OlxcZCtcXC4/XFxkKnxcXC4/XFxkKykoPzpbZUVdWy0rXT9cXGQrKT8vZyxcbiAgICByZUIgPSBuZXcgUmVnRXhwKHJlQS5zb3VyY2UsIFwiZ1wiKTtcblxuZnVuY3Rpb24gemVybyhiKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25lKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGJpID0gcmVBLmxhc3RJbmRleCA9IHJlQi5sYXN0SW5kZXggPSAwLCAvLyBzY2FuIGluZGV4IGZvciBuZXh0IG51bWJlciBpbiBiXG4gICAgICBhbSwgLy8gY3VycmVudCBtYXRjaCBpbiBhXG4gICAgICBibSwgLy8gY3VycmVudCBtYXRjaCBpbiBiXG4gICAgICBicywgLy8gc3RyaW5nIHByZWNlZGluZyBjdXJyZW50IG51bWJlciBpbiBiLCBpZiBhbnlcbiAgICAgIGkgPSAtMSwgLy8gaW5kZXggaW4gc1xuICAgICAgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcblxuICAvLyBDb2VyY2UgaW5wdXRzIHRvIHN0cmluZ3MuXG4gIGEgPSBhICsgXCJcIiwgYiA9IGIgKyBcIlwiO1xuXG4gIC8vIEludGVycG9sYXRlIHBhaXJzIG9mIG51bWJlcnMgaW4gYSAmIGIuXG4gIHdoaWxlICgoYW0gPSByZUEuZXhlYyhhKSlcbiAgICAgICYmIChibSA9IHJlQi5leGVjKGIpKSkge1xuICAgIGlmICgoYnMgPSBibS5pbmRleCkgPiBiaSkgeyAvLyBhIHN0cmluZyBwcmVjZWRlcyB0aGUgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gICAgfVxuICAgIGlmICgoYW0gPSBhbVswXSkgPT09IChibSA9IGJtWzBdKSkgeyAvLyBudW1iZXJzIGluIGEgJiBiIG1hdGNoXG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBibTsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYm07XG4gICAgfSBlbHNlIHsgLy8gaW50ZXJwb2xhdGUgbm9uLW1hdGNoaW5nIG51bWJlcnNcbiAgICAgIHNbKytpXSA9IG51bGw7XG4gICAgICBxLnB1c2goe2k6IGksIHg6IG51bWJlcihhbSwgYm0pfSk7XG4gICAgfVxuICAgIGJpID0gcmVCLmxhc3RJbmRleDtcbiAgfVxuXG4gIC8vIEFkZCByZW1haW5zIG9mIGIuXG4gIGlmIChiaSA8IGIubGVuZ3RoKSB7XG4gICAgYnMgPSBiLnNsaWNlKGJpKTtcbiAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICBlbHNlIHNbKytpXSA9IGJzO1xuICB9XG5cbiAgLy8gU3BlY2lhbCBvcHRpbWl6YXRpb24gZm9yIG9ubHkgYSBzaW5nbGUgbWF0Y2guXG4gIC8vIE90aGVyd2lzZSwgaW50ZXJwb2xhdGUgZWFjaCBvZiB0aGUgbnVtYmVycyBhbmQgcmVqb2luIHRoZSBzdHJpbmcuXG4gIHJldHVybiBzLmxlbmd0aCA8IDIgPyAocVswXVxuICAgICAgPyBvbmUocVswXS54KVxuICAgICAgOiB6ZXJvKGIpKVxuICAgICAgOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG87IGkgPCBiOyArK2kpIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgICAgICB9KTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHJnYiBmcm9tIFwiLi9yZ2IuanNcIjtcbmltcG9ydCB7Z2VuZXJpY0FycmF5fSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuaW1wb3J0IGRhdGUgZnJvbSBcIi4vZGF0ZS5qc1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcbmltcG9ydCBvYmplY3QgZnJvbSBcIi4vb2JqZWN0LmpzXCI7XG5pbXBvcnQgc3RyaW5nIGZyb20gXCIuL3N0cmluZy5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgbnVtYmVyQXJyYXksIHtpc051bWJlckFycmF5fSBmcm9tIFwiLi9udW1iZXJBcnJheS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciB0ID0gdHlwZW9mIGIsIGM7XG4gIHJldHVybiBiID09IG51bGwgfHwgdCA9PT0gXCJib29sZWFuXCIgPyBjb25zdGFudChiKVxuICAgICAgOiAodCA9PT0gXCJudW1iZXJcIiA/IG51bWJlclxuICAgICAgOiB0ID09PSBcInN0cmluZ1wiID8gKChjID0gY29sb3IoYikpID8gKGIgPSBjLCByZ2IpIDogc3RyaW5nKVxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyByZ2JcbiAgICAgIDogYiBpbnN0YW5jZW9mIERhdGUgPyBkYXRlXG4gICAgICA6IGlzTnVtYmVyQXJyYXkoYikgPyBudW1iZXJBcnJheVxuICAgICAgOiBBcnJheS5pc0FycmF5KGIpID8gZ2VuZXJpY0FycmF5XG4gICAgICA6IHR5cGVvZiBiLnZhbHVlT2YgIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYi50b1N0cmluZyAhPT0gXCJmdW5jdGlvblwiIHx8IGlzTmFOKGIpID8gb2JqZWN0XG4gICAgICA6IG51bWJlcikoYSwgYik7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgPSArYiwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKGEgKiAoMSAtIHQpICsgYiAqIHQpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbnVtYmVyKHgpIHtcbiAgcmV0dXJuICt4O1xufVxuIiwiaW1wb3J0IHtiaXNlY3R9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZSBhcyBpbnRlcnBvbGF0ZVZhbHVlLCBpbnRlcnBvbGF0ZU51bWJlciwgaW50ZXJwb2xhdGVSb3VuZH0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbnZhciB1bml0ID0gWzAsIDFdO1xuXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICByZXR1cm4geDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplKGEsIGIpIHtcbiAgcmV0dXJuIChiIC09IChhID0gK2EpKVxuICAgICAgPyBmdW5jdGlvbih4KSB7IHJldHVybiAoeCAtIGEpIC8gYjsgfVxuICAgICAgOiBjb25zdGFudChpc05hTihiKSA/IE5hTiA6IDAuNSk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wZXIoYSwgYikge1xuICB2YXIgdDtcbiAgaWYgKGEgPiBiKSB0ID0gYSwgYSA9IGIsIGIgPSB0O1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5tYXgoYSwgTWF0aC5taW4oYiwgeCkpOyB9O1xufVxuXG4vLyBub3JtYWxpemUoYSwgYikoeCkgdGFrZXMgYSBkb21haW4gdmFsdWUgeCBpbiBbYSxiXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBwYXJhbWV0ZXIgdCBpbiBbMCwxXS5cbi8vIGludGVycG9sYXRlKGEsIGIpKHQpIHRha2VzIGEgcGFyYW1ldGVyIHQgaW4gWzAsMV0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmFuZ2UgdmFsdWUgeCBpbiBbYSxiXS5cbmZ1bmN0aW9uIGJpbWFwKGRvbWFpbiwgcmFuZ2UsIGludGVycG9sYXRlKSB7XG4gIHZhciBkMCA9IGRvbWFpblswXSwgZDEgPSBkb21haW5bMV0sIHIwID0gcmFuZ2VbMF0sIHIxID0gcmFuZ2VbMV07XG4gIGlmIChkMSA8IGQwKSBkMCA9IG5vcm1hbGl6ZShkMSwgZDApLCByMCA9IGludGVycG9sYXRlKHIxLCByMCk7XG4gIGVsc2UgZDAgPSBub3JtYWxpemUoZDAsIGQxKSwgcjAgPSBpbnRlcnBvbGF0ZShyMCwgcjEpO1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4gcjAoZDAoeCkpOyB9O1xufVxuXG5mdW5jdGlvbiBwb2x5bWFwKGRvbWFpbiwgcmFuZ2UsIGludGVycG9sYXRlKSB7XG4gIHZhciBqID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSAtIDEsXG4gICAgICBkID0gbmV3IEFycmF5KGopLFxuICAgICAgciA9IG5ldyBBcnJheShqKSxcbiAgICAgIGkgPSAtMTtcblxuICAvLyBSZXZlcnNlIGRlc2NlbmRpbmcgZG9tYWlucy5cbiAgaWYgKGRvbWFpbltqXSA8IGRvbWFpblswXSkge1xuICAgIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgpLnJldmVyc2UoKTtcbiAgICByYW5nZSA9IHJhbmdlLnNsaWNlKCkucmV2ZXJzZSgpO1xuICB9XG5cbiAgd2hpbGUgKCsraSA8IGopIHtcbiAgICBkW2ldID0gbm9ybWFsaXplKGRvbWFpbltpXSwgZG9tYWluW2kgKyAxXSk7XG4gICAgcltpXSA9IGludGVycG9sYXRlKHJhbmdlW2ldLCByYW5nZVtpICsgMV0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICB2YXIgaSA9IGJpc2VjdChkb21haW4sIHgsIDEsIGopIC0gMTtcbiAgICByZXR1cm4gcltpXShkW2ldKHgpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkoc291cmNlLCB0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldFxuICAgICAgLmRvbWFpbihzb3VyY2UuZG9tYWluKCkpXG4gICAgICAucmFuZ2Uoc291cmNlLnJhbmdlKCkpXG4gICAgICAuaW50ZXJwb2xhdGUoc291cmNlLmludGVycG9sYXRlKCkpXG4gICAgICAuY2xhbXAoc291cmNlLmNsYW1wKCkpXG4gICAgICAudW5rbm93bihzb3VyY2UudW5rbm93bigpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybWVyKCkge1xuICB2YXIgZG9tYWluID0gdW5pdCxcbiAgICAgIHJhbmdlID0gdW5pdCxcbiAgICAgIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVWYWx1ZSxcbiAgICAgIHRyYW5zZm9ybSxcbiAgICAgIHVudHJhbnNmb3JtLFxuICAgICAgdW5rbm93bixcbiAgICAgIGNsYW1wID0gaWRlbnRpdHksXG4gICAgICBwaWVjZXdpc2UsXG4gICAgICBvdXRwdXQsXG4gICAgICBpbnB1dDtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHZhciBuID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKTtcbiAgICBpZiAoY2xhbXAgIT09IGlkZW50aXR5KSBjbGFtcCA9IGNsYW1wZXIoZG9tYWluWzBdLCBkb21haW5bbiAtIDFdKTtcbiAgICBwaWVjZXdpc2UgPSBuID4gMiA/IHBvbHltYXAgOiBiaW1hcDtcbiAgICBvdXRwdXQgPSBpbnB1dCA9IG51bGw7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiB4ID09IG51bGwgfHwgaXNOYU4oeCA9ICt4KSA/IHVua25vd24gOiAob3V0cHV0IHx8IChvdXRwdXQgPSBwaWVjZXdpc2UoZG9tYWluLm1hcCh0cmFuc2Zvcm0pLCByYW5nZSwgaW50ZXJwb2xhdGUpKSkodHJhbnNmb3JtKGNsYW1wKHgpKSk7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIGNsYW1wKHVudHJhbnNmb3JtKChpbnB1dCB8fCAoaW5wdXQgPSBwaWVjZXdpc2UocmFuZ2UsIGRvbWFpbi5tYXAodHJhbnNmb3JtKSwgaW50ZXJwb2xhdGVOdW1iZXIpKSkoeSkpKTtcbiAgfTtcblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gQXJyYXkuZnJvbShfLCBudW1iZXIpLCByZXNjYWxlKCkpIDogZG9tYWluLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBBcnJheS5mcm9tKF8pLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiByYW5nZSA9IEFycmF5LmZyb20oXyksIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVSb3VuZCwgcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gXyA/IHRydWUgOiBpZGVudGl0eSwgcmVzY2FsZSgpKSA6IGNsYW1wICE9PSBpZGVudGl0eTtcbiAgfTtcblxuICBzY2FsZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0ZSA9IF8sIHJlc2NhbGUoKSkgOiBpbnRlcnBvbGF0ZTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHJldHVybiBmdW5jdGlvbih0LCB1KSB7XG4gICAgdHJhbnNmb3JtID0gdCwgdW50cmFuc2Zvcm0gPSB1O1xuICAgIHJldHVybiByZXNjYWxlKCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnRpbnVvdXMoKSB7XG4gIHJldHVybiB0cmFuc2Zvcm1lcigpKGlkZW50aXR5LCBpZGVudGl0eSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25zdGFudHMoeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQge3RpY2tTdGVwfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7Zm9ybWF0LCBmb3JtYXRQcmVmaXgsIGZvcm1hdFNwZWNpZmllciwgcHJlY2lzaW9uRml4ZWQsIHByZWNpc2lvblByZWZpeCwgcHJlY2lzaW9uUm91bmR9IGZyb20gXCJkMy1mb3JtYXRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGlja0Zvcm1hdChzdGFydCwgc3RvcCwgY291bnQsIHNwZWNpZmllcikge1xuICB2YXIgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCksXG4gICAgICBwcmVjaXNpb247XG4gIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIgPT0gbnVsbCA/IFwiLGZcIiA6IHNwZWNpZmllcik7XG4gIHN3aXRjaCAoc3BlY2lmaWVyLnR5cGUpIHtcbiAgICBjYXNlIFwic1wiOiB7XG4gICAgICB2YXIgdmFsdWUgPSBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKTtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblByZWZpeChzdGVwLCB2YWx1ZSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xuICAgICAgcmV0dXJuIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKTtcbiAgICB9XG4gICAgY2FzZSBcIlwiOlxuICAgIGNhc2UgXCJlXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJyXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblJvdW5kKHN0ZXAsIE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiZVwiKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZlwiOlxuICAgIGNhc2UgXCIlXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvbkZpeGVkKHN0ZXApKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCIlXCIpICogMjtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZm9ybWF0KHNwZWNpZmllcik7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCwgdmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzIC0gZXhwb25lbnQoTWF0aC5hYnMoc3RlcCkpKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCBtYXgpIHtcbiAgc3RlcCA9IE1hdGguYWJzKHN0ZXApLCBtYXggPSBNYXRoLmFicyhtYXgpIC0gc3RlcDtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIGV4cG9uZW50KG1heCkgLSBleHBvbmVudChzdGVwKSkgKyAxO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXApIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIC1leHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IHt0aWNrcywgdGlja0luY3JlbWVudH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQgY29udGludW91cywge2NvcHl9IGZyb20gXCIuL2NvbnRpbnVvdXMuanNcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0LmpzXCI7XG5pbXBvcnQgdGlja0Zvcm1hdCBmcm9tIFwiLi90aWNrRm9ybWF0LmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5lYXJpc2goc2NhbGUpIHtcbiAgdmFyIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja3MoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCk7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgIHJldHVybiB0aWNrRm9ybWF0KGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQsIHNwZWNpZmllcik7XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG5cbiAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgIHZhciBpMCA9IDA7XG4gICAgdmFyIGkxID0gZC5sZW5ndGggLSAxO1xuICAgIHZhciBzdGFydCA9IGRbaTBdO1xuICAgIHZhciBzdG9wID0gZFtpMV07XG4gICAgdmFyIHByZXN0ZXA7XG4gICAgdmFyIHN0ZXA7XG4gICAgdmFyIG1heEl0ZXIgPSAxMDtcblxuICAgIGlmIChzdG9wIDwgc3RhcnQpIHtcbiAgICAgIHN0ZXAgPSBzdGFydCwgc3RhcnQgPSBzdG9wLCBzdG9wID0gc3RlcDtcbiAgICAgIHN0ZXAgPSBpMCwgaTAgPSBpMSwgaTEgPSBzdGVwO1xuICAgIH1cbiAgICBcbiAgICB3aGlsZSAobWF4SXRlci0tID4gMCkge1xuICAgICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcbiAgICAgIGlmIChzdGVwID09PSBwcmVzdGVwKSB7XG4gICAgICAgIGRbaTBdID0gc3RhcnRcbiAgICAgICAgZFtpMV0gPSBzdG9wXG4gICAgICAgIHJldHVybiBkb21haW4oZCk7XG4gICAgICB9IGVsc2UgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCAvIHN0ZXApICogc3RlcDtcbiAgICAgICAgc3RvcCA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgfSBlbHNlIGlmIChzdGVwIDwgMCkge1xuICAgICAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcHJlc3RlcCA9IHN0ZXA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGluZWFyKCkge1xuICB2YXIgc2NhbGUgPSBjb250aW51b3VzKCk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBsaW5lYXIoKSk7XG4gIH07XG5cbiAgaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuIiwidmFyIHQwID0gbmV3IERhdGUsXG4gICAgdDEgPSBuZXcgRGF0ZTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbmV3SW50ZXJ2YWwoZmxvb3JpLCBvZmZzZXRpLCBjb3VudCwgZmllbGQpIHtcblxuICBmdW5jdGlvbiBpbnRlcnZhbChkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMCA/IG5ldyBEYXRlIDogbmV3IERhdGUoK2RhdGUpKSwgZGF0ZTtcbiAgfVxuXG4gIGludGVydmFsLmZsb29yID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKSksIGRhdGU7XG4gIH07XG5cbiAgaW50ZXJ2YWwuY2VpbCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZShkYXRlIC0gMSkpLCBvZmZzZXRpKGRhdGUsIDEpLCBmbG9vcmkoZGF0ZSksIGRhdGU7XG4gIH07XG5cbiAgaW50ZXJ2YWwucm91bmQgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgdmFyIGQwID0gaW50ZXJ2YWwoZGF0ZSksXG4gICAgICAgIGQxID0gaW50ZXJ2YWwuY2VpbChkYXRlKTtcbiAgICByZXR1cm4gZGF0ZSAtIGQwIDwgZDEgLSBkYXRlID8gZDAgOiBkMTtcbiAgfTtcblxuICBpbnRlcnZhbC5vZmZzZXQgPSBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgcmV0dXJuIG9mZnNldGkoZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKSwgc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCkpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLnJhbmdlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICB2YXIgcmFuZ2UgPSBbXSwgcHJldmlvdXM7XG4gICAgc3RhcnQgPSBpbnRlcnZhbC5jZWlsKHN0YXJ0KTtcbiAgICBzdGVwID0gc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgaWYgKCEoc3RhcnQgPCBzdG9wKSB8fCAhKHN0ZXAgPiAwKSkgcmV0dXJuIHJhbmdlOyAvLyBhbHNvIGhhbmRsZXMgSW52YWxpZCBEYXRlXG4gICAgZG8gcmFuZ2UucHVzaChwcmV2aW91cyA9IG5ldyBEYXRlKCtzdGFydCkpLCBvZmZzZXRpKHN0YXJ0LCBzdGVwKSwgZmxvb3JpKHN0YXJ0KTtcbiAgICB3aGlsZSAocHJldmlvdXMgPCBzdGFydCAmJiBzdGFydCA8IHN0b3ApO1xuICAgIHJldHVybiByYW5nZTtcbiAgfTtcblxuICBpbnRlcnZhbC5maWx0ZXIgPSBmdW5jdGlvbih0ZXN0KSB7XG4gICAgcmV0dXJuIG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIGlmIChkYXRlID49IGRhdGUpIHdoaWxlIChmbG9vcmkoZGF0ZSksICF0ZXN0KGRhdGUpKSBkYXRlLnNldFRpbWUoZGF0ZSAtIDEpO1xuICAgIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICAgIGlmIChkYXRlID49IGRhdGUpIHtcbiAgICAgICAgaWYgKHN0ZXAgPCAwKSB3aGlsZSAoKytzdGVwIDw9IDApIHtcbiAgICAgICAgICB3aGlsZSAob2Zmc2V0aShkYXRlLCAtMSksICF0ZXN0KGRhdGUpKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gICAgICAgIH0gZWxzZSB3aGlsZSAoLS1zdGVwID49IDApIHtcbiAgICAgICAgICB3aGlsZSAob2Zmc2V0aShkYXRlLCArMSksICF0ZXN0KGRhdGUpKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBpZiAoY291bnQpIHtcbiAgICBpbnRlcnZhbC5jb3VudCA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHQwLnNldFRpbWUoK3N0YXJ0KSwgdDEuc2V0VGltZSgrZW5kKTtcbiAgICAgIGZsb29yaSh0MCksIGZsb29yaSh0MSk7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcihjb3VudCh0MCwgdDEpKTtcbiAgICB9O1xuXG4gICAgaW50ZXJ2YWwuZXZlcnkgPSBmdW5jdGlvbihzdGVwKSB7XG4gICAgICBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcbiAgICAgIHJldHVybiAhaXNGaW5pdGUoc3RlcCkgfHwgIShzdGVwID4gMCkgPyBudWxsXG4gICAgICAgICAgOiAhKHN0ZXAgPiAxKSA/IGludGVydmFsXG4gICAgICAgICAgOiBpbnRlcnZhbC5maWx0ZXIoZmllbGRcbiAgICAgICAgICAgICAgPyBmdW5jdGlvbihkKSB7IHJldHVybiBmaWVsZChkKSAlIHN0ZXAgPT09IDA7IH1cbiAgICAgICAgICAgICAgOiBmdW5jdGlvbihkKSB7IHJldHVybiBpbnRlcnZhbC5jb3VudCgwLCBkKSAlIHN0ZXAgPT09IDA7IH0pO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gaW50ZXJ2YWw7XG59XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIG1pbGxpc2Vjb25kID0gaW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gIC8vIG5vb3Bcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQgLSBzdGFydDtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG5taWxsaXNlY29uZC5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgayA9IE1hdGguZmxvb3Ioayk7XG4gIGlmICghaXNGaW5pdGUoaykgfHwgIShrID4gMCkpIHJldHVybiBudWxsO1xuICBpZiAoIShrID4gMSkpIHJldHVybiBtaWxsaXNlY29uZDtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gaykgKiBrKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBrKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gaztcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtaWxsaXNlY29uZDtcbmV4cG9ydCB2YXIgbWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmQucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciBzZWNvbmQgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25TZWNvbmQ7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ1NlY29uZHMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzZWNvbmQ7XG5leHBvcnQgdmFyIHNlY29uZHMgPSBzZWNvbmQucmFuZ2U7XG4iLCJleHBvcnQgY29uc3QgZHVyYXRpb25TZWNvbmQgPSAxMDAwO1xuZXhwb3J0IGNvbnN0IGR1cmF0aW9uTWludXRlID0gZHVyYXRpb25TZWNvbmQgKiA2MDtcbmV4cG9ydCBjb25zdCBkdXJhdGlvbkhvdXIgPSBkdXJhdGlvbk1pbnV0ZSAqIDYwO1xuZXhwb3J0IGNvbnN0IGR1cmF0aW9uRGF5ID0gZHVyYXRpb25Ib3VyICogMjQ7XG5leHBvcnQgY29uc3QgZHVyYXRpb25XZWVrID0gZHVyYXRpb25EYXkgKiA3O1xuZXhwb3J0IGNvbnN0IGR1cmF0aW9uTW9udGggPSBkdXJhdGlvbkRheSAqIDMwO1xuZXhwb3J0IGNvbnN0IGR1cmF0aW9uWWVhciA9IGR1cmF0aW9uRGF5ICogMzY1O1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlLCBkdXJhdGlvblNlY29uZH0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIG1pbnV0ZSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKGRhdGUgLSBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC0gZGF0ZS5nZXRTZWNvbmRzKCkgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25NaW51dGU7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldE1pbnV0ZXMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtaW51dGU7XG5leHBvcnQgdmFyIG1pbnV0ZXMgPSBtaW51dGUucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25Ib3VyLCBkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciBob3VyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFRpbWUoZGF0ZSAtIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkgLSBkYXRlLmdldFNlY29uZHMoKSAqIGR1cmF0aW9uU2Vjb25kIC0gZGF0ZS5nZXRNaW51dGVzKCkgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbkhvdXIpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uSG91cjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBob3VyO1xuZXhwb3J0IHZhciBob3VycyA9IGhvdXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25EYXksIGR1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgZGF5ID0gaW50ZXJ2YWwoXG4gIGRhdGUgPT4gZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKSxcbiAgKGRhdGUsIHN0ZXApID0+IGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXApLFxuICAoc3RhcnQsIGVuZCkgPT4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbkRheSxcbiAgZGF0ZSA9PiBkYXRlLmdldERhdGUoKSAtIDFcbik7XG5cbmV4cG9ydCBkZWZhdWx0IGRheTtcbmV4cG9ydCB2YXIgZGF5cyA9IGRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25XZWVrfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG5mdW5jdGlvbiB3ZWVrZGF5KGkpIHtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoZGF0ZS5nZXREYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwICogNyk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbldlZWs7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIHN1bmRheSA9IHdlZWtkYXkoMCk7XG5leHBvcnQgdmFyIG1vbmRheSA9IHdlZWtkYXkoMSk7XG5leHBvcnQgdmFyIHR1ZXNkYXkgPSB3ZWVrZGF5KDIpO1xuZXhwb3J0IHZhciB3ZWRuZXNkYXkgPSB3ZWVrZGF5KDMpO1xuZXhwb3J0IHZhciB0aHVyc2RheSA9IHdlZWtkYXkoNCk7XG5leHBvcnQgdmFyIGZyaWRheSA9IHdlZWtkYXkoNSk7XG5leHBvcnQgdmFyIHNhdHVyZGF5ID0gd2Vla2RheSg2KTtcblxuZXhwb3J0IHZhciBzdW5kYXlzID0gc3VuZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBtb25kYXlzID0gbW9uZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB0dWVzZGF5cyA9IHR1ZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHdlZG5lc2RheXMgPSB3ZWRuZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHRodXJzZGF5cyA9IHRodXJzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBmcmlkYXlzID0gZnJpZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBzYXR1cmRheXMgPSBzYXR1cmRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG52YXIgbW9udGggPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0RGF0ZSgxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRNb250aCgpIC0gc3RhcnQuZ2V0TW9udGgoKSArIChlbmQuZ2V0RnVsbFllYXIoKSAtIHN0YXJ0LmdldEZ1bGxZZWFyKCkpICogMTI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldE1vbnRoKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbW9udGg7XG5leHBvcnQgdmFyIG1vbnRocyA9IG1vbnRoLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5cbnZhciB5ZWFyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpO1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbnllYXIuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKE1hdGguZmxvb3IoZGF0ZS5nZXRGdWxsWWVhcigpIC8gaykgKiBrKTtcbiAgICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB5ZWFyO1xuZXhwb3J0IHZhciB5ZWFycyA9IHllYXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciB1dGNNaW51dGUgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDU2Vjb25kcygwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbk1pbnV0ZTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTWludXRlcygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y01pbnV0ZTtcbmV4cG9ydCB2YXIgdXRjTWludXRlcyA9IHV0Y01pbnV0ZS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbkhvdXJ9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciB1dGNIb3VyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ01pbnV0ZXMoMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbkhvdXIpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uSG91cjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDSG91cnMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNIb3VyO1xuZXhwb3J0IHZhciB1dGNIb3VycyA9IHV0Y0hvdXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25EYXl9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciB1dGNEYXkgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uRGF5O1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENEYXRlKCkgLSAxO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y0RheTtcbmV4cG9ydCB2YXIgdXRjRGF5cyA9IHV0Y0RheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbldlZWt9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbmZ1bmN0aW9uIHV0Y1dlZWtkYXkoaSkge1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIChkYXRlLmdldFVUQ0RheSgpICsgNyAtIGkpICUgNyk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXAgKiA3KTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25XZWVrO1xuICB9KTtcbn1cblxuZXhwb3J0IHZhciB1dGNTdW5kYXkgPSB1dGNXZWVrZGF5KDApO1xuZXhwb3J0IHZhciB1dGNNb25kYXkgPSB1dGNXZWVrZGF5KDEpO1xuZXhwb3J0IHZhciB1dGNUdWVzZGF5ID0gdXRjV2Vla2RheSgyKTtcbmV4cG9ydCB2YXIgdXRjV2VkbmVzZGF5ID0gdXRjV2Vla2RheSgzKTtcbmV4cG9ydCB2YXIgdXRjVGh1cnNkYXkgPSB1dGNXZWVrZGF5KDQpO1xuZXhwb3J0IHZhciB1dGNGcmlkYXkgPSB1dGNXZWVrZGF5KDUpO1xuZXhwb3J0IHZhciB1dGNTYXR1cmRheSA9IHV0Y1dlZWtkYXkoNik7XG5cbmV4cG9ydCB2YXIgdXRjU3VuZGF5cyA9IHV0Y1N1bmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjTW9uZGF5cyA9IHV0Y01vbmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjVHVlc2RheXMgPSB1dGNUdWVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNXZWRuZXNkYXlzID0gdXRjV2VkbmVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNUaHVyc2RheXMgPSB1dGNUaHVyc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjRnJpZGF5cyA9IHV0Y0ZyaWRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjU2F0dXJkYXlzID0gdXRjU2F0dXJkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIHV0Y01vbnRoID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ0RhdGUoMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDTW9udGgoZGF0ZS5nZXRVVENNb250aCgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0VVRDTW9udGgoKSAtIHN0YXJ0LmdldFVUQ01vbnRoKCkgKyAoZW5kLmdldFVUQ0Z1bGxZZWFyKCkgLSBzdGFydC5nZXRVVENGdWxsWWVhcigpKSAqIDEyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENNb250aCgpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y01vbnRoO1xuZXhwb3J0IHZhciB1dGNNb250aHMgPSB1dGNNb250aC5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG52YXIgdXRjWWVhciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRVVENGdWxsWWVhcigpIC0gc3RhcnQuZ2V0VVRDRnVsbFllYXIoKTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG51dGNZZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICByZXR1cm4gIWlzRmluaXRlKGsgPSBNYXRoLmZsb29yKGspKSB8fCAhKGsgPiAwKSA/IG51bGwgOiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSAvIGspICogayk7XG4gICAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjWWVhcjtcbmV4cG9ydCB2YXIgdXRjWWVhcnMgPSB1dGNZZWFyLnJhbmdlO1xuIiwiaW1wb3J0IHtiaXNlY3RvciwgdGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtkdXJhdGlvbkRheSwgZHVyYXRpb25Ib3VyLCBkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25Nb250aCwgZHVyYXRpb25TZWNvbmQsIGR1cmF0aW9uV2VlaywgZHVyYXRpb25ZZWFyfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuaW1wb3J0IG1pbGxpc2Vjb25kIGZyb20gXCIuL21pbGxpc2Vjb25kLmpzXCI7XG5pbXBvcnQgc2Vjb25kIGZyb20gXCIuL3NlY29uZC5qc1wiO1xuaW1wb3J0IG1pbnV0ZSBmcm9tIFwiLi9taW51dGUuanNcIjtcbmltcG9ydCBob3VyIGZyb20gXCIuL2hvdXIuanNcIjtcbmltcG9ydCBkYXkgZnJvbSBcIi4vZGF5LmpzXCI7XG5pbXBvcnQge3N1bmRheSBhcyB3ZWVrfSBmcm9tIFwiLi93ZWVrLmpzXCI7XG5pbXBvcnQgbW9udGggZnJvbSBcIi4vbW9udGguanNcIjtcbmltcG9ydCB5ZWFyIGZyb20gXCIuL3llYXIuanNcIjtcbmltcG9ydCB1dGNNaW51dGUgZnJvbSBcIi4vdXRjTWludXRlLmpzXCI7XG5pbXBvcnQgdXRjSG91ciBmcm9tIFwiLi91dGNIb3VyLmpzXCI7XG5pbXBvcnQgdXRjRGF5IGZyb20gXCIuL3V0Y0RheS5qc1wiO1xuaW1wb3J0IHt1dGNTdW5kYXkgYXMgdXRjV2Vla30gZnJvbSBcIi4vdXRjV2Vlay5qc1wiO1xuaW1wb3J0IHV0Y01vbnRoIGZyb20gXCIuL3V0Y01vbnRoLmpzXCI7XG5pbXBvcnQgdXRjWWVhciBmcm9tIFwiLi91dGNZZWFyLmpzXCI7XG5cbmZ1bmN0aW9uIHRpY2tlcih5ZWFyLCBtb250aCwgd2VlaywgZGF5LCBob3VyLCBtaW51dGUpIHtcblxuICBjb25zdCB0aWNrSW50ZXJ2YWxzID0gW1xuICAgIFtzZWNvbmQsICAxLCAgICAgIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbc2Vjb25kLCAgNSwgIDUgKiBkdXJhdGlvblNlY29uZF0sXG4gICAgW3NlY29uZCwgMTUsIDE1ICogZHVyYXRpb25TZWNvbmRdLFxuICAgIFtzZWNvbmQsIDMwLCAzMCAqIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbbWludXRlLCAgMSwgICAgICBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgW21pbnV0ZSwgIDUsICA1ICogZHVyYXRpb25NaW51dGVdLFxuICAgIFttaW51dGUsIDE1LCAxNSAqIGR1cmF0aW9uTWludXRlXSxcbiAgICBbbWludXRlLCAzMCwgMzAgKiBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgWyAgaG91ciwgIDEsICAgICAgZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgIGhvdXIsICAzLCAgMyAqIGR1cmF0aW9uSG91ciAgXSxcbiAgICBbICBob3VyLCAgNiwgIDYgKiBkdXJhdGlvbkhvdXIgIF0sXG4gICAgWyAgaG91ciwgMTIsIDEyICogZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgICBkYXksICAxLCAgICAgIGR1cmF0aW9uRGF5ICAgXSxcbiAgICBbICAgZGF5LCAgMiwgIDIgKiBkdXJhdGlvbkRheSAgIF0sXG4gICAgWyAgd2VlaywgIDEsICAgICAgZHVyYXRpb25XZWVrICBdLFxuICAgIFsgbW9udGgsICAxLCAgICAgIGR1cmF0aW9uTW9udGggXSxcbiAgICBbIG1vbnRoLCAgMywgIDMgKiBkdXJhdGlvbk1vbnRoIF0sXG4gICAgWyAgeWVhciwgIDEsICAgICAgZHVyYXRpb25ZZWFyICBdXG4gIF07XG5cbiAgZnVuY3Rpb24gdGlja3Moc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gICAgY29uc3QgcmV2ZXJzZSA9IHN0b3AgPCBzdGFydDtcbiAgICBpZiAocmV2ZXJzZSkgW3N0YXJ0LCBzdG9wXSA9IFtzdG9wLCBzdGFydF07XG4gICAgY29uc3QgaW50ZXJ2YWwgPSBjb3VudCAmJiB0eXBlb2YgY291bnQucmFuZ2UgPT09IFwiZnVuY3Rpb25cIiA/IGNvdW50IDogdGlja0ludGVydmFsKHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgY29uc3QgdGlja3MgPSBpbnRlcnZhbCA/IGludGVydmFsLnJhbmdlKHN0YXJ0LCArc3RvcCArIDEpIDogW107IC8vIGluY2x1c2l2ZSBzdG9wXG4gICAgcmV0dXJuIHJldmVyc2UgPyB0aWNrcy5yZXZlcnNlKCkgOiB0aWNrcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2tJbnRlcnZhbChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBNYXRoLmFicyhzdG9wIC0gc3RhcnQpIC8gY291bnQ7XG4gICAgY29uc3QgaSA9IGJpc2VjdG9yKChbLCwgc3RlcF0pID0+IHN0ZXApLnJpZ2h0KHRpY2tJbnRlcnZhbHMsIHRhcmdldCk7XG4gICAgaWYgKGkgPT09IHRpY2tJbnRlcnZhbHMubGVuZ3RoKSByZXR1cm4geWVhci5ldmVyeSh0aWNrU3RlcChzdGFydCAvIGR1cmF0aW9uWWVhciwgc3RvcCAvIGR1cmF0aW9uWWVhciwgY291bnQpKTtcbiAgICBpZiAoaSA9PT0gMCkgcmV0dXJuIG1pbGxpc2Vjb25kLmV2ZXJ5KE1hdGgubWF4KHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCksIDEpKTtcbiAgICBjb25zdCBbdCwgc3RlcF0gPSB0aWNrSW50ZXJ2YWxzW3RhcmdldCAvIHRpY2tJbnRlcnZhbHNbaSAtIDFdWzJdIDwgdGlja0ludGVydmFsc1tpXVsyXSAvIHRhcmdldCA/IGkgLSAxIDogaV07XG4gICAgcmV0dXJuIHQuZXZlcnkoc3RlcCk7XG4gIH1cblxuICByZXR1cm4gW3RpY2tzLCB0aWNrSW50ZXJ2YWxdO1xufVxuXG5jb25zdCBbdXRjVGlja3MsIHV0Y1RpY2tJbnRlcnZhbF0gPSB0aWNrZXIodXRjWWVhciwgdXRjTW9udGgsIHV0Y1dlZWssIHV0Y0RheSwgdXRjSG91ciwgdXRjTWludXRlKTtcbmNvbnN0IFt0aW1lVGlja3MsIHRpbWVUaWNrSW50ZXJ2YWxdID0gdGlja2VyKHllYXIsIG1vbnRoLCB3ZWVrLCBkYXksIGhvdXIsIG1pbnV0ZSk7XG5cbmV4cG9ydCB7dXRjVGlja3MsIHV0Y1RpY2tJbnRlcnZhbCwgdGltZVRpY2tzLCB0aW1lVGlja0ludGVydmFsfTtcbiIsImltcG9ydCB7XG4gIHRpbWVEYXksXG4gIHRpbWVTdW5kYXksXG4gIHRpbWVNb25kYXksXG4gIHRpbWVUaHVyc2RheSxcbiAgdGltZVllYXIsXG4gIHV0Y0RheSxcbiAgdXRjU3VuZGF5LFxuICB1dGNNb25kYXksXG4gIHV0Y1RodXJzZGF5LFxuICB1dGNZZWFyXG59IGZyb20gXCJkMy10aW1lXCI7XG5cbmZ1bmN0aW9uIGxvY2FsRGF0ZShkKSB7XG4gIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG59XG5cbmZ1bmN0aW9uIHV0Y0RhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQygtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZC55KTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG59XG5cbmZ1bmN0aW9uIG5ld0RhdGUoeSwgbSwgZCkge1xuICByZXR1cm4ge3k6IHksIG06IG0sIGQ6IGQsIEg6IDAsIE06IDAsIFM6IDAsIEw6IDB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRMb2NhbGUobG9jYWxlKSB7XG4gIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsXG4gICAgICBsb2NhbGVfZGF0ZSA9IGxvY2FsZS5kYXRlLFxuICAgICAgbG9jYWxlX3RpbWUgPSBsb2NhbGUudGltZSxcbiAgICAgIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsXG4gICAgICBsb2NhbGVfd2Vla2RheXMgPSBsb2NhbGUuZGF5cyxcbiAgICAgIGxvY2FsZV9zaG9ydFdlZWtkYXlzID0gbG9jYWxlLnNob3J0RGF5cyxcbiAgICAgIGxvY2FsZV9tb250aHMgPSBsb2NhbGUubW9udGhzLFxuICAgICAgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuXG4gIHZhciBwZXJpb2RSZSA9IGZvcm1hdFJlKGxvY2FsZV9wZXJpb2RzKSxcbiAgICAgIHBlcmlvZExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfcGVyaW9kcyksXG4gICAgICB3ZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgd2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICBzaG9ydFdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgbW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9tb250aHMpLFxuICAgICAgbW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX21vbnRocyksXG4gICAgICBzaG9ydE1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRNb250aHMpLFxuICAgICAgc2hvcnRNb250aExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRNb250aHMpO1xuXG4gIHZhciBmb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFdlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFNob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdE1vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRNaWNyb3NlY29uZHMsXG4gICAgXCJnXCI6IGZvcm1hdFllYXJJU08sXG4gICAgXCJHXCI6IGZvcm1hdEZ1bGxZZWFySVNPLFxuICAgIFwiSFwiOiBmb3JtYXRIb3VyMjQsXG4gICAgXCJJXCI6IGZvcm1hdEhvdXIxMixcbiAgICBcImpcIjogZm9ybWF0RGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBmb3JtYXRNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IGZvcm1hdE1vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBmb3JtYXRNaW51dGVzLFxuICAgIFwicFwiOiBmb3JtYXRQZXJpb2QsXG4gICAgXCJxXCI6IGZvcm1hdFF1YXJ0ZXIsXG4gICAgXCJRXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBmb3JtYXRTZWNvbmRzLFxuICAgIFwidVwiOiBmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBmb3JtYXRXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBudWxsLFxuICAgIFwiWFwiOiBudWxsLFxuICAgIFwieVwiOiBmb3JtYXRZZWFyLFxuICAgIFwiWVwiOiBmb3JtYXRGdWxsWWVhcixcbiAgICBcIlpcIjogZm9ybWF0Wm9uZSxcbiAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICB2YXIgdXRjRm9ybWF0cyA9IHtcbiAgICBcImFcIjogZm9ybWF0VVRDU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBmb3JtYXRVVENXZWVrZGF5LFxuICAgIFwiYlwiOiBmb3JtYXRVVENTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBmb3JtYXRVVENNb250aCxcbiAgICBcImNcIjogbnVsbCxcbiAgICBcImRcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImVcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImZcIjogZm9ybWF0VVRDTWljcm9zZWNvbmRzLFxuICAgIFwiZ1wiOiBmb3JtYXRVVENZZWFySVNPLFxuICAgIFwiR1wiOiBmb3JtYXRVVENGdWxsWWVhcklTTyxcbiAgICBcIkhcIjogZm9ybWF0VVRDSG91cjI0LFxuICAgIFwiSVwiOiBmb3JtYXRVVENIb3VyMTIsXG4gICAgXCJqXCI6IGZvcm1hdFVUQ0RheU9mWWVhcixcbiAgICBcIkxcIjogZm9ybWF0VVRDTWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBmb3JtYXRVVENNb250aE51bWJlcixcbiAgICBcIk1cIjogZm9ybWF0VVRDTWludXRlcyxcbiAgICBcInBcIjogZm9ybWF0VVRDUGVyaW9kLFxuICAgIFwicVwiOiBmb3JtYXRVVENRdWFydGVyLFxuICAgIFwiUVwiOiBmb3JtYXRVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogZm9ybWF0VVRDU2Vjb25kcyxcbiAgICBcInVcIjogZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogZm9ybWF0VVRDV2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogZm9ybWF0VVRDV2Vla051bWJlcklTTyxcbiAgICBcIndcIjogZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogZm9ybWF0VVRDV2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogbnVsbCxcbiAgICBcIlhcIjogbnVsbCxcbiAgICBcInlcIjogZm9ybWF0VVRDWWVhcixcbiAgICBcIllcIjogZm9ybWF0VVRDRnVsbFllYXIsXG4gICAgXCJaXCI6IGZvcm1hdFVUQ1pvbmUsXG4gICAgXCIlXCI6IGZvcm1hdExpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgdmFyIHBhcnNlcyA9IHtcbiAgICBcImFcIjogcGFyc2VTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IHBhcnNlV2Vla2RheSxcbiAgICBcImJcIjogcGFyc2VTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBwYXJzZU1vbnRoLFxuICAgIFwiY1wiOiBwYXJzZUxvY2FsZURhdGVUaW1lLFxuICAgIFwiZFwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgXCJlXCI6IHBhcnNlRGF5T2ZNb250aCxcbiAgICBcImZcIjogcGFyc2VNaWNyb3NlY29uZHMsXG4gICAgXCJnXCI6IHBhcnNlWWVhcixcbiAgICBcIkdcIjogcGFyc2VGdWxsWWVhcixcbiAgICBcIkhcIjogcGFyc2VIb3VyMjQsXG4gICAgXCJJXCI6IHBhcnNlSG91cjI0LFxuICAgIFwialwiOiBwYXJzZURheU9mWWVhcixcbiAgICBcIkxcIjogcGFyc2VNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IHBhcnNlTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IHBhcnNlTWludXRlcyxcbiAgICBcInBcIjogcGFyc2VQZXJpb2QsXG4gICAgXCJxXCI6IHBhcnNlUXVhcnRlcixcbiAgICBcIlFcIjogcGFyc2VVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBwYXJzZVNlY29uZHMsXG4gICAgXCJ1XCI6IHBhcnNlV2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogcGFyc2VXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBwYXJzZVdlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IHBhcnNlV2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogcGFyc2VXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBwYXJzZUxvY2FsZURhdGUsXG4gICAgXCJYXCI6IHBhcnNlTG9jYWxlVGltZSxcbiAgICBcInlcIjogcGFyc2VZZWFyLFxuICAgIFwiWVwiOiBwYXJzZUZ1bGxZZWFyLFxuICAgIFwiWlwiOiBwYXJzZVpvbmUsXG4gICAgXCIlXCI6IHBhcnNlTGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICAvLyBUaGVzZSByZWN1cnNpdmUgZGlyZWN0aXZlIGRlZmluaXRpb25zIG11c3QgYmUgZGVmZXJyZWQuXG4gIGZvcm1hdHMueCA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIGZvcm1hdHMpO1xuICB1dGNGb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCB1dGNGb3JtYXRzKTtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyLCBmb3JtYXRzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBbXSxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgaiA9IDAsXG4gICAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgICAgYyxcbiAgICAgICAgICBwYWQsXG4gICAgICAgICAgZm9ybWF0O1xuXG4gICAgICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSk7XG5cbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmIChzcGVjaWZpZXIuY2hhckNvZGVBdChpKSA9PT0gMzcpIHtcbiAgICAgICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgICAgIGlmICgocGFkID0gcGFkc1tjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpXSkgIT0gbnVsbCkgYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKTtcbiAgICAgICAgICBlbHNlIHBhZCA9IGMgPT09IFwiZVwiID8gXCIgXCIgOiBcIjBcIjtcbiAgICAgICAgICBpZiAoZm9ybWF0ID0gZm9ybWF0c1tjXSkgYyA9IGZvcm1hdChkYXRlLCBwYWQpO1xuICAgICAgICAgIHN0cmluZy5wdXNoKGMpO1xuICAgICAgICAgIGogPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgcmV0dXJuIHN0cmluZy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBuZXdQYXJzZShzcGVjaWZpZXIsIFopIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgZCA9IG5ld0RhdGUoMTkwMCwgdW5kZWZpbmVkLCAxKSxcbiAgICAgICAgICBpID0gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcgKz0gXCJcIiwgMCksXG4gICAgICAgICAgd2VlaywgZGF5O1xuICAgICAgaWYgKGkgIT0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cbiAgICAgIC8vIElmIGEgVU5JWCB0aW1lc3RhbXAgaXMgc3BlY2lmaWVkLCByZXR1cm4gaXQuXG4gICAgICBpZiAoXCJRXCIgaW4gZCkgcmV0dXJuIG5ldyBEYXRlKGQuUSk7XG4gICAgICBpZiAoXCJzXCIgaW4gZCkgcmV0dXJuIG5ldyBEYXRlKGQucyAqIDEwMDAgKyAoXCJMXCIgaW4gZCA/IGQuTCA6IDApKTtcblxuICAgICAgLy8gSWYgdGhpcyBpcyB1dGNQYXJzZSwgbmV2ZXIgdXNlIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAgICAgIGlmIChaICYmICEoXCJaXCIgaW4gZCkpIGQuWiA9IDA7XG5cbiAgICAgIC8vIFRoZSBhbS1wbSBmbGFnIGlzIDAgZm9yIEFNLCBhbmQgMSBmb3IgUE0uXG4gICAgICBpZiAoXCJwXCIgaW4gZCkgZC5IID0gZC5IICUgMTIgKyBkLnAgKiAxMjtcblxuICAgICAgLy8gSWYgdGhlIG1vbnRoIHdhcyBub3Qgc3BlY2lmaWVkLCBpbmhlcml0IGZyb20gdGhlIHF1YXJ0ZXIuXG4gICAgICBpZiAoZC5tID09PSB1bmRlZmluZWQpIGQubSA9IFwicVwiIGluIGQgPyBkLnEgOiAwO1xuXG4gICAgICAvLyBDb252ZXJ0IGRheS1vZi13ZWVrIGFuZCB3ZWVrLW9mLXllYXIgdG8gZGF5LW9mLXllYXIuXG4gICAgICBpZiAoXCJWXCIgaW4gZCkge1xuICAgICAgICBpZiAoZC5WIDwgMSB8fCBkLlYgPiA1MykgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSAxO1xuICAgICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICAgIHdlZWsgPSB1dGNEYXRlKG5ld0RhdGUoZC55LCAwLCAxKSksIGRheSA9IHdlZWsuZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgd2VlayA9IGRheSA+IDQgfHwgZGF5ID09PSAwID8gdXRjTW9uZGF5LmNlaWwod2VlaykgOiB1dGNNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHV0Y0RheS5vZmZzZXQod2VlaywgKGQuViAtIDEpICogNyk7XG4gICAgICAgICAgZC55ID0gd2Vlay5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgICAgIGQubSA9IHdlZWsuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICBkLmQgPSB3ZWVrLmdldFVUQ0RhdGUoKSArIChkLncgKyA2KSAlIDc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2VlayA9IGxvY2FsRGF0ZShuZXdEYXRlKGQueSwgMCwgMSkpLCBkYXkgPSB3ZWVrLmdldERheSgpO1xuICAgICAgICAgIHdlZWsgPSBkYXkgPiA0IHx8IGRheSA9PT0gMCA/IHRpbWVNb25kYXkuY2VpbCh3ZWVrKSA6IHRpbWVNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHRpbWVEYXkub2Zmc2V0KHdlZWssIChkLlYgLSAxKSAqIDcpO1xuICAgICAgICAgIGQueSA9IHdlZWsuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICBkLm0gPSB3ZWVrLmdldE1vbnRoKCk7XG4gICAgICAgICAgZC5kID0gd2Vlay5nZXREYXRlKCkgKyAoZC53ICsgNikgJSA3O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFwiV1wiIGluIGQgfHwgXCJVXCIgaW4gZCkge1xuICAgICAgICBpZiAoIShcIndcIiBpbiBkKSkgZC53ID0gXCJ1XCIgaW4gZCA/IGQudSAlIDcgOiBcIldcIiBpbiBkID8gMSA6IDA7XG4gICAgICAgIGRheSA9IFwiWlwiIGluIGQgPyB1dGNEYXRlKG5ld0RhdGUoZC55LCAwLCAxKSkuZ2V0VVRDRGF5KCkgOiBsb2NhbERhdGUobmV3RGF0ZShkLnksIDAsIDEpKS5nZXREYXkoKTtcbiAgICAgICAgZC5tID0gMDtcbiAgICAgICAgZC5kID0gXCJXXCIgaW4gZCA/IChkLncgKyA2KSAlIDcgKyBkLlcgKiA3IC0gKGRheSArIDUpICUgNyA6IGQudyArIGQuVSAqIDcgLSAoZGF5ICsgNikgJSA3O1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBhIHRpbWUgem9uZSBpcyBzcGVjaWZpZWQsIGFsbCBmaWVsZHMgYXJlIGludGVycHJldGVkIGFzIFVUQyBhbmQgdGhlblxuICAgICAgLy8gb2Zmc2V0IGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIHRpbWUgem9uZS5cbiAgICAgIGlmIChcIlpcIiBpbiBkKSB7XG4gICAgICAgIGQuSCArPSBkLlogLyAxMDAgfCAwO1xuICAgICAgICBkLk0gKz0gZC5aICUgMTAwO1xuICAgICAgICByZXR1cm4gdXRjRGF0ZShkKTtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlLCBhbGwgZmllbGRzIGFyZSBpbiBsb2NhbCB0aW1lLlxuICAgICAgcmV0dXJuIGxvY2FsRGF0ZShkKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcsIGopIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICBtID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgYyxcbiAgICAgICAgcGFyc2U7XG5cbiAgICB3aGlsZSAoaSA8IG4pIHtcbiAgICAgIGlmIChqID49IG0pIHJldHVybiAtMTtcbiAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckNvZGVBdChpKyspO1xuICAgICAgaWYgKGMgPT09IDM3KSB7XG4gICAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckF0KGkrKyk7XG4gICAgICAgIHBhcnNlID0gcGFyc2VzW2MgaW4gcGFkcyA/IHNwZWNpZmllci5jaGFyQXQoaSsrKSA6IGNdO1xuICAgICAgICBpZiAoIXBhcnNlIHx8ICgoaiA9IHBhcnNlKGQsIHN0cmluZywgaikpIDwgMCkpIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPSBzdHJpbmcuY2hhckNvZGVBdChqKyspKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gajtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUGVyaW9kKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gcGVyaW9kUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQucCA9IHBlcmlvZExvb2t1cC5nZXQoblswXS50b0xvd2VyQ2FzZSgpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTaG9ydFdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBzaG9ydFdlZWtkYXlSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC53ID0gc2hvcnRXZWVrZGF5TG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSB3ZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHdlZWtkYXlMb29rdXAuZ2V0KG5bMF0udG9Mb3dlckNhc2UoKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0TW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gc2hvcnRNb250aExvb2t1cC5nZXQoblswXS50b0xvd2VyQ2FzZSgpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQubSA9IG1vbnRoTG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZVRpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfdGltZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0RGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldE1vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UGVyaW9kKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldEhvdXJzKCkgPj0gMTIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFF1YXJ0ZXIoZCkge1xuICAgIHJldHVybiAxICsgfn4oZC5nZXRNb250aCgpIC8gMyk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1BlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRVVENIb3VycygpID49IDEyKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENRdWFydGVyKGQpIHtcbiAgICByZXR1cm4gMSArIH5+KGQuZ2V0VVRDTW9udGgoKSAvIDMpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIGYgPSBuZXdGb3JtYXQoc3BlY2lmaWVyICs9IFwiXCIsIGZvcm1hdHMpO1xuICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIGY7XG4gICAgfSxcbiAgICBwYXJzZTogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgcCA9IG5ld1BhcnNlKHNwZWNpZmllciArPSBcIlwiLCBmYWxzZSk7XG4gICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gcDtcbiAgICB9LFxuICAgIHV0Y0Zvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgdXRjRm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHV0Y1BhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIHRydWUpO1xuICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICB9O1xufVxuXG52YXIgcGFkcyA9IHtcIi1cIjogXCJcIiwgXCJfXCI6IFwiIFwiLCBcIjBcIjogXCIwXCJ9LFxuICAgIG51bWJlclJlID0gL15cXHMqXFxkKy8sIC8vIG5vdGU6IGlnbm9yZXMgbmV4dCBkaXJlY3RpdmVcbiAgICBwZXJjZW50UmUgPSAvXiUvLFxuICAgIHJlcXVvdGVSZSA9IC9bXFxcXF4kKis/fFtcXF0oKS57fV0vZztcblxuZnVuY3Rpb24gcGFkKHZhbHVlLCBmaWxsLCB3aWR0aCkge1xuICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/IFwiLVwiIDogXCJcIixcbiAgICAgIHN0cmluZyA9IChzaWduID8gLXZhbHVlIDogdmFsdWUpICsgXCJcIixcbiAgICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHJldHVybiBzaWduICsgKGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSArIHN0cmluZyA6IHN0cmluZyk7XG59XG5cbmZ1bmN0aW9uIHJlcXVvdGUocykge1xuICByZXR1cm4gcy5yZXBsYWNlKHJlcXVvdGVSZSwgXCJcXFxcJCZcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFJlKG5hbWVzKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKHJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TG9va3VwKG5hbWVzKSB7XG4gIHJldHVybiBuZXcgTWFwKG5hbWVzLm1hcCgobmFtZSwgaSkgPT4gW25hbWUudG9Mb3dlckNhc2UoKSwgaV0pKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQudyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLnUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5VID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVySVNPKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuViA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlcgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUZ1bGxZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA0KSk7XG4gIHJldHVybiBuID8gKGQueSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSArICgrblswXSA+IDY4ID8gMTkwMCA6IDIwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWm9uZShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSAvXihaKXwoWystXVxcZFxcZCkoPzo6PyhcXGRcXGQpKT8vLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuWiA9IG5bMV0gPyAwIDogLShuWzJdICsgKG5bM10gfHwgXCIwMFwiKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VRdWFydGVyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQucSA9IG5bMF0gKiAzIC0gMywgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1vbnRoTnVtYmVyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQubSA9IG5bMF0gLSAxLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF5T2ZNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZURheU9mWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICByZXR1cm4gbiA/IChkLm0gPSAwLCBkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUhvdXIyNChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLkggPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pbnV0ZXMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5NID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VTZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuUyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWlsbGlzZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gIHJldHVybiBuID8gKGQuTCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWljcm9zZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuTCA9IE1hdGguZmxvb3IoblswXSAvIDEwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTGl0ZXJhbFBlcmNlbnQoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gcGVyY2VudFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gaSArIG5bMF0ubGVuZ3RoIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gIHJldHVybiBuID8gKGQuUSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICByZXR1cm4gbiA/IChkLnMgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXlPZk1vbnRoKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldERhdGUoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhvdXIyNChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRIb3VycygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0SG91cjEyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERheU9mWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoMSArIHRpbWVEYXkuY291bnQodGltZVllYXIoZCksIGQpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFNlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgcmV0dXJuIGRheSA9PT0gMCA/IDcgOiBkYXk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHRpbWVTdW5kYXkuY291bnQodGltZVllYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGRJU08oZCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgcmV0dXJuIChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdGltZVRodXJzZGF5KGQpIDogdGltZVRodXJzZGF5LmNlaWwoZCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJJU08oZCwgcCkge1xuICBkID0gZElTTyhkKTtcbiAgcmV0dXJuIHBhZCh0aW1lVGh1cnNkYXkuY291bnQodGltZVllYXIoZCksIGQpICsgKHRpbWVZZWFyKGQpLmdldERheSgpID09PSA0KSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXkoZCkge1xuICByZXR1cm4gZC5nZXREYXkoKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodGltZU1vbmRheS5jb3VudCh0aW1lWWVhcihkKSAtIDEsIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0WWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0WWVhcklTTyhkLCBwKSB7XG4gIGQgPSBkSVNPKGQpO1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEZ1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEZ1bGxZZWFySVNPKGQsIHApIHtcbiAgdmFyIGRheSA9IGQuZ2V0RGF5KCk7XG4gIGQgPSAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IHRpbWVUaHVyc2RheShkKSA6IHRpbWVUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0Wm9uZShkKSB7XG4gIHZhciB6ID0gZC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICByZXR1cm4gKHogPiAwID8gXCItXCIgOiAoeiAqPSAtMSwgXCIrXCIpKVxuICAgICAgKyBwYWQoeiAvIDYwIHwgMCwgXCIwXCIsIDIpXG4gICAgICArIHBhZCh6ICUgNjAsIFwiMFwiLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENEYXRlKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMjQoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0hvdXIxMihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENEYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKDEgKyB1dGNEYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWxsaXNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWNyb3NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApICsgXCIwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTW9udGhOdW1iZXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTW9udGgoKSArIDEsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaW51dGVzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01pbnV0ZXMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDU2Vjb25kcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheShkKSB7XG4gIHZhciBkb3cgPSBkLmdldFVUQ0RheSgpO1xuICByZXR1cm4gZG93ID09PSAwID8gNyA6IGRvdztcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodXRjU3VuZGF5LmNvdW50KHV0Y1llYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIFVUQ2RJU08oZCkge1xuICB2YXIgZGF5ID0gZC5nZXRVVENEYXkoKTtcbiAgcmV0dXJuIChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdXRjVGh1cnNkYXkoZCkgOiB1dGNUaHVyc2RheS5jZWlsKGQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVySVNPKGQsIHApIHtcbiAgZCA9IFVUQ2RJU08oZCk7XG4gIHJldHVybiBwYWQodXRjVGh1cnNkYXkuY291bnQodXRjWWVhcihkKSwgZCkgKyAodXRjWWVhcihkKS5nZXRVVENEYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0VVRDRGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y01vbmRheS5jb3VudCh1dGNZZWFyKGQpIC0gMSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENZZWFySVNPKGQsIHApIHtcbiAgZCA9IFVUQ2RJU08oZCk7XG4gIHJldHVybiBwYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRnVsbFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRnVsbFllYXJJU08oZCwgcCkge1xuICB2YXIgZGF5ID0gZC5nZXRVVENEYXkoKTtcbiAgZCA9IChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdXRjVGh1cnNkYXkoZCkgOiB1dGNUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDWm9uZSgpIHtcbiAgcmV0dXJuIFwiKzAwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TGl0ZXJhbFBlcmNlbnQoKSB7XG4gIHJldHVybiBcIiVcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5peFRpbWVzdGFtcChkKSB7XG4gIHJldHVybiArZDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMoZCkge1xuICByZXR1cm4gTWF0aC5mbG9vcigrZCAvIDEwMDApO1xufVxuIiwiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGUuanNcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgdGltZUZvcm1hdDtcbmV4cG9ydCB2YXIgdGltZVBhcnNlO1xuZXhwb3J0IHZhciB1dGNGb3JtYXQ7XG5leHBvcnQgdmFyIHV0Y1BhcnNlO1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGF0ZVRpbWU6IFwiJXgsICVYXCIsXG4gIGRhdGU6IFwiJS1tLyUtZC8lWVwiLFxuICB0aW1lOiBcIiUtSTolTTolUyAlcFwiLFxuICBwZXJpb2RzOiBbXCJBTVwiLCBcIlBNXCJdLFxuICBkYXlzOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXSxcbiAgc2hvcnREYXlzOiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXG4gIG1vbnRoczogW1wiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIl0sXG4gIHNob3J0TW9udGhzOiBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICB0aW1lRm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgdGltZVBhcnNlID0gbG9jYWxlLnBhcnNlO1xuICB1dGNGb3JtYXQgPSBsb2NhbGUudXRjRm9ybWF0O1xuICB1dGNQYXJzZSA9IGxvY2FsZS51dGNQYXJzZTtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImltcG9ydCB7IE1vbWVudCB9IGZyb20gXCJtb21lbnRcIjtcclxuXHJcbmV4cG9ydCBlbnVtIFNlYXJjaFR5cGUge1xyXG4gICAgVGFnLFxyXG4gICAgRnJvbnRtYXR0ZXIsXHJcbiAgICBXaWtpLFxyXG4gICAgVGV4dCxcclxuICAgIGR2RmllbGQsXHJcbiAgICBUYWJsZSxcclxuICAgIEZpbGVNZXRhLFxyXG4gICAgVGFzayxcclxufVxyXG5cclxuZXhwb3J0IGVudW0gT3V0cHV0VHlwZSB7XHJcbiAgICBMaW5lLFxyXG4gICAgQmFyLFxyXG4gICAgUGllLFxyXG4gICAgUmFkYXIsXHJcbiAgICBTdW1tYXJ5LFxyXG4gICAgVGFibGUsXHJcbiAgICBNb250aCxcclxuICAgIEhlYXRtYXAsXHJcbiAgICBCdWxsZXQsXHJcbiAgICBVbmtub3duLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBWYWx1ZVR5cGUge1xyXG4gICAgTnVtYmVyLFxyXG4gICAgSW50LFxyXG4gICAgRGF0ZSxcclxuICAgIFRpbWUsXHJcbiAgICBEYXRlVGltZSxcclxuICAgIFN0cmluZyxcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERhdGFQb2ludCB7XHJcbiAgICBkYXRlOiBNb21lbnQ7XHJcbiAgICB2YWx1ZTogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGU6IE1vbWVudCwgdmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuZGF0ZSA9IGRhdGU7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUXVlcnkge1xyXG4gICAgcHJpdmF0ZSB0eXBlOiBTZWFyY2hUeXBlIHwgbnVsbDtcclxuICAgIHByaXZhdGUgc3ViVHlwZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSB0YXJnZXQ6IHN0cmluZztcclxuICAgIHByaXZhdGUgcGFyZW50VGFyZ2V0OiBzdHJpbmcgfCBudWxsO1xyXG4gICAgcHJpdmF0ZSBzZXBhcmF0b3I6IHN0cmluZzsgLy8gbXVsdGlwbGUgdmFsdWUgc2VwYXJhdG9yXHJcbiAgICBwcml2YXRlIGlkOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIGFjY2Vzc29yOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIGFjY2Vzc29yMTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBhY2Nlc3NvcjI6IG51bWJlcjtcclxuICAgIHByaXZhdGUgbnVtVGFyZ2V0czogbnVtYmVyO1xyXG5cclxuICAgIHZhbHVlVHlwZTogVmFsdWVUeXBlO1xyXG4gICAgdXNlZEFzWERhdGFzZXQ6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IoaWQ6IG51bWJlciwgc2VhcmNoVHlwZTogU2VhcmNoVHlwZSwgc2VhcmNoVGFyZ2V0OiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnR5cGUgPSBzZWFyY2hUeXBlO1xyXG4gICAgICAgIHRoaXMuc3ViVHlwZSA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy50YXJnZXQgPSBzZWFyY2hUYXJnZXQ7XHJcbiAgICAgICAgdGhpcy5zZXBhcmF0b3IgPSBcIi9cIjtcclxuICAgICAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICAgICAgdGhpcy5hY2Nlc3NvciA9IC0xO1xyXG4gICAgICAgIHRoaXMuYWNjZXNzb3IxID0gLTE7XHJcbiAgICAgICAgdGhpcy5hY2Nlc3NvcjIgPSAtMTtcclxuICAgICAgICB0aGlzLnZhbHVlVHlwZSA9IFZhbHVlVHlwZS5OdW1iZXI7XHJcbiAgICAgICAgdGhpcy51c2VkQXNYRGF0YXNldCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubnVtVGFyZ2V0cyA9IDA7XHJcblxyXG4gICAgICAgIGlmIChzZWFyY2hUeXBlID09PSBTZWFyY2hUeXBlLlRhYmxlKSB7XHJcbiAgICAgICAgICAgIC8vIHNlYXJjaFRhcmdldCAtLT4ge3tmaWxlUGF0aH19W3t7dGFibGV9fV1be3tjb2x1bW59fV1cclxuICAgICAgICAgICAgbGV0IHN0clJlZ2V4ID1cclxuICAgICAgICAgICAgICAgIFwiXFxcXFsoPzxhY2Nlc3Nvcj5bMC05XSspXFxcXF1cXFxcWyg/PGFjY2Vzc29yMT5bMC05XSspXFxcXF0oXFxcXFsoPzxhY2Nlc3NvcjI+WzAtOV0rKVxcXFxdKT9cIjtcclxuICAgICAgICAgICAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChzdHJSZWdleCwgXCJnbVwiKTtcclxuICAgICAgICAgICAgbGV0IG1hdGNoO1xyXG4gICAgICAgICAgICB3aGlsZSAoKG1hdGNoID0gcmVnZXguZXhlYyhzZWFyY2hUYXJnZXQpKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtYXRjaC5ncm91cHMuYWNjZXNzb3IgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYWNjZXNzb3IgPSBwYXJzZUZsb2F0KG1hdGNoLmdyb3Vwcy5hY2Nlc3Nvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE51bWJlci5pc051bWJlcihhY2Nlc3NvcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtYXRjaC5ncm91cHMuYWNjZXNzb3IxICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYWNjZXNzb3IxID0gcGFyc2VGbG9hdChtYXRjaC5ncm91cHMuYWNjZXNzb3IxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOdW1iZXIoYWNjZXNzb3IxKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhY2Nlc3NvcjI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgbWF0Y2guZ3JvdXBzLmFjY2Vzc29yMiAhPT1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NvcjIgPSBwYXJzZUZsb2F0KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2guZ3JvdXBzLmFjY2Vzc29yMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY2Nlc3NvciA9IGFjY2Vzc29yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWNjZXNzb3IxID0gYWNjZXNzb3IxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOdW1iZXIoYWNjZXNzb3IyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjY2Vzc29yMiA9IGFjY2Vzc29yMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnRUYXJnZXQgPSBzZWFyY2hUYXJnZXQucmVwbGFjZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgc3RyUmVnZXggPSBcIlxcXFxbKD88YWNjZXNzb3I+WzAtOV0rKVxcXFxdXCI7XHJcbiAgICAgICAgICAgIGxldCByZWdleCA9IG5ldyBSZWdFeHAoc3RyUmVnZXgsIFwiZ21cIik7XHJcbiAgICAgICAgICAgIGxldCBtYXRjaDtcclxuICAgICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHJlZ2V4LmV4ZWMoc2VhcmNoVGFyZ2V0KSkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWF0Y2guZ3JvdXBzLmFjY2Vzc29yICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFjY2Vzc29yID0gcGFyc2VGbG9hdChtYXRjaC5ncm91cHMuYWNjZXNzb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOdW1iZXIoYWNjZXNzb3IpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWNjZXNzb3IgPSBhY2Nlc3NvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnRUYXJnZXQgPSBzZWFyY2hUYXJnZXQucmVwbGFjZShyZWdleCwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBlcXVhbFRvKG90aGVyOiBRdWVyeSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09IG90aGVyLnR5cGUgJiYgdGhpcy50YXJnZXQgPT09IG90aGVyLnRhcmdldCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRUeXBlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFN1YlR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ViVHlwZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0U3ViVHlwZShzdWJUeXBlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnN1YlR5cGUgPSBzdWJUeXBlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRUYXJnZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRQYXJlbnRUYXJnZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50VGFyZ2V0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRJZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0QWNjZXNzb3IoaW5kZXggPSAwKSB7XHJcbiAgICAgICAgc3dpdGNoIChpbmRleCkge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hY2Nlc3NvcjtcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWNjZXNzb3IxO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hY2Nlc3NvcjI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0U2VwYXJhdG9yKHNlcDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5zZXBhcmF0b3IgPSBzZXA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFNlcGFyYXRvcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXBhcmF0b3I7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZE51bVRhcmdldHMobnVtOiBudW1iZXIgPSAxKSB7XHJcbiAgICAgICAgdGhpcy5udW1UYXJnZXRzID0gdGhpcy5udW1UYXJnZXRzICsgbnVtO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXROdW1UYXJnZXRzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm51bVRhcmdldHM7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUXVlcnlWYWx1ZVBhaXIge1xyXG4gICAgcXVlcnk6IFF1ZXJ5O1xyXG4gICAgdmFsdWU6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERhdGFzZXQgaW1wbGVtZW50cyBJdGVyYWJsZUl0ZXJhdG9yPERhdGFQb2ludD4ge1xyXG4gICAgLy8gQXJyYXkgb2YgRGF0YVBvaW50c1xyXG4gICAgcHJpdmF0ZSBuYW1lOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHF1ZXJ5OiBRdWVyeTtcclxuICAgIHByaXZhdGUgdmFsdWVzOiBudW1iZXJbXTtcclxuICAgIHByaXZhdGUgcGFyZW50OiBEYXRhc2V0cztcclxuICAgIHByaXZhdGUgaWQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgeU1pbjogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSB5TWF4OiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHN0YXJ0RGF0ZTogTW9tZW50O1xyXG4gICAgcHJpdmF0ZSBlbmREYXRlOiBNb21lbnQ7XHJcbiAgICBwcml2YXRlIG51bVRhcmdldHM6IG51bWJlcjtcclxuICAgIHByaXZhdGUgbGluZUluZm86IExpbmVJbmZvO1xyXG4gICAgcHJpdmF0ZSBiYXJJbmZvOiBCYXJJbmZvO1xyXG5cclxuICAgIHZhbHVlVHlwZTogVmFsdWVUeXBlO1xyXG5cclxuICAgIHByaXZhdGUgY3VycmVudEluZGV4ID0gMDsgLy8gSXRlcmFibGVJdGVyYXRvclxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBhcmVudDogRGF0YXNldHMsIHF1ZXJ5OiBRdWVyeSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IFwidW50aXRsZWRcIjtcclxuICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XHJcbiAgICAgICAgdGhpcy52YWx1ZXMgPSBbXTtcclxuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcclxuICAgICAgICB0aGlzLmlkID0gLTE7XHJcbiAgICAgICAgdGhpcy55TWluID0gbnVsbDtcclxuICAgICAgICB0aGlzLnlNYXggPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc3RhcnREYXRlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmVuZERhdGUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubnVtVGFyZ2V0cyA9IDA7XHJcbiAgICAgICAgdGhpcy5saW5lSW5mbyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5iYXJJbmZvID0gbnVsbDtcclxuICAgICAgICB0aGlzLnZhbHVlVHlwZSA9IHF1ZXJ5LnZhbHVlVHlwZTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaW5kID0gMDsgaW5kIDwgcGFyZW50LmdldERhdGVzKCkubGVuZ3RoOyBpbmQrKykge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlcy5wdXNoKG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0TmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXROYW1lKG5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldElkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRJZChpZDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGROdW1UYXJnZXRzKG51bTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5udW1UYXJnZXRzID0gdGhpcy5udW1UYXJnZXRzICsgbnVtO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXROdW1UYXJnZXRzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm51bVRhcmdldHM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFZhbHVlKGRhdGU6IE1vbWVudCwgZGF5U2hpZnQ6IG51bWJlciA9IDApIHtcclxuICAgICAgICBsZXQgaW5kID0gdGhpcy5wYXJlbnQuZ2V0SW5kZXhPZkRhdGUoZGF0ZSkgKyBNYXRoLmZsb29yKGRheVNoaWZ0KTtcclxuICAgICAgICBpZiAoaW5kID49IDAgJiYgaW5kIDwgdGhpcy52YWx1ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlc1tpbmRdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0VmFsdWUoZGF0ZTogTW9tZW50LCB2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGluZCA9IHRoaXMucGFyZW50LmdldEluZGV4T2ZEYXRlKGRhdGUpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGluZCk7XHJcbiAgICAgICAgaWYgKGluZCA+PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVzW2luZF0gPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnlNaW4gPT09IG51bGwgfHwgdmFsdWUgPCB0aGlzLnlNaW4pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMueU1pbiA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnlNYXggPT09IG51bGwgfHwgdmFsdWUgPiB0aGlzLnlNYXgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMueU1heCA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXJ0RGF0ZSA9PT0gbnVsbCB8fCBkYXRlIDwgdGhpcy5zdGFydERhdGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnREYXRlID0gZGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVuZERhdGUgPT09IG51bGwgfHwgZGF0ZSA+IHRoaXMuZW5kRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbmREYXRlID0gZGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRZTWluKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnlNaW47XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFlNYXgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMueU1heDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0U3RhcnREYXRlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0RGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RW5kRGF0ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbmREYXRlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzaGlmdChzaGlmdEFtb3VudDogbnVtYmVyKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaW5kID0gMDsgaW5kIDwgdGhpcy52YWx1ZXMubGVuZ3RoOyBpbmQrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy52YWx1ZXNbaW5kXSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZXNbaW5kXSA9IHRoaXMudmFsdWVzW2luZF0gKyBzaGlmdEFtb3VudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnlNaW4gPSB0aGlzLnlNaW4gKyBzaGlmdEFtb3VudDtcclxuICAgICAgICB0aGlzLnlNYXggPSB0aGlzLnlNYXggKyBzaGlmdEFtb3VudDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0UGVuYWx0eShwZW5hbHR5OiBudW1iZXIpIHtcclxuICAgICAgICBmb3IgKGxldCBpbmQgPSAwOyBpbmQgPCB0aGlzLnZhbHVlcy5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlc1tpbmRdID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlc1tpbmRdID0gcGVuYWx0eTtcclxuICAgICAgICAgICAgICAgIGlmIChwZW5hbHR5IDwgdGhpcy55TWluKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55TWluID0gcGVuYWx0eTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChwZW5hbHR5ID4gdGhpcy55TWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55TWF4ID0gcGVuYWx0eTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0UXVlcnkoKTogUXVlcnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhY2N1bXVsYXRlVmFsdWVzKCkge1xyXG4gICAgICAgIGxldCBhY2N1bVZhbHVlID0gMC4wO1xyXG4gICAgICAgIGZvciAobGV0IGluZCA9IDA7IGluZCA8IHRoaXMudmFsdWVzLmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudmFsdWVzW2luZF0gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGFjY3VtVmFsdWUgKz0gdGhpcy52YWx1ZXNbaW5kXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnZhbHVlc1tpbmRdID0gYWNjdW1WYWx1ZTtcclxuICAgICAgICAgICAgaWYgKGFjY3VtVmFsdWUgPCB0aGlzLnlNaW4pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMueU1pbiA9IGFjY3VtVmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFjY3VtVmFsdWUgPiB0aGlzLnlNYXgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMueU1heCA9IGFjY3VtVmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFZhbHVlcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldExlbmd0aCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXMubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRMZW5ndGhOb3ROdWxsKCkge1xyXG4gICAgICAgIGxldCBjb3VudE5vdE51bGwgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGluZCA9IDA7IGluZCA8IHRoaXMudmFsdWVzLmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudmFsdWVzW2luZF0gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGNvdW50Tm90TnVsbCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb3VudE5vdE51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgbmV4dCgpOiBJdGVyYXRvclJlc3VsdDxEYXRhUG9pbnQ+IHtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50SW5kZXggPCB0aGlzLnZhbHVlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgbGV0IGluZCA9IHRoaXMuY3VycmVudEluZGV4Kys7XHJcbiAgICAgICAgICAgIGxldCBkYXRhUG9pbnQgPSBuZXcgRGF0YVBvaW50KFxyXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQuZ2V0RGF0ZXMoKVtpbmRdLFxyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZXNbaW5kXVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgZG9uZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YVBvaW50LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEluZGV4ID0gMDtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGRvbmU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxEYXRhUG9pbnQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERhdGFzZXRzIGltcGxlbWVudHMgSXRlcmFibGVJdGVyYXRvcjxEYXRhc2V0PiB7XHJcbiAgICAvLyBJdGVyYWJsZSBvZiBEYXRhc2V0XHJcbiAgICBwcml2YXRlIGRhdGVzOiBNb21lbnRbXTtcclxuICAgIHByaXZhdGUgZGF0YXNldHM6IERhdGFzZXRbXTtcclxuXHJcbiAgICBwcml2YXRlIGN1cnJlbnRJbmRleCA9IDA7IC8vIEl0ZXJhYmxlSXRlcmF0b3JcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzdGFydERhdGU6IE1vbWVudCwgZW5kRGF0ZTogTW9tZW50KSB7XHJcbiAgICAgICAgdGhpcy5kYXRlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZGF0YXNldHMgPSBbXTtcclxuXHJcbiAgICAgICAgbGV0IGNEYXRhID0gc3RhcnREYXRlLmNyZWF0aW9uRGF0YSgpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGNEYXRhKTtcclxuICAgICAgICBjb25zdCBkYXRlRm9ybWF0ID0gY0RhdGEuZm9ybWF0LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgZm9yIChcclxuICAgICAgICAgICAgbGV0IGN1ckRhdGUgPSBzdGFydERhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgY3VyRGF0ZSA8PSBlbmREYXRlO1xyXG4gICAgICAgICAgICBjdXJEYXRlLmFkZCgxLCBcImRheXNcIilcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgbGV0IG5ld0RhdGUgPSB3aW5kb3cubW9tZW50KFxyXG4gICAgICAgICAgICAgICAgY3VyRGF0ZS5mb3JtYXQoZGF0ZUZvcm1hdCksXHJcbiAgICAgICAgICAgICAgICBkYXRlRm9ybWF0LFxyXG4gICAgICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGVzLnB1c2gobmV3RGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuZGF0ZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjcmVhdGVEYXRhc2V0KHF1ZXJ5OiBRdWVyeSwgcmVuZGVySW5mbzogUmVuZGVySW5mbykge1xyXG4gICAgICAgIGxldCBkYXRhc2V0ID0gbmV3IERhdGFzZXQodGhpcywgcXVlcnkpO1xyXG4gICAgICAgIGRhdGFzZXQuc2V0SWQocXVlcnkuZ2V0SWQoKSk7XHJcbiAgICAgICAgaWYgKHJlbmRlckluZm8pIHtcclxuICAgICAgICAgICAgZGF0YXNldC5zZXROYW1lKHJlbmRlckluZm8uZGF0YXNldE5hbWVbcXVlcnkuZ2V0SWQoKV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5kYXRhc2V0cy5wdXNoKGRhdGFzZXQpO1xyXG5cclxuICAgICAgICByZXR1cm4gZGF0YXNldDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0SW5kZXhPZkRhdGUoZGF0ZTogTW9tZW50KSB7XHJcbiAgICAgICAgbGV0IGNEYXRhID0gZGF0ZS5jcmVhdGlvbkRhdGEoKTtcclxuICAgICAgICBjb25zdCBkYXRlRm9ybWF0ID0gY0RhdGEuZm9ybWF0LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaW5kID0gMDsgaW5kIDwgdGhpcy5kYXRlcy5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0ZXNbaW5kXS5mb3JtYXQoZGF0ZUZvcm1hdCkgPT09IGRhdGUuZm9ybWF0KGRhdGVGb3JtYXQpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldERhdGFzZXRCeVF1ZXJ5KHF1ZXJ5OiBRdWVyeSkge1xyXG4gICAgICAgIGZvciAobGV0IGRhdGFzZXQgb2YgdGhpcy5kYXRhc2V0cykge1xyXG4gICAgICAgICAgICBpZiAoZGF0YXNldC5nZXRRdWVyeSgpLmVxdWFsVG8ocXVlcnkpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YXNldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RGF0YXNldEJ5SWQoaWQ6IG51bWJlcikge1xyXG4gICAgICAgIGZvciAobGV0IGRhdGFzZXQgb2YgdGhpcy5kYXRhc2V0cykge1xyXG4gICAgICAgICAgICBpZiAoZGF0YXNldC5nZXRJZCgpID09PSBpZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFzZXQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRYRGF0YXNldElkcygpIHtcclxuICAgICAgICBsZXQgaWRzOiBBcnJheTxudW1iZXI+ID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgZGF0YXNldCBvZiB0aGlzLmRhdGFzZXRzKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhc2V0LmdldFF1ZXJ5KCkudXNlZEFzWERhdGFzZXQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBpZCA9IGRhdGFzZXQuZ2V0UXVlcnkoKS5nZXRJZCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpZHMuaW5jbHVkZXMoaWQpICYmIGlkICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkcy5wdXNoKGlkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaWRzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXREYXRlcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRlcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0TmFtZXMoKSB7XHJcbiAgICAgICAgbGV0IG5hbWVzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgZGF0YXNldCBvZiB0aGlzLmRhdGFzZXRzKSB7XHJcbiAgICAgICAgICAgIG5hbWVzLnB1c2goZGF0YXNldC5nZXROYW1lKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmFtZXM7XHJcbiAgICB9XHJcblxyXG4gICAgbmV4dCgpOiBJdGVyYXRvclJlc3VsdDxEYXRhc2V0PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudEluZGV4IDwgdGhpcy5kYXRhc2V0cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGRvbmU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuZGF0YXNldHNbdGhpcy5jdXJyZW50SW5kZXgrK10sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50SW5kZXggPSAwO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgZG9uZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBbU3ltYm9sLml0ZXJhdG9yXSgpOiBJdGVyYWJsZUl0ZXJhdG9yPERhdGFzZXQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJlbmRlckluZm8ge1xyXG4gICAgLy8gSW5wdXRcclxuICAgIHF1ZXJpZXM6IFF1ZXJ5W107XHJcbiAgICB4RGF0YXNldDogbnVtYmVyW107XHJcbiAgICBmb2xkZXI6IHN0cmluZztcclxuICAgIGRhdGVGb3JtYXQ6IHN0cmluZztcclxuICAgIGRhdGVGb3JtYXRQcmVmaXg6IHN0cmluZztcclxuICAgIGRhdGVGb3JtYXRTdWZmaXg6IHN0cmluZztcclxuICAgIHN0YXJ0RGF0ZTogTW9tZW50IHwgbnVsbDtcclxuICAgIGVuZERhdGU6IE1vbWVudCB8IG51bGw7XHJcbiAgICBkYXRhc2V0TmFtZTogc3RyaW5nW107XHJcbiAgICBjb25zdFZhbHVlOiBudW1iZXJbXTtcclxuICAgIGlnbm9yZUF0dGFjaGVkVmFsdWU6IGJvb2xlYW5bXTtcclxuICAgIGlnbm9yZVplcm9WYWx1ZTogYm9vbGVhbltdO1xyXG4gICAgYWNjdW06IGJvb2xlYW5bXTtcclxuICAgIHBlbmFsdHk6IG51bWJlcltdO1xyXG4gICAgdmFsdWVTaGlmdDogbnVtYmVyW107XHJcbiAgICB2YWx1ZVR5cGU6IHN0cmluZ1tdOyAvLyBudW1iZXIvZmxvYXQsIGludCwgc3RyaW5nLCBib29sZWFuLCBkYXRlLCB0aW1lLCBkYXRldGltZVxyXG5cclxuICAgIGRhdGFBcmVhU2l6ZTogU2l6ZTtcclxuICAgIG1hcmdpbjogTWFyZ2luO1xyXG4gICAgdG9vbHRpcFNpemU6IFNpemU7XHJcblxyXG4gICAgZml4ZWRTY2FsZTogbnVtYmVyO1xyXG4gICAgZml0UGFuZWxXaWR0aDogYm9vbGVhbjtcclxuXHJcbiAgICBvdXRwdXQ6IGFueVtdO1xyXG4gICAgbGluZTogTGluZUluZm9bXTtcclxuICAgIGJhcjogQmFySW5mb1tdO1xyXG4gICAgcGllOiBQaWVJbmZvW107XHJcbiAgICBzdW1tYXJ5OiBTdW1tYXJ5SW5mb1tdO1xyXG4gICAgbW9udGg6IE1vbnRoSW5mb1tdO1xyXG4gICAgaGVhdG1hcDogSGVhdG1hcEluZm9bXTtcclxuICAgIGJ1bGxldDogQnVsbGV0SW5mb1tdO1xyXG5cclxuICAgIHB1YmxpYyBkYXRhc2V0czogRGF0YXNldHMgfCBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHF1ZXJpZXM6IFF1ZXJ5W10pIHtcclxuICAgICAgICB0aGlzLnF1ZXJpZXMgPSBxdWVyaWVzO1xyXG4gICAgICAgIHRoaXMueERhdGFzZXQgPSBbXTsgLy8gdXNlIGZpbGUgbmFtZVxyXG4gICAgICAgIHRoaXMuZm9sZGVyID0gXCIvXCI7XHJcbiAgICAgICAgdGhpcy5kYXRlRm9ybWF0ID0gXCJZWVlZLU1NLUREXCI7XHJcbiAgICAgICAgdGhpcy5kYXRlRm9ybWF0UHJlZml4ID0gXCJcIjtcclxuICAgICAgICB0aGlzLmRhdGVGb3JtYXRTdWZmaXggPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuc3RhcnREYXRlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmVuZERhdGUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZGF0YXNldE5hbWUgPSBbXTsgLy8gdW50aXRsZWRcclxuICAgICAgICB0aGlzLmNvbnN0VmFsdWUgPSBbMS4wXTtcclxuICAgICAgICB0aGlzLmlnbm9yZUF0dGFjaGVkVmFsdWUgPSBbXTsgLy8gZmFsc2VcclxuICAgICAgICB0aGlzLmlnbm9yZVplcm9WYWx1ZSA9IFtdOyAvLyBmYWxzZVxyXG4gICAgICAgIHRoaXMuYWNjdW0gPSBbXTsgLy8gZmFsc2UsIGFjY3VtIHZhbHVlcyBzdGFydCBmcm9tIHplcm8gb3ZlciBkYXlzXHJcbiAgICAgICAgdGhpcy5wZW5hbHR5ID0gW107IC8vIG51bGwsIHVzZSB0aGlzIHZhbHVlIGluc3RlYWQgb2YgbnVsbCB2YWx1ZVxyXG4gICAgICAgIHRoaXMudmFsdWVTaGlmdCA9IFtdO1xyXG4gICAgICAgIHRoaXMudmFsdWVUeXBlID0gW107XHJcblxyXG4gICAgICAgIHRoaXMuZGF0YUFyZWFTaXplID0gbmV3IFNpemUoMzAwLCAzMDApO1xyXG4gICAgICAgIHRoaXMubWFyZ2luID0gbmV3IE1hcmdpbigxMCwgMTAsIDEwLCAxMCk7IC8vIHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdFxyXG4gICAgICAgIHRoaXMudG9vbHRpcFNpemUgPSBuZXcgU2l6ZSg5MCwgNDUpO1xyXG5cclxuICAgICAgICB0aGlzLmZpeGVkU2NhbGUgPSAxLjA7XHJcbiAgICAgICAgdGhpcy5maXRQYW5lbFdpZHRoID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMub3V0cHV0ID0gW107XHJcbiAgICAgICAgdGhpcy5saW5lID0gW107XHJcbiAgICAgICAgdGhpcy5iYXIgPSBbXTtcclxuICAgICAgICB0aGlzLnBpZSA9IFtdO1xyXG4gICAgICAgIHRoaXMuc3VtbWFyeSA9IFtdO1xyXG4gICAgICAgIHRoaXMubW9udGggPSBbXTtcclxuICAgICAgICB0aGlzLmhlYXRtYXAgPSBbXTtcclxuICAgICAgICB0aGlzLmJ1bGxldCA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLmRhdGFzZXRzID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0UXVlcnlCeUlkKGlkOiBudW1iZXIpIHtcclxuICAgICAgICBmb3IgKGxldCBxdWVyeSBvZiB0aGlzLnF1ZXJpZXMpIHtcclxuICAgICAgICAgICAgaWYgKHF1ZXJ5LmdldElkKCkgPT09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBPdXRwdXRJbmZvIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge31cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvbW1vbkNoYXJ0SW5mbyBleHRlbmRzIE91dHB1dEluZm8ge1xyXG4gICAgdGl0bGU6IHN0cmluZztcclxuICAgIHhBeGlzTGFiZWw6IHN0cmluZztcclxuICAgIHhBeGlzQ29sb3I6IHN0cmluZztcclxuICAgIHhBeGlzTGFiZWxDb2xvcjogc3RyaW5nO1xyXG4gICAgeUF4aXNMYWJlbDogc3RyaW5nW107XHJcbiAgICB5QXhpc0NvbG9yOiBzdHJpbmdbXTtcclxuICAgIHlBeGlzTGFiZWxDb2xvcjogc3RyaW5nW107XHJcbiAgICB5QXhpc1VuaXQ6IHN0cmluZ1tdO1xyXG4gICAgeU1pbjogbnVtYmVyW107XHJcbiAgICB5TWF4OiBudW1iZXJbXTtcclxuICAgIHJldmVyc2VZQXhpczogYm9vbGVhbltdO1xyXG4gICAgYWxsb3dJbnNwZWN0RGF0YTogYm9vbGVhbjtcclxuICAgIHNob3dMZWdlbmQ6IGJvb2xlYW47XHJcbiAgICBsZWdlbmRQb3NpdGlvbjogc3RyaW5nO1xyXG4gICAgbGVnZW5kT3JpZW50YXRpb246IHN0cmluZztcclxuICAgIGxlZ2VuZEJnQ29sb3I6IHN0cmluZztcclxuICAgIGxlZ2VuZEJvcmRlckNvbG9yOiBzdHJpbmc7XHJcbiAgICBjaGFydFR5cGU6IE91dHB1dFR5cGU7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnRpdGxlID0gXCJcIjtcclxuICAgICAgICB0aGlzLnhBeGlzTGFiZWwgPSBcIkRhdGVcIjtcclxuICAgICAgICB0aGlzLnhBeGlzQ29sb3IgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMueEF4aXNMYWJlbENvbG9yID0gXCJcIjtcclxuICAgICAgICB0aGlzLnlBeGlzTGFiZWwgPSBbXTsgLy8gXCJWYWx1ZVwiLCAyIGVsZW1lbnRzXHJcbiAgICAgICAgdGhpcy55QXhpc0NvbG9yID0gW107IC8vIFwiXCIsIDIgZWxlbWVudHNcclxuICAgICAgICB0aGlzLnlBeGlzTGFiZWxDb2xvciA9IFtdOyAvLyBcIlwiLCAyIGVsZW1lbnRzXHJcbiAgICAgICAgdGhpcy55QXhpc1VuaXQgPSBbXTsgLy8gXCJcIiwgMiBlbGVtZW50c1xyXG4gICAgICAgIHRoaXMueU1pbiA9IFtdOyAvLyBudWxsLCAyIGVsZW1lbnRzXHJcbiAgICAgICAgdGhpcy55TWF4ID0gW107IC8vIG51bGwsIDIgZWxlbWVudHNcclxuICAgICAgICB0aGlzLnJldmVyc2VZQXhpcyA9IFtdOyAvLyBmYWxzZSwgMiBlbGVtZW50c1xyXG4gICAgICAgIHRoaXMuYWxsb3dJbnNwZWN0RGF0YSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zaG93TGVnZW5kID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5sZWdlbmRQb3NpdGlvbiA9IFwiXCI7IC8vIHRvcCwgYm90dG9tLCBsZWZ0LCByaWdodFxyXG4gICAgICAgIHRoaXMubGVnZW5kT3JpZW50YXRpb24gPSBcIlwiOyAvLyBob3Jpem9udGFsLCB2ZXJ0aWNhbFxyXG4gICAgICAgIHRoaXMubGVnZW5kQmdDb2xvciA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5sZWdlbmRCb3JkZXJDb2xvciA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5jaGFydFR5cGUgPSBPdXRwdXRUeXBlLlVua25vd247XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEdldENoYXJ0VHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGFydFR5cGU7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMaW5lSW5mbyBleHRlbmRzIENvbW1vbkNoYXJ0SW5mbyB7XHJcbiAgICBsaW5lQ29sb3I6IHN0cmluZ1tdO1xyXG4gICAgbGluZVdpZHRoOiBudW1iZXJbXTtcclxuICAgIHNob3dMaW5lOiBib29sZWFuW107XHJcbiAgICBzaG93UG9pbnQ6IGJvb2xlYW5bXTtcclxuICAgIHBvaW50Q29sb3I6IHN0cmluZ1tdO1xyXG4gICAgcG9pbnRCb3JkZXJDb2xvcjogc3RyaW5nW107XHJcbiAgICBwb2ludEJvcmRlcldpZHRoOiBudW1iZXJbXTtcclxuICAgIHBvaW50U2l6ZTogbnVtYmVyW107XHJcbiAgICBmaWxsR2FwOiBib29sZWFuW107XHJcbiAgICB5QXhpc0xvY2F0aW9uOiBzdHJpbmdbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMubGluZUNvbG9yID0gW107IC8vIFwiXCJcclxuICAgICAgICB0aGlzLmxpbmVXaWR0aCA9IFtdOyAvLyAxLjVcclxuICAgICAgICB0aGlzLnNob3dMaW5lID0gW107IC8vIHRydWVcclxuICAgICAgICB0aGlzLnNob3dQb2ludCA9IFtdOyAvLyB0cnVlXHJcbiAgICAgICAgdGhpcy5wb2ludENvbG9yID0gW107IC8vICM2OWIzYTJcclxuICAgICAgICB0aGlzLnBvaW50Qm9yZGVyQ29sb3IgPSBbXTtcclxuICAgICAgICB0aGlzLnBvaW50Qm9yZGVyV2lkdGggPSBbXTsgLy8gMC4wXHJcbiAgICAgICAgdGhpcy5wb2ludFNpemUgPSBbXTsgLy8gMy4wXHJcbiAgICAgICAgdGhpcy5maWxsR2FwID0gW107IC8vIGZhbHNlXHJcbiAgICAgICAgdGhpcy55QXhpc0xvY2F0aW9uID0gW107IC8vIGxlZnQsIGZvciBlYWNoIHRhcmdldFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBHZXRDaGFydFR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIE91dHB1dFR5cGUuTGluZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJhckluZm8gZXh0ZW5kcyBDb21tb25DaGFydEluZm8ge1xyXG4gICAgYmFyQ29sb3I6IHN0cmluZ1tdO1xyXG4gICAgeUF4aXNMb2NhdGlvbjogc3RyaW5nW107XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmJhckNvbG9yID0gW107IC8vICM2OWIzYTJcclxuICAgICAgICB0aGlzLnlBeGlzTG9jYXRpb24gPSBbXTsgLy8gbGVmdCwgZm9yIGVhY2ggdGFyZ2V0XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEdldENoYXJ0VHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gT3V0cHV0VHlwZS5CYXI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQaWVJbmZvIGV4dGVuZHMgT3V0cHV0SW5mbyB7XHJcbiAgICB0aXRsZTogc3RyaW5nO1xyXG4gICAgZGF0YTogc3RyaW5nW107XHJcbiAgICBkYXRhQ29sb3I6IHN0cmluZ1tdO1xyXG4gICAgcmF0aW9Jbm5lclJhZGl1czogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gW107XHJcbiAgICAgICAgdGhpcy5kYXRhQ29sb3IgPSBbXTtcclxuICAgICAgICB0aGlzLnJhdGlvSW5uZXJSYWRpdXMgPSAwLjA7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTdW1tYXJ5SW5mbyBleHRlbmRzIE91dHB1dEluZm8ge1xyXG4gICAgdGVtcGxhdGU6IHN0cmluZztcclxuICAgIHN0eWxlOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlID0gXCJcIjtcclxuICAgICAgICB0aGlzLnN0eWxlID0gXCJcIjtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE1vbnRoSW5mbyBleHRlbmRzIE91dHB1dEluZm8ge1xyXG4gICAgbW9kZTogc3RyaW5nO1xyXG4gICAgZGF0YXNldDogbnVtYmVyW107XHJcbiAgICBzdGFydFdlZWtPbjogc3RyaW5nO1xyXG4gICAgdGhyZXNob2xkOiBudW1iZXJbXTtcclxuICAgIHlNaW46IG51bWJlcltdO1xyXG4gICAgeU1heDogbnVtYmVyW107XHJcbiAgICBzaG93Q2lyY2xlOiBib29sZWFuO1xyXG4gICAgY29sb3I6IHN0cmluZztcclxuICAgIGRpbU5vdEluTW9udGg6IGJvb2xlYW47XHJcbiAgICBzaG93U3RyZWFrOiBib29sZWFuO1xyXG4gICAgc2hvd1RvZGF5UmluZzogYm9vbGVhbjtcclxuICAgIHNob3dTZWxlY3RlZFZhbHVlOiBib29sZWFuO1xyXG4gICAgc2hvd1NlbGVjdGVkUmluZzogYm9vbGVhbjtcclxuICAgIGNpcmNsZUNvbG9yOiBzdHJpbmc7XHJcbiAgICBjaXJjbGVDb2xvckJ5VmFsdWU6IGJvb2xlYW47XHJcbiAgICBoZWFkZXJZZWFyQ29sb3I6IHN0cmluZztcclxuICAgIGhlYWRlck1vbnRoQ29sb3I6IHN0cmluZztcclxuICAgIGRpdmlkaW5nTGluZUNvbG9yOiBzdHJpbmc7XHJcbiAgICB0b2RheVJpbmdDb2xvcjogc3RyaW5nO1xyXG4gICAgc2VsZWN0ZWRSaW5nQ29sb3I6IHN0cmluZztcclxuICAgIGluaXRNb250aDogc3RyaW5nOyAvLyBZWVlZLU1NXHJcblxyXG4gICAgc2VsZWN0ZWREYXRlOiBzdHJpbmc7XHJcbiAgICBzZWxlY3RlZERhdGFzZXQ6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMubW9kZSA9IFwiY2lyY2xlXCI7IC8vIGNpcmNsZSwgc3ltYm9sXHJcbiAgICAgICAgdGhpcy5kYXRhc2V0ID0gW107XHJcbiAgICAgICAgdGhpcy5zdGFydFdlZWtPbiA9IFwiU3VuXCI7XHJcbiAgICAgICAgdGhpcy50aHJlc2hvbGQgPSBbXTsgLy8gaWYgdmFsdWUgPiB0aHJlc2hvbGQsIHdpbGwgc2hvdyBkb3RcclxuICAgICAgICB0aGlzLnlNaW4gPSBbXTtcclxuICAgICAgICB0aGlzLnlNYXggPSBbXTtcclxuICAgICAgICB0aGlzLnNob3dDaXJjbGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuY29sb3IgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZGltTm90SW5Nb250aCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zaG93U3RyZWFrID0gdHJ1ZTsgLy8gYSBzdHJlYWsgY29ubmVjdHMgbmVpZ2JvciBkb3RzXHJcbiAgICAgICAgdGhpcy5zaG93VG9kYXlSaW5nID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNob3dTZWxlY3RlZFZhbHVlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNob3dTZWxlY3RlZFJpbmcgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuY2lyY2xlQ29sb3IgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY2lyY2xlQ29sb3JCeVZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5oZWFkZXJZZWFyQ29sb3IgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaGVhZGVyTW9udGhDb2xvciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5kaXZpZGluZ0xpbmVDb2xvciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy50b2RheVJpbmdDb2xvciA9IFwiXCI7IC8vIHdoaXRlXHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZFJpbmdDb2xvciA9IFwiZmlyZWJyaWNrXCI7XHJcbiAgICAgICAgdGhpcy5pbml0TW9udGggPSBcIlwiO1xyXG5cclxuICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZSA9IFwiXCI7IC8vIHNlbGVjdGVkIGRhdGVcclxuICAgICAgICB0aGlzLnNlbGVjdGVkRGF0YXNldCA9IG51bGw7IC8vIHNlbGVjdGVkIGluZGV4IG9mIGRhdGFzZXRcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEhlYXRtYXBJbmZvIHtcclxuICAgIGRhdGFzZXQ6IHN0cmluZztcclxuICAgIHN0YXJ0V2Vla09uOiBzdHJpbmc7XHJcbiAgICBvcmllbnRhdGlvbjogc3RyaW5nO1xyXG4gICAgeU1pbjogbnVtYmVyO1xyXG4gICAgeU1heDogbnVtYmVyO1xyXG4gICAgY29sb3I6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmRhdGFzZXQgPSBcIjBcIjtcclxuICAgICAgICB0aGlzLnN0YXJ0V2Vla09uID0gXCJTdW5cIjtcclxuICAgICAgICB0aGlzLm9yaWVudGF0aW9uID0gXCJ2ZXJ0aWNhbFwiO1xyXG4gICAgICAgIHRoaXMueU1pbiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy55TWF4ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNvbG9yID0gbnVsbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJ1bGxldEluZm8gZXh0ZW5kcyBPdXRwdXRJbmZvIHtcclxuICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICBkYXRhc2V0OiBzdHJpbmc7XHJcbiAgICBvcmllbnRhdGlvbjogc3RyaW5nO1xyXG4gICAgdmFsdWU6IHN0cmluZztcclxuICAgIHZhbHVlVW5pdDogc3RyaW5nO1xyXG4gICAgdmFsdWVDb2xvcjogc3RyaW5nO1xyXG4gICAgcmFuZ2U6IG51bWJlcltdO1xyXG4gICAgcmFuZ2VDb2xvcjogc3RyaW5nW107XHJcbiAgICBzaG93TWFya2VyOiBib29sZWFuO1xyXG4gICAgbWFya2VyVmFsdWU6IG51bWJlcjtcclxuICAgIG1hcmtlckNvbG9yOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnRpdGxlID0gXCJcIjtcclxuICAgICAgICB0aGlzLmRhdGFzZXQgPSBcIjBcIjsgLy8gZGF0YXNldCBpZCBvciBuYW1lXHJcbiAgICAgICAgdGhpcy5vcmllbnRhdGlvbiA9IFwiaG9yaXpvbnRhbFwiOyAvLyBvciB2ZXJ0aWNhbFxyXG4gICAgICAgIHRoaXMudmFsdWUgPSBcIlwiOyAvLyBDYW4gcG9zc2VzcyB0ZW1wbGF0ZSB2YXJpYWxiZVxyXG4gICAgICAgIHRoaXMudmFsdWVVbml0ID0gXCJcIjtcclxuICAgICAgICB0aGlzLnZhbHVlQ29sb3IgPSBcIiM2OWIzYTJcIjtcclxuICAgICAgICB0aGlzLnJhbmdlID0gW107XHJcbiAgICAgICAgdGhpcy5yYW5nZUNvbG9yID0gW107XHJcbiAgICAgICAgdGhpcy5zaG93TWFya2VyID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5tYXJrZXJWYWx1ZSA9IDA7XHJcbiAgICAgICAgdGhpcy5tYXJrZXJDb2xvciA9IFwiXCI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTaXplIHtcclxuICAgIHdpZHRoOiBudW1iZXI7XHJcbiAgICBoZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih3OiBudW1iZXIsIGg6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB3O1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE1hcmdpbiB7XHJcbiAgICB0b3A6IG51bWJlcjtcclxuICAgIHJpZ2h0OiBudW1iZXI7XHJcbiAgICBib3R0b206IG51bWJlcjtcclxuICAgIGxlZnQ6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih0b3A6IG51bWJlciwgcmlnaHQ6IG51bWJlciwgYm90dG9tOiBudW1iZXIsIGxlZnQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMudG9wID0gdG9wO1xyXG4gICAgICAgIHRoaXMucmlnaHQgPSByaWdodDtcclxuICAgICAgICB0aGlzLmJvdHRvbSA9IGJvdHRvbTtcclxuICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVHJhbnNmb3JtIHtcclxuICAgIHRyYW5zbGF0ZVg6IG51bWJlcjtcclxuICAgIHRyYW5zbGF0ZVk6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih0cmFuc2Zvcm06IGFueSkge1xyXG4gICAgICAgIHRoaXMudHJhbnNsYXRlWCA9IDA7XHJcbiAgICAgICAgdGhpcy50cmFuc2xhdGVZID0gMDtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0cmFuc2Zvcm0gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbGV0IGdyb3VwcyA9IHRyYW5zZm9ybS5tYXRjaChcclxuICAgICAgICAgICAgICAgIC90cmFuc2xhdGVcXChcXHMqKD88eD5bXFxkXFwuXFwvLV0rKVxccyosXFxzKig/PHk+W1xcZFxcLlxcLy1dKylcXHMqXFwpL1xyXG4gICAgICAgICAgICApLmdyb3VwcztcclxuICAgICAgICAgICAgaWYgKGdyb3Vwcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2xhdGVYID0gcGFyc2VGbG9hdChncm91cHMueCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZVkgPSBwYXJzZUZsb2F0KGdyb3Vwcy55KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgQ2hhcnRFbGVtZW50cyA9IHtcclxuICAgIFtrZXk6IHN0cmluZ106IGFueTtcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBUYWJsZURhdGEge1xyXG4gICAgZmlsZVBhdGg6IHN0cmluZztcclxuICAgIHRhYmxlSW5kZXg6IG51bWJlcjtcclxuICAgIHhEYXRhc2V0OiBRdWVyeSB8IG51bGw7XHJcbiAgICB5RGF0YXNldHM6IEFycmF5PFF1ZXJ5PjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihmaWxlUGF0aDogc3RyaW5nLCB0YWJsZUluZGV4OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmZpbGVQYXRoID0gZmlsZVBhdGg7XHJcbiAgICAgICAgdGhpcy50YWJsZUluZGV4ID0gdGFibGVJbmRleDtcclxuICAgICAgICB0aGlzLnhEYXRhc2V0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnlEYXRhc2V0cyA9IFtdOyAvLyBhcnJheSBvZiBxdWVyeVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBYVmFsdWVNYXAgPSBNYXA8bnVtYmVyLCBzdHJpbmc+O1xyXG5leHBvcnQgdHlwZSBEYXRhTWFwID0gTWFwPHN0cmluZywgQXJyYXk8UXVlcnlWYWx1ZVBhaXI+PjtcclxuIiwiaW1wb3J0IHt0aW1lWWVhciwgdGltZU1vbnRoLCB0aW1lV2VlaywgdGltZURheSwgdGltZUhvdXIsIHRpbWVNaW51dGUsIHRpbWVTZWNvbmQsIHRpbWVUaWNrcywgdGltZVRpY2tJbnRlcnZhbH0gZnJvbSBcImQzLXRpbWVcIjtcbmltcG9ydCB7dGltZUZvcm1hdH0gZnJvbSBcImQzLXRpbWUtZm9ybWF0XCI7XG5pbXBvcnQgY29udGludW91cywge2NvcHl9IGZyb20gXCIuL2NvbnRpbnVvdXMuanNcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0LmpzXCI7XG5pbXBvcnQgbmljZSBmcm9tIFwiLi9uaWNlLmpzXCI7XG5cbmZ1bmN0aW9uIGRhdGUodCkge1xuICByZXR1cm4gbmV3IERhdGUodCk7XG59XG5cbmZ1bmN0aW9uIG51bWJlcih0KSB7XG4gIHJldHVybiB0IGluc3RhbmNlb2YgRGF0ZSA/ICt0IDogK25ldyBEYXRlKCt0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGVuZGFyKHRpY2tzLCB0aWNrSW50ZXJ2YWwsIHllYXIsIG1vbnRoLCB3ZWVrLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBmb3JtYXQpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cygpLFxuICAgICAgaW52ZXJ0ID0gc2NhbGUuaW52ZXJ0LFxuICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluO1xuXG4gIHZhciBmb3JtYXRNaWxsaXNlY29uZCA9IGZvcm1hdChcIi4lTFwiKSxcbiAgICAgIGZvcm1hdFNlY29uZCA9IGZvcm1hdChcIjolU1wiKSxcbiAgICAgIGZvcm1hdE1pbnV0ZSA9IGZvcm1hdChcIiVJOiVNXCIpLFxuICAgICAgZm9ybWF0SG91ciA9IGZvcm1hdChcIiVJICVwXCIpLFxuICAgICAgZm9ybWF0RGF5ID0gZm9ybWF0KFwiJWEgJWRcIiksXG4gICAgICBmb3JtYXRXZWVrID0gZm9ybWF0KFwiJWIgJWRcIiksXG4gICAgICBmb3JtYXRNb250aCA9IGZvcm1hdChcIiVCXCIpLFxuICAgICAgZm9ybWF0WWVhciA9IGZvcm1hdChcIiVZXCIpO1xuXG4gIGZ1bmN0aW9uIHRpY2tGb3JtYXQoZGF0ZSkge1xuICAgIHJldHVybiAoc2Vjb25kKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdE1pbGxpc2Vjb25kXG4gICAgICAgIDogbWludXRlKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdFNlY29uZFxuICAgICAgICA6IGhvdXIoZGF0ZSkgPCBkYXRlID8gZm9ybWF0TWludXRlXG4gICAgICAgIDogZGF5KGRhdGUpIDwgZGF0ZSA/IGZvcm1hdEhvdXJcbiAgICAgICAgOiBtb250aChkYXRlKSA8IGRhdGUgPyAod2VlayhkYXRlKSA8IGRhdGUgPyBmb3JtYXREYXkgOiBmb3JtYXRXZWVrKVxuICAgICAgICA6IHllYXIoZGF0ZSkgPCBkYXRlID8gZm9ybWF0TW9udGhcbiAgICAgICAgOiBmb3JtYXRZZWFyKShkYXRlKTtcbiAgfVxuXG4gIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoaW52ZXJ0KHkpKTtcbiAgfTtcblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBkb21haW4oQXJyYXkuZnJvbShfLCBudW1iZXIpKSA6IGRvbWFpbigpLm1hcChkYXRlKTtcbiAgfTtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGludGVydmFsKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja3MoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBpbnRlcnZhbCA9PSBudWxsID8gMTAgOiBpbnRlcnZhbCk7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICByZXR1cm4gc3BlY2lmaWVyID09IG51bGwgPyB0aWNrRm9ybWF0IDogZm9ybWF0KHNwZWNpZmllcik7XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGludGVydmFsKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICBpZiAoIWludGVydmFsIHx8IHR5cGVvZiBpbnRlcnZhbC5yYW5nZSAhPT0gXCJmdW5jdGlvblwiKSBpbnRlcnZhbCA9IHRpY2tJbnRlcnZhbChkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGludGVydmFsID09IG51bGwgPyAxMCA6IGludGVydmFsKTtcbiAgICByZXR1cm4gaW50ZXJ2YWwgPyBkb21haW4obmljZShkLCBpbnRlcnZhbCkpIDogc2NhbGU7XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBjYWxlbmRhcih0aWNrcywgdGlja0ludGVydmFsLCB5ZWFyLCBtb250aCwgd2VlaywgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgZm9ybWF0KSk7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aW1lKCkge1xuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KGNhbGVuZGFyKHRpbWVUaWNrcywgdGltZVRpY2tJbnRlcnZhbCwgdGltZVllYXIsIHRpbWVNb250aCwgdGltZVdlZWssIHRpbWVEYXksIHRpbWVIb3VyLCB0aW1lTWludXRlLCB0aW1lU2Vjb25kLCB0aW1lRm9ybWF0KS5kb21haW4oW25ldyBEYXRlKDIwMDAsIDAsIDEpLCBuZXcgRGF0ZSgyMDAwLCAwLCAyKV0pLCBhcmd1bWVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbmljZShkb21haW4sIGludGVydmFsKSB7XG4gIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgpO1xuXG4gIHZhciBpMCA9IDAsXG4gICAgICBpMSA9IGRvbWFpbi5sZW5ndGggLSAxLFxuICAgICAgeDAgPSBkb21haW5baTBdLFxuICAgICAgeDEgPSBkb21haW5baTFdLFxuICAgICAgdDtcblxuICBpZiAoeDEgPCB4MCkge1xuICAgIHQgPSBpMCwgaTAgPSBpMSwgaTEgPSB0O1xuICAgIHQgPSB4MCwgeDAgPSB4MSwgeDEgPSB0O1xuICB9XG5cbiAgZG9tYWluW2kwXSA9IGludGVydmFsLmZsb29yKHgwKTtcbiAgZG9tYWluW2kxXSA9IGludGVydmFsLmNlaWwoeDEpO1xuICByZXR1cm4gZG9tYWluO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24gY29uc3RhbnQoKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJmdW5jdGlvbiBMaW5lYXIoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTGluZWFyLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTGluZWFyKGNvbnRleHQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHgocCkge1xuICByZXR1cm4gcFswXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHkocCkge1xuICByZXR1cm4gcFsxXTtcbn1cbiIsImltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcbmltcG9ydCBhcnJheSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgY3VydmVMaW5lYXIgZnJvbSBcIi4vY3VydmUvbGluZWFyLmpzXCI7XG5pbXBvcnQge3ggYXMgcG9pbnRYLCB5IGFzIHBvaW50WX0gZnJvbSBcIi4vcG9pbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgeSkge1xuICB2YXIgZGVmaW5lZCA9IGNvbnN0YW50KHRydWUpLFxuICAgICAgY29udGV4dCA9IG51bGwsXG4gICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgb3V0cHV0ID0gbnVsbDtcblxuICB4ID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiAoeCA9PT0gdW5kZWZpbmVkKSA/IHBvaW50WCA6IGNvbnN0YW50KHgpO1xuICB5ID0gdHlwZW9mIHkgPT09IFwiZnVuY3Rpb25cIiA/IHkgOiAoeSA9PT0gdW5kZWZpbmVkKSA/IHBvaW50WSA6IGNvbnN0YW50KHkpO1xuXG4gIGZ1bmN0aW9uIGxpbmUoZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0gKGRhdGEgPSBhcnJheShkYXRhKSkubGVuZ3RoLFxuICAgICAgICBkLFxuICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICBidWZmZXI7XG5cbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgIGlmICghKGkgPCBuICYmIGRlZmluZWQoZCA9IGRhdGFbaV0sIGksIGRhdGEpKSA9PT0gZGVmaW5lZDApIHtcbiAgICAgICAgaWYgKGRlZmluZWQwID0gIWRlZmluZWQwKSBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgIGVsc2Ugb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbmVkMCkgb3V0cHV0LnBvaW50KCt4KGQsIGksIGRhdGEpLCAreShkLCBpLCBkYXRhKSk7XG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGxpbmUueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGxpbmUpIDogeDtcbiAgfTtcblxuICBsaW5lLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5lKSA6IHk7XG4gIH07XG5cbiAgbGluZS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlZmluZWQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGxpbmUpIDogZGVmaW5lZDtcbiAgfTtcblxuICBsaW5lLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGN1cnZlID0gXywgY29udGV4dCAhPSBudWxsICYmIChvdXRwdXQgPSBjdXJ2ZShjb250ZXh0KSksIGxpbmUpIDogY3VydmU7XG4gIH07XG5cbiAgbGluZS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IGNvbnRleHQgPSBvdXRwdXQgPSBudWxsIDogb3V0cHV0ID0gY3VydmUoY29udGV4dCA9IF8pLCBsaW5lKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmU7XG59XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJvYmplY3RcIiAmJiBcImxlbmd0aFwiIGluIHhcbiAgICA/IHggLy8gQXJyYXksIFR5cGVkQXJyYXksIE5vZGVMaXN0LCBhcnJheS1saWtlXG4gICAgOiBBcnJheS5mcm9tKHgpOyAvLyBNYXAsIFNldCwgaXRlcmFibGUsIHN0cmluZywgb3IgYW55dGhpbmcgZWxzZVxufVxuIiwiaW1wb3J0IHsgUmVuZGVySW5mbywgU2l6ZSwgVHJhbnNmb3JtIH0gZnJvbSBcIi4vZGF0YVwiO1xyXG5pbXBvcnQgeyBURmlsZSwgVEZvbGRlciwgbm9ybWFsaXplUGF0aCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBWYWx1ZVR5cGUgfSBmcm9tIFwiLi9kYXRhXCI7XHJcbmltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiO1xyXG5pbXBvcnQgeyBNb21lbnQgfSBmcm9tIFwibW9tZW50XCI7XHJcblxyXG4vLyBkYXRlIGFuZCB0aW1lXHJcbmNvbnN0IHRpbWVGb3JtYXQgPSBbXHJcbiAgICBcIkhIOm1tXCIsXHJcbiAgICBcIkhIOm1cIixcclxuICAgIFwiSDptbVwiLFxyXG4gICAgXCJIOm1cIixcclxuICAgIFwiaGg6bW0gQVwiLFxyXG4gICAgXCJoaDptbSBhXCIsXHJcbiAgICBcImhoOm0gQVwiLFxyXG4gICAgXCJoaDptIGFcIixcclxuICAgIFwiaDptbSBBXCIsXHJcbiAgICBcImg6bW0gYVwiLFxyXG4gICAgXCJoOm0gQVwiLFxyXG4gICAgXCJoOm0gYVwiLFxyXG5dO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN0clRvRGF0ZShzdHJEYXRlOiBzdHJpbmcsIGRhdGVGb3JtYXQ6IHN0cmluZyk6IE1vbWVudCB7XHJcbiAgICBsZXQgZm9ybWF0OiBhbnkgPSBkYXRlRm9ybWF0O1xyXG5cclxuICAgIGlmIChcclxuICAgICAgICBzdHJEYXRlLmxlbmd0aCA+IDQgJiZcclxuICAgICAgICBzdHJEYXRlLnN0YXJ0c1dpdGgoXCJbW1wiKSAmJlxyXG4gICAgICAgIHN0ckRhdGUuZW5kc1dpdGgoXCJdXVwiKVxyXG4gICAgKSB7XHJcbiAgICAgICAgc3RyRGF0ZSA9IHN0ckRhdGUuc3Vic3RyaW5nKDIsIHN0ckRhdGUubGVuZ3RoIC0gMik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRhdGVGb3JtYXQudG9Mb3dlckNhc2UoKSA9PT0gXCJpc28tODYwMVwiKSB7XHJcbiAgICAgICAgZm9ybWF0ID0gd2luZG93Lm1vbWVudC5JU09fODYwMTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgZGF0ZSA9IHdpbmRvdy5tb21lbnQoc3RyRGF0ZSwgZm9ybWF0LCB0cnVlKTtcclxuXHJcbiAgICAvLyBzdGlwIHRpbWVcclxuICAgIGRhdGUgPSBkYXRlLnN0YXJ0T2YoXCJkYXlcIik7XHJcblxyXG4gICAgcmV0dXJuIGRhdGU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWxEYXRlU3RyaW5nVG9EYXRlKFxyXG4gICAgcmVsRGF0ZVN0cmluZzogc3RyaW5nLFxyXG4gICAgZGF0ZUZvcm1hdDogc3RyaW5nXHJcbik6IE1vbWVudCB7XHJcbiAgICBsZXQgZGF0ZSA9IG51bGw7XHJcbiAgICBjb25zdCByZWxEYXRlUmVnZXggPSAvXig/PHZhbHVlPltcXC1cXCtdP1swLTldKykoPzx1bml0Pltkd215XSkkLztcclxuICAgIGlmIChyZWxEYXRlUmVnZXgudGVzdChyZWxEYXRlU3RyaW5nKSkge1xyXG4gICAgICAgIGxldCBtYXRjaCA9IHJlbERhdGVSZWdleC5leGVjKHJlbERhdGVTdHJpbmcpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdHlwZW9mIG1hdGNoLmdyb3VwcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgbWF0Y2guZ3JvdXBzLnZhbHVlICE9PSBcInVuZGVmaW5lZFwiICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiBtYXRjaC5ncm91cHMudW5pdCAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBwYXJzZUZsb2F0KG1hdGNoLmdyb3Vwcy52YWx1ZSk7XHJcbiAgICAgICAgICAgIGxldCB1bml0ID0gbWF0Y2guZ3JvdXBzLnVuaXQ7XHJcbiAgICAgICAgICAgIGRhdGUgPSBnZXREYXRlVG9kYXkoZGF0ZUZvcm1hdCk7XHJcbiAgICAgICAgICAgIGlmICh1bml0ID09PSBcImRcIikge1xyXG4gICAgICAgICAgICAgICAgZGF0ZSA9IGRhdGUuYWRkKHZhbHVlLCBcImRheXNcIik7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodW5pdCA9PT0gXCJ3XCIpIHtcclxuICAgICAgICAgICAgICAgIGRhdGUgPSBkYXRlLmFkZCh2YWx1ZSwgXCJ3ZWVrc1wiKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh1bml0ID09PSBcIm1cIikge1xyXG4gICAgICAgICAgICAgICAgZGF0ZSA9IGRhdGUuYWRkKHZhbHVlLCBcIm1vbnRoc1wiKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh1bml0ID09PSBcInlcIikge1xyXG4gICAgICAgICAgICAgICAgZGF0ZSA9IGRhdGUuYWRkKHZhbHVlLCBcInllYXJzXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChkYXRlICYmIGRhdGUuaXNWYWxpZCgpKSB7XHJcbiAgICAgICAgcmV0dXJuIGRhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkYXRlVG9TdHIoZGF0ZTogTW9tZW50LCBkYXRlRm9ybWF0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgaWYgKHR5cGVvZiBkYXRlID09PSBcInVuZGVmaW5lZFwiIHx8IGRhdGUgPT09IG51bGwpIHJldHVybiBudWxsO1xyXG5cclxuICAgIGlmIChkYXRlRm9ybWF0LnRvTG93ZXJDYXNlKCkgPT09IFwiaXNvLTg2MDFcIikge1xyXG4gICAgICAgIHJldHVybiBkYXRlLmZvcm1hdCgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRhdGUuZm9ybWF0KGRhdGVGb3JtYXQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF0ZUZyb21Vbml4VGltZShcclxuICAgIHVuaXhUaW1lOiBudW1iZXIsXHJcbiAgICBkYXRlRm9ybWF0OiBzdHJpbmdcclxuKTogTW9tZW50IHtcclxuICAgIGxldCBkYXRlID0gd2luZG93Lm1vbWVudCh1bml4VGltZSk7XHJcbiAgICBsZXQgc3RyRGF0ZSA9IGRhdGVUb1N0cihkYXRlLCBkYXRlRm9ybWF0KTtcclxuICAgIHJldHVybiBzdHJUb0RhdGUoc3RyRGF0ZSwgZGF0ZUZvcm1hdCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRlVG9kYXkoZGF0ZUZvcm1hdDogc3RyaW5nKSB7XHJcbiAgICBsZXQgdG9kYXkgPSB3aW5kb3cubW9tZW50KCk7XHJcbiAgICBsZXQgc3RyVG9kYXkgPSBkYXRlVG9TdHIodG9kYXksIGRhdGVGb3JtYXQpO1xyXG4gICAgcmV0dXJuIHN0clRvRGF0ZShzdHJUb2RheSwgZGF0ZUZvcm1hdCk7XHJcbn1cclxuXHJcbi8vIGh0dHA6Ly9qc2ZpZGRsZS5uZXQvYWxuaXRhay9oRXN5cy9cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZXBWYWx1ZShvYmo6IGFueSwgc3RyOiBzdHJpbmcpIHtcclxuICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9eXFwuLywgXCJcIik7XHJcbiAgICB2YXIgYSA9IHN0ci5zcGxpdChcIi5cIik7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IGEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgdmFyIGsgPSBhW2ldO1xyXG4gICAgICAgIGlmIChrIGluIG9iaikge1xyXG4gICAgICAgICAgICBvYmogPSBvYmpba107XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvYmo7XHJcbn1cclxuXHJcbi8vIFN0cmluZyBoZWxwZXJzXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmltQnlDaGFyKHN0cjogc3RyaW5nLCBjaGFyOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGFyciA9IEFycmF5LmZyb20oc3RyKTtcclxuICAgIGNvbnN0IGZpcnN0ID0gYXJyLmZpbmRJbmRleCgoYykgPT4gYyAhPT0gY2hhcik7XHJcbiAgICBjb25zdCBsYXN0ID0gYXJyLnJldmVyc2UoKS5maW5kSW5kZXgoKGMpID0+IGMgIT09IGNoYXIpO1xyXG4gICAgcmV0dXJuIGZpcnN0ID09PSAtMSAmJiBsYXN0ID09PSAtMVxyXG4gICAgICAgID8gc3RyXHJcbiAgICAgICAgOiBzdHIuc3Vic3RyaW5nKGZpcnN0LCBzdHIubGVuZ3RoIC0gbGFzdCk7XHJcbn1cclxuXHJcbi8vIFBhcnNpbmdcclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRmxvYXRGcm9tQW55KHRvUGFyc2U6IGFueSkge1xyXG4gICAgbGV0IHZhbHVlID0gbnVsbDtcclxuICAgIGxldCB2YWx1ZVR5cGUgPSBWYWx1ZVR5cGUuTnVtYmVyO1xyXG4gICAgaWYgKHR5cGVvZiB0b1BhcnNlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgLy8gdGltZSB2YWx1ZVxyXG4gICAgICAgIGlmICh0b1BhcnNlLmluY2x1ZGVzKFwiOlwiKSkge1xyXG4gICAgICAgICAgICBsZXQgbmVnYXRpdmVWYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodG9QYXJzZS5zdGFydHNXaXRoKFwiLVwiKSkge1xyXG4gICAgICAgICAgICAgICAgbmVnYXRpdmVWYWx1ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0b1BhcnNlID0gdG9QYXJzZS5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHRpbWVWYWx1ZSA9IHdpbmRvdy5tb21lbnQodG9QYXJzZSwgdGltZUZvcm1hdCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGlmICh0aW1lVmFsdWUuaXNWYWxpZCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRpbWVWYWx1ZS5kaWZmKFxyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tb21lbnQoXCIwMDowMFwiLCBcIkhIOm1tXCIsIHRydWUpLFxyXG4gICAgICAgICAgICAgICAgICAgIFwic2Vjb25kc1wiXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5lZ2F0aXZlVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IC0xICogdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YWx1ZVR5cGUgPSBWYWx1ZVR5cGUuVGltZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gcGFyc2VGbG9hdCh0b1BhcnNlKTtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0b1BhcnNlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgdmFsdWUgPSB0b1BhcnNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7IHR5cGU6IHZhbHVlVHlwZSwgdmFsdWU6IHZhbHVlIH07XHJcbn1cclxuXHJcbi8vIENoYXJ0IGhlbHBlcnNcclxuZXhwb3J0IGZ1bmN0aW9uIG1lYXN1cmVUZXh0U2l6ZShcclxuICAgIHRleHQ6IHN0cmluZyxcclxuICAgIHN0eWxlQ2xhc3M6IHN0cmluZyA9IFwiXCIsXHJcbiAgICByb3RhdGU6IHN0cmluZyA9IFwiXCJcclxuKTogU2l6ZSB7XHJcbiAgICB2YXIgY29udGFpbmVyID0gZDMuc2VsZWN0KFwiYm9keVwiKS5hcHBlbmQoXCJzdmdcIik7XHJcbiAgICBsZXQgdGV4dEJsb2NrID0gY29udGFpbmVyXHJcbiAgICAgICAgLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAudGV4dCh0ZXh0KVxyXG4gICAgICAgIC5hdHRyKFwieFwiLCAtOTk5OTkpXHJcbiAgICAgICAgLmF0dHIoXCJ5XCIsIC05OTk5OSk7XHJcbiAgICBpZiAoc3R5bGVDbGFzcykge1xyXG4gICAgICAgIHRleHRCbG9jay5hdHRyKFwiY2xhc3NcIiwgc3R5bGVDbGFzcyk7XHJcbiAgICB9XHJcbiAgICBpZiAocm90YXRlKSB7XHJcbiAgICAgICAgdGV4dEJsb2NrLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoXCIgKyByb3RhdGUgKyBcIilcIik7XHJcbiAgICB9XHJcbiAgICB2YXIgc2l6ZSA9IGNvbnRhaW5lci5ub2RlKCkuZ2V0QkJveCgpO1xyXG4gICAgY29udGFpbmVyLnJlbW92ZSgpO1xyXG4gICAgcmV0dXJuIHsgd2lkdGg6IHNpemUud2lkdGgsIGhlaWdodDogc2l6ZS5oZWlnaHQgfTtcclxufVxyXG5cclxuLy8gZG9tXHJcbmV4cG9ydCBmdW5jdGlvbiBleHBhbmRBcmVhKGFyZWE6IGFueSwgYWRkVzogbnVtYmVyLCBhZGRIOiBudW1iZXIpIHtcclxuICAgIGxldCBvcmlXaWR0aCA9IHBhcnNlRmxvYXQoYXJlYS5hdHRyKFwid2lkdGhcIikpIHwgMDtcclxuICAgIGxldCBvcmlIZWlnaHQgPSBwYXJzZUZsb2F0KGFyZWEuYXR0cihcImhlaWdodFwiKSkgfCAwO1xyXG4gICAgbGV0IG5ld1dpZHRoID0gb3JpV2lkdGggKyBhZGRXO1xyXG4gICAgbGV0IG5ld0hlaWdodCA9IG9yaUhlaWdodCArIGFkZEg7XHJcbiAgICBhcmVhLmF0dHIoXCJ3aWR0aFwiLCBuZXdXaWR0aCk7XHJcbiAgICBhcmVhLmF0dHIoXCJoZWlnaHRcIiwgbmV3SGVpZ2h0KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1vdmVBcmVhKGFyZWE6IGFueSwgc2hpZnRYOiBudW1iZXIsIHNoaWZ0WTogbnVtYmVyKSB7XHJcbiAgICBsZXQgdHJhbnMgPSBuZXcgVHJhbnNmb3JtKGFyZWEuYXR0cihcInRyYW5zZm9ybVwiKSk7XHJcbiAgICBhcmVhLmF0dHIoXHJcbiAgICAgICAgXCJ0cmFuc2Zvcm1cIixcclxuICAgICAgICBcInRyYW5zbGF0ZShcIiArXHJcbiAgICAgICAgICAgICh0cmFucy50cmFuc2xhdGVYICsgc2hpZnRYKSArXHJcbiAgICAgICAgICAgIFwiLFwiICtcclxuICAgICAgICAgICAgKHRyYW5zLnRyYW5zbGF0ZVkgKyBzaGlmdFkpICtcclxuICAgICAgICAgICAgXCIpXCJcclxuICAgICk7XHJcbn1cclxuXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbmZ1bmN0aW9uIGNsZWFuVGV4dCh0ZXh0OiBzdHJpbmcpIHtcclxuICAgIC8vIFRoYW5rcyB0byB0b3JhbnRpbmVcclxuICAgIC8vIGNvZGUgc25pcHBldCBmcm9tIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3RvcmFudGluZS9hZjYzOWNiYTNjMzI3NjI1NzZkNjRjMzRlZmZhZjYxNFxyXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvKF5cXFxcc1xcKil8KFxcXFxzXFwqJCkvZ2ksIFwiXCIpOyAvLyByZW1vdmUgdGhlIHN0YXJ0IGFuZCBlbmQgc3BhY2VzIG9mIHRoZSBnaXZlbiBzdHJpbmdcclxuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcWyBcXF17Mix9L2dpLCBcIiBcIik7IC8vIHJlZHVjZSBtdWx0aXBsZSBzcGFjZXMgdG8gYSBzaW5nbGUgc3BhY2VcclxuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcXFxuIC8sIFwiXFxcXG5cIik7IC8vIGV4Y2x1ZGUgYSBuZXcgbGluZSB3aXRoIGEgc3RhcnQgc3BhY2luZ1xyXG4gICAgcmV0dXJuIHRleHQ7XHJcbn1cclxuXHJcbi8vIFRoYW5rcyB0byBsdWtlbGVwcGFuIGZvciBwbHVnaW4gJ2JldHRlci13b3JkLWNvdW50J1xyXG4vLyBDb2RlIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2x1a2VsZXBwYW4vYmV0dGVyLXdvcmQtY291bnQvYmxvYi9tYXN0ZXIvc3JjL3N0YXRzLnRzXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRXb3JkQ291bnQodGV4dDogc3RyaW5nKSB7XHJcbiAgICB0ZXh0ID0gY2xlYW5UZXh0KHRleHQpO1xyXG5cclxuICAgIC8vIFRoYW5rcyB0byBsaWFtY2FuZVxyXG4gICAgdmFyIHNwYWNlRGVsaW1pdGVkQ2hhcnMgPVxyXG4gICAgICAgIC9BLVphLXpcXHUwMEFBXFx1MDBCNVxcdTAwQkFcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyQzFcXHUwMkM2LVxcdTAyRDFcXHUwMkUwLVxcdTAyRTRcXHUwMkVDXFx1MDJFRVxcdTAzNzAtXFx1MDM3NFxcdTAzNzZcXHUwMzc3XFx1MDM3QS1cXHUwMzdEXFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RS1cXHUwM0ExXFx1MDNBMy1cXHUwM0Y1XFx1MDNGNy1cXHUwNDgxXFx1MDQ4QS1cXHUwNTJGXFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjEtXFx1MDU4N1xcdTA1RDAtXFx1MDVFQVxcdTA1RjAtXFx1MDVGMlxcdTA2MjAtXFx1MDY0QVxcdTA2NkVcXHUwNjZGXFx1MDY3MS1cXHUwNkQzXFx1MDZENVxcdTA2RTVcXHUwNkU2XFx1MDZFRVxcdTA2RUZcXHUwNkZBLVxcdTA2RkNcXHUwNkZGXFx1MDcxMFxcdTA3MTItXFx1MDcyRlxcdTA3NEQtXFx1MDdBNVxcdTA3QjFcXHUwN0NBLVxcdTA3RUFcXHUwN0Y0XFx1MDdGNVxcdTA3RkFcXHUwODAwLVxcdTA4MTVcXHUwODFBXFx1MDgyNFxcdTA4MjhcXHUwODQwLVxcdTA4NThcXHUwOEEwLVxcdTA4QjRcXHUwOTA0LVxcdTA5MzlcXHUwOTNEXFx1MDk1MFxcdTA5NTgtXFx1MDk2MVxcdTA5NzEtXFx1MDk4MFxcdTA5ODUtXFx1MDk4Q1xcdTA5OEZcXHUwOTkwXFx1MDk5My1cXHUwOUE4XFx1MDlBQS1cXHUwOUIwXFx1MDlCMlxcdTA5QjYtXFx1MDlCOVxcdTA5QkRcXHUwOUNFXFx1MDlEQ1xcdTA5RERcXHUwOURGLVxcdTA5RTFcXHUwOUYwXFx1MDlGMVxcdTBBMDUtXFx1MEEwQVxcdTBBMEZcXHUwQTEwXFx1MEExMy1cXHUwQTI4XFx1MEEyQS1cXHUwQTMwXFx1MEEzMlxcdTBBMzNcXHUwQTM1XFx1MEEzNlxcdTBBMzhcXHUwQTM5XFx1MEE1OS1cXHUwQTVDXFx1MEE1RVxcdTBBNzItXFx1MEE3NFxcdTBBODUtXFx1MEE4RFxcdTBBOEYtXFx1MEE5MVxcdTBBOTMtXFx1MEFBOFxcdTBBQUEtXFx1MEFCMFxcdTBBQjJcXHUwQUIzXFx1MEFCNS1cXHUwQUI5XFx1MEFCRFxcdTBBRDBcXHUwQUUwXFx1MEFFMVxcdTBBRjlcXHUwQjA1LVxcdTBCMENcXHUwQjBGXFx1MEIxMFxcdTBCMTMtXFx1MEIyOFxcdTBCMkEtXFx1MEIzMFxcdTBCMzJcXHUwQjMzXFx1MEIzNS1cXHUwQjM5XFx1MEIzRFxcdTBCNUNcXHUwQjVEXFx1MEI1Ri1cXHUwQjYxXFx1MEI3MVxcdTBCODNcXHUwQjg1LVxcdTBCOEFcXHUwQjhFLVxcdTBCOTBcXHUwQjkyLVxcdTBCOTVcXHUwQjk5XFx1MEI5QVxcdTBCOUNcXHUwQjlFXFx1MEI5RlxcdTBCQTNcXHUwQkE0XFx1MEJBOC1cXHUwQkFBXFx1MEJBRS1cXHUwQkI5XFx1MEJEMFxcdTBDMDUtXFx1MEMwQ1xcdTBDMEUtXFx1MEMxMFxcdTBDMTItXFx1MEMyOFxcdTBDMkEtXFx1MEMzOVxcdTBDM0RcXHUwQzU4LVxcdTBDNUFcXHUwQzYwXFx1MEM2MVxcdTBDODUtXFx1MEM4Q1xcdTBDOEUtXFx1MEM5MFxcdTBDOTItXFx1MENBOFxcdTBDQUEtXFx1MENCM1xcdTBDQjUtXFx1MENCOVxcdTBDQkRcXHUwQ0RFXFx1MENFMFxcdTBDRTFcXHUwQ0YxXFx1MENGMlxcdTBEMDUtXFx1MEQwQ1xcdTBEMEUtXFx1MEQxMFxcdTBEMTItXFx1MEQzQVxcdTBEM0RcXHUwRDRFXFx1MEQ1Ri1cXHUwRDYxXFx1MEQ3QS1cXHUwRDdGXFx1MEQ4NS1cXHUwRDk2XFx1MEQ5QS1cXHUwREIxXFx1MERCMy1cXHUwREJCXFx1MERCRFxcdTBEQzAtXFx1MERDNlxcdTBFMDEtXFx1MEUzMFxcdTBFMzJcXHUwRTMzXFx1MEU0MC1cXHUwRTQ2XFx1MEU4MVxcdTBFODJcXHUwRTg0XFx1MEU4N1xcdTBFODhcXHUwRThBXFx1MEU4RFxcdTBFOTQtXFx1MEU5N1xcdTBFOTktXFx1MEU5RlxcdTBFQTEtXFx1MEVBM1xcdTBFQTVcXHUwRUE3XFx1MEVBQVxcdTBFQUJcXHUwRUFELVxcdTBFQjBcXHUwRUIyXFx1MEVCM1xcdTBFQkRcXHUwRUMwLVxcdTBFQzRcXHUwRUM2XFx1MEVEQy1cXHUwRURGXFx1MEYwMFxcdTBGNDAtXFx1MEY0N1xcdTBGNDktXFx1MEY2Q1xcdTBGODgtXFx1MEY4Q1xcdTEwMDAtXFx1MTAyQVxcdTEwM0ZcXHUxMDUwLVxcdTEwNTVcXHUxMDVBLVxcdTEwNURcXHUxMDYxXFx1MTA2NVxcdTEwNjZcXHUxMDZFLVxcdTEwNzBcXHUxMDc1LVxcdTEwODFcXHUxMDhFXFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxMEQwLVxcdTEwRkFcXHUxMEZDLVxcdTEyNDhcXHUxMjRBLVxcdTEyNERcXHUxMjUwLVxcdTEyNTZcXHUxMjU4XFx1MTI1QS1cXHUxMjVEXFx1MTI2MC1cXHUxMjg4XFx1MTI4QS1cXHUxMjhEXFx1MTI5MC1cXHUxMkIwXFx1MTJCMi1cXHUxMkI1XFx1MTJCOC1cXHUxMkJFXFx1MTJDMFxcdTEyQzItXFx1MTJDNVxcdTEyQzgtXFx1MTJENlxcdTEyRDgtXFx1MTMxMFxcdTEzMTItXFx1MTMxNVxcdTEzMTgtXFx1MTM1QVxcdTEzODAtXFx1MTM4RlxcdTEzQTAtXFx1MTNGNVxcdTEzRjgtXFx1MTNGRFxcdTE0MDEtXFx1MTY2Q1xcdTE2NkYtXFx1MTY3RlxcdTE2ODEtXFx1MTY5QVxcdTE2QTAtXFx1MTZFQVxcdTE2RjEtXFx1MTZGOFxcdTE3MDAtXFx1MTcwQ1xcdTE3MEUtXFx1MTcxMVxcdTE3MjAtXFx1MTczMVxcdTE3NDAtXFx1MTc1MVxcdTE3NjAtXFx1MTc2Q1xcdTE3NkUtXFx1MTc3MFxcdTE3ODAtXFx1MTdCM1xcdTE3RDdcXHUxN0RDXFx1MTgyMC1cXHUxODc3XFx1MTg4MC1cXHUxOEE4XFx1MThBQVxcdTE4QjAtXFx1MThGNVxcdTE5MDAtXFx1MTkxRVxcdTE5NTAtXFx1MTk2RFxcdTE5NzAtXFx1MTk3NFxcdTE5ODAtXFx1MTlBQlxcdTE5QjAtXFx1MTlDOVxcdTFBMDAtXFx1MUExNlxcdTFBMjAtXFx1MUE1NFxcdTFBQTdcXHUxQjA1LVxcdTFCMzNcXHUxQjQ1LVxcdTFCNEJcXHUxQjgzLVxcdTFCQTBcXHUxQkFFXFx1MUJBRlxcdTFCQkEtXFx1MUJFNVxcdTFDMDAtXFx1MUMyM1xcdTFDNEQtXFx1MUM0RlxcdTFDNUEtXFx1MUM3RFxcdTFDRTktXFx1MUNFQ1xcdTFDRUUtXFx1MUNGMVxcdTFDRjVcXHUxQ0Y2XFx1MUQwMC1cXHUxREJGXFx1MUUwMC1cXHUxRjE1XFx1MUYxOC1cXHUxRjFEXFx1MUYyMC1cXHUxRjQ1XFx1MUY0OC1cXHUxRjREXFx1MUY1MC1cXHUxRjU3XFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1Ri1cXHUxRjdEXFx1MUY4MC1cXHUxRkI0XFx1MUZCNi1cXHUxRkJDXFx1MUZCRVxcdTFGQzItXFx1MUZDNFxcdTFGQzYtXFx1MUZDQ1xcdTFGRDAtXFx1MUZEM1xcdTFGRDYtXFx1MUZEQlxcdTFGRTAtXFx1MUZFQ1xcdTFGRjItXFx1MUZGNFxcdTFGRjYtXFx1MUZGQ1xcdTIwNzFcXHUyMDdGXFx1MjA5MC1cXHUyMDlDXFx1MjEwMlxcdTIxMDdcXHUyMTBBLVxcdTIxMTNcXHUyMTE1XFx1MjExOS1cXHUyMTFEXFx1MjEyNFxcdTIxMjZcXHUyMTI4XFx1MjEyQS1cXHUyMTJEXFx1MjEyRi1cXHUyMTM5XFx1MjEzQy1cXHUyMTNGXFx1MjE0NS1cXHUyMTQ5XFx1MjE0RVxcdTIxODNcXHUyMTg0XFx1MkMwMC1cXHUyQzJFXFx1MkMzMC1cXHUyQzVFXFx1MkM2MC1cXHUyQ0U0XFx1MkNFQi1cXHUyQ0VFXFx1MkNGMlxcdTJDRjNcXHUyRDAwLVxcdTJEMjVcXHUyRDI3XFx1MkQyRFxcdTJEMzAtXFx1MkQ2N1xcdTJENkZcXHUyRDgwLVxcdTJEOTZcXHUyREEwLVxcdTJEQTZcXHUyREE4LVxcdTJEQUVcXHUyREIwLVxcdTJEQjZcXHUyREI4LVxcdTJEQkVcXHUyREMwLVxcdTJEQzZcXHUyREM4LVxcdTJEQ0VcXHUyREQwLVxcdTJERDZcXHUyREQ4LVxcdTJEREVcXHUyRTJGXFx1MzAwNVxcdTMwMDZcXHUzMDMxLVxcdTMwMzVcXHUzMDNCXFx1MzAzQ1xcdTMxMDUtXFx1MzEyRFxcdTMxMzEtXFx1MzE4RVxcdTMxQTAtXFx1MzFCQVxcdTMxRjAtXFx1MzFGRlxcdTM0MDAtXFx1NERCNVxcdUEwMDAtXFx1QTQ4Q1xcdUE0RDAtXFx1QTRGRFxcdUE1MDAtXFx1QTYwQ1xcdUE2MTAtXFx1QTYxRlxcdUE2MkFcXHVBNjJCXFx1QTY0MC1cXHVBNjZFXFx1QTY3Ri1cXHVBNjlEXFx1QTZBMC1cXHVBNkU1XFx1QTcxNy1cXHVBNzFGXFx1QTcyMi1cXHVBNzg4XFx1QTc4Qi1cXHVBN0FEXFx1QTdCMC1cXHVBN0I3XFx1QTdGNy1cXHVBODAxXFx1QTgwMy1cXHVBODA1XFx1QTgwNy1cXHVBODBBXFx1QTgwQy1cXHVBODIyXFx1QTg0MC1cXHVBODczXFx1QTg4Mi1cXHVBOEIzXFx1QThGMi1cXHVBOEY3XFx1QThGQlxcdUE4RkRcXHVBOTBBLVxcdUE5MjVcXHVBOTMwLVxcdUE5NDZcXHVBOTYwLVxcdUE5N0NcXHVBOTg0LVxcdUE5QjJcXHVBOUNGXFx1QTlFMC1cXHVBOUU0XFx1QTlFNi1cXHVBOUVGXFx1QTlGQS1cXHVBOUZFXFx1QUEwMC1cXHVBQTI4XFx1QUE0MC1cXHVBQTQyXFx1QUE0NC1cXHVBQTRCXFx1QUE2MC1cXHVBQTc2XFx1QUE3QVxcdUFBN0UtXFx1QUFBRlxcdUFBQjFcXHVBQUI1XFx1QUFCNlxcdUFBQjktXFx1QUFCRFxcdUFBQzBcXHVBQUMyXFx1QUFEQi1cXHVBQUREXFx1QUFFMC1cXHVBQUVBXFx1QUFGMi1cXHVBQUY0XFx1QUIwMS1cXHVBQjA2XFx1QUIwOS1cXHVBQjBFXFx1QUIxMS1cXHVBQjE2XFx1QUIyMC1cXHVBQjI2XFx1QUIyOC1cXHVBQjJFXFx1QUIzMC1cXHVBQjVBXFx1QUI1Qy1cXHVBQjY1XFx1QUI3MC1cXHVBQkUyXFx1QUMwMC1cXHVEN0EzXFx1RDdCMC1cXHVEN0M2XFx1RDdDQi1cXHVEN0ZCXFx1RjkwMC1cXHVGQTZEXFx1RkE3MC1cXHVGQUQ5XFx1RkIwMC1cXHVGQjA2XFx1RkIxMy1cXHVGQjE3XFx1RkIxRFxcdUZCMUYtXFx1RkIyOFxcdUZCMkEtXFx1RkIzNlxcdUZCMzgtXFx1RkIzQ1xcdUZCM0VcXHVGQjQwXFx1RkI0MVxcdUZCNDNcXHVGQjQ0XFx1RkI0Ni1cXHVGQkIxXFx1RkJEMy1cXHVGRDNEXFx1RkQ1MC1cXHVGRDhGXFx1RkQ5Mi1cXHVGREM3XFx1RkRGMC1cXHVGREZCXFx1RkU3MC1cXHVGRTc0XFx1RkU3Ni1cXHVGRUZDXFx1RkYyMS1cXHVGRjNBXFx1RkY0MS1cXHVGRjVBXFx1RkY2Ni1cXHVGRkJFXFx1RkZDMi1cXHVGRkM3XFx1RkZDQS1cXHVGRkNGXFx1RkZEMi1cXHVGRkQ3XFx1RkZEQS1cXHVGRkRDL1xyXG4gICAgICAgICAgICAuc291cmNlO1xyXG4gICAgdmFyIG5vblNwYWNlRGVsaW1pdGVkV29yZHMgPVxyXG4gICAgICAgIC9bXFx1MzA0MS1cXHUzMDk2XFx1MzA5RC1cXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGQy1cXHUzMEZGXFx1NEUwMC1cXHU5RkQ1XXsxfS9cclxuICAgICAgICAgICAgLnNvdXJjZTtcclxuICAgIHZhciBwYXR0ZXJuID0gbmV3IFJlZ0V4cChcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIFwiKD86WzAtOV0rKD86KD86LHxcXFxcLilbMC05XSspKnxbXFxcXC1cIiArIHNwYWNlRGVsaW1pdGVkQ2hhcnMgKyBcIl0pK1wiLFxyXG4gICAgICAgICAgICBub25TcGFjZURlbGltaXRlZFdvcmRzLFxyXG4gICAgICAgIF0uam9pbihcInxcIiksXHJcbiAgICAgICAgXCJnXCJcclxuICAgICk7XHJcbiAgICByZXR1cm4gKHRleHQubWF0Y2gocGF0dGVybikgfHwgW10pLmxlbmd0aDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldENoYXJhY3RlckNvdW50KHRleHQ6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIHRleHQubGVuZ3RoO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VudGVuY2VDb3VudCh0ZXh0OiBzdHJpbmcpIHtcclxuICAgIHRleHQgPSBjbGVhblRleHQodGV4dCk7XHJcblxyXG4gICAgLy8gVGhhbmtzIHRvIEV4dHJhY3QgSGlnaGxpZ2h0cyBwbHVnaW4gYW5kIEFuZ2VsdXNEb21pbmlcclxuICAgIC8vIEFsc28gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTU1MzQxMFxyXG4gICAgdmFyIHNlbnRlbmNlcyA9XHJcbiAgICAgICAgKHRleHQgfHwgXCJcIikubWF0Y2goXHJcbiAgICAgICAgICAgIC9bXi7jgIIh77yBP++8n1xcc11bXi7jgIIh77yBP++8n10qKD86Wy4hP10oPyFbJ+KAmOKAmVwi4oCc4oCd44CM44CN44CO44CPXT9cXHN8JClbXi7jgIIh77yBP++8n10qKSpbLuOAgiHvvIE/77yfXT9bJ+KAmVwi4oCd44CN44CPXT8oPz1cXHN8fCQpL2dtXHJcbiAgICAgICAgKSB8fCBbXTtcclxuICAgIHZhciBzZW50ZW5jZXNMZW5ndGggPSBzZW50ZW5jZXMubGVuZ3RoO1xyXG4gICAgcmV0dXJuIHNlbnRlbmNlc0xlbmd0aDtcclxufVxyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4iLCIvLyAgICAgSmF2YVNjcmlwdCBFeHByZXNzaW9uIFBhcnNlciAoSlNFUCkgMC4zLjVcbi8vICAgICBKU0VQIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4vLyAgICAgaHR0cHM6Ly9lcmljc21la2Vucy5naXRodWIuaW8vanNlcC9cblxuLypnbG9iYWwgbW9kdWxlOiB0cnVlLCBleHBvcnRzOiB0cnVlLCBjb25zb2xlOiB0cnVlICovXG4oZnVuY3Rpb24gKHJvb3QpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHQvLyBOb2RlIFR5cGVzXG5cdC8vIC0tLS0tLS0tLS1cblxuXHQvLyBUaGlzIGlzIHRoZSBmdWxsIHNldCBvZiB0eXBlcyB0aGF0IGFueSBKU0VQIG5vZGUgY2FuIGJlLlxuXHQvLyBTdG9yZSB0aGVtIGhlcmUgdG8gc2F2ZSBzcGFjZSB3aGVuIG1pbmlmaWVkXG5cdHZhciBDT01QT1VORCA9ICdDb21wb3VuZCcsXG5cdFx0SURFTlRJRklFUiA9ICdJZGVudGlmaWVyJyxcblx0XHRNRU1CRVJfRVhQID0gJ01lbWJlckV4cHJlc3Npb24nLFxuXHRcdExJVEVSQUwgPSAnTGl0ZXJhbCcsXG5cdFx0VEhJU19FWFAgPSAnVGhpc0V4cHJlc3Npb24nLFxuXHRcdENBTExfRVhQID0gJ0NhbGxFeHByZXNzaW9uJyxcblx0XHRVTkFSWV9FWFAgPSAnVW5hcnlFeHByZXNzaW9uJyxcblx0XHRCSU5BUllfRVhQID0gJ0JpbmFyeUV4cHJlc3Npb24nLFxuXHRcdExPR0lDQUxfRVhQID0gJ0xvZ2ljYWxFeHByZXNzaW9uJyxcblx0XHRDT05ESVRJT05BTF9FWFAgPSAnQ29uZGl0aW9uYWxFeHByZXNzaW9uJyxcblx0XHRBUlJBWV9FWFAgPSAnQXJyYXlFeHByZXNzaW9uJyxcblxuXHRcdFBFUklPRF9DT0RFID0gNDYsIC8vICcuJ1xuXHRcdENPTU1BX0NPREUgID0gNDQsIC8vICcsJ1xuXHRcdFNRVU9URV9DT0RFID0gMzksIC8vIHNpbmdsZSBxdW90ZVxuXHRcdERRVU9URV9DT0RFID0gMzQsIC8vIGRvdWJsZSBxdW90ZXNcblx0XHRPUEFSRU5fQ09ERSA9IDQwLCAvLyAoXG5cdFx0Q1BBUkVOX0NPREUgPSA0MSwgLy8gKVxuXHRcdE9CUkFDS19DT0RFID0gOTEsIC8vIFtcblx0XHRDQlJBQ0tfQ09ERSA9IDkzLCAvLyBdXG5cdFx0UVVNQVJLX0NPREUgPSA2MywgLy8gP1xuXHRcdFNFTUNPTF9DT0RFID0gNTksIC8vIDtcblx0XHRDT0xPTl9DT0RFICA9IDU4LCAvLyA6XG5cblx0XHR0aHJvd0Vycm9yID0gZnVuY3Rpb24obWVzc2FnZSwgaW5kZXgpIHtcblx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlICsgJyBhdCBjaGFyYWN0ZXIgJyArIGluZGV4KTtcblx0XHRcdGVycm9yLmluZGV4ID0gaW5kZXg7XG5cdFx0XHRlcnJvci5kZXNjcmlwdGlvbiA9IG1lc3NhZ2U7XG5cdFx0XHR0aHJvdyBlcnJvcjtcblx0XHR9LFxuXG5cdC8vIE9wZXJhdGlvbnNcblx0Ly8gLS0tLS0tLS0tLVxuXG5cdC8vIFNldCBgdGAgdG8gYHRydWVgIHRvIHNhdmUgc3BhY2UgKHdoZW4gbWluaWZpZWQsIG5vdCBnemlwcGVkKVxuXHRcdHQgPSB0cnVlLFxuXHQvLyBVc2UgYSBxdWlja2x5LWFjY2Vzc2libGUgbWFwIHRvIHN0b3JlIGFsbCBvZiB0aGUgdW5hcnkgb3BlcmF0b3JzXG5cdC8vIFZhbHVlcyBhcmUgc2V0IHRvIGB0cnVlYCAoaXQgcmVhbGx5IGRvZXNuJ3QgbWF0dGVyKVxuXHRcdHVuYXJ5X29wcyA9IHsnLSc6IHQsICchJzogdCwgJ34nOiB0LCAnKyc6IHR9LFxuXHQvLyBBbHNvIHVzZSBhIG1hcCBmb3IgdGhlIGJpbmFyeSBvcGVyYXRpb25zIGJ1dCBzZXQgdGhlaXIgdmFsdWVzIHRvIHRoZWlyXG5cdC8vIGJpbmFyeSBwcmVjZWRlbmNlIGZvciBxdWljayByZWZlcmVuY2U6XG5cdC8vIHNlZSBbT3JkZXIgb2Ygb3BlcmF0aW9uc10oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9PcmRlcl9vZl9vcGVyYXRpb25zI1Byb2dyYW1taW5nX2xhbmd1YWdlKVxuXHRcdGJpbmFyeV9vcHMgPSB7XG5cdFx0XHQnfHwnOiAxLCAnJiYnOiAyLCAnfCc6IDMsICAnXic6IDQsICAnJic6IDUsXG5cdFx0XHQnPT0nOiA2LCAnIT0nOiA2LCAnPT09JzogNiwgJyE9PSc6IDYsXG5cdFx0XHQnPCc6IDcsICAnPic6IDcsICAnPD0nOiA3LCAgJz49JzogNyxcblx0XHRcdCc8PCc6OCwgICc+Pic6IDgsICc+Pj4nOiA4LFxuXHRcdFx0JysnOiA5LCAnLSc6IDksXG5cdFx0XHQnKic6IDEwLCAnLyc6IDEwLCAnJSc6IDEwXG5cdFx0fSxcblx0Ly8gR2V0IHJldHVybiB0aGUgbG9uZ2VzdCBrZXkgbGVuZ3RoIG9mIGFueSBvYmplY3Rcblx0XHRnZXRNYXhLZXlMZW4gPSBmdW5jdGlvbihvYmopIHtcblx0XHRcdHZhciBtYXhfbGVuID0gMCwgbGVuO1xuXHRcdFx0Zm9yKHZhciBrZXkgaW4gb2JqKSB7XG5cdFx0XHRcdGlmKChsZW4gPSBrZXkubGVuZ3RoKSA+IG1heF9sZW4gJiYgb2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdFx0XHRtYXhfbGVuID0gbGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF4X2xlbjtcblx0XHR9LFxuXHRcdG1heF91bm9wX2xlbiA9IGdldE1heEtleUxlbih1bmFyeV9vcHMpLFxuXHRcdG1heF9iaW5vcF9sZW4gPSBnZXRNYXhLZXlMZW4oYmluYXJ5X29wcyksXG5cdC8vIExpdGVyYWxzXG5cdC8vIC0tLS0tLS0tLS1cblx0Ly8gU3RvcmUgdGhlIHZhbHVlcyB0byByZXR1cm4gZm9yIHRoZSB2YXJpb3VzIGxpdGVyYWxzIHdlIG1heSBlbmNvdW50ZXJcblx0XHRsaXRlcmFscyA9IHtcblx0XHRcdCd0cnVlJzogdHJ1ZSxcblx0XHRcdCdmYWxzZSc6IGZhbHNlLFxuXHRcdFx0J251bGwnOiBudWxsXG5cdFx0fSxcblx0Ly8gRXhjZXB0IGZvciBgdGhpc2AsIHdoaWNoIGlzIHNwZWNpYWwuIFRoaXMgY291bGQgYmUgY2hhbmdlZCB0byBzb21ldGhpbmcgbGlrZSBgJ3NlbGYnYCBhcyB3ZWxsXG5cdFx0dGhpc19zdHIgPSAndGhpcycsXG5cdC8vIFJldHVybnMgdGhlIHByZWNlZGVuY2Ugb2YgYSBiaW5hcnkgb3BlcmF0b3Igb3IgYDBgIGlmIGl0IGlzbid0IGEgYmluYXJ5IG9wZXJhdG9yXG5cdFx0YmluYXJ5UHJlY2VkZW5jZSA9IGZ1bmN0aW9uKG9wX3ZhbCkge1xuXHRcdFx0cmV0dXJuIGJpbmFyeV9vcHNbb3BfdmFsXSB8fCAwO1xuXHRcdH0sXG5cdC8vIFV0aWxpdHkgZnVuY3Rpb24gKGdldHMgY2FsbGVkIGZyb20gbXVsdGlwbGUgcGxhY2VzKVxuXHQvLyBBbHNvIG5vdGUgdGhhdCBgYSAmJiBiYCBhbmQgYGEgfHwgYmAgYXJlICpsb2dpY2FsKiBleHByZXNzaW9ucywgbm90IGJpbmFyeSBleHByZXNzaW9uc1xuXHRcdGNyZWF0ZUJpbmFyeUV4cHJlc3Npb24gPSBmdW5jdGlvbiAob3BlcmF0b3IsIGxlZnQsIHJpZ2h0KSB7XG5cdFx0XHR2YXIgdHlwZSA9IChvcGVyYXRvciA9PT0gJ3x8JyB8fCBvcGVyYXRvciA9PT0gJyYmJykgPyBMT0dJQ0FMX0VYUCA6IEJJTkFSWV9FWFA7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcGVyYXRvcjogb3BlcmF0b3IsXG5cdFx0XHRcdGxlZnQ6IGxlZnQsXG5cdFx0XHRcdHJpZ2h0OiByaWdodFxuXHRcdFx0fTtcblx0XHR9LFxuXHRcdC8vIGBjaGAgaXMgYSBjaGFyYWN0ZXIgY29kZSBpbiB0aGUgbmV4dCB0aHJlZSBmdW5jdGlvbnNcblx0XHRpc0RlY2ltYWxEaWdpdCA9IGZ1bmN0aW9uKGNoKSB7XG5cdFx0XHRyZXR1cm4gKGNoID49IDQ4ICYmIGNoIDw9IDU3KTsgLy8gMC4uLjlcblx0XHR9LFxuXHRcdGlzSWRlbnRpZmllclN0YXJ0ID0gZnVuY3Rpb24oY2gpIHtcblx0XHRcdHJldHVybiAoY2ggPT09IDM2KSB8fCAoY2ggPT09IDk1KSB8fCAvLyBgJGAgYW5kIGBfYFxuXHRcdFx0XHRcdChjaCA+PSA2NSAmJiBjaCA8PSA5MCkgfHwgLy8gQS4uLlpcblx0XHRcdFx0XHQoY2ggPj0gOTcgJiYgY2ggPD0gMTIyKSB8fCAvLyBhLi4uelxuICAgICAgICAgICAgICAgICAgICAoY2ggPj0gMTI4ICYmICFiaW5hcnlfb3BzW1N0cmluZy5mcm9tQ2hhckNvZGUoY2gpXSk7IC8vIGFueSBub24tQVNDSUkgdGhhdCBpcyBub3QgYW4gb3BlcmF0b3Jcblx0XHR9LFxuXHRcdGlzSWRlbnRpZmllclBhcnQgPSBmdW5jdGlvbihjaCkge1xuXHRcdFx0cmV0dXJuIChjaCA9PT0gMzYpIHx8IChjaCA9PT0gOTUpIHx8IC8vIGAkYCBhbmQgYF9gXG5cdFx0XHRcdFx0KGNoID49IDY1ICYmIGNoIDw9IDkwKSB8fCAvLyBBLi4uWlxuXHRcdFx0XHRcdChjaCA+PSA5NyAmJiBjaCA8PSAxMjIpIHx8IC8vIGEuLi56XG5cdFx0XHRcdFx0KGNoID49IDQ4ICYmIGNoIDw9IDU3KSB8fCAvLyAwLi4uOVxuICAgICAgICAgICAgICAgICAgICAoY2ggPj0gMTI4ICYmICFiaW5hcnlfb3BzW1N0cmluZy5mcm9tQ2hhckNvZGUoY2gpXSk7IC8vIGFueSBub24tQVNDSUkgdGhhdCBpcyBub3QgYW4gb3BlcmF0b3Jcblx0XHR9LFxuXG5cdFx0Ly8gUGFyc2luZ1xuXHRcdC8vIC0tLS0tLS1cblx0XHQvLyBgZXhwcmAgaXMgYSBzdHJpbmcgd2l0aCB0aGUgcGFzc2VkIGluIGV4cHJlc3Npb25cblx0XHRqc2VwID0gZnVuY3Rpb24oZXhwcikge1xuXHRcdFx0Ly8gYGluZGV4YCBzdG9yZXMgdGhlIGNoYXJhY3RlciBudW1iZXIgd2UgYXJlIGN1cnJlbnRseSBhdCB3aGlsZSBgbGVuZ3RoYCBpcyBhIGNvbnN0YW50XG5cdFx0XHQvLyBBbGwgb2YgdGhlIGdvYmJsZXMgYmVsb3cgd2lsbCBtb2RpZnkgYGluZGV4YCBhcyB3ZSBtb3ZlIGFsb25nXG5cdFx0XHR2YXIgaW5kZXggPSAwLFxuXHRcdFx0XHRjaGFyQXRGdW5jID0gZXhwci5jaGFyQXQsXG5cdFx0XHRcdGNoYXJDb2RlQXRGdW5jID0gZXhwci5jaGFyQ29kZUF0LFxuXHRcdFx0XHRleHBySSA9IGZ1bmN0aW9uKGkpIHsgcmV0dXJuIGNoYXJBdEZ1bmMuY2FsbChleHByLCBpKTsgfSxcblx0XHRcdFx0ZXhwcklDb2RlID0gZnVuY3Rpb24oaSkgeyByZXR1cm4gY2hhckNvZGVBdEZ1bmMuY2FsbChleHByLCBpKTsgfSxcblx0XHRcdFx0bGVuZ3RoID0gZXhwci5sZW5ndGgsXG5cblx0XHRcdFx0Ly8gUHVzaCBgaW5kZXhgIHVwIHRvIHRoZSBuZXh0IG5vbi1zcGFjZSBjaGFyYWN0ZXJcblx0XHRcdFx0Z29iYmxlU3BhY2VzID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIGNoID0gZXhwcklDb2RlKGluZGV4KTtcblx0XHRcdFx0XHQvLyBzcGFjZSBvciB0YWJcblx0XHRcdFx0XHR3aGlsZShjaCA9PT0gMzIgfHwgY2ggPT09IDkgfHwgY2ggPT09IDEwIHx8IGNoID09PSAxMykge1xuXHRcdFx0XHRcdFx0Y2ggPSBleHBySUNvZGUoKytpbmRleCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFRoZSBtYWluIHBhcnNpbmcgZnVuY3Rpb24uIE11Y2ggb2YgdGhpcyBjb2RlIGlzIGRlZGljYXRlZCB0byB0ZXJuYXJ5IGV4cHJlc3Npb25zXG5cdFx0XHRcdGdvYmJsZUV4cHJlc3Npb24gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR2YXIgdGVzdCA9IGdvYmJsZUJpbmFyeUV4cHJlc3Npb24oKSxcblx0XHRcdFx0XHRcdGNvbnNlcXVlbnQsIGFsdGVybmF0ZTtcblx0XHRcdFx0XHRnb2JibGVTcGFjZXMoKTtcblx0XHRcdFx0XHRpZihleHBySUNvZGUoaW5kZXgpID09PSBRVU1BUktfQ09ERSkge1xuXHRcdFx0XHRcdFx0Ly8gVGVybmFyeSBleHByZXNzaW9uOiB0ZXN0ID8gY29uc2VxdWVudCA6IGFsdGVybmF0ZVxuXHRcdFx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0XHRcdGNvbnNlcXVlbnQgPSBnb2JibGVFeHByZXNzaW9uKCk7XG5cdFx0XHRcdFx0XHRpZighY29uc2VxdWVudCkge1xuXHRcdFx0XHRcdFx0XHR0aHJvd0Vycm9yKCdFeHBlY3RlZCBleHByZXNzaW9uJywgaW5kZXgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Z29iYmxlU3BhY2VzKCk7XG5cdFx0XHRcdFx0XHRpZihleHBySUNvZGUoaW5kZXgpID09PSBDT0xPTl9DT0RFKSB7XG5cdFx0XHRcdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdFx0XHRcdGFsdGVybmF0ZSA9IGdvYmJsZUV4cHJlc3Npb24oKTtcblx0XHRcdFx0XHRcdFx0aWYoIWFsdGVybmF0ZSkge1xuXHRcdFx0XHRcdFx0XHRcdHRocm93RXJyb3IoJ0V4cGVjdGVkIGV4cHJlc3Npb24nLCBpbmRleCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiBDT05ESVRJT05BTF9FWFAsXG5cdFx0XHRcdFx0XHRcdFx0dGVzdDogdGVzdCxcblx0XHRcdFx0XHRcdFx0XHRjb25zZXF1ZW50OiBjb25zZXF1ZW50LFxuXHRcdFx0XHRcdFx0XHRcdGFsdGVybmF0ZTogYWx0ZXJuYXRlXG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0aHJvd0Vycm9yKCdFeHBlY3RlZCA6JywgaW5kZXgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGVzdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU2VhcmNoIGZvciB0aGUgb3BlcmF0aW9uIHBvcnRpb24gb2YgdGhlIHN0cmluZyAoZS5nLiBgK2AsIGA9PT1gKVxuXHRcdFx0XHQvLyBTdGFydCBieSB0YWtpbmcgdGhlIGxvbmdlc3QgcG9zc2libGUgYmluYXJ5IG9wZXJhdGlvbnMgKDMgY2hhcmFjdGVyczogYD09PWAsIGAhPT1gLCBgPj4+YClcblx0XHRcdFx0Ly8gYW5kIG1vdmUgZG93biBmcm9tIDMgdG8gMiB0byAxIGNoYXJhY3RlciB1bnRpbCBhIG1hdGNoaW5nIGJpbmFyeSBvcGVyYXRpb24gaXMgZm91bmRcblx0XHRcdFx0Ly8gdGhlbiwgcmV0dXJuIHRoYXQgYmluYXJ5IG9wZXJhdGlvblxuXHRcdFx0XHRnb2JibGVCaW5hcnlPcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGdvYmJsZVNwYWNlcygpO1xuXHRcdFx0XHRcdHZhciBiaW9wLCB0b19jaGVjayA9IGV4cHIuc3Vic3RyKGluZGV4LCBtYXhfYmlub3BfbGVuKSwgdGNfbGVuID0gdG9fY2hlY2subGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlKHRjX2xlbiA+IDApIHtcblx0XHRcdFx0XHRcdC8vIERvbid0IGFjY2VwdCBhIGJpbmFyeSBvcCB3aGVuIGl0IGlzIGFuIGlkZW50aWZpZXIuXG5cdFx0XHRcdFx0XHQvLyBCaW5hcnkgb3BzIHRoYXQgc3RhcnQgd2l0aCBhIGlkZW50aWZpZXItdmFsaWQgY2hhcmFjdGVyIG11c3QgYmUgZm9sbG93ZWRcblx0XHRcdFx0XHRcdC8vIGJ5IGEgbm9uIGlkZW50aWZpZXItcGFydCB2YWxpZCBjaGFyYWN0ZXJcblx0XHRcdFx0XHRcdGlmKGJpbmFyeV9vcHMuaGFzT3duUHJvcGVydHkodG9fY2hlY2spICYmIChcblx0XHRcdFx0XHRcdFx0IWlzSWRlbnRpZmllclN0YXJ0KGV4cHJJQ29kZShpbmRleCkpIHx8XG5cdFx0XHRcdFx0XHRcdChpbmRleCt0b19jaGVjay5sZW5ndGg8IGV4cHIubGVuZ3RoICYmICFpc0lkZW50aWZpZXJQYXJ0KGV4cHJJQ29kZShpbmRleCt0b19jaGVjay5sZW5ndGgpKSlcblx0XHRcdFx0XHRcdCkpIHtcblx0XHRcdFx0XHRcdFx0aW5kZXggKz0gdGNfbGVuO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdG9fY2hlY2s7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0b19jaGVjayA9IHRvX2NoZWNrLnN1YnN0cigwLCAtLXRjX2xlbik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBUaGlzIGZ1bmN0aW9uIGlzIHJlc3BvbnNpYmxlIGZvciBnb2JibGluZyBhbiBpbmRpdmlkdWFsIGV4cHJlc3Npb24sXG5cdFx0XHRcdC8vIGUuZy4gYDFgLCBgMSsyYCwgYGErKGIqMiktTWF0aC5zcXJ0KDIpYFxuXHRcdFx0XHRnb2JibGVCaW5hcnlFeHByZXNzaW9uID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIGNoX2ksIG5vZGUsIGJpb3AsIHByZWMsIHN0YWNrLCBiaW9wX2luZm8sIGxlZnQsIHJpZ2h0LCBpLCBjdXJfYmlvcDtcblxuXHRcdFx0XHRcdC8vIEZpcnN0LCB0cnkgdG8gZ2V0IHRoZSBsZWZ0bW9zdCB0aGluZ1xuXHRcdFx0XHRcdC8vIFRoZW4sIGNoZWNrIHRvIHNlZSBpZiB0aGVyZSdzIGEgYmluYXJ5IG9wZXJhdG9yIG9wZXJhdGluZyBvbiB0aGF0IGxlZnRtb3N0IHRoaW5nXG5cdFx0XHRcdFx0bGVmdCA9IGdvYmJsZVRva2VuKCk7XG5cdFx0XHRcdFx0YmlvcCA9IGdvYmJsZUJpbmFyeU9wKCk7XG5cblx0XHRcdFx0XHQvLyBJZiB0aGVyZSB3YXNuJ3QgYSBiaW5hcnkgb3BlcmF0b3IsIGp1c3QgcmV0dXJuIHRoZSBsZWZ0bW9zdCBub2RlXG5cdFx0XHRcdFx0aWYoIWJpb3ApIHtcblx0XHRcdFx0XHRcdHJldHVybiBsZWZ0O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgd2UgbmVlZCB0byBzdGFydCBhIHN0YWNrIHRvIHByb3Blcmx5IHBsYWNlIHRoZSBiaW5hcnkgb3BlcmF0aW9ucyBpbiB0aGVpclxuXHRcdFx0XHRcdC8vIHByZWNlZGVuY2Ugc3RydWN0dXJlXG5cdFx0XHRcdFx0YmlvcF9pbmZvID0geyB2YWx1ZTogYmlvcCwgcHJlYzogYmluYXJ5UHJlY2VkZW5jZShiaW9wKX07XG5cblx0XHRcdFx0XHRyaWdodCA9IGdvYmJsZVRva2VuKCk7XG5cdFx0XHRcdFx0aWYoIXJpZ2h0KSB7XG5cdFx0XHRcdFx0XHR0aHJvd0Vycm9yKFwiRXhwZWN0ZWQgZXhwcmVzc2lvbiBhZnRlciBcIiArIGJpb3AsIGluZGV4KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c3RhY2sgPSBbbGVmdCwgYmlvcF9pbmZvLCByaWdodF07XG5cblx0XHRcdFx0XHQvLyBQcm9wZXJseSBkZWFsIHdpdGggcHJlY2VkZW5jZSB1c2luZyBbcmVjdXJzaXZlIGRlc2NlbnRdKGh0dHA6Ly93d3cuZW5nci5tdW4uY2EvfnRoZW8vTWlzYy9leHBfcGFyc2luZy5odG0pXG5cdFx0XHRcdFx0d2hpbGUoKGJpb3AgPSBnb2JibGVCaW5hcnlPcCgpKSkge1xuXHRcdFx0XHRcdFx0cHJlYyA9IGJpbmFyeVByZWNlZGVuY2UoYmlvcCk7XG5cblx0XHRcdFx0XHRcdGlmKHByZWMgPT09IDApIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRiaW9wX2luZm8gPSB7IHZhbHVlOiBiaW9wLCBwcmVjOiBwcmVjIH07XG5cblx0XHRcdFx0XHRcdGN1cl9iaW9wID0gYmlvcDtcblx0XHRcdFx0XHRcdC8vIFJlZHVjZTogbWFrZSBhIGJpbmFyeSBleHByZXNzaW9uIGZyb20gdGhlIHRocmVlIHRvcG1vc3QgZW50cmllcy5cblx0XHRcdFx0XHRcdHdoaWxlICgoc3RhY2subGVuZ3RoID4gMikgJiYgKHByZWMgPD0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMl0ucHJlYykpIHtcblx0XHRcdFx0XHRcdFx0cmlnaHQgPSBzdGFjay5wb3AoKTtcblx0XHRcdFx0XHRcdFx0YmlvcCA9IHN0YWNrLnBvcCgpLnZhbHVlO1xuXHRcdFx0XHRcdFx0XHRsZWZ0ID0gc3RhY2sucG9wKCk7XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBjcmVhdGVCaW5hcnlFeHByZXNzaW9uKGJpb3AsIGxlZnQsIHJpZ2h0KTtcblx0XHRcdFx0XHRcdFx0c3RhY2sucHVzaChub2RlKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0bm9kZSA9IGdvYmJsZVRva2VuKCk7XG5cdFx0XHRcdFx0XHRpZighbm9kZSkge1xuXHRcdFx0XHRcdFx0XHR0aHJvd0Vycm9yKFwiRXhwZWN0ZWQgZXhwcmVzc2lvbiBhZnRlciBcIiArIGN1cl9iaW9wLCBpbmRleCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRzdGFjay5wdXNoKGJpb3BfaW5mbywgbm9kZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aSA9IHN0YWNrLmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0bm9kZSA9IHN0YWNrW2ldO1xuXHRcdFx0XHRcdHdoaWxlKGkgPiAxKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gY3JlYXRlQmluYXJ5RXhwcmVzc2lvbihzdGFja1tpIC0gMV0udmFsdWUsIHN0YWNrW2kgLSAyXSwgbm9kZSk7XG5cdFx0XHRcdFx0XHRpIC09IDI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBub2RlO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEFuIGluZGl2aWR1YWwgcGFydCBvZiBhIGJpbmFyeSBleHByZXNzaW9uOlxuXHRcdFx0XHQvLyBlLmcuIGBmb28uYmFyKGJheilgLCBgMWAsIGBcImFiY1wiYCwgYChhICUgMilgIChiZWNhdXNlIGl0J3MgaW4gcGFyZW50aGVzaXMpXG5cdFx0XHRcdGdvYmJsZVRva2VuID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIGNoLCB0b19jaGVjaywgdGNfbGVuO1xuXG5cdFx0XHRcdFx0Z29iYmxlU3BhY2VzKCk7XG5cdFx0XHRcdFx0Y2ggPSBleHBySUNvZGUoaW5kZXgpO1xuXG5cdFx0XHRcdFx0aWYoaXNEZWNpbWFsRGlnaXQoY2gpIHx8IGNoID09PSBQRVJJT0RfQ09ERSkge1xuXHRcdFx0XHRcdFx0Ly8gQ2hhciBjb2RlIDQ2IGlzIGEgZG90IGAuYCB3aGljaCBjYW4gc3RhcnQgb2ZmIGEgbnVtZXJpYyBsaXRlcmFsXG5cdFx0XHRcdFx0XHRyZXR1cm4gZ29iYmxlTnVtZXJpY0xpdGVyYWwoKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYoY2ggPT09IFNRVU9URV9DT0RFIHx8IGNoID09PSBEUVVPVEVfQ09ERSkge1xuXHRcdFx0XHRcdFx0Ly8gU2luZ2xlIG9yIGRvdWJsZSBxdW90ZXNcblx0XHRcdFx0XHRcdHJldHVybiBnb2JibGVTdHJpbmdMaXRlcmFsKCk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChjaCA9PT0gT0JSQUNLX0NPREUpIHtcblx0XHRcdFx0XHRcdHJldHVybiBnb2JibGVBcnJheSgpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0b19jaGVjayA9IGV4cHIuc3Vic3RyKGluZGV4LCBtYXhfdW5vcF9sZW4pO1xuXHRcdFx0XHRcdFx0dGNfbGVuID0gdG9fY2hlY2subGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUodGNfbGVuID4gMCkge1xuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgYWNjZXB0IGFuIHVuYXJ5IG9wIHdoZW4gaXQgaXMgYW4gaWRlbnRpZmllci5cblx0XHRcdFx0XHRcdC8vIFVuYXJ5IG9wcyB0aGF0IHN0YXJ0IHdpdGggYSBpZGVudGlmaWVyLXZhbGlkIGNoYXJhY3RlciBtdXN0IGJlIGZvbGxvd2VkXG5cdFx0XHRcdFx0XHQvLyBieSBhIG5vbiBpZGVudGlmaWVyLXBhcnQgdmFsaWQgY2hhcmFjdGVyXG5cdFx0XHRcdFx0XHRcdGlmKHVuYXJ5X29wcy5oYXNPd25Qcm9wZXJ0eSh0b19jaGVjaykgJiYgKFxuXHRcdFx0XHRcdFx0XHRcdCFpc0lkZW50aWZpZXJTdGFydChleHBySUNvZGUoaW5kZXgpKSB8fFxuXHRcdFx0XHRcdFx0XHRcdChpbmRleCt0b19jaGVjay5sZW5ndGggPCBleHByLmxlbmd0aCAmJiAhaXNJZGVudGlmaWVyUGFydChleHBySUNvZGUoaW5kZXgrdG9fY2hlY2subGVuZ3RoKSkpXG5cdFx0XHRcdFx0XHRcdCkpIHtcblx0XHRcdFx0XHRcdFx0XHRpbmRleCArPSB0Y19sZW47XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFVOQVJZX0VYUCxcblx0XHRcdFx0XHRcdFx0XHRcdG9wZXJhdG9yOiB0b19jaGVjayxcblx0XHRcdFx0XHRcdFx0XHRcdGFyZ3VtZW50OiBnb2JibGVUb2tlbigpLFxuXHRcdFx0XHRcdFx0XHRcdFx0cHJlZml4OiB0cnVlXG5cdFx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR0b19jaGVjayA9IHRvX2NoZWNrLnN1YnN0cigwLCAtLXRjX2xlbik7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmIChpc0lkZW50aWZpZXJTdGFydChjaCkgfHwgY2ggPT09IE9QQVJFTl9DT0RFKSB7IC8vIG9wZW4gcGFyZW50aGVzaXNcblx0XHRcdFx0XHRcdFx0Ly8gYGZvb2AsIGBiYXIuYmF6YFxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ29iYmxlVmFyaWFibGUoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdC8vIFBhcnNlIHNpbXBsZSBudW1lcmljIGxpdGVyYWxzOiBgMTJgLCBgMy40YCwgYC41YC4gRG8gdGhpcyBieSB1c2luZyBhIHN0cmluZyB0b1xuXHRcdFx0XHQvLyBrZWVwIHRyYWNrIG9mIGV2ZXJ5dGhpbmcgaW4gdGhlIG51bWVyaWMgbGl0ZXJhbCBhbmQgdGhlbiBjYWxsaW5nIGBwYXJzZUZsb2F0YCBvbiB0aGF0IHN0cmluZ1xuXHRcdFx0XHRnb2JibGVOdW1lcmljTGl0ZXJhbCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHZhciBudW1iZXIgPSAnJywgY2gsIGNoQ29kZTtcblx0XHRcdFx0XHR3aGlsZShpc0RlY2ltYWxEaWdpdChleHBySUNvZGUoaW5kZXgpKSkge1xuXHRcdFx0XHRcdFx0bnVtYmVyICs9IGV4cHJJKGluZGV4KyspO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmKGV4cHJJQ29kZShpbmRleCkgPT09IFBFUklPRF9DT0RFKSB7IC8vIGNhbiBzdGFydCB3aXRoIGEgZGVjaW1hbCBtYXJrZXJcblx0XHRcdFx0XHRcdG51bWJlciArPSBleHBySShpbmRleCsrKTtcblxuXHRcdFx0XHRcdFx0d2hpbGUoaXNEZWNpbWFsRGlnaXQoZXhwcklDb2RlKGluZGV4KSkpIHtcblx0XHRcdFx0XHRcdFx0bnVtYmVyICs9IGV4cHJJKGluZGV4KyspO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNoID0gZXhwckkoaW5kZXgpO1xuXHRcdFx0XHRcdGlmKGNoID09PSAnZScgfHwgY2ggPT09ICdFJykgeyAvLyBleHBvbmVudCBtYXJrZXJcblx0XHRcdFx0XHRcdG51bWJlciArPSBleHBySShpbmRleCsrKTtcblx0XHRcdFx0XHRcdGNoID0gZXhwckkoaW5kZXgpO1xuXHRcdFx0XHRcdFx0aWYoY2ggPT09ICcrJyB8fCBjaCA9PT0gJy0nKSB7IC8vIGV4cG9uZW50IHNpZ25cblx0XHRcdFx0XHRcdFx0bnVtYmVyICs9IGV4cHJJKGluZGV4KyspO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0d2hpbGUoaXNEZWNpbWFsRGlnaXQoZXhwcklDb2RlKGluZGV4KSkpIHsgLy9leHBvbmVudCBpdHNlbGZcblx0XHRcdFx0XHRcdFx0bnVtYmVyICs9IGV4cHJJKGluZGV4KyspO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYoIWlzRGVjaW1hbERpZ2l0KGV4cHJJQ29kZShpbmRleC0xKSkgKSB7XG5cdFx0XHRcdFx0XHRcdHRocm93RXJyb3IoJ0V4cGVjdGVkIGV4cG9uZW50ICgnICsgbnVtYmVyICsgZXhwckkoaW5kZXgpICsgJyknLCBpbmRleCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cblx0XHRcdFx0XHRjaENvZGUgPSBleHBySUNvZGUoaW5kZXgpO1xuXHRcdFx0XHRcdC8vIENoZWNrIHRvIG1ha2Ugc3VyZSB0aGlzIGlzbid0IGEgdmFyaWFibGUgbmFtZSB0aGF0IHN0YXJ0IHdpdGggYSBudW1iZXIgKDEyM2FiYylcblx0XHRcdFx0XHRpZihpc0lkZW50aWZpZXJTdGFydChjaENvZGUpKSB7XG5cdFx0XHRcdFx0XHR0aHJvd0Vycm9yKCdWYXJpYWJsZSBuYW1lcyBjYW5ub3Qgc3RhcnQgd2l0aCBhIG51bWJlciAoJyArXG5cdFx0XHRcdFx0XHRcdFx0XHRudW1iZXIgKyBleHBySShpbmRleCkgKyAnKScsIGluZGV4KTtcblx0XHRcdFx0XHR9IGVsc2UgaWYoY2hDb2RlID09PSBQRVJJT0RfQ09ERSkge1xuXHRcdFx0XHRcdFx0dGhyb3dFcnJvcignVW5leHBlY3RlZCBwZXJpb2QnLCBpbmRleCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHR5cGU6IExJVEVSQUwsXG5cdFx0XHRcdFx0XHR2YWx1ZTogcGFyc2VGbG9hdChudW1iZXIpLFxuXHRcdFx0XHRcdFx0cmF3OiBudW1iZXJcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFBhcnNlcyBhIHN0cmluZyBsaXRlcmFsLCBzdGFyaW5nIHdpdGggc2luZ2xlIG9yIGRvdWJsZSBxdW90ZXMgd2l0aCBiYXNpYyBzdXBwb3J0IGZvciBlc2NhcGUgY29kZXNcblx0XHRcdFx0Ly8gZS5nLiBgXCJoZWxsbyB3b3JsZFwiYCwgYCd0aGlzIGlzXFxuSlNFUCdgXG5cdFx0XHRcdGdvYmJsZVN0cmluZ0xpdGVyYWwgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR2YXIgc3RyID0gJycsIHF1b3RlID0gZXhwckkoaW5kZXgrKyksIGNsb3NlZCA9IGZhbHNlLCBjaDtcblxuXHRcdFx0XHRcdHdoaWxlKGluZGV4IDwgbGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRjaCA9IGV4cHJJKGluZGV4KyspO1xuXHRcdFx0XHRcdFx0aWYoY2ggPT09IHF1b3RlKSB7XG5cdFx0XHRcdFx0XHRcdGNsb3NlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmKGNoID09PSAnXFxcXCcpIHtcblx0XHRcdFx0XHRcdFx0Ly8gQ2hlY2sgZm9yIGFsbCBvZiB0aGUgY29tbW9uIGVzY2FwZSBjb2Rlc1xuXHRcdFx0XHRcdFx0XHRjaCA9IGV4cHJJKGluZGV4KyspO1xuXHRcdFx0XHRcdFx0XHRzd2l0Y2goY2gpIHtcblx0XHRcdFx0XHRcdFx0XHRjYXNlICduJzogc3RyICs9ICdcXG4nOyBicmVhaztcblx0XHRcdFx0XHRcdFx0XHRjYXNlICdyJzogc3RyICs9ICdcXHInOyBicmVhaztcblx0XHRcdFx0XHRcdFx0XHRjYXNlICd0Jzogc3RyICs9ICdcXHQnOyBicmVhaztcblx0XHRcdFx0XHRcdFx0XHRjYXNlICdiJzogc3RyICs9ICdcXGInOyBicmVhaztcblx0XHRcdFx0XHRcdFx0XHRjYXNlICdmJzogc3RyICs9ICdcXGYnOyBicmVhaztcblx0XHRcdFx0XHRcdFx0XHRjYXNlICd2Jzogc3RyICs9ICdcXHgwQic7IGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQgOiBzdHIgKz0gY2g7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHN0ciArPSBjaDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZighY2xvc2VkKSB7XG5cdFx0XHRcdFx0XHR0aHJvd0Vycm9yKCdVbmNsb3NlZCBxdW90ZSBhZnRlciBcIicrc3RyKydcIicsIGluZGV4KTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0dHlwZTogTElURVJBTCxcblx0XHRcdFx0XHRcdHZhbHVlOiBzdHIsXG5cdFx0XHRcdFx0XHRyYXc6IHF1b3RlICsgc3RyICsgcXVvdGVcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdvYmJsZXMgb25seSBpZGVudGlmaWVyc1xuXHRcdFx0XHQvLyBlLmcuOiBgZm9vYCwgYF92YWx1ZWAsIGAkeDFgXG5cdFx0XHRcdC8vIEFsc28sIHRoaXMgZnVuY3Rpb24gY2hlY2tzIGlmIHRoYXQgaWRlbnRpZmllciBpcyBhIGxpdGVyYWw6XG5cdFx0XHRcdC8vIChlLmcuIGB0cnVlYCwgYGZhbHNlYCwgYG51bGxgKSBvciBgdGhpc2Bcblx0XHRcdFx0Z29iYmxlSWRlbnRpZmllciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHZhciBjaCA9IGV4cHJJQ29kZShpbmRleCksIHN0YXJ0ID0gaW5kZXgsIGlkZW50aWZpZXI7XG5cblx0XHRcdFx0XHRpZihpc0lkZW50aWZpZXJTdGFydChjaCkpIHtcblx0XHRcdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRocm93RXJyb3IoJ1VuZXhwZWN0ZWQgJyArIGV4cHJJKGluZGV4KSwgaW5kZXgpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHdoaWxlKGluZGV4IDwgbGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRjaCA9IGV4cHJJQ29kZShpbmRleCk7XG5cdFx0XHRcdFx0XHRpZihpc0lkZW50aWZpZXJQYXJ0KGNoKSkge1xuXHRcdFx0XHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlkZW50aWZpZXIgPSBleHByLnNsaWNlKHN0YXJ0LCBpbmRleCk7XG5cblx0XHRcdFx0XHRpZihsaXRlcmFscy5oYXNPd25Qcm9wZXJ0eShpZGVudGlmaWVyKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0dHlwZTogTElURVJBTCxcblx0XHRcdFx0XHRcdFx0dmFsdWU6IGxpdGVyYWxzW2lkZW50aWZpZXJdLFxuXHRcdFx0XHRcdFx0XHRyYXc6IGlkZW50aWZpZXJcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fSBlbHNlIGlmKGlkZW50aWZpZXIgPT09IHRoaXNfc3RyKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4geyB0eXBlOiBUSElTX0VYUCB9O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHR0eXBlOiBJREVOVElGSUVSLFxuXHRcdFx0XHRcdFx0XHRuYW1lOiBpZGVudGlmaWVyXG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHb2JibGVzIGEgbGlzdCBvZiBhcmd1bWVudHMgd2l0aGluIHRoZSBjb250ZXh0IG9mIGEgZnVuY3Rpb24gY2FsbFxuXHRcdFx0XHQvLyBvciBhcnJheSBsaXRlcmFsLiBUaGlzIGZ1bmN0aW9uIGFsc28gYXNzdW1lcyB0aGF0IHRoZSBvcGVuaW5nIGNoYXJhY3RlclxuXHRcdFx0XHQvLyBgKGAgb3IgYFtgIGhhcyBhbHJlYWR5IGJlZW4gZ29iYmxlZCwgYW5kIGdvYmJsZXMgZXhwcmVzc2lvbnMgYW5kIGNvbW1hc1xuXHRcdFx0XHQvLyB1bnRpbCB0aGUgdGVybWluYXRvciBjaGFyYWN0ZXIgYClgIG9yIGBdYCBpcyBlbmNvdW50ZXJlZC5cblx0XHRcdFx0Ly8gZS5nLiBgZm9vKGJhciwgYmF6KWAsIGBteV9mdW5jKClgLCBvciBgW2JhciwgYmF6XWBcblx0XHRcdFx0Z29iYmxlQXJndW1lbnRzID0gZnVuY3Rpb24odGVybWluYXRpb24pIHtcblx0XHRcdFx0XHR2YXIgY2hfaSwgYXJncyA9IFtdLCBub2RlLCBjbG9zZWQgPSBmYWxzZTtcblx0XHRcdFx0XHR2YXIgc2VwYXJhdG9yX2NvdW50ID0gMDtcblx0XHRcdFx0XHR3aGlsZShpbmRleCA8IGxlbmd0aCkge1xuXHRcdFx0XHRcdFx0Z29iYmxlU3BhY2VzKCk7XG5cdFx0XHRcdFx0XHRjaF9pID0gZXhwcklDb2RlKGluZGV4KTtcblx0XHRcdFx0XHRcdGlmKGNoX2kgPT09IHRlcm1pbmF0aW9uKSB7IC8vIGRvbmUgcGFyc2luZ1xuXHRcdFx0XHRcdFx0XHRjbG9zZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRcdFx0XHRpZih0ZXJtaW5hdGlvbiA9PT0gQ1BBUkVOX0NPREUgJiYgc2VwYXJhdG9yX2NvdW50ICYmIHNlcGFyYXRvcl9jb3VudCA+PSBhcmdzLmxlbmd0aCl7XG5cdFx0XHRcdFx0XHRcdFx0dGhyb3dFcnJvcignVW5leHBlY3RlZCB0b2tlbiAnICsgU3RyaW5nLmZyb21DaGFyQ29kZSh0ZXJtaW5hdGlvbiksIGluZGV4KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoY2hfaSA9PT0gQ09NTUFfQ09ERSkgeyAvLyBiZXR3ZWVuIGV4cHJlc3Npb25zXG5cdFx0XHRcdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdFx0XHRcdHNlcGFyYXRvcl9jb3VudCsrO1xuXHRcdFx0XHRcdFx0XHRpZihzZXBhcmF0b3JfY291bnQgIT09IGFyZ3MubGVuZ3RoKSB7IC8vIG1pc3NpbmcgYXJndW1lbnRcblx0XHRcdFx0XHRcdFx0XHRpZih0ZXJtaW5hdGlvbiA9PT0gQ1BBUkVOX0NPREUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRocm93RXJyb3IoJ1VuZXhwZWN0ZWQgdG9rZW4gLCcsIGluZGV4KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0ZWxzZSBpZih0ZXJtaW5hdGlvbiA9PT0gQ0JSQUNLX0NPREUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGZvcih2YXIgYXJnID0gYXJncy5sZW5ndGg7IGFyZzwgc2VwYXJhdG9yX2NvdW50OyBhcmcrKykge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzLnB1c2gobnVsbCk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRub2RlID0gZ29iYmxlRXhwcmVzc2lvbigpO1xuXHRcdFx0XHRcdFx0XHRpZighbm9kZSB8fCBub2RlLnR5cGUgPT09IENPTVBPVU5EKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhyb3dFcnJvcignRXhwZWN0ZWQgY29tbWEnLCBpbmRleCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0YXJncy5wdXNoKG5vZGUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIWNsb3NlZCkge1xuXHRcdFx0XHRcdFx0dGhyb3dFcnJvcignRXhwZWN0ZWQgJyArIFN0cmluZy5mcm9tQ2hhckNvZGUodGVybWluYXRpb24pLCBpbmRleCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBhcmdzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdvYmJsZSBhIG5vbi1saXRlcmFsIHZhcmlhYmxlIG5hbWUuIFRoaXMgdmFyaWFibGUgbmFtZSBtYXkgaW5jbHVkZSBwcm9wZXJ0aWVzXG5cdFx0XHRcdC8vIGUuZy4gYGZvb2AsIGBiYXIuYmF6YCwgYGZvb1snYmFyJ10uYmF6YFxuXHRcdFx0XHQvLyBJdCBhbHNvIGdvYmJsZXMgZnVuY3Rpb24gY2FsbHM6XG5cdFx0XHRcdC8vIGUuZy4gYE1hdGguYWNvcyhvYmouYW5nbGUpYFxuXHRcdFx0XHRnb2JibGVWYXJpYWJsZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHZhciBjaF9pLCBub2RlO1xuXHRcdFx0XHRcdGNoX2kgPSBleHBySUNvZGUoaW5kZXgpO1xuXG5cdFx0XHRcdFx0aWYoY2hfaSA9PT0gT1BBUkVOX0NPREUpIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBnb2JibGVHcm91cCgpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZ29iYmxlSWRlbnRpZmllcigpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRnb2JibGVTcGFjZXMoKTtcblx0XHRcdFx0XHRjaF9pID0gZXhwcklDb2RlKGluZGV4KTtcblx0XHRcdFx0XHR3aGlsZShjaF9pID09PSBQRVJJT0RfQ09ERSB8fCBjaF9pID09PSBPQlJBQ0tfQ09ERSB8fCBjaF9pID09PSBPUEFSRU5fQ09ERSkge1xuXHRcdFx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0XHRcdGlmKGNoX2kgPT09IFBFUklPRF9DT0RFKSB7XG5cdFx0XHRcdFx0XHRcdGdvYmJsZVNwYWNlcygpO1xuXHRcdFx0XHRcdFx0XHRub2RlID0ge1xuXHRcdFx0XHRcdFx0XHRcdHR5cGU6IE1FTUJFUl9FWFAsXG5cdFx0XHRcdFx0XHRcdFx0Y29tcHV0ZWQ6IGZhbHNlLFxuXHRcdFx0XHRcdFx0XHRcdG9iamVjdDogbm9kZSxcblx0XHRcdFx0XHRcdFx0XHRwcm9wZXJ0eTogZ29iYmxlSWRlbnRpZmllcigpXG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYoY2hfaSA9PT0gT0JSQUNLX0NPREUpIHtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiBNRU1CRVJfRVhQLFxuXHRcdFx0XHRcdFx0XHRcdGNvbXB1dGVkOiB0cnVlLFxuXHRcdFx0XHRcdFx0XHRcdG9iamVjdDogbm9kZSxcblx0XHRcdFx0XHRcdFx0XHRwcm9wZXJ0eTogZ29iYmxlRXhwcmVzc2lvbigpXG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdGdvYmJsZVNwYWNlcygpO1xuXHRcdFx0XHRcdFx0XHRjaF9pID0gZXhwcklDb2RlKGluZGV4KTtcblx0XHRcdFx0XHRcdFx0aWYoY2hfaSAhPT0gQ0JSQUNLX0NPREUpIHtcblx0XHRcdFx0XHRcdFx0XHR0aHJvd0Vycm9yKCdVbmNsb3NlZCBbJywgaW5kZXgpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYoY2hfaSA9PT0gT1BBUkVOX0NPREUpIHtcblx0XHRcdFx0XHRcdFx0Ly8gQSBmdW5jdGlvbiBjYWxsIGlzIGJlaW5nIG1hZGU7IGdvYmJsZSBhbGwgdGhlIGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRub2RlID0ge1xuXHRcdFx0XHRcdFx0XHRcdHR5cGU6IENBTExfRVhQLFxuXHRcdFx0XHRcdFx0XHRcdCdhcmd1bWVudHMnOiBnb2JibGVBcmd1bWVudHMoQ1BBUkVOX0NPREUpLFxuXHRcdFx0XHRcdFx0XHRcdGNhbGxlZTogbm9kZVxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Z29iYmxlU3BhY2VzKCk7XG5cdFx0XHRcdFx0XHRjaF9pID0gZXhwcklDb2RlKGluZGV4KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG5vZGU7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmVzcG9uc2libGUgZm9yIHBhcnNpbmcgYSBncm91cCBvZiB0aGluZ3Mgd2l0aGluIHBhcmVudGhlc2VzIGAoKWBcblx0XHRcdFx0Ly8gVGhpcyBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgaXQgbmVlZHMgdG8gZ29iYmxlIHRoZSBvcGVuaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdC8vIGFuZCB0aGVuIHRyaWVzIHRvIGdvYmJsZSBldmVyeXRoaW5nIHdpdGhpbiB0aGF0IHBhcmVudGhlc2lzLCBhc3N1bWluZ1xuXHRcdFx0XHQvLyB0aGF0IHRoZSBuZXh0IHRoaW5nIGl0IHNob3VsZCBzZWUgaXMgdGhlIGNsb3NlIHBhcmVudGhlc2lzLiBJZiBub3QsXG5cdFx0XHRcdC8vIHRoZW4gdGhlIGV4cHJlc3Npb24gcHJvYmFibHkgZG9lc24ndCBoYXZlIGEgYClgXG5cdFx0XHRcdGdvYmJsZUdyb3VwID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0XHR2YXIgbm9kZSA9IGdvYmJsZUV4cHJlc3Npb24oKTtcblx0XHRcdFx0XHRnb2JibGVTcGFjZXMoKTtcblx0XHRcdFx0XHRpZihleHBySUNvZGUoaW5kZXgpID09PSBDUEFSRU5fQ09ERSkge1xuXHRcdFx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0XHRcdHJldHVybiBub2RlO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0aHJvd0Vycm9yKCdVbmNsb3NlZCAoJywgaW5kZXgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSZXNwb25zaWJsZSBmb3IgcGFyc2luZyBBcnJheSBsaXRlcmFscyBgWzEsIDIsIDNdYFxuXHRcdFx0XHQvLyBUaGlzIGZ1bmN0aW9uIGFzc3VtZXMgdGhhdCBpdCBuZWVkcyB0byBnb2JibGUgdGhlIG9wZW5pbmcgYnJhY2tldFxuXHRcdFx0XHQvLyBhbmQgdGhlbiB0cmllcyB0byBnb2JibGUgdGhlIGV4cHJlc3Npb25zIGFzIGFyZ3VtZW50cy5cblx0XHRcdFx0Z29iYmxlQXJyYXkgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0eXBlOiBBUlJBWV9FWFAsXG5cdFx0XHRcdFx0XHRlbGVtZW50czogZ29iYmxlQXJndW1lbnRzKENCUkFDS19DT0RFKVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0bm9kZXMgPSBbXSwgY2hfaSwgbm9kZTtcblxuXHRcdFx0d2hpbGUoaW5kZXggPCBsZW5ndGgpIHtcblx0XHRcdFx0Y2hfaSA9IGV4cHJJQ29kZShpbmRleCk7XG5cblx0XHRcdFx0Ly8gRXhwcmVzc2lvbnMgY2FuIGJlIHNlcGFyYXRlZCBieSBzZW1pY29sb25zLCBjb21tYXMsIG9yIGp1c3QgaW5mZXJyZWQgd2l0aG91dCBhbnlcblx0XHRcdFx0Ly8gc2VwYXJhdG9yc1xuXHRcdFx0XHRpZihjaF9pID09PSBTRU1DT0xfQ09ERSB8fCBjaF9pID09PSBDT01NQV9DT0RFKSB7XG5cdFx0XHRcdFx0aW5kZXgrKzsgLy8gaWdub3JlIHNlcGFyYXRvcnNcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBUcnkgdG8gZ29iYmxlIGVhY2ggZXhwcmVzc2lvbiBpbmRpdmlkdWFsbHlcblx0XHRcdFx0XHRpZigobm9kZSA9IGdvYmJsZUV4cHJlc3Npb24oKSkpIHtcblx0XHRcdFx0XHRcdG5vZGVzLnB1c2gobm9kZSk7XG5cdFx0XHRcdFx0Ly8gSWYgd2Ugd2VyZW4ndCBhYmxlIHRvIGZpbmQgYSBiaW5hcnkgZXhwcmVzc2lvbiBhbmQgYXJlIG91dCBvZiByb29tLCB0aGVuXG5cdFx0XHRcdFx0Ly8gdGhlIGV4cHJlc3Npb24gcGFzc2VkIGluIHByb2JhYmx5IGhhcyB0b28gbXVjaFxuXHRcdFx0XHRcdH0gZWxzZSBpZihpbmRleCA8IGxlbmd0aCkge1xuXHRcdFx0XHRcdFx0dGhyb3dFcnJvcignVW5leHBlY3RlZCBcIicgKyBleHBySShpbmRleCkgKyAnXCInLCBpbmRleCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoZXJlJ3Mgb25seSBvbmUgZXhwcmVzc2lvbiBqdXN0IHRyeSByZXR1cm5pbmcgdGhlIGV4cHJlc3Npb25cblx0XHRcdGlmKG5vZGVzLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0XHRyZXR1cm4gbm9kZXNbMF07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHR5cGU6IENPTVBPVU5ELFxuXHRcdFx0XHRcdGJvZHk6IG5vZGVzXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fTtcblxuXHQvLyBUbyBiZSBmaWxsZWQgaW4gYnkgdGhlIHRlbXBsYXRlXG5cdGpzZXAudmVyc2lvbiA9ICcwLjMuNSc7XG5cdGpzZXAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuICdKYXZhU2NyaXB0IEV4cHJlc3Npb24gUGFyc2VyIChKU0VQKSB2JyArIGpzZXAudmVyc2lvbjsgfTtcblxuXHQvKipcblx0ICogQG1ldGhvZCBqc2VwLmFkZFVuYXJ5T3Bcblx0ICogQHBhcmFtIHtzdHJpbmd9IG9wX25hbWUgVGhlIG5hbWUgb2YgdGhlIHVuYXJ5IG9wIHRvIGFkZFxuXHQgKiBAcmV0dXJuIGpzZXBcblx0ICovXG5cdGpzZXAuYWRkVW5hcnlPcCA9IGZ1bmN0aW9uKG9wX25hbWUpIHtcblx0XHRtYXhfdW5vcF9sZW4gPSBNYXRoLm1heChvcF9uYW1lLmxlbmd0aCwgbWF4X3Vub3BfbGVuKTtcblx0XHR1bmFyeV9vcHNbb3BfbmFtZV0gPSB0OyByZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogQG1ldGhvZCBqc2VwLmFkZEJpbmFyeU9wXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBvcF9uYW1lIFRoZSBuYW1lIG9mIHRoZSBiaW5hcnkgb3AgdG8gYWRkXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBwcmVjZWRlbmNlIFRoZSBwcmVjZWRlbmNlIG9mIHRoZSBiaW5hcnkgb3AgKGNhbiBiZSBhIGZsb2F0KVxuXHQgKiBAcmV0dXJuIGpzZXBcblx0ICovXG5cdGpzZXAuYWRkQmluYXJ5T3AgPSBmdW5jdGlvbihvcF9uYW1lLCBwcmVjZWRlbmNlKSB7XG5cdFx0bWF4X2Jpbm9wX2xlbiA9IE1hdGgubWF4KG9wX25hbWUubGVuZ3RoLCBtYXhfYmlub3BfbGVuKTtcblx0XHRiaW5hcnlfb3BzW29wX25hbWVdID0gcHJlY2VkZW5jZTtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogQG1ldGhvZCBqc2VwLmFkZExpdGVyYWxcblx0ICogQHBhcmFtIHtzdHJpbmd9IGxpdGVyYWxfbmFtZSBUaGUgbmFtZSBvZiB0aGUgbGl0ZXJhbCB0byBhZGRcblx0ICogQHBhcmFtIHsqfSBsaXRlcmFsX3ZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgbGl0ZXJhbFxuXHQgKiBAcmV0dXJuIGpzZXBcblx0ICovXG5cdGpzZXAuYWRkTGl0ZXJhbCA9IGZ1bmN0aW9uKGxpdGVyYWxfbmFtZSwgbGl0ZXJhbF92YWx1ZSkge1xuXHRcdGxpdGVyYWxzW2xpdGVyYWxfbmFtZV0gPSBsaXRlcmFsX3ZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAbWV0aG9kIGpzZXAucmVtb3ZlVW5hcnlPcFxuXHQgKiBAcGFyYW0ge3N0cmluZ30gb3BfbmFtZSBUaGUgbmFtZSBvZiB0aGUgdW5hcnkgb3AgdG8gcmVtb3ZlXG5cdCAqIEByZXR1cm4ganNlcFxuXHQgKi9cblx0anNlcC5yZW1vdmVVbmFyeU9wID0gZnVuY3Rpb24ob3BfbmFtZSkge1xuXHRcdGRlbGV0ZSB1bmFyeV9vcHNbb3BfbmFtZV07XG5cdFx0aWYob3BfbmFtZS5sZW5ndGggPT09IG1heF91bm9wX2xlbikge1xuXHRcdFx0bWF4X3Vub3BfbGVuID0gZ2V0TWF4S2V5TGVuKHVuYXJ5X29wcyk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAbWV0aG9kIGpzZXAucmVtb3ZlQWxsVW5hcnlPcHNcblx0ICogQHJldHVybiBqc2VwXG5cdCAqL1xuXHRqc2VwLnJlbW92ZUFsbFVuYXJ5T3BzID0gZnVuY3Rpb24oKSB7XG5cdFx0dW5hcnlfb3BzID0ge307XG5cdFx0bWF4X3Vub3BfbGVuID0gMDtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAbWV0aG9kIGpzZXAucmVtb3ZlQmluYXJ5T3Bcblx0ICogQHBhcmFtIHtzdHJpbmd9IG9wX25hbWUgVGhlIG5hbWUgb2YgdGhlIGJpbmFyeSBvcCB0byByZW1vdmVcblx0ICogQHJldHVybiBqc2VwXG5cdCAqL1xuXHRqc2VwLnJlbW92ZUJpbmFyeU9wID0gZnVuY3Rpb24ob3BfbmFtZSkge1xuXHRcdGRlbGV0ZSBiaW5hcnlfb3BzW29wX25hbWVdO1xuXHRcdGlmKG9wX25hbWUubGVuZ3RoID09PSBtYXhfYmlub3BfbGVuKSB7XG5cdFx0XHRtYXhfYmlub3BfbGVuID0gZ2V0TWF4S2V5TGVuKGJpbmFyeV9vcHMpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogQG1ldGhvZCBqc2VwLnJlbW92ZUFsbEJpbmFyeU9wc1xuXHQgKiBAcmV0dXJuIGpzZXBcblx0ICovXG5cdGpzZXAucmVtb3ZlQWxsQmluYXJ5T3BzID0gZnVuY3Rpb24oKSB7XG5cdFx0YmluYXJ5X29wcyA9IHt9O1xuXHRcdG1heF9iaW5vcF9sZW4gPSAwO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0LyoqXG5cdCAqIEBtZXRob2QganNlcC5yZW1vdmVMaXRlcmFsXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBsaXRlcmFsX25hbWUgVGhlIG5hbWUgb2YgdGhlIGxpdGVyYWwgdG8gcmVtb3ZlXG5cdCAqIEByZXR1cm4ganNlcFxuXHQgKi9cblx0anNlcC5yZW1vdmVMaXRlcmFsID0gZnVuY3Rpb24obGl0ZXJhbF9uYW1lKSB7XG5cdFx0ZGVsZXRlIGxpdGVyYWxzW2xpdGVyYWxfbmFtZV07XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0LyoqXG5cdCAqIEBtZXRob2QganNlcC5yZW1vdmVBbGxMaXRlcmFsc1xuXHQgKiBAcmV0dXJuIGpzZXBcblx0ICovXG5cdGpzZXAucmVtb3ZlQWxsTGl0ZXJhbHMgPSBmdW5jdGlvbigpIHtcblx0XHRsaXRlcmFscyA9IHt9O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0Ly8gSW4gZGVza3RvcCBlbnZpcm9ubWVudHMsIGhhdmUgYSB3YXkgdG8gcmVzdG9yZSB0aGUgb2xkIHZhbHVlIGZvciBganNlcGBcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJykge1xuXHRcdHZhciBvbGRfanNlcCA9IHJvb3QuanNlcDtcblx0XHQvLyBUaGUgc3RhciBvZiB0aGUgc2hvdyEgSXQncyBhIGZ1bmN0aW9uIVxuXHRcdHJvb3QuanNlcCA9IGpzZXA7XG5cdFx0Ly8gQW5kIGEgY291cnRlb3VzIGZ1bmN0aW9uIHdpbGxpbmcgdG8gbW92ZSBvdXQgb2YgdGhlIHdheSBmb3Igb3RoZXIgc2ltaWxhcmx5LW5hbWVkIG9iamVjdHMhXG5cdFx0anNlcC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZihyb290LmpzZXAgPT09IGpzZXApIHtcblx0XHRcdFx0cm9vdC5qc2VwID0gb2xkX2pzZXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4ganNlcDtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdC8vIEluIE5vZGUuSlMgZW52aXJvbm1lbnRzXG5cdFx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0XHRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBqc2VwO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRleHBvcnRzLnBhcnNlID0ganNlcDtcblx0XHR9XG5cdH1cbn0odGhpcykpO1xuIiwiaW1wb3J0IHsgUmVuZGVySW5mbyB9IGZyb20gXCIuL2RhdGFcIjtcclxuaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XHJcbmltcG9ydCB7IE1vbWVudCB9IGZyb20gXCJtb21lbnRcIjtcclxuaW1wb3J0ICogYXMgaGVscGVyIGZyb20gXCIuL2hlbHBlclwiO1xyXG5pbXBvcnQgeyBwYXJzZSwgZXZhbCBhcyBldmFsdWF0ZSB9IGZyb20gXCJleHByZXNzaW9uLWV2YWxcIjtcclxuXHJcbmxldCBmblNldCA9IHtcclxuICAgIC8vIG1pbiB2YWx1ZSBvZiBhIGRhdGFzZXRcclxuICAgIG1pbjogZnVuY3Rpb24gKHJlbmRlckluZm86IFJlbmRlckluZm8sIGRhdGFzZXRJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgcmV0dXJuIGQzLm1pbihkYXRhc2V0LmdldFZhbHVlcygpKTtcclxuICAgIH0sXHJcbiAgICAvLyB0aGUgbGF0ZXN0IGRhdGUgd2l0aCBtaW4gdmFsdWVcclxuICAgIG1pbkRhdGU6IGZ1bmN0aW9uIChyZW5kZXJJbmZvOiBSZW5kZXJJbmZvLCBkYXRhc2V0SWQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBkYXRhc2V0ID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXREYXRhc2V0QnlJZChkYXRhc2V0SWQpO1xyXG4gICAgICAgIGxldCBtaW4gPSBkMy5taW4oZGF0YXNldC5nZXRWYWx1ZXMoKSk7XHJcbiAgICAgICAgaWYgKE51bWJlci5pc051bWJlcihtaW4pKSB7XHJcbiAgICAgICAgICAgIGxldCBhcnJheURhdGFzZXQgPSBBcnJheS5mcm9tKGRhdGFzZXQpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBkYXRhUG9pbnQgb2YgYXJyYXlEYXRhc2V0LnJldmVyc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGFQb2ludC52YWx1ZSAhPT0gbnVsbCAmJiBkYXRhUG9pbnQudmFsdWUgPT09IG1pbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBoZWxwZXIuZGF0ZVRvU3RyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhUG9pbnQuZGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySW5mby5kYXRlRm9ybWF0XHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gXCJtaW4gbm90IGZvdW5kXCI7XHJcbiAgICB9LFxyXG4gICAgLy8gbWF4IHZhbHVlIG9mIGEgZGF0YXNldFxyXG4gICAgbWF4OiBmdW5jdGlvbiAocmVuZGVySW5mbzogUmVuZGVySW5mbywgZGF0YXNldElkOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgZGF0YXNldCA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoZGF0YXNldElkKTtcclxuICAgICAgICByZXR1cm4gZDMubWF4KGRhdGFzZXQuZ2V0VmFsdWVzKCkpO1xyXG4gICAgfSxcclxuICAgIC8vIHRoZSBsYXRlc3QgZGF0ZSB3aXRoIG1heCB2YWx1ZVxyXG4gICAgbWF4RGF0ZTogZnVuY3Rpb24gKHJlbmRlckluZm86IFJlbmRlckluZm8sIGRhdGFzZXRJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgbGV0IG1heCA9IGQzLm1heChkYXRhc2V0LmdldFZhbHVlcygpKTtcclxuICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKG1heCkpIHtcclxuICAgICAgICAgICAgbGV0IGFycmF5RGF0YXNldCA9IEFycmF5LmZyb20oZGF0YXNldCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGRhdGFQb2ludCBvZiBhcnJheURhdGFzZXQucmV2ZXJzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YVBvaW50LnZhbHVlICE9PSBudWxsICYmIGRhdGFQb2ludC52YWx1ZSA9PT0gbWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhlbHBlci5kYXRlVG9TdHIoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFQb2ludC5kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmRhdGVGb3JtYXRcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBcIm1heCBub3QgZm91bmRcIjtcclxuICAgIH0sXHJcbiAgICAvLyBzdGFydCBkYXRlIG9mIGEgZGF0YXNldFxyXG4gICAgLy8gaWYgZGF0YXNldElkIG5vdCBmb3VuZCwgcmV0dXJuIG92ZXJhbGwgc3RhcnREYXRlXHJcbiAgICBzdGFydERhdGU6IGZ1bmN0aW9uIChyZW5kZXJJbmZvOiBSZW5kZXJJbmZvLCBkYXRhc2V0SWQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBkYXRhc2V0ID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXREYXRhc2V0QnlJZChkYXRhc2V0SWQpO1xyXG4gICAgICAgIGlmIChkYXRhc2V0KSB7XHJcbiAgICAgICAgICAgIGxldCBzdGFydERhdGUgPSBkYXRhc2V0LmdldFN0YXJ0RGF0ZSgpO1xyXG4gICAgICAgICAgICBpZiAoc3RhcnREYXRlICYmIHN0YXJ0RGF0ZS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBoZWxwZXIuZGF0ZVRvU3RyKHN0YXJ0RGF0ZSwgcmVuZGVySW5mby5kYXRlRm9ybWF0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGVscGVyLmRhdGVUb1N0cihyZW5kZXJJbmZvLnN0YXJ0RGF0ZSwgcmVuZGVySW5mby5kYXRlRm9ybWF0KTtcclxuICAgIH0sXHJcbiAgICAvLyBlbmQgZGF0ZSBvZiBhIGRhdGFzZXRcclxuICAgIC8vIGlmIGRhdGFzZXRJZCBub3QgZm91bmQsIHJldHVybiBvdmVyYWxsIGVuZERhdGVcclxuICAgIGVuZERhdGU6IGZ1bmN0aW9uIChyZW5kZXJJbmZvOiBSZW5kZXJJbmZvLCBkYXRhc2V0SWQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBkYXRhc2V0ID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXREYXRhc2V0QnlJZChkYXRhc2V0SWQpO1xyXG4gICAgICAgIGlmIChkYXRhc2V0KSB7XHJcbiAgICAgICAgICAgIGxldCBlbmREYXRlID0gZGF0YXNldC5nZXRFbmREYXRlKCk7XHJcbiAgICAgICAgICAgIGlmIChlbmREYXRlICYmIGVuZERhdGUuaXNWYWxpZCgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGVscGVyLmRhdGVUb1N0cihlbmREYXRlLCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBoZWxwZXIuZGF0ZVRvU3RyKHJlbmRlckluZm8uZW5kRGF0ZSwgcmVuZGVySW5mby5kYXRlRm9ybWF0KTtcclxuICAgIH0sXHJcbiAgICAvLyBzdW0gb2YgYWxsIHZhbHVlcyBpbiBhIGRhdGFzZXRcclxuICAgIHN1bTogZnVuY3Rpb24gKHJlbmRlckluZm86IFJlbmRlckluZm8sIGRhdGFzZXRJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgcmV0dXJuIGQzLnN1bShkYXRhc2V0LmdldFZhbHVlcygpKTtcclxuICAgIH0sXHJcbiAgICBjb3VudDogZnVuY3Rpb24gKHJlbmRlckluZm86IFJlbmRlckluZm8sIGRhdGFzZXRJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiZGVwcmVjYXRlZCB0ZW1wbGF0ZSB2YXJpYWJsZSAnY291bnQnXCI7XHJcbiAgICB9LFxyXG4gICAgLy8gbnVtYmVyIG9mIG9jY3VycmVuY2VzIG9mIGEgdGFyZ2V0IGluIGEgZGF0YXNldFxyXG4gICAgbnVtVGFyZ2V0czogZnVuY3Rpb24gKHJlbmRlckluZm86IFJlbmRlckluZm8sIGRhdGFzZXRJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgcmV0dXJuIGRhdGFzZXQuZ2V0TnVtVGFyZ2V0cygpO1xyXG4gICAgfSxcclxuICAgIGRheXM6IGZ1bmN0aW9uIChyZW5kZXJJbmZvOiBSZW5kZXJJbmZvLCBkYXRhc2V0SWQ6IG51bWJlcikge1xyXG4gICAgICAgIHJldHVybiBcImRlcHJlY2F0ZWQgdGVtcGxhdGUgdmFyaWFibGUgJ2RheXMnXCI7XHJcbiAgICB9LFxyXG4gICAgbnVtRGF5czogZnVuY3Rpb24gKHJlbmRlckluZm86IFJlbmRlckluZm8sIGRhdGFzZXRJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgcmV0dXJuIGRhdGFzZXQuZ2V0TGVuZ3RoKCk7XHJcbiAgICB9LFxyXG4gICAgbnVtRGF5c0hhdmluZ0RhdGE6IGZ1bmN0aW9uIChyZW5kZXJJbmZvOiBSZW5kZXJJbmZvLCBkYXRhc2V0SWQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBkYXRhc2V0ID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXREYXRhc2V0QnlJZChkYXRhc2V0SWQpO1xyXG4gICAgICAgIHJldHVybiBkYXRhc2V0LmdldExlbmd0aE5vdE51bGwoKTtcclxuICAgIH0sXHJcbiAgICBtYXhTdHJlYWs6IGZ1bmN0aW9uIChyZW5kZXJJbmZvOiBSZW5kZXJJbmZvLCBkYXRhc2V0SWQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBzdHJlYWsgPSAwO1xyXG4gICAgICAgIGxldCBtYXhTdHJlYWsgPSAwO1xyXG4gICAgICAgIGxldCBkYXRhc2V0ID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXREYXRhc2V0QnlJZChkYXRhc2V0SWQpO1xyXG4gICAgICAgIGZvciAobGV0IGRhdGFQb2ludCBvZiBkYXRhc2V0KSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhUG9pbnQudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHN0cmVhaysrO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3RyZWFrID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3RyZWFrID49IG1heFN0cmVhaykge1xyXG4gICAgICAgICAgICAgICAgbWF4U3RyZWFrID0gc3RyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtYXhTdHJlYWs7XHJcbiAgICB9LFxyXG4gICAgbWF4U3RyZWFrU3RhcnQ6IGZ1bmN0aW9uIChyZW5kZXJJbmZvOiBSZW5kZXJJbmZvLCBkYXRhc2V0SWQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBzdHJlYWsgPSAwO1xyXG4gICAgICAgIGxldCBtYXhTdHJlYWsgPSAwO1xyXG4gICAgICAgIGxldCBzdHJlYWtTdGFydDogTW9tZW50ID0gbnVsbDtcclxuICAgICAgICBsZXQgbWF4U3RyZWFrU3RhcnQ6IE1vbWVudCA9IG51bGw7XHJcbiAgICAgICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgaWYgKGRhdGFzZXQpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgZGF0YVBvaW50IG9mIGRhdGFzZXQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhUG9pbnQudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RyZWFrID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVha1N0YXJ0ID0gZGF0YVBvaW50LmRhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHN0cmVhaysrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJlYWsgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHN0cmVhayA+PSBtYXhTdHJlYWspIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXhTdHJlYWsgPSBzdHJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4U3RyZWFrU3RhcnQgPSBzdHJlYWtTdGFydDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGVscGVyLmRhdGVUb1N0cihtYXhTdHJlYWtTdGFydCwgcmVuZGVySW5mby5kYXRlRm9ybWF0KTtcclxuICAgIH0sXHJcbiAgICBtYXhTdHJlYWtFbmQ6IGZ1bmN0aW9uIChyZW5kZXJJbmZvOiBSZW5kZXJJbmZvLCBkYXRhc2V0SWQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBzdHJlYWsgPSAwO1xyXG4gICAgICAgIGxldCBtYXhTdHJlYWsgPSAwO1xyXG4gICAgICAgIGxldCBzdHJlYWtFbmQ6IE1vbWVudCA9IG51bGw7XHJcbiAgICAgICAgbGV0IG1heFN0cmVha0VuZDogTW9tZW50ID0gbnVsbDtcclxuICAgICAgICBsZXQgZGF0YXNldCA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoZGF0YXNldElkKTtcclxuICAgICAgICBpZiAoZGF0YXNldCkge1xyXG4gICAgICAgICAgICBsZXQgYXJyYXlEYXRhc2V0ID0gQXJyYXkuZnJvbShkYXRhc2V0KTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaW5kID0gMDsgaW5kIDwgYXJyYXlEYXRhc2V0Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBwb2ludCA9IGFycmF5RGF0YXNldFtpbmRdO1xyXG4gICAgICAgICAgICAgICAgbGV0IG5leHRQb2ludCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kIDwgYXJyYXlEYXRhc2V0Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0UG9pbnQgPSBhcnJheURhdGFzZXRbaW5kICsgMV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJlYWsrKztcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFBvaW50Py52YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJlYWtFbmQgPSBwb2ludC5kYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFrID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzdHJlYWsgPj0gbWF4U3RyZWFrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc3RyZWFrKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhtYXhTdHJlYWspO1xyXG4gICAgICAgICAgICAgICAgICAgIG1heFN0cmVhayA9IHN0cmVhaztcclxuICAgICAgICAgICAgICAgICAgICBtYXhTdHJlYWtFbmQgPSBzdHJlYWtFbmQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhlbHBlci5kYXRlVG9TdHIobWF4U3RyZWFrRW5kLCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpO1xyXG4gICAgfSxcclxuICAgIG1heEJyZWFrczogZnVuY3Rpb24gKHJlbmRlckluZm86IFJlbmRlckluZm8sIGRhdGFzZXRJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGJyZWFrcyA9IDA7XHJcbiAgICAgICAgbGV0IG1heEJyZWFrcyA9IDA7XHJcbiAgICAgICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGRhdGFQb2ludCBvZiBkYXRhc2V0KSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhUG9pbnQudmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrcysrO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnJlYWtzID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYnJlYWtzID4gbWF4QnJlYWtzKSB7XHJcbiAgICAgICAgICAgICAgICBtYXhCcmVha3MgPSBicmVha3M7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1heEJyZWFrcztcclxuICAgIH0sXHJcbiAgICBtYXhCcmVha3NTdGFydDogZnVuY3Rpb24gKHJlbmRlckluZm86IFJlbmRlckluZm8sIGRhdGFzZXRJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGJyZWFrcyA9IDA7XHJcbiAgICAgICAgbGV0IG1heEJyZWFrcyA9IDA7XHJcbiAgICAgICAgbGV0IGJyZWFrc1N0YXJ0OiBNb21lbnQgPSBudWxsO1xyXG4gICAgICAgIGxldCBtYXhCcmVha3NTdGFydDogTW9tZW50ID0gbnVsbDtcclxuICAgICAgICBsZXQgZGF0YXNldCA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoZGF0YXNldElkKTtcclxuICAgICAgICBpZiAoZGF0YXNldCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBkYXRhUG9pbnQgb2YgZGF0YXNldCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGFQb2ludC52YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChicmVha3MgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtzU3RhcnQgPSBkYXRhUG9pbnQuZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtzKys7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrcyA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYnJlYWtzID49IG1heEJyZWFrcykge1xyXG4gICAgICAgICAgICAgICAgICAgIG1heEJyZWFrcyA9IGJyZWFrcztcclxuICAgICAgICAgICAgICAgICAgICBtYXhCcmVha3NTdGFydCA9IGJyZWFrc1N0YXJ0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBoZWxwZXIuZGF0ZVRvU3RyKG1heEJyZWFrc1N0YXJ0LCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpO1xyXG4gICAgfSxcclxuICAgIG1heEJyZWFrc0VuZDogZnVuY3Rpb24gKHJlbmRlckluZm86IFJlbmRlckluZm8sIGRhdGFzZXRJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGJyZWFrcyA9IDA7XHJcbiAgICAgICAgbGV0IG1heEJyZWFrcyA9IDA7XHJcbiAgICAgICAgbGV0IGJyZWFrc0VuZDogTW9tZW50ID0gbnVsbDtcclxuICAgICAgICBsZXQgbWF4QnJlYWtzRW5kOiBNb21lbnQgPSBudWxsO1xyXG4gICAgICAgIGxldCBkYXRhc2V0ID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXREYXRhc2V0QnlJZChkYXRhc2V0SWQpO1xyXG4gICAgICAgIGlmIChkYXRhc2V0KSB7XHJcbiAgICAgICAgICAgIGxldCBhcnJheURhdGFzZXQgPSBBcnJheS5mcm9tKGRhdGFzZXQpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmQgPSAwOyBpbmQgPCBhcnJheURhdGFzZXQubGVuZ3RoOyBpbmQrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHBvaW50ID0gYXJyYXlEYXRhc2V0W2luZF07XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV4dFBvaW50ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmIChpbmQgPCBhcnJheURhdGFzZXQubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHRQb2ludCA9IGFycmF5RGF0YXNldFtpbmQgKyAxXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChwb2ludC52YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrcysrO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0UG9pbnQ/LnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrc0VuZCA9IHBvaW50LmRhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVha3MgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGJyZWFrcyA+PSBtYXhCcmVha3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXhCcmVha3MgPSBicmVha3M7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4QnJlYWtzRW5kID0gYnJlYWtzRW5kO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBoZWxwZXIuZGF0ZVRvU3RyKG1heEJyZWFrc0VuZCwgcmVuZGVySW5mby5kYXRlRm9ybWF0KTtcclxuICAgIH0sXHJcbiAgICBsYXN0U3RyZWFrOiBmdW5jdGlvbiAocmVuZGVySW5mbzogUmVuZGVySW5mbywgZGF0YXNldElkOiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gXCJkZXByZWNhdGVkIHRlbXBsYXRlIHZhcmlhYmxlICdsYXN0U3RyZWFrJ1wiO1xyXG4gICAgfSxcclxuICAgIGN1cnJlbnRTdHJlYWs6IGZ1bmN0aW9uIChyZW5kZXJJbmZvOiBSZW5kZXJJbmZvLCBkYXRhc2V0SWQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBjdXJyZW50U3RyZWFrID0gMDtcclxuICAgICAgICBsZXQgZGF0YXNldCA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoZGF0YXNldElkKTtcclxuICAgICAgICBpZiAoZGF0YXNldCkge1xyXG4gICAgICAgICAgICBsZXQgYXJyYXlEYXRhc2V0ID0gQXJyYXkuZnJvbShkYXRhc2V0KTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaW5kID0gYXJyYXlEYXRhc2V0Lmxlbmd0aCAtIDE7IGluZCA+PSAwOyBpbmQtLSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHBvaW50ID0gYXJyYXlEYXRhc2V0W2luZF07XHJcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQudmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFN0cmVhaysrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjdXJyZW50U3RyZWFrO1xyXG4gICAgfSxcclxuICAgIGN1cnJlbnRTdHJlYWtTdGFydDogZnVuY3Rpb24gKHJlbmRlckluZm86IFJlbmRlckluZm8sIGRhdGFzZXRJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRTdHJlYWsgPSAwO1xyXG4gICAgICAgIGxldCBjdXJyZW50U3RyZWFrU3RhcnQ6IE1vbWVudCA9IG51bGw7XHJcbiAgICAgICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgaWYgKGRhdGFzZXQpIHtcclxuICAgICAgICAgICAgbGV0IGFycmF5RGF0YXNldCA9IEFycmF5LmZyb20oZGF0YXNldCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZCA9IGFycmF5RGF0YXNldC5sZW5ndGggLSAxOyBpbmQgPj0gMDsgaW5kLS0pIHtcclxuICAgICAgICAgICAgICAgIGxldCBwb2ludCA9IGFycmF5RGF0YXNldFtpbmRdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZCA8IGFycmF5RGF0YXNldC5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFN0cmVha1N0YXJ0ID0gYXJyYXlEYXRhc2V0W2luZCArIDFdLmRhdGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQudmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFN0cmVhaysrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY3VycmVudFN0cmVha1N0YXJ0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcImFic2Vuc2VcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhlbHBlci5kYXRlVG9TdHIoY3VycmVudFN0cmVha1N0YXJ0LCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpO1xyXG4gICAgfSxcclxuICAgIGN1cnJlbnRTdHJlYWtFbmQ6IGZ1bmN0aW9uIChyZW5kZXJJbmZvOiBSZW5kZXJJbmZvLCBkYXRhc2V0SWQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBjdXJyZW50U3RyZWFrID0gMDtcclxuICAgICAgICBsZXQgY3VycmVudFN0cmVha0VuZDogTW9tZW50ID0gbnVsbDtcclxuICAgICAgICBsZXQgZGF0YXNldCA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoZGF0YXNldElkKTtcclxuICAgICAgICBpZiAoZGF0YXNldCkge1xyXG4gICAgICAgICAgICBsZXQgYXJyYXlEYXRhc2V0ID0gQXJyYXkuZnJvbShkYXRhc2V0KTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaW5kID0gYXJyYXlEYXRhc2V0Lmxlbmd0aCAtIDE7IGluZCA+PSAwOyBpbmQtLSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHBvaW50ID0gYXJyYXlEYXRhc2V0W2luZF07XHJcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQudmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRTdHJlYWsgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFN0cmVha0VuZCA9IHBvaW50LmRhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdHJlYWsrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGN1cnJlbnRTdHJlYWtFbmQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiYWJzZW5zZVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGVscGVyLmRhdGVUb1N0cihjdXJyZW50U3RyZWFrRW5kLCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpO1xyXG4gICAgfSxcclxuICAgIGN1cnJlbnRCcmVha3M6IGZ1bmN0aW9uIChyZW5kZXJJbmZvOiBSZW5kZXJJbmZvLCBkYXRhc2V0SWQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBjdXJyZW50QnJlYWtzID0gMDtcclxuICAgICAgICBsZXQgZGF0YXNldCA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoZGF0YXNldElkKTtcclxuICAgICAgICBpZiAoZGF0YXNldCkge1xyXG4gICAgICAgICAgICBsZXQgYXJyYXlEYXRhc2V0ID0gQXJyYXkuZnJvbShkYXRhc2V0KTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaW5kID0gYXJyYXlEYXRhc2V0Lmxlbmd0aCAtIDE7IGluZCA+PSAwOyBpbmQtLSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHBvaW50ID0gYXJyYXlEYXRhc2V0W2luZF07XHJcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQudmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50QnJlYWtzKys7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjdXJyZW50QnJlYWtzO1xyXG4gICAgfSxcclxuICAgIGN1cnJlbnRCcmVha3NTdGFydDogZnVuY3Rpb24gKHJlbmRlckluZm86IFJlbmRlckluZm8sIGRhdGFzZXRJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRCcmVha3MgPSAwO1xyXG4gICAgICAgIGxldCBjdXJyZW50QnJlYWtzU3RhcnQ6IE1vbWVudCA9IG51bGw7XHJcbiAgICAgICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgaWYgKGRhdGFzZXQpIHtcclxuICAgICAgICAgICAgbGV0IGFycmF5RGF0YXNldCA9IEFycmF5LmZyb20oZGF0YXNldCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZCA9IGFycmF5RGF0YXNldC5sZW5ndGggLSAxOyBpbmQgPj0gMDsgaW5kLS0pIHtcclxuICAgICAgICAgICAgICAgIGxldCBwb2ludCA9IGFycmF5RGF0YXNldFtpbmRdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZCA8IGFycmF5RGF0YXNldC5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEJyZWFrc1N0YXJ0ID0gYXJyYXlEYXRhc2V0W2luZCArIDFdLmRhdGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQudmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50QnJlYWtzKys7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY3VycmVudEJyZWFrc1N0YXJ0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcImFic2Vuc2VcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhlbHBlci5kYXRlVG9TdHIoY3VycmVudEJyZWFrc1N0YXJ0LCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpO1xyXG4gICAgfSxcclxuICAgIGN1cnJlbnRCcmVha3NFbmQ6IGZ1bmN0aW9uIChyZW5kZXJJbmZvOiBSZW5kZXJJbmZvLCBkYXRhc2V0SWQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBjdXJyZW50QnJlYWtzID0gMDtcclxuICAgICAgICBsZXQgY3VycmVudEJyZWFrc0VuZDogTW9tZW50ID0gbnVsbDtcclxuICAgICAgICBsZXQgZGF0YXNldCA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoZGF0YXNldElkKTtcclxuICAgICAgICBpZiAoZGF0YXNldCkge1xyXG4gICAgICAgICAgICBsZXQgYXJyYXlEYXRhc2V0ID0gQXJyYXkuZnJvbShkYXRhc2V0KTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaW5kID0gYXJyYXlEYXRhc2V0Lmxlbmd0aCAtIDE7IGluZCA+PSAwOyBpbmQtLSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHBvaW50ID0gYXJyYXlEYXRhc2V0W2luZF07XHJcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQudmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudEJyZWFrcyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50QnJlYWtzRW5kID0gcG9pbnQuZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEJyZWFrcysrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGN1cnJlbnRCcmVha3NFbmQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiYWJzZW5zZVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGVscGVyLmRhdGVUb1N0cihjdXJyZW50QnJlYWtzRW5kLCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpO1xyXG4gICAgfSxcclxuICAgIGF2ZXJhZ2U6IGZ1bmN0aW9uIChyZW5kZXJJbmZvOiBSZW5kZXJJbmZvLCBkYXRhc2V0SWQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBkYXRhc2V0ID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXREYXRhc2V0QnlJZChkYXRhc2V0SWQpO1xyXG4gICAgICAgIGxldCBjb3VudE5vdE51bGwgPSBkYXRhc2V0LmdldExlbmd0aE5vdE51bGwoKTtcclxuICAgICAgICBpZiAoY291bnROb3ROdWxsID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgc3VtID0gZDMuc3VtKGRhdGFzZXQuZ2V0VmFsdWVzKCkpO1xyXG4gICAgICAgICAgICByZXR1cm4gc3VtIC8gY291bnROb3ROdWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0sXHJcbiAgICBtZWRpYW46IGZ1bmN0aW9uIChyZW5kZXJJbmZvOiBSZW5kZXJJbmZvLCBkYXRhc2V0SWQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBkYXRhc2V0ID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXREYXRhc2V0QnlJZChkYXRhc2V0SWQpO1xyXG4gICAgICAgIHJldHVybiBkMy5tZWRpYW4oZGF0YXNldC5nZXRWYWx1ZXMoKSk7XHJcbiAgICB9LFxyXG4gICAgdmFyaWFuY2U6IGZ1bmN0aW9uIChyZW5kZXJJbmZvOiBSZW5kZXJJbmZvLCBkYXRhc2V0SWQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBkYXRhc2V0ID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXREYXRhc2V0QnlJZChkYXRhc2V0SWQpO1xyXG4gICAgICAgIHJldHVybiBkMy52YXJpYW5jZShkYXRhc2V0LmdldFZhbHVlcygpKTtcclxuICAgIH0sXHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVRlbXBsYXRlKHRlbXBsYXRlOiBzdHJpbmcsIHJlbmRlckluZm86IFJlbmRlckluZm8pIHtcclxuICAgIC8vY29uc29sZS5sb2coXCJyZXNvbHZlVGVtcGxhdGVcIik7XHJcbiAgICBsZXQgcmVwbGFjZU1hcDogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xyXG4gICAgLy8gTG9vcCBvdmVyIGZuU2V0LCBwcmVwYXJlIHJlcGxhY2VNYXBcclxuICAgIE9iamVjdC5lbnRyaWVzKGZuU2V0KS5mb3JFYWNoKChbZm5OYW1lLCBmbl0pID0+IHtcclxuICAgICAgICAvLyB7e1xccyptYXgoXFwoXFxzKkRhdGFzZXRcXChcXHMqKD88ZGF0YXNldElkPlxcZCspXFxzKlxcKVxccypcXCkpP1xccyp9fVxyXG4gICAgICAgIGxldCBzdHJSZWdleCA9XHJcbiAgICAgICAgICAgIFwie3tcXFxccypcIiArXHJcbiAgICAgICAgICAgIGZuTmFtZSArXHJcbiAgICAgICAgICAgIFwiKFxcXFwoXFxcXHMqRGF0YXNldFxcXFwoXFxcXHMqKCg/PGRhdGFzZXRJZD5cXFxcZCspfCg/PGRhdGFzZXROYW1lPlxcXFx3KykpXFxcXHMqXFxcXClcXFxccypcXFxcKSk/XFxcXHMqfX1cIjtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhzdHJSZWdleCk7XHJcbiAgICAgICAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChzdHJSZWdleCwgXCJnbVwiKTtcclxuICAgICAgICBsZXQgbWF0Y2g7XHJcbiAgICAgICAgd2hpbGUgKChtYXRjaCA9IHJlZ2V4LmV4ZWModGVtcGxhdGUpKSkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhtYXRjaCk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWF0Y2guZ3JvdXBzICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1hdGNoLmdyb3Vwcy5kYXRhc2V0SWQgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YXNldElkID0gcGFyc2VJbnQobWF0Y2guZ3JvdXBzLmRhdGFzZXRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZGF0YXNldElkKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihkYXRhc2V0SWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdHJSZXBsYWNlUmVnZXggPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ7e1xcXFxzKlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuTmFtZSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIihcXFxcKFxcXFxzKkRhdGFzZXRcXFxcKFxcXFxzKlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFzZXRJZC50b1N0cmluZygpICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxcXHMqXFxcXClcXFxccypcXFxcKSk/XFxcXHMqfX1cIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHN0clJlcGxhY2VSZWdleCBpbiByZXBsYWNlTWFwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGZuKHJlbmRlckluZm8sIGRhdGFzZXRJZCk7IC8vIGNhbGN1bGF0ZSByZXN1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdHJSZXN1bHQgPSBcInt7TkF9fVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiByZXN1bHQgIT09IFwidW5kZWZpbmVkXCIgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgIT09IG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKHJlc3VsdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyUmVzdWx0ID0gcmVzdWx0LnRvRml4ZWQoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyUmVzdWx0ID0gcmVzdWx0LnRvRml4ZWQoMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VNYXBbc3RyUmVwbGFjZVJlZ2V4XSA9IHN0clJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG1hdGNoLmdyb3Vwcy5kYXRhc2V0TmFtZSAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkYXRhc2V0TmFtZSA9IG1hdGNoLmdyb3Vwcy5kYXRhc2V0TmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhkYXRhc2V0TmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0clJlcGxhY2VSZWdleCA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwie3tcXFxccypcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZuTmFtZSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiKFxcXFwoXFxcXHMqRGF0YXNldFxcXFwoXFxcXHMqXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhc2V0TmFtZSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxcXHMqXFxcXClcXFxccypcXFxcKSk/XFxcXHMqfX1cIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGFzZXRJZCA9IHJlbmRlckluZm8uZGF0YXNldE5hbWUuaW5kZXhPZihkYXRhc2V0TmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZGF0YXNldE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uZGF0YXNldE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoc3RyUmVwbGFjZVJlZ2V4IGluIHJlcGxhY2VNYXApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdHJSZXN1bHQgPSBcInt7TkF9fVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YXNldElkID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBmbihyZW5kZXJJbmZvLCBkYXRhc2V0SWQpOyAvLyBjYWxjdWxhdGUgcmVzdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHJlc3VsdCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCAhPT0gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIocmVzdWx0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJSZXN1bHQgPSByZXN1bHQudG9GaXhlZCgwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJSZXN1bHQgPSByZXN1bHQudG9GaXhlZCgyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZU1hcFtzdHJSZXBsYWNlUmVnZXhdID0gc3RyUmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbm8gZGF0YXNldElkIGFzc2lnbmVkIHVzZSBpZCAwXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJ7e1wiICsgZm5OYW1lICsgXCJ9fVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzdHJSZXBsYWNlUmVnZXggPSBcInt7XFxcXHMqXCIgKyBmbk5hbWUgKyBcIlxcXFxzKn19XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoc3RyUmVwbGFjZVJlZ2V4IGluIHJlcGxhY2VNYXApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBmbihyZW5kZXJJbmZvLCAwKTsgLy8gY2FsY3VsYXRlIHJlc3VsdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RyUmVzdWx0ID0gXCJ7e05BfX1cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgIT09IFwidW5kZWZpbmVkXCIgJiYgcmVzdWx0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKHJlc3VsdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyUmVzdWx0ID0gcmVzdWx0LnRvRml4ZWQoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyUmVzdWx0ID0gcmVzdWx0LnRvRml4ZWQoMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyUmVzdWx0ID0gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlTWFwW3N0clJlcGxhY2VSZWdleF0gPSBzdHJSZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gZ3JvdXBzIHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgLy8gbm8gZGF0YXNldElkIGFzc2lnbmVkIHVzZSBpZCAwXHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInt7XCIgKyBmbk5hbWUgKyBcIn19XCIpXHJcbiAgICAgICAgICAgICAgICBsZXQgc3RyUmVwbGFjZVJlZ2V4ID0gXCJ7e1xcXFxzKlwiICsgZm5OYW1lICsgXCJcXFxccyp9fVwiO1xyXG4gICAgICAgICAgICAgICAgaWYgKCEoc3RyUmVwbGFjZVJlZ2V4IGluIHJlcGxhY2VNYXApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGZuKHJlbmRlckluZm8sIDApOyAvLyBjYWxjdWxhdGUgcmVzdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0clJlc3VsdCA9IFwie3tOQX19XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgIT09IFwidW5kZWZpbmVkXCIgJiYgcmVzdWx0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKHJlc3VsdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0clJlc3VsdCA9IHJlc3VsdC50b0ZpeGVkKDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyUmVzdWx0ID0gcmVzdWx0LnRvRml4ZWQoMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiByZXN1bHQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyUmVzdWx0ID0gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVwbGFjZU1hcFtzdHJSZXBsYWNlUmVnZXhdID0gc3RyUmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2cocmVwbGFjZU1hcCk7XHJcbiAgICAvLyBEbyByZXBsYWNlXHJcbiAgICBmb3IgKGxldCBzdHJSZXBsYWNlUmVnZXggaW4gcmVwbGFjZU1hcCkge1xyXG4gICAgICAgIGxldCBzdHJSZXN1bHQgPSByZXBsYWNlTWFwW3N0clJlcGxhY2VSZWdleF07XHJcbiAgICAgICAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChzdHJSZXBsYWNlUmVnZXgsIFwiZ2lcIik7XHJcbiAgICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5yZXBsYWNlKHJlZ2V4LCBzdHJSZXN1bHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0ZW1wbGF0ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmUoczogc3RyaW5nLCByZW5kZXJJbmZvOiBSZW5kZXJJbmZvKSB7XHJcbiAgICBjb25zb2xlLmxvZyhzKTtcclxuICAgIHMgPSByZXNvbHZlVGVtcGxhdGUocywgcmVuZGVySW5mbyk7XHJcbiAgICBjb25zb2xlLmxvZyhzKTtcclxuICAgIGNvbnN0IGFzdCA9IHBhcnNlKHMpO1xyXG4gICAgY29uc3QgdmFsdWUgPSBldmFsdWF0ZShhc3QsIHt9KTtcclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG4iLCJpbXBvcnQgcXVhbnRpbGUgZnJvbSBcIi4vcXVhbnRpbGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHJldHVybiBxdWFudGlsZSh2YWx1ZXMsIDAuNSwgdmFsdWVvZik7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2YXJpYW5jZSh2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgbGV0IGNvdW50ID0gMDtcbiAgbGV0IGRlbHRhO1xuICBsZXQgbWVhbiA9IDA7XG4gIGxldCBzdW0gPSAwO1xuICBpZiAodmFsdWVvZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiAodmFsdWUgPSArdmFsdWUpID49IHZhbHVlKSB7XG4gICAgICAgIGRlbHRhID0gdmFsdWUgLSBtZWFuO1xuICAgICAgICBtZWFuICs9IGRlbHRhIC8gKytjb3VudDtcbiAgICAgICAgc3VtICs9IGRlbHRhICogKHZhbHVlIC0gbWVhbik7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCBpbmRleCA9IC0xO1xuICAgIGZvciAobGV0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWUsICsraW5kZXgsIHZhbHVlcykpICE9IG51bGwgJiYgKHZhbHVlID0gK3ZhbHVlKSA+PSB2YWx1ZSkge1xuICAgICAgICBkZWx0YSA9IHZhbHVlIC0gbWVhbjtcbiAgICAgICAgbWVhbiArPSBkZWx0YSAvICsrY291bnQ7XG4gICAgICAgIHN1bSArPSBkZWx0YSAqICh2YWx1ZSAtIG1lYW4pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoY291bnQgPiAxKSByZXR1cm4gc3VtIC8gKGNvdW50IC0gMSk7XG59XG4iLCJpbXBvcnQgeyBNb21lbnQgfSBmcm9tIFwibW9tZW50XCI7XHJcbmltcG9ydCB7XHJcbiAgICBEYXRhc2V0cyxcclxuICAgIERhdGFQb2ludCxcclxuICAgIFJlbmRlckluZm8sXHJcbiAgICBQaWVJbmZvLFxyXG4gICAgTW9udGhJbmZvLFxyXG4gICAgRGF0YXNldCxcclxuICAgIFNpemUsXHJcbiAgICBUcmFuc2Zvcm0sXHJcbiAgICBDaGFydEVsZW1lbnRzLFxyXG4gICAgT3V0cHV0VHlwZSxcclxuICAgIFZhbHVlVHlwZSxcclxufSBmcm9tIFwiLi9kYXRhXCI7XHJcbmltcG9ydCAqIGFzIGhlbHBlciBmcm9tIFwiLi9oZWxwZXJcIjtcclxuaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XHJcbmltcG9ydCAqIGFzIGV4cHIgZnJvbSBcIi4vZXhwclwiO1xyXG5cclxuZnVuY3Rpb24gY3JlYXRlQXJlYXMoXHJcbiAgICBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzLFxyXG4gICAgY2FudmFzOiBIVE1MRWxlbWVudCxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBwaWVJbmZvOiBQaWVJbmZvXHJcbik6IENoYXJ0RWxlbWVudHMge1xyXG4gICAgLy8gY2xlYW4gYXJlYXNcclxuICAgIGQzLnNlbGVjdChjYW52YXMpLnNlbGVjdChcIiNzdmdcIikucmVtb3ZlKCk7XHJcbiAgICB2YXIgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjaGFydEVsZW1lbnRzKTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAvLyBkMy5zZWxlY3QoY2hhcnRFbGVtZW50c1twcm9wc1tpXV0pLnJlbW92ZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBjaGFydEVsZW1lbnRzW3Byb3BzW2ldXTtcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKGNoYXJ0RWxlbWVudHMpO1xyXG5cclxuICAgIC8vIHdob2xlIGFyZWEgZm9yIHBsb3R0aW5nLCBpbmNsdWRlcyBtYXJnaW5zXHJcbiAgICBsZXQgc3ZnID0gZDNcclxuICAgICAgICAuc2VsZWN0KGNhbnZhcylcclxuICAgICAgICAuYXBwZW5kKFwic3ZnXCIpXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcInN2Z1wiKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcIndpZHRoXCIsXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLmxlZnQgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4ucmlnaHRcclxuICAgICAgICApXHJcbiAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgIFwiaGVpZ2h0XCIsXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLm1hcmdpbi50b3AgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4uYm90dG9tXHJcbiAgICAgICAgKTtcclxuICAgIGNoYXJ0RWxlbWVudHNbXCJzdmdcIl0gPSBzdmc7XHJcblxyXG4gICAgLy8gZ3JhcGhBcmVhLCBpbmNsdWRlcyBjaGFydEFyZWEsIHRpdGxlLCBsZWdlbmRcclxuICAgIGxldCBncmFwaEFyZWEgPSBzdmdcclxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJncmFwaEFyZWFcIilcclxuICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgXCJ0cmFuc2Zvcm1cIixcclxuICAgICAgICAgICAgXCJ0cmFuc2xhdGUoXCIgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4ubGVmdCArXHJcbiAgICAgICAgICAgICAgICBcIixcIiArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLm1hcmdpbi50b3AgK1xyXG4gICAgICAgICAgICAgICAgXCIpXCJcclxuICAgICAgICApXHJcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCArIHJlbmRlckluZm8ubWFyZ2luLnJpZ2h0KVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcImhlaWdodFwiLFxyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQgKyByZW5kZXJJbmZvLm1hcmdpbi5ib3R0b21cclxuICAgICAgICApO1xyXG4gICAgY2hhcnRFbGVtZW50c1tcImdyYXBoQXJlYVwiXSA9IGdyYXBoQXJlYTtcclxuXHJcbiAgICAvLyBkYXRhQXJlYSwgdW5kZXIgZ3JhcGhBcmVhLCBpbmNsdWRlcyBwb2ludHMsIGxpbmVzLCB4QXhpcywgeUF4aXNcclxuICAgIGxldCBkYXRhQXJlYSA9IGdyYXBoQXJlYVxyXG4gICAgICAgIC5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcImRhdGFBcmVhXCIpXHJcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aClcclxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQpO1xyXG4gICAgY2hhcnRFbGVtZW50c1tcImRhdGFBcmVhXCJdID0gZGF0YUFyZWE7XHJcblxyXG4gICAgcmV0dXJuIGNoYXJ0RWxlbWVudHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlclRpdGxlKFxyXG4gICAgY2FudmFzOiBIVE1MRWxlbWVudCxcclxuICAgIGNoYXJ0RWxlbWVudHM6IENoYXJ0RWxlbWVudHMsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgcGllSW5mbzogUGllSW5mb1xyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVyVGl0bGVcIik7XHJcbiAgICAvLyB1bmRlciBncmFwaEFyZWFcclxuXHJcbiAgICBpZiAoIXJlbmRlckluZm8gfHwgIXBpZUluZm8pIHJldHVybjtcclxuXHJcbiAgICBpZiAoIXBpZUluZm8udGl0bGUpIHJldHVybjtcclxuICAgIGxldCB0aXRsZVNpemUgPSBoZWxwZXIubWVhc3VyZVRleHRTaXplKHBpZUluZm8udGl0bGUsIFwidHJhY2tlci10aXRsZVwiKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyUGllKFxyXG4gICAgY2FudmFzOiBIVE1MRWxlbWVudCxcclxuICAgIGNoYXJ0RWxlbWVudHM6IENoYXJ0RWxlbWVudHMsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgcGllSW5mbzogUGllSW5mb1xyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVyUGllXCIpO1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mbyk7XHJcblxyXG4gICAgbGV0IHJhZGl1cyA9IHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoICogMC41ICogMC44O1xyXG5cclxuICAgIC8vIGRhdGFcclxuICAgIGxldCBkYXRhID0gcGllSW5mby5kYXRhLm1hcChmdW5jdGlvbiAocykge1xyXG4gICAgICAgIGxldCB2YWx1ZSA9IGV4cHIucmVzb2x2ZShzLCByZW5kZXJJbmZvKTtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBzY2FsZVxyXG4gICAgbGV0IGNvbG9yU2NhbGUgPSBkMy5zY2FsZU9yZGluYWwoKS5yYW5nZShwaWVJbmZvLmRhdGFDb2xvcik7XHJcblxyXG4gICAgbGV0IHNlY3RvcnNHcm91cCA9IGNoYXJ0RWxlbWVudHMuZGF0YUFyZWEuYXBwZW5kKFwiZ1wiKTtcclxuICAgIHNlY3RvcnNHcm91cC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBsZXQgc3RyVHJhbnNsYXRlID1cclxuICAgICAgICAgICAgXCJ0cmFuc2xhdGUoXCIgK1xyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCAqIDAuNSArXHJcbiAgICAgICAgICAgIFwiLFwiICtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0ICogMC41ICtcclxuICAgICAgICAgICAgXCIpXCI7XHJcblxyXG4gICAgICAgIHJldHVybiBzdHJUcmFuc2xhdGU7XHJcbiAgICB9KTtcclxuXHJcbiAgICBsZXQgcGllID0gZDMucGllKCk7XHJcblxyXG4gICAgbGV0IHNlY3RvcnMgPSBzZWN0b3JzR3JvdXBcclxuICAgICAgICAuc2VsZWN0QWxsKFwic2VjdG9yXCIpXHJcbiAgICAgICAgLmRhdGEocGllKGRhdGEpKVxyXG4gICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgLmFwcGVuZChcImdcIilcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwic2VjdG9yXCIpO1xyXG5cclxuICAgIGxldCBhcmMgPSBkM1xyXG4gICAgICAgIC5hcmMoKVxyXG4gICAgICAgIC5pbm5lclJhZGl1cyhyYWRpdXMgKiBwaWVJbmZvLnJhdGlvSW5uZXJSYWRpdXMpXHJcbiAgICAgICAgLm91dGVyUmFkaXVzKHJhZGl1cyk7XHJcblxyXG4gICAgbGV0IHNlY3RvclBhdGhzID0gc2VjdG9yc1xyXG4gICAgICAgIC5hcHBlbmQoXCJwYXRoXCIpXHJcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIGZ1bmN0aW9uIChkOiBhbnksIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gY29sb3JTY2FsZShpLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmF0dHIoXCJkXCIsIGFyYyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJQaWVDaGFydChcclxuICAgIGNhbnZhczogSFRNTEVsZW1lbnQsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgcGllSW5mbzogUGllSW5mb1xyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVyUGllQ2hhcnRcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvKTtcclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhcGllSW5mbykgcmV0dXJuO1xyXG5cclxuICAgIHJldHVybiBcIlVuZGVyIGNvbnN0cnVjdGlvblwiO1xyXG4gICAgXHJcbiAgICBsZXQgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyA9IHt9O1xyXG4gICAgY2hhcnRFbGVtZW50cyA9IGNyZWF0ZUFyZWFzKGNoYXJ0RWxlbWVudHMsIGNhbnZhcywgcmVuZGVySW5mbywgcGllSW5mbyk7XHJcblxyXG4gICAgcmVuZGVyVGl0bGUoY2FudmFzLCBjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvLCBwaWVJbmZvKTtcclxuXHJcbiAgICByZW5kZXJQaWUoY2FudmFzLCBjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvLCBwaWVJbmZvKTtcclxufVxyXG4iLCJpbXBvcnQgKiBhcyBkMyBmcm9tIFwiZDNcIjtcclxuaW1wb3J0IHsgUmVuZGVySW5mbywgU3VtbWFyeUluZm8gfSBmcm9tIFwiLi9kYXRhXCI7XHJcbmltcG9ydCAqIGFzIGV4cHIgZnJvbSBcIi4vZXhwclwiO1xyXG5cclxuZnVuY3Rpb24gY2hlY2tTdW1tYXJ5VGVtcGxhdGVWYWxpZChzdW1tYXJ5VGVtcGxhdGU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJTdW1tYXJ5KFxyXG4gICAgY2FudmFzOiBIVE1MRWxlbWVudCxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBzdW1tYXJ5SW5mbzogU3VtbWFyeUluZm9cclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInJlbmRlclN1bW1hcnlcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvKTtcclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhc3VtbWFyeUluZm8pIHJldHVybjtcclxuXHJcbiAgICBsZXQgb3V0cHV0U3VtbWFyeSA9IFwiXCI7XHJcbiAgICBpZiAoY2hlY2tTdW1tYXJ5VGVtcGxhdGVWYWxpZChzdW1tYXJ5SW5mby50ZW1wbGF0ZSkpIHtcclxuICAgICAgICBvdXRwdXRTdW1tYXJ5ID0gc3VtbWFyeUluZm8udGVtcGxhdGU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBcIkludmFsaWQgc3VtbWFyeSB0ZW1wbGF0ZVwiO1xyXG4gICAgfVxyXG5cclxuICAgIG91dHB1dFN1bW1hcnkgPSBleHByLnJlc29sdmVUZW1wbGF0ZShvdXRwdXRTdW1tYXJ5LCByZW5kZXJJbmZvKTtcclxuICAgIGlmIChvdXRwdXRTdW1tYXJ5ICE9PSBcIlwiKSB7XHJcbiAgICAgICAgbGV0IHRleHRCbG9jayA9IGQzLnNlbGVjdChjYW52YXMpLmFwcGVuZChcImRpdlwiKTtcclxuICAgICAgICBpZiAob3V0cHV0U3VtbWFyeS5pbmNsdWRlcyhcIlxcblwiKSkge1xyXG4gICAgICAgICAgICBsZXQgb3V0cHV0TGluZXMgPSBvdXRwdXRTdW1tYXJ5LnNwbGl0KFwiXFxuXCIpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBvdXRwdXRMaW5lIG9mIG91dHB1dExpbmVzKSB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0QmxvY2suYXBwZW5kKFwiZGl2XCIpLnRleHQob3V0cHV0TGluZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0ZXh0QmxvY2sudGV4dChvdXRwdXRTdW1tYXJ5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzdW1tYXJ5SW5mby5zdHlsZSAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICB0ZXh0QmxvY2suYXR0cihcInN0eWxlXCIsIHN1bW1hcnlJbmZvLnN0eWxlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTW9tZW50IH0gZnJvbSBcIm1vbWVudFwiO1xyXG5pbXBvcnQge1xyXG4gICAgRGF0YXNldHMsXHJcbiAgICBEYXRhUG9pbnQsXHJcbiAgICBSZW5kZXJJbmZvLFxyXG4gICAgTW9udGhJbmZvLFxyXG4gICAgRGF0YXNldCxcclxuICAgIFNpemUsXHJcbiAgICBUcmFuc2Zvcm0sXHJcbiAgICBDaGFydEVsZW1lbnRzLFxyXG4gICAgT3V0cHV0VHlwZSxcclxuICAgIFZhbHVlVHlwZSxcclxufSBmcm9tIFwiLi9kYXRhXCI7XHJcbmltcG9ydCAqIGFzIGhlbHBlciBmcm9tIFwiLi9oZWxwZXJcIjtcclxuaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XHJcblxyXG5sZXQgbG9nVG9Db25zb2xlID0gZmFsc2U7XHJcbmxldCByYXRpb0NlbGxUb1RleHQgPSAyLjg7XHJcbmxldCByYXRpb0RvdFRvVGV4dCA9IDEuODtcclxuXHJcbmludGVyZmFjZSBEYXlJbmZvIHtcclxuICAgIGRhdGU6IHN0cmluZztcclxuICAgIHZhbHVlOiBudW1iZXI7XHJcbiAgICBzY2FsZWRWYWx1ZTogbnVtYmVyO1xyXG4gICAgZGF5SW5Nb250aDogbnVtYmVyO1xyXG4gICAgaXNJblRoaXNNb250aDogYm9vbGVhbjtcclxuICAgIGlzT3V0T2ZEYXRhUmFuZ2U6IGJvb2xlYW47XHJcbiAgICByb3c6IG51bWJlcjtcclxuICAgIGNvbDogbnVtYmVyO1xyXG4gICAgc2hvd0NpcmNsZTogYm9vbGVhbjtcclxuICAgIHN0cmVha0luOiBib29sZWFuO1xyXG4gICAgc3RyZWFrT3V0OiBib29sZWFuO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0b05leHREYXRhc2V0KHJlbmRlckluZm86IFJlbmRlckluZm8sIG1vbnRoSW5mbzogTW9udGhJbmZvKTogYm9vbGVhbiB7XHJcbiAgICBsZXQgZGF0YXNldElkcyA9IG1vbnRoSW5mby5kYXRhc2V0O1xyXG4gICAgaWYgKGRhdGFzZXRJZHMubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7IC8vIGZhbHNlIGlmIHNlbGVjdGVkIGRhdGFzZXQgbm90IGNoYW5nZWRcclxuXHJcbiAgICBsZXQgZGF0YXNldCA9IG51bGw7XHJcbiAgICBpZiAobW9udGhJbmZvLnNlbGVjdGVkRGF0YXNldCA9PT0gbnVsbCkge1xyXG4gICAgICAgIGZvciAobGV0IGRhdGFzZXRJZCBvZiBkYXRhc2V0SWRzKSB7XHJcbiAgICAgICAgICAgIGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgICAgIGlmIChkYXRhc2V0ICYmICFkYXRhc2V0LmdldFF1ZXJ5KCkudXNlZEFzWERhdGFzZXQpIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGF0YXNldCkge1xyXG4gICAgICAgICAgICBtb250aEluZm8uc2VsZWN0ZWREYXRhc2V0ID0gZGF0YXNldC5nZXRJZCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gdHJ1ZSBpZiBzZWxlY3RlYyBkYXRhc2V0IGNoYW5nZWRcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxldCBjdXJEYXRhc2V0SWQgPSBtb250aEluZm8uc2VsZWN0ZWREYXRhc2V0O1xyXG4gICAgICAgIGxldCBjdXJJbmRleCA9IGRhdGFzZXRJZHMuZmluZEluZGV4KChpZCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gaWQgPT09IGN1ckRhdGFzZXRJZDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoY3VySW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICBpZiAoY3VySW5kZXggPT09IG1vbnRoSW5mby5kYXRhc2V0Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgIC8vIHNlYXJjaCBmcm9tIHN0YXJ0XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBkYXRhc2V0SWQgb2YgZGF0YXNldElkcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFzZXQgJiYgIWRhdGFzZXQuZ2V0UXVlcnkoKS51c2VkQXNYRGF0YXNldCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YXNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoSW5mby5zZWxlY3RlZERhdGFzZXQgPSBkYXRhc2V0LmdldElkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIHRydWUgaWYgc2VsZWN0ZWMgZGF0YXNldCBjaGFuZ2VkXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGN1ckluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGF0YXNldElkID0gZGF0YXNldElkc1tjdXJJbmRleF07XHJcbiAgICAgICAgICAgICAgICBkYXRhc2V0ID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXREYXRhc2V0QnlJZChkYXRhc2V0SWQpO1xyXG4gICAgICAgICAgICAgICAgbW9udGhJbmZvLnNlbGVjdGVkRGF0YXNldCA9IGRhdGFzZXRJZDtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhc2V0ICYmICFkYXRhc2V0LmdldFF1ZXJ5KCkudXNlZEFzWERhdGFzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9OZXh0RGF0YXNldChyZW5kZXJJbmZvLCBtb250aEluZm8pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlQXJlYXMoXHJcbiAgICBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzLFxyXG4gICAgY2FudmFzOiBIVE1MRWxlbWVudCxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBtb250aEluZm86IE1vbnRoSW5mb1xyXG4pOiBDaGFydEVsZW1lbnRzIHtcclxuICAgIC8vIGNsZWFuIGFyZWFzXHJcbiAgICBkMy5zZWxlY3QoY2FudmFzKS5zZWxlY3QoXCIjc3ZnXCIpLnJlbW92ZSgpO1xyXG4gICAgdmFyIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY2hhcnRFbGVtZW50cyk7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgLy8gZDMuc2VsZWN0KGNoYXJ0RWxlbWVudHNbcHJvcHNbaV1dKS5yZW1vdmUoKTtcclxuICAgICAgICBkZWxldGUgY2hhcnRFbGVtZW50c1twcm9wc1tpXV07XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhjaGFydEVsZW1lbnRzKTtcclxuXHJcbiAgICAvLyB3aG9sZSBhcmVhIGZvciBwbG90dGluZywgaW5jbHVkZXMgbWFyZ2luc1xyXG4gICAgbGV0IHN2ZyA9IGQzXHJcbiAgICAgICAgLnNlbGVjdChjYW52YXMpXHJcbiAgICAgICAgLmFwcGVuZChcInN2Z1wiKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJzdmdcIilcclxuICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgXCJ3aWR0aFwiLFxyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLm1hcmdpbi5sZWZ0ICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLnJpZ2h0XHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcImhlaWdodFwiLFxyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4udG9wICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLmJvdHRvbVxyXG4gICAgICAgICk7XHJcbiAgICBjaGFydEVsZW1lbnRzW1wic3ZnXCJdID0gc3ZnO1xyXG5cclxuICAgIC8vIGdyYXBoQXJlYSwgaW5jbHVkZXMgY2hhcnRBcmVhLCB0aXRsZSwgbGVnZW5kXHJcbiAgICBsZXQgZ3JhcGhBcmVhID0gc3ZnXHJcbiAgICAgICAgLmFwcGVuZChcImdcIilcclxuICAgICAgICAuYXR0cihcImlkXCIsIFwiZ3JhcGhBcmVhXCIpXHJcbiAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgIFwidHJhbnNmb3JtXCIsXHJcbiAgICAgICAgICAgIFwidHJhbnNsYXRlKFwiICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLmxlZnQgK1xyXG4gICAgICAgICAgICAgICAgXCIsXCIgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4udG9wICtcclxuICAgICAgICAgICAgICAgIFwiKVwiXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggKyByZW5kZXJJbmZvLm1hcmdpbi5yaWdodClcclxuICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgXCJoZWlnaHRcIixcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0ICsgcmVuZGVySW5mby5tYXJnaW4uYm90dG9tXHJcbiAgICAgICAgKTtcclxuICAgIGNoYXJ0RWxlbWVudHNbXCJncmFwaEFyZWFcIl0gPSBncmFwaEFyZWE7XHJcblxyXG4gICAgLy8gZGF0YUFyZWEsIHVuZGVyIGdyYXBoQXJlYSwgaW5jbHVkZXMgcG9pbnRzLCBsaW5lcywgeEF4aXMsIHlBeGlzXHJcbiAgICBsZXQgZGF0YUFyZWEgPSBncmFwaEFyZWFcclxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJkYXRhQXJlYVwiKVxyXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGgpXHJcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0KTtcclxuICAgIGNoYXJ0RWxlbWVudHNbXCJkYXRhQXJlYVwiXSA9IGRhdGFBcmVhO1xyXG5cclxuICAgIHJldHVybiBjaGFydEVsZW1lbnRzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjbGVhclNlbGVjdGlvbihjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzLCBtb250aEluZm86IE1vbnRoSW5mbykge1xyXG4gICAgbGV0IGNpcmNsZXMgPSBjaGFydEVsZW1lbnRzLnN2Zy5zZWxlY3RBbGwoXCJjaXJjbGVcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhjaXJjbGVzKTtcclxuICAgIGZvciAobGV0IGNpcmNsZSBvZiBjaXJjbGVzKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coY2lyY2xlKTtcclxuICAgICAgICBsZXQgaWQgPSBkMy5zZWxlY3QoY2lyY2xlKS5hdHRyKFwiaWRcIik7XHJcbiAgICAgICAgaWYgKGlkICYmIGlkLnN0YXJ0c1dpdGgoXCJ0cmFja2VyLXNlbGVjdGVkLWNpcmNsZS1cIikpIHtcclxuICAgICAgICAgICAgZDMuc2VsZWN0KGNpcmNsZSkuc3R5bGUoXCJzdHJva2VcIiwgXCJub25lXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBtb250aEluZm8uc2VsZWN0ZWREYXRlID0gXCJcIjtcclxuXHJcbiAgICBjaGFydEVsZW1lbnRzLm1vbml0b3IudGV4dChcIlwiKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyTW9udGhIZWFkZXIoXHJcbiAgICBjYW52YXM6IEhUTUxFbGVtZW50LFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBtb250aEluZm86IE1vbnRoSW5mbyxcclxuICAgIGN1ck1vbnRoRGF0ZTogTW9tZW50XHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJNb250aEhlYWRlclwiKVxyXG5cclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhbW9udGhJbmZvKSByZXR1cm47XHJcblxyXG4gICAgbGV0IGN1ckRhdGFzZXRJZCA9IG1vbnRoSW5mby5zZWxlY3RlZERhdGFzZXQ7XHJcbiAgICBpZiAoY3VyRGF0YXNldElkID09PSBudWxsKSByZXR1cm47XHJcbiAgICBsZXQgZGF0YXNldCA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoY3VyRGF0YXNldElkKTtcclxuICAgIGlmICghZGF0YXNldCkgcmV0dXJuO1xyXG4gICAgbGV0IGRhdGFzZXROYW1lID0gZGF0YXNldC5nZXROYW1lKCk7XHJcblxyXG4gICAgbGV0IGN1ck1vbnRoID0gY3VyTW9udGhEYXRlLm1vbnRoKCk7IC8vIDB+MTFcclxuICAgIGxldCBjdXJEYXlzSW5Nb250aCA9IGN1ck1vbnRoRGF0ZS5kYXlzSW5Nb250aCgpOyAvLyAyOH4zMVxyXG4gICAgbGV0IGN1clllYXIgPSBjdXJNb250aERhdGUueWVhcigpO1xyXG5cclxuICAgIGxldCBtYXhEYXlUZXh0U2l6ZSA9IGhlbHBlci5tZWFzdXJlVGV4dFNpemUoXCIzMFwiLCBcInRyYWNrZXItYXhpcy1sYWJlbFwiKTtcclxuICAgIGxldCBjZWxsU2l6ZSA9XHJcbiAgICAgICAgTWF0aC5tYXgobWF4RGF5VGV4dFNpemUud2lkdGgsIG1heERheVRleHRTaXplLmhlaWdodCkgKiByYXRpb0NlbGxUb1RleHQ7XHJcbiAgICBsZXQgZG90UmFkaXVzID0gKChjZWxsU2l6ZSAvIHJhdGlvQ2VsbFRvVGV4dCkgKiByYXRpb0RvdFRvVGV4dCkgLyAyLjA7XHJcblxyXG4gICAgbGV0IGhlYWRlclllYXJUZXh0ID0gY3VyTW9udGhEYXRlLmZvcm1hdChcIllZWVlcIik7XHJcbiAgICBsZXQgaGVhZGVyTW9udGhUZXh0ID0gY3VyTW9udGhEYXRlLmZvcm1hdChcIk1NTVwiKTtcclxuICAgIGxldCBoZWFkZXJZZWFyU2l6ZSA9IGhlbHBlci5tZWFzdXJlVGV4dFNpemUoXHJcbiAgICAgICAgaGVhZGVyWWVhclRleHQsXHJcbiAgICAgICAgXCJ0cmFja2VyLW1vbnRoLWhlYWRlci15ZWFyXCJcclxuICAgICk7XHJcbiAgICBsZXQgaGVhZGVyTW9udGhTaXplID0gaGVscGVyLm1lYXN1cmVUZXh0U2l6ZShcclxuICAgICAgICBoZWFkZXJNb250aFRleHQsXHJcbiAgICAgICAgXCJ0cmFja2VyLW1vbnRoLWhlYWRlci1tb250aFwiXHJcbiAgICApO1xyXG5cclxuICAgIGxldCBoZWFkZXJIZWlnaHQgPSAwO1xyXG4gICAgbGV0IHlTcGFjaW5nID0gODtcclxuXHJcbiAgICAvLyBBcHBlbmQgaGVhZGVyIGdyb3VwXHJcbiAgICBsZXQgaGVhZGVyR3JvdXAgPSBjaGFydEVsZW1lbnRzLmdyYXBoQXJlYS5hcHBlbmQoXCJnXCIpO1xyXG5cclxuICAgIC8vIGhhZWRlciBtb250aFxyXG4gICAgbGV0IGhlYWRlck1vbnRoQ29sb3IgPSBudWxsO1xyXG4gICAgaWYgKG1vbnRoSW5mby5oZWFkZXJNb250aENvbG9yKSB7XHJcbiAgICAgICAgaGVhZGVyTW9udGhDb2xvciA9IG1vbnRoSW5mby5oZWFkZXJNb250aENvbG9yO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAobW9udGhJbmZvLmNvbG9yKSB7XHJcbiAgICAgICAgICAgIGhlYWRlck1vbnRoQ29sb3IgPSBtb250aEluZm8uY29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbGV0IGhlYWRlck1vbnRoID0gaGVhZGVyR3JvdXBcclxuICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgIC50ZXh0KGhlYWRlck1vbnRoVGV4dCkgLy8gcGl2b3QgYXQgY2VudGVyXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcInRpdGxlTW9udGhcIilcclxuICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgXCJ0cmFuc2Zvcm1cIixcclxuICAgICAgICAgICAgXCJ0cmFuc2xhdGUoXCIgKyBjZWxsU2l6ZSAvIDQuMCArIFwiLFwiICsgaGVhZGVyTW9udGhTaXplLmhlaWdodCArIFwiKVwiXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLW1vbnRoLWhlYWRlci1tb250aFwiKVxyXG4gICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcImRlZmF1bHRcIilcclxuICAgICAgICAub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZXZlbnQ6IGFueSkge1xyXG4gICAgICAgICAgICBjbGVhclNlbGVjdGlvbihjaGFydEVsZW1lbnRzLCBtb250aEluZm8pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIGlmIChoZWFkZXJNb250aENvbG9yKSB7XHJcbiAgICAgICAgaGVhZGVyTW9udGguc3R5bGUoXCJmaWxsXCIsIGhlYWRlck1vbnRoQ29sb3IpO1xyXG4gICAgfVxyXG4gICAgaGVhZGVySGVpZ2h0ICs9IGhlYWRlck1vbnRoU2l6ZS5oZWlnaHQ7XHJcblxyXG4gICAgLy8gaGVhZGVyIHllYXJcclxuICAgIGxldCBoZWFkZXJZZWFyQ29sb3IgPSBudWxsO1xyXG4gICAgaWYgKG1vbnRoSW5mby5oZWFkZXJZZWFyQ29sb3IpIHtcclxuICAgICAgICBoZWFkZXJZZWFyQ29sb3IgPSBtb250aEluZm8uaGVhZGVyWWVhckNvbG9yO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAobW9udGhJbmZvLmNvbG9yKSB7XHJcbiAgICAgICAgICAgIGhlYWRlclllYXJDb2xvciA9IG1vbnRoSW5mby5jb2xvcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBsZXQgaGVhZGVyWWVhciA9IGhlYWRlckdyb3VwXHJcbiAgICAgICAgLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAudGV4dChoZWFkZXJZZWFyVGV4dCkgLy8gcGl2b3QgYXQgY2VudGVyXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcInRpdGxlWWVhclwiKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcInRyYW5zZm9ybVwiLFxyXG4gICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArXHJcbiAgICAgICAgICAgICAgICBjZWxsU2l6ZSAvIDQuMCArXHJcbiAgICAgICAgICAgICAgICBcIixcIiArXHJcbiAgICAgICAgICAgICAgICAoaGVhZGVySGVpZ2h0ICsgaGVhZGVyWWVhclNpemUuaGVpZ2h0KSArXHJcbiAgICAgICAgICAgICAgICBcIilcIlxyXG4gICAgICAgIClcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1tb250aC1oZWFkZXIteWVhclwiKVxyXG4gICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcImRlZmF1bHRcIilcclxuICAgICAgICAuYXR0cihcImZvbnQtd2VpZ2h0XCIsIFwiYm9sZFwiKVxyXG4gICAgICAgIC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChldmVudDogYW55KSB7XHJcbiAgICAgICAgICAgIGNsZWFyU2VsZWN0aW9uKGNoYXJ0RWxlbWVudHMsIG1vbnRoSW5mbyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgaWYgKGhlYWRlclllYXJDb2xvcikge1xyXG4gICAgICAgIGhlYWRlclllYXIuc3R5bGUoXCJmaWxsXCIsIGhlYWRlclllYXJDb2xvcik7XHJcbiAgICB9XHJcblxyXG4gICAgaGVhZGVySGVpZ2h0ICs9IGhlYWRlclllYXJTaXplLmhlaWdodDtcclxuXHJcbiAgICAvLyBkYXRhc2V0IHJvdGF0b3JcclxuICAgIGxldCBkYXRhc2V0TmFtZVNpemUgPSBoZWxwZXIubWVhc3VyZVRleHRTaXplKFxyXG4gICAgICAgIGRhdGFzZXROYW1lLFxyXG4gICAgICAgIFwidHJhY2tlci1tb250aC10aXRsZS1yb3RhdG9yXCJcclxuICAgICk7XHJcbiAgICBsZXQgZGF0YXNldFJvdGF0b3IgPSBoZWFkZXJHcm91cFxyXG4gICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgICAgLnRleHQoZGF0YXNldE5hbWUpXHJcbiAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgIFwidHJhbnNmb3JtXCIsXHJcbiAgICAgICAgICAgIFwidHJhbnNsYXRlKFwiICsgMy41ICogY2VsbFNpemUgKyBcIixcIiArIGRhdGFzZXROYW1lU2l6ZS5oZWlnaHQgKyBcIilcIlxyXG4gICAgICAgIClcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1tb250aC10aXRsZS1yb3RhdG9yXCIpXHJcbiAgICAgICAgLnN0eWxlKFwiY3Vyc29yXCIsIFwicG9pbnRlclwiKVxyXG4gICAgICAgIC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChldmVudDogYW55KSB7XHJcbiAgICAgICAgICAgIC8vIHNob3cgbmV4dCB0YXJnZXRcclxuICAgICAgICAgICAgaWYgKHRvTmV4dERhdGFzZXQocmVuZGVySW5mbywgbW9udGhJbmZvKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gY2xlYXIgY2lyY2xlc1xyXG4gICAgICAgICAgICAgICAgY2xlYXJTZWxlY3Rpb24oY2hhcnRFbGVtZW50cywgbW9udGhJbmZvKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZWZyZXNoKFxyXG4gICAgICAgICAgICAgICAgICAgIGNhbnZhcyxcclxuICAgICAgICAgICAgICAgICAgICBjaGFydEVsZW1lbnRzLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckluZm8sXHJcbiAgICAgICAgICAgICAgICAgICAgbW9udGhJbmZvLFxyXG4gICAgICAgICAgICAgICAgICAgIGN1ck1vbnRoRGF0ZVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgY2hhcnRFbGVtZW50c1tcInJvdGF0b3JcIl0gPSBkYXRhc2V0Um90YXRvcjtcclxuXHJcbiAgICAvLyB2YWx1ZSBtb25pdG9yXHJcbiAgICBsZXQgbW9uaXRvclRleHRTaXplID0gaGVscGVyLm1lYXN1cmVUZXh0U2l6ZShcclxuICAgICAgICBcIjAuMDAwMFwiLFxyXG4gICAgICAgIFwidHJhY2tlci1tb250aC10aXRsZS1tb25pdG9yXCJcclxuICAgICk7XHJcbiAgICBsZXQgbW9uaXRvciA9IGhlYWRlckdyb3VwXHJcbiAgICAgICAgLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAudGV4dChcIlwiKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJtb25pdG9yXCIpXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItbW9udGgtdGl0bGUtbW9uaXRvclwiKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcInRyYW5zZm9ybVwiLFxyXG4gICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArXHJcbiAgICAgICAgICAgICAgICAzLjUgKiBjZWxsU2l6ZSArXHJcbiAgICAgICAgICAgICAgICBcIixcIiArXHJcbiAgICAgICAgICAgICAgICAoZGF0YXNldE5hbWVTaXplLmhlaWdodCArIG1vbml0b3JUZXh0U2l6ZS5oZWlnaHQpICtcclxuICAgICAgICAgICAgICAgIFwiKVwiXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcInBvaW50ZXJcIilcclxuICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIG1vbnRoSW5mby5zZWxlY3RlZFJpbmdDb2xvcik7XHJcbiAgICBjaGFydEVsZW1lbnRzW1wibW9uaXRvclwiXSA9IG1vbml0b3I7XHJcblxyXG4gICAgLy8gYXJyb3cgbGVmdFxyXG4gICAgbGV0IGFycm93U2l6ZSA9IGhlbHBlci5tZWFzdXJlVGV4dFNpemUoXCI8XCIsIFwidHJhY2tlci1tb250aC10aXRsZS1hcnJvd1wiKTtcclxuICAgIGxldCBhcnJvd0xlZnQgPSBoZWFkZXJHcm91cFxyXG4gICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgICAgLnRleHQoXCI8XCIpIC8vIHBpdm90IGF0IGNlbnRlclxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJhcnJvd0xlZnRcIilcclxuICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgXCJ0cmFuc2Zvcm1cIixcclxuICAgICAgICAgICAgXCJ0cmFuc2xhdGUoXCIgK1xyXG4gICAgICAgICAgICAgICAgNS41ICogY2VsbFNpemUgK1xyXG4gICAgICAgICAgICAgICAgXCIsXCIgK1xyXG4gICAgICAgICAgICAgICAgKGhlYWRlckhlaWdodCAvIDIgKyBhcnJvd1NpemUuaGVpZ2h0IC8gMikgK1xyXG4gICAgICAgICAgICAgICAgXCIpXCJcclxuICAgICAgICApXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItbW9udGgtdGl0bGUtYXJyb3dcIilcclxuICAgICAgICAub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZXZlbnQ6IGFueSkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImxlZnQgYXJyb3cgY2xpY2tlZFwiKTtcclxuICAgICAgICAgICAgY2xlYXJTZWxlY3Rpb24oY2hhcnRFbGVtZW50cywgbW9udGhJbmZvKTtcclxuICAgICAgICAgICAgbW9udGhJbmZvLnNlbGVjdGVkRGF0ZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIGxldCBwcmV2TW9udGhEYXRlID0gY3VyTW9udGhEYXRlLmNsb25lKCkuYWRkKC0xLCBcIm1vbnRoXCIpO1xyXG4gICAgICAgICAgICByZWZyZXNoKFxyXG4gICAgICAgICAgICAgICAgY2FudmFzLFxyXG4gICAgICAgICAgICAgICAgY2hhcnRFbGVtZW50cyxcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8sXHJcbiAgICAgICAgICAgICAgICBtb250aEluZm8sXHJcbiAgICAgICAgICAgICAgICBwcmV2TW9udGhEYXRlXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3R5bGUoXCJjdXJzb3JcIiwgXCJwb2ludGVyXCIpO1xyXG5cclxuICAgIC8vIGFycm93IHJpZ2h0XHJcbiAgICBsZXQgYXJyb3dSaWdodCA9IGhlYWRlckdyb3VwXHJcbiAgICAgICAgLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAudGV4dChcIj5cIikgLy8gcGl2b3QgYXQgY2VudGVyXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcImFycm93TGVmdFwiKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcInRyYW5zZm9ybVwiLFxyXG4gICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArXHJcbiAgICAgICAgICAgICAgICA2LjUgKiBjZWxsU2l6ZSArXHJcbiAgICAgICAgICAgICAgICBcIixcIiArXHJcbiAgICAgICAgICAgICAgICAoaGVhZGVySGVpZ2h0IC8gMiArIGFycm93U2l6ZS5oZWlnaHQgLyAyKSArXHJcbiAgICAgICAgICAgICAgICBcIilcIlxyXG4gICAgICAgIClcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1tb250aC10aXRsZS1hcnJvd1wiKVxyXG4gICAgICAgIC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChldmVudDogYW55KSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwicmlnaHQgYXJyb3cgY2xpY2tlZFwiKTtcclxuICAgICAgICAgICAgY2xlYXJTZWxlY3Rpb24oY2hhcnRFbGVtZW50cywgbW9udGhJbmZvKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBuZXh0TW9udGhEYXRlID0gY3VyTW9udGhEYXRlLmNsb25lKCkuYWRkKDEsIFwibW9udGhcIik7XHJcbiAgICAgICAgICAgIHJlZnJlc2goXHJcbiAgICAgICAgICAgICAgICBjYW52YXMsXHJcbiAgICAgICAgICAgICAgICBjaGFydEVsZW1lbnRzLFxyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mbyxcclxuICAgICAgICAgICAgICAgIG1vbnRoSW5mbyxcclxuICAgICAgICAgICAgICAgIG5leHRNb250aERhdGVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcInBvaW50ZXJcIik7XHJcblxyXG4gICAgLy8gYXJyb3cgdG9kYXlcclxuICAgIGxldCBhcnJvd1RvZGF5ID0gaGVhZGVyR3JvdXBcclxuICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgIC50ZXh0KFwi4pemXCIpIC8vIHBpdm90IGF0IGNlbnRlclxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJhcnJvd1RvZGF5XCIpXHJcbiAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgIFwidHJhbnNmb3JtXCIsXHJcbiAgICAgICAgICAgIFwidHJhbnNsYXRlKFwiICtcclxuICAgICAgICAgICAgICAgIDYgKiBjZWxsU2l6ZSArXHJcbiAgICAgICAgICAgICAgICBcIixcIiArXHJcbiAgICAgICAgICAgICAgICAoaGVhZGVySGVpZ2h0IC8gMiArIGFycm93U2l6ZS5oZWlnaHQgLyAyKSArXHJcbiAgICAgICAgICAgICAgICBcIilcIlxyXG4gICAgICAgIClcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1tb250aC10aXRsZS1hcnJvd1wiKVxyXG4gICAgICAgIC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChldmVudDogYW55KSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwidG9kYXkgYXJyb3cgY2xpY2tlZFwiKTtcclxuICAgICAgICAgICAgY2xlYXJTZWxlY3Rpb24oY2hhcnRFbGVtZW50cywgbW9udGhJbmZvKTtcclxuXHJcbiAgICAgICAgICAgIGxldCB0b2RheURhdGUgPSBoZWxwZXIuZ2V0RGF0ZVRvZGF5KHJlbmRlckluZm8uZGF0ZUZvcm1hdCk7XHJcbiAgICAgICAgICAgIHJlZnJlc2goY2FudmFzLCBjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvLCBtb250aEluZm8sIHRvZGF5RGF0ZSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3R5bGUoXCJjdXJzb3JcIiwgXCJwb2ludGVyXCIpO1xyXG5cclxuICAgIGhlYWRlckhlaWdodCArPSB5U3BhY2luZztcclxuXHJcbiAgICAvLyB3ZWVrIGRheSBuYW1lc1xyXG4gICAgbGV0IHdlZWtkYXlOYW1lcyA9IFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXTtcclxuICAgIGlmIChtb250aEluZm8uc3RhcnRXZWVrT24udG9Mb3dlckNhc2UoKSA9PT0gXCJtb25cIikge1xyXG4gICAgICAgIHdlZWtkYXlOYW1lcy5wdXNoKHdlZWtkYXlOYW1lcy5zaGlmdCgpKTtcclxuICAgIH1cclxuICAgIGxldCB3ZWVrZGF5TmFtZVNpemUgPSBoZWxwZXIubWVhc3VyZVRleHRTaXplKFxyXG4gICAgICAgIHdlZWtkYXlOYW1lc1swXSxcclxuICAgICAgICBcInRyYWNrZXItbW9udGgtd2Vla2RheVwiXHJcbiAgICApO1xyXG4gICAgbGV0IHdlZWtEYXlzID0gY2hhcnRFbGVtZW50cy5ncmFwaEFyZWFcclxuICAgICAgICAuc2VsZWN0QWxsKFwid2Vla0RheXNcIilcclxuICAgICAgICAuZGF0YSh3ZWVrZGF5TmFtZXMpXHJcbiAgICAgICAgLmVudGVyKClcclxuICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgIC50ZXh0KGZ1bmN0aW9uIChuOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG47XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAobjogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgbGV0IHN0clRyYW5zbGF0ZSA9XHJcbiAgICAgICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArXHJcbiAgICAgICAgICAgICAgICAoaSArIDAuNSkgKiBjZWxsU2l6ZSArXHJcbiAgICAgICAgICAgICAgICBcIixcIiArXHJcbiAgICAgICAgICAgICAgICAoaGVhZGVySGVpZ2h0ICsgd2Vla2RheU5hbWVTaXplLmhlaWdodCkgK1xyXG4gICAgICAgICAgICAgICAgXCIpXCI7XHJcbiAgICAgICAgICAgIHJldHVybiBzdHJUcmFuc2xhdGU7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1tb250aC13ZWVrZGF5XCIpXHJcbiAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxyXG4gICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcImRlZmF1bHRcIilcclxuICAgICAgICAub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZXZlbnQ6IGFueSkge1xyXG4gICAgICAgICAgICBjbGVhclNlbGVjdGlvbihjaGFydEVsZW1lbnRzLCBtb250aEluZm8pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgaGVhZGVySGVpZ2h0ICs9IHdlZWtkYXlOYW1lU2l6ZS5oZWlnaHQgKyB5U3BhY2luZztcclxuXHJcbiAgICAvLyBkaXZpZGluZyBsaW5lXHJcbiAgICBsZXQgZGl2aWRpbmdMaW5lSGVpZ2h0ID0gMTtcclxuICAgIGxldCBkaXZpZGluZ0xpbmVDb2xvciA9IG51bGw7XHJcbiAgICBpZiAobW9udGhJbmZvLmRpdmlkaW5nTGluZUNvbG9yKSB7XHJcbiAgICAgICAgZGl2aWRpbmdMaW5lQ29sb3IgPSBtb250aEluZm8uZGl2aWRpbmdMaW5lQ29sb3I7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChtb250aEluZm8uY29sb3IpIHtcclxuICAgICAgICAgICAgZGl2aWRpbmdMaW5lQ29sb3IgPSBtb250aEluZm8uY29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbGV0IGRpdmlkaW5nTGluZSA9IGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhXHJcbiAgICAgICAgLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAuYXR0cihcInhcIiwgMClcclxuICAgICAgICAuYXR0cihcInlcIiwgaGVhZGVySGVpZ2h0KVxyXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgNi41ICogY2VsbFNpemUgKyB3ZWVrZGF5TmFtZVNpemUud2lkdGgpXHJcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZGl2aWRpbmdMaW5lSGVpZ2h0KVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLW1vbnRoLWRpdmlkaW5nLWxpbmVcIik7XHJcblxyXG4gICAgaWYgKGRpdmlkaW5nTGluZUNvbG9yKSB7XHJcbiAgICAgICAgZGl2aWRpbmdMaW5lLnN0eWxlKFwiZmlsbFwiLCBkaXZpZGluZ0xpbmVDb2xvcik7XHJcbiAgICB9XHJcbiAgICBoZWFkZXJIZWlnaHQgKz0gZGl2aWRpbmdMaW5lSGVpZ2h0O1xyXG5cclxuICAgIGhlYWRlckdyb3VwLmF0dHIoXCJoZWlnaHRcIiwgaGVhZGVySGVpZ2h0KTtcclxuICAgIGNoYXJ0RWxlbWVudHNbXCJoZWFkZXJcIl0gPSBoZWFkZXJHcm91cDtcclxuXHJcbiAgICAvLyBNb3ZlIHNpYmxpbmcgYXJlYXNcclxuICAgIGhlbHBlci5tb3ZlQXJlYShjaGFydEVsZW1lbnRzLmRhdGFBcmVhLCAwLCBoZWFkZXJIZWlnaHQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJNb250aERheXMoXHJcbiAgICBjYW52YXM6IEhUTUxFbGVtZW50LFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBtb250aEluZm86IE1vbnRoSW5mbyxcclxuICAgIGN1ck1vbnRoRGF0ZTogTW9tZW50XHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJNb250aERheXNcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvKTtcclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhbW9udGhJbmZvKSByZXR1cm47XHJcblxyXG4gICAgbGV0IGN1ckRhdGFzZXRJZCA9IG1vbnRoSW5mby5zZWxlY3RlZERhdGFzZXQ7XHJcbiAgICBpZiAoY3VyRGF0YXNldElkID09PSBudWxsKSByZXR1cm47XHJcbiAgICBsZXQgZGF0YXNldCA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoY3VyRGF0YXNldElkKTtcclxuICAgIGlmICghZGF0YXNldCkgcmV0dXJuO1xyXG5cclxuICAgIGxldCBjdXJEYXRhc2V0SW5kZXggPSBtb250aEluZm8uZGF0YXNldC5maW5kSW5kZXgoKGlkKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGlkID09PSBjdXJEYXRhc2V0SWQ7XHJcbiAgICB9KTtcclxuICAgIGxldCB0aHJlc2hvbGQgPSBtb250aEluZm8udGhyZXNob2xkW2N1ckRhdGFzZXRJbmRleF07XHJcblxyXG4gICAgbGV0IGN1ck1vbnRoID0gY3VyTW9udGhEYXRlLm1vbnRoKCk7IC8vIDB+MTFcclxuICAgIGxldCBjdXJEYXlzSW5Nb250aCA9IGN1ck1vbnRoRGF0ZS5kYXlzSW5Nb250aCgpOyAvLyAyOH4zMVxyXG5cclxuICAgIGxldCBtYXhEYXlUZXh0U2l6ZSA9IGhlbHBlci5tZWFzdXJlVGV4dFNpemUoXCIzMFwiLCBcInRyYWNrZXItYXhpcy1sYWJlbFwiKTtcclxuICAgIGxldCBjZWxsU2l6ZSA9XHJcbiAgICAgICAgTWF0aC5tYXgobWF4RGF5VGV4dFNpemUud2lkdGgsIG1heERheVRleHRTaXplLmhlaWdodCkgKiByYXRpb0NlbGxUb1RleHQ7XHJcbiAgICBsZXQgZG90UmFkaXVzID0gKChjZWxsU2l6ZSAvIHJhdGlvQ2VsbFRvVGV4dCkgKiByYXRpb0RvdFRvVGV4dCkgLyAyLjA7XHJcbiAgICBsZXQgc3RyZWFrV2lkdGggPSAoY2VsbFNpemUgLSBkb3RSYWRpdXMgKiAyLjApIC8gMi4wO1xyXG4gICAgbGV0IHN0cmVha0hlaWdodCA9IDM7XHJcblxyXG4gICAgLy8gR2V0IG1pbiBhbmQgbWF4XHJcbiAgICBsZXQgeU1pbiA9IGQzLm1pbihkYXRhc2V0LmdldFZhbHVlcygpKTtcclxuICAgIGlmIChtb250aEluZm8ueU1pbltjdXJEYXRhc2V0SW5kZXhdICE9PSBudWxsKSB7XHJcbiAgICAgICAgeU1pbiA9IG1vbnRoSW5mby55TWluW2N1ckRhdGFzZXRJbmRleF07XHJcbiAgICB9XHJcbiAgICBsZXQgeU1heCA9IGQzLm1heChkYXRhc2V0LmdldFZhbHVlcygpKTtcclxuICAgIGlmIChtb250aEluZm8ueU1heFtjdXJEYXRhc2V0SW5kZXhdICE9PSBudWxsKSB7XHJcbiAgICAgICAgeU1heCA9IG1vbnRoSW5mby55TWF4W2N1ckRhdGFzZXRJbmRleF07XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhgeU1pbjoke3lNaW59LCB5TWF4OiR7eU1heH1gKTtcclxuICAgIGxldCBhbGxvd1NjYWxlZFZhbHVlID0gdHJ1ZTtcclxuICAgIGlmICh5TWF4ID09PSBudWxsIHx8IHlNaW4gPT09IG51bGwgfHwgeU1heCA8PSB5TWluKSB7XHJcbiAgICAgICAgLy8gc2NhbGVkVmFsdWUgY2FuIG5vdCBiZSBjYWxjdWxhdGVkLCBkbyBub3QgdXNlIGdyYWRpZW50IGNvbG9yXHJcbiAgICAgICAgYWxsb3dTY2FsZWRWYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwic2NhbGVkVmFsdWUgbm90IGFsbG93ZWRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RhcnQgYW5kIGVuZFxyXG4gICAgY29uc3QgbW9udGhTdGFydERhdGUgPSBjdXJNb250aERhdGUuY2xvbmUoKS5zdGFydE9mKFwibW9udGhcIik7XHJcbiAgICBsZXQgc3RhcnREYXRlID0gbW9udGhTdGFydERhdGVcclxuICAgICAgICAuY2xvbmUoKVxyXG4gICAgICAgIC5zdWJ0cmFjdChtb250aFN0YXJ0RGF0ZS5kYXkoKSwgXCJkYXlzXCIpO1xyXG4gICAgaWYgKG1vbnRoSW5mby5zdGFydFdlZWtPbi50b0xvd2VyQ2FzZSgpID09PSBcIm1vblwiKSB7XHJcbiAgICAgICAgc3RhcnREYXRlID0gc3RhcnREYXRlLmFkZCgxLCBcImRheXNcIik7XHJcbiAgICB9XHJcbiAgICBjb25zdCBtb250aEVuZERhdGUgPSBjdXJNb250aERhdGUuY2xvbmUoKS5lbmRPZihcIm1vbnRoXCIpO1xyXG4gICAgbGV0IGVuZERhdGUgPSBtb250aEVuZERhdGUuY2xvbmUoKS5hZGQoNyAtIG1vbnRoRW5kRGF0ZS5kYXkoKSAtIDEsIFwiZGF5c1wiKTtcclxuICAgIGlmIChtb250aEluZm8uc3RhcnRXZWVrT24udG9Mb3dlckNhc2UoKSA9PT0gXCJtb25cIikge1xyXG4gICAgICAgIGVuZERhdGUgPSBlbmREYXRlLmFkZCgxLCBcImRheXNcIik7XHJcbiAgICB9XHJcbiAgICBjb25zdCBkYXRhU3RhcnREYXRlID0gZGF0YXNldC5nZXRTdGFydERhdGUoKTtcclxuICAgIGNvbnN0IGRhdGFFbmREYXRlID0gZGF0YXNldC5nZXRFbmREYXRlKCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhtb250aFN0YXJ0RGF0ZS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHN0YXJ0RGF0ZS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpKTtcclxuXHJcbiAgICAvLyBQcmVwYXJlIGRhdGEgZm9yIGdyYXBoXHJcbiAgICBsZXQgZGF5c0luTW9udGhWaWV3OiBBcnJheTxEYXlJbmZvPiA9IFtdO1xyXG4gICAgbGV0IGluZENvbCA9IDA7XHJcbiAgICBsZXQgaW5kUm93ID0gMDtcclxuICAgIGxldCBpbmQgPSAwO1xyXG4gICAgZm9yIChcclxuICAgICAgICBsZXQgY3VyRGF0ZSA9IHN0YXJ0RGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgIGN1ckRhdGUgPD0gZW5kRGF0ZTtcclxuICAgICAgICBjdXJEYXRlLmFkZCgxLCBcImRheXNcIilcclxuICAgICkge1xyXG4gICAgICAgIGlmIChtb250aEluZm8uc3RhcnRXZWVrT24udG9Mb3dlckNhc2UoKSA9PT0gXCJtb25cIikge1xyXG4gICAgICAgICAgICBpbmRDb2wgPSBjdXJEYXRlLmRheSgpIC0gMTtcclxuICAgICAgICAgICAgaWYgKGluZENvbCA8IDApIHtcclxuICAgICAgICAgICAgICAgIGluZENvbCA9IDY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5kUm93ID0gTWF0aC5mbG9vcihpbmQgLyA3KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpbmRDb2wgPSBjdXJEYXRlLmRheSgpOyAvLyAwfjZcclxuICAgICAgICAgICAgaW5kUm93ID0gTWF0aC5mbG9vcihpbmQgLyA3KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGlzIHRoaXMgZGF5IGluIHRoaXMgbW9udGhcclxuICAgICAgICBsZXQgaXNJblRoaXNNb250aCA9IHRydWU7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBjdXJEYXRlLmRpZmYobW9udGhTdGFydERhdGUpIDwgMCB8fFxyXG4gICAgICAgICAgICBjdXJEYXRlLmRpZmYobW9udGhFbmREYXRlKSA+IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgaXNJblRoaXNNb250aCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpcyB0aGlzIGRheSBvdXQgb2YgZGF0YSByYW5nZVxyXG4gICAgICAgIGxldCBpc091dE9mRGF0YVJhbmdlID0gdHJ1ZTtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIGRhdGFTdGFydERhdGUgJiZcclxuICAgICAgICAgICAgZGF0YUVuZERhdGUgJiZcclxuICAgICAgICAgICAgY3VyRGF0ZS5kaWZmKGRhdGFTdGFydERhdGUpID49IDAgJiZcclxuICAgICAgICAgICAgY3VyRGF0ZS5kaWZmKGRhdGFFbmREYXRlKSA8PSAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlzT3V0T2ZEYXRhUmFuZ2UgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGN1clZhbHVlXHJcbiAgICAgICAgbGV0IGN1clZhbHVlID0gZGF0YXNldC5nZXRWYWx1ZShjdXJEYXRlKTtcclxuXHJcbiAgICAgICAgLy8gc2hvd0NpcmNsZVxyXG4gICAgICAgIGxldCBzaG93Q2lyY2xlID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKCFtb250aEluZm8uY2lyY2xlQ29sb3JCeVZhbHVlKSB7XHJcbiAgICAgICAgICAgIC8vIHNob3duIG9yIG5vdCBzaG93blxyXG4gICAgICAgICAgICBpZiAoY3VyVmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJWYWx1ZSA+IHRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3dDaXJjbGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCFhbGxvd1NjYWxlZFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VyVmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VyVmFsdWUgPiB0aHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NpcmNsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2hvd0NpcmNsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHNjYWxlZFZhbHVlXHJcbiAgICAgICAgbGV0IHNjYWxlZFZhbHVlID0gbnVsbDtcclxuICAgICAgICBpZiAobW9udGhJbmZvLmNpcmNsZUNvbG9yQnlWYWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoYWxsb3dTY2FsZWRWYWx1ZSAmJiBjdXJWYWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgc2NhbGVkVmFsdWUgPSAoY3VyVmFsdWUgLSB5TWluKSAvICh5TWF4IC0geU1pbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coeU1pbik7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coeU1heCk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coc2NhbGVkVmFsdWUpO1xyXG5cclxuICAgICAgICAvLyBpZiAoY3VyRGF0ZS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpID09PSBcIjIwMjEtMTEtMDJcIikge1xyXG4gICAgICAgIC8vICAgICBsb2dUb0NvbnNvbGUgPSB0cnVlO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgLy8gc3RyZWFrSW4gYW5kIHN0cmVha091dFxyXG4gICAgICAgIGxldCBuZXh0VmFsdWUgPSBkYXRhc2V0LmdldFZhbHVlKGN1ckRhdGUsIDEpO1xyXG4gICAgICAgIGxldCBwcmV2VmFsdWUgPSBkYXRhc2V0LmdldFZhbHVlKGN1ckRhdGUsIC0xKTtcclxuICAgICAgICBsZXQgc3RyZWFrSW4gPSBmYWxzZTtcclxuICAgICAgICBpZiAoY3VyVmFsdWUgIT09IG51bGwgJiYgY3VyVmFsdWUgPiB0aHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgaWYgKHByZXZWYWx1ZSAhPT0gbnVsbCAmJiBwcmV2VmFsdWUgPiB0aHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgIHN0cmVha0luID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgc3RyZWFrT3V0ID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKGN1clZhbHVlICE9PSBudWxsICYmIGN1clZhbHVlID4gdGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgIGlmIChuZXh0VmFsdWUgIT09IG51bGwgJiYgbmV4dFZhbHVlID4gdGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgICAgICBzdHJlYWtPdXQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGlmIChsb2dUb0NvbnNvbGUpIHtcclxuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coYHByZVZhbHVlOiAke3ByZXZWYWx1ZX0sIGN1clZhbHVlOiAke2N1clZhbHVlfSwgbmV4dFZhbHVlOiAke25leHRWYWx1ZX1gKTtcclxuICAgICAgICAvLyAgICAgY29uc29sZS5sb2cobW9udGhJbmZvLnRocmVzaG9sZCk7XHJcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKGBzdHJlYWtJbjogJHtzdHJlYWtJbn0sIHN0cmVha091dDogJHtzdHJlYWtPdXR9YCk7XHJcbiAgICAgICAgLy8gICAgIGxvZ1RvQ29uc29sZSA9IGZhbHNlO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgZGF5c0luTW9udGhWaWV3LnB1c2goe1xyXG4gICAgICAgICAgICBkYXRlOiBoZWxwZXIuZGF0ZVRvU3RyKGN1ckRhdGUsIHJlbmRlckluZm8uZGF0ZUZvcm1hdCksXHJcbiAgICAgICAgICAgIHZhbHVlOiBjdXJWYWx1ZSxcclxuICAgICAgICAgICAgc2NhbGVkVmFsdWU6IHNjYWxlZFZhbHVlLFxyXG4gICAgICAgICAgICBkYXlJbk1vbnRoOiBjdXJEYXRlLmRhdGUoKSxcclxuICAgICAgICAgICAgaXNJblRoaXNNb250aDogaXNJblRoaXNNb250aCxcclxuICAgICAgICAgICAgaXNPdXRPZkRhdGFSYW5nZTogaXNPdXRPZkRhdGFSYW5nZSxcclxuICAgICAgICAgICAgcm93OiBpbmRSb3csXHJcbiAgICAgICAgICAgIGNvbDogaW5kQ29sLFxyXG4gICAgICAgICAgICBzaG93Q2lyY2xlOiBzaG93Q2lyY2xlLFxyXG4gICAgICAgICAgICBzdHJlYWtJbjogc3RyZWFrSW4sXHJcbiAgICAgICAgICAgIHN0cmVha091dDogc3RyZWFrT3V0LFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpbmQrKztcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKGRheXNJbk1vbnRoVmlldyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhkYXlzSW5Nb250aFZpZXcuZmlsdGVyKGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIGQuc3RyZWFrSW47XHJcbiAgICAvLyB9KSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhkYXlzSW5Nb250aFZpZXcuZmlsdGVyKGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIGQuc3RyZWFrT3V0O1xyXG4gICAgLy8gfSkpO1xyXG5cclxuICAgIC8vIHNjYWxlXHJcbiAgICBsZXQgdG90YWxEYXlCbG9ja1dpZHRoID0gKGluZENvbCArIDEpICogY2VsbFNpemU7XHJcbiAgICBsZXQgdG90YWxCbG9ja0hlaWdodCA9IChpbmRSb3cgKyAxKSAqIGNlbGxTaXplO1xyXG4gICAgbGV0IHNjYWxlID0gZDNcclxuICAgICAgICAuc2NhbGVMaW5lYXIoKVxyXG4gICAgICAgIC5kb21haW4oWy0wLjUsIDYuNV0pXHJcbiAgICAgICAgLnJhbmdlKFswLCB0b3RhbERheUJsb2NrV2lkdGhdKTtcclxuXHJcbiAgICAvLyBzdHJlYWsgbGluZXNcclxuICAgIGlmIChtb250aEluZm8uc2hvd1N0cmVhaykge1xyXG4gICAgICAgIGxldCBzdHJlYWtDb2xvciA9IFwiIzY5YjNhMlwiO1xyXG4gICAgICAgIGlmIChtb250aEluZm8uY2lyY2xlQ29sb3IpIHtcclxuICAgICAgICAgICAgc3RyZWFrQ29sb3IgPSBtb250aEluZm8uY2lyY2xlQ29sb3I7XHJcbiAgICAgICAgfSBlbHNlIGlmIChtb250aEluZm8uY29sb3IpIHtcclxuICAgICAgICAgICAgc3RyZWFrQ29sb3IgPSBtb250aEluZm8uY29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHN0cmVha0NvbG9yKTtcclxuXHJcbiAgICAgICAgY2hhcnRFbGVtZW50cy5kYXRhQXJlYVxyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwic3RyZWFrSW5cIilcclxuICAgICAgICAgICAgLmRhdGEoXHJcbiAgICAgICAgICAgICAgICBkYXlzSW5Nb250aFZpZXcuZmlsdGVyKGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuc3RyZWFrSW47XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXHJcbiAgICAgICAgICAgIC8vIC5hdHRyKFwiaWRcIiwgZnVuY3Rpb24oZDogRGF5SW5mbykge1xyXG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIFwiaW5cIiArIGQuZGF0ZS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpO1xyXG4gICAgICAgICAgICAvLyB9KVxyXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgICAgIGxldCB4ID0gc2NhbGUoZC5jb2wpIC0gZG90UmFkaXVzIC0gc3RyZWFrV2lkdGg7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geDtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NhbGUoZC5yb3cpIC0gc3RyZWFrSGVpZ2h0IC8gMi4wO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHN0cmVha1dpZHRoKVxyXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBzdHJlYWtIZWlnaHQpXHJcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgICAgIGlmIChkLnNob3dDaXJjbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW1vbnRoSW5mby5jaXJjbGVDb2xvckJ5VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmVha0NvbG9yO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZC5zY2FsZWRWYWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDMuaW50ZXJwb2xhdGVMYWIoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIndoaXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYWtDb2xvclxyXG4gICAgICAgICAgICAgICAgICAgICAgICApKGQuc2NhbGVkVmFsdWUgKiAwLjggKyAwLjIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJlYWtDb2xvcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJub25lXCI7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICBkLmlzT3V0T2ZEYXRhUmFuZ2UgfHxcclxuICAgICAgICAgICAgICAgICAgICAobW9udGhJbmZvLmRpbU5vdEluTW9udGggJiYgIWQuaXNJblRoaXNNb250aClcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwLjI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMS4wO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY2hhcnRFbGVtZW50cy5kYXRhQXJlYVxyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwic3RyZWFrT3V0XCIpXHJcbiAgICAgICAgICAgIC5kYXRhKFxyXG4gICAgICAgICAgICAgICAgZGF5c0luTW9udGhWaWV3LmZpbHRlcihmdW5jdGlvbiAoZDogRGF5SW5mbykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnN0cmVha091dDtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAgICAgLy8gLmF0dHIoXCJpZFwiLCBmdW5jdGlvbihkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gXCJvdXRcIiArIGQuZGF0ZS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpO1xyXG4gICAgICAgICAgICAvLyB9KVxyXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgICAgIGxldCB4ID0gc2NhbGUoZC5jb2wpICsgZG90UmFkaXVzO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbiAoZDogRGF5SW5mbykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjYWxlKGQucm93KSAtIHN0cmVha0hlaWdodCAvIDIuMDtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzdHJlYWtXaWR0aClcclxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgc3RyZWFrSGVpZ2h0KVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZC5zaG93Q2lyY2xlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtb250aEluZm8uY2lyY2xlQ29sb3JCeVZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJlYWtDb2xvcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQuc2NhbGVkVmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQzLmludGVycG9sYXRlTGFiKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ3aGl0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFrQ29sb3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgKShkLnNjYWxlZFZhbHVlICogMC44ICsgMC4yKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyZWFrQ29sb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwibm9uZVwiO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgZC5pc091dE9mRGF0YVJhbmdlIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKG1vbnRoSW5mby5kaW1Ob3RJbk1vbnRoICYmICFkLmlzSW5UaGlzTW9udGgpXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMC4yO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDEuMDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY2lyY2xlc1xyXG4gICAgbGV0IGNpcmNsZUNvbG9yID0gXCIjNjliM2EyXCI7XHJcbiAgICBpZiAobW9udGhJbmZvLmNpcmNsZUNvbG9yKSB7XHJcbiAgICAgICAgY2lyY2xlQ29sb3IgPSBtb250aEluZm8uY2lyY2xlQ29sb3I7XHJcbiAgICB9IGVsc2UgaWYgKG1vbnRoSW5mby5jb2xvcikge1xyXG4gICAgICAgIGNpcmNsZUNvbG9yID0gbW9udGhJbmZvLmNvbG9yO1xyXG4gICAgfVxyXG4gICAgaWYgKG1vbnRoSW5mby5zaG93Q2lyY2xlKSB7XHJcbiAgICAgICAgbGV0IGRvdHMgPSBjaGFydEVsZW1lbnRzLmRhdGFBcmVhXHJcbiAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJkb3RcIilcclxuICAgICAgICAgICAgLmRhdGEoZGF5c0luTW9udGhWaWV3KVxyXG4gICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAuYXBwZW5kKFwiY2lyY2xlXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiclwiLCBkb3RSYWRpdXMpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzY2FsZShkLmNvbCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzY2FsZShkLnJvdyk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgICAgIGlmIChkLnNob3dDaXJjbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW1vbnRoSW5mby5jaXJjbGVDb2xvckJ5VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNpcmNsZUNvbG9yO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZC5zY2FsZWRWYWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2NhbGVkQ29sb3IgPSBkMy5pbnRlcnBvbGF0ZUxhYihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwid2hpdGVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpcmNsZUNvbG9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkoZC5zY2FsZWRWYWx1ZSAqIDAuOCArIDAuMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGQuc2NhbGVkVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhzY2FsZWRDb2xvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzY2FsZWRDb2xvcjtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2lyY2xlQ29sb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwibm9uZVwiO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgZC5pc091dE9mRGF0YVJhbmdlIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKG1vbnRoSW5mby5kaW1Ob3RJbk1vbnRoICYmICFkLmlzSW5UaGlzTW9udGgpXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMC4yO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDEuMDtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0eWxlKFwiY3Vyc29yXCIsIFwiZGVmYXVsdFwiKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyB0b2RheSByaW5nc1xyXG4gICAgbGV0IHRvZGF5ID0gaGVscGVyLmRhdGVUb1N0cih3aW5kb3cubW9tZW50KCksIHJlbmRlckluZm8uZGF0ZUZvcm1hdCk7XHJcbiAgICBpZiAobW9udGhJbmZvLnNob3dUb2RheVJpbmcpIHtcclxuICAgICAgICBsZXQgdG9kYXlSaW5ncyA9IGNoYXJ0RWxlbWVudHMuZGF0YUFyZWFcclxuICAgICAgICAgICAgLnNlbGVjdEFsbChcInRvZGF5UmluZ1wiKVxyXG4gICAgICAgICAgICAuZGF0YShcclxuICAgICAgICAgICAgICAgIGRheXNJbk1vbnRoVmlldy5maWx0ZXIoZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5kYXRlID09PSB0b2RheTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZChcImNpcmNsZVwiKVxyXG4gICAgICAgICAgICAuYXR0cihcInJcIiwgZG90UmFkaXVzICogMC45KVxyXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NhbGUoZC5jb2wpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NhbGUoZC5yb3cpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1tb250aC10b2RheS1jaXJjbGVcIikgLy8gc3Ryb2tlIG5vdCB3b3Jrcz8/XHJcbiAgICAgICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcImRlZmF1bHRcIik7XHJcblxyXG4gICAgICAgIGlmIChtb250aEluZm8udG9kYXlSaW5nQ29sb3IgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgdG9kYXlSaW5ncy5zdHlsZShcInN0cm9rZVwiLCBtb250aEluZm8udG9kYXlSaW5nQ29sb3IpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRvZGF5UmluZ3Muc3R5bGUoXCJzdHJva2VcIiwgXCJ3aGl0ZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc2VsZWN0ZWQgcmluZ3NcclxuICAgIGlmIChtb250aEluZm8uc2hvd1NlbGVjdGVkUmluZykge1xyXG4gICAgICAgIGxldCBzZWxlY3RlZFJpbmdzID0gY2hhcnRFbGVtZW50cy5kYXRhQXJlYVxyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwic2VsZWN0ZWRSaW5nXCIpXHJcbiAgICAgICAgICAgIC5kYXRhKGRheXNJbk1vbnRoVmlldylcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZChcImNpcmNsZVwiKVxyXG4gICAgICAgICAgICAuYXR0cihcInJcIiwgZG90UmFkaXVzKVxyXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NhbGUoZC5jb2wpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NhbGUoZC5yb3cpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcImlkXCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJ0cmFja2VyLXNlbGVjdGVkLWNpcmNsZS1cIiArIGQuZGF0ZTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItbW9udGgtc2VsZWN0ZWQtY2lyY2xlXCIpIC8vIHN0cm9rZSBub3Qgd29ya3M/P1xyXG4gICAgICAgICAgICAuc3R5bGUoXCJjdXJzb3JcIiwgXCJkZWZhdWx0XCIpXHJcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcIm5vbmVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbGFiZWxzXHJcbiAgICBsZXQgZGF5TGFiYWxzID0gY2hhcnRFbGVtZW50cy5kYXRhQXJlYVxyXG4gICAgICAgIC5zZWxlY3RBbGwoXCJkYXlMYWJlbFwiKVxyXG4gICAgICAgIC5kYXRhKGRheXNJbk1vbnRoVmlldylcclxuICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgICAgLnRleHQoZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGQuZGF5SW5Nb250aC50b1N0cmluZygpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgbGV0IHN0clRyYW5zbGF0ZSA9XHJcbiAgICAgICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArXHJcbiAgICAgICAgICAgICAgICBzY2FsZShkLmNvbCkgK1xyXG4gICAgICAgICAgICAgICAgXCIsXCIgK1xyXG4gICAgICAgICAgICAgICAgKHNjYWxlKGQucm93KSArIG1heERheVRleHRTaXplLmhlaWdodCAvIDQpICtcclxuICAgICAgICAgICAgICAgIFwiKVwiO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHN0clRyYW5zbGF0ZTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdHlsZShcImZpbGwtb3BhY2l0eVwiLCBmdW5jdGlvbiAoZDogRGF5SW5mbykge1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICBkLmlzT3V0T2ZEYXRhUmFuZ2UgfHxcclxuICAgICAgICAgICAgICAgIChtb250aEluZm8uZGltTm90SW5Nb250aCAmJiAhZC5pc0luVGhpc01vbnRoKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwLjI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIDEuMDtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5hdHRyKFwiZGF0ZVwiLCBmdW5jdGlvbiAoZDogRGF5SW5mbykge1xyXG4gICAgICAgICAgICByZXR1cm4gZC5kYXRlO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmF0dHIoXCJ2YWx1ZVwiLCBmdW5jdGlvbiAoZDogRGF5SW5mbykge1xyXG4gICAgICAgICAgICByZXR1cm4gZC52YWx1ZTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5hdHRyKFwidmFsdWVUeXBlXCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBWYWx1ZVR5cGVbZGF0YXNldC52YWx1ZVR5cGVdO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItYXhpcy1sYWJlbFwiKVxyXG4gICAgICAgIC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChldmVudDogYW55KSB7XHJcbiAgICAgICAgICAgIC8vIGNsZWFyIGNpcmNsZXNcclxuICAgICAgICAgICAgY2xlYXJTZWxlY3Rpb24oY2hhcnRFbGVtZW50cywgbW9udGhJbmZvKTtcclxuICAgICAgICAgICAgLy8gc2hvdyBuZXcgc2VsZWN0ZWQgY2lyY2xlXHJcbiAgICAgICAgICAgIGxldCBkYXRlID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoXCJkYXRlXCIpO1xyXG4gICAgICAgICAgICBtb250aEluZm8uc2VsZWN0ZWREYXRlID0gZGF0ZTtcclxuICAgICAgICAgICAgaWYgKG1vbnRoSW5mby5zaG93U2VsZWN0ZWRSaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBjaGFydEVsZW1lbnRzLmRhdGFBcmVhXHJcbiAgICAgICAgICAgICAgICAgICAgLnNlbGVjdChcIiN0cmFja2VyLXNlbGVjdGVkLWNpcmNsZS1cIiArIGRhdGUpXHJcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIG1vbnRoSW5mby5zZWxlY3RlZFJpbmdDb2xvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gc2hvdyB2YWx1ZSBvbiBtb25pdG9yXHJcbiAgICAgICAgICAgIGlmIChtb250aEluZm8uc2hvd1NlbGVjdGVkVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzdHJWYWx1ZSA9IGQzLnNlbGVjdCh0aGlzKS5hdHRyKFwidmFsdWVcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWVUeXBlID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoXCJ2YWx1ZVR5cGVcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWVUZXh0ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZVR5cGUgPT09IFwiVGltZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRheVN0YXJ0ID0gd2luZG93Lm1vbWVudChcIjAwOjAwXCIsIFwiSEg6bW1cIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRpY2tUaW1lID0gZGF5U3RhcnQuYWRkKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KHN0clZhbHVlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWNvbmRzXCJcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9IHRpY2tUaW1lLmZvcm1hdChcIkhIOm1tXCIpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSBzdHJWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNoYXJ0RWxlbWVudHMubW9uaXRvci50ZXh0KHZhbHVlVGV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcInBvaW50ZXJcIik7XHJcblxyXG4gICAgLy8gRXhwYW5kIGFyZWFzXHJcbiAgICBsZXQgc3ZnV2lkdGggPSBwYXJzZUZsb2F0KGNoYXJ0RWxlbWVudHMuc3ZnLmF0dHIoXCJ3aWR0aFwiKSk7XHJcbiAgICBsZXQgc3ZnSGVpZ2h0ID0gcGFyc2VGbG9hdChjaGFydEVsZW1lbnRzLnN2Zy5hdHRyKFwiaGVpZ2h0XCIpKTtcclxuICAgIGxldCBncmFwaEFyZWFXaWR0aCA9IHBhcnNlRmxvYXQoY2hhcnRFbGVtZW50cy5ncmFwaEFyZWEuYXR0cihcIndpZHRoXCIpKTtcclxuICAgIGxldCBncmFwaEFyZWFIZWlnaHQgPSBwYXJzZUZsb2F0KGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhLmF0dHIoXCJoZWlnaHRcIikpO1xyXG4gICAgbGV0IHRvdGFsSGVpZ2h0ID1cclxuICAgICAgICA3ICogY2VsbFNpemUgKyBwYXJzZUZsb2F0KGNoYXJ0RWxlbWVudHMuaGVhZGVyLmF0dHIoXCJoZWlnaHRcIikpO1xyXG4gICAgbGV0IHRvdGFsV2lkdGggPSA3ICogY2VsbFNpemU7XHJcbiAgICBpZiAodG90YWxIZWlnaHQgPiBzdmdIZWlnaHQpIHtcclxuICAgICAgICBoZWxwZXIuZXhwYW5kQXJlYShjaGFydEVsZW1lbnRzLnN2ZywgMCwgdG90YWxIZWlnaHQgLSBzdmdIZWlnaHQpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRvdGFsV2lkdGggPiBzdmdXaWR0aCkge1xyXG4gICAgICAgIGhlbHBlci5leHBhbmRBcmVhKGNoYXJ0RWxlbWVudHMuc3ZnLCB0b3RhbFdpZHRoIC0gc3ZnV2lkdGgsIDApO1xyXG4gICAgfVxyXG4gICAgaWYgKHRvdGFsSGVpZ2h0ID4gZ3JhcGhBcmVhSGVpZ2h0KSB7XHJcbiAgICAgICAgaGVscGVyLmV4cGFuZEFyZWEoXHJcbiAgICAgICAgICAgIGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhLFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICB0b3RhbEhlaWdodCAtIGdyYXBoQXJlYUhlaWdodFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbiAgICBpZiAodG90YWxXaWR0aCA+IGdyYXBoQXJlYVdpZHRoKSB7XHJcbiAgICAgICAgaGVscGVyLmV4cGFuZEFyZWEoY2hhcnRFbGVtZW50cy5zdmcsIHRvdGFsV2lkdGggLSBncmFwaEFyZWFXaWR0aCwgMCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlZnJlc2goXHJcbiAgICBjYW52YXM6IEhUTUxFbGVtZW50LFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBtb250aEluZm86IE1vbnRoSW5mbyxcclxuICAgIGN1ck1vbnRoRGF0ZTogTW9tZW50XHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZWZyZXNoXCIpO1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mbyk7XHJcbiAgICBpZiAoIXJlbmRlckluZm8gfHwgIXJlbmRlck1vbnRoKSByZXR1cm47XHJcblxyXG4gICAgY2hhcnRFbGVtZW50cyA9IGNyZWF0ZUFyZWFzKGNoYXJ0RWxlbWVudHMsIGNhbnZhcywgcmVuZGVySW5mbywgbW9udGhJbmZvKTtcclxuXHJcbiAgICAvLyByZW5kZXJcclxuICAgIHJlbmRlck1vbnRoSGVhZGVyKFxyXG4gICAgICAgIGNhbnZhcyxcclxuICAgICAgICBjaGFydEVsZW1lbnRzLFxyXG4gICAgICAgIHJlbmRlckluZm8sXHJcbiAgICAgICAgbW9udGhJbmZvLFxyXG4gICAgICAgIGN1ck1vbnRoRGF0ZVxyXG4gICAgKTtcclxuXHJcbiAgICByZW5kZXJNb250aERheXMoY2FudmFzLCBjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvLCBtb250aEluZm8sIGN1ck1vbnRoRGF0ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJNb250aChcclxuICAgIGNhbnZhczogSFRNTEVsZW1lbnQsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgbW9udGhJbmZvOiBNb250aEluZm9cclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInJlbmRlck1vbnRoXCIpO1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mbyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhtb250aEluZm8pO1xyXG4gICAgaWYgKCFyZW5kZXJJbmZvIHx8ICFyZW5kZXJNb250aCkgcmV0dXJuO1xyXG5cclxuICAgIC8vIGRhdGFzZXRcclxuICAgIGxldCBkYXRhc2V0SWRzID0gbW9udGhJbmZvLmRhdGFzZXQ7XHJcbiAgICBsZXQgbnVtQXZhaWxhYmxlRGF0YXNldCA9IDA7XHJcbiAgICBmb3IgKGxldCBkYXRhc2V0IG9mIHJlbmRlckluZm8uZGF0YXNldHMpIHtcclxuICAgICAgICBpZiAoIWRhdGFzZXQuZ2V0UXVlcnkoKS51c2VkQXNYRGF0YXNldCkge1xyXG4gICAgICAgICAgICBudW1BdmFpbGFibGVEYXRhc2V0Kys7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKG51bUF2YWlsYWJsZURhdGFzZXQgPT09IDApIHtcclxuICAgICAgICByZXR1cm4gXCJObyBhdmFpbGFibGUgZGF0YXNldCBmb3VuZFwiO1xyXG4gICAgfVxyXG4gICAgdG9OZXh0RGF0YXNldChyZW5kZXJJbmZvLCBtb250aEluZm8pO1xyXG4gICAgaWYgKG1vbnRoSW5mby5zZWxlY3RlZERhdGFzZXQgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gXCJObyBhdmFpbGFibGUgZGF0YXNldCBmb3VuZFwiO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzID0ge307XHJcbiAgICBjaGFydEVsZW1lbnRzID0gY3JlYXRlQXJlYXMoY2hhcnRFbGVtZW50cywgY2FudmFzLCByZW5kZXJJbmZvLCBtb250aEluZm8pO1xyXG5cclxuICAgIGxldCBtb250aERhdGU6IE1vbWVudCA9IG51bGw7XHJcbiAgICBpZiAobW9udGhJbmZvLmluaXRNb250aCkge1xyXG4gICAgICAgIGxldCBpbml0TW9udGggPSB3aW5kb3cubW9tZW50KG1vbnRoSW5mby5pbml0TW9udGgsIFwiWVlZWS1NTVwiLCB0cnVlKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhpbml0TW9udGgpO1xyXG4gICAgICAgIGlmIChpbml0TW9udGguaXNWYWxpZCgpKSB7XHJcbiAgICAgICAgICAgIG1vbnRoRGF0ZSA9IGluaXRNb250aDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJJbnZhbGlkIGluaXRNb250aFwiO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGV0IHRvZGF5ID0gd2luZG93Lm1vbWVudCgpO1xyXG4gICAgICAgIG1vbnRoRGF0ZSA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0ZXMoKS5sYXN0KCk7XHJcbiAgICB9XHJcbiAgICBpZiAoIW1vbnRoRGF0ZSkgcmV0dXJuO1xyXG5cclxuICAgIHJlbmRlck1vbnRoSGVhZGVyKGNhbnZhcywgY2hhcnRFbGVtZW50cywgcmVuZGVySW5mbywgbW9udGhJbmZvLCBtb250aERhdGUpO1xyXG5cclxuICAgIHJlbmRlck1vbnRoRGF5cyhjYW52YXMsIGNoYXJ0RWxlbWVudHMsIHJlbmRlckluZm8sIG1vbnRoSW5mbywgbW9udGhEYXRlKTtcclxufVxyXG4iLCJpbXBvcnQgeyBNb21lbnQgfSBmcm9tIFwibW9tZW50XCI7XHJcbmltcG9ydCB7XHJcbiAgICBEYXRhc2V0cyxcclxuICAgIERhdGFQb2ludCxcclxuICAgIFJlbmRlckluZm8sXHJcbiAgICBNb250aEluZm8sXHJcbiAgICBIZWF0bWFwSW5mbyxcclxuICAgIERhdGFzZXQsXHJcbiAgICBTaXplLFxyXG4gICAgVHJhbnNmb3JtLFxyXG4gICAgQ2hhcnRFbGVtZW50cyxcclxuICAgIE91dHB1dFR5cGUsXHJcbiAgICBWYWx1ZVR5cGUsXHJcbn0gZnJvbSBcIi4vZGF0YVwiO1xyXG5pbXBvcnQgKiBhcyBoZWxwZXIgZnJvbSBcIi4vaGVscGVyXCI7XHJcbmltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiO1xyXG5cclxuaW50ZXJmYWNlIERheUluZm8ge1xyXG4gICAgZGF0ZTogc3RyaW5nO1xyXG4gICAgdmFsdWU6IG51bWJlcjtcclxuICAgIHNjYWxlZFZhbHVlOiBudW1iZXI7XHJcbiAgICByb3c6IG51bWJlcjtcclxuICAgIGNvbDogbnVtYmVyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVBcmVhcyhcclxuICAgIGNoYXJ0RWxlbWVudHM6IENoYXJ0RWxlbWVudHMsXHJcbiAgICBjYW52YXM6IEhUTUxFbGVtZW50LFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGhlYXRtYXBJbmZvOiBIZWF0bWFwSW5mb1xyXG4pOiBDaGFydEVsZW1lbnRzIHtcclxuICAgIC8vIGNsZWFuIGFyZWFzXHJcbiAgICBkMy5zZWxlY3QoY2FudmFzKS5zZWxlY3QoXCIjc3ZnXCIpLnJlbW92ZSgpO1xyXG4gICAgdmFyIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY2hhcnRFbGVtZW50cyk7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgLy8gZDMuc2VsZWN0KGNoYXJ0RWxlbWVudHNbcHJvcHNbaV1dKS5yZW1vdmUoKTtcclxuICAgICAgICBkZWxldGUgY2hhcnRFbGVtZW50c1twcm9wc1tpXV07XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhjaGFydEVsZW1lbnRzKTtcclxuXHJcbiAgICAvLyB3aG9sZSBhcmVhIGZvciBwbG90dGluZywgaW5jbHVkZXMgbWFyZ2luc1xyXG4gICAgbGV0IHN2ZyA9IGQzXHJcbiAgICAgICAgLnNlbGVjdChjYW52YXMpXHJcbiAgICAgICAgLmFwcGVuZChcInN2Z1wiKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJzdmdcIilcclxuICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgXCJ3aWR0aFwiLFxyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLm1hcmdpbi5sZWZ0ICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLnJpZ2h0XHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcImhlaWdodFwiLFxyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4udG9wICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLmJvdHRvbVxyXG4gICAgICAgICk7XHJcbiAgICBjaGFydEVsZW1lbnRzW1wic3ZnXCJdID0gc3ZnO1xyXG5cclxuICAgIC8vIGdyYXBoQXJlYSwgaW5jbHVkZXMgY2hhcnRBcmVhLCB0aXRsZSwgbGVnZW5kXHJcbiAgICBsZXQgZ3JhcGhBcmVhID0gc3ZnXHJcbiAgICAgICAgLmFwcGVuZChcImdcIilcclxuICAgICAgICAuYXR0cihcImlkXCIsIFwiZ3JhcGhBcmVhXCIpXHJcbiAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgIFwidHJhbnNmb3JtXCIsXHJcbiAgICAgICAgICAgIFwidHJhbnNsYXRlKFwiICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLmxlZnQgK1xyXG4gICAgICAgICAgICAgICAgXCIsXCIgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4udG9wICtcclxuICAgICAgICAgICAgICAgIFwiKVwiXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggKyByZW5kZXJJbmZvLm1hcmdpbi5yaWdodClcclxuICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgXCJoZWlnaHRcIixcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0ICsgcmVuZGVySW5mby5tYXJnaW4uYm90dG9tXHJcbiAgICAgICAgKTtcclxuICAgIGNoYXJ0RWxlbWVudHNbXCJncmFwaEFyZWFcIl0gPSBncmFwaEFyZWE7XHJcblxyXG4gICAgLy8gZGF0YUFyZWEsIHVuZGVyIGdyYXBoQXJlYSwgaW5jbHVkZXMgcG9pbnRzLCBsaW5lcywgeEF4aXMsIHlBeGlzXHJcbiAgICBsZXQgZGF0YUFyZWEgPSBncmFwaEFyZWFcclxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJkYXRhQXJlYVwiKVxyXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGgpXHJcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0KTtcclxuICAgIGNoYXJ0RWxlbWVudHNbXCJkYXRhQXJlYVwiXSA9IGRhdGFBcmVhO1xyXG5cclxuICAgIHJldHVybiBjaGFydEVsZW1lbnRzO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJIZWF0bWFwSGVhZGVyKFxyXG4gICAgY2FudmFzOiBIVE1MRWxlbWVudCxcclxuICAgIGNoYXJ0RWxlbWVudHM6IENoYXJ0RWxlbWVudHMsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgaGVhdG1hcEluZm86IEhlYXRtYXBJbmZvLFxyXG4gICAgZGF0YXNldDogRGF0YXNldFxyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVyTW9udGhIZWFkZXJcIilcclxuXHJcbiAgICBpZiAoIXJlbmRlckluZm8gfHwgIWhlYXRtYXBJbmZvKSByZXR1cm47XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJIZWF0bWFwRGF5cyhcclxuICAgIGNhbnZhczogSFRNTEVsZW1lbnQsXHJcbiAgICBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzLFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGhlYXRtYXBJbmZvOiBIZWF0bWFwSW5mbyxcclxuICAgIGRhdGFzZXQ6IERhdGFzZXQsXHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJIZWF0bWFwRGF5c1wiKTtcclxuXHJcbiAgICBpZiAoIXJlbmRlckluZm8gfHwgIWhlYXRtYXBJbmZvKSByZXR1cm47XHJcblxyXG4gICAgbGV0IGNlbGxTaXplID0gMjA7XHJcbiAgICBsZXQgZG90UmFkaXVzID0gY2VsbFNpemUgLyAyLjAgKiAwLjY7XHJcblxyXG4gICAgLy8gR2V0IG1pbiBhbmQgbWF4LCBudWxsIHZhbHVlcyB3aWxsIGJlIHRyZWF0ZWQgYXMgemVybyBoZXJlXHJcbiAgICBsZXQgeU1pbiA9IGQzLm1pbihkYXRhc2V0LmdldFZhbHVlcygpKTtcclxuICAgIGlmIChoZWF0bWFwSW5mby55TWluICE9PSBudWxsKSB7XHJcbiAgICAgICAgeU1pbiA9IGhlYXRtYXBJbmZvLnlNaW47XHJcbiAgICB9XHJcbiAgICBsZXQgeU1heCA9IGQzLm1heChkYXRhc2V0LmdldFZhbHVlcygpKTtcclxuICAgIGlmIChoZWF0bWFwSW5mby55TWF4ICE9PSBudWxsKSB7XHJcbiAgICAgICAgeU1heCA9IGhlYXRtYXBJbmZvLnlNYXg7XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhgeU1pbjoke3lNaW59LCB5TWF4OiR7eU1heH1gKTtcclxuXHJcbiAgICAvLyBQcmVwYXJlIGRhdGEgZm9yIGdyYXBoXHJcbiAgICBsZXQgZGF5c0luSGVhdG1hcFZpZXc6IEFycmF5PERheUluZm8+ID0gW107XHJcbiAgICBjb25zdCBkYXRhU3RhcnREYXRlID0gZGF0YXNldC5nZXRTdGFydERhdGUoKS5jbG9uZSgpO1xyXG4gICAgbGV0IHN0YXJ0RGF0ZSA9IGRhdGFTdGFydERhdGVcclxuICAgICAgICAuY2xvbmUoKVxyXG4gICAgICAgIC5zdWJ0cmFjdChkYXRhU3RhcnREYXRlLmRheSgpLCBcImRheXNcIik7XHJcbiAgICBpZiAoaGVhdG1hcEluZm8uc3RhcnRXZWVrT24udG9Mb3dlckNhc2UoKSA9PT0gXCJtb25cIikge1xyXG4gICAgICAgIHN0YXJ0RGF0ZSA9IHN0YXJ0RGF0ZS5hZGQoMSwgXCJkYXlzXCIpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZGF0YUVuZERhdGUgPSBkYXRhc2V0LmdldEVuZERhdGUoKS5jbG9uZSgpO1xyXG4gICAgbGV0IGVuZERhdGUgPSBkYXRhRW5kRGF0ZS5jbG9uZSgpLmFkZCg3IC0gZGF0YUVuZERhdGUuZGF5KCkgLSAxLCBcImRheXNcIik7XHJcbiAgICBpZiAoaGVhdG1hcEluZm8uc3RhcnRXZWVrT24udG9Mb3dlckNhc2UoKSA9PT0gXCJtb25cIikge1xyXG4gICAgICAgIGVuZERhdGUgPSBlbmREYXRlLmFkZCgxLCBcImRheXNcIik7XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhzdGFydERhdGUuZm9ybWF0KFwiWVlZWS1NTS1ERFwiKSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhlbmREYXRlLmZvcm1hdChcIllZWVktTU0tRERcIikpO1xyXG5cclxuICAgIGxldCBpbmRDb2wgPSAwO1xyXG4gICAgbGV0IGluZFJvdyA9IDA7XHJcbiAgICBsZXQgaW5kID0gMDtcclxuICAgIGZvciAoXHJcbiAgICAgICAgbGV0IGN1ckRhdGUgPSBzdGFydERhdGUuY2xvbmUoKTtcclxuICAgICAgICBjdXJEYXRlIDw9IGVuZERhdGU7XHJcbiAgICAgICAgY3VyRGF0ZS5hZGQoMSwgXCJkYXlzXCIpXHJcbiAgICApIHtcclxuICAgICAgICBpZiAoaGVhdG1hcEluZm8uc3RhcnRXZWVrT24udG9Mb3dlckNhc2UoKSA9PT0gXCJtb25cIikge1xyXG4gICAgICAgICAgICBpbmRDb2wgPSBjdXJEYXRlLmRheSgpIC0gMTtcclxuICAgICAgICAgICAgaWYgKGluZENvbCA8IDApIHtcclxuICAgICAgICAgICAgICAgIGluZENvbCA9IDY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5kUm93ID0gTWF0aC5mbG9vcihpbmQgLyA3KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpbmRDb2wgPSBjdXJEYXRlLmRheSgpOyAvLyAwfjZcclxuICAgICAgICAgICAgaW5kUm93ID0gTWF0aC5mbG9vcihpbmQgLyA3KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGN1clZhbHVlIGFuZCBzY2FsZWRWYWx1ZVxyXG4gICAgICAgIGxldCBjdXJWYWx1ZSA9IGRhdGFzZXQuZ2V0VmFsdWUoY3VyRGF0ZSk7XHJcbiAgICAgICAgbGV0IHNjYWxlZFZhbHVlID0gMDtcclxuICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKHlNYXgpICYmIE51bWJlci5pc051bWJlcih5TWluKSAmJiB5TWF4IC0geU1pbiA+IDApIHtcclxuICAgICAgICAgICAgc2NhbGVkVmFsdWUgPSAoY3VyVmFsdWUgLSB5TWluKSAvICh5TWF4IC0geU1pbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkYXlzSW5IZWF0bWFwVmlldy5wdXNoKHtcclxuICAgICAgICAgICAgZGF0ZTogaGVscGVyLmRhdGVUb1N0cihjdXJEYXRlLCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpLFxyXG4gICAgICAgICAgICB2YWx1ZTogY3VyVmFsdWUsXHJcbiAgICAgICAgICAgIHNjYWxlZFZhbHVlOiBzY2FsZWRWYWx1ZSxcclxuICAgICAgICAgICAgcm93OiBpbmRSb3csXHJcbiAgICAgICAgICAgIGNvbDogaW5kQ29sLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpbmQrKztcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKGRheXNJbkhlYXRtYXBWaWV3KTtcclxuXHJcbiAgICAvLyBzY2FsZVxyXG4gICAgbGV0IHRvdGFsRGF5QmxvY2tXaWR0aCA9IChpbmRDb2wgKyAxKSAqIGNlbGxTaXplO1xyXG4gICAgbGV0IHRvdGFsQmxvY2tIZWlnaHQgPSAoaW5kUm93ICsgMSkgKiBjZWxsU2l6ZTtcclxuICAgIGxldCBzY2FsZSA9IGQzXHJcbiAgICAgICAgLnNjYWxlTGluZWFyKClcclxuICAgICAgICAuZG9tYWluKFstMC41LCA2LjVdKVxyXG4gICAgICAgIC5yYW5nZShbMCwgdG90YWxEYXlCbG9ja1dpZHRoXSk7XHJcblxyXG4gICAgLy8gY2lyY2xlc1xyXG4gICAgbGV0IGhlYXRtYXBDb2xvciA9IFwiIzY5YjNhMlwiO1xyXG4gICAgaWYgKGhlYXRtYXBJbmZvLmNvbG9yKSB7XHJcbiAgICAgICAgaGVhdG1hcENvbG9yID0gaGVhdG1hcEluZm8uY29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZGF5cywgc2hvd24gYXMgZG90cyBvciBzcXVhcmVzXHJcbiAgICBsZXQgZGF5cyA9IGNoYXJ0RWxlbWVudHMuZGF0YUFyZWFcclxuICAgICAgICAuc2VsZWN0QWxsKFwiZG90XCIpXHJcbiAgICAgICAgLmRhdGEoZGF5c0luSGVhdG1hcFZpZXcpXHJcbiAgICAgICAgLmVudGVyKClcclxuICAgICAgICAuYXBwZW5kKFwiY2lyY2xlXCIpXHJcbiAgICAgICAgLmF0dHIoXCJyXCIsIGRvdFJhZGl1cylcclxuICAgICAgICAuYXR0cihcImN4XCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzY2FsZShkLmNvbCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzY2FsZShkLnJvdyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkMy5pbnRlcnBvbGF0ZUxhYihcclxuICAgICAgICAgICAgICAgICAgICBcIndoaXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaGVhdG1hcENvbG9yXHJcbiAgICAgICAgICAgICAgICApKGQuc2NhbGVkVmFsdWUpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnN0eWxlKFwiY3Vyc29yXCIsIFwiZGVmYXVsdFwiKTtcclxuXHJcbiAgICAvLyBFeHBhbmQgYXJlYXNcclxuICAgIGxldCBzdmdXaWR0aCA9IHBhcnNlRmxvYXQoY2hhcnRFbGVtZW50cy5zdmcuYXR0cihcIndpZHRoXCIpKTtcclxuICAgIGxldCBzdmdIZWlnaHQgPSBwYXJzZUZsb2F0KGNoYXJ0RWxlbWVudHMuc3ZnLmF0dHIoXCJoZWlnaHRcIikpO1xyXG4gICAgbGV0IGdyYXBoQXJlYVdpZHRoID0gcGFyc2VGbG9hdChjaGFydEVsZW1lbnRzLmdyYXBoQXJlYS5hdHRyKFwid2lkdGhcIikpO1xyXG4gICAgbGV0IGdyYXBoQXJlYUhlaWdodCA9IHBhcnNlRmxvYXQoY2hhcnRFbGVtZW50cy5ncmFwaEFyZWEuYXR0cihcImhlaWdodFwiKSk7XHJcbiAgICBsZXQgdG90YWxIZWlnaHQgPVxyXG4gICAgICAgIChpbmRSb3cgKyAyKSAqIGNlbGxTaXplOy8vICsgcGFyc2VGbG9hdChjaGFydEVsZW1lbnRzLmhlYWRlci5hdHRyKFwiaGVpZ2h0XCIpKTtcclxuICAgIGxldCB0b3RhbFdpZHRoID0gKGluZENvbCArIDEpICogY2VsbFNpemU7XHJcbiAgICBpZiAodG90YWxIZWlnaHQgPiBzdmdIZWlnaHQpIHtcclxuICAgICAgICBoZWxwZXIuZXhwYW5kQXJlYShjaGFydEVsZW1lbnRzLnN2ZywgMCwgdG90YWxIZWlnaHQgLSBzdmdIZWlnaHQpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRvdGFsV2lkdGggPiBzdmdXaWR0aCkge1xyXG4gICAgICAgIGhlbHBlci5leHBhbmRBcmVhKGNoYXJ0RWxlbWVudHMuc3ZnLCB0b3RhbFdpZHRoIC0gc3ZnV2lkdGgsIDApO1xyXG4gICAgfVxyXG4gICAgaWYgKHRvdGFsSGVpZ2h0ID4gZ3JhcGhBcmVhSGVpZ2h0KSB7XHJcbiAgICAgICAgaGVscGVyLmV4cGFuZEFyZWEoXHJcbiAgICAgICAgICAgIGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhLFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICB0b3RhbEhlaWdodCAtIGdyYXBoQXJlYUhlaWdodFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbiAgICBpZiAodG90YWxXaWR0aCA+IGdyYXBoQXJlYVdpZHRoKSB7XHJcbiAgICAgICAgaGVscGVyLmV4cGFuZEFyZWEoY2hhcnRFbGVtZW50cy5zdmcsIHRvdGFsV2lkdGggLSBncmFwaEFyZWFXaWR0aCwgMCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJIZWF0bWFwKFxyXG4gICAgY2FudmFzOiBIVE1MRWxlbWVudCxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBoZWF0bWFwSW5mbzogSGVhdG1hcEluZm9cclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInJlbmRlckhlYXRtYXBcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvKTtcclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhcmVuZGVySGVhdG1hcCkgcmV0dXJuO1xyXG5cclxuICAgIHJldHVybiBcIlVuZGVyIGNvbnN0cnVjdGlvblwiO1xyXG5cclxuICAgIGxldCBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzID0ge307XHJcbiAgICBjaGFydEVsZW1lbnRzID0gY3JlYXRlQXJlYXMoY2hhcnRFbGVtZW50cywgY2FudmFzLCByZW5kZXJJbmZvLCBoZWF0bWFwSW5mbyk7XHJcblxyXG4gICAgbGV0IHRvZGF5ID0gd2luZG93Lm1vbWVudCgpO1xyXG4gICAgbGV0IGxhc3REYXRhTW9udGhEYXRlID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXREYXRlcygpLmxhc3QoKTtcclxuXHJcbiAgICBsZXQgZGF0YXNldElkID0gcGFyc2VGbG9hdChoZWF0bWFwSW5mby5kYXRhc2V0KTtcclxuICAgIGxldCBkYXRhc2V0ID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXREYXRhc2V0QnlJZChkYXRhc2V0SWQpO1xyXG5cclxuICAgIHJlbmRlckhlYXRtYXBIZWFkZXIoXHJcbiAgICAgICAgY2FudmFzLFxyXG4gICAgICAgIGNoYXJ0RWxlbWVudHMsXHJcbiAgICAgICAgcmVuZGVySW5mbyxcclxuICAgICAgICBoZWF0bWFwSW5mbyxcclxuICAgICAgICBkYXRhc2V0XHJcbiAgICApO1xyXG5cclxuICAgIHJlbmRlckhlYXRtYXBEYXlzKFxyXG4gICAgICAgIGNhbnZhcyxcclxuICAgICAgICBjaGFydEVsZW1lbnRzLFxyXG4gICAgICAgIHJlbmRlckluZm8sXHJcbiAgICAgICAgaGVhdG1hcEluZm8sXHJcbiAgICAgICAgZGF0YXNldFxyXG4gICAgKTtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gICAgRGF0YXNldHMsXHJcbiAgICBEYXRhUG9pbnQsXHJcbiAgICBSZW5kZXJJbmZvLFxyXG4gICAgQnVsbGV0SW5mbyxcclxuICAgIERhdGFzZXQsXHJcbiAgICBTaXplLFxyXG4gICAgVHJhbnNmb3JtLFxyXG4gICAgQ2hhcnRFbGVtZW50cyxcclxuICAgIE91dHB1dFR5cGUsXHJcbiAgICBWYWx1ZVR5cGUsXHJcbn0gZnJvbSBcIi4vZGF0YVwiO1xyXG5pbXBvcnQgKiBhcyBoZWxwZXIgZnJvbSBcIi4vaGVscGVyXCI7XHJcbmltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiO1xyXG5pbXBvcnQgKiBhcyBleHByIGZyb20gXCIuL2V4cHJcIjtcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUFyZWFzKFxyXG4gICAgY2FudmFzOiBIVE1MRWxlbWVudCxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBidWxsZXRJbmZvOiBCdWxsZXRJbmZvXHJcbik6IENoYXJ0RWxlbWVudHMge1xyXG4gICAgbGV0IGNoYXJ0RWxlbWVudHM6IENoYXJ0RWxlbWVudHMgPSB7fTtcclxuICAgIC8vIHdob2xlIGFyZWEgZm9yIHBsb3R0aW5nLCBpbmNsdWRlcyBtYXJnaW5zXHJcblxyXG4gICAgaWYgKCFyZW5kZXJJbmZvIHx8ICFidWxsZXRJbmZvKSByZXR1cm47XHJcblxyXG4gICAgbGV0IHN2ZyA9IGQzXHJcbiAgICAgICAgLnNlbGVjdChjYW52YXMpXHJcbiAgICAgICAgLmFwcGVuZChcInN2Z1wiKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJzdmdcIilcclxuICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgXCJ3aWR0aFwiLFxyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLm1hcmdpbi5sZWZ0ICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLnJpZ2h0XHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcImhlaWdodFwiLFxyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4udG9wICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLmJvdHRvbVxyXG4gICAgICAgICk7XHJcbiAgICBjaGFydEVsZW1lbnRzW1wic3ZnXCJdID0gc3ZnO1xyXG5cclxuICAgIC8vIGdyYXBoQXJlYSwgaW5jbHVkZXMgY2hhcnRBcmVhLCB0aXRsZSwgbGVnZW5kXHJcbiAgICBsZXQgZ3JhcGhBcmVhID0gc3ZnXHJcbiAgICAgICAgLmFwcGVuZChcImdcIilcclxuICAgICAgICAuYXR0cihcImlkXCIsIFwiZ3JhcGhBcmVhXCIpXHJcbiAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgIFwidHJhbnNmb3JtXCIsXHJcbiAgICAgICAgICAgIFwidHJhbnNsYXRlKFwiICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLmxlZnQgK1xyXG4gICAgICAgICAgICAgICAgXCIsXCIgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4udG9wICtcclxuICAgICAgICAgICAgICAgIFwiKVwiXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggKyByZW5kZXJJbmZvLm1hcmdpbi5yaWdodClcclxuICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgXCJoZWlnaHRcIixcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0ICsgcmVuZGVySW5mby5tYXJnaW4uYm90dG9tXHJcbiAgICAgICAgKTtcclxuICAgIGNoYXJ0RWxlbWVudHNbXCJncmFwaEFyZWFcIl0gPSBncmFwaEFyZWE7XHJcblxyXG4gICAgLy8gZGF0YUFyZWEsIHVuZGVyIGdyYXBoQXJlYSwgaW5jbHVkZXMgcG9pbnRzLCBsaW5lcywgeEF4aXMsIHlBeGlzXHJcbiAgICBsZXQgZGF0YUFyZWEgPSBncmFwaEFyZWFcclxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJkYXRhQXJlYVwiKVxyXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGgpXHJcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0KTtcclxuICAgIGNoYXJ0RWxlbWVudHNbXCJkYXRhQXJlYVwiXSA9IGRhdGFBcmVhO1xyXG5cclxuICAgIHJldHVybiBjaGFydEVsZW1lbnRzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRDaGFydFNjYWxlKFxyXG4gICAgX2NhbnZhczogSFRNTEVsZW1lbnQsXHJcbiAgICBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzLFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mb1xyXG4pIHtcclxuICAgIGxldCBjYW52YXMgPSBkMy5zZWxlY3QoX2NhbnZhcyk7XHJcbiAgICBsZXQgc3ZnID0gY2hhcnRFbGVtZW50cy5zdmc7XHJcbiAgICBsZXQgc3ZnV2lkdGggPSBwYXJzZUZsb2F0KHN2Zy5hdHRyKFwid2lkdGhcIikpO1xyXG4gICAgbGV0IHN2Z0hlaWdodCA9IHBhcnNlRmxvYXQoc3ZnLmF0dHIoXCJoZWlnaHRcIikpO1xyXG4gICAgc3ZnLmF0dHIoXCJ3aWR0aFwiLCBudWxsKVxyXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIG51bGwpXHJcbiAgICAgICAgLmF0dHIoXCJ2aWV3Qm94XCIsIGAwIDAgJHtzdmdXaWR0aH0gJHtzdmdIZWlnaHR9YClcclxuICAgICAgICAuYXR0cihcInByZXNlcnZlQXNwZWN0UmF0aW9cIiwgXCJ4TWlkWU1pZCBtZWV0XCIpO1xyXG5cclxuICAgIGlmIChyZW5kZXJJbmZvLmZpdFBhbmVsV2lkdGgpIHtcclxuICAgICAgICBjYW52YXMuc3R5bGUoXCJ3aWR0aFwiLCBcIjEwMCVcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNhbnZhcy5zdHlsZShcclxuICAgICAgICAgICAgXCJ3aWR0aFwiLFxyXG4gICAgICAgICAgICAoc3ZnV2lkdGggKiByZW5kZXJJbmZvLmZpeGVkU2NhbGUpLnRvU3RyaW5nKCkgKyBcInB4XCJcclxuICAgICAgICApO1xyXG4gICAgICAgIGNhbnZhcy5zdHlsZShcclxuICAgICAgICAgICAgXCJoZWlnaHRcIixcclxuICAgICAgICAgICAgKHN2Z0hlaWdodCAqIHJlbmRlckluZm8uZml4ZWRTY2FsZSkudG9TdHJpbmcoKSArIFwicHhcIlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlclRpdGxlKFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBidWxsZXRJbmZvOiBCdWxsZXRJbmZvXHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJUaXRsZVwiKTtcclxuICAgIC8vIHVuZGVyIGdyYXBoQXJlYVxyXG5cclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhYnVsbGV0SW5mbykgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IHNwYWNpbmcgPSA2OyAvLyBzcGFjaW5nIGJldHdlZW4gdGl0bGUgYW5kIGRhdGFBcmVhXHJcblxyXG4gICAgaWYgKGJ1bGxldEluZm8udGl0bGUpIHtcclxuICAgICAgICBsZXQgdGl0bGVTaXplID0gaGVscGVyLm1lYXN1cmVUZXh0U2l6ZShcclxuICAgICAgICAgICAgYnVsbGV0SW5mby50aXRsZSxcclxuICAgICAgICAgICAgXCJ0cmFja2VyLXRpdGxlLXNtYWxsXCJcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBpZiAoYnVsbGV0SW5mby5vcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIpIHtcclxuICAgICAgICAgICAgbGV0IHRpdGxlID0gY2hhcnRFbGVtZW50cy5ncmFwaEFyZWFcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgICAgICAgICAgICAudGV4dChidWxsZXRJbmZvLnRpdGxlKSAvLyBwaXZvdCBhdCBjZW50ZXJcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgXCJ0aXRsZVwiKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHRpdGxlU2l6ZS53aWR0aCAvIDIuMClcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQgLyAyLjApXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCB0aXRsZVNpemUuaGVpZ2h0KSAvLyBmb3IgbGF0ZXIgdXNlXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci10aXRsZS1zbWFsbFwiKTtcclxuICAgICAgICAgICAgY2hhcnRFbGVtZW50c1tcInRpdGxlXCJdID0gdGl0bGU7XHJcblxyXG4gICAgICAgICAgICAvLyBFeHBhbmQgcGFyZW50IGFyZWFzXHJcbiAgICAgICAgICAgIGhlbHBlci5leHBhbmRBcmVhKGNoYXJ0RWxlbWVudHMuc3ZnLCB0aXRsZVNpemUud2lkdGggKyBzcGFjaW5nLCAwKTtcclxuICAgICAgICAgICAgaGVscGVyLmV4cGFuZEFyZWEoXHJcbiAgICAgICAgICAgICAgICBjaGFydEVsZW1lbnRzLmdyYXBoQXJlYSxcclxuICAgICAgICAgICAgICAgIHRpdGxlU2l6ZS53aWR0aCArIHNwYWNpbmcsXHJcbiAgICAgICAgICAgICAgICAwXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAvLyBNb3ZlIHNpYmxpbmcgYXJlYXNcclxuICAgICAgICAgICAgaGVscGVyLm1vdmVBcmVhKFxyXG4gICAgICAgICAgICAgICAgY2hhcnRFbGVtZW50cy5kYXRhQXJlYSxcclxuICAgICAgICAgICAgICAgIHRpdGxlU2l6ZS53aWR0aCArIHNwYWNpbmcsXHJcbiAgICAgICAgICAgICAgICAwXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChidWxsZXRJbmZvLm9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIpIHtcclxuICAgICAgICAgICAgLy8gaWYgbGFiZWwgd2lkdGggPiBkYXRhQXJlYSB3aWR0aFxyXG4gICAgICAgICAgICBsZXQgeE1pZGRsZSA9IHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoIC8gMi4wO1xyXG4gICAgICAgICAgICBpZiAodGl0bGVTaXplLndpZHRoID4gcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiZXhwYW5kIGFyZWEgZm9yIHZlcnRpY2FsIHRpdGxlXCIpO1xyXG4gICAgICAgICAgICAgICAgaGVscGVyLmV4cGFuZEFyZWEoXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcnRFbGVtZW50cy5zdmcsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGVTaXplLndpZHRoIC0gcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgMFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGhlbHBlci5leHBhbmRBcmVhKFxyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlU2l6ZS53aWR0aCAtIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgIDBcclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgaGVscGVyLm1vdmVBcmVhKFxyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0RWxlbWVudHMuZGF0YUFyZWEsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGVTaXplLndpZHRoIC8gMi4wIC0gcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggLyAyLjAsXHJcbiAgICAgICAgICAgICAgICAgICAgMFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIHhNaWRkbGUgPSB0aXRsZVNpemUud2lkdGggLyAyLjA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBheGlzV2lkdGggPSBwYXJzZUZsb2F0KGNoYXJ0RWxlbWVudHMuYXhpcy5hdHRyKFwid2lkdGhcIikpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHRpdGxlID0gY2hhcnRFbGVtZW50cy5ncmFwaEFyZWFcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgICAgICAgICAgICAudGV4dChidWxsZXRJbmZvLnRpdGxlKSAvLyBwaXZvdCBhdCBjZW50ZXJcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgXCJ0aXRsZVwiKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHhNaWRkbGUgKyBheGlzV2lkdGgpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgdGl0bGVTaXplLmhlaWdodCAvIDIuMClcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHRpdGxlU2l6ZS5oZWlnaHQpIC8vIGZvciBsYXRlciB1c2VcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLXRpdGxlLXNtYWxsXCIpO1xyXG4gICAgICAgICAgICBjaGFydEVsZW1lbnRzW1widGl0bGVcIl0gPSB0aXRsZTtcclxuXHJcbiAgICAgICAgICAgIC8vIEV4cGFuZCBwYXJlbnQgYXJlYXNcclxuICAgICAgICAgICAgaGVscGVyLmV4cGFuZEFyZWEoY2hhcnRFbGVtZW50cy5zdmcsIDAsIHRpdGxlU2l6ZS5oZWlnaHQgKyBzcGFjaW5nKTtcclxuICAgICAgICAgICAgaGVscGVyLmV4cGFuZEFyZWEoXHJcbiAgICAgICAgICAgICAgICBjaGFydEVsZW1lbnRzLmdyYXBoQXJlYSxcclxuICAgICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgICB0aXRsZVNpemUuaGVpZ2h0ICsgc3BhY2luZ1xyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgLy8gTW92ZSBzaWJsaW5nIGFyZWFzXHJcbiAgICAgICAgICAgIGhlbHBlci5tb3ZlQXJlYShcclxuICAgICAgICAgICAgICAgIGNoYXJ0RWxlbWVudHMuZGF0YUFyZWEsXHJcbiAgICAgICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAgICAgdGl0bGVTaXplLmhlaWdodCArIHNwYWNpbmdcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGJ1bGxldEluZm8udmFsdWVVbml0KSB7XHJcbiAgICAgICAgbGV0IHVuaXRTaXplID0gaGVscGVyLm1lYXN1cmVUZXh0U2l6ZShcclxuICAgICAgICAgICAgYnVsbGV0SW5mby52YWx1ZVVuaXQsXHJcbiAgICAgICAgICAgIFwidHJhY2tlci10aWNrLWxhYmVsXCJcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBpZiAoYnVsbGV0SW5mby5vcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIpIHtcclxuICAgICAgICAgICAgbGV0IHVuaXQgPSBjaGFydEVsZW1lbnRzLmRhdGFBcmVhXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgICAgICAgICAgLnRleHQoYnVsbGV0SW5mby52YWx1ZVVuaXQpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImlkXCIsIFwidW5pdFwiKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIC0xICogKHVuaXRTaXplLndpZHRoICsgc3BhY2luZykpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0ICsgc3BhY2luZylcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHVuaXRTaXplLmhlaWdodCkgLy8gZm9yIGxhdGVyIHVzZVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItdGljay1sYWJlbFwiKTsgLy8gcGl2b3QgYXQgY29yZGVyXHJcbiAgICAgICAgICAgIGNoYXJ0RWxlbWVudHNbXCJ1bml0XCJdID0gdW5pdDtcclxuICAgICAgICB9IGVsc2UgaWYgKGJ1bGxldEluZm8ub3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIikge1xyXG4gICAgICAgICAgICBsZXQgdW5pdCA9IGNoYXJ0RWxlbWVudHMuZGF0YUFyZWFcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgICAgICAgICAgICAudGV4dChidWxsZXRJbmZvLnZhbHVlVW5pdClcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgXCJ1bml0XCIpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgICAgICAgICBcInhcIixcclxuICAgICAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCAvIDIgLSB1bml0U2l6ZS53aWR0aCAvIDJcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAtKHVuaXRTaXplLmhlaWdodCAvIDIuMCArIHNwYWNpbmcpKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgdW5pdFNpemUuaGVpZ2h0KSAvLyBmb3IgbGF0ZXIgdXNlXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci10aWNrLWxhYmVsXCIpOyAvLyBwaXZvdCBhdCBjb3JkZXJcclxuICAgICAgICAgICAgY2hhcnRFbGVtZW50c1tcInVuaXRcIl0gPSB1bml0O1xyXG5cclxuICAgICAgICAgICAgLy8gRXhwYW5kIHBhcmVudCBhcmVhc1xyXG4gICAgICAgICAgICBoZWxwZXIuZXhwYW5kQXJlYShjaGFydEVsZW1lbnRzLnN2ZywgMCwgdW5pdFNpemUuaGVpZ2h0ICsgc3BhY2luZyk7XHJcbiAgICAgICAgICAgIGhlbHBlci5leHBhbmRBcmVhKFxyXG4gICAgICAgICAgICAgICAgY2hhcnRFbGVtZW50cy5ncmFwaEFyZWEsXHJcbiAgICAgICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAgICAgdW5pdFNpemUuaGVpZ2h0ICsgc3BhY2luZ1xyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgLy8gTW92ZSBkYXRhQXJlYSBkb3duXHJcbiAgICAgICAgICAgIGhlbHBlci5tb3ZlQXJlYShcclxuICAgICAgICAgICAgICAgIGNoYXJ0RWxlbWVudHMuZGF0YUFyZWEsXHJcbiAgICAgICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAgICAgdW5pdFNpemUuaGVpZ2h0ICsgc3BhY2luZ1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLy8gUmVuZGVyIHRpY2tzLCB0aWNrIGxhYmVsc1xyXG5mdW5jdGlvbiByZW5kZXJBeGlzKFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBidWxsZXRJbmZvOiBCdWxsZXRJbmZvLFxyXG4gICAgZGF0YXNldDogRGF0YXNldFxyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVyQXhpc1wiKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGNoYXJ0RWxlbWVudHMpO1xyXG4gICAgLy8gY29uc29sZS5sb2coZGF0YXNldCk7XHJcblxyXG4gICAgaWYgKCFyZW5kZXJJbmZvIHx8ICFidWxsZXRJbmZvKSByZXR1cm47XHJcblxyXG4gICAgbGV0IHJhbmdlID0gYnVsbGV0SW5mby5yYW5nZTtcclxuICAgIGxldCBsYXN0UmFuZ2UgPSByYW5nZVtyYW5nZS5sZW5ndGggLSAxXTtcclxuICAgIGxldCBkb21haW4gPSBbMCwgbGFzdFJhbmdlXTtcclxuXHJcbiAgICBsZXQgdGlja0xlbmd0aCA9IDY7XHJcbiAgICBsZXQgdmFsdWVVbml0ID0gYnVsbGV0SW5mby52YWx1ZVVuaXQ7XHJcbiAgICBsZXQgdGlja0Zvcm1hdEZuOiBhbnkgPSBmdW5jdGlvbiAodmFsdWU6IGFueSkge1xyXG4gICAgICAgIGlmICh2YWx1ZVVuaXQgJiYgdmFsdWVVbml0LmVuZHNXaXRoKFwiJVwiKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZDMudGlja0Zvcm1hdCgwLCBsYXN0UmFuZ2UsIDcpKHZhbHVlKSArIFwiICVcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGQzLnRpY2tGb3JtYXQoMCwgbGFzdFJhbmdlLCA3KSh2YWx1ZSk7XHJcbiAgICB9O1xyXG4gICAgbGV0IG1heFRpY2tMYWJlbCA9IHRpY2tGb3JtYXRGbihsYXN0UmFuZ2UpO1xyXG4gICAgbGV0IG1heFRpY2tMYWJlbFNpemUgPSBoZWxwZXIubWVhc3VyZVRleHRTaXplKFxyXG4gICAgICAgIG1heFRpY2tMYWJlbCxcclxuICAgICAgICBcInRyYWNrZXItdGljay1sYWJlbFwiXHJcbiAgICApO1xyXG5cclxuICAgIGlmIChidWxsZXRJbmZvLm9yaWVudGF0aW9uID09PSBcImhvcml6b250YWxcIikge1xyXG4gICAgICAgIGxldCBzY2FsZSA9IGQzLnNjYWxlTGluZWFyKCk7XHJcbiAgICAgICAgc2NhbGUuZG9tYWluKGRvbWFpbikucmFuZ2UoWzAsIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoXSk7XHJcbiAgICAgICAgY2hhcnRFbGVtZW50c1tcInNjYWxlXCJdID0gc2NhbGU7XHJcblxyXG4gICAgICAgIGxldCBheGlzR2VuID0gZDMuYXhpc0JvdHRvbShzY2FsZSk7XHJcbiAgICAgICAgYXhpc0dlbi50aWNrRm9ybWF0KHRpY2tGb3JtYXRGbik7XHJcbiAgICAgICAgbGV0IGF4aXMgPSBjaGFydEVsZW1lbnRzLmRhdGFBcmVhXHJcbiAgICAgICAgICAgIC5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgXCJheGlzXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICAgICAgXCJ0cmFuc2Zvcm1cIixcclxuICAgICAgICAgICAgICAgIFwidHJhbnNsYXRlKDAsXCIgKyByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQgKyBcIilcIlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIC5jYWxsKGF4aXNHZW4pXHJcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLWF4aXNcIik7XHJcbiAgICAgICAgY2hhcnRFbGVtZW50c1tcImF4aXNcIl0gPSBheGlzO1xyXG5cclxuICAgICAgICBsZXQgYXhpc0xpbmUgPSBheGlzLnNlbGVjdEFsbChcInBhdGhcIikuc3R5bGUoXCJzdHJva2VcIiwgXCJub25lXCIpO1xyXG5cclxuICAgICAgICBsZXQgYXhpc1RpY2tzID0gYXhpcy5zZWxlY3RBbGwoXCJsaW5lXCIpO1xyXG5cclxuICAgICAgICBsZXQgYXhpc1RpY2tMYWJlbHMgPSBheGlzXHJcbiAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJ0ZXh0XCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLXRpY2stbGFiZWxcIik7XHJcblxyXG4gICAgICAgIGF4aXMuYXR0cihcclxuICAgICAgICAgICAgXCJ3aWR0aFwiLFxyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCArIG1heFRpY2tMYWJlbFNpemUud2lkdGhcclxuICAgICAgICApO1xyXG4gICAgICAgIGF4aXMuYXR0cihcImhlaWdodFwiLCB0aWNrTGVuZ3RoICsgbWF4VGlja0xhYmVsU2l6ZS5oZWlnaHQpO1xyXG5cclxuICAgICAgICAvLyBFeHBhbmQgYXJlYXNcclxuICAgICAgICBoZWxwZXIuZXhwYW5kQXJlYShcclxuICAgICAgICAgICAgY2hhcnRFbGVtZW50cy5zdmcsXHJcbiAgICAgICAgICAgICttYXhUaWNrTGFiZWxTaXplLndpZHRoLFxyXG4gICAgICAgICAgICB0aWNrTGVuZ3RoICsgbWF4VGlja0xhYmVsU2l6ZS5oZWlnaHRcclxuICAgICAgICApO1xyXG4gICAgICAgIGhlbHBlci5leHBhbmRBcmVhKFxyXG4gICAgICAgICAgICBjaGFydEVsZW1lbnRzLmdyYXBoQXJlYSxcclxuICAgICAgICAgICAgK21heFRpY2tMYWJlbFNpemUud2lkdGgsXHJcbiAgICAgICAgICAgIHRpY2tMZW5ndGggKyBtYXhUaWNrTGFiZWxTaXplLmhlaWdodFxyXG4gICAgICAgICk7XHJcbiAgICB9IGVsc2UgaWYgKGJ1bGxldEluZm8ub3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIikge1xyXG4gICAgICAgIGxldCBzY2FsZSA9IGQzLnNjYWxlTGluZWFyKCk7XHJcbiAgICAgICAgc2NhbGUuZG9tYWluKGRvbWFpbikucmFuZ2UoW3JlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCwgMF0pO1xyXG4gICAgICAgIGNoYXJ0RWxlbWVudHNbXCJzY2FsZVwiXSA9IHNjYWxlO1xyXG5cclxuICAgICAgICBsZXQgYXhpc0dlbiA9IGQzLmF4aXNMZWZ0KHNjYWxlKTtcclxuICAgICAgICBheGlzR2VuLnRpY2tGb3JtYXQodGlja0Zvcm1hdEZuKTtcclxuICAgICAgICBsZXQgYXhpcyA9IGNoYXJ0RWxlbWVudHMuZGF0YUFyZWFcclxuICAgICAgICAgICAgLmFwcGVuZChcImdcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBcImF4aXNcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDApXHJcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAwKVxyXG4gICAgICAgICAgICAuY2FsbChheGlzR2VuKVxyXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1heGlzXCIpO1xyXG4gICAgICAgIGNoYXJ0RWxlbWVudHNbXCJheGlzXCJdID0gYXhpcztcclxuXHJcbiAgICAgICAgbGV0IGF4aXNMaW5lID0gYXhpcy5zZWxlY3RBbGwoXCJwYXRoXCIpLnN0eWxlKFwic3Ryb2tlXCIsIFwibm9uZVwiKTtcclxuXHJcbiAgICAgICAgbGV0IGF4aXNUaWNrcyA9IGF4aXMuc2VsZWN0QWxsKFwibGluZVwiKTtcclxuXHJcbiAgICAgICAgbGV0IGF4aXNUaWNrTGFiZWxzID0gYXhpc1xyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwidGV4dFwiKVxyXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci10aWNrLWxhYmVsXCIpO1xyXG5cclxuICAgICAgICBheGlzLmF0dHIoXCJ3aWR0aFwiLCB0aWNrTGVuZ3RoICsgbWF4VGlja0xhYmVsU2l6ZS53aWR0aCk7XHJcbiAgICAgICAgYXhpcy5hdHRyKFwiaGVpZ2h0XCIsIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoKTtcclxuXHJcbiAgICAgICAgLy8gRXhwYW5kIGFyZWFzXHJcbiAgICAgICAgaGVscGVyLmV4cGFuZEFyZWEoXHJcbiAgICAgICAgICAgIGNoYXJ0RWxlbWVudHMuc3ZnLFxyXG4gICAgICAgICAgICB0aWNrTGVuZ3RoICsgbWF4VGlja0xhYmVsU2l6ZS53aWR0aCxcclxuICAgICAgICAgICAgMFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaGVscGVyLmV4cGFuZEFyZWEoXHJcbiAgICAgICAgICAgIGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhLFxyXG4gICAgICAgICAgICB0aWNrTGVuZ3RoICsgbWF4VGlja0xhYmVsU2l6ZS53aWR0aCxcclxuICAgICAgICAgICAgMFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGhlbHBlci5tb3ZlQXJlYShcclxuICAgICAgICAgICAgY2hhcnRFbGVtZW50cy5kYXRhQXJlYSxcclxuICAgICAgICAgICAgdGlja0xlbmd0aCArIG1heFRpY2tMYWJlbFNpemUud2lkdGgsXHJcbiAgICAgICAgICAgIDBcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBSZW5kZXIgcXVhbnRpdGF0aXZlIHJhbmdlLCBwb29yL2F2ZXJhZ2UvZ29vZC8uLi5cclxuZnVuY3Rpb24gcmVuZGVyQmFja1BhbmVsKFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBidWxsZXRJbmZvOiBCdWxsZXRJbmZvLFxyXG4gICAgZGF0YXNldDogRGF0YXNldFxyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVyQmFja1BhbmVsXCIpO1xyXG4gICAgLy8gY29uc29sZS5sb2coZGF0YXNldCk7XHJcblxyXG4gICAgaWYgKCFyZW5kZXJJbmZvIHx8ICFidWxsZXRJbmZvKSByZXR1cm47XHJcblxyXG4gICAgbGV0IHNjYWxlID0gY2hhcnRFbGVtZW50cy5zY2FsZTtcclxuXHJcbiAgICAvLyBQcmVwYXJlIGRhdGFcclxuICAgIGxldCByYW5nZSA9IGJ1bGxldEluZm8ucmFuZ2U7XHJcbiAgICBsZXQgcmFuZ2VDb2xvciA9IGJ1bGxldEluZm8ucmFuZ2VDb2xvcjtcclxuICAgIGxldCBkYXRhID0gW107XHJcbiAgICBsZXQgbGFzdEJvdW5kID0gMDtcclxuICAgIGZvciAobGV0IGluZCA9IDA7IGluZCA8IHJhbmdlLmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICBkYXRhLnB1c2goe1xyXG4gICAgICAgICAgICBzdGFydDogbGFzdEJvdW5kLFxyXG4gICAgICAgICAgICBlbmQ6IHJhbmdlW2luZF0sXHJcbiAgICAgICAgICAgIGNvbG9yOiByYW5nZUNvbG9yW2luZF0sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGFzdEJvdW5kID0gcmFuZ2VbaW5kXTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYnVsbGV0SW5mby5vcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIpIHtcclxuICAgICAgICBsZXQgcGFuZWwgPSBjaGFydEVsZW1lbnRzLmRhdGFBcmVhXHJcbiAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJiYWNrUGFuZWxcIilcclxuICAgICAgICAgICAgLmRhdGEoZGF0YSlcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uIChkOiBhbnksIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3Ioc2NhbGUoZC5zdGFydCkpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24gKGQ6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZnVuY3Rpb24gKGQ6IGFueSwgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKHNjYWxlKGQuZW5kIC0gZC5zdGFydCkpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQpXHJcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24gKGQ6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQuY29sb3I7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfSBlbHNlIGlmIChidWxsZXRJbmZvLm9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIpIHtcclxuICAgICAgICBsZXQgcGFuZWwgPSBjaGFydEVsZW1lbnRzLmRhdGFBcmVhXHJcbiAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJiYWNrUGFuZWxcIilcclxuICAgICAgICAgICAgLmRhdGEoZGF0YSlcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uIChkOiBhbnksIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbiAoZDogYW55KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihzY2FsZShkLmVuZCkpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoKVxyXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBmdW5jdGlvbiAoZDogYW55KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCAtXHJcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcihzY2FsZShkLmVuZCAtIGQuc3RhcnQpKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBmdW5jdGlvbiAoZDogYW55KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZC5jb2xvcjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIFJlbmRlciBiYXIgZm9yIGFjdHVhbCB2YWx1ZVxyXG5mdW5jdGlvbiByZW5kZXJCYXIoXHJcbiAgICBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzLFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGJ1bGxldEluZm86IEJ1bGxldEluZm8sXHJcbiAgICBkYXRhc2V0OiBEYXRhc2V0XHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJCYXJcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhkYXRhc2V0KTtcclxuICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIlwiO1xyXG5cclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhYnVsbGV0SW5mbykgcmV0dXJuO1xyXG5cclxuICAgIGxldCByZXRBY3R1YWxWYWx1ZSA9IGJ1bGxldEluZm8udmFsdWU7XHJcbiAgICByZXRBY3R1YWxWYWx1ZSA9IGV4cHIucmVzb2x2ZVRlbXBsYXRlKHJldEFjdHVhbFZhbHVlLCByZW5kZXJJbmZvKTtcclxuICAgIGxldCBhY3R1YWxWYWx1ZSA9IHBhcnNlRmxvYXQocmV0QWN0dWFsVmFsdWUpO1xyXG4gICAgaWYgKE51bWJlci5pc05hTihhY3R1YWxWYWx1ZSkpIHtcclxuICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgaW5wdXQgdmFsdWU6IFwiICsgcmV0QWN0dWFsVmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgIH1cclxuICAgIGxldCB2YWx1ZUNvbG9yID0gYnVsbGV0SW5mby52YWx1ZUNvbG9yO1xyXG5cclxuICAgIGxldCBzY2FsZSA9IGNoYXJ0RWxlbWVudHMuc2NhbGU7XHJcblxyXG4gICAgaWYgKGJ1bGxldEluZm8ub3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiKSB7XHJcbiAgICAgICAgbGV0IGJhcldpZHRoID0gcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0IC8gMztcclxuICAgICAgICBsZXQgYmFyID0gY2hhcnRFbGVtZW50cy5kYXRhQXJlYVxyXG4gICAgICAgICAgICAuYXBwZW5kKFwicmVjdFwiKVxyXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgc2NhbGUoMCkpXHJcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBiYXJXaWR0aClcclxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBNYXRoLmZsb29yKHNjYWxlKGFjdHVhbFZhbHVlKSkpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGJhcldpZHRoKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIHZhbHVlQ29sb3IpO1xyXG4gICAgfSBlbHNlIGlmIChidWxsZXRJbmZvLm9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIpIHtcclxuICAgICAgICBsZXQgYmFyV2lkdGggPSByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCAvIDM7XHJcbiAgICAgICAgbGV0IGJhciA9IGNoYXJ0RWxlbWVudHMuZGF0YUFyZWFcclxuICAgICAgICAgICAgLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGJhcldpZHRoKVxyXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgTWF0aC5mbG9vcihzY2FsZShhY3R1YWxWYWx1ZSkpKVxyXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGJhcldpZHRoKVxyXG4gICAgICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgICAgIFwiaGVpZ2h0XCIsXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQgLSBNYXRoLmZsb29yKHNjYWxlKGFjdHVhbFZhbHVlKSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIHZhbHVlQ29sb3IpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBSZW5kZXIgbWFyayBsaW5lIGZvciB0YXJnZXQgdmFsdWVcclxuZnVuY3Rpb24gcmVuZGVyTWFyayhcclxuICAgIGNoYXJ0RWxlbWVudHM6IENoYXJ0RWxlbWVudHMsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgYnVsbGV0SW5mbzogQnVsbGV0SW5mbyxcclxuICAgIGRhdGFzZXQ6IERhdGFzZXRcclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInJlbmRlck1hcmtcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhkYXRhc2V0KTtcclxuXHJcbiAgICBpZiAoIXJlbmRlckluZm8gfHwgIWJ1bGxldEluZm8pIHJldHVybjtcclxuXHJcbiAgICBsZXQgc2hvd01hcmtlciA9IGJ1bGxldEluZm8uc2hvd01hcmtlcjtcclxuICAgIGlmICghc2hvd01hcmtlcikgcmV0dXJuO1xyXG5cclxuICAgIGxldCBtYXJrZXJWYWx1ZSA9IGJ1bGxldEluZm8ubWFya2VyVmFsdWU7XHJcbiAgICBsZXQgbWFya2VyQ29sb3IgPSBidWxsZXRJbmZvLm1hcmtlckNvbG9yO1xyXG5cclxuICAgIGxldCBzY2FsZSA9IGNoYXJ0RWxlbWVudHMuc2NhbGU7XHJcblxyXG4gICAgaWYgKGJ1bGxldEluZm8ub3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiKSB7XHJcbiAgICAgICAgbGV0IG1hcmtlckxlbmd0aCA9IChyZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQgKiAyKSAvIDM7XHJcbiAgICAgICAgbGV0IG1hcmtlciA9IGNoYXJ0RWxlbWVudHMuZGF0YUFyZWFcclxuICAgICAgICAgICAgLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHNjYWxlKG1hcmtlclZhbHVlKSAtIDEuNSlcclxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIG1hcmtlckxlbmd0aCAvIDQpXHJcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgMylcclxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgbWFya2VyTGVuZ3RoKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIG1hcmtlckNvbG9yKTtcclxuICAgIH0gZWxzZSBpZiAoYnVsbGV0SW5mby5vcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XHJcbiAgICAgICAgbGV0IG1hcmtlckxlbmd0aCA9IChyZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCAqIDIpIC8gMztcclxuICAgICAgICBsZXQgbWFya2VyID0gY2hhcnRFbGVtZW50cy5kYXRhQXJlYVxyXG4gICAgICAgICAgICAuYXBwZW5kKFwicmVjdFwiKVxyXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgbWFya2VyTGVuZ3RoIC8gNClcclxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIHNjYWxlKG1hcmtlclZhbHVlKSAtIDEuNSlcclxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBtYXJrZXJMZW5ndGgpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIDMpXHJcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgbWFya2VyQ29sb3IpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBCdWxsZXQgZ3JhcGggaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQnVsbGV0X2dyYXBoXHJcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJCdWxsZXQoXHJcbiAgICBjYW52YXM6IEhUTUxFbGVtZW50LFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGJ1bGxldEluZm86IEJ1bGxldEluZm9cclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInJlbmRlckJ1bGxldFwiKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8pO1xyXG4gICAgaWYgKCFyZW5kZXJJbmZvIHx8ICFidWxsZXRJbmZvKSByZXR1cm47XHJcblxyXG4gICAgbGV0IGRhdGFzZXRJZCA9IHBhcnNlRmxvYXQoYnVsbGV0SW5mby5kYXRhc2V0KTtcclxuICAgIGxldCBkYXRhc2V0ID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXREYXRhc2V0QnlJZChkYXRhc2V0SWQpO1xyXG5cclxuICAgIC8vIFNldCBpbml0aWFsIGRhdGFBcmVhIHNpemVcclxuICAgIGlmIChidWxsZXRJbmZvLm9yaWVudGF0aW9uID09PSBcImhvcml6b250YWxcIikge1xyXG4gICAgICAgIHJlbmRlckluZm8uZGF0YUFyZWFTaXplID0geyB3aWR0aDogMjUwLCBoZWlnaHQ6IDI0IH07XHJcbiAgICB9IGVsc2UgaWYgKGJ1bGxldEluZm8ub3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIikge1xyXG4gICAgICAgIHJlbmRlckluZm8uZGF0YUFyZWFTaXplID0geyB3aWR0aDogMjQsIGhlaWdodDogMjUwIH07XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGNoYXJ0RWxlbWVudHMgPSBjcmVhdGVBcmVhcyhjYW52YXMsIHJlbmRlckluZm8sIGJ1bGxldEluZm8pO1xyXG5cclxuICAgIGxldCByZXRSZW5kZXJBeGlzID0gcmVuZGVyQXhpcyhcclxuICAgICAgICBjaGFydEVsZW1lbnRzLFxyXG4gICAgICAgIHJlbmRlckluZm8sXHJcbiAgICAgICAgYnVsbGV0SW5mbyxcclxuICAgICAgICBkYXRhc2V0XHJcbiAgICApO1xyXG4gICAgaWYgKHR5cGVvZiByZXRSZW5kZXJBeGlzID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldFJlbmRlckF4aXM7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyVGl0bGUoY2hhcnRFbGVtZW50cywgcmVuZGVySW5mbywgYnVsbGV0SW5mbyk7XHJcblxyXG4gICAgcmVuZGVyQmFja1BhbmVsKGNoYXJ0RWxlbWVudHMsIHJlbmRlckluZm8sIGJ1bGxldEluZm8sIGRhdGFzZXQpO1xyXG5cclxuICAgIGxldCByZXRSZW5kZXJCYXIgPSByZW5kZXJCYXIoXHJcbiAgICAgICAgY2hhcnRFbGVtZW50cyxcclxuICAgICAgICByZW5kZXJJbmZvLFxyXG4gICAgICAgIGJ1bGxldEluZm8sXHJcbiAgICAgICAgZGF0YXNldFxyXG4gICAgKTtcclxuICAgIGlmICh0eXBlb2YgcmV0UmVuZGVyQmFyID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldFJlbmRlckJhcjtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJNYXJrKGNoYXJ0RWxlbWVudHMsIHJlbmRlckluZm8sIGJ1bGxldEluZm8sIGRhdGFzZXQpO1xyXG5cclxuICAgIHNldENoYXJ0U2NhbGUoY2FudmFzLCBjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvKTtcclxufVxyXG4iLCJpbXBvcnQgKiBhcyBkMyBmcm9tIFwiZDNcIjtcclxuaW1wb3J0IHsgTW9tZW50IH0gZnJvbSBcIm1vbWVudFwiO1xyXG5pbXBvcnQge1xyXG4gICAgRGF0YXNldHMsXHJcbiAgICBEYXRhUG9pbnQsXHJcbiAgICBSZW5kZXJJbmZvLFxyXG4gICAgRGF0YXNldCxcclxuICAgIFNpemUsXHJcbiAgICBUcmFuc2Zvcm0sXHJcbiAgICBDaGFydEVsZW1lbnRzLFxyXG4gICAgT3V0cHV0VHlwZSxcclxuICAgIFZhbHVlVHlwZSxcclxuICAgIENvbW1vbkNoYXJ0SW5mbyxcclxuICAgIExpbmVJbmZvLFxyXG4gICAgQmFySW5mbyxcclxuICAgIFBpZUluZm8sXHJcbiAgICBTdW1tYXJ5SW5mbyxcclxuICAgIEJ1bGxldEluZm8sXHJcbiAgICBNb250aEluZm8sXHJcbiAgICBIZWF0bWFwSW5mbyxcclxufSBmcm9tIFwiLi9kYXRhXCI7XHJcbmltcG9ydCAqIGFzIHBpZSBmcm9tIFwiLi9waWVcIjtcclxuaW1wb3J0ICogYXMgc3VtbWFyeSBmcm9tIFwiLi9zdW1tYXJ5XCI7XHJcbmltcG9ydCAqIGFzIG1vbnRoIGZyb20gXCIuL21vbnRoXCI7XHJcbmltcG9ydCAqIGFzIGhlYXRtYXAgZnJvbSBcIi4vaGVhdG1hcFwiO1xyXG5pbXBvcnQgKiBhcyBidWxsZXQgZnJvbSBcIi4vYnVsbGV0XCI7XHJcbmltcG9ydCAqIGFzIGhlbHBlciBmcm9tIFwiLi9oZWxwZXJcIjtcclxuXHJcbmZ1bmN0aW9uIGdldFhUaWNrSW50ZXJ2YWwoZGF0YXNldHM6IERhdGFzZXRzKSB7XHJcbiAgICBsZXQgdGlja0ludGVydmFsO1xyXG4gICAgbGV0IGRheXMgPSBkYXRhc2V0cy5nZXREYXRlcygpLmxlbmd0aDtcclxuXHJcbiAgICBpZiAoZGF5cyA8PSAxNSkge1xyXG4gICAgICAgIC8vIG51bWJlciBvZiB0aWNrczogMC0xNVxyXG4gICAgICAgIHRpY2tJbnRlcnZhbCA9IGQzLnRpbWVEYXk7XHJcbiAgICB9IGVsc2UgaWYgKGRheXMgPD0gNCAqIDE1KSB7XHJcbiAgICAgICAgLy8gbnVtYmVyIG9mIHRpY2tzOiA0LTE1XHJcbiAgICAgICAgdGlja0ludGVydmFsID0gZDMudGltZURheS5ldmVyeSg0KTtcclxuICAgIH0gZWxzZSBpZiAoZGF5cyA8PSA3ICogMTUpIHtcclxuICAgICAgICAvLyBudW1iZXIgb2YgdGlja3M6IDgtMTVcclxuICAgICAgICB0aWNrSW50ZXJ2YWwgPSBkMy50aW1lV2VlaztcclxuICAgIH0gZWxzZSBpZiAoZGF5cyA8PSAxNSAqIDMwKSB7XHJcbiAgICAgICAgLy8gbnVtYmVyIG9mIHRpY2tzOiA0LTE1XHJcbiAgICAgICAgdGlja0ludGVydmFsID0gZDMudGltZU1vbnRoO1xyXG4gICAgfSBlbHNlIGlmIChkYXlzIDw9IDE1ICogNjApIHtcclxuICAgICAgICAvLyBudW1iZXIgb2YgdGlja3M6IDgtMTVcclxuICAgICAgICB0aWNrSW50ZXJ2YWwgPSBkMy50aW1lTW9udGguZXZlcnkoMik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRpY2tJbnRlcnZhbCA9IGQzLnRpbWVZZWFyO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aWNrSW50ZXJ2YWw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFhUaWNrRm9ybWF0KGRhdGFzZXRzOiBEYXRhc2V0cykge1xyXG4gICAgbGV0IHRpY2tGb3JtYXQ7XHJcbiAgICBsZXQgZGF5cyA9IGRhdGFzZXRzLmdldERhdGVzKCkubGVuZ3RoO1xyXG5cclxuICAgIGlmIChkYXlzIDw9IDE1KSB7XHJcbiAgICAgICAgLy8gbnVtYmVyIG9mIHRpY2tzOiAwLTE1XHJcbiAgICAgICAgdGlja0Zvcm1hdCA9IGQzLnRpbWVGb3JtYXQoXCIleS0lbS0lZFwiKTtcclxuICAgIH0gZWxzZSBpZiAoZGF5cyA8PSA0ICogMTUpIHtcclxuICAgICAgICAvLyBudW1iZXIgb2YgdGlja3M6IDQtMTVcclxuICAgICAgICB0aWNrRm9ybWF0ID0gZDMudGltZUZvcm1hdChcIiV5LSVtLSVkXCIpO1xyXG4gICAgfSBlbHNlIGlmIChkYXlzIDw9IDcgKiAxNSkge1xyXG4gICAgICAgIC8vIG51bWJlciBvZiB0aWNrczogOC0xNVxyXG4gICAgICAgIHRpY2tGb3JtYXQgPSBkMy50aW1lRm9ybWF0KFwiJXktJW0tJWRcIik7XHJcbiAgICB9IGVsc2UgaWYgKGRheXMgPD0gMTUgKiAzMCkge1xyXG4gICAgICAgIC8vIG51bWJlciBvZiB0aWNrczogNC0xNVxyXG4gICAgICAgIHRpY2tGb3JtYXQgPSBkMy50aW1lRm9ybWF0KFwiJXkgJWJcIik7XHJcbiAgICB9IGVsc2UgaWYgKGRheXMgPD0gMTUgKiA2MCkge1xyXG4gICAgICAgIC8vIG51bWJlciBvZiB0aWNrczogOC0xNVxyXG4gICAgICAgIHRpY2tGb3JtYXQgPSBkMy50aW1lRm9ybWF0KFwiJXkgJWJcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRpY2tGb3JtYXQgPSBkMy50aW1lRm9ybWF0KFwiJVlcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRpY2tGb3JtYXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFlUaWNrVmFsdWVzKHlMb3dlcjogbnVtYmVyLCB5VXBwZXI6IG51bWJlcikge1xyXG4gICAgLy8gY3VycmVudGx5IHVzZWQgZm9yIHRpbWUgdmFsdWUgdGljayBvbmx5LCB2YWx1ZSBpbiBzZWNvbmRzXHJcbiAgICBjb25zdCBhYnNFeHRlbnQgPSBNYXRoLmFicyh5VXBwZXIgLSB5TG93ZXIpO1xyXG4gICAgbGV0IHRpY2tWYWx1ZXMgPSBbXTtcclxuICAgIGlmIChhYnNFeHRlbnQgPiA1ICogNjAgKiA2MCkge1xyXG4gICAgICAgIC8vIGV4dGVudCBvdmVyIHRoYW4gNSBob3Vyc1xyXG4gICAgICAgIC8vIHRpY2sgb24gdGhlIGhvdXJcclxuICAgICAgICB5TG93ZXIgPSBNYXRoLmZsb29yKHlMb3dlciAvIDM2MDApICogMzYwMDtcclxuICAgICAgICB5VXBwZXIgPSBNYXRoLmNlaWwoeVVwcGVyIC8gMzYwMCkgKiAzNjAwO1xyXG5cclxuICAgICAgICB0aWNrVmFsdWVzID0gZDMucmFuZ2UoeUxvd2VyLCB5VXBwZXIsIDM2MDApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyB0aWNrIG9uIHRoZSBoYWxmIGhvdXJcclxuICAgICAgICB5TG93ZXIgPSBNYXRoLmZsb29yKHlMb3dlciAvIDE4MDApICogMTgwMDtcclxuICAgICAgICB5VXBwZXIgPSBNYXRoLmNlaWwoeVVwcGVyIC8gMTgwMCkgKiAxODAwO1xyXG5cclxuICAgICAgICB0aWNrVmFsdWVzID0gZDMucmFuZ2UoeUxvd2VyLCB5VXBwZXIsIDE4MDApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aWNrVmFsdWVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRZVGlja0Zvcm1hdCh5TG93ZXI6IG51bWJlciwgeVVwcGVyOiBudW1iZXIsIHNraXA6IGJvb2xlYW4gPSB0cnVlKSB7XHJcbiAgICAvLyBjdXJyZW50bHkgdXNlZCBmb3IgdGltZSB2YWx1ZSB0aWNrIG9ubHlcclxuICAgIC8vIHJldHVybiBhIGZ1bmN0aW9uIGNvbnZlcnQgdmFsdWUgdG8gdGltZSBzdHJpbmdcclxuICAgIGZ1bmN0aW9uIHRpY2tGb3JtYXQodmFsdWU6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgYWJzRXh0ZW50ID0gTWF0aC5hYnMoeVVwcGVyIC0geUxvd2VyKTtcclxuICAgICAgICBsZXQgZGF5U3RhcnQgPSB3aW5kb3cubW9tZW50KFwiMDA6MDBcIiwgXCJISDptbVwiLCB0cnVlKTtcclxuICAgICAgICBsZXQgdGlja1RpbWUgPSBkYXlTdGFydC5hZGQodmFsdWUsIFwic2Vjb25kc1wiKTtcclxuICAgICAgICBsZXQgZm9ybWF0ID0gdGlja1RpbWUuZm9ybWF0KFwiSEg6bW1cIik7XHJcbiAgICAgICAgaWYgKHNraXAgJiYgYWJzRXh0ZW50ID4gMTIgKiA2MCAqIDYwKSB7XHJcbiAgICAgICAgICAgIGxldCBkZXZIb3VyID0gKHZhbHVlIC0geUxvd2VyKSAvIDM2MDA7XHJcbiAgICAgICAgICAgIGxldCBpbnRlcmxlYXZlID0gZGV2SG91ciAlIDI7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA8PSB5TG93ZXIpIHtcclxuICAgICAgICAgICAgICAgIGZvcm1hdCA9IFwiXCI7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPj0geVVwcGVyKSB7XHJcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSBcIlwiO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGludGVybGVhdmUgPiAxLjApIHtcclxuICAgICAgICAgICAgICAgIGZvcm1hdCA9IHRpY2tUaW1lLmZvcm1hdChcIkhIOm1tXCIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gXCJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZvcm1hdDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGlja0Zvcm1hdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihjYW52YXM6IEhUTUxFbGVtZW50LCByZW5kZXJJbmZvOiBSZW5kZXJJbmZvKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInJlbmRlclwiKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uZGF0YXNldHMpO1xyXG5cclxuICAgIC8vIERhdGEgcHJlcHJvY2Vzc2luZ1xyXG4gICAgZm9yIChsZXQgZGF0YXNldCBvZiByZW5kZXJJbmZvLmRhdGFzZXRzKSB7XHJcbiAgICAgICAgaWYgKGRhdGFzZXQuZ2V0UXVlcnkoKS51c2VkQXNYRGF0YXNldCkgY29udGludWU7XHJcbiAgICAgICAgLy8gdmFsdWVTaGlmdFxyXG4gICAgICAgIGlmIChyZW5kZXJJbmZvLnZhbHVlU2hpZnRbZGF0YXNldC5nZXRJZCgpXSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBkYXRhc2V0LnNoaWZ0KHJlbmRlckluZm8udmFsdWVTaGlmdFtkYXRhc2V0LmdldElkKCldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcGVuYWx0eVxyXG4gICAgICAgIGlmIChyZW5kZXJJbmZvLnBlbmFsdHlbZGF0YXNldC5nZXRJZCgpXSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBkYXRhc2V0LnNldFBlbmFsdHkocmVuZGVySW5mby5wZW5hbHR5W2RhdGFzZXQuZ2V0SWQoKV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBhY2N1bVxyXG4gICAgICAgIGlmIChyZW5kZXJJbmZvLmFjY3VtW2RhdGFzZXQuZ2V0SWQoKV0pIHtcclxuICAgICAgICAgICAgZGF0YXNldC5hY2N1bXVsYXRlVmFsdWVzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGxpbmVJbmZvIG9mIHJlbmRlckluZm8ubGluZSkge1xyXG4gICAgICAgIGxldCByZXQgPSByZW5kZXJMaW5lQ2hhcnQoY2FudmFzLCByZW5kZXJJbmZvLCBsaW5lSW5mbyk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBiYXJJbmZvIG9mIHJlbmRlckluZm8uYmFyKSB7XHJcbiAgICAgICAgbGV0IHJldCA9IHJlbmRlckJhckNoYXJ0KGNhbnZhcywgcmVuZGVySW5mbywgYmFySW5mbyk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBwaWVJbmZvIG9mIHJlbmRlckluZm8ucGllKSB7XHJcbiAgICAgICAgbGV0IHJldCA9IHBpZS5yZW5kZXJQaWVDaGFydChjYW52YXMsIHJlbmRlckluZm8sIHBpZUluZm8pO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgc3VtbWFyeUluZm8gb2YgcmVuZGVySW5mby5zdW1tYXJ5KSB7XHJcbiAgICAgICAgbGV0IHJldCA9IHN1bW1hcnkucmVuZGVyU3VtbWFyeShjYW52YXMsIHJlbmRlckluZm8sIHN1bW1hcnlJbmZvKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAobGV0IGJ1bGxldEluZm8gb2YgcmVuZGVySW5mby5idWxsZXQpIHtcclxuICAgICAgICBsZXQgcmV0ID0gYnVsbGV0LnJlbmRlckJ1bGxldChjYW52YXMsIHJlbmRlckluZm8sIGJ1bGxldEluZm8pO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgbW9udGhJbmZvIG9mIHJlbmRlckluZm8ubW9udGgpIHtcclxuICAgICAgICBsZXQgcmV0ID0gbW9udGgucmVuZGVyTW9udGgoY2FudmFzLCByZW5kZXJJbmZvLCBtb250aEluZm8pO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaGVhdG1hcEluZm8gb2YgcmVuZGVySW5mby5oZWF0bWFwKSB7XHJcbiAgICAgICAgbGV0IHJldCA9IGhlYXRtYXAucmVuZGVySGVhdG1hcChjYW52YXMsIHJlbmRlckluZm8sIGhlYXRtYXBJbmZvKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyWEF4aXMoXHJcbiAgICBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzLFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGNoYXJ0SW5mbzogQ29tbW9uQ2hhcnRJbmZvXHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJYQXhpc1wiKTtcclxuXHJcbiAgICBpZiAoIXJlbmRlckluZm8gfHwgIWNoYXJ0SW5mbykgcmV0dXJuO1xyXG5cclxuICAgIGxldCBkYXRhc2V0cyA9IHJlbmRlckluZm8uZGF0YXNldHM7XHJcbiAgICBsZXQgeERvbWFpbiA9IGQzLmV4dGVudChkYXRhc2V0cy5nZXREYXRlcygpKTtcclxuICAgIGxldCB4U2NhbGUgPSBkM1xyXG4gICAgICAgIC5zY2FsZVRpbWUoKVxyXG4gICAgICAgIC5kb21haW4oeERvbWFpbilcclxuICAgICAgICAucmFuZ2UoWzAsIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoXSk7XHJcbiAgICBjaGFydEVsZW1lbnRzW1wieFNjYWxlXCJdID0geFNjYWxlO1xyXG5cclxuICAgIGxldCB0aWNrSW50ZXJ2YWwgPSBnZXRYVGlja0ludGVydmFsKGRhdGFzZXRzKTtcclxuICAgIGxldCB0aWNrRm9ybWF0ID0gZ2V0WFRpY2tGb3JtYXQoZGF0YXNldHMpO1xyXG5cclxuICAgIGxldCB4QXhpc0dlbiA9IGQzXHJcbiAgICAgICAgLmF4aXNCb3R0b20oeFNjYWxlKVxyXG4gICAgICAgIC50aWNrcyh0aWNrSW50ZXJ2YWwpXHJcbiAgICAgICAgLnRpY2tGb3JtYXQodGlja0Zvcm1hdCk7XHJcbiAgICBsZXQgeEF4aXMgPSBjaGFydEVsZW1lbnRzLmRhdGFBcmVhIC8vIGF4aXMgaW5jbHVkZXMgdGlja3NcclxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJ4QXhpc1wiKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcInRyYW5zZm9ybVwiLFxyXG4gICAgICAgICAgICBcInRyYW5zbGF0ZSgwLFwiICsgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0ICsgXCIpXCJcclxuICAgICAgICApIC8vIHJlbGF0aXZlIHRvIGdyYXBoQXJlYVxyXG4gICAgICAgIC5jYWxsKHhBeGlzR2VuKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLWF4aXNcIik7XHJcbiAgICBpZiAoY2hhcnRJbmZvLnhBeGlzQ29sb3IpIHtcclxuICAgICAgICB4QXhpcy5zdHlsZShcInN0cm9rZVwiLCBjaGFydEluZm8ueEF4aXNDb2xvcik7XHJcbiAgICB9XHJcbiAgICBjaGFydEVsZW1lbnRzW1wieEF4aXNcIl0gPSB4QXhpcztcclxuXHJcbiAgICBsZXQgdGV4dFNpemUgPSBoZWxwZXIubWVhc3VyZVRleHRTaXplKFwiOTktOTktOTlcIik7XHJcblxyXG4gICAgbGV0IHhBeGlzVGlja0xhYmVscyA9IHhBeGlzXHJcbiAgICAgICAgLnNlbGVjdEFsbChcInRleHRcIilcclxuICAgICAgICAuYXR0cihcInhcIiwgLTEgKiB0ZXh0U2l6ZS5oZWlnaHQgKiBNYXRoLmNvcygoNjUgLyAxODApICogTWF0aC5QSSkpXHJcbiAgICAgICAgLmF0dHIoXCJ5XCIsIDApXHJcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoLTY1KVwiKVxyXG4gICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwiZW5kXCIpXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItdGljay1sYWJlbFwiKTtcclxuICAgIGlmIChjaGFydEluZm8ueEF4aXNDb2xvcikge1xyXG4gICAgICAgIHhBeGlzVGlja0xhYmVscy5zdHlsZShcImZpbGxcIiwgY2hhcnRJbmZvLnhBeGlzQ29sb3IpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB0aWNrTGVuZ3RoID0gNjtcclxuICAgIGxldCB0aWNrTGFiZWxIZWlnaHQgPSB0ZXh0U2l6ZS53aWR0aCAqIE1hdGguc2luKCg2NSAvIDE4MCkgKiBNYXRoLlBJKTtcclxuICAgIGxldCB4QXhpc0xhYmVsID0geEF4aXNcclxuICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgIC50ZXh0KGNoYXJ0SW5mby54QXhpc0xhYmVsKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcInRyYW5zZm9ybVwiLFxyXG4gICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCAvIDIgK1xyXG4gICAgICAgICAgICAgICAgXCIsXCIgK1xyXG4gICAgICAgICAgICAgICAgKHRpY2tMZW5ndGggKyB0aWNrTGFiZWxIZWlnaHQpICtcclxuICAgICAgICAgICAgICAgIFwiKVwiXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLWF4aXMtbGFiZWxcIik7XHJcbiAgICBpZiAoY2hhcnRJbmZvLnhBeGlzTGFiZWxDb2xvcikge1xyXG4gICAgICAgIHhBeGlzTGFiZWwuc3R5bGUoXCJmaWxsXCIsIGNoYXJ0SW5mby54QXhpc0xhYmVsQ29sb3IpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHhBeGlzIGhlaWdodFxyXG4gICAgeEF4aXMuYXR0cihcImhlaWdodFwiLCB0aWNrTGVuZ3RoICsgdGlja0xhYmVsSGVpZ2h0KTtcclxuXHJcbiAgICAvLyBFeHBhbmQgYXJlYXNcclxuICAgIGhlbHBlci5leHBhbmRBcmVhKGNoYXJ0RWxlbWVudHMuc3ZnLCAwLCB0aWNrTGVuZ3RoICsgdGlja0xhYmVsSGVpZ2h0KTtcclxuICAgIGhlbHBlci5leHBhbmRBcmVhKGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhLCAwLCB0aWNrTGVuZ3RoICsgdGlja0xhYmVsSGVpZ2h0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyWUF4aXMoXHJcbiAgICBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzLFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGNoYXJ0SW5mbzogQ29tbW9uQ2hhcnRJbmZvLFxyXG4gICAgeUF4aXNMb2NhdGlvbjogc3RyaW5nLFxyXG4gICAgZGF0YXNldElkczogQXJyYXk8bnVtYmVyPlxyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVyWUF4aXNcIilcclxuICAgIC8vIGNvbnNvbGUubG9nKGRhdGFzZXRzKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8pO1xyXG4gICAgLy8gY29uc29sZS5sb2coZGF0YXNldElkcyk7XHJcblxyXG4gICAgaWYgKCFyZW5kZXJJbmZvIHx8ICFjaGFydEluZm8pIHJldHVybjtcclxuXHJcbiAgICBsZXQgZGF0YXNldHMgPSByZW5kZXJJbmZvLmRhdGFzZXRzO1xyXG4gICAgaWYgKGRhdGFzZXRJZHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh5QXhpc0xvY2F0aW9uICE9PSBcImxlZnRcIiAmJiB5QXhpc0xvY2F0aW9uICE9PSBcInJpZ2h0XCIpIHJldHVybjtcclxuXHJcbiAgICBsZXQgeU1pbk9mRGF0YXNldHMgPSBudWxsO1xyXG4gICAgbGV0IHlNYXhPZkRhdGFzZXRzID0gbnVsbDtcclxuICAgIGxldCB0bXBWYWx1ZUlzVGltZSA9IG51bGw7XHJcbiAgICBsZXQgdmFsdWVJc1RpbWUgPSBmYWxzZTtcclxuICAgIGZvciAobGV0IGRhdGFzZXRJZCBvZiBkYXRhc2V0SWRzKSB7XHJcbiAgICAgICAgbGV0IGRhdGFzZXQgPSBkYXRhc2V0cy5nZXREYXRhc2V0QnlJZChkYXRhc2V0SWQpO1xyXG4gICAgICAgIGlmIChkYXRhc2V0LmdldFF1ZXJ5KCkudXNlZEFzWERhdGFzZXQpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICBpZiAoeU1pbk9mRGF0YXNldHMgPT09IG51bGwgfHwgZGF0YXNldC5nZXRZTWluKCkgPCB5TWluT2ZEYXRhc2V0cykge1xyXG4gICAgICAgICAgICB5TWluT2ZEYXRhc2V0cyA9IGRhdGFzZXQuZ2V0WU1pbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoeU1heE9mRGF0YXNldHMgPT09IG51bGwgfHwgZGF0YXNldC5nZXRZTWF4KCkgPiB5TWF4T2ZEYXRhc2V0cykge1xyXG4gICAgICAgICAgICB5TWF4T2ZEYXRhc2V0cyA9IGRhdGFzZXQuZ2V0WU1heCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTmVlZCBhbGwgZGF0YXNldHMgaGF2ZSBzYW1lIHNldHRpbmdzIGZvciB0aW1lIHZhbHVlXHJcbiAgICAgICAgdmFsdWVJc1RpbWUgPSBkYXRhc2V0LnZhbHVlVHlwZSA9PT0gVmFsdWVUeXBlLlRpbWU7XHJcbiAgICAgICAgaWYgKHRtcFZhbHVlSXNUaW1lID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRtcFZhbHVlSXNUaW1lID0gdmFsdWVJc1RpbWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlSXNUaW1lICE9PSB0bXBWYWx1ZUlzVGltZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiTm90IGFsbCB2YWx1ZXMgaW4gdGltZSBmb3JtYXRcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKHlNaW5PZkRhdGFzZXRzKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHlNYXhPZkRhdGFzZXRzKTtcclxuXHJcbiAgICBsZXQgeU1pbiA9IG51bGw7XHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICB5TWluID0gY2hhcnRJbmZvLnlNaW5bMF07XHJcbiAgICB9IGVsc2UgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwicmlnaHRcIikge1xyXG4gICAgICAgIHlNaW4gPSBjaGFydEluZm8ueU1pblsxXTtcclxuICAgIH1cclxuICAgIGxldCB5TWluQXNzaWduZWQgPSBmYWxzZTtcclxuICAgIGlmICh0eXBlb2YgeU1pbiAhPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgIHlNaW4gPSB5TWluT2ZEYXRhc2V0cztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgeU1pbkFzc2lnbmVkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgeU1heCA9IG51bGw7XHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICB5TWF4ID0gY2hhcnRJbmZvLnlNYXhbMF07XHJcbiAgICB9IGVsc2UgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwicmlnaHRcIikge1xyXG4gICAgICAgIHlNYXggPSBjaGFydEluZm8ueU1heFsxXTtcclxuICAgIH1cclxuICAgIGxldCB5TWF4QXNzaWduZWQgPSBmYWxzZTtcclxuICAgIGlmICh0eXBlb2YgeU1heCAhPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgIHlNYXggPSB5TWF4T2ZEYXRhc2V0cztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgeU1heEFzc2lnbmVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmICh5TWF4IDwgeU1pbikge1xyXG4gICAgICAgIGxldCB5VG1wID0geU1pbjtcclxuICAgICAgICB5TWluID0geU1heDtcclxuICAgICAgICB5TWF4ID0geVRtcDtcclxuICAgICAgICBsZXQgeVRtcEFzc2lnbmVkID0geU1pbkFzc2lnbmVkO1xyXG4gICAgICAgIHlNaW5Bc3NpZ25lZCA9IHlNYXhBc3NpZ25lZDtcclxuICAgICAgICB5TWF4QXNzaWduZWQgPSB5VG1wQXNzaWduZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHlFeHRlbnQgPSB5TWF4IC0geU1pbjtcclxuXHJcbiAgICBsZXQgeVNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKTtcclxuICAgIGxldCB5TG93ZXIsIHlVcHBlcjtcclxuICAgIGlmICh5TWluQXNzaWduZWQpIHtcclxuICAgICAgICB5TG93ZXIgPSB5TWluO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB5TG93ZXIgPSB5TWluIC0geUV4dGVudCAqIDAuMjtcclxuICAgIH1cclxuICAgIGlmICh5TWF4QXNzaWduZWQpIHtcclxuICAgICAgICB5VXBwZXIgPSB5TWF4O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB5VXBwZXIgPSB5TWF4ICsgeUV4dGVudCAqIDAuMjtcclxuICAgIH1cclxuICAgIC8vIGlmIGl0IGlzIGJhciBjaGFydCwgemVybyBtdXN0IGJlIGNvbnRhaW5lZCBpbiB0aGUgcmFuZ2VcclxuICAgIGlmIChjaGFydEluZm8uR2V0Q2hhcnRUeXBlKCkgPT09IE91dHB1dFR5cGUuQmFyKSB7XHJcbiAgICAgICAgaWYgKHlVcHBlciA8IDAuMCkge1xyXG4gICAgICAgICAgICB5VXBwZXIgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoeUxvd2VyID4gMC4wKSB7XHJcbiAgICAgICAgICAgIHlMb3dlciA9IDAuMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBsZXQgZG9tYWluID0gW3lMb3dlciwgeVVwcGVyXTtcclxuICAgIGlmIChcclxuICAgICAgICAoeUF4aXNMb2NhdGlvbiA9PT0gXCJsZWZ0XCIgJiYgY2hhcnRJbmZvLnJldmVyc2VZQXhpc1swXSkgfHxcclxuICAgICAgICAoeUF4aXNMb2NhdGlvbiA9PT0gXCJyaWdodFwiICYmIGNoYXJ0SW5mby5yZXZlcnNlWUF4aXNbMV0pXHJcbiAgICApIHtcclxuICAgICAgICBkb21haW4gPSBbeVVwcGVyLCB5TG93ZXJdO1xyXG4gICAgfVxyXG4gICAgeVNjYWxlLmRvbWFpbihkb21haW4pLnJhbmdlKFtyZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQsIDBdKTtcclxuXHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICBjaGFydEVsZW1lbnRzW1wibGVmdFlTY2FsZVwiXSA9IHlTY2FsZTtcclxuICAgIH0gZWxzZSBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJyaWdodFwiKSB7XHJcbiAgICAgICAgY2hhcnRFbGVtZW50c1tcInJpZ2h0WVNjYWxlXCJdID0geVNjYWxlO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB5QXhpc0NvbG9yID0gXCJcIjtcclxuICAgIGlmICh5QXhpc0xvY2F0aW9uID09PSBcImxlZnRcIikge1xyXG4gICAgICAgIHlBeGlzQ29sb3IgPSBjaGFydEluZm8ueUF4aXNDb2xvclswXTtcclxuICAgIH0gZWxzZSBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJyaWdodFwiKSB7XHJcbiAgICAgICAgeUF4aXNDb2xvciA9IGNoYXJ0SW5mby55QXhpc0NvbG9yWzFdO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB5QXhpc0xhYmVsQ29sb3IgPSBcIlwiO1xyXG4gICAgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwibGVmdFwiKSB7XHJcbiAgICAgICAgeUF4aXNMYWJlbENvbG9yID0gY2hhcnRJbmZvLnlBeGlzTGFiZWxDb2xvclswXTtcclxuICAgIH0gZWxzZSBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJyaWdodFwiKSB7XHJcbiAgICAgICAgeUF4aXNMYWJlbENvbG9yID0gY2hhcnRJbmZvLnlBeGlzTGFiZWxDb2xvclsxXTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgeUF4aXNMYWJlbFRleHQgPSBcIlwiO1xyXG4gICAgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwibGVmdFwiKSB7XHJcbiAgICAgICAgeUF4aXNMYWJlbFRleHQgPSBjaGFydEluZm8ueUF4aXNMYWJlbFswXTtcclxuICAgIH0gZWxzZSBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJyaWdodFwiKSB7XHJcbiAgICAgICAgeUF4aXNMYWJlbFRleHQgPSBjaGFydEluZm8ueUF4aXNMYWJlbFsxXTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgeUF4aXNVbml0VGV4dCA9IFwiXCI7XHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICB5QXhpc1VuaXRUZXh0ID0gY2hhcnRJbmZvLnlBeGlzVW5pdFswXTtcclxuICAgIH0gZWxzZSBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJyaWdodFwiKSB7XHJcbiAgICAgICAgeUF4aXNVbml0VGV4dCA9IGNoYXJ0SW5mby55QXhpc1VuaXRbMV07XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHlBeGlzR2VuO1xyXG4gICAgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwibGVmdFwiKSB7XHJcbiAgICAgICAgeUF4aXNHZW4gPSBkMy5heGlzTGVmdCh5U2NhbGUpO1xyXG4gICAgfSBlbHNlIGlmICh5QXhpc0xvY2F0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICB5QXhpc0dlbiA9IGQzLmF4aXNSaWdodCh5U2NhbGUpO1xyXG4gICAgfVxyXG4gICAgaWYgKHlBeGlzR2VuICYmIHZhbHVlSXNUaW1lKSB7XHJcbiAgICAgICAgbGV0IHRpY2tGb3JtYXQgPSBnZXRZVGlja0Zvcm1hdCh5TG93ZXIsIHlVcHBlcik7XHJcbiAgICAgICAgbGV0IHRpY2tWYWx1ZXMgPSBnZXRZVGlja1ZhbHVlcyh5TG93ZXIsIHlVcHBlcik7XHJcbiAgICAgICAgeUF4aXNHZW4udGlja1ZhbHVlcyh0aWNrVmFsdWVzKS50aWNrRm9ybWF0KHRpY2tGb3JtYXQpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB5QXhpcyA9IGNoYXJ0RWxlbWVudHMuZGF0YUFyZWFcclxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJ5QXhpc1wiKVxyXG4gICAgICAgIC5jYWxsKHlBeGlzR2VuKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLWF4aXNcIik7XHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICB5QXhpcy5hdHRyKFxyXG4gICAgICAgICAgICBcInRyYW5zZm9ybVwiLFxyXG4gICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoICsgXCIgLDApXCJcclxuICAgICAgICApO1xyXG4gICAgfVxyXG4gICAgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwibGVmdFwiKSB7XHJcbiAgICAgICAgY2hhcnRFbGVtZW50c1tcImxlZnRZQXhpc1wiXSA9IHlBeGlzO1xyXG4gICAgfSBlbHNlIGlmICh5QXhpc0xvY2F0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICBjaGFydEVsZW1lbnRzW1wicmlnaHRZQXhpc1wiXSA9IHlBeGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB5QXhpc0xpbmUgPSB5QXhpcy5zZWxlY3RBbGwoXCJwYXRoXCIpO1xyXG4gICAgaWYgKHlBeGlzQ29sb3IpIHtcclxuICAgICAgICB5QXhpc0xpbmUuc3R5bGUoXCJzdHJva2VcIiwgeUF4aXNDb2xvcik7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHlBeGlzVGlja3MgPSB5QXhpcy5zZWxlY3RBbGwoXCJsaW5lXCIpO1xyXG4gICAgaWYgKHlBeGlzQ29sb3IpIHtcclxuICAgICAgICB5QXhpc1RpY2tzLnN0eWxlKFwic3Ryb2tlXCIsIHlBeGlzQ29sb3IpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB5QXhpc1RpY2tMYWJlbHMgPSB5QXhpc1xyXG4gICAgICAgIC5zZWxlY3RBbGwoXCJ0ZXh0XCIpXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItdGljay1sYWJlbFwiKTtcclxuICAgIGlmICh5QXhpc0NvbG9yKSB7XHJcbiAgICAgICAgeUF4aXNUaWNrTGFiZWxzLnN0eWxlKFwiZmlsbFwiLCB5QXhpc0NvbG9yKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBHZXQgbWF4IHRpY2sgbGFiZWwgd2lkdGhcclxuICAgIGxldCB5VGlja0Zvcm1hdCA9IGQzLnRpY2tGb3JtYXQoeUxvd2VyLCB5VXBwZXIsIDEwKTtcclxuICAgIGlmICh2YWx1ZUlzVGltZSkge1xyXG4gICAgICAgIHlUaWNrRm9ybWF0ID0gZ2V0WVRpY2tGb3JtYXQoeUxvd2VyLCB5VXBwZXIsIGZhbHNlKTtcclxuICAgIH1cclxuICAgIGxldCB5TG93ZXJMYWJlbFNpemUgPSBoZWxwZXIubWVhc3VyZVRleHRTaXplKFxyXG4gICAgICAgIHlUaWNrRm9ybWF0KHlMb3dlciksXHJcbiAgICAgICAgXCJ0cmFja2VyLWF4aXMtbGFiZWxcIlxyXG4gICAgKTtcclxuICAgIGxldCB5VXBwZXJMYWJlbFNpemUgPSBoZWxwZXIubWVhc3VyZVRleHRTaXplKFxyXG4gICAgICAgIHlUaWNrRm9ybWF0KHlVcHBlciksXHJcbiAgICAgICAgXCJ0cmFja2VyLWF4aXMtbGFiZWxcIlxyXG4gICAgKTtcclxuICAgIGxldCBtYXhUaWNrTGFiZWxXaWR0aCA9IE1hdGgubWF4KFxyXG4gICAgICAgIHlMb3dlckxhYmVsU2l6ZS53aWR0aCxcclxuICAgICAgICB5VXBwZXJMYWJlbFNpemUud2lkdGhcclxuICAgICk7XHJcblxyXG4gICAgaWYgKHlBeGlzVW5pdFRleHQgIT09IFwiXCIpIHtcclxuICAgICAgICB5QXhpc0xhYmVsVGV4dCArPSBcIiAoXCIgKyB5QXhpc1VuaXRUZXh0ICsgXCIpXCI7XHJcbiAgICB9XHJcbiAgICBsZXQgeVRpY2tMZW5ndGggPSA2O1xyXG4gICAgbGV0IHlBeGlzTGFiZWxTaXplID0gaGVscGVyLm1lYXN1cmVUZXh0U2l6ZSh5QXhpc0xhYmVsVGV4dCk7XHJcbiAgICBsZXQgeUF4aXNMYWJlbCA9IHlBeGlzXHJcbiAgICAgICAgLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAudGV4dCh5QXhpc0xhYmVsVGV4dClcclxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSgtOTApXCIpXHJcbiAgICAgICAgLmF0dHIoXCJ4XCIsICgtMSAqIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCkgLyAyLjApXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItYXhpcy1sYWJlbFwiKTtcclxuICAgIGlmICh5QXhpc0xvY2F0aW9uID09PSBcImxlZnRcIikge1xyXG4gICAgICAgIHlBeGlzTGFiZWwuYXR0cihcclxuICAgICAgICAgICAgXCJ5XCIsXHJcbiAgICAgICAgICAgIC15VGlja0xlbmd0aCAtIG1heFRpY2tMYWJlbFdpZHRoIC0geUF4aXNMYWJlbFNpemUuaGVpZ2h0IC8gMi4wXHJcbiAgICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgeUF4aXNMYWJlbC5hdHRyKFxyXG4gICAgICAgICAgICBcInlcIixcclxuICAgICAgICAgICAgK3lUaWNrTGVuZ3RoICsgbWF4VGlja0xhYmVsV2lkdGggKyB5QXhpc0xhYmVsU2l6ZS5oZWlnaHRcclxuICAgICAgICApO1xyXG4gICAgfVxyXG4gICAgaWYgKHlBeGlzTGFiZWxDb2xvcikge1xyXG4gICAgICAgIHlBeGlzTGFiZWwuc3R5bGUoXCJmaWxsXCIsIHlBeGlzTGFiZWxDb2xvcik7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHlBeGlzV2lkdGggPSB5QXhpc0xhYmVsU2l6ZS5oZWlnaHQgKyBtYXhUaWNrTGFiZWxXaWR0aCArIHlUaWNrTGVuZ3RoO1xyXG4gICAgeUF4aXMuYXR0cihcIndpZHRoXCIsIHlBeGlzV2lkdGgpO1xyXG5cclxuICAgIC8vIEV4cGFuZCBhcmVhc1xyXG4gICAgaGVscGVyLmV4cGFuZEFyZWEoY2hhcnRFbGVtZW50cy5zdmcsIHlBeGlzV2lkdGgsIDApO1xyXG4gICAgaGVscGVyLmV4cGFuZEFyZWEoY2hhcnRFbGVtZW50cy5ncmFwaEFyZWEsIHlBeGlzV2lkdGgsIDApO1xyXG5cclxuICAgIC8vIE1vdmUgYXJlYXNcclxuICAgIGlmICh5QXhpc0xvY2F0aW9uID09PSBcImxlZnRcIikge1xyXG4gICAgICAgIC8vIE1vdmUgZGF0YUFyZWFcclxuICAgICAgICBoZWxwZXIubW92ZUFyZWEoY2hhcnRFbGVtZW50cy5kYXRhQXJlYSwgeUF4aXNXaWR0aCwgMCk7XHJcblxyXG4gICAgICAgIC8vIE1vdmUgdGl0bGVcclxuICAgICAgICBpZiAoY2hhcnRFbGVtZW50cy50aXRsZSkge1xyXG4gICAgICAgICAgICBoZWxwZXIubW92ZUFyZWEoY2hhcnRFbGVtZW50cy50aXRsZSwgeUF4aXNXaWR0aCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJMaW5lKFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBsaW5lSW5mbzogTGluZUluZm8sXHJcbiAgICBkYXRhc2V0OiBEYXRhc2V0LFxyXG4gICAgeUF4aXNMb2NhdGlvbjogc3RyaW5nXHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coZGF0YXNldCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvKTtcclxuXHJcbiAgICBpZiAoIXJlbmRlckluZm8gfHwgIWxpbmVJbmZvKSByZXR1cm47XHJcblxyXG4gICAgbGV0IHlTY2FsZTogYW55ID0gbnVsbDtcclxuICAgIGlmICh5QXhpc0xvY2F0aW9uID09PSBcImxlZnRcIikge1xyXG4gICAgICAgIHlTY2FsZSA9IGNoYXJ0RWxlbWVudHMubGVmdFlTY2FsZTtcclxuICAgIH0gZWxzZSBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJyaWdodFwiKSB7XHJcbiAgICAgICAgeVNjYWxlID0gY2hhcnRFbGVtZW50cy5yaWdodFlTY2FsZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobGluZUluZm8uc2hvd0xpbmVbZGF0YXNldC5nZXRJZCgpXSkge1xyXG4gICAgICAgIGxldCBsaW5lR2VuID0gZDNcclxuICAgICAgICAgICAgLmxpbmU8RGF0YVBvaW50PigpXHJcbiAgICAgICAgICAgIC5kZWZpbmVkKGZ1bmN0aW9uIChwOiBEYXRhUG9pbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwLnZhbHVlICE9PSBudWxsO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAueChmdW5jdGlvbiAocDogRGF0YVBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hhcnRFbGVtZW50cy54U2NhbGUocC5kYXRlKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnkoZnVuY3Rpb24gKHA6IERhdGFQb2ludCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHlTY2FsZShwLnZhbHVlKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGxldCBsaW5lID0gY2hhcnRFbGVtZW50cy5kYXRhQXJlYVxyXG4gICAgICAgICAgICAuYXBwZW5kKFwicGF0aFwiKVxyXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1saW5lXCIpXHJcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLCBsaW5lSW5mby5saW5lV2lkdGhbZGF0YXNldC5nZXRJZCgpXSk7XHJcblxyXG4gICAgICAgIGlmIChsaW5lSW5mby5maWxsR2FwW2RhdGFzZXQuZ2V0SWQoKV0pIHtcclxuICAgICAgICAgICAgbGluZS5kYXR1bShcclxuICAgICAgICAgICAgICAgIEFycmF5LmZyb20oZGF0YXNldCkuZmlsdGVyKGZ1bmN0aW9uIChwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAudmFsdWUgIT09IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApLmF0dHIoXCJkXCIsIGxpbmVHZW4gYXMgYW55KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsaW5lLmRhdHVtKGRhdGFzZXQpLmF0dHIoXCJkXCIsIGxpbmVHZW4gYXMgYW55KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChsaW5lSW5mby5saW5lQ29sb3JbZGF0YXNldC5nZXRJZCgpXSkge1xyXG4gICAgICAgICAgICBsaW5lLnN0eWxlKFwic3Ryb2tlXCIsIGxpbmVJbmZvLmxpbmVDb2xvcltkYXRhc2V0LmdldElkKCldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlclBvaW50cyhcclxuICAgIGNoYXJ0RWxlbWVudHM6IENoYXJ0RWxlbWVudHMsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgbGluZUluZm86IExpbmVJbmZvLFxyXG4gICAgZGF0YXNldDogRGF0YXNldCxcclxuICAgIHlBeGlzTG9jYXRpb246IHN0cmluZ1xyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKGxpbmVJbmZvKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGRhdGFzZXQpO1xyXG5cclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhbGluZUluZm8pIHJldHVybjtcclxuXHJcbiAgICBsZXQgeVNjYWxlOiBhbnkgPSBudWxsO1xyXG4gICAgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwibGVmdFwiKSB7XHJcbiAgICAgICAgeVNjYWxlID0gY2hhcnRFbGVtZW50cy5sZWZ0WVNjYWxlO1xyXG4gICAgfSBlbHNlIGlmICh5QXhpc0xvY2F0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICB5U2NhbGUgPSBjaGFydEVsZW1lbnRzLnJpZ2h0WVNjYWxlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChsaW5lSW5mby5zaG93UG9pbnRbZGF0YXNldC5nZXRJZCgpXSkge1xyXG4gICAgICAgIGxldCBkb3RzID0gY2hhcnRFbGVtZW50cy5kYXRhQXJlYVxyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwiZG90XCIpXHJcbiAgICAgICAgICAgIC5kYXRhKFxyXG4gICAgICAgICAgICAgICAgQXJyYXkuZnJvbShkYXRhc2V0KS5maWx0ZXIoZnVuY3Rpb24gKHA6IERhdGFQb2ludCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwLnZhbHVlICE9PSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAuYXBwZW5kKFwiY2lyY2xlXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiclwiLCBsaW5lSW5mby5wb2ludFNpemVbZGF0YXNldC5nZXRJZCgpXSlcclxuICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCBmdW5jdGlvbiAocDogRGF0YVBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hhcnRFbGVtZW50cy54U2NhbGUocC5kYXRlKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCBmdW5jdGlvbiAocDogRGF0YVBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geVNjYWxlKHAudmFsdWUpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcImRhdGVcIiwgZnVuY3Rpb24gKHA6IERhdGFQb2ludCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQzLnRpbWVGb3JtYXQoXCIleS0lbS0lZFwiKShwLmRhdGUgYXMgYW55KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJ2YWx1ZVwiLCBmdW5jdGlvbiAocDogRGF0YVBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocC52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKHAudmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwLnZhbHVlLnRvRml4ZWQoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwLnZhbHVlLnRvRml4ZWQoMik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hdHRyKFwidmFsdWVUeXBlXCIsIFZhbHVlVHlwZVtkYXRhc2V0LnZhbHVlVHlwZV0pXHJcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLWRvdFwiKTtcclxuICAgICAgICBpZiAobGluZUluZm8ucG9pbnRDb2xvcltkYXRhc2V0LmdldElkKCldKSB7XHJcbiAgICAgICAgICAgIGRvdHMuc3R5bGUoXCJmaWxsXCIsIGxpbmVJbmZvLnBvaW50Q29sb3JbZGF0YXNldC5nZXRJZCgpXSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICBsaW5lSW5mby5wb2ludEJvcmRlckNvbG9yW2RhdGFzZXQuZ2V0SWQoKV0gJiZcclxuICAgICAgICAgICAgICAgIGxpbmVJbmZvLnBvaW50Qm9yZGVyV2lkdGhbZGF0YXNldC5nZXRJZCgpXSA+IDAuMFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGRvdHMuc3R5bGUoXHJcbiAgICAgICAgICAgICAgICAgICAgXCJzdHJva2VcIixcclxuICAgICAgICAgICAgICAgICAgICBsaW5lSW5mby5wb2ludEJvcmRlckNvbG9yW2RhdGFzZXQuZ2V0SWQoKV1cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBkb3RzLnN0eWxlKFxyXG4gICAgICAgICAgICAgICAgICAgIFwic3Ryb2tlLXdpZHRoXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbGluZUluZm8ucG9pbnRCb3JkZXJXaWR0aFtkYXRhc2V0LmdldElkKCldXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobGluZUluZm8uYWxsb3dJbnNwZWN0RGF0YSkge1xyXG4gICAgICAgICAgICBsZXQgdG9vbHRpcCA9IGNoYXJ0RWxlbWVudHMuc3ZnLmFwcGVuZChcImdcIikuc3R5bGUoXCJvcGFjaXR5XCIsIDApO1xyXG4gICAgICAgICAgICBsZXQgdG9vbHRpcEJnID0gdG9vbHRpcFxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgcmVuZGVySW5mby50b29sdGlwU2l6ZS53aWR0aClcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHJlbmRlckluZm8udG9vbHRpcFNpemUuaGVpZ2h0KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItdG9vbHRpcFwiKTtcclxuICAgICAgICAgICAgbGV0IHRvb2x0aXBMYWJlbCA9IHRvb2x0aXBcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHJlbmRlckluZm8udG9vbHRpcFNpemUud2lkdGgpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCByZW5kZXJJbmZvLnRvb2x0aXBTaXplLmhlaWdodClcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLXRvb2x0aXAtbGFiZWxcIik7XHJcbiAgICAgICAgICAgIGxldCB0b29sdGlwTGFiZWxEYXRlID0gdG9vbHRpcExhYmVsXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwidHNwYW5cIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCA0KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIChyZW5kZXJJbmZvLnRvb2x0aXBTaXplLmhlaWdodCAvIDUpICogMik7XHJcbiAgICAgICAgICAgIGxldCB0b29sdGlwTGFiZWxWYWx1ZSA9IHRvb2x0aXBMYWJlbFxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcInRzcGFuXCIpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgNClcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAocmVuZGVySW5mby50b29sdGlwU2l6ZS5oZWlnaHQgLyA1KSAqIDQpO1xyXG5cclxuICAgICAgICAgICAgZG90cy5vbihcIm1vdXNlZW50ZXJcIiwgZnVuY3Rpb24gKGV2ZW50OiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIC8vIERhdGVcclxuICAgICAgICAgICAgICAgIHRvb2x0aXBMYWJlbERhdGUudGV4dChcImRhdGU6XCIgKyBkMy5zZWxlY3QodGhpcykuYXR0cihcImRhdGVcIikpO1xyXG4gICAgICAgICAgICAgICAgLy8gVmFsdWVcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZVR5cGUgPSBkMy5zZWxlY3QodGhpcykuYXR0cihcInZhbHVlVHlwZVwiKTtcclxuICAgICAgICAgICAgICAgIGxldCBzdHJWYWx1ZSA9IGQzLnNlbGVjdCh0aGlzKS5hdHRyKFwidmFsdWVcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVUeXBlID09PSBcIlRpbWVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkYXlTdGFydCA9IHdpbmRvdy5tb21lbnQoXCIwMDowMFwiLCBcIkhIOm1tXCIsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0aWNrVGltZSA9IGRheVN0YXJ0LmFkZChcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdChzdHJWYWx1ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2Vjb25kc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZGF0ZVZhbHVlID0gdGlja1RpbWUuZm9ybWF0KFwiSEg6bW1cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcExhYmVsVmFsdWUudGV4dChcInZhbHVlOlwiICsgZGF0ZVZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcExhYmVsVmFsdWUudGV4dChcInZhbHVlOlwiICsgc3RyVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IFt4LCB5XSA9IGQzLnBvaW50ZXIoZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHggPCByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCAvIDIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b29sdGlwLmF0dHIoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidHJhbnNmb3JtXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidHJhbnNsYXRlKFwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh4ICsgcmVuZGVySW5mby50b29sdGlwU2l6ZS53aWR0aCAqIDEuMykgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIsXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHkgLSByZW5kZXJJbmZvLnRvb2x0aXBTaXplLmhlaWdodCAqIDEuMCkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpXCJcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0b29sdGlwLmF0dHIoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidHJhbnNmb3JtXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidHJhbnNsYXRlKFwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh4IC0gcmVuZGVySW5mby50b29sdGlwU2l6ZS53aWR0aCAqIDAuMCkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIsXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHkgLSByZW5kZXJJbmZvLnRvb2x0aXBTaXplLmhlaWdodCAqIDEuMCkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpXCJcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRvb2x0aXAudHJhbnNpdGlvbigpLmR1cmF0aW9uKDIwMCkuc3R5bGUoXCJvcGFjaXR5XCIsIDEpO1xyXG4gICAgICAgICAgICB9KS5vbihcIm1vdXNlbGVhdmVcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdG9vbHRpcC50cmFuc2l0aW9uKCkuZHVyYXRpb24oNTAwKS5zdHlsZShcIm9wYWNpdHlcIiwgMCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyQmFyKFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBiYXJJbmZvOiBCYXJJbmZvLFxyXG4gICAgZGF0YXNldDogRGF0YXNldCxcclxuICAgIHlBeGlzTG9jYXRpb246IHN0cmluZyxcclxuICAgIGN1cnJCYXJTZXQ6IG51bWJlcixcclxuICAgIHRvdGFsTnVtT2ZCYXJTZXRzOiBudW1iZXJcclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhkYXRhc2V0KTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGJhckluZm8pO1xyXG4gICAgLy8gY29uc29sZS5sb2coXCIlZC8lZFwiLCBjdXJyQmFyU2V0LCB0b3RhbE51bU9mQmFyU2V0cyk7XHJcblxyXG4gICAgaWYgKCFyZW5kZXJJbmZvIHx8ICFiYXJJbmZvKSByZXR1cm47XHJcblxyXG4gICAgbGV0IGJhckdhcCA9IDE7XHJcbiAgICBsZXQgYmFyU2V0V2lkdGggPSByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCAvIGRhdGFzZXQuZ2V0TGVuZ3RoKCk7XHJcbiAgICBsZXQgYmFyV2lkdGggPSBiYXJTZXRXaWR0aDtcclxuICAgIGlmIChiYXJTZXRXaWR0aCAtIGJhckdhcCA+IDApIHtcclxuICAgICAgICBiYXJXaWR0aCA9IGJhclNldFdpZHRoIC0gYmFyR2FwO1xyXG4gICAgfVxyXG4gICAgYmFyV2lkdGggPSBiYXJXaWR0aCAvIHRvdGFsTnVtT2ZCYXJTZXRzO1xyXG5cclxuICAgIGxldCBwb3J0aW9uTGVmdCA9IChjdXJyQmFyU2V0ICsgMSkgLyB0b3RhbE51bU9mQmFyU2V0cztcclxuXHJcbiAgICBsZXQgeVNjYWxlOiBhbnkgPSBudWxsO1xyXG4gICAgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwibGVmdFwiKSB7XHJcbiAgICAgICAgeVNjYWxlID0gY2hhcnRFbGVtZW50cy5sZWZ0WVNjYWxlO1xyXG4gICAgfSBlbHNlIGlmICh5QXhpc0xvY2F0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICB5U2NhbGUgPSBjaGFydEVsZW1lbnRzLnJpZ2h0WVNjYWxlO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBiYXJzID0gY2hhcnRFbGVtZW50cy5kYXRhQXJlYVxyXG4gICAgICAgIC5zZWxlY3RBbGwoXCJiYXJcIilcclxuICAgICAgICAuZGF0YShcclxuICAgICAgICAgICAgQXJyYXkuZnJvbShkYXRhc2V0KS5maWx0ZXIoZnVuY3Rpb24gKHA6IERhdGFQb2ludCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHAudmFsdWUgIT09IG51bGw7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24gKHA6IERhdGFQb2ludCwgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGlmIChpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcG9ydGlvblZpc2libGUgPSBjdXJyQmFyU2V0ICsgMSAtIHRvdGFsTnVtT2ZCYXJTZXRzIC8gMi4wO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBvcnRpb25WaXNpYmxlIDwgMS4wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRFbGVtZW50cy54U2NhbGUocC5kYXRlKSAtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhclNldFdpZHRoIC8gMi4wICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyckJhclNldCAqIGJhcldpZHRoICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9ydGlvblZpc2libGUgKiBiYXJXaWR0aFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIGNoYXJ0RWxlbWVudHMueFNjYWxlKHAuZGF0ZSkgLVxyXG4gICAgICAgICAgICAgICAgYmFyU2V0V2lkdGggLyAyLjAgK1xyXG4gICAgICAgICAgICAgICAgY3VyckJhclNldCAqIGJhcldpZHRoXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24gKHA6IERhdGFQb2ludCkge1xyXG4gICAgICAgICAgICByZXR1cm4geVNjYWxlKE1hdGgubWF4KHAudmFsdWUsIDApKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZnVuY3Rpb24gKHA6IERhdGFQb2ludCwgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGlmIChpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcG9ydGlvblZpc2libGUgPSBjdXJyQmFyU2V0ICsgMSAtIHRvdGFsTnVtT2ZCYXJTZXRzIC8gMi4wO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBvcnRpb25WaXNpYmxlIDwgMC4wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAuMDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocG9ydGlvblZpc2libGUgPCAxLjApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmFyV2lkdGggKiBwb3J0aW9uVmlzaWJsZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBiYXJXaWR0aDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpID09PSBkYXRhc2V0LmdldExlbmd0aCgpIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHBvcnRpb25WaXNpYmxlID1cclxuICAgICAgICAgICAgICAgICAgICAxLjAgLSAoY3VyckJhclNldCArIDEgLSB0b3RhbE51bU9mQmFyU2V0cyAvIDIuMCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocG9ydGlvblZpc2libGUgPCAwLjApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMC4wO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwb3J0aW9uVmlzaWJsZSA8IDEuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiYXJXaWR0aCAqIHBvcnRpb25WaXNpYmxlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJhcldpZHRoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBiYXJXaWR0aDtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uIChwOiBEYXRhUG9pbnQpIHtcclxuICAgICAgICAgICAgaWYgKHAudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmFicyh5U2NhbGUocC52YWx1ZSkgLSB5U2NhbGUoMCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1iYXJcIik7XHJcblxyXG4gICAgaWYgKGJhckluZm8uYmFyQ29sb3JbZGF0YXNldC5nZXRJZCgpXSkge1xyXG4gICAgICAgIGJhcnMuc3R5bGUoXCJmaWxsXCIsIGJhckluZm8uYmFyQ29sb3JbZGF0YXNldC5nZXRJZCgpXSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckxlZ2VuZChcclxuICAgIGNoYXJ0RWxlbWVudHM6IENoYXJ0RWxlbWVudHMsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgY2hhcnRJbmZvOiBDb21tb25DaGFydEluZm9cclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLmxlZ2VuZFBvc2l0aW9uKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8ubGVnZW5kT3JpZW50YXRpb24pO1xyXG5cclxuICAgIC8vIEdldCBjaGFydCBlbGVtZW50c1xyXG4gICAgbGV0IHN2ZyA9IGNoYXJ0RWxlbWVudHMuc3ZnO1xyXG4gICAgbGV0IGdyYXBoQXJlYSA9IGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhO1xyXG4gICAgbGV0IGRhdGFBcmVhID0gY2hhcnRFbGVtZW50cy5kYXRhQXJlYTtcclxuICAgIGxldCB0aXRsZSA9IGNoYXJ0RWxlbWVudHMudGl0bGU7XHJcbiAgICBsZXQgeEF4aXMgPSBjaGFydEVsZW1lbnRzLnhBeGlzO1xyXG4gICAgbGV0IGxlZnRZQXhpcyA9IGNoYXJ0RWxlbWVudHMubGVmdFlBeGlzO1xyXG4gICAgbGV0IHJpZ2h0WUF4aXMgPSBjaGFydEVsZW1lbnRzLnJpZ2h0WUF4aXM7XHJcblxyXG4gICAgLy8gR2V0IGVsZW1lbnQgd2lkdGggYW5kIGhlaWdodFxyXG4gICAgbGV0IHRpdGxlSGVpZ2h0ID0gMC4wO1xyXG4gICAgaWYgKHRpdGxlKSB7XHJcbiAgICAgICAgdGl0bGVIZWlnaHQgPSBwYXJzZUZsb2F0KHRpdGxlLmF0dHIoXCJoZWlnaHRcIikpO1xyXG4gICAgfVxyXG4gICAgbGV0IHhBeGlzSGVpZ2h0ID0gcGFyc2VGbG9hdCh4QXhpcy5hdHRyKFwiaGVpZ2h0XCIpKTtcclxuICAgIGxldCBsZWZ0WUF4aXNXaWR0aCA9IDAuMDtcclxuICAgIGlmIChsZWZ0WUF4aXMpIHtcclxuICAgICAgICBsZWZ0WUF4aXNXaWR0aCA9IHBhcnNlRmxvYXQobGVmdFlBeGlzLmF0dHIoXCJ3aWR0aFwiKSk7XHJcbiAgICB9XHJcbiAgICBsZXQgcmlnaHRZQXhpc1dpZHRoID0gMC4wO1xyXG4gICAgaWYgKHJpZ2h0WUF4aXMpIHtcclxuICAgICAgICByaWdodFlBeGlzV2lkdGggPSBwYXJzZUZsb2F0KHJpZ2h0WUF4aXMuYXR0cihcIndpZHRoXCIpKTtcclxuICAgIH1cclxuICAgIC8vIEdldCBkYXRhc2V0c1xyXG4gICAgbGV0IGRhdGFzZXRzID0gcmVuZGVySW5mby5kYXRhc2V0cztcclxuICAgIGxldCB4RGF0YXNldElkcyA9IGRhdGFzZXRzLmdldFhEYXRhc2V0SWRzKCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyh4RGF0YXNldElkcyk7XHJcblxyXG4gICAgLy8gR2V0IG5hbWVzIGFuZCB0aGVpciBkaW1lbnNpb25cclxuICAgIGxldCBuYW1lcyA9IGRhdGFzZXRzLmdldE5hbWVzKCk7IC8vIHhEYXRhc2V0IG5hbWUgaW5jbHVkZWRcclxuICAgIGxldCBuYW1lU2l6ZXMgPSBuYW1lcy5tYXAoZnVuY3Rpb24gKG4pIHtcclxuICAgICAgICByZXR1cm4gaGVscGVyLm1lYXN1cmVUZXh0U2l6ZShuLCBcInRyYWNrZXItbGVnZW5kLWxhYmVsXCIpO1xyXG4gICAgfSk7XHJcbiAgICBsZXQgaW5kTWF4TmFtZSA9IDA7XHJcbiAgICBsZXQgbWF4TmFtZVdpZHRoID0gMC4wO1xyXG4gICAgZm9yIChsZXQgaW5kID0gMDsgaW5kIDwgbmFtZXMubGVuZ3RoOyBpbmQrKykge1xyXG4gICAgICAgIGlmICh4RGF0YXNldElkcy5pbmNsdWRlcyhpbmQpKSBjb250aW51ZTtcclxuICAgICAgICBpZiAobmFtZVNpemVzW2luZF0ud2lkdGggPiBtYXhOYW1lV2lkdGgpIHtcclxuICAgICAgICAgICAgbWF4TmFtZVdpZHRoID0gbmFtZVNpemVzW2luZF0ud2lkdGg7XHJcbiAgICAgICAgICAgIGluZE1heE5hbWUgPSBpbmQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbGV0IG1heE5hbWUgPSBuYW1lc1tpbmRNYXhOYW1lXTtcclxuICAgIGxldCBjaGFyYWN0ZXJXaWR0aCA9IG1heE5hbWVXaWR0aCAvIG1heE5hbWUubGVuZ3RoO1xyXG4gICAgbGV0IG5hbWVIZWlnaHQgPSBuYW1lU2l6ZXNbaW5kTWF4TmFtZV0uaGVpZ2h0O1xyXG4gICAgbGV0IG51bU5hbWVzID0gbmFtZXMubGVuZ3RoIC0geERhdGFzZXRJZHMubGVuZ3RoO1xyXG5cclxuICAgIGxldCB4U3BhY2luZyA9IDIgKiBjaGFyYWN0ZXJXaWR0aDtcclxuICAgIGxldCB5U3BhY2luZyA9IG5hbWVIZWlnaHQ7XHJcbiAgICBsZXQgbWFya2VyV2lkdGggPSAyICogY2hhcmFjdGVyV2lkdGg7XHJcblxyXG4gICAgLy8gR2V0IGxlZ2VuZCB3aWR0aCBhbmQgaGVpZ2h0XHJcbiAgICBsZXQgbGVnZW5kV2lkdGggPSAwO1xyXG4gICAgbGV0IGxlZ2VuZEhlaWdodCA9IDA7XHJcbiAgICBpZiAoY2hhcnRJbmZvLmxlZ2VuZE9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIpIHtcclxuICAgICAgICBsZWdlbmRXaWR0aCA9IHhTcGFjaW5nICogMyArIG1hcmtlcldpZHRoICsgbWF4TmFtZVdpZHRoO1xyXG4gICAgICAgIGxlZ2VuZEhlaWdodCA9IChudW1OYW1lcyArIDEpICogeVNwYWNpbmc7XHJcbiAgICB9IGVsc2UgaWYgKGNoYXJ0SW5mby5sZWdlbmRPcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIpIHtcclxuICAgICAgICBsZWdlbmRXaWR0aCA9XHJcbiAgICAgICAgICAgICgyICogeFNwYWNpbmcgKyBtYXJrZXJXaWR0aCkgKiBudW1OYW1lcyArXHJcbiAgICAgICAgICAgIHhTcGFjaW5nICtcclxuICAgICAgICAgICAgZDMuc3VtKG5hbWVTaXplcywgZnVuY3Rpb24gKHMsIGkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh4RGF0YXNldElkcy5pbmNsdWRlcyhpKSkgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcy53aWR0aDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgbGVnZW5kSGVpZ2h0ID0geVNwYWNpbmcgKyBuYW1lSGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coXHJcbiAgICAvLyAgICAgYG1heE5hbWU6ICR7bWF4TmFtZX0sIGNoYXJhY3RlcldpZHRoOiAke2NoYXJhY3RlcldpZHRofSwgbWF4TmFtZVdpZHRoOiAke21heE5hbWVXaWR0aH1gXHJcbiAgICAvLyApO1xyXG4gICAgLy8gY29uc29sZS5sb2coYHhTcGFjaW5nOiR7eFNwYWNpbmd9LCBudW1OYW1lczogJHtudW1OYW1lc30sIG1hcmtlcldpZHRoOiAke21hcmtlcldpZHRofWApO1xyXG4gICAgLy8gY29uc29sZS5sb2coYGxlZ2VuZFdpZHRoOiAke2xlZ2VuZFdpZHRofSwgbGVnZW5kSGVpZ2h0OiAke2xlZ2VuZEhlaWdodH1gKTtcclxuXHJcbiAgICAvLyBDYWxjdWFsdGUgbGVuZ2VuZFggYW5kIGxlZ2VuZFlcclxuICAgIGxldCBsZWdlbmRYID0gMC4wOyAvLyByZWxhdGl2ZSB0byBncmFwaEFyZWFcclxuICAgIGxldCBsZWdlbmRZID0gMC4wO1xyXG4gICAgaWYgKGNoYXJ0SW5mby5sZWdlbmRQb3NpdGlvbiA9PT0gXCJ0b3BcIikge1xyXG4gICAgICAgIC8vIGJlbG93IHRpdGxlXHJcbiAgICAgICAgbGVnZW5kWCA9XHJcbiAgICAgICAgICAgIGxlZnRZQXhpc1dpZHRoICtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggLyAyLjAgLVxyXG4gICAgICAgICAgICBsZWdlbmRXaWR0aCAvIDIuMDtcclxuICAgICAgICBsZWdlbmRZID0gdGl0bGVIZWlnaHQ7XHJcbiAgICAgICAgLy8gRXhwYW5kIHN2Z1xyXG4gICAgICAgIGhlbHBlci5leHBhbmRBcmVhKHN2ZywgMCwgbGVnZW5kSGVpZ2h0ICsgeVNwYWNpbmcpO1xyXG4gICAgICAgIC8vIE1vdmUgZGF0YUFyZWEgZG93blxyXG4gICAgICAgIGhlbHBlci5tb3ZlQXJlYShkYXRhQXJlYSwgMCwgbGVnZW5kSGVpZ2h0ICsgeVNwYWNpbmcpO1xyXG4gICAgfSBlbHNlIGlmIChjaGFydEluZm8ubGVnZW5kUG9zaXRpb24gPT09IFwiYm90dG9tXCIpIHtcclxuICAgICAgICAvLyBiZWxsb3cgeC1heGlzIGxhYmVsXHJcbiAgICAgICAgbGVnZW5kWCA9XHJcbiAgICAgICAgICAgIGxlZnRZQXhpc1dpZHRoICtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggLyAyLjAgLVxyXG4gICAgICAgICAgICBsZWdlbmRXaWR0aCAvIDIuMDtcclxuICAgICAgICBsZWdlbmRZID1cclxuICAgICAgICAgICAgdGl0bGVIZWlnaHQgK1xyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQgK1xyXG4gICAgICAgICAgICB4QXhpc0hlaWdodCArXHJcbiAgICAgICAgICAgIHlTcGFjaW5nO1xyXG4gICAgICAgIC8vIEV4cGFuZCBzdmdcclxuICAgICAgICBoZWxwZXIuZXhwYW5kQXJlYShzdmcsIDAsIGxlZ2VuZEhlaWdodCArIHlTcGFjaW5nKTtcclxuICAgIH0gZWxzZSBpZiAoY2hhcnRJbmZvLmxlZ2VuZFBvc2l0aW9uID09PSBcImxlZnRcIikge1xyXG4gICAgICAgIGxlZ2VuZFggPSAwO1xyXG4gICAgICAgIGxlZ2VuZFkgPVxyXG4gICAgICAgICAgICB0aXRsZUhlaWdodCArXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCAvIDIuMCAtXHJcbiAgICAgICAgICAgIGxlZ2VuZEhlaWdodCAvIDIuMDtcclxuICAgICAgICAvLyBFeHBhbmQgc3ZnXHJcbiAgICAgICAgaGVscGVyLmV4cGFuZEFyZWEoc3ZnLCBsZWdlbmRXaWR0aCArIHhTcGFjaW5nLCAwKTtcclxuICAgICAgICAvLyBNb3ZlIGRhdGFBcmVhIHJpZ2h0XHJcbiAgICAgICAgaGVscGVyLm1vdmVBcmVhKGRhdGFBcmVhLCBsZWdlbmRXaWR0aCArIHhTcGFjaW5nLCAwKTtcclxuICAgIH0gZWxzZSBpZiAoY2hhcnRJbmZvLmxlZ2VuZFBvc2l0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICBsZWdlbmRYID1cclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggK1xyXG4gICAgICAgICAgICBsZWZ0WUF4aXNXaWR0aCArXHJcbiAgICAgICAgICAgIHJpZ2h0WUF4aXNXaWR0aCArXHJcbiAgICAgICAgICAgIHhTcGFjaW5nO1xyXG4gICAgICAgIGxlZ2VuZFkgPVxyXG4gICAgICAgICAgICB0aXRsZUhlaWdodCArXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCAvIDIuMCAtXHJcbiAgICAgICAgICAgIGxlZ2VuZEhlaWdodCAvIDIuMDtcclxuICAgICAgICAvLyBFeHBhbmQgc3ZnXHJcbiAgICAgICAgaGVscGVyLmV4cGFuZEFyZWEoc3ZnLCBsZWdlbmRXaWR0aCArIHhTcGFjaW5nLCAwKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coYGxlZ2VuZFg6ICR7bGVnZW5kWH0sIGxlZ2VuZFk6ICR7bGVnZW5kWX1gKTtcclxuXHJcbiAgICBsZXQgbGVnZW5kID0gY2hhcnRFbGVtZW50cy5ncmFwaEFyZWFcclxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJsZWdlbmRcIilcclxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIGxlZ2VuZFggKyBcIixcIiArIGxlZ2VuZFkgKyBcIilcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnbGVnZW5kWDogJWQsIGxlZ2VuZFk6ICVkJywgbGVnZW5kWCwgbGVnZW5kWSk7XHJcblxyXG4gICAgbGV0IGxlZ2VuZEJnID0gbGVnZW5kXHJcbiAgICAgICAgLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1sZWdlbmRcIilcclxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIGxlZ2VuZFdpZHRoKVxyXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGxlZ2VuZEhlaWdodCk7XHJcbiAgICBpZiAoY2hhcnRJbmZvLmxlZ2VuZEJnQ29sb3IpIHtcclxuICAgICAgICBsZWdlbmRCZy5zdHlsZShcImZpbGxcIiwgY2hhcnRJbmZvLmxlZ2VuZEJnQ29sb3IpO1xyXG4gICAgfVxyXG4gICAgaWYgKGNoYXJ0SW5mby5sZWdlbmRCb3JkZXJDb2xvcikge1xyXG4gICAgICAgIGxlZ2VuZEJnLnN0eWxlKFwic3Ryb2tlXCIsIGNoYXJ0SW5mby5sZWdlbmRCb3JkZXJDb2xvcik7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGZpcnN0TWFya2VyWCA9IHhTcGFjaW5nO1xyXG4gICAgbGV0IGZpcnN0TWFya2VyWSA9IG5hbWVIZWlnaHQ7XHJcbiAgICBsZXQgZmlyc3RMYWJlbFggPSBmaXJzdE1hcmtlclggKyB4U3BhY2luZyArIG1hcmtlcldpZHRoOyAvLyB4U3BhY2luZyArIDIgKiB4U3BhaW5nXHJcbiAgICBsZXQgZmlyc3RMYWJlbFkgPSBmaXJzdE1hcmtlclk7XHJcblxyXG4gICAgaWYgKGNoYXJ0SW5mby5sZWdlbmRPcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XHJcbiAgICAgICAgaWYgKGNoYXJ0SW5mby5HZXRDaGFydFR5cGUoKSA9PT0gT3V0cHV0VHlwZS5MaW5lKSB7XHJcbiAgICAgICAgICAgIC8vIGxpbmVzXHJcbiAgICAgICAgICAgIGxlZ2VuZFxyXG4gICAgICAgICAgICAgICAgLnNlbGVjdEFsbChcIm1hcmtlcnNcIilcclxuICAgICAgICAgICAgICAgIC5kYXRhKG5hbWVzKVxyXG4gICAgICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJsaW5lXCIpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcIngxXCIsIGZpcnN0TWFya2VyWClcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgZmlyc3RNYXJrZXJYICsgbWFya2VyV2lkdGgpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInkxXCIsIGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBudW1FbGVtc0V4Y2x1ZGVkID0geERhdGFzZXRJZHMuZmlsdGVyKChpZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWQgPCBpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBpID0gaSAtIG51bUVsZW1zRXhjbHVkZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0TWFya2VyWSArIGkgKiB5U3BhY2luZztcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInkyXCIsIGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBudW1FbGVtc0V4Y2x1ZGVkID0geERhdGFzZXRJZHMuZmlsdGVyKChpZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWQgPCBpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBpID0gaSAtIG51bUVsZW1zRXhjbHVkZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0TWFya2VyWSArIGkgKiB5U3BhY2luZztcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJzdHJva2VcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhEYXRhc2V0SWRzLmluY2x1ZGVzKGkpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjaGFydEluZm8gYXMgTGluZUluZm8pLmxpbmVDb2xvcltpXTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gcG9pbnRzXHJcbiAgICAgICAgICAgIGxlZ2VuZFxyXG4gICAgICAgICAgICAgICAgLnNlbGVjdEFsbChcIm1hcmtlcnNcIilcclxuICAgICAgICAgICAgICAgIC5kYXRhKG5hbWVzKVxyXG4gICAgICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgZmlyc3RNYXJrZXJYICsgbWFya2VyV2lkdGggLyAyLjApXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBudW1FbGVtc0V4Y2x1ZGVkID0geERhdGFzZXRJZHMuZmlsdGVyKChpZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWQgPCBpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBpID0gaSAtIG51bUVsZW1zRXhjbHVkZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0TWFya2VyWSArIGkgKiB5U3BhY2luZztcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInJcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhEYXRhc2V0SWRzLmluY2x1ZGVzKGkpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChjaGFydEluZm8gYXMgTGluZUluZm8pLnNob3dQb2ludFtpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGNoYXJ0SW5mbyBhcyBMaW5lSW5mbykucG9pbnRTaXplW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMC4wO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhEYXRhc2V0SWRzLmluY2x1ZGVzKGkpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjaGFydEluZm8gYXMgTGluZUluZm8pLnBvaW50Q29sb3JbaV07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKGNoYXJ0SW5mby5HZXRDaGFydFR5cGUoKSA9PT0gT3V0cHV0VHlwZS5CYXIpIHtcclxuICAgICAgICAgICAgLy8gYmFyc1xyXG4gICAgICAgICAgICBsZWdlbmRcclxuICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJtYXJrZXJzXCIpXHJcbiAgICAgICAgICAgICAgICAuZGF0YShuYW1lcylcclxuICAgICAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwicmVjdFwiKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGZpcnN0TWFya2VyWClcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbnVtRWxlbXNFeGNsdWRlZCA9IHhEYXRhc2V0SWRzLmZpbHRlcigoaWQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkIDwgaTtcclxuICAgICAgICAgICAgICAgICAgICB9KS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IGkgLSBudW1FbGVtc0V4Y2x1ZGVkO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaXJzdE1hcmtlclkgKyBpICogeVNwYWNpbmcgLSBuYW1lSGVpZ2h0IC8gMi4wO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgbWFya2VyV2lkdGgpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBuYW1lSGVpZ2h0KVxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeERhdGFzZXRJZHMuaW5jbHVkZXMoaSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGNoYXJ0SW5mbyBhcyBCYXJJbmZvKS5iYXJDb2xvcltpXTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbmFtZXNcclxuICAgICAgICBsZXQgbmFtZUxhYmVscyA9IGxlZ2VuZFxyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwibGFiZWxzXCIpXHJcbiAgICAgICAgICAgIC5kYXRhKG5hbWVzKVxyXG4gICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgZmlyc3RMYWJlbFgpXHJcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIGxldCBudW1FbGVtc0V4Y2x1ZGVkID0geERhdGFzZXRJZHMuZmlsdGVyKChpZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpZCA8IGk7XHJcbiAgICAgICAgICAgICAgICB9KS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBpID0gaSAtIG51bUVsZW1zRXhjbHVkZWQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlyc3RMYWJlbFkgKyBpICogeVNwYWNpbmc7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHhEYXRhc2V0SWRzLmluY2x1ZGVzKGkpKSByZXR1cm4gXCJcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuYW1lO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJhbGlnbm1lbnQtYmFzZWxpbmVcIiwgXCJtaWRkbGVcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItbGVnZW5kLWxhYmVsXCIpO1xyXG5cclxuICAgICAgICBpZiAoY2hhcnRJbmZvLkdldENoYXJ0VHlwZSgpID09PSBPdXRwdXRUeXBlLkxpbmUpIHtcclxuICAgICAgICAgICAgbmFtZUxhYmVscy5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeERhdGFzZXRJZHMuaW5jbHVkZXMoaSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoY2hhcnRJbmZvIGFzIExpbmVJbmZvKS5saW5lQ29sb3JbaV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY2hhcnRJbmZvLkdldENoYXJ0VHlwZSgpID09PSBPdXRwdXRUeXBlLkJhcikge1xyXG4gICAgICAgICAgICBuYW1lTGFiZWxzLnN0eWxlKFwiZmlsbFwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh4RGF0YXNldElkcy5pbmNsdWRlcyhpKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChjaGFydEluZm8gYXMgQmFySW5mbykuYmFyQ29sb3JbaV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoY2hhcnRJbmZvLmxlZ2VuZE9yaWVudGF0aW9uID09PSBcImhvcml6b250YWxcIikge1xyXG4gICAgICAgIGxldCBjdXJyUmVuZGVyUG9zWCA9IDAuMDtcclxuICAgICAgICBsZXQgY3VyclJlbmRlclBvc1gyID0gMC4wO1xyXG4gICAgICAgIGlmIChjaGFydEluZm8uR2V0Q2hhcnRUeXBlKCkgPT09IE91dHB1dFR5cGUuTGluZSkge1xyXG4gICAgICAgICAgICAvLyBsaW5lc1xyXG4gICAgICAgICAgICBsZWdlbmRcclxuICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJtYXJrZXJzXCIpXHJcbiAgICAgICAgICAgICAgICAuZGF0YShuYW1lcylcclxuICAgICAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwibGluZVwiKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbnVtRWxlbXNFeGNsdWRlZCA9IHhEYXRhc2V0SWRzLmZpbHRlcigoaWQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkIDwgaTtcclxuICAgICAgICAgICAgICAgICAgICB9KS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IGkgLSBudW1FbGVtc0V4Y2x1ZGVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJSZW5kZXJQb3NYID0gZmlyc3RNYXJrZXJYO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJSZW5kZXJQb3NYICs9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lU2l6ZXNbaV0ud2lkdGggK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeFNwYWNpbmcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyV2lkdGggK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeFNwYWNpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyUmVuZGVyUG9zWDtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcIngyXCIsIGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBudW1FbGVtc0V4Y2x1ZGVkID0geERhdGFzZXRJZHMuZmlsdGVyKChpZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWQgPCBpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBpID0gaSAtIG51bUVsZW1zRXhjbHVkZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyclJlbmRlclBvc1gyID0gZmlyc3RNYXJrZXJYICsgbWFya2VyV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyclJlbmRlclBvc1gyICs9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lU2l6ZXNbaV0ud2lkdGggK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeFNwYWNpbmcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyV2lkdGggK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeFNwYWNpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyUmVuZGVyUG9zWDI7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCBmaXJzdE1hcmtlclkpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInkyXCIsIGZpcnN0TWFya2VyWSlcclxuICAgICAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeERhdGFzZXRJZHMuaW5jbHVkZXMoaSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGNoYXJ0SW5mbyBhcyBMaW5lSW5mbykubGluZUNvbG9yW2ldO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBwb2ludHNcclxuICAgICAgICAgICAgY3VyclJlbmRlclBvc1ggPSAwLjA7XHJcbiAgICAgICAgICAgIGxlZ2VuZFxyXG4gICAgICAgICAgICAgICAgLnNlbGVjdEFsbChcIm1hcmtlcnNcIilcclxuICAgICAgICAgICAgICAgIC5kYXRhKG5hbWVzKVxyXG4gICAgICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG51bUVsZW1zRXhjbHVkZWQgPSB4RGF0YXNldElkcy5maWx0ZXIoKGlkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpZCA8IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSBpIC0gbnVtRWxlbXNFeGNsdWRlZDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyUmVuZGVyUG9zWCA9IGZpcnN0TWFya2VyWCArIG1hcmtlcldpZHRoIC8gMi4wO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJSZW5kZXJQb3NYICs9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lU2l6ZXNbaV0ud2lkdGggK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeFNwYWNpbmcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyV2lkdGggK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeFNwYWNpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyUmVuZGVyUG9zWDtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImN5XCIsIGZpcnN0TWFya2VyWSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiclwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeERhdGFzZXRJZHMuaW5jbHVkZXMoaSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKGNoYXJ0SW5mbyBhcyBMaW5lSW5mbykuc2hvd1BvaW50W2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoY2hhcnRJbmZvIGFzIExpbmVJbmZvKS5wb2ludFNpemVbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwLjA7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeERhdGFzZXRJZHMuaW5jbHVkZXMoaSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGNoYXJ0SW5mbyBhcyBMaW5lSW5mbykucG9pbnRDb2xvcltpXTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY2hhcnRJbmZvLkdldENoYXJ0VHlwZSgpID09PSBPdXRwdXRUeXBlLkJhcikge1xyXG4gICAgICAgICAgICAvLyBiYXJzXHJcbiAgICAgICAgICAgIGN1cnJSZW5kZXJQb3NYID0gMC4wO1xyXG4gICAgICAgICAgICBsZWdlbmRcclxuICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJtYXJrZXJzXCIpXHJcbiAgICAgICAgICAgICAgICAuZGF0YShcclxuICAgICAgICAgICAgICAgICAgICBuYW1lcy5maWx0ZXIoKG4sIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICF4RGF0YXNldElkcy5pbmNsdWRlcyhpKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG51bUVsZW1zRXhjbHVkZWQgPSB4RGF0YXNldElkcy5maWx0ZXIoKGlkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpZCA8IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSBpIC0gbnVtRWxlbXNFeGNsdWRlZDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyUmVuZGVyUG9zWCA9IGZpcnN0TWFya2VyWDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyUmVuZGVyUG9zWCArPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVNpemVzW2ldLndpZHRoICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhTcGFjaW5nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcldpZHRoICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhTcGFjaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VyclJlbmRlclBvc1g7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGZpcnN0TWFya2VyWSAtIG5hbWVIZWlnaHQgLyAyLjApXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIG1hcmtlcldpZHRoKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgbmFtZUhlaWdodClcclxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhEYXRhc2V0SWRzLmluY2x1ZGVzKGkpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjaGFydEluZm8gYXMgQmFySW5mbykuYmFyQ29sb3JbaV07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIG5hbWVzXHJcbiAgICAgICAgY3VyclJlbmRlclBvc1ggPSAwLjA7XHJcbiAgICAgICAgbGV0IG5hbWVMYWJlbHMgPSBsZWdlbmRcclxuICAgICAgICAgICAgLnNlbGVjdEFsbChcImxhYmVsc1wiKVxyXG4gICAgICAgICAgICAuZGF0YShuYW1lcylcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgbGV0IG51bUVsZW1zRXhjbHVkZWQgPSB4RGF0YXNldElkcy5maWx0ZXIoKGlkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkIDwgaTtcclxuICAgICAgICAgICAgICAgIH0pLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGkgPSBpIC0gbnVtRWxlbXNFeGNsdWRlZDtcclxuICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VyclJlbmRlclBvc1ggPSBmaXJzdExhYmVsWDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VyclJlbmRlclBvc1ggKz1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVNpemVzW2ldLndpZHRoICsgeFNwYWNpbmcgKyBtYXJrZXJXaWR0aCArIHhTcGFjaW5nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJSZW5kZXJQb3NYO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgZmlyc3RMYWJlbFkpXHJcbiAgICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHhEYXRhc2V0SWRzLmluY2x1ZGVzKGkpKSByZXR1cm4gXCJcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuYW1lO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJhbGlnbm1lbnQtYmFzZWxpbmVcIiwgXCJtaWRkbGVcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItbGVnZW5kLWxhYmVsXCIpO1xyXG5cclxuICAgICAgICBpZiAoY2hhcnRJbmZvLkdldENoYXJ0VHlwZSgpID09PSBPdXRwdXRUeXBlLkxpbmUpIHtcclxuICAgICAgICAgICAgbmFtZUxhYmVscy5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeERhdGFzZXRJZHMuaW5jbHVkZXMoaSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoY2hhcnRJbmZvIGFzIExpbmVJbmZvKS5saW5lQ29sb3JbaV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY2hhcnRJbmZvLkdldENoYXJ0VHlwZSgpID09PSBPdXRwdXRUeXBlLkJhcikge1xyXG4gICAgICAgICAgICBuYW1lTGFiZWxzLnN0eWxlKFwiZmlsbFwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh4RGF0YXNldElkcy5pbmNsdWRlcyhpKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChjaGFydEluZm8gYXMgQmFySW5mbykuYmFyQ29sb3JbaV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyVGl0bGUoXHJcbiAgICBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzLFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGNoYXJ0SW5mbzogQ29tbW9uQ2hhcnRJbmZvXHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJUaXRsZVwiKVxyXG4gICAgLy8gdW5kZXIgZ3JhcGhBcmVhXHJcblxyXG4gICAgaWYgKCFyZW5kZXJJbmZvIHx8ICFjaGFydEluZm8pIHJldHVybjtcclxuXHJcbiAgICBpZiAoIWNoYXJ0SW5mby50aXRsZSkgcmV0dXJuO1xyXG4gICAgbGV0IHRpdGxlU2l6ZSA9IGhlbHBlci5tZWFzdXJlVGV4dFNpemUoY2hhcnRJbmZvLnRpdGxlLCBcInRyYWNrZXItdGl0bGVcIik7XHJcblxyXG4gICAgLy8gQXBwZW5kIHRpdGxlXHJcbiAgICBsZXQgdGl0bGUgPSBjaGFydEVsZW1lbnRzLmdyYXBoQXJlYVxyXG4gICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgICAgLnRleHQoY2hhcnRJbmZvLnRpdGxlKSAvLyBwaXZvdCBhdCBjZW50ZXJcclxuICAgICAgICAuYXR0cihcImlkXCIsIFwidGl0bGVcIilcclxuICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgXCJ0cmFuc2Zvcm1cIixcclxuICAgICAgICAgICAgXCJ0cmFuc2xhdGUoXCIgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggLyAyLjAgK1xyXG4gICAgICAgICAgICAgICAgXCIsXCIgK1xyXG4gICAgICAgICAgICAgICAgdGl0bGVTaXplLmhlaWdodCAvIDIuMCArXHJcbiAgICAgICAgICAgICAgICBcIilcIlxyXG4gICAgICAgIClcclxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCB0aXRsZVNpemUuaGVpZ2h0KSAvLyBmb3IgbGF0ZXIgdXNlXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItdGl0bGVcIik7XHJcbiAgICBjaGFydEVsZW1lbnRzW1widGl0bGVcIl0gPSB0aXRsZTtcclxuXHJcbiAgICAvLyBFeHBhbmQgcGFyZW50IGFyZWFzXHJcbiAgICBoZWxwZXIuZXhwYW5kQXJlYShjaGFydEVsZW1lbnRzLnN2ZywgMCwgdGl0bGVTaXplLmhlaWdodCk7XHJcbiAgICBoZWxwZXIuZXhwYW5kQXJlYShjaGFydEVsZW1lbnRzLmdyYXBoQXJlYSwgMCwgdGl0bGVTaXplLmhlaWdodCk7XHJcblxyXG4gICAgLy8gTW92ZSBzaWJsaW5nIGFyZWFzXHJcbiAgICBoZWxwZXIubW92ZUFyZWEoY2hhcnRFbGVtZW50cy5kYXRhQXJlYSwgMCwgdGl0bGVTaXplLmhlaWdodCk7XHJcblxyXG4gICAgcmV0dXJuO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRDaGFydFNjYWxlKFxyXG4gICAgX2NhbnZhczogSFRNTEVsZW1lbnQsXHJcbiAgICBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzLFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mb1xyXG4pIHtcclxuICAgIGxldCBjYW52YXMgPSBkMy5zZWxlY3QoX2NhbnZhcyk7XHJcbiAgICBsZXQgc3ZnID0gY2hhcnRFbGVtZW50cy5zdmc7XHJcbiAgICBsZXQgc3ZnV2lkdGggPSBwYXJzZUZsb2F0KHN2Zy5hdHRyKFwid2lkdGhcIikpO1xyXG4gICAgbGV0IHN2Z0hlaWdodCA9IHBhcnNlRmxvYXQoc3ZnLmF0dHIoXCJoZWlnaHRcIikpO1xyXG4gICAgc3ZnLmF0dHIoXCJ3aWR0aFwiLCBudWxsKVxyXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIG51bGwpXHJcbiAgICAgICAgLmF0dHIoXCJ2aWV3Qm94XCIsIGAwIDAgJHtzdmdXaWR0aH0gJHtzdmdIZWlnaHR9YClcclxuICAgICAgICAuYXR0cihcInByZXNlcnZlQXNwZWN0UmF0aW9cIiwgXCJ4TWlkWU1pZCBtZWV0XCIpO1xyXG5cclxuICAgIGlmIChyZW5kZXJJbmZvLmZpdFBhbmVsV2lkdGgpIHtcclxuICAgICAgICBjYW52YXMuc3R5bGUoXCJ3aWR0aFwiLCBcIjEwMCVcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNhbnZhcy5zdHlsZShcclxuICAgICAgICAgICAgXCJ3aWR0aFwiLFxyXG4gICAgICAgICAgICAoc3ZnV2lkdGggKiByZW5kZXJJbmZvLmZpeGVkU2NhbGUpLnRvU3RyaW5nKCkgKyBcInB4XCJcclxuICAgICAgICApO1xyXG4gICAgICAgIGNhbnZhcy5zdHlsZShcclxuICAgICAgICAgICAgXCJoZWlnaHRcIixcclxuICAgICAgICAgICAgKHN2Z0hlaWdodCAqIHJlbmRlckluZm8uZml4ZWRTY2FsZSkudG9TdHJpbmcoKSArIFwicHhcIlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUFyZWFzKFxyXG4gICAgY2FudmFzOiBIVE1MRWxlbWVudCxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm9cclxuKTogQ2hhcnRFbGVtZW50cyB7XHJcbiAgICBsZXQgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyA9IHt9O1xyXG4gICAgLy8gd2hvbGUgYXJlYSBmb3IgcGxvdHRpbmcsIGluY2x1ZGVzIG1hcmdpbnNcclxuICAgIGxldCBzdmcgPSBkM1xyXG4gICAgICAgIC5zZWxlY3QoY2FudmFzKVxyXG4gICAgICAgIC5hcHBlbmQoXCJzdmdcIilcclxuICAgICAgICAuYXR0cihcImlkXCIsIFwic3ZnXCIpXHJcbiAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgIFwid2lkdGhcIixcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4ubGVmdCArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLm1hcmdpbi5yaWdodFxyXG4gICAgICAgIClcclxuICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgXCJoZWlnaHRcIixcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0ICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLnRvcCArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLm1hcmdpbi5ib3R0b21cclxuICAgICAgICApO1xyXG4gICAgY2hhcnRFbGVtZW50c1tcInN2Z1wiXSA9IHN2ZztcclxuXHJcbiAgICAvLyBncmFwaEFyZWEsIGluY2x1ZGVzIGNoYXJ0QXJlYSwgdGl0bGUsIGxlZ2VuZFxyXG4gICAgbGV0IGdyYXBoQXJlYSA9IHN2Z1xyXG4gICAgICAgIC5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcImdyYXBoQXJlYVwiKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcInRyYW5zZm9ybVwiLFxyXG4gICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLm1hcmdpbi5sZWZ0ICtcclxuICAgICAgICAgICAgICAgIFwiLFwiICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLnRvcCArXHJcbiAgICAgICAgICAgICAgICBcIilcIlxyXG4gICAgICAgIClcclxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoICsgcmVuZGVySW5mby5tYXJnaW4ucmlnaHQpXHJcbiAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgIFwiaGVpZ2h0XCIsXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCArIHJlbmRlckluZm8ubWFyZ2luLmJvdHRvbVxyXG4gICAgICAgICk7XHJcbiAgICBjaGFydEVsZW1lbnRzW1wiZ3JhcGhBcmVhXCJdID0gZ3JhcGhBcmVhO1xyXG5cclxuICAgIC8vIGRhdGFBcmVhLCB1bmRlciBncmFwaEFyZWEsIGluY2x1ZGVzIHBvaW50cywgbGluZXMsIHhBeGlzLCB5QXhpc1xyXG4gICAgbGV0IGRhdGFBcmVhID0gZ3JhcGhBcmVhXHJcbiAgICAgICAgLmFwcGVuZChcImdcIilcclxuICAgICAgICAuYXR0cihcImlkXCIsIFwiZGF0YUFyZWFcIilcclxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoKVxyXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCk7XHJcbiAgICBjaGFydEVsZW1lbnRzW1wiZGF0YUFyZWFcIl0gPSBkYXRhQXJlYTtcclxuXHJcbiAgICByZXR1cm4gY2hhcnRFbGVtZW50cztcclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyTGluZUNoYXJ0KFxyXG4gICAgY2FudmFzOiBIVE1MRWxlbWVudCxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBsaW5lSW5mbzogTGluZUluZm9cclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInJlbmRlckxpbmVDaGFydFwiKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8pO1xyXG5cclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhbGluZUluZm8pIHJldHVybjtcclxuXHJcbiAgICBsZXQgY2hhcnRFbGVtZW50cyA9IGNyZWF0ZUFyZWFzKGNhbnZhcywgcmVuZGVySW5mbyk7XHJcblxyXG4gICAgcmVuZGVyVGl0bGUoY2hhcnRFbGVtZW50cywgcmVuZGVySW5mbywgbGluZUluZm8pO1xyXG5cclxuICAgIHJlbmRlclhBeGlzKGNoYXJ0RWxlbWVudHMsIHJlbmRlckluZm8sIGxpbmVJbmZvKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGNoYXJ0RWxlbWVudHMueEF4aXMpO1xyXG4gICAgLy8gY29uc29sZS5sb2coY2hhcnRFbGVtZW50cy54U2NhbGUpO1xyXG5cclxuICAgIGxldCBkYXRhc2V0T25MZWZ0WUF4aXMgPSBbXTtcclxuICAgIGxldCBkYXRhc2V0T25SaWdodFlBeGlzID0gW107XHJcbiAgICBsZXQgeERhdGFzZXRJZHMgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldFhEYXRhc2V0SWRzKCk7XHJcbiAgICBmb3IgKGxldCBpbmQgPSAwOyBpbmQgPCBsaW5lSW5mby55QXhpc0xvY2F0aW9uLmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICBpZiAoeERhdGFzZXRJZHMuaW5jbHVkZXMoaW5kKSkgY29udGludWU7XHJcbiAgICAgICAgbGV0IHlBeGlzTG9jYXRpb24gPSBsaW5lSW5mby55QXhpc0xvY2F0aW9uW2luZF07XHJcbiAgICAgICAgaWYgKHlBeGlzTG9jYXRpb24udG9Mb3dlckNhc2UoKSA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICAgICAgZGF0YXNldE9uTGVmdFlBeGlzLnB1c2goaW5kKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHlBeGlzTG9jYXRpb24udG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gXCJyaWdodFwiKSB7XHJcbiAgICAgICAgICAgIGRhdGFzZXRPblJpZ2h0WUF4aXMucHVzaChpbmQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgcmV0UmVuZGVyTGVmdFlBeGlzID0gcmVuZGVyWUF4aXMoXHJcbiAgICAgICAgY2hhcnRFbGVtZW50cyxcclxuICAgICAgICByZW5kZXJJbmZvLFxyXG4gICAgICAgIGxpbmVJbmZvLFxyXG4gICAgICAgIFwibGVmdFwiLFxyXG4gICAgICAgIGRhdGFzZXRPbkxlZnRZQXhpc1xyXG4gICAgKTtcclxuICAgIGlmICh0eXBlb2YgcmV0UmVuZGVyTGVmdFlBeGlzID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldFJlbmRlckxlZnRZQXhpcztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY2hhcnRFbGVtZW50cy5sZWZ0WUF4aXMgJiYgY2hhcnRFbGVtZW50cy5sZWZ0WVNjYWxlKSB7XHJcbiAgICAgICAgZm9yIChsZXQgZGF0YXNldElkIG9mIGRhdGFzZXRPbkxlZnRZQXhpcykge1xyXG4gICAgICAgICAgICBsZXQgZGF0YXNldCA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoZGF0YXNldElkKTtcclxuICAgICAgICAgICAgaWYgKGRhdGFzZXQuZ2V0UXVlcnkoKS51c2VkQXNYRGF0YXNldCkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICByZW5kZXJMaW5lKGNoYXJ0RWxlbWVudHMsIHJlbmRlckluZm8sIGxpbmVJbmZvLCBkYXRhc2V0LCBcImxlZnRcIik7XHJcblxyXG4gICAgICAgICAgICByZW5kZXJQb2ludHMoY2hhcnRFbGVtZW50cywgcmVuZGVySW5mbywgbGluZUluZm8sIGRhdGFzZXQsIFwibGVmdFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHJldFJlbmRlclJpZ2h0WUF4aXMgPSByZW5kZXJZQXhpcyhcclxuICAgICAgICBjaGFydEVsZW1lbnRzLFxyXG4gICAgICAgIHJlbmRlckluZm8sXHJcbiAgICAgICAgbGluZUluZm8sXHJcbiAgICAgICAgXCJyaWdodFwiLFxyXG4gICAgICAgIGRhdGFzZXRPblJpZ2h0WUF4aXNcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldFJlbmRlclJpZ2h0WUF4aXMgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0UmVuZGVyUmlnaHRZQXhpcztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY2hhcnRFbGVtZW50cy5yaWdodFlBeGlzICYmIGNoYXJ0RWxlbWVudHMucmlnaHRZU2NhbGUpIHtcclxuICAgICAgICBmb3IgKGxldCBkYXRhc2V0SWQgb2YgZGF0YXNldE9uUmlnaHRZQXhpcykge1xyXG4gICAgICAgICAgICBsZXQgZGF0YXNldCA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoZGF0YXNldElkKTtcclxuICAgICAgICAgICAgaWYgKGRhdGFzZXQuZ2V0UXVlcnkoKS51c2VkQXNYRGF0YXNldCkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICByZW5kZXJMaW5lKGNoYXJ0RWxlbWVudHMsIHJlbmRlckluZm8sIGxpbmVJbmZvLCBkYXRhc2V0LCBcInJpZ2h0XCIpO1xyXG5cclxuICAgICAgICAgICAgcmVuZGVyUG9pbnRzKGNoYXJ0RWxlbWVudHMsIHJlbmRlckluZm8sIGxpbmVJbmZvLCBkYXRhc2V0LCBcInJpZ2h0XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAobGluZUluZm8uc2hvd0xlZ2VuZCkge1xyXG4gICAgICAgIHJlbmRlckxlZ2VuZChjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvLCBsaW5lSW5mbyk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0Q2hhcnRTY2FsZShjYW52YXMsIGNoYXJ0RWxlbWVudHMsIHJlbmRlckluZm8pO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJCYXJDaGFydChcclxuICAgIGNhbnZhczogSFRNTEVsZW1lbnQsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgYmFySW5mbzogQmFySW5mb1xyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVyQmFyQ2hhcnRcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvKTtcclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhYmFySW5mbykgcmV0dXJuO1xyXG5cclxuICAgIGxldCBjaGFydEVsZW1lbnRzID0gY3JlYXRlQXJlYXMoY2FudmFzLCByZW5kZXJJbmZvKTtcclxuXHJcbiAgICByZW5kZXJUaXRsZShjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvLCBiYXJJbmZvKTtcclxuXHJcbiAgICByZW5kZXJYQXhpcyhjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvLCBiYXJJbmZvKTtcclxuXHJcbiAgICBsZXQgZGF0YXNldE9uTGVmdFlBeGlzID0gW107XHJcbiAgICBsZXQgZGF0YXNldE9uUmlnaHRZQXhpcyA9IFtdO1xyXG4gICAgbGV0IHhEYXRhc2V0SWRzID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXRYRGF0YXNldElkcygpO1xyXG4gICAgZm9yIChsZXQgaW5kID0gMDsgaW5kIDwgYmFySW5mby55QXhpc0xvY2F0aW9uLmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICBpZiAoeERhdGFzZXRJZHMuaW5jbHVkZXMoaW5kKSkgY29udGludWU7XHJcbiAgICAgICAgbGV0IHlBeGlzTG9jYXRpb24gPSBiYXJJbmZvLnlBeGlzTG9jYXRpb25baW5kXTtcclxuICAgICAgICBpZiAoeUF4aXNMb2NhdGlvbi50b0xvd2VyQ2FzZSgpID09PSBcImxlZnRcIikge1xyXG4gICAgICAgICAgICBkYXRhc2V0T25MZWZ0WUF4aXMucHVzaChpbmQpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoeUF4aXNMb2NhdGlvbi50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICAgICAgLy8gcmlnaHRcclxuICAgICAgICAgICAgZGF0YXNldE9uUmlnaHRZQXhpcy5wdXNoKGluZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxldCByZXRSZW5kZXJMZWZ0WUF4aXMgPSByZW5kZXJZQXhpcyhcclxuICAgICAgICBjaGFydEVsZW1lbnRzLFxyXG4gICAgICAgIHJlbmRlckluZm8sXHJcbiAgICAgICAgYmFySW5mbyxcclxuICAgICAgICBcImxlZnRcIixcclxuICAgICAgICBkYXRhc2V0T25MZWZ0WUF4aXNcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldFJlbmRlckxlZnRZQXhpcyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRSZW5kZXJMZWZ0WUF4aXM7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHRvdGFsTnVtT2ZCYXJTZXRzID1cclxuICAgICAgICBkYXRhc2V0T25MZWZ0WUF4aXMubGVuZ3RoICsgZGF0YXNldE9uUmlnaHRZQXhpcy5sZW5ndGg7XHJcbiAgICBsZXQgY3VyckJhclNldCA9IDA7XHJcblxyXG4gICAgaWYgKGNoYXJ0RWxlbWVudHMubGVmdFlBeGlzICYmIGNoYXJ0RWxlbWVudHMubGVmdFlTY2FsZSkge1xyXG4gICAgICAgIGZvciAobGV0IGRhdGFzZXRJZCBvZiBkYXRhc2V0T25MZWZ0WUF4aXMpIHtcclxuICAgICAgICAgICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgICAgIGlmIChkYXRhc2V0LmdldFF1ZXJ5KCkudXNlZEFzWERhdGFzZXQpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgcmVuZGVyQmFyKFxyXG4gICAgICAgICAgICAgICAgY2hhcnRFbGVtZW50cyxcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8sXHJcbiAgICAgICAgICAgICAgICBiYXJJbmZvLFxyXG4gICAgICAgICAgICAgICAgZGF0YXNldCxcclxuICAgICAgICAgICAgICAgIFwibGVmdFwiLFxyXG4gICAgICAgICAgICAgICAgY3VyckJhclNldCxcclxuICAgICAgICAgICAgICAgIHRvdGFsTnVtT2ZCYXJTZXRzXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBjdXJyQmFyU2V0Kys7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxldCByZXRSZW5kZXJSaWdodFlBeGlzID0gcmVuZGVyWUF4aXMoXHJcbiAgICAgICAgY2hhcnRFbGVtZW50cyxcclxuICAgICAgICByZW5kZXJJbmZvLFxyXG4gICAgICAgIGJhckluZm8sXHJcbiAgICAgICAgXCJyaWdodFwiLFxyXG4gICAgICAgIGRhdGFzZXRPblJpZ2h0WUF4aXNcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldFJlbmRlclJpZ2h0WUF4aXMgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0UmVuZGVyUmlnaHRZQXhpcztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY2hhcnRFbGVtZW50cy5yaWdodFlBeGlzICYmIGNoYXJ0RWxlbWVudHMucmlnaHRZU2NhbGUpIHtcclxuICAgICAgICBmb3IgKGxldCBkYXRhc2V0SWQgb2YgZGF0YXNldE9uUmlnaHRZQXhpcykge1xyXG4gICAgICAgICAgICBsZXQgZGF0YXNldCA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoZGF0YXNldElkKTtcclxuICAgICAgICAgICAgaWYgKGRhdGFzZXQuZ2V0UXVlcnkoKS51c2VkQXNYRGF0YXNldCkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICByZW5kZXJCYXIoXHJcbiAgICAgICAgICAgICAgICBjaGFydEVsZW1lbnRzLFxyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mbyxcclxuICAgICAgICAgICAgICAgIGJhckluZm8sXHJcbiAgICAgICAgICAgICAgICBkYXRhc2V0LFxyXG4gICAgICAgICAgICAgICAgXCJyaWdodFwiLFxyXG4gICAgICAgICAgICAgICAgY3VyckJhclNldCxcclxuICAgICAgICAgICAgICAgIHRvdGFsTnVtT2ZCYXJTZXRzXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBjdXJyQmFyU2V0Kys7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChiYXJJbmZvLnNob3dMZWdlbmQpIHtcclxuICAgICAgICByZW5kZXJMZWdlbmQoY2hhcnRFbGVtZW50cywgcmVuZGVySW5mbywgYmFySW5mbyk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0Q2hhcnRTY2FsZShjYW52YXMsIGNoYXJ0RWxlbWVudHMsIHJlbmRlckluZm8pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyRXJyb3JNZXNzYWdlKGNhbnZhczogSFRNTEVsZW1lbnQsIGVycm9yTWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICAvLyBSZW1vdmUgZ3JhcGggbm90IGNvbXBsZXRlZFxyXG4gICAgbGV0IGdyYXBoID0gZDMuc2VsZWN0KGNhbnZhcykuc2VsZWN0KFwiI3N2Z1wiKS5yZW1vdmUoKTtcclxuXHJcbiAgICBsZXQgc3ZnID0gZDNcclxuICAgICAgICAuc2VsZWN0KGNhbnZhcylcclxuICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXHJcbiAgICAgICAgLnRleHQoZXJyb3JNZXNzYWdlKVxyXG4gICAgICAgIC5zdHlsZShcImJhY2tncm91bmQtY29sb3JcIiwgXCJ3aGl0ZVwiKVxyXG4gICAgICAgIC5zdHlsZShcIm1hcmdpbi1ib3R0b21cIiwgXCIyMHB4XCIpXHJcbiAgICAgICAgLnN0eWxlKFwicGFkZGluZ1wiLCBcIjEwcHhcIilcclxuICAgICAgICAuc3R5bGUoXCJjb2xvclwiLCBcInJlZFwiKTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgbGV0IG1pbjtcbiAgbGV0IG1heDtcbiAgaWYgKHZhbHVlb2YgPT09IHVuZGVmaW5lZCkge1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICBpZiAobWluID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAodmFsdWUgPj0gdmFsdWUpIG1pbiA9IG1heCA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChtaW4gPiB2YWx1ZSkgbWluID0gdmFsdWU7XG4gICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgaW5kZXggPSAtMTtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlLCArK2luZGV4LCB2YWx1ZXMpKSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChtaW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICh2YWx1ZSA+PSB2YWx1ZSkgbWluID0gbWF4ID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG1pbiA+IHZhbHVlKSBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICBpZiAobWF4IDwgdmFsdWUpIG1heCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBbbWluLCBtYXhdO1xufVxuIiwiaW1wb3J0IHNvdXJjZUV2ZW50IGZyb20gXCIuL3NvdXJjZUV2ZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGV2ZW50LCBub2RlKSB7XG4gIGV2ZW50ID0gc291cmNlRXZlbnQoZXZlbnQpO1xuICBpZiAobm9kZSA9PT0gdW5kZWZpbmVkKSBub2RlID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgaWYgKG5vZGUpIHtcbiAgICB2YXIgc3ZnID0gbm9kZS5vd25lclNWR0VsZW1lbnQgfHwgbm9kZTtcbiAgICBpZiAoc3ZnLmNyZWF0ZVNWR1BvaW50KSB7XG4gICAgICB2YXIgcG9pbnQgPSBzdmcuY3JlYXRlU1ZHUG9pbnQoKTtcbiAgICAgIHBvaW50LnggPSBldmVudC5jbGllbnRYLCBwb2ludC55ID0gZXZlbnQuY2xpZW50WTtcbiAgICAgIHBvaW50ID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG5vZGUuZ2V0U2NyZWVuQ1RNKCkuaW52ZXJzZSgpKTtcbiAgICAgIHJldHVybiBbcG9pbnQueCwgcG9pbnQueV07XG4gICAgfVxuICAgIGlmIChub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCkge1xuICAgICAgdmFyIHJlY3QgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgcmV0dXJuIFtldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0IC0gbm9kZS5jbGllbnRMZWZ0LCBldmVudC5jbGllbnRZIC0gcmVjdC50b3AgLSBub2RlLmNsaWVudFRvcF07XG4gICAgfVxuICB9XG4gIHJldHVybiBbZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZXTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGxldCBzb3VyY2VFdmVudDtcbiAgd2hpbGUgKHNvdXJjZUV2ZW50ID0gZXZlbnQuc291cmNlRXZlbnQpIGV2ZW50ID0gc291cmNlRXZlbnQ7XG4gIHJldHVybiBldmVudDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIG9ic2lkaWFuID0gcmVxdWlyZSgnb2JzaWRpYW4nKTtcblxuY29uc3QgREVGQVVMVF9EQUlMWV9OT1RFX0ZPUk1BVCA9IFwiWVlZWS1NTS1ERFwiO1xuY29uc3QgREVGQVVMVF9XRUVLTFlfTk9URV9GT1JNQVQgPSBcImdnZ2ctW1ddd3dcIjtcbmNvbnN0IERFRkFVTFRfTU9OVEhMWV9OT1RFX0ZPUk1BVCA9IFwiWVlZWS1NTVwiO1xuXG5mdW5jdGlvbiBzaG91bGRVc2VQZXJpb2RpY05vdGVzU2V0dGluZ3MocGVyaW9kaWNpdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0IHBlcmlvZGljTm90ZXMgPSB3aW5kb3cuYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKFwicGVyaW9kaWMtbm90ZXNcIik7XG4gICAgcmV0dXJuIHBlcmlvZGljTm90ZXMgJiYgcGVyaW9kaWNOb3Rlcy5zZXR0aW5ncz8uW3BlcmlvZGljaXR5XT8uZW5hYmxlZDtcbn1cbi8qKlxuICogUmVhZCB0aGUgdXNlciBzZXR0aW5ncyBmb3IgdGhlIGBkYWlseS1ub3Rlc2AgcGx1Z2luXG4gKiB0byBrZWVwIGJlaGF2aW9yIG9mIGNyZWF0aW5nIGEgbmV3IG5vdGUgaW4tc3luYy5cbiAqL1xuZnVuY3Rpb24gZ2V0RGFpbHlOb3RlU2V0dGluZ3MoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgY29uc3QgeyBpbnRlcm5hbFBsdWdpbnMsIHBsdWdpbnMgfSA9IHdpbmRvdy5hcHA7XG4gICAgICAgIGlmIChzaG91bGRVc2VQZXJpb2RpY05vdGVzU2V0dGluZ3MoXCJkYWlseVwiKSkge1xuICAgICAgICAgICAgY29uc3QgeyBmb3JtYXQsIGZvbGRlciwgdGVtcGxhdGUgfSA9IHBsdWdpbnMuZ2V0UGx1Z2luKFwicGVyaW9kaWMtbm90ZXNcIik/LnNldHRpbmdzPy5kYWlseSB8fCB7fTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZm9ybWF0OiBmb3JtYXQgfHwgREVGQVVMVF9EQUlMWV9OT1RFX0ZPUk1BVCxcbiAgICAgICAgICAgICAgICBmb2xkZXI6IGZvbGRlcj8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IHRlbXBsYXRlPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBmb2xkZXIsIGZvcm1hdCwgdGVtcGxhdGUgfSA9IGludGVybmFsUGx1Z2lucy5nZXRQbHVnaW5CeUlkKFwiZGFpbHktbm90ZXNcIik/Lmluc3RhbmNlPy5vcHRpb25zIHx8IHt9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9ybWF0OiBmb3JtYXQgfHwgREVGQVVMVF9EQUlMWV9OT1RFX0ZPUk1BVCxcbiAgICAgICAgICAgIGZvbGRlcjogZm9sZGVyPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZT8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5pbmZvKFwiTm8gY3VzdG9tIGRhaWx5IG5vdGUgc2V0dGluZ3MgZm91bmQhXCIsIGVycik7XG4gICAgfVxufVxuLyoqXG4gKiBSZWFkIHRoZSB1c2VyIHNldHRpbmdzIGZvciB0aGUgYHdlZWtseS1ub3Rlc2AgcGx1Z2luXG4gKiB0byBrZWVwIGJlaGF2aW9yIG9mIGNyZWF0aW5nIGEgbmV3IG5vdGUgaW4tc3luYy5cbiAqL1xuZnVuY3Rpb24gZ2V0V2Vla2x5Tm90ZVNldHRpbmdzKCkge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIGNvbnN0IHBsdWdpbk1hbmFnZXIgPSB3aW5kb3cuYXBwLnBsdWdpbnM7XG4gICAgICAgIGNvbnN0IGNhbGVuZGFyU2V0dGluZ3MgPSBwbHVnaW5NYW5hZ2VyLmdldFBsdWdpbihcImNhbGVuZGFyXCIpPy5vcHRpb25zO1xuICAgICAgICBjb25zdCBwZXJpb2RpY05vdGVzU2V0dGluZ3MgPSBwbHVnaW5NYW5hZ2VyLmdldFBsdWdpbihcInBlcmlvZGljLW5vdGVzXCIpXG4gICAgICAgICAgICA/LnNldHRpbmdzPy53ZWVrbHk7XG4gICAgICAgIGlmIChzaG91bGRVc2VQZXJpb2RpY05vdGVzU2V0dGluZ3MoXCJ3ZWVrbHlcIikpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZm9ybWF0OiBwZXJpb2RpY05vdGVzU2V0dGluZ3MuZm9ybWF0IHx8IERFRkFVTFRfV0VFS0xZX05PVEVfRk9STUFULFxuICAgICAgICAgICAgICAgIGZvbGRlcjogcGVyaW9kaWNOb3Rlc1NldHRpbmdzLmZvbGRlcj8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IHBlcmlvZGljTm90ZXNTZXR0aW5ncy50ZW1wbGF0ZT8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNldHRpbmdzID0gY2FsZW5kYXJTZXR0aW5ncyB8fCB7fTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZvcm1hdDogc2V0dGluZ3Mud2Vla2x5Tm90ZUZvcm1hdCB8fCBERUZBVUxUX1dFRUtMWV9OT1RFX0ZPUk1BVCxcbiAgICAgICAgICAgIGZvbGRlcjogc2V0dGluZ3Mud2Vla2x5Tm90ZUZvbGRlcj8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogc2V0dGluZ3Mud2Vla2x5Tm90ZVRlbXBsYXRlPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmluZm8oXCJObyBjdXN0b20gd2Vla2x5IG5vdGUgc2V0dGluZ3MgZm91bmQhXCIsIGVycik7XG4gICAgfVxufVxuLyoqXG4gKiBSZWFkIHRoZSB1c2VyIHNldHRpbmdzIGZvciB0aGUgYHBlcmlvZGljLW5vdGVzYCBwbHVnaW5cbiAqIHRvIGtlZXAgYmVoYXZpb3Igb2YgY3JlYXRpbmcgYSBuZXcgbm90ZSBpbi1zeW5jLlxuICovXG5mdW5jdGlvbiBnZXRNb250aGx5Tm90ZVNldHRpbmdzKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcGx1Z2luTWFuYWdlciA9IHdpbmRvdy5hcHAucGx1Z2lucztcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBzZXR0aW5ncyA9IChzaG91bGRVc2VQZXJpb2RpY05vdGVzU2V0dGluZ3MoXCJtb250aGx5XCIpICYmXG4gICAgICAgICAgICBwbHVnaW5NYW5hZ2VyLmdldFBsdWdpbihcInBlcmlvZGljLW5vdGVzXCIpPy5zZXR0aW5ncz8ubW9udGhseSkgfHxcbiAgICAgICAgICAgIHt9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9ybWF0OiBzZXR0aW5ncy5mb3JtYXQgfHwgREVGQVVMVF9NT05USExZX05PVEVfRk9STUFULFxuICAgICAgICAgICAgZm9sZGVyOiBzZXR0aW5ncy5mb2xkZXI/LnRyaW0oKSB8fCBcIlwiLFxuICAgICAgICAgICAgdGVtcGxhdGU6IHNldHRpbmdzLnRlbXBsYXRlPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmluZm8oXCJObyBjdXN0b20gbW9udGhseSBub3RlIHNldHRpbmdzIGZvdW5kIVwiLCBlcnIpO1xuICAgIH1cbn1cblxuLy8gQ3JlZGl0OiBAY3JlYXRpb25peC9wYXRoLmpzXG5mdW5jdGlvbiBqb2luKC4uLnBhcnRTZWdtZW50cykge1xuICAgIC8vIFNwbGl0IHRoZSBpbnB1dHMgaW50byBhIGxpc3Qgb2YgcGF0aCBjb21tYW5kcy5cbiAgICBsZXQgcGFydHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHBhcnRTZWdtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcGFydHMgPSBwYXJ0cy5jb25jYXQocGFydFNlZ21lbnRzW2ldLnNwbGl0KFwiL1wiKSk7XG4gICAgfVxuICAgIC8vIEludGVycHJldCB0aGUgcGF0aCBjb21tYW5kcyB0byBnZXQgdGhlIG5ldyByZXNvbHZlZCBwYXRoLlxuICAgIGNvbnN0IG5ld1BhcnRzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBwYXJ0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3QgcGFydCA9IHBhcnRzW2ldO1xuICAgICAgICAvLyBSZW1vdmUgbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2hlc1xuICAgICAgICAvLyBBbHNvIHJlbW92ZSBcIi5cIiBzZWdtZW50c1xuICAgICAgICBpZiAoIXBhcnQgfHwgcGFydCA9PT0gXCIuXCIpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgLy8gUHVzaCBuZXcgcGF0aCBzZWdtZW50cy5cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgbmV3UGFydHMucHVzaChwYXJ0KTtcbiAgICB9XG4gICAgLy8gUHJlc2VydmUgdGhlIGluaXRpYWwgc2xhc2ggaWYgdGhlcmUgd2FzIG9uZS5cbiAgICBpZiAocGFydHNbMF0gPT09IFwiXCIpXG4gICAgICAgIG5ld1BhcnRzLnVuc2hpZnQoXCJcIik7XG4gICAgLy8gVHVybiBiYWNrIGludG8gYSBzaW5nbGUgc3RyaW5nIHBhdGguXG4gICAgcmV0dXJuIG5ld1BhcnRzLmpvaW4oXCIvXCIpO1xufVxuZnVuY3Rpb24gYmFzZW5hbWUoZnVsbFBhdGgpIHtcbiAgICBsZXQgYmFzZSA9IGZ1bGxQYXRoLnN1YnN0cmluZyhmdWxsUGF0aC5sYXN0SW5kZXhPZihcIi9cIikgKyAxKTtcbiAgICBpZiAoYmFzZS5sYXN0SW5kZXhPZihcIi5cIikgIT0gLTEpXG4gICAgICAgIGJhc2UgPSBiYXNlLnN1YnN0cmluZygwLCBiYXNlLmxhc3RJbmRleE9mKFwiLlwiKSk7XG4gICAgcmV0dXJuIGJhc2U7XG59XG5hc3luYyBmdW5jdGlvbiBlbnN1cmVGb2xkZXJFeGlzdHMocGF0aCkge1xuICAgIGNvbnN0IGRpcnMgPSBwYXRoLnJlcGxhY2UoL1xcXFwvZywgXCIvXCIpLnNwbGl0KFwiL1wiKTtcbiAgICBkaXJzLnBvcCgpOyAvLyByZW1vdmUgYmFzZW5hbWVcbiAgICBpZiAoZGlycy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgZGlyID0gam9pbiguLi5kaXJzKTtcbiAgICAgICAgaWYgKCF3aW5kb3cuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChkaXIpKSB7XG4gICAgICAgICAgICBhd2FpdCB3aW5kb3cuYXBwLnZhdWx0LmNyZWF0ZUZvbGRlcihkaXIpO1xuICAgICAgICB9XG4gICAgfVxufVxuYXN5bmMgZnVuY3Rpb24gZ2V0Tm90ZVBhdGgoZGlyZWN0b3J5LCBmaWxlbmFtZSkge1xuICAgIGlmICghZmlsZW5hbWUuZW5kc1dpdGgoXCIubWRcIikpIHtcbiAgICAgICAgZmlsZW5hbWUgKz0gXCIubWRcIjtcbiAgICB9XG4gICAgY29uc3QgcGF0aCA9IG9ic2lkaWFuLm5vcm1hbGl6ZVBhdGgoam9pbihkaXJlY3RvcnksIGZpbGVuYW1lKSk7XG4gICAgYXdhaXQgZW5zdXJlRm9sZGVyRXhpc3RzKHBhdGgpO1xuICAgIHJldHVybiBwYXRoO1xufVxuYXN5bmMgZnVuY3Rpb24gZ2V0VGVtcGxhdGVJbmZvKHRlbXBsYXRlKSB7XG4gICAgY29uc3QgeyBtZXRhZGF0YUNhY2hlLCB2YXVsdCB9ID0gd2luZG93LmFwcDtcbiAgICBjb25zdCB0ZW1wbGF0ZVBhdGggPSBvYnNpZGlhbi5ub3JtYWxpemVQYXRoKHRlbXBsYXRlKTtcbiAgICBpZiAodGVtcGxhdGVQYXRoID09PSBcIi9cIikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtcIlwiLCBudWxsXSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlRmlsZSA9IG1ldGFkYXRhQ2FjaGUuZ2V0Rmlyc3RMaW5rcGF0aERlc3QodGVtcGxhdGVQYXRoLCBcIlwiKTtcbiAgICAgICAgY29uc3QgY29udGVudHMgPSBhd2FpdCB2YXVsdC5jYWNoZWRSZWFkKHRlbXBsYXRlRmlsZSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIGNvbnN0IElGb2xkSW5mbyA9IHdpbmRvdy5hcHAuZm9sZE1hbmFnZXIubG9hZCh0ZW1wbGF0ZUZpbGUpO1xuICAgICAgICByZXR1cm4gW2NvbnRlbnRzLCBJRm9sZEluZm9dO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byByZWFkIHRoZSBkYWlseSBub3RlIHRlbXBsYXRlICcke3RlbXBsYXRlUGF0aH0nYCwgZXJyKTtcbiAgICAgICAgbmV3IG9ic2lkaWFuLk5vdGljZShcIkZhaWxlZCB0byByZWFkIHRoZSBkYWlseSBub3RlIHRlbXBsYXRlXCIpO1xuICAgICAgICByZXR1cm4gW1wiXCIsIG51bGxdO1xuICAgIH1cbn1cblxuLyoqXG4gKiBkYXRlVUlEIGlzIGEgd2F5IG9mIHdlZWtseSBpZGVudGlmeWluZyBkYWlseS93ZWVrbHkvbW9udGhseSBub3Rlcy5cbiAqIFRoZXkgYXJlIHByZWZpeGVkIHdpdGggdGhlIGdyYW51bGFyaXR5IHRvIGF2b2lkIGFtYmlndWl0eS5cbiAqL1xuZnVuY3Rpb24gZ2V0RGF0ZVVJRChkYXRlLCBncmFudWxhcml0eSA9IFwiZGF5XCIpIHtcbiAgICBjb25zdCB0cyA9IGRhdGUuY2xvbmUoKS5zdGFydE9mKGdyYW51bGFyaXR5KS5mb3JtYXQoKTtcbiAgICByZXR1cm4gYCR7Z3JhbnVsYXJpdHl9LSR7dHN9YDtcbn1cbmZ1bmN0aW9uIHJlbW92ZUVzY2FwZWRDaGFyYWN0ZXJzKGZvcm1hdCkge1xuICAgIHJldHVybiBmb3JtYXQucmVwbGFjZSgvXFxbW15cXF1dKlxcXS9nLCBcIlwiKTsgLy8gcmVtb3ZlIGV2ZXJ5dGhpbmcgd2l0aGluIGJyYWNrZXRzXG59XG4vKipcbiAqIFhYWDogV2hlbiBwYXJzaW5nIGRhdGVzIHRoYXQgY29udGFpbiBib3RoIHdlZWsgbnVtYmVycyBhbmQgbW9udGhzLFxuICogTW9tZW50IGNob3NlcyB0byBpZ25vcmUgdGhlIHdlZWsgbnVtYmVycy4gRm9yIHRoZSB3ZWVrIGRhdGVVSUQsIHdlXG4gKiB3YW50IHRoZSBvcHBvc2l0ZSBiZWhhdmlvci4gU3RyaXAgdGhlIE1NTSBmcm9tIHRoZSBmb3JtYXQgdG8gcGF0Y2guXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybWF0QW1iaWd1b3VzKGZvcm1hdCwgZ3JhbnVsYXJpdHkpIHtcbiAgICBpZiAoZ3JhbnVsYXJpdHkgPT09IFwid2Vla1wiKSB7XG4gICAgICAgIGNvbnN0IGNsZWFuRm9ybWF0ID0gcmVtb3ZlRXNjYXBlZENoYXJhY3RlcnMoZm9ybWF0KTtcbiAgICAgICAgcmV0dXJuICgvd3sxLDJ9L2kudGVzdChjbGVhbkZvcm1hdCkgJiZcbiAgICAgICAgICAgICgvTXsxLDR9Ly50ZXN0KGNsZWFuRm9ybWF0KSB8fCAvRHsxLDR9Ly50ZXN0KGNsZWFuRm9ybWF0KSkpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBnZXREYXRlRnJvbUZpbGUoZmlsZSwgZ3JhbnVsYXJpdHkpIHtcbiAgICByZXR1cm4gZ2V0RGF0ZUZyb21GaWxlbmFtZShmaWxlLmJhc2VuYW1lLCBncmFudWxhcml0eSk7XG59XG5mdW5jdGlvbiBnZXREYXRlRnJvbVBhdGgocGF0aCwgZ3JhbnVsYXJpdHkpIHtcbiAgICByZXR1cm4gZ2V0RGF0ZUZyb21GaWxlbmFtZShiYXNlbmFtZShwYXRoKSwgZ3JhbnVsYXJpdHkpO1xufVxuZnVuY3Rpb24gZ2V0RGF0ZUZyb21GaWxlbmFtZShmaWxlbmFtZSwgZ3JhbnVsYXJpdHkpIHtcbiAgICBjb25zdCBnZXRTZXR0aW5ncyA9IHtcbiAgICAgICAgZGF5OiBnZXREYWlseU5vdGVTZXR0aW5ncyxcbiAgICAgICAgd2VlazogZ2V0V2Vla2x5Tm90ZVNldHRpbmdzLFxuICAgICAgICBtb250aDogZ2V0TW9udGhseU5vdGVTZXR0aW5ncyxcbiAgICB9O1xuICAgIGNvbnN0IGZvcm1hdCA9IGdldFNldHRpbmdzW2dyYW51bGFyaXR5XSgpLmZvcm1hdC5zcGxpdChcIi9cIikucG9wKCk7XG4gICAgY29uc3Qgbm90ZURhdGUgPSB3aW5kb3cubW9tZW50KGZpbGVuYW1lLCBmb3JtYXQsIHRydWUpO1xuICAgIGlmICghbm90ZURhdGUuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoaXNGb3JtYXRBbWJpZ3VvdXMoZm9ybWF0LCBncmFudWxhcml0eSkpIHtcbiAgICAgICAgaWYgKGdyYW51bGFyaXR5ID09PSBcIndlZWtcIikge1xuICAgICAgICAgICAgY29uc3QgY2xlYW5Gb3JtYXQgPSByZW1vdmVFc2NhcGVkQ2hhcmFjdGVycyhmb3JtYXQpO1xuICAgICAgICAgICAgaWYgKC93ezEsMn0vaS50ZXN0KGNsZWFuRm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cubW9tZW50KGZpbGVuYW1lLCBcbiAgICAgICAgICAgICAgICAvLyBJZiBmb3JtYXQgY29udGFpbnMgd2VlaywgcmVtb3ZlIGRheSAmIG1vbnRoIGZvcm1hdHRpbmdcbiAgICAgICAgICAgICAgICBmb3JtYXQucmVwbGFjZSgvTXsxLDR9L2csIFwiXCIpLnJlcGxhY2UoL0R7MSw0fS9nLCBcIlwiKSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub3RlRGF0ZTtcbn1cblxuY2xhc3MgRGFpbHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvciBleHRlbmRzIEVycm9yIHtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBtaW1pY3MgdGhlIGJlaGF2aW9yIG9mIHRoZSBkYWlseS1ub3RlcyBwbHVnaW5cbiAqIHNvIGl0IHdpbGwgcmVwbGFjZSB7e2RhdGV9fSwge3t0aXRsZX19LCBhbmQge3t0aW1lfX0gd2l0aCB0aGVcbiAqIGZvcm1hdHRlZCB0aW1lc3RhbXAuXG4gKlxuICogTm90ZTogaXQgaGFzIGFuIGFkZGVkIGJvbnVzIHRoYXQgaXQncyBub3QgJ3RvZGF5JyBzcGVjaWZpYy5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gY3JlYXRlRGFpbHlOb3RlKGRhdGUpIHtcbiAgICBjb25zdCBhcHAgPSB3aW5kb3cuYXBwO1xuICAgIGNvbnN0IHsgdmF1bHQgfSA9IGFwcDtcbiAgICBjb25zdCBtb21lbnQgPSB3aW5kb3cubW9tZW50O1xuICAgIGNvbnN0IHsgdGVtcGxhdGUsIGZvcm1hdCwgZm9sZGVyIH0gPSBnZXREYWlseU5vdGVTZXR0aW5ncygpO1xuICAgIGNvbnN0IFt0ZW1wbGF0ZUNvbnRlbnRzLCBJRm9sZEluZm9dID0gYXdhaXQgZ2V0VGVtcGxhdGVJbmZvKHRlbXBsYXRlKTtcbiAgICBjb25zdCBmaWxlbmFtZSA9IGRhdGUuZm9ybWF0KGZvcm1hdCk7XG4gICAgY29uc3Qgbm9ybWFsaXplZFBhdGggPSBhd2FpdCBnZXROb3RlUGF0aChmb2xkZXIsIGZpbGVuYW1lKTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjcmVhdGVkRmlsZSA9IGF3YWl0IHZhdWx0LmNyZWF0ZShub3JtYWxpemVkUGF0aCwgdGVtcGxhdGVDb250ZW50c1xuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKmRhdGVcXHMqfX0vZ2ksIGZpbGVuYW1lKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnRpbWVcXHMqfX0vZ2ksIG1vbWVudCgpLmZvcm1hdChcIkhIOm1tXCIpKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnRpdGxlXFxzKn19L2dpLCBmaWxlbmFtZSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyooZGF0ZXx0aW1lKVxccyooKFsrLV1cXGQrKShbeXFtd2Roc10pKT9cXHMqKDouKz8pP319L2dpLCAoXywgX3RpbWVPckRhdGUsIGNhbGMsIHRpbWVEZWx0YSwgdW5pdCwgbW9tZW50Rm9ybWF0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub3cgPSBtb21lbnQoKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnREYXRlID0gZGF0ZS5jbG9uZSgpLnNldCh7XG4gICAgICAgICAgICAgICAgaG91cjogbm93LmdldChcImhvdXJcIiksXG4gICAgICAgICAgICAgICAgbWludXRlOiBub3cuZ2V0KFwibWludXRlXCIpLFxuICAgICAgICAgICAgICAgIHNlY29uZDogbm93LmdldChcInNlY29uZFwiKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGNhbGMpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50RGF0ZS5hZGQocGFyc2VJbnQodGltZURlbHRhLCAxMCksIHVuaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1vbWVudEZvcm1hdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50RGF0ZS5mb3JtYXQobW9tZW50Rm9ybWF0LnN1YnN0cmluZygxKS50cmltKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnREYXRlLmZvcm1hdChmb3JtYXQpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnllc3RlcmRheVxccyp9fS9naSwgZGF0ZS5jbG9uZSgpLnN1YnRyYWN0KDEsIFwiZGF5XCIpLmZvcm1hdChmb3JtYXQpKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnRvbW9ycm93XFxzKn19L2dpLCBkYXRlLmNsb25lKCkuYWRkKDEsIFwiZFwiKS5mb3JtYXQoZm9ybWF0KSkpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBhcHAuZm9sZE1hbmFnZXIuc2F2ZShjcmVhdGVkRmlsZSwgSUZvbGRJbmZvKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZWRGaWxlO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBjcmVhdGUgZmlsZTogJyR7bm9ybWFsaXplZFBhdGh9J2AsIGVycik7XG4gICAgICAgIG5ldyBvYnNpZGlhbi5Ob3RpY2UoXCJVbmFibGUgdG8gY3JlYXRlIG5ldyBmaWxlLlwiKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXREYWlseU5vdGUoZGF0ZSwgZGFpbHlOb3Rlcykge1xuICAgIHJldHVybiBkYWlseU5vdGVzW2dldERhdGVVSUQoZGF0ZSwgXCJkYXlcIildID8/IG51bGw7XG59XG5mdW5jdGlvbiBnZXRBbGxEYWlseU5vdGVzKCkge1xuICAgIC8qKlxuICAgICAqIEZpbmQgYWxsIGRhaWx5IG5vdGVzIGluIHRoZSBkYWlseSBub3RlIGZvbGRlclxuICAgICAqL1xuICAgIGNvbnN0IHsgdmF1bHQgfSA9IHdpbmRvdy5hcHA7XG4gICAgY29uc3QgeyBmb2xkZXIgfSA9IGdldERhaWx5Tm90ZVNldHRpbmdzKCk7XG4gICAgY29uc3QgZGFpbHlOb3Rlc0ZvbGRlciA9IHZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChvYnNpZGlhbi5ub3JtYWxpemVQYXRoKGZvbGRlcikpO1xuICAgIGlmICghZGFpbHlOb3Rlc0ZvbGRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRGFpbHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvcihcIkZhaWxlZCB0byBmaW5kIGRhaWx5IG5vdGVzIGZvbGRlclwiKTtcbiAgICB9XG4gICAgY29uc3QgZGFpbHlOb3RlcyA9IHt9O1xuICAgIG9ic2lkaWFuLlZhdWx0LnJlY3Vyc2VDaGlsZHJlbihkYWlseU5vdGVzRm9sZGVyLCAobm90ZSkgPT4ge1xuICAgICAgICBpZiAobm90ZSBpbnN0YW5jZW9mIG9ic2lkaWFuLlRGaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRlID0gZ2V0RGF0ZUZyb21GaWxlKG5vdGUsIFwiZGF5XCIpO1xuICAgICAgICAgICAgaWYgKGRhdGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRlU3RyaW5nID0gZ2V0RGF0ZVVJRChkYXRlLCBcImRheVwiKTtcbiAgICAgICAgICAgICAgICBkYWlseU5vdGVzW2RhdGVTdHJpbmddID0gbm90ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBkYWlseU5vdGVzO1xufVxuXG5jbGFzcyBXZWVrbHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvciBleHRlbmRzIEVycm9yIHtcbn1cbmZ1bmN0aW9uIGdldERheXNPZldlZWsoKSB7XG4gICAgY29uc3QgeyBtb21lbnQgfSA9IHdpbmRvdztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGxldCB3ZWVrU3RhcnQgPSBtb21lbnQubG9jYWxlRGF0YSgpLl93ZWVrLmRvdztcbiAgICBjb25zdCBkYXlzT2ZXZWVrID0gW1xuICAgICAgICBcInN1bmRheVwiLFxuICAgICAgICBcIm1vbmRheVwiLFxuICAgICAgICBcInR1ZXNkYXlcIixcbiAgICAgICAgXCJ3ZWRuZXNkYXlcIixcbiAgICAgICAgXCJ0aHVyc2RheVwiLFxuICAgICAgICBcImZyaWRheVwiLFxuICAgICAgICBcInNhdHVyZGF5XCIsXG4gICAgXTtcbiAgICB3aGlsZSAod2Vla1N0YXJ0KSB7XG4gICAgICAgIGRheXNPZldlZWsucHVzaChkYXlzT2ZXZWVrLnNoaWZ0KCkpO1xuICAgICAgICB3ZWVrU3RhcnQtLTtcbiAgICB9XG4gICAgcmV0dXJuIGRheXNPZldlZWs7XG59XG5mdW5jdGlvbiBnZXREYXlPZldlZWtOdW1lcmljYWxWYWx1ZShkYXlPZldlZWtOYW1lKSB7XG4gICAgcmV0dXJuIGdldERheXNPZldlZWsoKS5pbmRleE9mKGRheU9mV2Vla05hbWUudG9Mb3dlckNhc2UoKSk7XG59XG5hc3luYyBmdW5jdGlvbiBjcmVhdGVXZWVrbHlOb3RlKGRhdGUpIHtcbiAgICBjb25zdCB7IHZhdWx0IH0gPSB3aW5kb3cuYXBwO1xuICAgIGNvbnN0IHsgdGVtcGxhdGUsIGZvcm1hdCwgZm9sZGVyIH0gPSBnZXRXZWVrbHlOb3RlU2V0dGluZ3MoKTtcbiAgICBjb25zdCBbdGVtcGxhdGVDb250ZW50cywgSUZvbGRJbmZvXSA9IGF3YWl0IGdldFRlbXBsYXRlSW5mbyh0ZW1wbGF0ZSk7XG4gICAgY29uc3QgZmlsZW5hbWUgPSBkYXRlLmZvcm1hdChmb3JtYXQpO1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRQYXRoID0gYXdhaXQgZ2V0Tm90ZVBhdGgoZm9sZGVyLCBmaWxlbmFtZSk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY3JlYXRlZEZpbGUgPSBhd2FpdCB2YXVsdC5jcmVhdGUobm9ybWFsaXplZFBhdGgsIHRlbXBsYXRlQ29udGVudHNcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyooZGF0ZXx0aW1lKVxccyooKFsrLV1cXGQrKShbeXFtd2Roc10pKT9cXHMqKDouKz8pP319L2dpLCAoXywgX3RpbWVPckRhdGUsIGNhbGMsIHRpbWVEZWx0YSwgdW5pdCwgbW9tZW50Rm9ybWF0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub3cgPSB3aW5kb3cubW9tZW50KCk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50RGF0ZSA9IGRhdGUuY2xvbmUoKS5zZXQoe1xuICAgICAgICAgICAgICAgIGhvdXI6IG5vdy5nZXQoXCJob3VyXCIpLFxuICAgICAgICAgICAgICAgIG1pbnV0ZTogbm93LmdldChcIm1pbnV0ZVwiKSxcbiAgICAgICAgICAgICAgICBzZWNvbmQ6IG5vdy5nZXQoXCJzZWNvbmRcIiksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChjYWxjKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudERhdGUuYWRkKHBhcnNlSW50KHRpbWVEZWx0YSwgMTApLCB1bml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb21lbnRGb3JtYXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudERhdGUuZm9ybWF0KG1vbWVudEZvcm1hdC5zdWJzdHJpbmcoMSkudHJpbSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50RGF0ZS5mb3JtYXQoZm9ybWF0KTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyp0aXRsZVxccyp9fS9naSwgZmlsZW5hbWUpXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqdGltZVxccyp9fS9naSwgd2luZG93Lm1vbWVudCgpLmZvcm1hdChcIkhIOm1tXCIpKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKihzdW5kYXl8bW9uZGF5fHR1ZXNkYXl8d2VkbmVzZGF5fHRodXJzZGF5fGZyaWRheXxzYXR1cmRheSlcXHMqOiguKj8pfX0vZ2ksIChfLCBkYXlPZldlZWssIG1vbWVudEZvcm1hdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGF5ID0gZ2V0RGF5T2ZXZWVrTnVtZXJpY2FsVmFsdWUoZGF5T2ZXZWVrKTtcbiAgICAgICAgICAgIHJldHVybiBkYXRlLndlZWtkYXkoZGF5KS5mb3JtYXQobW9tZW50Rm9ybWF0LnRyaW0oKSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgd2luZG93LmFwcC5mb2xkTWFuYWdlci5zYXZlKGNyZWF0ZWRGaWxlLCBJRm9sZEluZm8pO1xuICAgICAgICByZXR1cm4gY3JlYXRlZEZpbGU7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGNyZWF0ZSBmaWxlOiAnJHtub3JtYWxpemVkUGF0aH0nYCwgZXJyKTtcbiAgICAgICAgbmV3IG9ic2lkaWFuLk5vdGljZShcIlVuYWJsZSB0byBjcmVhdGUgbmV3IGZpbGUuXCIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFdlZWtseU5vdGUoZGF0ZSwgd2Vla2x5Tm90ZXMpIHtcbiAgICByZXR1cm4gd2Vla2x5Tm90ZXNbZ2V0RGF0ZVVJRChkYXRlLCBcIndlZWtcIildID8/IG51bGw7XG59XG5mdW5jdGlvbiBnZXRBbGxXZWVrbHlOb3RlcygpIHtcbiAgICBjb25zdCB3ZWVrbHlOb3RlcyA9IHt9O1xuICAgIGlmICghYXBwSGFzV2Vla2x5Tm90ZXNQbHVnaW5Mb2FkZWQoKSkge1xuICAgICAgICByZXR1cm4gd2Vla2x5Tm90ZXM7XG4gICAgfVxuICAgIGNvbnN0IHsgdmF1bHQgfSA9IHdpbmRvdy5hcHA7XG4gICAgY29uc3QgeyBmb2xkZXIgfSA9IGdldFdlZWtseU5vdGVTZXR0aW5ncygpO1xuICAgIGNvbnN0IHdlZWtseU5vdGVzRm9sZGVyID0gdmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG9ic2lkaWFuLm5vcm1hbGl6ZVBhdGgoZm9sZGVyKSk7XG4gICAgaWYgKCF3ZWVrbHlOb3Rlc0ZvbGRlcikge1xuICAgICAgICB0aHJvdyBuZXcgV2Vla2x5Tm90ZXNGb2xkZXJNaXNzaW5nRXJyb3IoXCJGYWlsZWQgdG8gZmluZCB3ZWVrbHkgbm90ZXMgZm9sZGVyXCIpO1xuICAgIH1cbiAgICBvYnNpZGlhbi5WYXVsdC5yZWN1cnNlQ2hpbGRyZW4od2Vla2x5Tm90ZXNGb2xkZXIsIChub3RlKSA9PiB7XG4gICAgICAgIGlmIChub3RlIGluc3RhbmNlb2Ygb2JzaWRpYW4uVEZpbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGUgPSBnZXREYXRlRnJvbUZpbGUobm90ZSwgXCJ3ZWVrXCIpO1xuICAgICAgICAgICAgaWYgKGRhdGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRlU3RyaW5nID0gZ2V0RGF0ZVVJRChkYXRlLCBcIndlZWtcIik7XG4gICAgICAgICAgICAgICAgd2Vla2x5Tm90ZXNbZGF0ZVN0cmluZ10gPSBub3RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHdlZWtseU5vdGVzO1xufVxuXG5jbGFzcyBNb250aGx5Tm90ZXNGb2xkZXJNaXNzaW5nRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gbWltaWNzIHRoZSBiZWhhdmlvciBvZiB0aGUgZGFpbHktbm90ZXMgcGx1Z2luXG4gKiBzbyBpdCB3aWxsIHJlcGxhY2Uge3tkYXRlfX0sIHt7dGl0bGV9fSwgYW5kIHt7dGltZX19IHdpdGggdGhlXG4gKiBmb3JtYXR0ZWQgdGltZXN0YW1wLlxuICpcbiAqIE5vdGU6IGl0IGhhcyBhbiBhZGRlZCBib251cyB0aGF0IGl0J3Mgbm90ICd0b2RheScgc3BlY2lmaWMuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZU1vbnRobHlOb3RlKGRhdGUpIHtcbiAgICBjb25zdCB7IHZhdWx0IH0gPSB3aW5kb3cuYXBwO1xuICAgIGNvbnN0IHsgdGVtcGxhdGUsIGZvcm1hdCwgZm9sZGVyIH0gPSBnZXRNb250aGx5Tm90ZVNldHRpbmdzKCk7XG4gICAgY29uc3QgW3RlbXBsYXRlQ29udGVudHMsIElGb2xkSW5mb10gPSBhd2FpdCBnZXRUZW1wbGF0ZUluZm8odGVtcGxhdGUpO1xuICAgIGNvbnN0IGZpbGVuYW1lID0gZGF0ZS5mb3JtYXQoZm9ybWF0KTtcbiAgICBjb25zdCBub3JtYWxpemVkUGF0aCA9IGF3YWl0IGdldE5vdGVQYXRoKGZvbGRlciwgZmlsZW5hbWUpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNyZWF0ZWRGaWxlID0gYXdhaXQgdmF1bHQuY3JlYXRlKG5vcm1hbGl6ZWRQYXRoLCB0ZW1wbGF0ZUNvbnRlbnRzXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqKGRhdGV8dGltZSlcXHMqKChbKy1dXFxkKykoW3lxbXdkaHNdKSk/XFxzKig6Lis/KT99fS9naSwgKF8sIF90aW1lT3JEYXRlLCBjYWxjLCB0aW1lRGVsdGEsIHVuaXQsIG1vbWVudEZvcm1hdCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgbm93ID0gd2luZG93Lm1vbWVudCgpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudERhdGUgPSBkYXRlLmNsb25lKCkuc2V0KHtcbiAgICAgICAgICAgICAgICBob3VyOiBub3cuZ2V0KFwiaG91clwiKSxcbiAgICAgICAgICAgICAgICBtaW51dGU6IG5vdy5nZXQoXCJtaW51dGVcIiksXG4gICAgICAgICAgICAgICAgc2Vjb25kOiBub3cuZ2V0KFwic2Vjb25kXCIpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoY2FsYykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnREYXRlLmFkZChwYXJzZUludCh0aW1lRGVsdGEsIDEwKSwgdW5pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobW9tZW50Rm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnREYXRlLmZvcm1hdChtb21lbnRGb3JtYXQuc3Vic3RyaW5nKDEpLnRyaW0oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudERhdGUuZm9ybWF0KGZvcm1hdCk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqZGF0ZVxccyp9fS9naSwgZmlsZW5hbWUpXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqdGltZVxccyp9fS9naSwgd2luZG93Lm1vbWVudCgpLmZvcm1hdChcIkhIOm1tXCIpKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnRpdGxlXFxzKn19L2dpLCBmaWxlbmFtZSkpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB3aW5kb3cuYXBwLmZvbGRNYW5hZ2VyLnNhdmUoY3JlYXRlZEZpbGUsIElGb2xkSW5mbyk7XG4gICAgICAgIHJldHVybiBjcmVhdGVkRmlsZTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gY3JlYXRlIGZpbGU6ICcke25vcm1hbGl6ZWRQYXRofSdgLCBlcnIpO1xuICAgICAgICBuZXcgb2JzaWRpYW4uTm90aWNlKFwiVW5hYmxlIHRvIGNyZWF0ZSBuZXcgZmlsZS5cIik7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0TW9udGhseU5vdGUoZGF0ZSwgbW9udGhseU5vdGVzKSB7XG4gICAgcmV0dXJuIG1vbnRobHlOb3Rlc1tnZXREYXRlVUlEKGRhdGUsIFwibW9udGhcIildID8/IG51bGw7XG59XG5mdW5jdGlvbiBnZXRBbGxNb250aGx5Tm90ZXMoKSB7XG4gICAgY29uc3QgbW9udGhseU5vdGVzID0ge307XG4gICAgaWYgKCFhcHBIYXNNb250aGx5Tm90ZXNQbHVnaW5Mb2FkZWQoKSkge1xuICAgICAgICByZXR1cm4gbW9udGhseU5vdGVzO1xuICAgIH1cbiAgICBjb25zdCB7IHZhdWx0IH0gPSB3aW5kb3cuYXBwO1xuICAgIGNvbnN0IHsgZm9sZGVyIH0gPSBnZXRNb250aGx5Tm90ZVNldHRpbmdzKCk7XG4gICAgY29uc3QgbW9udGhseU5vdGVzRm9sZGVyID0gdmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG9ic2lkaWFuLm5vcm1hbGl6ZVBhdGgoZm9sZGVyKSk7XG4gICAgaWYgKCFtb250aGx5Tm90ZXNGb2xkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1vbnRobHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvcihcIkZhaWxlZCB0byBmaW5kIG1vbnRobHkgbm90ZXMgZm9sZGVyXCIpO1xuICAgIH1cbiAgICBvYnNpZGlhbi5WYXVsdC5yZWN1cnNlQ2hpbGRyZW4obW9udGhseU5vdGVzRm9sZGVyLCAobm90ZSkgPT4ge1xuICAgICAgICBpZiAobm90ZSBpbnN0YW5jZW9mIG9ic2lkaWFuLlRGaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRlID0gZ2V0RGF0ZUZyb21GaWxlKG5vdGUsIFwibW9udGhcIik7XG4gICAgICAgICAgICBpZiAoZGF0ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVTdHJpbmcgPSBnZXREYXRlVUlEKGRhdGUsIFwibW9udGhcIik7XG4gICAgICAgICAgICAgICAgbW9udGhseU5vdGVzW2RhdGVTdHJpbmddID0gbm90ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBtb250aGx5Tm90ZXM7XG59XG5cbmZ1bmN0aW9uIGFwcEhhc0RhaWx5Tm90ZXNQbHVnaW5Mb2FkZWQoKSB7XG4gICAgY29uc3QgeyBhcHAgfSA9IHdpbmRvdztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0IGRhaWx5Tm90ZXNQbHVnaW4gPSBhcHAuaW50ZXJuYWxQbHVnaW5zLnBsdWdpbnNbXCJkYWlseS1ub3Rlc1wiXTtcbiAgICBpZiAoZGFpbHlOb3Rlc1BsdWdpbiAmJiBkYWlseU5vdGVzUGx1Z2luLmVuYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcGVyaW9kaWNOb3RlcyA9IGFwcC5wbHVnaW5zLmdldFBsdWdpbihcInBlcmlvZGljLW5vdGVzXCIpO1xuICAgIHJldHVybiBwZXJpb2RpY05vdGVzICYmIHBlcmlvZGljTm90ZXMuc2V0dGluZ3M/LmRhaWx5Py5lbmFibGVkO1xufVxuLyoqXG4gKiBYWFg6IFwiV2Vla2x5IE5vdGVzXCIgbGl2ZSBpbiBlaXRoZXIgdGhlIENhbGVuZGFyIHBsdWdpbiBvciB0aGUgcGVyaW9kaWMtbm90ZXMgcGx1Z2luLlxuICogQ2hlY2sgYm90aCB1bnRpbCB0aGUgd2Vla2x5IG5vdGVzIGZlYXR1cmUgaXMgcmVtb3ZlZCBmcm9tIHRoZSBDYWxlbmRhciBwbHVnaW4uXG4gKi9cbmZ1bmN0aW9uIGFwcEhhc1dlZWtseU5vdGVzUGx1Z2luTG9hZGVkKCkge1xuICAgIGNvbnN0IHsgYXBwIH0gPSB3aW5kb3c7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBpZiAoYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKFwiY2FsZW5kYXJcIikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcGVyaW9kaWNOb3RlcyA9IGFwcC5wbHVnaW5zLmdldFBsdWdpbihcInBlcmlvZGljLW5vdGVzXCIpO1xuICAgIHJldHVybiBwZXJpb2RpY05vdGVzICYmIHBlcmlvZGljTm90ZXMuc2V0dGluZ3M/LndlZWtseT8uZW5hYmxlZDtcbn1cbmZ1bmN0aW9uIGFwcEhhc01vbnRobHlOb3Rlc1BsdWdpbkxvYWRlZCgpIHtcbiAgICBjb25zdCB7IGFwcCB9ID0gd2luZG93O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcGVyaW9kaWNOb3RlcyA9IGFwcC5wbHVnaW5zLmdldFBsdWdpbihcInBlcmlvZGljLW5vdGVzXCIpO1xuICAgIHJldHVybiBwZXJpb2RpY05vdGVzICYmIHBlcmlvZGljTm90ZXMuc2V0dGluZ3M/Lm1vbnRobHk/LmVuYWJsZWQ7XG59XG5mdW5jdGlvbiBnZXRQZXJpb2RpY05vdGVTZXR0aW5ncyhncmFudWxhcml0eSkge1xuICAgIGNvbnN0IGdldFNldHRpbmdzID0ge1xuICAgICAgICBkYXk6IGdldERhaWx5Tm90ZVNldHRpbmdzLFxuICAgICAgICB3ZWVrOiBnZXRXZWVrbHlOb3RlU2V0dGluZ3MsXG4gICAgICAgIG1vbnRoOiBnZXRNb250aGx5Tm90ZVNldHRpbmdzLFxuICAgIH1bZ3JhbnVsYXJpdHldO1xuICAgIHJldHVybiBnZXRTZXR0aW5ncygpO1xufVxuZnVuY3Rpb24gY3JlYXRlUGVyaW9kaWNOb3RlKGdyYW51bGFyaXR5LCBkYXRlKSB7XG4gICAgY29uc3QgY3JlYXRlRm4gPSB7XG4gICAgICAgIGRheTogY3JlYXRlRGFpbHlOb3RlLFxuICAgICAgICBtb250aDogY3JlYXRlTW9udGhseU5vdGUsXG4gICAgICAgIHdlZWs6IGNyZWF0ZVdlZWtseU5vdGUsXG4gICAgfTtcbiAgICByZXR1cm4gY3JlYXRlRm5bZ3JhbnVsYXJpdHldKGRhdGUpO1xufVxuXG5leHBvcnRzLkRFRkFVTFRfREFJTFlfTk9URV9GT1JNQVQgPSBERUZBVUxUX0RBSUxZX05PVEVfRk9STUFUO1xuZXhwb3J0cy5ERUZBVUxUX01PTlRITFlfTk9URV9GT1JNQVQgPSBERUZBVUxUX01PTlRITFlfTk9URV9GT1JNQVQ7XG5leHBvcnRzLkRFRkFVTFRfV0VFS0xZX05PVEVfRk9STUFUID0gREVGQVVMVF9XRUVLTFlfTk9URV9GT1JNQVQ7XG5leHBvcnRzLmFwcEhhc0RhaWx5Tm90ZXNQbHVnaW5Mb2FkZWQgPSBhcHBIYXNEYWlseU5vdGVzUGx1Z2luTG9hZGVkO1xuZXhwb3J0cy5hcHBIYXNNb250aGx5Tm90ZXNQbHVnaW5Mb2FkZWQgPSBhcHBIYXNNb250aGx5Tm90ZXNQbHVnaW5Mb2FkZWQ7XG5leHBvcnRzLmFwcEhhc1dlZWtseU5vdGVzUGx1Z2luTG9hZGVkID0gYXBwSGFzV2Vla2x5Tm90ZXNQbHVnaW5Mb2FkZWQ7XG5leHBvcnRzLmNyZWF0ZURhaWx5Tm90ZSA9IGNyZWF0ZURhaWx5Tm90ZTtcbmV4cG9ydHMuY3JlYXRlTW9udGhseU5vdGUgPSBjcmVhdGVNb250aGx5Tm90ZTtcbmV4cG9ydHMuY3JlYXRlUGVyaW9kaWNOb3RlID0gY3JlYXRlUGVyaW9kaWNOb3RlO1xuZXhwb3J0cy5jcmVhdGVXZWVrbHlOb3RlID0gY3JlYXRlV2Vla2x5Tm90ZTtcbmV4cG9ydHMuZ2V0QWxsRGFpbHlOb3RlcyA9IGdldEFsbERhaWx5Tm90ZXM7XG5leHBvcnRzLmdldEFsbE1vbnRobHlOb3RlcyA9IGdldEFsbE1vbnRobHlOb3RlcztcbmV4cG9ydHMuZ2V0QWxsV2Vla2x5Tm90ZXMgPSBnZXRBbGxXZWVrbHlOb3RlcztcbmV4cG9ydHMuZ2V0RGFpbHlOb3RlID0gZ2V0RGFpbHlOb3RlO1xuZXhwb3J0cy5nZXREYWlseU5vdGVTZXR0aW5ncyA9IGdldERhaWx5Tm90ZVNldHRpbmdzO1xuZXhwb3J0cy5nZXREYXRlRnJvbUZpbGUgPSBnZXREYXRlRnJvbUZpbGU7XG5leHBvcnRzLmdldERhdGVGcm9tUGF0aCA9IGdldERhdGVGcm9tUGF0aDtcbmV4cG9ydHMuZ2V0RGF0ZVVJRCA9IGdldERhdGVVSUQ7XG5leHBvcnRzLmdldE1vbnRobHlOb3RlID0gZ2V0TW9udGhseU5vdGU7XG5leHBvcnRzLmdldE1vbnRobHlOb3RlU2V0dGluZ3MgPSBnZXRNb250aGx5Tm90ZVNldHRpbmdzO1xuZXhwb3J0cy5nZXRQZXJpb2RpY05vdGVTZXR0aW5ncyA9IGdldFBlcmlvZGljTm90ZVNldHRpbmdzO1xuZXhwb3J0cy5nZXRUZW1wbGF0ZUluZm8gPSBnZXRUZW1wbGF0ZUluZm87XG5leHBvcnRzLmdldFdlZWtseU5vdGUgPSBnZXRXZWVrbHlOb3RlO1xuZXhwb3J0cy5nZXRXZWVrbHlOb3RlU2V0dGluZ3MgPSBnZXRXZWVrbHlOb3RlU2V0dGluZ3M7XG4iLCJpbXBvcnQgVHJhY2tlciBmcm9tIFwiLi9tYWluXCI7XHJcbmltcG9ydCB7XHJcbiAgICBTZWFyY2hUeXBlLFxyXG4gICAgQmFySW5mbyxcclxuICAgIENvbW1vbkNoYXJ0SW5mbyxcclxuICAgIFF1ZXJ5LFxyXG4gICAgUmVuZGVySW5mbyxcclxuICAgIFN1bW1hcnlJbmZvLFxyXG4gICAgTWFyZ2luLFxyXG4gICAgT3V0cHV0VHlwZSxcclxuICAgIExpbmVJbmZvLFxyXG4gICAgUGllSW5mbyxcclxuICAgIE1vbnRoSW5mbyxcclxuICAgIEhlYXRtYXBJbmZvLFxyXG4gICAgQnVsbGV0SW5mbyxcclxuICAgIERhdGFzZXQsXHJcbn0gZnJvbSBcIi4vZGF0YVwiO1xyXG5pbXBvcnQgeyBURm9sZGVyLCBub3JtYWxpemVQYXRoIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7IHBhcnNlWWFtbCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBnZXREYWlseU5vdGVTZXR0aW5ncyB9IGZyb20gXCJvYnNpZGlhbi1kYWlseS1ub3Rlcy1pbnRlcmZhY2VcIjtcclxuaW1wb3J0ICogYXMgaGVscGVyIGZyb20gXCIuL2hlbHBlclwiO1xyXG5cclxuZnVuY3Rpb24gc3RyVG9Cb29sKHN0cjogc3RyaW5nKTogYm9vbGVhbiB8IG51bGwge1xyXG4gICAgc3RyID0gc3RyLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgc3dpdGNoIChzdHIpIHtcclxuICAgICAgICBjYXNlIFwidHJ1ZVwiOlxyXG4gICAgICAgIGNhc2UgXCIxXCI6XHJcbiAgICAgICAgY2FzZSBcIm9uXCI6XHJcbiAgICAgICAgY2FzZSBcInllc1wiOlxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBjYXNlIFwiZmFsc2VcIjpcclxuICAgICAgICBjYXNlIFwiMFwiOlxyXG4gICAgICAgIGNhc2UgXCJvZmZcIjpcclxuICAgICAgICBjYXNlIFwibm9cIjpcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHZhbGlkYXRlU2VhcmNoVHlwZShzZWFyY2hUeXBlOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIGlmIChcclxuICAgICAgICBzZWFyY2hUeXBlLnRvTG93ZXJDYXNlKCkgPT09IFwidGFnXCIgfHxcclxuICAgICAgICBzZWFyY2hUeXBlLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiIHx8XHJcbiAgICAgICAgc2VhcmNoVHlwZS50b0xvd2VyQ2FzZSgpID09PSBcImZyb250bWF0dGVyXCIgfHxcclxuICAgICAgICBzZWFyY2hUeXBlLnRvTG93ZXJDYXNlKCkgPT09IFwid2lraVwiIHx8XHJcbiAgICAgICAgc2VhcmNoVHlwZS50b0xvd2VyQ2FzZSgpID09PSBcImR2ZmllbGRcIiB8fFxyXG4gICAgICAgIHNlYXJjaFR5cGUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0YWJsZVwiIHx8XHJcbiAgICAgICAgc2VhcmNoVHlwZS50b0xvd2VyQ2FzZSgpID09PSBcImZpbGVtZXRhXCIgfHxcclxuICAgICAgICBzZWFyY2hUeXBlLnRvTG93ZXJDYXNlKCkgPT09IFwidGFza1wiIHx8XHJcbiAgICAgICAgc2VhcmNoVHlwZS50b0xvd2VyQ2FzZSgpID09PSBcInRhc2suYWxsXCIgfHxcclxuICAgICAgICBzZWFyY2hUeXBlLnRvTG93ZXJDYXNlKCkgPT09IFwidGFzay5kb25lXCIgfHxcclxuICAgICAgICBzZWFyY2hUeXBlLnRvTG93ZXJDYXNlKCkgPT09IFwidGFzay5ub3Rkb25lXCJcclxuICAgICkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiB2YWxpZGF0ZVlBeGlzTG9jYXRpb24obG9jYXRpb246IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKGxvY2F0aW9uID09PSBcImxlZnRcIiB8fCBsb2NhdGlvbiA9PT0gXCJyaWdodFwiIHx8IGxvY2F0aW9uID09PSBcIm5vbmVcIikge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiB2YWxpZGF0ZUNvbG9yKGNvbG9yOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRCb29sQXJyYXlGcm9tSW5wdXQoXHJcbiAgICBuYW1lOiBzdHJpbmcsXHJcbiAgICBpbnB1dDogYW55LFxyXG4gICAgbnVtRGF0YXNldDogbnVtYmVyLFxyXG4gICAgZGVmYXVsdFZhbHVlOiBib29sZWFuLFxyXG4gICAgYWxsb3dOb1ZhbGlkVmFsdWU6IGJvb2xlYW5cclxuKTogQXJyYXk8Ym9vbGVhbj4gfCBzdHJpbmcge1xyXG4gICAgbGV0IGFycmF5OiBBcnJheTxib29sZWFuPiA9IFtdO1xyXG4gICAgbGV0IGVycm9yTWVzc2FnZSA9IFwiXCI7XHJcbiAgICBsZXQgbnVtVmFsaWRWYWx1ZSA9IDA7XHJcblxyXG4gICAgd2hpbGUgKG51bURhdGFzZXQgPiBhcnJheS5sZW5ndGgpIHtcclxuICAgICAgICBhcnJheS5wdXNoKGRlZmF1bHRWYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJ1bmRlZmluZWRcIiB8fCBpbnB1dCA9PT0gbnVsbCkge1xyXG4gICAgICAgIC8vIGFsbCBkZWZhdWx0VmFsdWVcclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSBcIm9iamVjdFwiICYmIGlucHV0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dC5sZW5ndGggPiBudW1EYXRhc2V0KSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIlRvbyBtYW55IGlucHV0cyBmb3IgcGFyYW1ldGVyICdcIiArIG5hbWUgKyBcIidcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGlucHV0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJFbXB0eSBhcnJheSBub3QgYWxsb3dkIGZvciBcIiArIG5hbWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZCA9IDA7IGluZCA8IGFycmF5Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbmQgPCBpbnB1dC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyciA9IGlucHV0W2luZF07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByZXYgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSBpbnB1dFtpbmQgLSAxXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VyciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyID0gY3Vyci50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBwcmV2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0cyBmb3IgXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjdXJyID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gY3VycjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtVmFsaWRWYWx1ZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dHMgZm9yIFwiICsgbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBFeGNlZWRzIHRoZSBsZW5ndGggb2YgaW5wdXQsIHVzZSBwcmV2IHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhc3QgPSBpbnB1dFtpbnB1dC5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobnVtVmFsaWRWYWx1ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGxhc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIGxldCBzcGxpdHRlZCA9IGlucHV0LnNwbGl0KFwiLFwiKTtcclxuICAgICAgICBpZiAoc3BsaXR0ZWQubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBpZiAoc3BsaXR0ZWQubGVuZ3RoID4gbnVtRGF0YXNldCkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJUb28gbWFueSBpbnB1dHMgZm9yIHBhcmFtZXRlciAnXCIgKyBuYW1lICsgXCInXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZCA9IDA7IGluZCA8IGFycmF5Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbmQgPCBzcGxpdHRlZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyciA9IHNwbGl0dGVkW2luZF0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwcmV2ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2ID0gc3RyVG9Cb29sKHNwbGl0dGVkW2luZCAtIDFdLnRyaW0oKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gcHJldjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3VyckJvb2wgPSBzdHJUb0Jvb2woY3Vycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyQm9vbCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGN1cnJCb29sO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtVmFsaWRWYWx1ZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0cyBmb3IgXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEV4Y2VlZHMgdGhlIGxlbmd0aCBvZiBpbnB1dCwgdXNlIHByZXYgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdCA9IHN0clRvQm9vbChzcGxpdHRlZFtzcGxpdHRlZC5sZW5ndGggLSAxXS50cmltKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChudW1WYWxpZFZhbHVlID4gMCAmJiBsYXN0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBsYXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGlucHV0ID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhbGwgZGVmYXVsdFZhbHVlXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW5wdXRCb29sID0gc3RyVG9Cb29sKGlucHV0KTtcclxuICAgICAgICAgICAgICAgIGlmIChpbnB1dEJvb2wgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcnJheVswXSA9IGlucHV0Qm9vbDtcclxuICAgICAgICAgICAgICAgICAgICBudW1WYWxpZFZhbHVlKys7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaW5kID0gMTsgaW5kIDwgYXJyYXkubGVuZ3RoOyBpbmQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gaW5wdXRCb29sO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0cyBmb3IgXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgICAgYXJyYXlbMF0gPSBpbnB1dDtcclxuICAgICAgICBudW1WYWxpZFZhbHVlKys7XHJcbiAgICAgICAgZm9yIChsZXQgaW5kID0gMTsgaW5kIDwgYXJyYXkubGVuZ3RoOyBpbmQrKykge1xyXG4gICAgICAgICAgICBhcnJheVtpbmRdID0gaW5wdXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgaW5wdXRzIGZvciBcIiArIG5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFhbGxvd05vVmFsaWRWYWx1ZSAmJiBudW1WYWxpZFZhbHVlID09PSAwKSB7XHJcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJObyB2YWxpZCBpbnB1dCBmb3IgXCIgKyBuYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChlcnJvck1lc3NhZ2UgIT09IFwiXCIpIHtcclxuICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhcnJheTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TnVtYmVyQXJyYXlGcm9tSW5wdXQoXHJcbiAgICBuYW1lOiBzdHJpbmcsXHJcbiAgICBpbnB1dDogYW55LFxyXG4gICAgbnVtRGF0YXNldDogbnVtYmVyLFxyXG4gICAgZGVmYXVsdFZhbHVlOiBudW1iZXIsXHJcbiAgICBhbGxvd05vVmFsaWRWYWx1ZTogYm9vbGVhblxyXG4pOiBBcnJheTxudW1iZXI+IHwgc3RyaW5nIHtcclxuICAgIGxldCBhcnJheTogQXJyYXk8bnVtYmVyPiA9IFtdO1xyXG4gICAgbGV0IGVycm9yTWVzc2FnZSA9IFwiXCI7XHJcbiAgICBsZXQgbnVtVmFsaWRWYWx1ZSA9IDA7XHJcblxyXG4gICAgd2hpbGUgKG51bURhdGFzZXQgPiBhcnJheS5sZW5ndGgpIHtcclxuICAgICAgICBhcnJheS5wdXNoKGRlZmF1bHRWYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJ1bmRlZmluZWRcIiB8fCBpbnB1dCA9PT0gbnVsbCkge1xyXG4gICAgICAgIC8vIGFsbCBkZWZhdWx0VmFsdWVcclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSBcIm9iamVjdFwiICYmIGlucHV0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dC5sZW5ndGggPiBudW1EYXRhc2V0KSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIlRvbyBtYW55IGlucHV0cyBmb3IgcGFyYW1ldGVyICdcIiArIG5hbWUgKyBcIidcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGlucHV0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJFbXB0eSBhcnJheSBub3QgYWxsb3dkIGZvciBcIiArIG5hbWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZCA9IDA7IGluZCA8IGFycmF5Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbmQgPCBpbnB1dC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyciA9IGlucHV0W2luZF07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByZXYgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSBpbnB1dFtpbmQgLSAxXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VyciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyID0gY3Vyci50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBwcmV2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0cyBmb3IgXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjdXJyID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBjdXJyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBudW1WYWxpZFZhbHVlKys7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0cyBmb3IgXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEV4Y2VlZHMgdGhlIGxlbmd0aCBvZiBpbnB1dCwgdXNlIHByZXYgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdCA9IGlucHV0W2lucHV0Lmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChudW1WYWxpZFZhbHVlID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gbGFzdDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgbGV0IHNwbGl0dGVkID0gaW5wdXQuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgIGlmIChzcGxpdHRlZC5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIGlmIChzcGxpdHRlZC5sZW5ndGggPiBudW1EYXRhc2V0KSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIlRvbyBtYW55IGlucHV0cyBmb3IgcGFyYW1ldGVyICdcIiArIG5hbWUgKyBcIidcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChsZXQgaW5kID0gMDsgaW5kIDwgYXJyYXkubGVuZ3RoOyBpbmQrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZCA8IHNwbGl0dGVkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJyID0gc3BsaXR0ZWRbaW5kXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByZXYgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSBoZWxwZXIucGFyc2VGbG9hdEZyb21BbnkoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGxpdHRlZFtpbmQgLSAxXS50cmltKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgKS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnIgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXYgIT09IG51bGwgJiYgTnVtYmVyLmlzTnVtYmVyKHByZXYpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gcHJldjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3Vyck51bSA9IGhlbHBlci5wYXJzZUZsb2F0RnJvbUFueShjdXJyKS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE51bWJlci5pc051bWJlcihjdXJyTnVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGN1cnJOdW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1WYWxpZFZhbHVlKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgaW5wdXRzIGZvciBcIiArIG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRXhjZWVkcyB0aGUgbGVuZ3RoIG9mIGlucHV0LCB1c2UgcHJldiB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBsYXN0ID0gaGVscGVyLnBhcnNlRmxvYXRGcm9tQW55KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGxpdHRlZFtpbnB1dC5sZW5ndGggLSAxXS50cmltKClcclxuICAgICAgICAgICAgICAgICAgICApLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChudW1WYWxpZFZhbHVlID4gMCAmJiBOdW1iZXIuaXNOdW1iZXIobGFzdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGxhc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoaW5wdXQgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIC8vIGFsbCBkZWZhdWx0VmFsdWVcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldCBpbnB1dE51bSA9IGhlbHBlci5wYXJzZUZsb2F0RnJvbUFueShpbnB1dCkudmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKGlucHV0TnVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycmF5WzBdID0gaW5wdXROdW07XHJcbiAgICAgICAgICAgICAgICAgICAgbnVtVmFsaWRWYWx1ZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGluZCA9IDE7IGluZCA8IGFycmF5Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGlucHV0TnVtO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0cyBmb3IgXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKGlucHV0KSkge1xyXG4gICAgICAgICAgICBhcnJheVswXSA9IGlucHV0O1xyXG4gICAgICAgICAgICBudW1WYWxpZFZhbHVlKys7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZCA9IDE7IGluZCA8IGFycmF5Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBpbnB1dDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dHMgZm9yIFwiICsgbmFtZTtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dHMgZm9yIFwiICsgbmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWFsbG93Tm9WYWxpZFZhbHVlICYmIG51bVZhbGlkVmFsdWUgPT09IDApIHtcclxuICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIk5vIHZhbGlkIGlucHV0IGZvciBcIiArIG5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGVycm9yTWVzc2FnZSAhPT0gXCJcIikge1xyXG4gICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFycmF5O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRTdHJpbmdBcnJheUZyb21JbnB1dChcclxuICAgIG5hbWU6IHN0cmluZyxcclxuICAgIGlucHV0OiBhbnksXHJcbiAgICBudW1EYXRhc2V0OiBudW1iZXIsXHJcbiAgICBkZWZhdWx0VmFsdWU6IHN0cmluZyxcclxuICAgIHZhbGlkYXRvcjogRnVuY3Rpb24sXHJcbiAgICBhbGxvd05vVmFsaWRWYWx1ZTogYm9vbGVhblxyXG4pOiBBcnJheTxzdHJpbmc+IHwgc3RyaW5nIHtcclxuICAgIGxldCBhcnJheTogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG4gICAgbGV0IGVycm9yTWVzc2FnZSA9IFwiXCI7XHJcbiAgICBsZXQgbnVtVmFsaWRWYWx1ZSA9IDA7XHJcblxyXG4gICAgd2hpbGUgKG51bURhdGFzZXQgPiBhcnJheS5sZW5ndGgpIHtcclxuICAgICAgICBhcnJheS5wdXNoKGRlZmF1bHRWYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJ1bmRlZmluZWRcIiB8fCBpbnB1dCA9PT0gbnVsbCkge1xyXG4gICAgICAgIC8vIGFsbCBkZWZhdWx0VmFsdWVcclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSBcIm9iamVjdFwiICYmIGlucHV0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dC5sZW5ndGggPiBudW1EYXRhc2V0KSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIlRvbyBtYW55IGlucHV0cyBmb3IgcGFyYW1ldGVyICdcIiArIG5hbWUgKyBcIidcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGlucHV0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJFbXB0eSBhcnJheSBub3QgYWxsb3dkIGZvciBcIiArIG5hbWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZCA9IDA7IGluZCA8IGFycmF5Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbmQgPCBpbnB1dC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyciA9IGlucHV0W2luZF07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByZXYgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSBpbnB1dFtpbmQgLSAxXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VyciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyID0gY3Vyci50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBwcmV2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0b3IoY3VycikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGN1cnI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bVZhbGlkVmFsdWUrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgaW5wdXRzIGZvciBcIiArIG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGN1cnI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtVmFsaWRWYWx1ZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0cyBmb3IgXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEV4Y2VlZHMgdGhlIGxlbmd0aCBvZiBpbnB1dCwgdXNlIHByZXYgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdCA9IGlucHV0W2lucHV0Lmxlbmd0aCAtIDFdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobnVtVmFsaWRWYWx1ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGxhc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIGxldCBzcGxpdHRlZCA9IGlucHV0LnNwbGl0KFwiLFwiKTtcclxuICAgICAgICBpZiAoc3BsaXR0ZWQubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBpZiAoc3BsaXR0ZWQubGVuZ3RoID4gbnVtRGF0YXNldCkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJUb28gbWFueSBpbnB1dHMgZm9yIHBhcmFtZXRlciAnXCIgKyBuYW1lICsgXCInXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZCA9IDA7IGluZCA8IGFycmF5Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbmQgPCBzcGxpdHRlZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyciA9IHNwbGl0dGVkW2luZF0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwcmV2ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2ID0gc3BsaXR0ZWRbaW5kIC0gMV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VyciA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IHByZXY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRvcihjdXJyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBjdXJyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bVZhbGlkVmFsdWUrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0cyBmb3IgXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGN1cnI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1WYWxpZFZhbHVlKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEV4Y2VlZHMgdGhlIGxlbmd0aCBvZiBpbnB1dCwgdXNlIHByZXYgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdCA9IHNwbGl0dGVkW3NwbGl0dGVkLmxlbmd0aCAtIDFdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobnVtVmFsaWRWYWx1ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGxhc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoaW5wdXQgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIC8vIGFsbCBkZWZhdWx0VmFsdWVcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRhdG9yKGlucHV0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVswXSA9IGlucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBudW1WYWxpZFZhbHVlKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGluZCA9IDE7IGluZCA8IGFycmF5Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBpbnB1dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dHMgZm9yIFwiICsgbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycmF5WzBdID0gaW5wdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbnVtVmFsaWRWYWx1ZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGluZCA9IDE7IGluZCA8IGFycmF5Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGlucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0cyBmb3IgXCIgKyBuYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghYWxsb3dOb1ZhbGlkVmFsdWUgJiYgbnVtVmFsaWRWYWx1ZSA9PT0gMCkge1xyXG4gICAgICAgIGVycm9yTWVzc2FnZSA9IFwiTm8gdmFsaWQgaW5wdXQgZm9yIFwiICsgbmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZXJyb3JNZXNzYWdlICE9PSBcIlwiKSB7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYXJyYXk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldE51bWJlckFycmF5KG5hbWU6IHN0cmluZywgaW5wdXQ6IGFueSk6IEFycmF5PG51bWJlcj4gfCBzdHJpbmcge1xyXG4gICAgbGV0IG51bUFycmF5OiBBcnJheTxudW1iZXI+ID0gW107XHJcblxyXG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJ1bmRlZmluZWRcIiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIG51bUFycmF5O1xyXG5cclxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgZWxlbSBvZiBpbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHYgPSBwYXJzZUZsb2F0KGVsZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOdW1iZXIodikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtQXJyYXkucHVzaCh2KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gYFBhcmFtZXRlciAnJHtuYW1lfScgYWNjZXB0cyBvbmx5IG51bWJlcnNgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgbGV0IHNwbGl0dGVkID0gaW5wdXQuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgIGlmIChzcGxpdHRlZC5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHBpZWNlIG9mIHNwbGl0dGVkKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdiA9IHBhcnNlRmxvYXQocGllY2UudHJpbSgpKTtcclxuICAgICAgICAgICAgICAgIGlmICghTnVtYmVyLmlzTmFOKHYpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTnVtYmVyLmlzTnVtYmVyKE5hTikgLS0+IHRydWVcclxuICAgICAgICAgICAgICAgICAgICBudW1BcnJheS5wdXNoKHYpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gYFBhcmFtZXRlciAnJHtuYW1lfScgYWNjZXB0cyBvbmx5IG51bWJlcnNgO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGlucHV0ID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBgRW1wdHkgJHtuYW1lfSBpcyBub3QgYWxsb3dlZC5gO1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCB2ID0gcGFyc2VGbG9hdChpbnB1dCk7XHJcbiAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOdW1iZXIodikpIHtcclxuICAgICAgICAgICAgICAgIG51bUFycmF5LnB1c2godik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gYFBhcmFtZXRlciAnJHtuYW1lfScgYWNjZXB0cyBvbmx5IG51bWJlcnNgO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgbnVtQXJyYXkucHVzaChpbnB1dCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBgSW52YWxpZCAke25hbWV9YDtcclxuICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBudW1BcnJheTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U3RyaW5nQXJyYXkobmFtZTogc3RyaW5nLCBpbnB1dDogYW55KTogQXJyYXk8c3RyaW5nPiB8IHN0cmluZyB7XHJcbiAgICBsZXQgc3RyQXJyYXk6IEFycmF5PHN0cmluZz4gPSBbXTtcclxuXHJcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSBcInVuZGVmaW5lZFwiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gc3RyQXJyYXk7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBlbGVtIG9mIGlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJBcnJheS5wdXNoKGVsZW0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICBsZXQgc3BsaXR0ZWQgPSBpbnB1dC5zcGxpdChcIixcIik7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coc3BsaXR0ZWQpO1xyXG4gICAgICAgIGlmIChzcGxpdHRlZC5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHBpZWNlIG9mIHNwbGl0dGVkKSB7XHJcbiAgICAgICAgICAgICAgICBzdHJBcnJheS5wdXNoKHBpZWNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IGBFbXB0eSAke25hbWV9IGlzIG5vdCBhbGxvd2VkLmA7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3RyQXJyYXkucHVzaChpbnB1dCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gYEludmFsaWQgJHtuYW1lfWA7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3RyQXJyYXk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlQ29tbW9uQ2hhcnRJbmZvKHlhbWw6IGFueSwgcmVuZGVySW5mbzogQ29tbW9uQ2hhcnRJbmZvKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInBhcnNlQ29tbW9uQ2hhcnRJbmZvXCIpO1xyXG5cclxuICAgIC8vIHNpbmdsZSB2YWx1ZSwgdXNlIGRlZmF1bHQgdmFsdWUgaWYgbm8gdmFsdWUgZnJvbSBZQU1MXHJcbiAgICBpZiAoeWFtbCkge1xyXG4gICAgICAgIC8vIHRpdGxlXHJcbiAgICAgICAgaWYgKHR5cGVvZiB5YW1sLnRpdGxlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJlbmRlckluZm8udGl0bGUgPSB5YW1sLnRpdGxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8geEF4aXNMYWJlbFxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbC54QXhpc0xhYmVsID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJlbmRlckluZm8ueEF4aXNMYWJlbCA9IHlhbWwueEF4aXNMYWJlbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHhBeGlzQ29sb3JcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWwueEF4aXNDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZW5kZXJJbmZvLnhBeGlzQ29sb3IgPSB5YW1sLnhBeGlzQ29sb3I7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB4QXhpc0xhYmVsQ29sb3JcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWwueEF4aXNMYWJlbENvbG9yID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJlbmRlckluZm8ueEF4aXNMYWJlbENvbG9yID0geWFtbC54QXhpc0xhYmVsQ29sb3I7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhbGxvd0luc3BlY3REYXRhXHJcbiAgICAgICAgaWYgKHR5cGVvZiB5YW1sLmFsbG93SW5zcGVjdERhdGEgPT09IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uYWxsb3dJbnNwZWN0RGF0YSA9IHlhbWwuYWxsb3dJbnNwZWN0RGF0YTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHNob3dMZWdlbmRcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWwuc2hvd0xlZ2VuZCA9PT0gXCJib29sZWFuXCIpIHtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5zaG93TGVnZW5kID0geWFtbC5zaG93TGVnZW5kO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbGVnZW5kUG9zaXRpb25cclxuICAgICAgICBpZiAodHlwZW9mIHlhbWwubGVnZW5kUG9zaXRpb24gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5sZWdlbmRQb3NpdGlvbiA9IHlhbWwubGVnZW5kUG9zaXRpb247XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5sZWdlbmRQb3NpdGlvbiA9IFwiYm90dG9tXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBsZWdlbmRPcmllbnRcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWwubGVnZW5kT3JpZW50YXRpb24gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5sZWdlbmRPcmllbnRhdGlvbiA9IHlhbWwubGVnZW5kT3JpZW50YXRpb247XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5sZWdlbmRQb3NpdGlvbiA9PT0gXCJ0b3BcIiB8fFxyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5sZWdlbmRQb3NpdGlvbiA9PT0gXCJib3R0b21cIlxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubGVnZW5kT3JpZW50YXRpb24gPSBcImhvcml6b250YWxcIjtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubGVnZW5kUG9zaXRpb24gPT09IFwibGVmdFwiIHx8XHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmxlZ2VuZFBvc2l0aW9uID09PSBcInJpZ2h0XCJcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmxlZ2VuZE9yaWVudGF0aW9uID0gXCJ2ZXJ0aWNhbFwiO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5sZWdlbmRPcmllbnRhdGlvbiA9IFwiaG9yaXpvbnRhbFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8ubGVnZW5kUG9zaXRpb24pO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8ubGVnZW5kT3JpZW50YXRpb24pO1xyXG5cclxuICAgICAgICAvLyBsZWdlbmRCZ0NvbG9yXHJcbiAgICAgICAgaWYgKHR5cGVvZiB5YW1sLmxlZ2VuZEJnQ29sb3IgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5sZWdlbmRCZ0NvbG9yID0geWFtbC5sZWdlbmRCZ0NvbG9yO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbGVnZW5kQm9yZGVyQ29sb3JcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWwubGVnZW5kQm9yZGVyQ29sb3IgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5sZWdlbmRCb3JkZXJDb2xvciA9IHlhbWwubGVnZW5kQm9yZGVyQ29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHlBeGlzTGFiZWxcclxuICAgIGxldCByZXRZQXhpc0xhYmVsID0gZ2V0U3RyaW5nQXJyYXlGcm9tSW5wdXQoXHJcbiAgICAgICAgXCJ5QXhpc0xhYmVsXCIsXHJcbiAgICAgICAgeWFtbD8ueUF4aXNMYWJlbCxcclxuICAgICAgICAyLFxyXG4gICAgICAgIFwiVmFsdWVcIixcclxuICAgICAgICBudWxsLFxyXG4gICAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldFlBeGlzTGFiZWwgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0WUF4aXNMYWJlbDsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICB9XHJcbiAgICBpZiAocmV0WUF4aXNMYWJlbC5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgcmV0dXJuIFwieUF4aXNMYWJlbCBhY2NlcHRzIG5vdCBtb3JlIHRoYW4gdHdvIHZhbHVlcyBmb3IgbGVmdCBhbmQgcmlnaHQgeS1heGVzXCI7XHJcbiAgICB9XHJcbiAgICByZW5kZXJJbmZvLnlBeGlzTGFiZWwgPSByZXRZQXhpc0xhYmVsO1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby55QXhpc0xhYmVsKTtcclxuXHJcbiAgICAvLyB5QXhpc0NvbG9yXHJcbiAgICBsZXQgcmV0WUF4aXNDb2xvciA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgIFwieUF4aXNDb2xvclwiLFxyXG4gICAgICAgIHlhbWw/LnlBeGlzQ29sb3IsXHJcbiAgICAgICAgMixcclxuICAgICAgICBcIlwiLFxyXG4gICAgICAgIHZhbGlkYXRlQ29sb3IsXHJcbiAgICAgICAgdHJ1ZVxyXG4gICAgKTtcclxuICAgIGlmICh0eXBlb2YgcmV0WUF4aXNDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRZQXhpc0NvbG9yOyAvLyBlcnJvck1lc3NhZ2VcclxuICAgIH1cclxuICAgIGlmIChyZXRZQXhpc0NvbG9yLmxlbmd0aCA+IDIpIHtcclxuICAgICAgICByZXR1cm4gXCJ5QXhpc0NvbG9yIGFjY2VwdHMgbm90IG1vcmUgdGhhbiB0d28gdmFsdWVzIGZvciBsZWZ0IGFuZCByaWdodCB5LWF4ZXNcIjtcclxuICAgIH1cclxuICAgIHJlbmRlckluZm8ueUF4aXNDb2xvciA9IHJldFlBeGlzQ29sb3I7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLnlBeGlzQ29sb3IpO1xyXG5cclxuICAgIC8vIHlBeGlzTGFiZWxDb2xvclxyXG4gICAgbGV0IHJldFlBeGlzTGFiZWxDb2xvciA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgIFwieUF4aXNMYWJlbENvbG9yXCIsXHJcbiAgICAgICAgeWFtbD8ueUF4aXNMYWJlbENvbG9yLFxyXG4gICAgICAgIDIsXHJcbiAgICAgICAgXCJcIixcclxuICAgICAgICB2YWxpZGF0ZUNvbG9yLFxyXG4gICAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldFlBeGlzTGFiZWxDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRZQXhpc0xhYmVsQ29sb3I7IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgfVxyXG4gICAgaWYgKHJldFlBeGlzTGFiZWxDb2xvci5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgcmV0dXJuIFwieUF4aXNMYWJlbENvbG9yIGFjY2VwdHMgbm90IG1vcmUgdGhhbiB0d28gdmFsdWVzIGZvciBsZWZ0IGFuZCByaWdodCB5LWF4ZXNcIjtcclxuICAgIH1cclxuICAgIHJlbmRlckluZm8ueUF4aXNMYWJlbENvbG9yID0gcmV0WUF4aXNMYWJlbENvbG9yO1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby55QXhpc0xhYmVsQ29sb3IpO1xyXG5cclxuICAgIC8vIHlBeGlzVW5pdFxyXG4gICAgbGV0IHJldFlBeGlzVW5pdCA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgIFwieUF4aXNVbml0XCIsXHJcbiAgICAgICAgeWFtbD8ueUF4aXNVbml0LFxyXG4gICAgICAgIDIsXHJcbiAgICAgICAgXCJcIixcclxuICAgICAgICBudWxsLFxyXG4gICAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldFlBeGlzVW5pdCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRZQXhpc1VuaXQ7IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgfVxyXG4gICAgaWYgKHJldFlBeGlzVW5pdC5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgcmV0dXJuIFwieUF4aXNVbml0IGFjY2VwdHMgbm90IG1vcmUgdGhhbiB0d28gdmFsdWVzIGZvciBsZWZ0IGFuZCByaWdodCB5LWF4ZXNcIjtcclxuICAgIH1cclxuICAgIHJlbmRlckluZm8ueUF4aXNVbml0ID0gcmV0WUF4aXNVbml0O1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby55QXhpc1VuaXQpO1xyXG5cclxuICAgIC8vIHlNaW5cclxuICAgIGxldCByZXRZTWluID0gZ2V0TnVtYmVyQXJyYXlGcm9tSW5wdXQoXCJ5TWluXCIsIHlhbWw/LnlNaW4sIDIsIG51bGwsIHRydWUpO1xyXG4gICAgaWYgKHR5cGVvZiByZXRZTWluID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldFlNaW47IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgfVxyXG4gICAgaWYgKHJldFlNaW4ubGVuZ3RoID4gMikge1xyXG4gICAgICAgIHJldHVybiBcInlNaW4gYWNjZXB0cyBub3QgbW9yZSB0aGFuIHR3byB2YWx1ZXMgZm9yIGxlZnQgYW5kIHJpZ2h0IHktYXhlc1wiO1xyXG4gICAgfVxyXG4gICAgcmVuZGVySW5mby55TWluID0gcmV0WU1pbjtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8ueU1pbik7XHJcblxyXG4gICAgLy8geU1heFxyXG4gICAgbGV0IHJldFlNYXggPSBnZXROdW1iZXJBcnJheUZyb21JbnB1dChcInlNYXhcIiwgeWFtbD8ueU1heCwgMiwgbnVsbCwgdHJ1ZSk7XHJcbiAgICBpZiAodHlwZW9mIHJldFlNYXggPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0WU1heDsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICB9XHJcbiAgICBpZiAocmV0WU1heC5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgcmV0dXJuIFwieU1heCBhY2NlcHRzIG5vdCBtb3JlIHRoYW4gdHdvIHZhbHVlcyBmb3IgbGVmdCBhbmQgcmlnaHQgeS1heGVzXCI7XHJcbiAgICB9XHJcbiAgICByZW5kZXJJbmZvLnlNYXggPSByZXRZTWF4O1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby55TWF4KTtcclxuXHJcbiAgICAvLyByZXZlcnNlWUF4aXNcclxuICAgIGxldCByZXRSZXZlcnNlWUF4aXMgPSBnZXRCb29sQXJyYXlGcm9tSW5wdXQoXHJcbiAgICAgICAgXCJyZXZlcnNlWUF4aXNcIixcclxuICAgICAgICB5YW1sPy5yZXZlcnNlWUF4aXMsXHJcbiAgICAgICAgMixcclxuICAgICAgICBmYWxzZSxcclxuICAgICAgICB0cnVlXHJcbiAgICApO1xyXG4gICAgaWYgKHR5cGVvZiByZXRSZXZlcnNlWUF4aXMgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0UmV2ZXJzZVlBeGlzOyAvLyBlcnJvck1lc3NhZ2VcclxuICAgIH1cclxuICAgIGlmIChyZXRSZXZlcnNlWUF4aXMubGVuZ3RoID4gMikge1xyXG4gICAgICAgIHJldHVybiBcInJldmVyc2VZQXhpcyBhY2NlcHRzIG5vdCBtb3JlIHRoYW4gdHdvIHZhbHVlcyBmb3IgbGVmdCBhbmQgcmlnaHQgeS1heGVzXCI7XHJcbiAgICB9XHJcbiAgICByZW5kZXJJbmZvLnJldmVyc2VZQXhpcyA9IHJldFJldmVyc2VZQXhpcztcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8ucmV2ZXJzZVlBeGlzKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QXZhaWxhYmxlS2V5c09mQ2xhc3Mob2JqOiBvYmplY3QpOiBzdHJpbmdbXSB7XHJcbiAgICBsZXQga2V5czogc3RyaW5nW10gPSBbXTtcclxuICAgIGlmIChvYmogIT09IG51bGwpIHtcclxuICAgICAgICBjb25zdCBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMob2JqKSBhcyBBcnJheTxrZXlvZiBzdHJpbmc+O1xyXG4gICAgICAgIGZvciAobGV0IGtleSBvZiBvYmplY3RLZXlzKSB7XHJcbiAgICAgICAgICAgIGtleXMucHVzaChrZXkudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGtleXM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSZW5kZXJJbmZvRnJvbVlhbWwoXHJcbiAgICB5YW1sVGV4dDogc3RyaW5nLFxyXG4gICAgcGx1Z2luOiBUcmFja2VyXHJcbik6IFJlbmRlckluZm8gfCBzdHJpbmcge1xyXG4gICAgbGV0IHlhbWw7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHlhbWwgPSBwYXJzZVlhbWwoeWFtbFRleHQpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IFwiRXJyb3IgcGFyc2luZyBZQU1MXCI7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgfVxyXG4gICAgaWYgKCF5YW1sKSB7XHJcbiAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IFwiRXJyb3IgcGFyc2luZyBZQU1MXCI7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKHlhbWwpO1xyXG4gICAgbGV0IGtleXNGb3VuZEluWUFNTCA9IGdldEF2YWlsYWJsZUtleXNPZkNsYXNzKHlhbWwpO1xyXG4gICAgLy8gY29uc29sZS5sb2coa2V5c0ZvdW5kSW5ZQU1MKTtcclxuXHJcbiAgICBsZXQgZXJyb3JNZXNzYWdlID0gXCJcIjtcclxuXHJcbiAgICAvLyBTZWFyY2ggdGFyZ2V0XHJcbiAgICBpZiAoIWtleXNGb3VuZEluWUFNTC5pbmNsdWRlcyhcInNlYXJjaFRhcmdldFwiKSkge1xyXG4gICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIlBhcmFtZXRlciAnc2VhcmNoVGFyZ2V0JyBub3QgZm91bmQgaW4gWUFNTFwiO1xyXG4gICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICB9XHJcbiAgICBsZXQgc2VhcmNoVGFyZ2V0OiBBcnJheTxzdHJpbmc+ID0gW107XHJcbiAgICBpZiAodHlwZW9mIHlhbWwuc2VhcmNoVGFyZ2V0ID09PSBcIm9iamVjdFwiICYmIHlhbWwuc2VhcmNoVGFyZ2V0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoeWFtbC5zZWFyY2hUYXJnZXQpKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHRhcmdldCBvZiB5YW1sLnNlYXJjaFRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaFRhcmdldC5wdXNoKHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJFbXB0eSBzZWFyY2ggdGFyZ2V0IGlzIG5vdCBhbGxvd2VkLlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB5YW1sLnNlYXJjaFRhcmdldCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIGxldCBzcGxpdHRlZCA9IHlhbWwuc2VhcmNoVGFyZ2V0LnNwbGl0KFwiLFwiKTtcclxuICAgICAgICBpZiAoc3BsaXR0ZWQubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBwaWVjZSBvZiBzcGxpdHRlZCkge1xyXG4gICAgICAgICAgICAgICAgcGllY2UgPSBwaWVjZS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGllY2UgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWFyY2hUYXJnZXQucHVzaChwaWVjZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiRW1wdHkgc2VhcmNoIHRhcmdldCBpcyBub3QgYWxsb3dlZC5cIjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoeWFtbC5zZWFyY2hUYXJnZXQgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJFbXB0eSBzZWFyY2ggdGFyZ2V0IGlzIG5vdCBhbGxvd2VkLlwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNlYXJjaFRhcmdldC5wdXNoKHlhbWwuc2VhcmNoVGFyZ2V0KTtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBzZWFyY2ggdGFyZ2V0IChzZWFyY2hUYXJnZXQpXCI7XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhzZWFyY2hUYXJnZXQpO1xyXG5cclxuICAgIGlmIChlcnJvck1lc3NhZ2UgIT09IFwiXCIpIHtcclxuICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBudW1EYXRhc2V0cyA9IHNlYXJjaFRhcmdldC5sZW5ndGg7XHJcblxyXG4gICAgLy8gU2VhcmNoIHR5cGVcclxuICAgIGlmICgha2V5c0ZvdW5kSW5ZQU1MLmluY2x1ZGVzKFwic2VhcmNoVHlwZVwiKSkge1xyXG4gICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIlBhcmFtZXRlciAnc2VhcmNoVHlwZScgbm90IGZvdW5kIGluIFlBTUxcIjtcclxuICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgfVxyXG4gICAgbGV0IHNlYXJjaFR5cGU6IEFycmF5PFNlYXJjaFR5cGU+ID0gW107XHJcbiAgICBsZXQgc2VhcmNoU3ViVHlwZTogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG4gICAgbGV0IHJldFNlYXJjaFR5cGUgPSBnZXRTdHJpbmdBcnJheUZyb21JbnB1dChcclxuICAgICAgICBcInNlYXJjaFR5cGVcIixcclxuICAgICAgICB5YW1sLnNlYXJjaFR5cGUsXHJcbiAgICAgICAgbnVtRGF0YXNldHMsXHJcbiAgICAgICAgXCJcIixcclxuICAgICAgICB2YWxpZGF0ZVNlYXJjaFR5cGUsXHJcbiAgICAgICAgZmFsc2VcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldFNlYXJjaFR5cGUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0U2VhcmNoVHlwZTsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBzdHJUeXBlIG9mIHJldFNlYXJjaFR5cGUpIHtcclxuICAgICAgICBzd2l0Y2ggKHN0clR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBcInRhZ1wiOlxyXG4gICAgICAgICAgICAgICAgc2VhcmNoVHlwZS5wdXNoKFNlYXJjaFR5cGUuVGFnKTtcclxuICAgICAgICAgICAgICAgIHNlYXJjaFN1YlR5cGUucHVzaChcIlwiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiZnJvbnRtYXR0ZXJcIjpcclxuICAgICAgICAgICAgICAgIHNlYXJjaFR5cGUucHVzaChTZWFyY2hUeXBlLkZyb250bWF0dGVyKTtcclxuICAgICAgICAgICAgICAgIHNlYXJjaFN1YlR5cGUucHVzaChcIlwiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwid2lraVwiOlxyXG4gICAgICAgICAgICAgICAgc2VhcmNoVHlwZS5wdXNoKFNlYXJjaFR5cGUuV2lraSk7XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hTdWJUeXBlLnB1c2goXCJcIik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInRleHRcIjpcclxuICAgICAgICAgICAgICAgIHNlYXJjaFR5cGUucHVzaChTZWFyY2hUeXBlLlRleHQpO1xyXG4gICAgICAgICAgICAgICAgc2VhcmNoU3ViVHlwZS5wdXNoKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJkdkZpZWxkXCI6XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hUeXBlLnB1c2goU2VhcmNoVHlwZS5kdkZpZWxkKTtcclxuICAgICAgICAgICAgICAgIHNlYXJjaFN1YlR5cGUucHVzaChcIlwiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwidGFibGVcIjpcclxuICAgICAgICAgICAgICAgIHNlYXJjaFR5cGUucHVzaChTZWFyY2hUeXBlLlRhYmxlKTtcclxuICAgICAgICAgICAgICAgIHNlYXJjaFN1YlR5cGUucHVzaChcIlwiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiZmlsZU1ldGFcIjpcclxuICAgICAgICAgICAgICAgIHNlYXJjaFR5cGUucHVzaChTZWFyY2hUeXBlLkZpbGVNZXRhKTtcclxuICAgICAgICAgICAgICAgIHNlYXJjaFN1YlR5cGUucHVzaChcIlwiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwidGFza1wiOlxyXG4gICAgICAgICAgICAgICAgc2VhcmNoVHlwZS5wdXNoKFNlYXJjaFR5cGUuVGFzayk7XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hTdWJUeXBlLnB1c2goXCJhbGxcIik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInRhc2suYWxsXCI6XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hUeXBlLnB1c2goU2VhcmNoVHlwZS5UYXNrKTtcclxuICAgICAgICAgICAgICAgIHNlYXJjaFN1YlR5cGUucHVzaChcImFsbFwiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwidGFzay5kb25lXCI6XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hUeXBlLnB1c2goU2VhcmNoVHlwZS5UYXNrKTtcclxuICAgICAgICAgICAgICAgIHNlYXJjaFN1YlR5cGUucHVzaChcImRvbmVcIik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInRhc2subm90ZG9uZVwiOlxyXG4gICAgICAgICAgICAgICAgc2VhcmNoVHlwZS5wdXNoKFNlYXJjaFR5cGUuVGFzayk7XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hTdWJUeXBlLnB1c2goXCJub3Rkb25lXCIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gQ3VycmVudGx5LCB3ZSBkb24ndCBhbGxvdyB0eXBlICd0YWJsZScgdXNlZCB3aXRoIG90aGVyIHR5cGVzXHJcbiAgICBpZiAoXHJcbiAgICAgICAgc2VhcmNoVHlwZS5pbmNsdWRlcyhTZWFyY2hUeXBlLlRhYmxlKSAmJlxyXG4gICAgICAgIHNlYXJjaFR5cGUuZmlsdGVyKCh0KSA9PiB0ICE9PSBTZWFyY2hUeXBlLlRhYmxlKS5sZW5ndGggPiAwXHJcbiAgICApIHtcclxuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID1cclxuICAgICAgICAgICAgXCJzZWFyY2hUeXBlICd0YWJsZScgZG9lc3RuJ3Qgd29yayB3aXRoIG90aGVyIHR5cGVzIGZvciBub3dcIjtcclxuICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coc2VhcmNoVHlwZSk7XHJcblxyXG4gICAgLy8gc2VwYXJhdG9yXHJcbiAgICBsZXQgbXVsdGlwbGVWYWx1ZVNwYXJhdG9yOiBBcnJheTxzdHJpbmc+ID0gW107XHJcbiAgICBsZXQgcmV0TXVsdGlwbGVWYWx1ZVNwYXJhdG9yID0gZ2V0U3RyaW5nQXJyYXlGcm9tSW5wdXQoXHJcbiAgICAgICAgXCJzZXBhcmF0b3JcIixcclxuICAgICAgICB5YW1sLnNlcGFyYXRvcixcclxuICAgICAgICBudW1EYXRhc2V0cyxcclxuICAgICAgICBcIi9cIixcclxuICAgICAgICBudWxsLFxyXG4gICAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldE11bHRpcGxlVmFsdWVTcGFyYXRvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRNdWx0aXBsZVZhbHVlU3BhcmF0b3I7IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgfVxyXG4gICAgbXVsdGlwbGVWYWx1ZVNwYXJhdG9yID0gcmV0TXVsdGlwbGVWYWx1ZVNwYXJhdG9yLm1hcCgoc2VwKSA9PiB7XHJcbiAgICAgICAgaWYgKHNlcCA9PT0gXCJjb21tYVwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIixcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNlcDtcclxuICAgIH0pO1xyXG4gICAgLy8gY29uc29sZS5sb2cobXVsdGlwbGVWYWx1ZVNwYXJhdG9yKTtcclxuXHJcbiAgICAvLyB4RGF0YXNldFxyXG4gICAgbGV0IHJldFhEYXRhc2V0ID0gZ2V0TnVtYmVyQXJyYXlGcm9tSW5wdXQoXHJcbiAgICAgICAgXCJ4RGF0YXNldFwiLFxyXG4gICAgICAgIHlhbWwueERhdGFzZXQsXHJcbiAgICAgICAgbnVtRGF0YXNldHMsXHJcbiAgICAgICAgLTEsXHJcbiAgICAgICAgdHJ1ZVxyXG4gICAgKTtcclxuICAgIGlmICh0eXBlb2YgcmV0WERhdGFzZXQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0WERhdGFzZXQ7IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgfVxyXG4gICAgbGV0IHhEYXRhc2V0ID0gcmV0WERhdGFzZXQubWFwKChkOiBudW1iZXIpID0+IHtcclxuICAgICAgICBpZiAoZCA8IDAgfHwgZCA+PSBudW1EYXRhc2V0cykge1xyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkO1xyXG4gICAgfSk7XHJcbiAgICAvLyBhc3NpZ24gdGhpcyB0byByZW5kZXJJbmZvIGxhdGVyXHJcblxyXG4gICAgLy8gQ3JlYXRlIHF1ZXJpZXNcclxuICAgIGxldCBxdWVyaWVzOiBBcnJheTxRdWVyeT4gPSBbXTtcclxuICAgIGZvciAobGV0IGluZCA9IDA7IGluZCA8IHNlYXJjaFRhcmdldC5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgbGV0IHF1ZXJ5ID0gbmV3IFF1ZXJ5KFxyXG4gICAgICAgICAgICBxdWVyaWVzLmxlbmd0aCxcclxuICAgICAgICAgICAgc2VhcmNoVHlwZVtpbmRdLFxyXG4gICAgICAgICAgICBzZWFyY2hUYXJnZXRbaW5kXVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcXVlcnkuc2V0U2VwYXJhdG9yKG11bHRpcGxlVmFsdWVTcGFyYXRvcltpbmRdKTtcclxuICAgICAgICBpZiAoc2VhcmNoU3ViVHlwZVtpbmRdICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5LnNldFN1YlR5cGUoc2VhcmNoU3ViVHlwZVtpbmRdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHhEYXRhc2V0LmluY2x1ZGVzKGluZCkpIHF1ZXJ5LnVzZWRBc1hEYXRhc2V0ID0gdHJ1ZTtcclxuICAgICAgICBxdWVyaWVzLnB1c2gocXVlcnkpO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2cocXVlcmllcyk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGdyYXJwaCBpbmZvXHJcbiAgICBsZXQgcmVuZGVySW5mbyA9IG5ldyBSZW5kZXJJbmZvKHF1ZXJpZXMpO1xyXG4gICAgbGV0IGtleXNPZlJlbmRlckluZm8gPSBnZXRBdmFpbGFibGVLZXlzT2ZDbGFzcyhyZW5kZXJJbmZvKTtcclxuICAgIGxldCBhZGRpdGlvbmFsQWxsb3dlZEtleXMgPSBbXCJzZWFyY2hUeXBlXCIsIFwic2VhcmNoVGFyZ2V0XCIsIFwic2VwYXJhdG9yXCJdO1xyXG4gICAgLy8gY29uc29sZS5sb2coa2V5c09mUmVuZGVySW5mbyk7XHJcbiAgICBsZXQgeWFtbExpbmVLZXlzID0gW107XHJcbiAgICBsZXQgeWFtbEJhcktleXMgPSBbXTtcclxuICAgIGxldCB5YW1sUGllS2V5cyA9IFtdO1xyXG4gICAgbGV0IHlhbWxTdW1tYXJ5S2V5cyA9IFtdO1xyXG4gICAgbGV0IHlhbWxNb250aEtleXMgPSBbXTtcclxuICAgIGxldCB5YW1sSGVhdG1hcEtleXMgPSBbXTtcclxuICAgIGxldCB5YW1sQnVsbGV0S2V5cyA9IFtdO1xyXG4gICAgZm9yIChsZXQga2V5IG9mIGtleXNGb3VuZEluWUFNTCkge1xyXG4gICAgICAgIGlmICgvXmxpbmVbMC05XSokLy50ZXN0KGtleSkpIHtcclxuICAgICAgICAgICAgeWFtbExpbmVLZXlzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgYWRkaXRpb25hbEFsbG93ZWRLZXlzLnB1c2goa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKC9eYmFyWzAtOV0qJC8udGVzdChrZXkpKSB7XHJcbiAgICAgICAgICAgIHlhbWxCYXJLZXlzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgYWRkaXRpb25hbEFsbG93ZWRLZXlzLnB1c2goa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKC9ecGllWzAtOV0qJC8udGVzdChrZXkpKSB7XHJcbiAgICAgICAgICAgIHlhbWxQaWVLZXlzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgYWRkaXRpb25hbEFsbG93ZWRLZXlzLnB1c2goa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKC9ec3VtbWFyeVswLTldKiQvLnRlc3Qoa2V5KSkge1xyXG4gICAgICAgICAgICB5YW1sU3VtbWFyeUtleXMucHVzaChrZXkpO1xyXG4gICAgICAgICAgICBhZGRpdGlvbmFsQWxsb3dlZEtleXMucHVzaChrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoL15idWxsZXRbMC05XSokLy50ZXN0KGtleSkpIHtcclxuICAgICAgICAgICAgeWFtbEJ1bGxldEtleXMucHVzaChrZXkpO1xyXG4gICAgICAgICAgICBhZGRpdGlvbmFsQWxsb3dlZEtleXMucHVzaChrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoL15tb250aFswLTldKiQvLnRlc3Qoa2V5KSkge1xyXG4gICAgICAgICAgICB5YW1sTW9udGhLZXlzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgYWRkaXRpb25hbEFsbG93ZWRLZXlzLnB1c2goa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKC9eaGVhdG1hcFswLTldKiQvLnRlc3Qoa2V5KSkge1xyXG4gICAgICAgICAgICB5YW1sSGVhdG1hcEtleXMucHVzaChrZXkpO1xyXG4gICAgICAgICAgICBhZGRpdGlvbmFsQWxsb3dlZEtleXMucHVzaChrZXkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKGFkZGl0aW9uYWxBbGxvd2VkS2V5cyk7XHJcbiAgICBmb3IgKGxldCBrZXkgb2Yga2V5c0ZvdW5kSW5ZQU1MKSB7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAha2V5c09mUmVuZGVySW5mby5pbmNsdWRlcyhrZXkpICYmXHJcbiAgICAgICAgICAgICFhZGRpdGlvbmFsQWxsb3dlZEtleXMuaW5jbHVkZXMoa2V5KVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIidcIiArIGtleSArIFwiJyBpcyBub3QgYW4gYXZhaWxhYmxlIGtleVwiO1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgdG90YWxOdW1PdXRwdXRzID1cclxuICAgICAgICB5YW1sTGluZUtleXMubGVuZ3RoICtcclxuICAgICAgICB5YW1sQmFyS2V5cy5sZW5ndGggK1xyXG4gICAgICAgIHlhbWxQaWVLZXlzLmxlbmd0aCArXHJcbiAgICAgICAgeWFtbFN1bW1hcnlLZXlzLmxlbmd0aCArXHJcbiAgICAgICAgeWFtbEJ1bGxldEtleXMubGVuZ3RoICtcclxuICAgICAgICB5YW1sTW9udGhLZXlzLmxlbmd0aCArXHJcbiAgICAgICAgeWFtbEhlYXRtYXBLZXlzLmxlbmd0aDtcclxuICAgIGlmICh0b3RhbE51bU91dHB1dHMgPT09IDApIHtcclxuICAgICAgICByZXR1cm4gXCJObyBvdXRwdXQgcGFyYW1ldGVyIHByb3ZpZGVkLCBwbGVhc2UgcGxhY2UgbGluZSwgYmFyLCBwaWUsIG1vbnRoLCBidWxsZXQsIG9yIHN1bW1hcnkuXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR2V0IGRhaWx5IG5vdGVzIHNldHRpbmdzIHVzaW5nIG9ic2lkaWFuLWRhaWx5LW5vdGVzLWludGVyZmFjZVxyXG4gICAgbGV0IGRhaWx5Tm90ZXNTZXR0aW5ncyA9IGdldERhaWx5Tm90ZVNldHRpbmdzKCk7XHJcblxyXG4gICAgLy8gUm9vdCBmb2xkZXIgdG8gc2VhcmNoXHJcbiAgICBpZiAodHlwZW9mIHlhbWwuZm9sZGVyID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgaWYgKHlhbWwuZm9sZGVyID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZm9sZGVyID0gcGx1Z2luLnNldHRpbmdzLmZvbGRlcjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmZvbGRlciA9IHlhbWwuZm9sZGVyO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVuZGVySW5mby5mb2xkZXIgPSBwbHVnaW4uc2V0dGluZ3MuZm9sZGVyO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJJbmZvIGZvbGRlcjogXCIgKyByZW5kZXJJbmZvLmZvbGRlcik7XHJcblxyXG4gICAgbGV0IGFic3RyYWN0Rm9sZGVyID0gcGx1Z2luLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoXHJcbiAgICAgICAgbm9ybWFsaXplUGF0aChyZW5kZXJJbmZvLmZvbGRlcilcclxuICAgICk7XHJcbiAgICBpZiAoIWFic3RyYWN0Rm9sZGVyIHx8ICEoYWJzdHJhY3RGb2xkZXIgaW5zdGFuY2VvZiBURm9sZGVyKSkge1xyXG4gICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIkZvbGRlciAnXCIgKyByZW5kZXJJbmZvLmZvbGRlciArIFwiJyBkb2Vzbid0IGV4aXN0XCI7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEYXRlIGZvcm1hdFxyXG4gICAgY29uc3QgZGF0ZUZvcm1hdCA9IHlhbWwuZGF0ZUZvcm1hdDtcclxuICAgIC8vPz8gbm90IHN1cmUgd2h5IEkgbmVlZCB0aGlzIHRvIG1ha2UgaXQgd29ya3MsXHJcbiAgICAvLyB3aXRob3V0IHRoYXQsIHRoZSBhc3NpZ25lZCB0aGUgcmVuZGVySW5mby5kYXRlRm9ybWF0IHdpbGwgYmVjb21lIHVuZGVmaW5lZFxyXG4gICAgaWYgKHR5cGVvZiB5YW1sLmRhdGVGb3JtYXQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICBpZiAoeWFtbC5kYXRlRm9ybWF0ID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0ZUZvcm1hdCA9IHBsdWdpbi5zZXR0aW5ncy5kYXRlRm9ybWF0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0ZUZvcm1hdCA9IGRhdGVGb3JtYXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZW5kZXJJbmZvLmRhdGVGb3JtYXQgPSBwbHVnaW4uc2V0dGluZ3MuZGF0ZUZvcm1hdDtcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVySW5mbyBkYXRlRm9ybWF0OiBcIiArIHJlbmRlckluZm8uZGF0ZUZvcm1hdCk7XHJcblxyXG4gICAgLy8gRGF0ZSBmb3JtYXQgcHJlZml4XHJcbiAgICBpZiAodHlwZW9mIHlhbWwuZGF0ZUZvcm1hdFByZWZpeCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJlbmRlckluZm8uZGF0ZUZvcm1hdFByZWZpeCA9IHlhbWwuZGF0ZUZvcm1hdFByZWZpeDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEYXRlIGZyb21hdCBzdWZmaXhcclxuICAgIGlmICh0eXBlb2YgeWFtbC5kYXRlRm9ybWF0U3VmZml4ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmVuZGVySW5mby5kYXRlRm9ybWF0U3VmZml4ID0geWFtbC5kYXRlRm9ybWF0U3VmZml4O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHN0YXJ0RGF0ZSwgZW5kRGF0ZVxyXG4gICAgLy8gY29uc29sZS5sb2coXCJQYXJzaW5nIHN0YXJ0RGF0ZVwiKTtcclxuICAgIGlmICh0eXBlb2YgeWFtbC5zdGFydERhdGUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICBsZXQgc3RyU3RhcnREYXRlID0geWFtbC5zdGFydERhdGU7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGVGb3JtYXRQcmVmaXggJiZcclxuICAgICAgICAgICAgc3RyU3RhcnREYXRlLnN0YXJ0c1dpdGgocmVuZGVySW5mby5kYXRlRm9ybWF0UHJlZml4KVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBzdHJTdGFydERhdGUgPSBzdHJTdGFydERhdGUuc2xpY2UoXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmRhdGVGb3JtYXRQcmVmaXgubGVuZ3RoXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRlRm9ybWF0U3VmZml4ICYmXHJcbiAgICAgICAgICAgIHN0clN0YXJ0RGF0ZS5lbmRzV2l0aChyZW5kZXJJbmZvLmRhdGVGb3JtYXRTdWZmaXgpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHN0clN0YXJ0RGF0ZSA9IHN0clN0YXJ0RGF0ZS5zbGljZShcclxuICAgICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgICBzdHJTdGFydERhdGUubGVuZ3RoIC0gcmVuZGVySW5mby5kYXRlRm9ybWF0U3VmZml4Lmxlbmd0aFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHN0YXJ0RGF0ZSA9IG51bGw7XHJcbiAgICAgICAgbGV0IGlzU3RhcnREYXRlVmFsaWQgPSBmYWxzZTtcclxuICAgICAgICBzdGFydERhdGUgPSBoZWxwZXIucmVsRGF0ZVN0cmluZ1RvRGF0ZShcclxuICAgICAgICAgICAgc3RyU3RhcnREYXRlLFxyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGVGb3JtYXRcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChzdGFydERhdGUpIHtcclxuICAgICAgICAgICAgaXNTdGFydERhdGVWYWxpZCA9IHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3RhcnREYXRlID0gaGVscGVyLnN0clRvRGF0ZShzdHJTdGFydERhdGUsIHJlbmRlckluZm8uZGF0ZUZvcm1hdCk7XHJcbiAgICAgICAgICAgIGlmIChzdGFydERhdGUuaXNWYWxpZCgpKSB7XHJcbiAgICAgICAgICAgICAgICBpc1N0YXJ0RGF0ZVZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFpc1N0YXJ0RGF0ZVZhbGlkIHx8IHN0YXJ0RGF0ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID1cclxuICAgICAgICAgICAgICAgIFwiSW52YWxpZCBzdGFydERhdGUsIHRoZSBmb3JtYXQgb2Ygc3RhcnREYXRlIG1heSBub3QgbWF0Y2ggeW91ciBkYXRlRm9ybWF0IFwiICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8uZGF0ZUZvcm1hdDtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVuZGVySW5mby5zdGFydERhdGUgPSBzdGFydERhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coXCJQYXJzaW5nIGVuZERhdGVcIik7XHJcbiAgICBpZiAodHlwZW9mIHlhbWwuZW5kRGF0ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIGxldCBzdHJFbmREYXRlID0geWFtbC5lbmREYXRlO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRlRm9ybWF0UHJlZml4ICYmXHJcbiAgICAgICAgICAgIHN0ckVuZERhdGUuc3RhcnRzV2l0aChyZW5kZXJJbmZvLmRhdGVGb3JtYXRQcmVmaXgpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHN0ckVuZERhdGUgPSBzdHJFbmREYXRlLnNsaWNlKHJlbmRlckluZm8uZGF0ZUZvcm1hdFByZWZpeC5sZW5ndGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0ZUZvcm1hdFN1ZmZpeCAmJlxyXG4gICAgICAgICAgICBzdHJFbmREYXRlLmVuZHNXaXRoKHJlbmRlckluZm8uZGF0ZUZvcm1hdFN1ZmZpeClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgc3RyRW5kRGF0ZSA9IHN0ckVuZERhdGUuc2xpY2UoXHJcbiAgICAgICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAgICAgc3RyRW5kRGF0ZS5sZW5ndGggLSByZW5kZXJJbmZvLmRhdGVGb3JtYXRTdWZmaXgubGVuZ3RoXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZW5kRGF0ZSA9IG51bGw7XHJcbiAgICAgICAgbGV0IGlzRW5kRGF0ZVZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgZW5kRGF0ZSA9IGhlbHBlci5yZWxEYXRlU3RyaW5nVG9EYXRlKHN0ckVuZERhdGUsIHJlbmRlckluZm8uZGF0ZUZvcm1hdCk7XHJcbiAgICAgICAgaWYgKGVuZERhdGUpIHtcclxuICAgICAgICAgICAgaXNFbmREYXRlVmFsaWQgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGVuZERhdGUgPSBoZWxwZXIuc3RyVG9EYXRlKHN0ckVuZERhdGUsIHJlbmRlckluZm8uZGF0ZUZvcm1hdCk7XHJcbiAgICAgICAgICAgIGlmIChlbmREYXRlLmlzVmFsaWQoKSkge1xyXG4gICAgICAgICAgICAgICAgaXNFbmREYXRlVmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGVuZERhdGUpO1xyXG5cclxuICAgICAgICBpZiAoIWlzRW5kRGF0ZVZhbGlkIHx8IGVuZERhdGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9XHJcbiAgICAgICAgICAgICAgICBcIkludmFsaWQgZW5kRGF0ZSwgdGhlIGZvcm1hdCBvZiBlbmREYXRlIG1heSBub3QgbWF0Y2ggeW91ciBkYXRlRm9ybWF0IFwiICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8uZGF0ZUZvcm1hdDtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVuZGVySW5mby5lbmREYXRlID0gZW5kRGF0ZTtcclxuICAgIH1cclxuICAgIGlmIChcclxuICAgICAgICByZW5kZXJJbmZvLnN0YXJ0RGF0ZSAhPT0gbnVsbCAmJlxyXG4gICAgICAgIHJlbmRlckluZm8uc3RhcnREYXRlLmlzVmFsaWQoKSAmJlxyXG4gICAgICAgIHJlbmRlckluZm8uZW5kRGF0ZSAhPT0gbnVsbCAmJlxyXG4gICAgICAgIHJlbmRlckluZm8uZW5kRGF0ZS5pc1ZhbGlkKClcclxuICAgICkge1xyXG4gICAgICAgIC8vIE1ha2Ugc3VyZSBlbmREYXRlID4gc3RhcnREYXRlXHJcbiAgICAgICAgaWYgKHJlbmRlckluZm8uZW5kRGF0ZSA8IHJlbmRlckluZm8uc3RhcnREYXRlKSB7XHJcbiAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPVxyXG4gICAgICAgICAgICAgICAgXCJJbnZhbGlkIGRhdGUgcmFuZ2UgKHN0YXJ0RGF0ZSBsYXJnZXIgdGhhbiBlbmREYXRlKVwiO1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uc3RhcnREYXRlKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uZW5kRGF0ZSk7XHJcblxyXG4gICAgLy8geERhdGFzZXRcclxuICAgIHJlbmRlckluZm8ueERhdGFzZXQgPSB4RGF0YXNldDtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8ueERhdGFzZXQpO1xyXG5cclxuICAgIC8vIERhdGFzZXQgbmFtZSAobmVlZCB4RGF0YXNldCB0byBzZXQgZGVmYXVsdCBuYW1lKVxyXG4gICAgbGV0IHJldERhdGFzZXROYW1lID0gZ2V0U3RyaW5nQXJyYXlGcm9tSW5wdXQoXHJcbiAgICAgICAgXCJkYXRhc2V0TmFtZVwiLFxyXG4gICAgICAgIHlhbWwuZGF0YXNldE5hbWUsXHJcbiAgICAgICAgbnVtRGF0YXNldHMsXHJcbiAgICAgICAgXCJ1bnRpdGxlZFwiLFxyXG4gICAgICAgIG51bGwsXHJcbiAgICAgICAgdHJ1ZVxyXG4gICAgKTtcclxuICAgIGlmICh0eXBlb2YgcmV0RGF0YXNldE5hbWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0RGF0YXNldE5hbWU7IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgfVxyXG4gICAgLy8gcmVuYW1lIHVudGl0bGVkXHJcbiAgICBsZXQgaW5kVW50aXRsZWQgPSAwO1xyXG4gICAgZm9yIChsZXQgaW5kID0gMDsgaW5kIDwgcmV0RGF0YXNldE5hbWUubGVuZ3RoOyBpbmQrKykge1xyXG4gICAgICAgIGlmIChyZW5kZXJJbmZvLnhEYXRhc2V0LmluY2x1ZGVzKGluZCkpIGNvbnRpbnVlO1xyXG4gICAgICAgIGlmIChyZXREYXRhc2V0TmFtZVtpbmRdID09PSBcInVudGl0bGVkXCIpIHtcclxuICAgICAgICAgICAgcmV0RGF0YXNldE5hbWVbaW5kXSA9IFwidW50aXRsZWRcIiArIGluZFVudGl0bGVkLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGluZFVudGl0bGVkKys7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gQ2hlY2sgZHVwbGljYXRlZCBuYW1lc1xyXG4gICAgaWYgKG5ldyBTZXQocmV0RGF0YXNldE5hbWUpLnNpemUgPT09IHJldERhdGFzZXROYW1lLmxlbmd0aCkge1xyXG4gICAgICAgIHJlbmRlckluZm8uZGF0YXNldE5hbWUgPSByZXREYXRhc2V0TmFtZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IFwiTm90IGVub3VnaCBkYXRhc2V0IG5hbWVzIG9yIGR1cGxpY2F0ZWQgbmFtZXNcIjtcclxuICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby5kYXRhc2V0TmFtZSk7XHJcblxyXG4gICAgLy8gY29uc3RWYWx1ZVxyXG4gICAgbGV0IHJldENvbnN0VmFsdWUgPSBnZXROdW1iZXJBcnJheUZyb21JbnB1dChcclxuICAgICAgICBcImNvbnN0VmFsdWVcIixcclxuICAgICAgICB5YW1sLmNvbnN0VmFsdWUsXHJcbiAgICAgICAgbnVtRGF0YXNldHMsXHJcbiAgICAgICAgMS4wLFxyXG4gICAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldENvbnN0VmFsdWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0Q29uc3RWYWx1ZTsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICB9XHJcbiAgICByZW5kZXJJbmZvLmNvbnN0VmFsdWUgPSByZXRDb25zdFZhbHVlO1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby5jb25zdFZhbHVlKTtcclxuXHJcbiAgICAvLyBpZ25vcmVBdHRhY2hlZFZhbHVlXHJcbiAgICBsZXQgcmV0SWdub3JlQXR0YWNoZWRWYWx1ZSA9IGdldEJvb2xBcnJheUZyb21JbnB1dChcclxuICAgICAgICBcImlnbm9yZUF0dGFjaGVkVmFsdWVcIixcclxuICAgICAgICB5YW1sLmlnbm9yZUF0dGFjaGVkVmFsdWUsXHJcbiAgICAgICAgbnVtRGF0YXNldHMsXHJcbiAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgdHJ1ZVxyXG4gICAgKTtcclxuICAgIGlmICh0eXBlb2YgcmV0SWdub3JlQXR0YWNoZWRWYWx1ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRJZ25vcmVBdHRhY2hlZFZhbHVlO1xyXG4gICAgfVxyXG4gICAgcmVuZGVySW5mby5pZ25vcmVBdHRhY2hlZFZhbHVlID0gcmV0SWdub3JlQXR0YWNoZWRWYWx1ZTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uaWdub3JlQXR0YWNoZWRWYWx1ZSk7XHJcblxyXG4gICAgLy8gaWdub3JlWmVyb1ZhbHVlXHJcbiAgICBsZXQgcmV0SWdub3JlWmVyb1ZhbHVlID0gZ2V0Qm9vbEFycmF5RnJvbUlucHV0KFxyXG4gICAgICAgIFwiaWdub3JlWmVyb1ZhbHVlXCIsXHJcbiAgICAgICAgeWFtbC5pZ25vcmVaZXJvVmFsdWUsXHJcbiAgICAgICAgbnVtRGF0YXNldHMsXHJcbiAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgdHJ1ZVxyXG4gICAgKTtcclxuICAgIGlmICh0eXBlb2YgcmV0SWdub3JlWmVyb1ZhbHVlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldElnbm9yZVplcm9WYWx1ZTtcclxuICAgIH1cclxuICAgIHJlbmRlckluZm8uaWdub3JlWmVyb1ZhbHVlID0gcmV0SWdub3JlWmVyb1ZhbHVlO1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby5pZ25vcmVBdHRhY2hlZFZhbHVlKTtcclxuXHJcbiAgICAvLyBhY2N1bVxyXG4gICAgbGV0IHJldEFjY3VtID0gZ2V0Qm9vbEFycmF5RnJvbUlucHV0KFxyXG4gICAgICAgIFwiYWNjdW1cIixcclxuICAgICAgICB5YW1sLmFjY3VtLFxyXG4gICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgIGZhbHNlLFxyXG4gICAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldEFjY3VtID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldEFjY3VtO1xyXG4gICAgfVxyXG4gICAgcmVuZGVySW5mby5hY2N1bSA9IHJldEFjY3VtO1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby5hY2N1bSk7XHJcblxyXG4gICAgLy8gcGVuYWx0eVxyXG4gICAgbGV0IHJldFBlbmFsdHkgPSBnZXROdW1iZXJBcnJheUZyb21JbnB1dChcclxuICAgICAgICBcInBlbmFsdHlcIixcclxuICAgICAgICB5YW1sLnBlbmFsdHksXHJcbiAgICAgICAgbnVtRGF0YXNldHMsXHJcbiAgICAgICAgbnVsbCxcclxuICAgICAgICB0cnVlXHJcbiAgICApO1xyXG4gICAgaWYgKHR5cGVvZiByZXRQZW5hbHR5ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldFBlbmFsdHk7XHJcbiAgICB9XHJcbiAgICByZW5kZXJJbmZvLnBlbmFsdHkgPSByZXRQZW5hbHR5O1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby5wZW5hbHR5KTtcclxuXHJcbiAgICAvLyB2YWx1ZVNoaWZ0XHJcbiAgICBsZXQgcmV0VmFsdWVTaGlmdCA9IGdldE51bWJlckFycmF5RnJvbUlucHV0KFxyXG4gICAgICAgIFwidmFsdWVTaGlmdFwiLFxyXG4gICAgICAgIHlhbWwudmFsdWVTaGlmdCxcclxuICAgICAgICBudW1EYXRhc2V0cyxcclxuICAgICAgICAwLFxyXG4gICAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldFZhbHVlU2hpZnQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0VmFsdWVTaGlmdDtcclxuICAgIH1cclxuICAgIHJlbmRlckluZm8udmFsdWVTaGlmdCA9IHJldFZhbHVlU2hpZnQ7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLnZhbHVlU2hpZnQpO1xyXG5cclxuICAgIC8vIGZpeGVkU2NhbGVcclxuICAgIGlmICh0eXBlb2YgeWFtbC5maXhlZFNjYWxlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgcmVuZGVySW5mby5maXhlZFNjYWxlID0geWFtbC5maXhlZFNjYWxlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGZpdFBhbmVsV2lkdGhcclxuICAgIGlmICh0eXBlb2YgeWFtbC5maXRQYW5lbFdpZHRoID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgIHJlbmRlckluZm8uZml0UGFuZWxXaWR0aCA9IHlhbWwuZml0UGFuZWxXaWR0aDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBtYXJnaW5cclxuICAgIGxldCByZXRNYXJnaW4gPSBnZXROdW1iZXJBcnJheUZyb21JbnB1dChcIm1hcmdpblwiLCB5YW1sLm1hcmdpbiwgNCwgMTAsIHRydWUpO1xyXG4gICAgaWYgKHR5cGVvZiByZXRNYXJnaW4gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0TWFyZ2luOyAvLyBlcnJvck1lc3NhZ2VcclxuICAgIH1cclxuICAgIGlmIChyZXRNYXJnaW4ubGVuZ3RoID4gNCkge1xyXG4gICAgICAgIHJldHVybiBcIm1hcmdpbiBhY2NlcHRzIG5vdCBtb3JlIHRoYW4gZm91ciB2YWx1ZXMgZm9yIHRvcCwgcmlnaHQsIGJvdHRvbSwgYW5kIGxlZnQgbWFyZ2lucy5cIjtcclxuICAgIH1cclxuICAgIHJlbmRlckluZm8ubWFyZ2luID0gbmV3IE1hcmdpbihcclxuICAgICAgICByZXRNYXJnaW5bMF0sXHJcbiAgICAgICAgcmV0TWFyZ2luWzFdLFxyXG4gICAgICAgIHJldE1hcmdpblsyXSxcclxuICAgICAgICByZXRNYXJnaW5bM11cclxuICAgICk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLm1hcmdpbik7XHJcblxyXG4gICAgLy8gbGluZSByZWxhdGVkIHBhcmFtZXRlcnNcclxuICAgIGZvciAobGV0IGxpbmVLZXkgb2YgeWFtbExpbmVLZXlzKSB7XHJcbiAgICAgICAgbGV0IGxpbmUgPSBuZXcgTGluZUluZm8oKTtcclxuICAgICAgICBsZXQgeWFtbExpbmUgPSB5YW1sW2xpbmVLZXldO1xyXG5cclxuICAgICAgICBsZXQga2V5c09mTGluZUluZm8gPSBnZXRBdmFpbGFibGVLZXlzT2ZDbGFzcyhsaW5lKTtcclxuICAgICAgICBsZXQga2V5c0ZvdW5kSW5ZQU1MID0gZ2V0QXZhaWxhYmxlS2V5c09mQ2xhc3MoeWFtbExpbmUpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGtleXNPZkxpbmVJbmZvKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhrZXlzRm91bmRJbllBTUwpO1xyXG4gICAgICAgIGZvciAobGV0IGtleSBvZiBrZXlzRm91bmRJbllBTUwpIHtcclxuICAgICAgICAgICAgaWYgKCFrZXlzT2ZMaW5lSW5mby5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIidcIiArIGtleSArIFwiJyBpcyBub3QgYW4gYXZhaWxhYmxlIGtleVwiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHJldFBhcnNlQ29tbW9uQ2hhcnRJbmZvID0gcGFyc2VDb21tb25DaGFydEluZm8oeWFtbExpbmUsIGxpbmUpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0UGFyc2VDb21tb25DaGFydEluZm8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFBhcnNlQ29tbW9uQ2hhcnRJbmZvO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbGluZUNvbG9yXHJcbiAgICAgICAgbGV0IHJldExpbmVDb2xvciA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcImxpbmVDb2xvclwiLFxyXG4gICAgICAgICAgICB5YW1sTGluZT8ubGluZUNvbG9yLFxyXG4gICAgICAgICAgICBudW1EYXRhc2V0cyxcclxuICAgICAgICAgICAgXCJcIixcclxuICAgICAgICAgICAgdmFsaWRhdGVDb2xvcixcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXRMaW5lQ29sb3IgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldExpbmVDb2xvcjsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpbmUubGluZUNvbG9yID0gcmV0TGluZUNvbG9yO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGxpbmUubGluZUNvbG9yKTtcclxuXHJcbiAgICAgICAgLy8gbGluZVdpZHRoXHJcbiAgICAgICAgbGV0IHJldExpbmVXaWR0aCA9IGdldE51bWJlckFycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcImxpbmVXaWR0aFwiLFxyXG4gICAgICAgICAgICB5YW1sTGluZT8ubGluZVdpZHRoLFxyXG4gICAgICAgICAgICBudW1EYXRhc2V0cyxcclxuICAgICAgICAgICAgMS41LFxyXG4gICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldExpbmVXaWR0aCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0TGluZVdpZHRoOyAvLyBlcnJvck1lc3NhZ2VcclxuICAgICAgICB9XHJcbiAgICAgICAgbGluZS5saW5lV2lkdGggPSByZXRMaW5lV2lkdGg7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobGluZS5saW5lV2lkdGgpO1xyXG5cclxuICAgICAgICAvLyBzaG93TGluZVxyXG4gICAgICAgIGxldCByZXRTaG93TGluZSA9IGdldEJvb2xBcnJheUZyb21JbnB1dChcclxuICAgICAgICAgICAgXCJzaG93TGluZVwiLFxyXG4gICAgICAgICAgICB5YW1sTGluZT8uc2hvd0xpbmUsXHJcbiAgICAgICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgICAgICB0cnVlLFxyXG4gICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldFNob3dMaW5lID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRTaG93TGluZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGluZS5zaG93TGluZSA9IHJldFNob3dMaW5lO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGxpbmUuc2hvd0xpbmUpO1xyXG5cclxuICAgICAgICAvLyBzaG93UG9pbnRcclxuICAgICAgICBsZXQgcmV0U2hvd1BvaW50ID0gZ2V0Qm9vbEFycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcInNob3dQb2ludFwiLFxyXG4gICAgICAgICAgICB5YW1sTGluZT8uc2hvd1BvaW50LFxyXG4gICAgICAgICAgICBudW1EYXRhc2V0cyxcclxuICAgICAgICAgICAgdHJ1ZSxcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXRTaG93UG9pbnQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFNob3dQb2ludDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGluZS5zaG93UG9pbnQgPSByZXRTaG93UG9pbnQ7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobGluZS5zaG93UG9pbnQpO1xyXG5cclxuICAgICAgICAvLyBwb2ludENvbG9yXHJcbiAgICAgICAgbGV0IHJldFBvaW50Q29sb3IgPSBnZXRTdHJpbmdBcnJheUZyb21JbnB1dChcclxuICAgICAgICAgICAgXCJwb2ludENvbG9yXCIsXHJcbiAgICAgICAgICAgIHlhbWxMaW5lPy5wb2ludENvbG9yLFxyXG4gICAgICAgICAgICBudW1EYXRhc2V0cyxcclxuICAgICAgICAgICAgXCIjNjliM2EyXCIsXHJcbiAgICAgICAgICAgIHZhbGlkYXRlQ29sb3IsXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0UG9pbnRDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0UG9pbnRDb2xvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGluZS5wb2ludENvbG9yID0gcmV0UG9pbnRDb2xvcjtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhsaW5lLnBvaW50Q29sb3IpO1xyXG5cclxuICAgICAgICAvLyBwb2ludEJvcmRlckNvbG9yXHJcbiAgICAgICAgbGV0IHJldFBvaW50Qm9yZGVyQ29sb3IgPSBnZXRTdHJpbmdBcnJheUZyb21JbnB1dChcclxuICAgICAgICAgICAgXCJwb2ludEJvcmRlckNvbG9yXCIsXHJcbiAgICAgICAgICAgIHlhbWxMaW5lPy5wb2ludEJvcmRlckNvbG9yLFxyXG4gICAgICAgICAgICBudW1EYXRhc2V0cyxcclxuICAgICAgICAgICAgXCIjNjliM2EyXCIsXHJcbiAgICAgICAgICAgIHZhbGlkYXRlQ29sb3IsXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0UG9pbnRCb3JkZXJDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0UG9pbnRCb3JkZXJDb2xvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGluZS5wb2ludEJvcmRlckNvbG9yID0gcmV0UG9pbnRCb3JkZXJDb2xvcjtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhsaW5lLnBvaW50Qm9yZGVyQ29sb3IpO1xyXG5cclxuICAgICAgICAvLyBwb2ludEJvcmRlcldpZHRoXHJcbiAgICAgICAgbGV0IHJldFBvaW50Qm9yZGVyV2lkdGggPSBnZXROdW1iZXJBcnJheUZyb21JbnB1dChcclxuICAgICAgICAgICAgXCJwb2ludEJvcmRlcldpZHRoXCIsXHJcbiAgICAgICAgICAgIHlhbWxMaW5lPy5wb2ludEJvcmRlcldpZHRoLFxyXG4gICAgICAgICAgICBudW1EYXRhc2V0cyxcclxuICAgICAgICAgICAgMC4wLFxyXG4gICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldFBvaW50Qm9yZGVyV2lkdGggPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFBvaW50Qm9yZGVyV2lkdGg7IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgICAgIH1cclxuICAgICAgICBsaW5lLnBvaW50Qm9yZGVyV2lkdGggPSByZXRQb2ludEJvcmRlcldpZHRoO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGxpbmUucG9pbnRCb3JkZXJXaWR0aCk7XHJcblxyXG4gICAgICAgIC8vIHBvaW50U2l6ZVxyXG4gICAgICAgIGxldCByZXRQb2ludFNpemUgPSBnZXROdW1iZXJBcnJheUZyb21JbnB1dChcclxuICAgICAgICAgICAgXCJwb2ludFNpemVcIixcclxuICAgICAgICAgICAgeWFtbExpbmU/LnBvaW50U2l6ZSxcclxuICAgICAgICAgICAgbnVtRGF0YXNldHMsXHJcbiAgICAgICAgICAgIDMuMCxcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXRQb2ludFNpemUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFBvaW50U2l6ZTsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpbmUucG9pbnRTaXplID0gcmV0UG9pbnRTaXplO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGxpbmUucG9pbnRTaXplKTtcclxuXHJcbiAgICAgICAgLy8gZmlsbEdhcFxyXG4gICAgICAgIGxldCByZXRGaWxsR2FwID0gZ2V0Qm9vbEFycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcImZpbGxHYXBcIixcclxuICAgICAgICAgICAgeWFtbExpbmU/LmZpbGxHYXAsXHJcbiAgICAgICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgICAgICBmYWxzZSxcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXRGaWxsR2FwID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRGaWxsR2FwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsaW5lLmZpbGxHYXAgPSByZXRGaWxsR2FwO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGxpbmUuZmlsbEdhcCk7XHJcblxyXG4gICAgICAgIC8vIHlBeGlzTG9jYXRpb25cclxuICAgICAgICBsZXQgcmV0WUF4aXNMb2NhdGlvbiA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcInlBeGlzTG9jYXRpb25cIixcclxuICAgICAgICAgICAgeWFtbExpbmU/LnlBeGlzTG9jYXRpb24sXHJcbiAgICAgICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgICAgICBcImxlZnRcIixcclxuICAgICAgICAgICAgdmFsaWRhdGVZQXhpc0xvY2F0aW9uLFxyXG4gICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldFlBeGlzTG9jYXRpb24gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFlBeGlzTG9jYXRpb247IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgICAgIH1cclxuICAgICAgICBsaW5lLnlBeGlzTG9jYXRpb24gPSByZXRZQXhpc0xvY2F0aW9uO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGxpbmUueUF4aXNMb2NhdGlvbik7XHJcblxyXG4gICAgICAgIHJlbmRlckluZm8ubGluZS5wdXNoKGxpbmUpO1xyXG4gICAgfSAvLyBsaW5lIHJlbGF0ZWQgcGFyYW1ldGVyc1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby5saW5lKTtcclxuXHJcbiAgICAvLyBiYXIgcmVsYXRlZCBwYXJhbWV0ZXJzXHJcbiAgICBmb3IgKGxldCBiYXJLZXkgb2YgeWFtbEJhcktleXMpIHtcclxuICAgICAgICBsZXQgYmFyID0gbmV3IEJhckluZm8oKTtcclxuICAgICAgICBsZXQgeWFtbEJhciA9IHlhbWxbYmFyS2V5XTtcclxuXHJcbiAgICAgICAgbGV0IGtleXNPZkJhckluZm8gPSBnZXRBdmFpbGFibGVLZXlzT2ZDbGFzcyhiYXIpO1xyXG4gICAgICAgIGxldCBrZXlzRm91bmRJbllBTUwgPSBnZXRBdmFpbGFibGVLZXlzT2ZDbGFzcyh5YW1sQmFyKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhrZXlzT2ZCYXJJbmZvKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhrZXlzRm91bmRJbllBTUwpO1xyXG4gICAgICAgIGZvciAobGV0IGtleSBvZiBrZXlzRm91bmRJbllBTUwpIHtcclxuICAgICAgICAgICAgaWYgKCFrZXlzT2ZCYXJJbmZvLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiJ1wiICsga2V5ICsgXCInIGlzIG5vdCBhbiBhdmFpbGFibGUga2V5XCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgcmV0UGFyc2VDb21tb25DaGFydEluZm8gPSBwYXJzZUNvbW1vbkNoYXJ0SW5mbyh5YW1sQmFyLCBiYXIpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0UGFyc2VDb21tb25DaGFydEluZm8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFBhcnNlQ29tbW9uQ2hhcnRJbmZvO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gYmFyQ29sb3JcclxuICAgICAgICBsZXQgcmV0QmFyQ29sb3IgPSBnZXRTdHJpbmdBcnJheUZyb21JbnB1dChcclxuICAgICAgICAgICAgXCJiYXJDb2xvclwiLFxyXG4gICAgICAgICAgICB5YW1sQmFyPy5iYXJDb2xvcixcclxuICAgICAgICAgICAgbnVtRGF0YXNldHMsXHJcbiAgICAgICAgICAgIFwiXCIsXHJcbiAgICAgICAgICAgIHZhbGlkYXRlQ29sb3IsXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0QmFyQ29sb3IgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldEJhckNvbG9yOyAvLyBlcnJvck1lc3NhZ2VcclxuICAgICAgICB9XHJcbiAgICAgICAgYmFyLmJhckNvbG9yID0gcmV0QmFyQ29sb3I7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYmFyLmJhckNvbG9yKTtcclxuXHJcbiAgICAgICAgLy8geUF4aXNMb2NhdGlvblxyXG4gICAgICAgIGxldCByZXRZQXhpc0xvY2F0aW9uID0gZ2V0U3RyaW5nQXJyYXlGcm9tSW5wdXQoXHJcbiAgICAgICAgICAgIFwieUF4aXNMb2NhdGlvblwiLFxyXG4gICAgICAgICAgICB5YW1sQmFyPy55QXhpc0xvY2F0aW9uLFxyXG4gICAgICAgICAgICBudW1EYXRhc2V0cyxcclxuICAgICAgICAgICAgXCJsZWZ0XCIsXHJcbiAgICAgICAgICAgIHZhbGlkYXRlWUF4aXNMb2NhdGlvbixcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXRZQXhpc0xvY2F0aW9uID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRZQXhpc0xvY2F0aW9uOyAvLyBlcnJvck1lc3NhZ2VcclxuICAgICAgICB9XHJcbiAgICAgICAgYmFyLnlBeGlzTG9jYXRpb24gPSByZXRZQXhpc0xvY2F0aW9uO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGJhci55QXhpc0xvY2F0aW9uKTtcclxuXHJcbiAgICAgICAgcmVuZGVySW5mby5iYXIucHVzaChiYXIpO1xyXG4gICAgfSAvLyBiYXIgcmVsYXRlZCBwYXJhbWV0ZXJzXHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLmJhcik7XHJcblxyXG4gICAgLy8gcGllIHJlbGF0ZWQgcGFyYW1ldGVyc1xyXG4gICAgZm9yIChsZXQgcGllS2V5IG9mIHlhbWxQaWVLZXlzKSB7XHJcbiAgICAgICAgbGV0IHBpZSA9IG5ldyBQaWVJbmZvKCk7XHJcbiAgICAgICAgbGV0IHlhbWxQaWUgPSB5YW1sW3BpZUtleV07XHJcblxyXG4gICAgICAgIGxldCBrZXlzT2ZQaWVJbmZvID0gZ2V0QXZhaWxhYmxlS2V5c09mQ2xhc3MocGllKTtcclxuICAgICAgICBsZXQga2V5c0ZvdW5kSW5ZQU1MID0gZ2V0QXZhaWxhYmxlS2V5c09mQ2xhc3MoeWFtbFBpZSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coa2V5c09mUGllSW5mbyk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coa2V5c0ZvdW5kSW5ZQU1MKTtcclxuICAgICAgICBmb3IgKGxldCBrZXkgb2Yga2V5c0ZvdW5kSW5ZQU1MKSB7XHJcbiAgICAgICAgICAgIGlmICgha2V5c09mUGllSW5mby5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIidcIiArIGtleSArIFwiJyBpcyBub3QgYW4gYXZhaWxhYmxlIGtleVwiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdGl0bGVcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxQaWU/LnRpdGxlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHBpZS50aXRsZSA9IHlhbWxQaWUudGl0bGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHBpZS50aXRsZSk7XHJcblxyXG4gICAgICAgIC8vIGRhdGFcclxuICAgICAgICBsZXQgcmV0RGF0YSA9IGdldFN0cmluZ0FycmF5KFwiZGF0YVwiLCB5YW1sUGllPy5kYXRhKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldERhdGEgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldERhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHBpZS5kYXRhID0gcmV0RGF0YTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhwaWUuZGF0YSk7XHJcbiAgICAgICAgbGV0IG51bURhdGEgPSBwaWUuZGF0YS5sZW5ndGg7XHJcblxyXG4gICAgICAgIC8vIGRhdGFDb2xvclxyXG4gICAgICAgIGxldCByZXREYXRhQ29sb3IgPSBnZXRTdHJpbmdBcnJheUZyb21JbnB1dChcclxuICAgICAgICAgICAgXCJkYXRhQ29sb3JcIixcclxuICAgICAgICAgICAgeWFtbFBpZT8uZGF0YUNvbG9yLFxyXG4gICAgICAgICAgICBudW1EYXRhLFxyXG4gICAgICAgICAgICBcIm5vbmVcIixcclxuICAgICAgICAgICAgdmFsaWRhdGVDb2xvcixcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXREYXRhQ29sb3IgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldERhdGFDb2xvcjsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHBpZS5kYXRhQ29sb3IgPSByZXREYXRhQ29sb3I7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocGllLmRhdGFDb2xvcik7XHJcblxyXG4gICAgICAgIC8vIHJhdGlvSW5uZXJSYWRpdXNcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxQaWU/LnJhdGlvSW5uZXJSYWRpdXMgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgcGllLnJhdGlvSW5uZXJSYWRpdXMgPSB5YW1sUGllLnJhdGlvSW5uZXJSYWRpdXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHBpZS5yYXRpb0lubmVyUmFkaXVzKTtcclxuXHJcbiAgICAgICAgcmVuZGVySW5mby5waWUucHVzaChwaWUpO1xyXG4gICAgfSAvLyBwaWUgcmVsYXRlZCBwYXJhbWV0ZXJzXHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLnBpKTtcclxuXHJcbiAgICAvLyBzdW1tYXJ5IHJlbGF0ZWQgcGFyYW1ldGVyc1xyXG4gICAgZm9yIChsZXQgc3VtbWFyeUtleSBvZiB5YW1sU3VtbWFyeUtleXMpIHtcclxuICAgICAgICBsZXQgc3VtbWFyeSA9IG5ldyBTdW1tYXJ5SW5mbygpO1xyXG4gICAgICAgIGxldCB5YW1sU3VtbWFyeSA9IHlhbWxbc3VtbWFyeUtleV07XHJcblxyXG4gICAgICAgIGxldCBrZXlzT2ZTdW1tYXJ5SW5mbyA9IGdldEF2YWlsYWJsZUtleXNPZkNsYXNzKHN1bW1hcnkpO1xyXG4gICAgICAgIGxldCBrZXlzRm91bmRJbllBTUwgPSBnZXRBdmFpbGFibGVLZXlzT2ZDbGFzcyh5YW1sU3VtbWFyeSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coa2V5c09mU3VtbWFyeUluZm8pO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGtleXNGb3VuZEluWUFNTCk7XHJcbiAgICAgICAgZm9yIChsZXQga2V5IG9mIGtleXNGb3VuZEluWUFNTCkge1xyXG4gICAgICAgICAgICBpZiAoIWtleXNPZlN1bW1hcnlJbmZvLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiJ1wiICsga2V5ICsgXCInIGlzIG5vdCBhbiBhdmFpbGFibGUga2V5XCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0ZW1wbGF0ZVxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbFN1bW1hcnk/LnRlbXBsYXRlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHN1bW1hcnkudGVtcGxhdGUgPSB5YW1sU3VtbWFyeS50ZW1wbGF0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiB5YW1sU3VtbWFyeT8uc3R5bGUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgc3VtbWFyeS5zdHlsZSA9IHlhbWxTdW1tYXJ5LnN0eWxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVuZGVySW5mby5zdW1tYXJ5LnB1c2goc3VtbWFyeSk7XHJcbiAgICB9IC8vIHN1bW1hcnkgcmVsYXRlZCBwYXJhbWV0ZXJzXHJcblxyXG4gICAgLy8gTW9udGggcmVsYXRlZCBwYXJhbWV0ZXJzXHJcbiAgICBmb3IgKGxldCBtb250aEtleSBvZiB5YW1sTW9udGhLZXlzKSB7XHJcbiAgICAgICAgbGV0IG1vbnRoID0gbmV3IE1vbnRoSW5mbygpO1xyXG4gICAgICAgIGxldCB5YW1sTW9udGggPSB5YW1sW21vbnRoS2V5XTtcclxuXHJcbiAgICAgICAgbGV0IGtleXNPZk1vbnRoSW5mbyA9IGdldEF2YWlsYWJsZUtleXNPZkNsYXNzKG1vbnRoKTtcclxuICAgICAgICBsZXQga2V5c0ZvdW5kSW5ZQU1MID0gZ2V0QXZhaWxhYmxlS2V5c09mQ2xhc3MoeWFtbE1vbnRoKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhrZXlzT2ZTdW1tYXJ5SW5mbyk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coa2V5c0ZvdW5kSW5ZQU1MKTtcclxuICAgICAgICBmb3IgKGxldCBrZXkgb2Yga2V5c0ZvdW5kSW5ZQU1MKSB7XHJcbiAgICAgICAgICAgIGlmICgha2V5c09mTW9udGhJbmZvLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiJ1wiICsga2V5ICsgXCInIGlzIG5vdCBhbiBhdmFpbGFibGUga2V5XCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBkYXRhc2V0XHJcbiAgICAgICAgbGV0IHJldERhdGFzZXQgPSBnZXROdW1iZXJBcnJheShcImRhdGFzZXRcIiwgeWFtbE1vbnRoPy5kYXRhc2V0KTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldERhdGFzZXQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldERhdGFzZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZXREYXRhc2V0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAvLyBpbnNlcnQgeSBkYXRhc2V0IGdpdmVuXHJcbiAgICAgICAgICAgIGZvciAobGV0IHEgb2YgcXVlcmllcykge1xyXG4gICAgICAgICAgICAgICAgcmV0RGF0YXNldC5wdXNoKHEuZ2V0SWQoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbW9udGguZGF0YXNldCA9IHJldERhdGFzZXQ7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobW9udGguZGF0YXNldCk7XHJcbiAgICAgICAgbGV0IG51bURhdGFzZXQgPSBtb250aC5kYXRhc2V0Lmxlbmd0aDtcclxuXHJcbiAgICAgICAgLy8gc3RhcnRXZWVrT25cclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxNb250aD8uc3RhcnRXZWVrT24gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbW9udGguc3RhcnRXZWVrT24gPSB5YW1sTW9udGguc3RhcnRXZWVrT247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLnN0YXJ0V2Vla09uKTtcclxuXHJcbiAgICAgICAgLy8gc2hvd0NpcmNsZVxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbE1vbnRoPy5zaG93Q2lyY2xlID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgICBtb250aC5zaG93Q2lyY2xlID0geWFtbE1vbnRoLnNob3dDaXJjbGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLnNob3dDaXJjbGUpO1xyXG5cclxuICAgICAgICAvLyB0aHJlc2hvbGRcclxuICAgICAgICBsZXQgcmV0VGhyZXNob2xkID0gZ2V0TnVtYmVyQXJyYXkoXCJ0aHJlc2hvbGRcIiwgeWFtbE1vbnRoPy50aHJlc2hvbGQpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0VGhyZXNob2xkID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRUaHJlc2hvbGQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1vbnRoLnRocmVzaG9sZCA9IHJldFRocmVzaG9sZDtcclxuICAgICAgICBpZiAobW9udGgudGhyZXNob2xkLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmREYXRhc2V0ID0gMDsgaW5kRGF0YXNldCA8IG51bURhdGFzZXQ7IGluZERhdGFzZXQrKykge1xyXG4gICAgICAgICAgICAgICAgbW9udGgudGhyZXNob2xkLnB1c2goMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG1vbnRoLnRocmVzaG9sZC5sZW5ndGggIT09IG1vbnRoLmRhdGFzZXQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLnRocmVzaG9sZCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLmRhdGFzZXQpO1xyXG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxyXG4gICAgICAgICAgICAgICAgXCJUaGUgbnVtYmVyIG9mIGlucHV0cyBvZiB0aHJlc2hvbGQgYW5kIGRhdGFzZXQgbm90IG1hdGNoZWRcIjtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobW9udGgudGhyZXNob2xkKTtcclxuXHJcbiAgICAgICAgLy8geU1pblxyXG4gICAgICAgIGxldCByZXRZTWluID0gZ2V0TnVtYmVyQXJyYXkoXCJ5TWluXCIsIHlhbWxNb250aD8ueU1pbik7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXRZTWluID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRZTWluO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtb250aC55TWluID0gcmV0WU1pbjtcclxuICAgICAgICBpZiAobW9udGgueU1pbi5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaW5kRGF0YXNldCA9IDA7IGluZERhdGFzZXQgPCBudW1EYXRhc2V0OyBpbmREYXRhc2V0KyspIHtcclxuICAgICAgICAgICAgICAgIG1vbnRoLnlNaW4ucHVzaChudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobW9udGgueU1pbi5sZW5ndGggIT09IG1vbnRoLmRhdGFzZXQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9XHJcbiAgICAgICAgICAgICAgICBcIlRoZSBudW1iZXIgb2YgaW5wdXRzIG9mIHlNaW4gYW5kIGRhdGFzZXQgbm90IG1hdGNoZWRcIjtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobW9udGgueU1pbik7XHJcblxyXG4gICAgICAgIC8vIHlNYXhcclxuICAgICAgICBsZXQgcmV0WU1heCA9IGdldE51bWJlckFycmF5KFwieU1heFwiLCB5YW1sTW9udGg/LnlNYXgpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0WU1heCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0WU1heDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbW9udGgueU1heCA9IHJldFlNYXg7XHJcbiAgICAgICAgaWYgKG1vbnRoLnlNYXgubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZERhdGFzZXQgPSAwOyBpbmREYXRhc2V0IDwgbnVtRGF0YXNldDsgaW5kRGF0YXNldCsrKSB7XHJcbiAgICAgICAgICAgICAgICBtb250aC55TWF4LnB1c2gobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG1vbnRoLnlNYXgubGVuZ3RoICE9PSBtb250aC5kYXRhc2V0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxyXG4gICAgICAgICAgICAgICAgXCJUaGUgbnVtYmVyIG9mIGlucHV0cyBvZiB5TWluIGFuZCBkYXRhc2V0IG5vdCBtYXRjaGVkXCI7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLnlNYXgpO1xyXG5cclxuICAgICAgICAvLyBjb2xvclxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbE1vbnRoPy5jb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBtb250aC5jb2xvciA9IHlhbWxNb250aC5jb2xvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobW9udGguY29sb3IpO1xyXG5cclxuICAgICAgICAvLyBkaW1Ob3RJbk1vbnRoXHJcbiAgICAgICAgaWYgKHR5cGVvZiB5YW1sTW9udGg/LmRpbU5vdEluTW9udGggPT09IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgICAgICAgIG1vbnRoLmRpbU5vdEluTW9udGggPSB5YW1sTW9udGguZGltTm90SW5Nb250aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobW9udGguZGltTm90SW5Nb250aCk7XHJcblxyXG4gICAgICAgIC8vIHNob3dTdHJlYWtcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxNb250aD8uc2hvd1N0cmVhayA9PT0gXCJib29sZWFuXCIpIHtcclxuICAgICAgICAgICAgbW9udGguc2hvd1N0cmVhayA9IHlhbWxNb250aC5zaG93U3RyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhtb250aC5zaG93U3RyZWFrKTtcclxuXHJcbiAgICAgICAgLy8gc2hvd1RvZGF5UmluZ1xyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbE1vbnRoPy5zaG93VG9kYXlSaW5nID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgICBtb250aC5zaG93VG9kYXlSaW5nID0geWFtbE1vbnRoLnNob3dUb2RheVJpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLnNob3dUb2RheVJpbmcpO1xyXG5cclxuICAgICAgICAvLyBzaG93U2VsZWN0ZWRWYWx1ZVxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbE1vbnRoPy5zaG93U2VsZWN0ZWRWYWx1ZSA9PT0gXCJib29sZWFuXCIpIHtcclxuICAgICAgICAgICAgbW9udGguc2hvd1NlbGVjdGVkVmFsdWUgPSB5YW1sTW9udGguc2hvd1NlbGVjdGVkVmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLnNob3dTZWxlY3RlZFZhbHVlKTtcclxuXHJcbiAgICAgICAgLy8gc2hvd1NlbGVjdGVkUmluZ1xyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbE1vbnRoPy5zaG93U2VsZWN0ZWRSaW5nID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgICBtb250aC5zaG93U2VsZWN0ZWRSaW5nID0geWFtbE1vbnRoLnNob3dTZWxlY3RlZFJpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLnNob3dTZWxlY3RlZFJpbmcpO1xyXG5cclxuICAgICAgICAvLyBjaXJjbGVDb2xvclxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbE1vbnRoPy5jaXJjbGVDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBtb250aC5jaXJjbGVDb2xvciA9IHlhbWxNb250aC5jaXJjbGVDb2xvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobW9udGguY2lyY2xlQ29sb3IpO1xyXG5cclxuICAgICAgICAvLyBjaXJjbGVDb2xvckJ5VmFsdWVcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxNb250aD8uY2lyY2xlQ29sb3JCeVZhbHVlID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgICBtb250aC5jaXJjbGVDb2xvckJ5VmFsdWUgPSB5YW1sTW9udGguY2lyY2xlQ29sb3JCeVZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhtb250aC5jaXJjbGVDb2xvckJ5VmFsdWUpO1xyXG5cclxuICAgICAgICAvLyBoZWFkZXJZZWFyQ29sb3JcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxNb250aD8uaGVhZGVyWWVhckNvbG9yID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG1vbnRoLmhlYWRlclllYXJDb2xvciA9IHlhbWxNb250aC5oZWFkZXJZZWFyQ29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLmhlYWRlclllYXJDb2xvcik7XHJcblxyXG4gICAgICAgIC8vIGhlYWRlck1vbnRoQ29sb3JcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxNb250aD8uaGVhZGVyTW9udGhDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBtb250aC5oZWFkZXJNb250aENvbG9yID0geWFtbE1vbnRoLmhlYWRlck1vbnRoQ29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLmhlYWRlck1vbnRoQ29sb3IpO1xyXG5cclxuICAgICAgICAvLyBkaXZpZGluZ0xpbmVDb2xvclxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbE1vbnRoPy5kaXZpZGluZ0xpbmVDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBtb250aC5kaXZpZGluZ0xpbmVDb2xvciA9IHlhbWxNb250aC5kaXZpZGluZ0xpbmVDb2xvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobW9udGguZGl2aWRpbmdMaW5lQ29sb3IpO1xyXG5cclxuICAgICAgICAvLyB0b2RheVJpbmdDb2xvclxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbE1vbnRoPy50b2RheVJpbmdDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBtb250aC50b2RheVJpbmdDb2xvciA9IHlhbWxNb250aC50b2RheVJpbmdDb2xvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobW9udGgudG9kYXlSaW5nQ29sb3IpO1xyXG5cclxuICAgICAgICAvLyBzZWxlY3RlZFJpbmdDb2xvclxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbE1vbnRoPy5zZWxlY3RlZFJpbmdDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBtb250aC5zZWxlY3RlZFJpbmdDb2xvciA9IHlhbWxNb250aC5zZWxlY3RlZFJpbmdDb2xvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobW9udGguc2VsZWN0ZWRSaW5nQ29sb3IpO1xyXG5cclxuICAgICAgICAvLyBpbml0TW9udGhcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxNb250aD8uaW5pdE1vbnRoID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG1vbnRoLmluaXRNb250aCA9IHlhbWxNb250aC5pbml0TW9udGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLmluaXRNb250aCk7XHJcblxyXG4gICAgICAgIHJlbmRlckluZm8ubW9udGgucHVzaChtb250aCk7XHJcbiAgICB9IC8vIE1vbnRoIHJlbGF0ZWQgcGFyYW1ldGVyc1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby5tb250aCk7XHJcblxyXG4gICAgLy8gSGVhdG1hcCByZWxhdGVkIHBhcmFtZXRlcnNcclxuICAgIGZvciAobGV0IGhlYXRtYXBLZXkgb2YgeWFtbEhlYXRtYXBLZXlzKSB7XHJcbiAgICAgICAgbGV0IGhlYXRtYXAgPSBuZXcgSGVhdG1hcEluZm8oKTtcclxuICAgICAgICBsZXQgeWFtbEhlYXRtYXAgPSB5YW1sW2hlYXRtYXBLZXldO1xyXG5cclxuICAgICAgICBsZXQga2V5c09mSGVhdG1hcEluZm8gPSBnZXRBdmFpbGFibGVLZXlzT2ZDbGFzcyhoZWF0bWFwKTtcclxuICAgICAgICBsZXQga2V5c0ZvdW5kSW5ZQU1MID0gZ2V0QXZhaWxhYmxlS2V5c09mQ2xhc3MoeWFtbEhlYXRtYXApO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGtleXNPZkhlYXRtYXBJbmZvKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhrZXlzRm91bmRJbllBTUwpO1xyXG4gICAgICAgIGZvciAobGV0IGtleSBvZiBrZXlzRm91bmRJbllBTUwpIHtcclxuICAgICAgICAgICAgaWYgKCFrZXlzT2ZIZWF0bWFwSW5mby5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIidcIiArIGtleSArIFwiJyBpcyBub3QgYW4gYXZhaWxhYmxlIGtleVwiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVuZGVySW5mby5oZWF0bWFwLnB1c2goaGVhdG1hcCk7XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLmhlYXRtYXApO1xyXG5cclxuICAgIC8vIEJ1bGxldCByZWxhdGVkIHBhcmFtZXRlcnNcclxuICAgIGZvciAobGV0IGJ1bGxldEtleSBvZiB5YW1sQnVsbGV0S2V5cykge1xyXG4gICAgICAgIGxldCBidWxsZXQgPSBuZXcgQnVsbGV0SW5mbygpO1xyXG4gICAgICAgIGxldCB5YW1sQnVsbGV0ID0geWFtbFtidWxsZXRLZXldO1xyXG5cclxuICAgICAgICBsZXQga2V5c09mQnVsbGV0SW5mbyA9IGdldEF2YWlsYWJsZUtleXNPZkNsYXNzKGJ1bGxldCk7XHJcbiAgICAgICAgbGV0IGtleXNGb3VuZEluWUFNTCA9IGdldEF2YWlsYWJsZUtleXNPZkNsYXNzKHlhbWxCdWxsZXQpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGtleXNPZlN1bW1hcnlJbmZvKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhrZXlzRm91bmRJbllBTUwpO1xyXG4gICAgICAgIGZvciAobGV0IGtleSBvZiBrZXlzRm91bmRJbllBTUwpIHtcclxuICAgICAgICAgICAgaWYgKCFrZXlzT2ZCdWxsZXRJbmZvLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiJ1wiICsga2V5ICsgXCInIGlzIG5vdCBhbiBhdmFpbGFibGUga2V5XCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0aXRsZVxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbEJ1bGxldD8udGl0bGUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgYnVsbGV0LnRpdGxlID0geWFtbEJ1bGxldC50aXRsZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnVsbGV0LnRpdGxlKTtcclxuXHJcbiAgICAgICAgLy8gZGF0YXNldFxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbEJ1bGxldD8uZGF0YXNldCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBidWxsZXQuZGF0YXNldCA9IHlhbWxCdWxsZXQuZGF0YXNldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnVsbGV0LmRhdGFzZXQpO1xyXG5cclxuICAgICAgICAvLyBvcmllbnRhdGlvblxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbEJ1bGxldD8ub3JpZW50YXRpb24gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgYnVsbGV0Lm9yaWVudGF0aW9uID0geWFtbEJ1bGxldC5vcmllbnRhdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnVsbGV0Lm9yaWVudGF0aW9uKTtcclxuXHJcbiAgICAgICAgLy8gcmFuZ2VcclxuICAgICAgICBsZXQgcmV0UmFuZ2UgPSBnZXROdW1iZXJBcnJheShcInJhbmdlXCIsIHlhbWxCdWxsZXQ/LnJhbmdlKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldFJhbmdlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRSYW5nZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHJhbmdlID0gcmV0UmFuZ2UgYXMgQXJyYXk8bnVtYmVyPjtcclxuICAgICAgICAvLyBDaGVjayB0aGUgdmFsdWUgaXMgbW9ub3RvbmljYWxseSBpbmNyZWFzaW5nXHJcbiAgICAgICAgLy8gQ2hlY2sgdGhlIHZhbHVlIGlzIG5vdCBuZWdhdGl2ZVxyXG4gICAgICAgIGlmIChyYW5nZS5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgaWYgKHJhbmdlWzBdIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJOZWdhdGl2ZSByYW5nZSB2YWx1ZSBpcyBub3QgYWxsb3dlZFwiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAocmFuZ2UubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBsZXQgbGFzdEJvdW5kID0gcmFuZ2VbMF07XHJcbiAgICAgICAgICAgIGlmIChsYXN0Qm91bmQgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIk5lZ2F0aXZlIHJhbmdlIHZhbHVlIGlzIG5vdCBhbGxvd2VkXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaW5kID0gMTsgaW5kIDwgcmFuZ2UubGVuZ3RoOyBpbmQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZVtpbmRdIDw9IGxhc3RCb3VuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJWYWx1ZXMgaW4gcGFyYW1ldGVyICdyYW5nZScgc2hvdWxkIGJlIG1vbm90b25pY2FsbHkgaW5jcmVhc2luZ1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiRW1wdHkgcmFuZ2UgaXMgbm90IGFsbG93ZWRcIjtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnVsbGV0LnJhbmdlID0gcmFuZ2U7XHJcbiAgICAgICAgbGV0IG51bVJhbmdlID0gcmFuZ2UubGVuZ3RoO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uYnVsbGV0LnJhbmdlKTtcclxuXHJcbiAgICAgICAgLy8gcmFuZ2UgY29sb3JcclxuICAgICAgICBsZXQgcmV0UmFuZ2VDb2xvciA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcInJhbmdlQ29sb3JcIixcclxuICAgICAgICAgICAgeWFtbEJ1bGxldD8ucmFuZ2VDb2xvcixcclxuICAgICAgICAgICAgbnVtUmFuZ2UsXHJcbiAgICAgICAgICAgIFwiXCIsXHJcbiAgICAgICAgICAgIHZhbGlkYXRlQ29sb3IsXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0UmFuZ2VDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0UmFuZ2VDb2xvcjsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJ1bGxldC5yYW5nZUNvbG9yID0gcmV0UmFuZ2VDb2xvcjtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidWxsZXQucmFuZ2VDb2xvcik7XHJcblxyXG4gICAgICAgIC8vIGFjdHVhbCB2YWx1ZSwgY2FuIHBvc3Nlc3MgdGVtcGxhdGUgdmFyaWFibGVcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxCdWxsZXQ/LnZhbHVlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGJ1bGxldC52YWx1ZSA9IHlhbWxCdWxsZXQudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1bGxldC52YWx1ZSk7XHJcblxyXG4gICAgICAgIC8vIHZhbHVlIHVuaXRcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxCdWxsZXQ/LnZhbHVlVW5pdCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBidWxsZXQudmFsdWVVbml0ID0geWFtbEJ1bGxldC52YWx1ZVVuaXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1bGxldC52YWx1ZVVuaXQpO1xyXG5cclxuICAgICAgICAvLyB2YWx1ZSBjb2xvclxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbEJ1bGxldD8udmFsdWVDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBidWxsZXQudmFsdWVDb2xvciA9IHlhbWxCdWxsZXQudmFsdWVDb2xvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnVsbGV0LnZhbHVlQ29sb3IpO1xyXG5cclxuICAgICAgICAvLyBzaG93IG1hcmtcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxCdWxsZXQ/LnNob3dNYXJrZXIgPT09IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgICAgICAgIGJ1bGxldC5zaG93TWFya2VyID0geWFtbEJ1bGxldC5zaG93TWFya2VyO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidWxsZXQuc2hvd01hcmspO1xyXG5cclxuICAgICAgICAvLyBtYXJrIHZhbHVlXHJcbiAgICAgICAgaWYgKHR5cGVvZiB5YW1sQnVsbGV0Py5tYXJrZXJWYWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICBidWxsZXQubWFya2VyVmFsdWUgPSB5YW1sQnVsbGV0Lm1hcmtlclZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidWxsZXQubWFya1ZhbHVlKTtcclxuXHJcbiAgICAgICAgLy8gbWFyayBjb2xvclxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbEJ1bGxldD8ubWFya2VyQ29sb3IgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgYnVsbGV0Lm1hcmtlckNvbG9yID0geWFtbEJ1bGxldC5tYXJrZXJDb2xvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnVsbGV0Lm1hcmtWYWx1ZSk7XHJcblxyXG4gICAgICAgIHJlbmRlckluZm8uYnVsbGV0LnB1c2goYnVsbGV0KTtcclxuICAgIH0gLy8gQnVsbGV0IHJlbGF0ZWQgcGFyYW1ldGVyc1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby5idWxsZXQpO1xyXG5cclxuICAgIHJldHVybiByZW5kZXJJbmZvO1xyXG59XHJcbiIsImltcG9ydCB7IENhY2hlZE1ldGFkYXRhLCBURmlsZSwgbm9ybWFsaXplUGF0aCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQge1xyXG4gICAgRGF0YU1hcCxcclxuICAgIFF1ZXJ5LFxyXG4gICAgUmVuZGVySW5mbyxcclxuICAgIFhWYWx1ZU1hcCxcclxuICAgIFF1ZXJ5VmFsdWVQYWlyLFxyXG4gICAgVGFibGVEYXRhLFxyXG4gICAgU2VhcmNoVHlwZSxcclxuICAgIFZhbHVlVHlwZSxcclxufSBmcm9tIFwiLi9kYXRhXCI7XHJcbmltcG9ydCAqIGFzIGhlbHBlciBmcm9tIFwiLi9oZWxwZXJcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRlRnJvbUZpbGVuYW1lKGZpbGU6IFRGaWxlLCByZW5kZXJJbmZvOiBSZW5kZXJJbmZvKSB7XHJcbiAgICBsZXQgZmlsZUJhc2VOYW1lID0gZmlsZS5iYXNlbmFtZTtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgICAgcmVuZGVySW5mby5kYXRlRm9ybWF0UHJlZml4ICYmXHJcbiAgICAgICAgZmlsZUJhc2VOYW1lLnN0YXJ0c1dpdGgocmVuZGVySW5mby5kYXRlRm9ybWF0UHJlZml4KVxyXG4gICAgKSB7XHJcbiAgICAgICAgZmlsZUJhc2VOYW1lID0gZmlsZUJhc2VOYW1lLnNsaWNlKHJlbmRlckluZm8uZGF0ZUZvcm1hdFByZWZpeC5sZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgaWYgKFxyXG4gICAgICAgIHJlbmRlckluZm8uZGF0ZUZvcm1hdFN1ZmZpeCAmJlxyXG4gICAgICAgIGZpbGVCYXNlTmFtZS5lbmRzV2l0aChyZW5kZXJJbmZvLmRhdGVGb3JtYXRTdWZmaXgpXHJcbiAgICApIHtcclxuICAgICAgICBmaWxlQmFzZU5hbWUgPSBmaWxlQmFzZU5hbWUuc2xpY2UoXHJcbiAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgIGZpbGVCYXNlTmFtZS5sZW5ndGggLSByZW5kZXJJbmZvLmRhdGVGb3JtYXRTdWZmaXgubGVuZ3RoXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKGZpbGVCYXNlTmFtZSk7XHJcblxyXG4gICAgbGV0IGZpbGVEYXRlID0gaGVscGVyLnN0clRvRGF0ZShmaWxlQmFzZU5hbWUsIHJlbmRlckluZm8uZGF0ZUZvcm1hdCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhmaWxlRGF0ZSk7XHJcblxyXG4gICAgcmV0dXJuIGZpbGVEYXRlO1xyXG59XHJcblxyXG4vLyBOb3Qgc3VwcG9ydCBtdWx0aXBsZSB0YXJnZXRzXHJcbi8vIE1heSBtZXJnZSB3aXRoIGNvbGxlY3REYXRhRnJvbUZyb250bWF0dGVyS2V5XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRlRnJvbUZyb250bWF0dGVyKFxyXG4gICAgZmlsZUNhY2hlOiBDYWNoZWRNZXRhZGF0YSxcclxuICAgIHF1ZXJ5OiBRdWVyeSxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm9cclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcImdldERhdGVGcm9tRnJvbnRtYXR0ZXJcIik7XHJcblxyXG4gICAgbGV0IGRhdGUgPSB3aW5kb3cubW9tZW50KFwiXCIpO1xyXG5cclxuICAgIGxldCBmcm9udE1hdHRlciA9IGZpbGVDYWNoZS5mcm9udG1hdHRlcjtcclxuICAgIGlmIChmcm9udE1hdHRlcikge1xyXG4gICAgICAgIGlmIChoZWxwZXIuZGVlcFZhbHVlKGZyb250TWF0dGVyLCBxdWVyeS5nZXRUYXJnZXQoKSkpIHtcclxuICAgICAgICAgICAgbGV0IHN0ckRhdGUgPSBoZWxwZXIuZGVlcFZhbHVlKGZyb250TWF0dGVyLCBxdWVyeS5nZXRUYXJnZXQoKSk7XHJcblxyXG4gICAgICAgICAgICBkYXRlID0gaGVscGVyLnN0clRvRGF0ZShzdHJEYXRlLCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhkYXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRhdGU7XHJcbn1cclxuXHJcbi8vIElubGluZSB0YWdzIG9ubHlcclxuLy8gTm90IHN1cHBvcnQgbXVsdGlwbGUgdGFyZ2V0c1xyXG4vLyBNYXkgbWVyZ2Ugd2l0aCBjb2xsZWN0RGF0YUZyb21JbmxpbmVUYWdcclxuZXhwb3J0IGZ1bmN0aW9uIGdldERhdGVGcm9tVGFnKFxyXG4gICAgY29udGVudDogc3RyaW5nLFxyXG4gICAgcXVlcnk6IFF1ZXJ5LFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mb1xyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiZ2V0RGF0ZUZyb21UYWdcIik7XHJcblxyXG4gICAgbGV0IGRhdGUgPSB3aW5kb3cubW9tZW50KFwiXCIpO1xyXG5cclxuICAgIGxldCB0YWdOYW1lID0gcXVlcnkuZ2V0VGFyZ2V0KCk7XHJcbiAgICBpZiAocXVlcnkuZ2V0UGFyZW50VGFyZ2V0KCkpIHtcclxuICAgICAgICB0YWdOYW1lID0gcXVlcnkuZ2V0UGFyZW50VGFyZ2V0KCk7IC8vIHVzZSBwYXJlbnQgdGFnIG5hbWUgZm9yIG11bHRpcGxlIHZhbHVlc1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2codGFnTmFtZSk7XHJcbiAgICBsZXQgc3RySGFzaHRhZ1JlZ2V4ID1cclxuICAgICAgICBcIihefFxcXFxzKSNcIiArXHJcbiAgICAgICAgdGFnTmFtZSArXHJcbiAgICAgICAgXCIoXFxcXC9bXFxcXHctXSspKig6KD88dmFsdWVzPltcXFxcZFxcXFwuXFxcXC8tXSopW2EtekEtWl0qKT8oW1xcXFwuISxcXFxcPzt+LV0qKT8oXFxcXHN8JClcIjtcclxuICAgIC8vIGNvbnNvbGUubG9nKHN0ckhhc2h0YWdSZWdleCk7XHJcbiAgICBsZXQgaGFzaFRhZ1JlZ2V4ID0gbmV3IFJlZ0V4cChzdHJIYXNodGFnUmVnZXgsIFwiZ21cIik7XHJcbiAgICBsZXQgbWF0Y2g7XHJcbiAgICB3aGlsZSAoKG1hdGNoID0gaGFzaFRhZ1JlZ2V4LmV4ZWMoY29udGVudCkpKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobWF0Y2gpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdHlwZW9mIG1hdGNoLmdyb3VwcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgbWF0Y2guZ3JvdXBzLnZhbHVlcyAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBsZXQgc3RyRGF0ZSA9IG1hdGNoLmdyb3Vwcy52YWx1ZXM7XHJcbiAgICAgICAgICAgIGRhdGUgPSBoZWxwZXIuc3RyVG9EYXRlKHN0ckRhdGUsIHJlbmRlckluZm8uZGF0ZUZvcm1hdCk7XHJcbiAgICAgICAgICAgIGlmIChkYXRlLmlzVmFsaWQoKSkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhkYXRlKTtcclxuICAgIHJldHVybiBkYXRlO1xyXG59XHJcblxyXG4vLyBOb3Qgc3VwcG9ydCBtdWx0aXBsZSB0YXJnZXRzXHJcbi8vIE1heSBtZXJnZSB3aXRoIGNvbGxsZWN0RGF0YUZyb21UZXh0XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRlRnJvbVRleHQoXHJcbiAgICBjb250ZW50OiBzdHJpbmcsXHJcbiAgICBxdWVyeTogUXVlcnksXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvXHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJnZXREYXRlRnJvbVRleHRcIik7XHJcblxyXG4gICAgbGV0IGRhdGUgPSB3aW5kb3cubW9tZW50KFwiXCIpO1xyXG5cclxuICAgIGxldCBzdHJUZXh0UmVnZXggPSBxdWVyeS5nZXRUYXJnZXQoKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHN0clRleHRSZWdleCk7XHJcbiAgICBsZXQgdGV4dFJlZ2V4ID0gbmV3IFJlZ0V4cChzdHJUZXh0UmVnZXgsIFwiZ21cIik7XHJcbiAgICBsZXQgbWF0Y2g7XHJcbiAgICB3aGlsZSAoKG1hdGNoID0gdGV4dFJlZ2V4LmV4ZWMoY29udGVudCkpKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobWF0Y2gpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdHlwZW9mIG1hdGNoLmdyb3VwcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgbWF0Y2guZ3JvdXBzLnZhbHVlICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGxldCBzdHJEYXRlID0gbWF0Y2guZ3JvdXBzLnZhbHVlLnRyaW0oKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc3RyRGF0ZSk7XHJcblxyXG4gICAgICAgICAgICBkYXRlID0gaGVscGVyLnN0clRvRGF0ZShzdHJEYXRlLCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpO1xyXG4gICAgICAgICAgICBpZiAoZGF0ZS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coZGF0ZSk7XHJcbiAgICByZXR1cm4gZGF0ZTtcclxufVxyXG5cclxuLy8gTm90IHN1cHBvcnQgbXVsdGlwbGUgdGFyZ2V0c1xyXG4vLyBNYXkgbWVyZ2Ugd2l0aCBjb2xsbGVjdERhdGFGcm9tRHZGaWVsZFxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF0ZUZyb21EdkZpZWxkKFxyXG4gICAgY29udGVudDogc3RyaW5nLFxyXG4gICAgcXVlcnk6IFF1ZXJ5LFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mb1xyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiZ2V0RGF0ZUZyb21EdkZpZWxkXCIpO1xyXG5cclxuICAgIGxldCBkYXRlID0gd2luZG93Lm1vbWVudChcIlwiKTtcclxuXHJcbiAgICBsZXQgZHZUYXJnZXQgPSBxdWVyeS5nZXRUYXJnZXQoKTtcclxuICAgIGlmIChxdWVyeS5nZXRQYXJlbnRUYXJnZXQoKSkge1xyXG4gICAgICAgIGR2VGFyZ2V0ID0gcXVlcnkuZ2V0UGFyZW50VGFyZ2V0KCk7IC8vIHVzZSBwYXJlbnQgdGFnIG5hbWUgZm9yIG11bHRpcGxlIHZhbHVlc1xyXG4gICAgfVxyXG4gICAgLy8gRGF0YXZpZXcgYXNrIHVzZXIgdG8gYWRkIGRhc2hlcyBmb3Igc3BhY2VzIGFzIHNlYXJjaCB0YXJnZXRcclxuICAgIC8vIFNvIGEgZGFzaCBtYXkgc3RhbmRzIGZvciBhIHJlYWwgZGFzaCBvciBhIHNwYWNlXHJcbiAgICBkdlRhcmdldCA9IGR2VGFyZ2V0LnJlcGxhY2UoXCItXCIsIFwiW1xcXFxzXFxcXC1dXCIpO1xyXG5cclxuICAgIC8vIFRlc3QgdGhpcyBpbiBSZWdleDEwMVxyXG4gICAgLy8gKF58XFxzKVxcKnswLDJ9ZHZUYXJnZXRcXCp7MCwyfSg6OlxccyooPzx2YWx1ZXM+W1xcZFxcLlxcL1xcLVxcdyxAO1xcc10qKSkoXFxzfCQpXHJcbiAgICBsZXQgc3RySGFzaHRhZ1JlZ2V4ID1cclxuICAgICAgICBcIihefFxcXFxzKVxcXFwqezAsMn1cIiArXHJcbiAgICAgICAgZHZUYXJnZXQgK1xyXG4gICAgICAgIFwiXFxcXCp7MCwyfSg6OlxcXFxzKig/PHZhbHVlcz5bXFxcXGRcXFxcLlxcXFwvXFxcXC1cXFxcdyxAO1xcXFxzXSopKShcXHI/XFxufFxccilcIjtcclxuICAgIC8vIGNvbnNvbGUubG9nKHN0ckhhc2h0YWdSZWdleCk7XHJcbiAgICBsZXQgaGFzaFRhZ1JlZ2V4ID0gbmV3IFJlZ0V4cChzdHJIYXNodGFnUmVnZXgsIFwiZ21cIik7XHJcbiAgICBsZXQgbWF0Y2g7XHJcbiAgICB3aGlsZSAoKG1hdGNoID0gaGFzaFRhZ1JlZ2V4LmV4ZWMoY29udGVudCkpKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobWF0Y2gpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdHlwZW9mIG1hdGNoLmdyb3VwcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgbWF0Y2guZ3JvdXBzLnZhbHVlcyAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBsZXQgc3RyRGF0ZSA9IG1hdGNoLmdyb3Vwcy52YWx1ZXMudHJpbSgpO1xyXG4gICAgICAgICAgICBkYXRlID0gaGVscGVyLnN0clRvRGF0ZShzdHJEYXRlLCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpO1xyXG4gICAgICAgICAgICBpZiAoZGF0ZS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coZGF0ZSk7XHJcbiAgICByZXR1cm4gZGF0ZTtcclxufVxyXG5cclxuLy8gTm90IHN1cHBvcnQgbXVsdGlwbGUgdGFyZ2V0c1xyXG4vLyBNYXkgbWVyZ2Ugd2l0aCBjb2xsbGVjdERhdGFGcm9tRmlsZU1ldGFcclxuZXhwb3J0IGZ1bmN0aW9uIGdldERhdGVGcm9tRmlsZU1ldGEoXHJcbiAgICBmaWxlOiBURmlsZSxcclxuICAgIHF1ZXJ5OiBRdWVyeSxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm9cclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcImdldERhdGVGcm9tRmlsZU1ldGFcIik7XHJcblxyXG4gICAgbGV0IGRhdGUgPSB3aW5kb3cubW9tZW50KFwiXCIpO1xyXG5cclxuICAgIGlmIChmaWxlICYmIGZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGZpbGUuc3RhdCk7XHJcblxyXG4gICAgICAgIGxldCB0YXJnZXQgPSBxdWVyeS5nZXRUYXJnZXQoKTtcclxuICAgICAgICBpZiAodGFyZ2V0ID09PSBcImNEYXRlXCIpIHtcclxuICAgICAgICAgICAgbGV0IGN0aW1lID0gZmlsZS5zdGF0LmN0aW1lO1xyXG4gICAgICAgICAgICBkYXRlID0gaGVscGVyLmdldERhdGVGcm9tVW5peFRpbWUoY3RpbWUsIHJlbmRlckluZm8uZGF0ZUZvcm1hdCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgPT09IFwibURhdGVcIikge1xyXG4gICAgICAgICAgICBsZXQgbXRpbWUgPSBmaWxlLnN0YXQubXRpbWU7XHJcbiAgICAgICAgICAgIGRhdGUgPSBoZWxwZXIuZ2V0RGF0ZUZyb21Vbml4VGltZShtdGltZSwgcmVuZGVySW5mby5kYXRlRm9ybWF0KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldCA9PT0gXCJzaXplXCIpIHtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coZGF0ZSk7XHJcbiAgICByZXR1cm4gZGF0ZTtcclxufVxyXG5cclxuLy8gTm90IHN1cHBvcnQgbXVsdGlwbGUgdGFyZ2V0c1xyXG4vLyBNYXkgbWVyZ2Ugd2l0aCBjb2xsbGVjdERhdGFGcm9tVGFza1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF0ZUZyb21UYXNrKFxyXG4gICAgY29udGVudDogc3RyaW5nLFxyXG4gICAgcXVlcnk6IFF1ZXJ5LFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mb1xyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiZ2V0RGF0ZUZyb21UYXNrXCIpO1xyXG5cclxuICAgIGxldCBzdWJUeXBlID0gcXVlcnkuZ2V0U3ViVHlwZSgpO1xyXG4gICAgLy8gY29uc29sZS5sb2coc3ViVHlwZSk7XHJcblxyXG4gICAgbGV0IGRhdGUgPSB3aW5kb3cubW9tZW50KFwiXCIpO1xyXG5cclxuICAgIGxldCBzdHJUZXh0UmVnZXggPSBxdWVyeS5nZXRUYXJnZXQoKTtcclxuICAgIGlmIChzdWJUeXBlID09PSBcImFsbFwiKSB7XHJcbiAgICAgICAgc3RyVGV4dFJlZ2V4ID0gXCJcXFxcW1tcXFxcc3hdXFxcXF1cXFxcc1wiICsgc3RyVGV4dFJlZ2V4O1xyXG4gICAgfSBlbHNlIGlmIChzdWJUeXBlID09PSBcImRvbmVcIikge1xyXG4gICAgICAgIHN0clRleHRSZWdleCA9IFwiXFxcXFt4XFxcXF1cXFxcc1wiICsgc3RyVGV4dFJlZ2V4O1xyXG4gICAgfSBlbHNlIGlmIChzdWJUeXBlID09PSBcIm5vdGRvbmVcIikge1xyXG4gICAgICAgIHN0clRleHRSZWdleCA9IFwiXFxcXFtcXFxcc1xcXFxdXFxcXHNcIiArIHN0clRleHRSZWdleDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gYWxsXHJcbiAgICAgICAgc3RyVGV4dFJlZ2V4ID0gXCJcXFxcW1tcXFxcc3hdXFxcXF1cXFxcc1wiICsgc3RyVGV4dFJlZ2V4O1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coc3RyVGV4dFJlZ2V4KTtcclxuXHJcbiAgICBsZXQgdGV4dFJlZ2V4ID0gbmV3IFJlZ0V4cChzdHJUZXh0UmVnZXgsIFwiZ21cIik7XHJcbiAgICBsZXQgbWF0Y2g7XHJcbiAgICB3aGlsZSAoKG1hdGNoID0gdGV4dFJlZ2V4LmV4ZWMoY29udGVudCkpKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobWF0Y2gpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdHlwZW9mIG1hdGNoLmdyb3VwcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgbWF0Y2guZ3JvdXBzLnZhbHVlICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGxldCBzdHJEYXRlID0gbWF0Y2guZ3JvdXBzLnZhbHVlLnRyaW0oKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc3RyRGF0ZSk7XHJcblxyXG4gICAgICAgICAgICBkYXRlID0gaGVscGVyLnN0clRvRGF0ZShzdHJEYXRlLCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpO1xyXG4gICAgICAgICAgICBpZiAoZGF0ZS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coZGF0ZSk7XHJcbiAgICByZXR1cm4gZGF0ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZFRvRGF0YU1hcChcclxuICAgIGRhdGFNYXA6IERhdGFNYXAsXHJcbiAgICBkYXRlOiBzdHJpbmcsXHJcbiAgICBxdWVyeTogUXVlcnksXHJcbiAgICB2YWx1ZTogbnVtYmVyIHwgbnVsbFxyXG4pIHtcclxuICAgIGlmICghZGF0YU1hcC5oYXMoZGF0ZSkpIHtcclxuICAgICAgICBsZXQgcXVlcnlWYWx1ZVBhaXJzID0gbmV3IEFycmF5PFF1ZXJ5VmFsdWVQYWlyPigpO1xyXG4gICAgICAgIHF1ZXJ5VmFsdWVQYWlycy5wdXNoKHsgcXVlcnk6IHF1ZXJ5LCB2YWx1ZTogdmFsdWUgfSk7XHJcbiAgICAgICAgZGF0YU1hcC5zZXQoZGF0ZSwgcXVlcnlWYWx1ZVBhaXJzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGV0IHRhcmdldFZhbHVlUGFpcnMgPSBkYXRhTWFwLmdldChkYXRlKTtcclxuICAgICAgICB0YXJnZXRWYWx1ZVBhaXJzLnB1c2goeyBxdWVyeTogcXVlcnksIHZhbHVlOiB2YWx1ZSB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbGxlY3REYXRhRnJvbUZyb250bWF0dGVyVGFnKFxyXG4gICAgZmlsZUNhY2hlOiBDYWNoZWRNZXRhZGF0YSxcclxuICAgIHF1ZXJ5OiBRdWVyeSxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBkYXRhTWFwOiBEYXRhTWFwLFxyXG4gICAgeFZhbHVlTWFwOiBYVmFsdWVNYXBcclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcImNvbGxlY3REYXRhRnJvbUZyb250bWF0dGVyVGFnXCIpO1xyXG4gICAgLy8gY29uc29sZS5sb2cocXVlcnkpO1xyXG4gICAgLy8gY29uc29sZS5sb2coZGF0YU1hcCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyh4VmFsdWVNYXApO1xyXG4gICAgbGV0IGZyb250TWF0dGVyID0gZmlsZUNhY2hlLmZyb250bWF0dGVyO1xyXG4gICAgbGV0IGZyb250TWF0dGVyVGFnczogc3RyaW5nW10gPSBbXTtcclxuICAgIGlmIChmcm9udE1hdHRlciAmJiBmcm9udE1hdHRlci50YWdzKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coZnJvbnRNYXR0ZXIudGFncyk7XHJcbiAgICAgICAgbGV0IHRhZ01lYXN1cmUgPSAwLjA7XHJcbiAgICAgICAgbGV0IHRhZ0V4aXN0ID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZnJvbnRNYXR0ZXIudGFncykpIHtcclxuICAgICAgICAgICAgZnJvbnRNYXR0ZXJUYWdzID0gZnJvbnRNYXR0ZXJUYWdzLmNvbmNhdChmcm9udE1hdHRlci50YWdzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmcm9udE1hdHRlclRhZ3MucHVzaChmcm9udE1hdHRlci50YWdzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IHRhZyBvZiBmcm9udE1hdHRlclRhZ3MpIHtcclxuICAgICAgICAgICAgaWYgKHRhZyA9PT0gcXVlcnkuZ2V0VGFyZ2V0KCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIHNpbXBsZSB0YWdcclxuICAgICAgICAgICAgICAgIHRhZ01lYXN1cmUgPSB0YWdNZWFzdXJlICsgcmVuZGVySW5mby5jb25zdFZhbHVlW3F1ZXJ5LmdldElkKCldO1xyXG4gICAgICAgICAgICAgICAgdGFnRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcXVlcnkuYWRkTnVtVGFyZ2V0cygpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRhZy5zdGFydHNXaXRoKHF1ZXJ5LmdldFRhcmdldCgpICsgXCIvXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBuZXN0ZWQgdGFnXHJcbiAgICAgICAgICAgICAgICB0YWdNZWFzdXJlID0gdGFnTWVhc3VyZSArIHJlbmRlckluZm8uY29uc3RWYWx1ZVtxdWVyeS5nZXRJZCgpXTtcclxuICAgICAgICAgICAgICAgIHRhZ0V4aXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5LmFkZE51bVRhcmdldHMoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyB2YWx1ZWQtdGFnIGluIGZyb250bWF0dGVyIGlzIG5vdCBzdXBwb3J0ZWRcclxuICAgICAgICAgICAgLy8gYmVjYXVzZSB0aGUgXCJ0YWc6dmFsdWVcIiBpbiBmcm9udG1hdHRlciB3aWxsIGJlIGNvbnNpZGVyIGFzIGEgbmV3IHRhZyBmb3IgZGlmZmVyZW50IHZhbHVlc1xyXG5cclxuICAgICAgICAgICAgbGV0IHZhbHVlID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKHRhZ0V4aXN0KSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRhZ01lYXN1cmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHhWYWx1ZSA9IHhWYWx1ZU1hcC5nZXQocmVuZGVySW5mby54RGF0YXNldFtxdWVyeS5nZXRJZCgpXSk7XHJcbiAgICAgICAgICAgIGFkZFRvRGF0YU1hcChkYXRhTWFwLCB4VmFsdWUsIHF1ZXJ5LCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29sbGVjdERhdGFGcm9tRnJvbnRtYXR0ZXJLZXkoXHJcbiAgICBmaWxlQ2FjaGU6IENhY2hlZE1ldGFkYXRhLFxyXG4gICAgcXVlcnk6IFF1ZXJ5LFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGRhdGFNYXA6IERhdGFNYXAsXHJcbiAgICB4VmFsdWVNYXA6IFhWYWx1ZU1hcFxyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiY29sbGVjdERhdGFGcm9tRnJvbnRtYXR0ZXJLZXlcIik7XHJcblxyXG4gICAgbGV0IGZyb250TWF0dGVyID0gZmlsZUNhY2hlLmZyb250bWF0dGVyO1xyXG4gICAgaWYgKGZyb250TWF0dGVyKSB7XHJcbiAgICAgICAgaWYgKGhlbHBlci5kZWVwVmFsdWUoZnJvbnRNYXR0ZXIsIHF1ZXJ5LmdldFRhcmdldCgpKSkge1xyXG4gICAgICAgICAgICBsZXQgdG9QYXJzZSA9IGhlbHBlci5kZWVwVmFsdWUoZnJvbnRNYXR0ZXIsIHF1ZXJ5LmdldFRhcmdldCgpKTtcclxuICAgICAgICAgICAgbGV0IHJldFBhcnNlID0gaGVscGVyLnBhcnNlRmxvYXRGcm9tQW55KHRvUGFyc2UpO1xyXG4gICAgICAgICAgICBpZiAocmV0UGFyc2UudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXRQYXJzZS50eXBlID09PSBWYWx1ZVR5cGUuVGltZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5LnZhbHVlVHlwZSA9IFZhbHVlVHlwZS5UaW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcXVlcnkuYWRkTnVtVGFyZ2V0cygpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHhWYWx1ZSA9IHhWYWx1ZU1hcC5nZXQocmVuZGVySW5mby54RGF0YXNldFtxdWVyeS5nZXRJZCgpXSk7XHJcbiAgICAgICAgICAgICAgICBhZGRUb0RhdGFNYXAoZGF0YU1hcCwgeFZhbHVlLCBxdWVyeSwgcmV0UGFyc2UudmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICAgICAgcXVlcnkuZ2V0UGFyZW50VGFyZ2V0KCkgJiZcclxuICAgICAgICAgICAgaGVscGVyLmRlZXBWYWx1ZShmcm9udE1hdHRlciwgcXVlcnkuZ2V0UGFyZW50VGFyZ2V0KCkpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwibXVsdGlwbGUgdmFsdWVzXCIpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhxdWVyeS5nZXRUYXJnZXQoKSk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHF1ZXJ5LmdldFBhcmVudFRhcmdldCgpKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocXVlcnkuZ2V0U3ViSWQoKSk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgICAvLyAgICAgZnJvbnRNYXR0ZXJbcXVlcnkuZ2V0UGFyZW50VGFyZ2V0KCldXHJcbiAgICAgICAgICAgIC8vICk7XHJcbiAgICAgICAgICAgIGxldCB0b1BhcnNlID0gaGVscGVyLmRlZXBWYWx1ZShcclxuICAgICAgICAgICAgICAgIGZyb250TWF0dGVyLFxyXG4gICAgICAgICAgICAgICAgcXVlcnkuZ2V0UGFyZW50VGFyZ2V0KClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgbGV0IHNwbGl0dGVkID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodG9QYXJzZSkpIHtcclxuICAgICAgICAgICAgICAgIHNwbGl0dGVkID0gdG9QYXJzZS5tYXAoKHApID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcC50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRvUGFyc2UgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHNwbGl0dGVkID0gdG9QYXJzZS5zcGxpdChxdWVyeS5nZXRTZXBhcmF0b3IoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgc3BsaXR0ZWQgJiZcclxuICAgICAgICAgICAgICAgIHNwbGl0dGVkLmxlbmd0aCA+IHF1ZXJ5LmdldEFjY2Vzc29yKCkgJiZcclxuICAgICAgICAgICAgICAgIHF1ZXJ5LmdldEFjY2Vzc29yKCkgPj0gMFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGl0J3Mgbm90IGVmZmljZW50IHRvIHJldHJpZXZlIG9uZSB2YWx1ZSBhdCBhIHRpbWUsIGVuaGFuY2UgdGhpc1xyXG4gICAgICAgICAgICAgICAgbGV0IHNwbGl0dGVkUGFydCA9IHNwbGl0dGVkW3F1ZXJ5LmdldEFjY2Vzc29yKCldLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgIGxldCByZXRQYXJzZSA9IGhlbHBlci5wYXJzZUZsb2F0RnJvbUFueShzcGxpdHRlZFBhcnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJldFBhcnNlLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJldFBhcnNlLnR5cGUgPT09IFZhbHVlVHlwZS5UaW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LnZhbHVlVHlwZSA9IFZhbHVlVHlwZS5UaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBxdWVyeS5hZGROdW1UYXJnZXRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHhWYWx1ZSA9IHhWYWx1ZU1hcC5nZXQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckluZm8ueERhdGFzZXRbcXVlcnkuZ2V0SWQoKV1cclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZFRvRGF0YU1hcChkYXRhTWFwLCB4VmFsdWUsIHF1ZXJ5LCByZXRQYXJzZS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb2xsZWN0RGF0YUZyb21XaWtpKFxyXG4gICAgZmlsZUNhY2hlOiBDYWNoZWRNZXRhZGF0YSxcclxuICAgIHF1ZXJ5OiBRdWVyeSxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBkYXRhTWFwOiBEYXRhTWFwLFxyXG4gICAgeFZhbHVlTWFwOiBYVmFsdWVNYXBcclxuKSB7XHJcbiAgICBsZXQgbGlua3MgPSBmaWxlQ2FjaGUubGlua3M7XHJcblxyXG4gICAgbGV0IGxpbmtNZWFzdXJlID0gMC4wO1xyXG4gICAgbGV0IGxpbmtFeGlzdCA9IGZhbHNlO1xyXG4gICAgZm9yIChsZXQgbGluayBvZiBsaW5rcykge1xyXG4gICAgICAgIGlmIChsaW5rLmxpbmsgPT09IHF1ZXJ5LmdldFRhcmdldCgpKSB7XHJcbiAgICAgICAgICAgIGxpbmtFeGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgIGxpbmtNZWFzdXJlID0gbGlua01lYXN1cmUgKyByZW5kZXJJbmZvLmNvbnN0VmFsdWVbcXVlcnkuZ2V0SWQoKV07XHJcbiAgICAgICAgICAgIHF1ZXJ5LmFkZE51bVRhcmdldHMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGxpbmtWYWx1ZSA9IG51bGw7XHJcbiAgICBpZiAobGlua0V4aXN0KSB7XHJcbiAgICAgICAgbGlua1ZhbHVlID0gbGlua01lYXN1cmU7XHJcbiAgICB9XHJcbiAgICBsZXQgeFZhbHVlID0geFZhbHVlTWFwLmdldChyZW5kZXJJbmZvLnhEYXRhc2V0W3F1ZXJ5LmdldElkKCldKTtcclxuICAgIGFkZFRvRGF0YU1hcChkYXRhTWFwLCB4VmFsdWUsIHF1ZXJ5LCBsaW5rVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29sbGVjdERhdGFGcm9tSW5saW5lVGFnKFxyXG4gICAgY29udGVudDogc3RyaW5nLFxyXG4gICAgcXVlcnk6IFF1ZXJ5LFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGRhdGFNYXA6IERhdGFNYXAsXHJcbiAgICB4VmFsdWVNYXA6IFhWYWx1ZU1hcFxyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG4gICAgLy8gVGVzdCB0aGlzIGluIFJlZ2V4MTAxXHJcbiAgICAvLyAoXnxcXHMpI3RhZ05hbWUoXFwvW1xcdy1dKykqKDooPzx2YWx1ZXM+W1xcZFxcLlxcLy1dKilbYS16QS1aXSopPyhbXFxcXC4hLFxcXFw/O34tXSopPyhcXHN8JClcclxuICAgIGxldCB0YWdOYW1lID0gcXVlcnkuZ2V0VGFyZ2V0KCk7XHJcbiAgICBpZiAocXVlcnkuZ2V0UGFyZW50VGFyZ2V0KCkpIHtcclxuICAgICAgICB0YWdOYW1lID0gcXVlcnkuZ2V0UGFyZW50VGFyZ2V0KCk7IC8vIHVzZSBwYXJlbnQgdGFnIG5hbWUgZm9yIG11bHRpcGxlIHZhbHVlc1xyXG4gICAgfVxyXG4gICAgaWYgKHRhZ05hbWUubGVuZ3RoID4gMSAmJiB0YWdOYW1lLnN0YXJ0c1dpdGgoXCIjXCIpKSB7XHJcbiAgICAgICAgdGFnTmFtZSA9IHRhZ05hbWUuc3Vic3RyaW5nKDEpO1xyXG4gICAgfVxyXG4gICAgbGV0IHN0ckhhc2h0YWdSZWdleCA9XHJcbiAgICAgICAgXCIoXnxcXFxccykjXCIgK1xyXG4gICAgICAgIHRhZ05hbWUgK1xyXG4gICAgICAgIFwiKFxcXFwvW1xcXFx3LV0rKSooOig/PHZhbHVlcz5bXFxcXGRcXFxcLlxcXFwvLV0qKVthLXpBLVpdKik/KFtcXFxcLiEsXFxcXD87fi1dKik/KFxcXFxzfCQpXCI7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhzdHJIYXNodGFnUmVnZXgpO1xyXG4gICAgbGV0IGhhc2hUYWdSZWdleCA9IG5ldyBSZWdFeHAoc3RySGFzaHRhZ1JlZ2V4LCBcImdtXCIpO1xyXG4gICAgbGV0IG1hdGNoO1xyXG4gICAgbGV0IHRhZ01lYXN1cmUgPSAwLjA7XHJcbiAgICBsZXQgdGFnRXhpc3QgPSBmYWxzZTtcclxuICAgIHdoaWxlICgobWF0Y2ggPSBoYXNoVGFnUmVnZXguZXhlYyhjb250ZW50KSkpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhtYXRjaCk7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAhcmVuZGVySW5mby5pZ25vcmVBdHRhY2hlZFZhbHVlW3F1ZXJ5LmdldElkKCldICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiBtYXRjaC5ncm91cHMgIT09IFwidW5kZWZpbmVkXCIgJiZcclxuICAgICAgICAgICAgdHlwZW9mIG1hdGNoLmdyb3Vwcy52YWx1ZXMgIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJ2YWx1ZS1hdHRhY2hlZCB0YWdcIik7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZXMgPSBtYXRjaC5ncm91cHMudmFsdWVzO1xyXG4gICAgICAgICAgICBsZXQgc3BsaXR0ZWQgPSB2YWx1ZXMuc3BsaXQocXVlcnkuZ2V0U2VwYXJhdG9yKCkpO1xyXG4gICAgICAgICAgICBpZiAoIXNwbGl0dGVkKSBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKHNwbGl0dGVkLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJzaW5nbGUtdmFsdWVcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG9QYXJzZSA9IHNwbGl0dGVkWzBdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgIGxldCByZXRQYXJzZSA9IGhlbHBlci5wYXJzZUZsb2F0RnJvbUFueSh0b1BhcnNlKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZXRQYXJzZS52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXRQYXJzZS50eXBlID09PSBWYWx1ZVR5cGUuVGltZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdNZWFzdXJlID0gcmV0UGFyc2UudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ0V4aXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkudmFsdWVUeXBlID0gVmFsdWVUeXBlLlRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LmFkZE51bVRhcmdldHMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhcmVuZGVySW5mby5pZ25vcmVaZXJvVmFsdWVbcXVlcnkuZ2V0SWQoKV0gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldFBhcnNlLnZhbHVlICE9PSAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnTWVhc3VyZSArPSByZXRQYXJzZS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ0V4aXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LmFkZE51bVRhcmdldHMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICAgICAgICAgIHNwbGl0dGVkLmxlbmd0aCA+IHF1ZXJ5LmdldEFjY2Vzc29yKCkgJiZcclxuICAgICAgICAgICAgICAgIHF1ZXJ5LmdldEFjY2Vzc29yKCkgPj0gMFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGxldCB0b1BhcnNlID0gc3BsaXR0ZWRbcXVlcnkuZ2V0QWNjZXNzb3IoKV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJldFBhcnNlID0gaGVscGVyLnBhcnNlRmxvYXRGcm9tQW55KHRvUGFyc2UpO1xyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhyZXRQYXJzZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmV0UGFyc2UudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmV0UGFyc2UudHlwZSA9PT0gVmFsdWVUeXBlLlRpbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnTWVhc3VyZSA9IHJldFBhcnNlLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdFeGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LnZhbHVlVHlwZSA9IFZhbHVlVHlwZS5UaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeS5hZGROdW1UYXJnZXRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnTWVhc3VyZSArPSByZXRQYXJzZS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeS5hZGROdW1UYXJnZXRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJzaW1wbGUtdGFnXCIpO1xyXG4gICAgICAgICAgICB0YWdNZWFzdXJlID0gdGFnTWVhc3VyZSArIHJlbmRlckluZm8uY29uc3RWYWx1ZVtxdWVyeS5nZXRJZCgpXTtcclxuICAgICAgICAgICAgdGFnRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICBxdWVyeS5hZGROdW1UYXJnZXRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxldCB2YWx1ZSA9IG51bGw7XHJcbiAgICBpZiAodGFnRXhpc3QpIHtcclxuICAgICAgICB2YWx1ZSA9IHRhZ01lYXN1cmU7XHJcbiAgICB9XHJcbiAgICBsZXQgeFZhbHVlID0geFZhbHVlTWFwLmdldChyZW5kZXJJbmZvLnhEYXRhc2V0W3F1ZXJ5LmdldElkKCldKTtcclxuICAgIGFkZFRvRGF0YU1hcChkYXRhTWFwLCB4VmFsdWUsIHF1ZXJ5LCB2YWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb2xsZWN0RGF0YUZyb21UZXh0KFxyXG4gICAgY29udGVudDogc3RyaW5nLFxyXG4gICAgcXVlcnk6IFF1ZXJ5LFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGRhdGFNYXA6IERhdGFNYXAsXHJcbiAgICB4VmFsdWVNYXA6IFhWYWx1ZU1hcFxyXG4pIHtcclxuICAgIGxldCBzdHJUZXh0UmVnZXggPSBxdWVyeS5nZXRUYXJnZXQoKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHN0clRleHRSZWdleCk7XHJcbiAgICBsZXQgdGV4dFJlZ2V4ID0gbmV3IFJlZ0V4cChzdHJUZXh0UmVnZXgsIFwiZ21cIik7XHJcbiAgICBsZXQgbWF0Y2g7XHJcbiAgICBsZXQgdGV4dE1lYXN1cmUgPSAwLjA7XHJcbiAgICBsZXQgdGV4dEV4aXN0ID0gZmFsc2U7XHJcbiAgICB3aGlsZSAoKG1hdGNoID0gdGV4dFJlZ2V4LmV4ZWMoY29udGVudCkpKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobWF0Y2gpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgIXJlbmRlckluZm8uaWdub3JlQXR0YWNoZWRWYWx1ZVtxdWVyeS5nZXRJZCgpXSAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgbWF0Y2guZ3JvdXBzICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIC8vIG1hdGNoWzBdIHdob2xlIG1hdGNoXHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwidmFsdWVkLXRleHRcIik7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWF0Y2guZ3JvdXBzLnZhbHVlICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzZXQgYXMgbnVsbCBmb3IgbWlzc2luZyB2YWx1ZSBpZiBpdCBpcyB2YWx1ZWQtdGFnXHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBwYXJzZUZsb2F0KG1hdGNoLmdyb3Vwcy52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIU51bWJlci5pc05hTih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICFyZW5kZXJJbmZvLmlnbm9yZVplcm9WYWx1ZVtxdWVyeS5nZXRJZCgpXSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSAhPT0gMFxyXG4gICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0TWVhc3VyZSArPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEV4aXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkuYWRkTnVtVGFyZ2V0cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwic2ltcGxlLXRleHRcIik7XHJcbiAgICAgICAgICAgIHRleHRNZWFzdXJlID0gdGV4dE1lYXN1cmUgKyByZW5kZXJJbmZvLmNvbnN0VmFsdWVbcXVlcnkuZ2V0SWQoKV07XHJcbiAgICAgICAgICAgIHRleHRFeGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgIHF1ZXJ5LmFkZE51bVRhcmdldHMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRleHRFeGlzdCkge1xyXG4gICAgICAgIGxldCB4VmFsdWUgPSB4VmFsdWVNYXAuZ2V0KHJlbmRlckluZm8ueERhdGFzZXRbcXVlcnkuZ2V0SWQoKV0pO1xyXG4gICAgICAgIGFkZFRvRGF0YU1hcChkYXRhTWFwLCB4VmFsdWUsIHF1ZXJ5LCB0ZXh0TWVhc3VyZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb2xsZWN0RGF0YUZyb21GaWxlTWV0YShcclxuICAgIGZpbGU6IFRGaWxlLFxyXG4gICAgY29udGVudDogc3RyaW5nLFxyXG4gICAgcXVlcnk6IFF1ZXJ5LFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGRhdGFNYXA6IERhdGFNYXAsXHJcbiAgICB4VmFsdWVNYXA6IFhWYWx1ZU1hcFxyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiY29sbGVjdERhdGFGcm9tRmlsZU1ldGFcIik7XHJcblxyXG4gICAgaWYgKGZpbGUgJiYgZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coZmlsZS5zdGF0KTtcclxuXHJcbiAgICAgICAgbGV0IHRhcmdldCA9IHF1ZXJ5LmdldFRhcmdldCgpO1xyXG4gICAgICAgIGxldCB4VmFsdWUgPSB4VmFsdWVNYXAuZ2V0KHJlbmRlckluZm8ueERhdGFzZXRbcXVlcnkuZ2V0SWQoKV0pO1xyXG5cclxuICAgICAgICBpZiAodGFyZ2V0ID09PSBcImNEYXRlXCIpIHtcclxuICAgICAgICAgICAgbGV0IGN0aW1lID0gZmlsZS5zdGF0LmN0aW1lO1xyXG4gICAgICAgICAgICBxdWVyeS52YWx1ZVR5cGUgPSBWYWx1ZVR5cGUuRGF0ZTtcclxuICAgICAgICAgICAgcXVlcnkuYWRkTnVtVGFyZ2V0cygpO1xyXG4gICAgICAgICAgICBhZGRUb0RhdGFNYXAoZGF0YU1hcCwgeFZhbHVlLCBxdWVyeSwgY3RpbWUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ID09PSBcIm1EYXRlXCIpIHtcclxuICAgICAgICAgICAgbGV0IG10aW1lID0gZmlsZS5zdGF0Lm10aW1lO1xyXG4gICAgICAgICAgICBxdWVyeS52YWx1ZVR5cGUgPSBWYWx1ZVR5cGUuRGF0ZTtcclxuICAgICAgICAgICAgcXVlcnkuYWRkTnVtVGFyZ2V0cygpO1xyXG4gICAgICAgICAgICBhZGRUb0RhdGFNYXAoZGF0YU1hcCwgeFZhbHVlLCBxdWVyeSwgbXRpbWUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ID09PSBcInNpemVcIikge1xyXG4gICAgICAgICAgICBsZXQgc2l6ZSA9IGZpbGUuc3RhdC5zaXplO1xyXG4gICAgICAgICAgICBxdWVyeS5hZGROdW1UYXJnZXRzKCk7XHJcbiAgICAgICAgICAgIGFkZFRvRGF0YU1hcChkYXRhTWFwLCB4VmFsdWUsIHF1ZXJ5LCBzaXplKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldCA9PT0gXCJudW1Xb3Jkc1wiKSB7XHJcbiAgICAgICAgICAgIGxldCBudW1Xb3JkcyA9IGhlbHBlci5nZXRXb3JkQ291bnQoY29udGVudCk7XHJcbiAgICAgICAgICAgIGFkZFRvRGF0YU1hcChkYXRhTWFwLCB4VmFsdWUsIHF1ZXJ5LCBudW1Xb3Jkcyk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgPT09IFwibnVtQ2hhcnNcIikge1xyXG4gICAgICAgICAgICBsZXQgbnVtQ2hhcnMgPSBoZWxwZXIuZ2V0Q2hhcmFjdGVyQ291bnQoY29udGVudCk7XHJcbiAgICAgICAgICAgIHF1ZXJ5LmFkZE51bVRhcmdldHMoKTtcclxuICAgICAgICAgICAgYWRkVG9EYXRhTWFwKGRhdGFNYXAsIHhWYWx1ZSwgcXVlcnksIG51bUNoYXJzKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldCA9PT0gXCJudW1TZW50ZW5jZXNcIikge1xyXG4gICAgICAgICAgICBsZXQgbnVtU2VudGVuY2VzID0gaGVscGVyLmdldFNlbnRlbmNlQ291bnQoY29udGVudCk7XHJcbiAgICAgICAgICAgIHF1ZXJ5LmFkZE51bVRhcmdldHMoKTtcclxuICAgICAgICAgICAgYWRkVG9EYXRhTWFwKGRhdGFNYXAsIHhWYWx1ZSwgcXVlcnksIG51bVNlbnRlbmNlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29sbGVjdERhdGFGcm9tRHZGaWVsZChcclxuICAgIGNvbnRlbnQ6IHN0cmluZyxcclxuICAgIHF1ZXJ5OiBRdWVyeSxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBkYXRhTWFwOiBEYXRhTWFwLFxyXG4gICAgeFZhbHVlTWFwOiBYVmFsdWVNYXBcclxuKSB7XHJcbiAgICBsZXQgZHZUYXJnZXQgPSBxdWVyeS5nZXRUYXJnZXQoKTtcclxuICAgIGlmIChxdWVyeS5nZXRQYXJlbnRUYXJnZXQoKSkge1xyXG4gICAgICAgIGR2VGFyZ2V0ID0gcXVlcnkuZ2V0UGFyZW50VGFyZ2V0KCk7IC8vIHVzZSBwYXJlbnQgdGFnIG5hbWUgZm9yIG11bHRpcGxlIHZhbHVlc1xyXG4gICAgfVxyXG4gICAgLy8gRGF0YXZpZXcgYXNrIHVzZXIgdG8gYWRkIGRhc2hlcyBmb3Igc3BhY2VzIGFzIHNlYXJjaCB0YXJnZXRcclxuICAgIC8vIFNvIGEgZGFzaCBtYXkgc3RhbmRzIGZvciBhIHJlYWwgZGFzaCBvciBhIHNwYWNlXHJcbiAgICBkdlRhcmdldCA9IGR2VGFyZ2V0LnJlcGxhY2UoXCItXCIsIFwiW1xcXFxzXFxcXC1dXCIpO1xyXG5cclxuICAgIC8vIFRlc3QgdGhpcyBpbiBSZWdleDEwMVxyXG4gICAgLy8gKF58XFxzKVxcKnswLDJ9ZHZUYXJnZXRcXCp7MCwyfSg6OlxccyooPzx2YWx1ZXM+W1xcZFxcLlxcL1xcLVxcdyxAO1xcc10qKSkoXFxzfCQpXHJcbiAgICBsZXQgc3RySGFzaHRhZ1JlZ2V4ID1cclxuICAgICAgICBcIihefFxcXFxzKVxcXFwqezAsMn1cIiArXHJcbiAgICAgICAgZHZUYXJnZXQgK1xyXG4gICAgICAgIFwiXFxcXCp7MCwyfSg6OlxcXFxzKig/PHZhbHVlcz5bXFxcXGRcXFxcLlxcXFwvXFxcXC1cXFxcdyxAO1xcXFxzXSopKShcXHI/XFxufFxccnwkKVwiO1xyXG4gICAgLy8gY29uc29sZS5sb2coc3RySGFzaHRhZ1JlZ2V4KTtcclxuICAgIGxldCBoYXNoVGFnUmVnZXggPSBuZXcgUmVnRXhwKHN0ckhhc2h0YWdSZWdleCwgXCJnbVwiKTtcclxuICAgIGxldCBtYXRjaDtcclxuICAgIGxldCB0YWdNZWFzdXJlID0gMC4wO1xyXG4gICAgbGV0IHRhZ0V4aXN0ID0gZmFsc2U7XHJcbiAgICB3aGlsZSAoKG1hdGNoID0gaGFzaFRhZ1JlZ2V4LmV4ZWMoY29udGVudCkpKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobWF0Y2gpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdHlwZW9mIG1hdGNoLmdyb3VwcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgbWF0Y2guZ3JvdXBzLnZhbHVlcyAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBsZXQgdmFsdWVzID0gbWF0Y2guZ3JvdXBzLnZhbHVlcy50cmltKCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHZhbHVlcyk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHF1ZXJ5LmdldFNlcGFyYXRvcigpKTtcclxuICAgICAgICAgICAgbGV0IHNwbGl0dGVkID0gdmFsdWVzLnNwbGl0KHF1ZXJ5LmdldFNlcGFyYXRvcigpKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc3BsaXR0ZWQpO1xyXG4gICAgICAgICAgICBpZiAoIXNwbGl0dGVkKSBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKHNwbGl0dGVkLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJzaW5nbGUtdmFsdWVcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG9QYXJzZSA9IHNwbGl0dGVkWzBdO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJldFBhcnNlID0gaGVscGVyLnBhcnNlRmxvYXRGcm9tQW55KHRvUGFyc2UpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJldFBhcnNlLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJldFBhcnNlLnR5cGUgPT09IFZhbHVlVHlwZS5UaW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ01lYXN1cmUgPSByZXRQYXJzZS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeS52YWx1ZVR5cGUgPSBWYWx1ZVR5cGUuVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkuYWRkTnVtVGFyZ2V0cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFyZW5kZXJJbmZvLmlnbm9yZVplcm9WYWx1ZVtxdWVyeS5nZXRJZCgpXSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0UGFyc2UudmFsdWUgIT09IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWdNZWFzdXJlICs9IHJldFBhcnNlLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkuYWRkTnVtVGFyZ2V0cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgICAgICAgICAgc3BsaXR0ZWQubGVuZ3RoID4gcXVlcnkuZ2V0QWNjZXNzb3IoKSAmJlxyXG4gICAgICAgICAgICAgICAgcXVlcnkuZ2V0QWNjZXNzb3IoKSA+PSAwXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogaXQncyBub3QgZWZmaWNlbnQgdG8gcmV0cmlldmUgb25lIHZhbHVlIGF0IGEgdGltZSwgZW5oYW5jZSB0aGlzXHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIm11bHRpcGxlLXZhbHVlc1wiKTtcclxuICAgICAgICAgICAgICAgIGxldCB0b1BhcnNlID0gc3BsaXR0ZWRbcXVlcnkuZ2V0QWNjZXNzb3IoKV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJldFBhcnNlID0gaGVscGVyLnBhcnNlRmxvYXRGcm9tQW55KHRvUGFyc2UpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJldFBhcnNlLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJldFBhcnNlLnR5cGUgPT09IFZhbHVlVHlwZS5UaW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ01lYXN1cmUgPSByZXRQYXJzZS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeS52YWx1ZVR5cGUgPSBWYWx1ZVR5cGUuVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkuYWRkTnVtVGFyZ2V0cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ01lYXN1cmUgKz0gcmV0UGFyc2UudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ0V4aXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkuYWRkTnVtVGFyZ2V0cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwic2ltcGxlLXRhZ1wiKTtcclxuICAgICAgICAgICAgdGFnTWVhc3VyZSA9IHRhZ01lYXN1cmUgKyByZW5kZXJJbmZvLmNvbnN0VmFsdWVbcXVlcnkuZ2V0SWQoKV07XHJcbiAgICAgICAgICAgIHRhZ0V4aXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgcXVlcnkuYWRkTnVtVGFyZ2V0cygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgdmFsdWUgPSBudWxsO1xyXG4gICAgaWYgKHRhZ0V4aXN0KSB7XHJcbiAgICAgICAgdmFsdWUgPSB0YWdNZWFzdXJlO1xyXG4gICAgfVxyXG4gICAgbGV0IHhWYWx1ZSA9IHhWYWx1ZU1hcC5nZXQocmVuZGVySW5mby54RGF0YXNldFtxdWVyeS5nZXRJZCgpXSk7XHJcbiAgICBhZGRUb0RhdGFNYXAoZGF0YU1hcCwgeFZhbHVlLCBxdWVyeSwgdmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29sbGVjdERhdGFGcm9tVGFzayhcclxuICAgIGNvbnRlbnQ6IHN0cmluZyxcclxuICAgIHF1ZXJ5OiBRdWVyeSxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBkYXRhTWFwOiBEYXRhTWFwLFxyXG4gICAgeFZhbHVlTWFwOiBYVmFsdWVNYXBcclxuKSB7XHJcbiAgICBsZXQgc3ViVHlwZSA9IHF1ZXJ5LmdldFN1YlR5cGUoKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHN1YlR5cGUpO1xyXG5cclxuICAgIGxldCBzdHJUZXh0UmVnZXggPSBxdWVyeS5nZXRUYXJnZXQoKTtcclxuICAgIGlmIChzdWJUeXBlID09PSBcImFsbFwiKSB7XHJcbiAgICAgICAgc3RyVGV4dFJlZ2V4ID0gXCJcXFxcW1tcXFxcc3hdXFxcXF1cXFxcc1wiICsgc3RyVGV4dFJlZ2V4O1xyXG4gICAgfSBlbHNlIGlmIChzdWJUeXBlID09PSBcImRvbmVcIikge1xyXG4gICAgICAgIHN0clRleHRSZWdleCA9IFwiXFxcXFt4XFxcXF1cXFxcc1wiICsgc3RyVGV4dFJlZ2V4O1xyXG4gICAgfSBlbHNlIGlmIChzdWJUeXBlID09PSBcIm5vdGRvbmVcIikge1xyXG4gICAgICAgIHN0clRleHRSZWdleCA9IFwiXFxcXFtcXFxcc1xcXFxdXFxcXHNcIiArIHN0clRleHRSZWdleDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gYWxsXHJcbiAgICAgICAgc3RyVGV4dFJlZ2V4ID0gXCJcXFxcW1tcXFxcc3hdXFxcXF1cXFxcc1wiICsgc3RyVGV4dFJlZ2V4O1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coc3RyVGV4dFJlZ2V4KTtcclxuXHJcbiAgICBsZXQgdGV4dFJlZ2V4ID0gbmV3IFJlZ0V4cChzdHJUZXh0UmVnZXgsIFwiZ21cIik7XHJcbiAgICBsZXQgbWF0Y2g7XHJcbiAgICBsZXQgdGV4dE1lYXN1cmUgPSAwLjA7XHJcbiAgICBsZXQgdGV4dEV4aXN0ID0gZmFsc2U7XHJcbiAgICB3aGlsZSAoKG1hdGNoID0gdGV4dFJlZ2V4LmV4ZWMoY29udGVudCkpKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobWF0Y2gpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgIXJlbmRlckluZm8uaWdub3JlQXR0YWNoZWRWYWx1ZVtxdWVyeS5nZXRJZCgpXSAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgbWF0Y2guZ3JvdXBzICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIC8vIG1hdGNoWzBdIHdob2xlIG1hdGNoXHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwidmFsdWVkLXRleHRcIik7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWF0Y2guZ3JvdXBzLnZhbHVlICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzZXQgYXMgbnVsbCBmb3IgbWlzc2luZyB2YWx1ZSBpZiBpdCBpcyB2YWx1ZWQtdGFnXHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBwYXJzZUZsb2F0KG1hdGNoLmdyb3Vwcy52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIU51bWJlci5pc05hTih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICFyZW5kZXJJbmZvLmlnbm9yZVplcm9WYWx1ZVtxdWVyeS5nZXRJZCgpXSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSAhPT0gMFxyXG4gICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0TWVhc3VyZSArPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEV4aXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkuYWRkTnVtVGFyZ2V0cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwic2ltcGxlLXRleHRcIik7XHJcbiAgICAgICAgICAgIHRleHRNZWFzdXJlID0gdGV4dE1lYXN1cmUgKyByZW5kZXJJbmZvLmNvbnN0VmFsdWVbcXVlcnkuZ2V0SWQoKV07XHJcbiAgICAgICAgICAgIHRleHRFeGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgIHF1ZXJ5LmFkZE51bVRhcmdldHMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRleHRFeGlzdCkge1xyXG4gICAgICAgIGxldCB4VmFsdWUgPSB4VmFsdWVNYXAuZ2V0KHJlbmRlckluZm8ueERhdGFzZXRbcXVlcnkuZ2V0SWQoKV0pO1xyXG4gICAgICAgIGFkZFRvRGF0YU1hcChkYXRhTWFwLCB4VmFsdWUsIHF1ZXJ5LCB0ZXh0TWVhc3VyZSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQXBwLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCBUcmFja2VyIGZyb20gXCIuL21haW5cIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVHJhY2tlclNldHRpbmdzIHtcclxuICAgIGZvbGRlcjogc3RyaW5nO1xyXG4gICAgZGF0ZUZvcm1hdDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgREVGQVVMVF9TRVRUSU5HUzogVHJhY2tlclNldHRpbmdzID0ge1xyXG4gICAgZm9sZGVyOiBcIi9cIixcclxuICAgIGRhdGVGb3JtYXQ6IFwiWVlZWS1NTS1ERFwiLFxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIFRyYWNrZXJTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XHJcbiAgICBwbHVnaW46IFRyYWNrZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogVHJhY2tlcikge1xyXG4gICAgICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcclxuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICAgIH1cclxuXHJcbiAgICBkaXNwbGF5KCk6IHZvaWQge1xyXG4gICAgICAgIGxldCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xyXG5cclxuICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoXCJEZWZhdWx0IGZvbGRlciBsb2NhdGlvblwiKVxyXG4gICAgICAgICAgICAuc2V0RGVzYyhcclxuICAgICAgICAgICAgICAgIFwiRmlsZXMgaW4gdGhpcyBmb2xkZXIgd2lsbCBiZSBwYXJzZWQgYW5kIHVzZWQgYXMgaW5wdXQgZGF0YSBvZiB0aGUgdHJhY2tlciBwbHVnaW4uXFxuWW91IGNhbiBhbHNvIG92ZXJyaWRlIGl0IHVzaW5nICdmb2xkZXInIGFyZ3VtZW50IGludCB0aGUgdHJhY2tlciBjb2RlYmxvY2suXCJcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAuYWRkVGV4dCgodGV4dCkgPT5cclxuICAgICAgICAgICAgICAgIHRleHRcclxuICAgICAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoXCJGb2xkZXIgUGF0aFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXIgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiRGVmYXVsdCBkYXRlIGZvcm1hdFwiKVxyXG4gICAgICAgICAgICAuc2V0RGVzYyhcclxuICAgICAgICAgICAgICAgIFwiVGhpcyBmb3JtYXQgaXMgdXNlZCB0byBwYXJzZSB0aGUgZGF0ZSBpbiB5b3VyIGRpYXJ5IHRpdGxlLlxcbllvdSBjYW4gYWxzbyBvdmVycmlkZSBpdCB1c2luZyAnZGF0ZS1mb3JtYXQnIGFyZ3VtZW50IGluIHRoZSB0cmFja2VyIGNvZGVibG9jay5cIlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PlxyXG4gICAgICAgICAgICAgICAgdGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihcIllZWVktTU0tRERcIilcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGF0ZUZvcm1hdClcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmRhdGVGb3JtYXQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBBcHAsIENhY2hlZE1ldGFkYXRhLCBQbHVnaW4gfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCwgTWFya2Rvd25WaWV3LCBFZGl0b3IgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgVEZpbGUsIFRGb2xkZXIsIG5vcm1hbGl6ZVBhdGggfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgcmVuZGVyLCByZW5kZXJFcnJvck1lc3NhZ2UgfSBmcm9tIFwiLi9yZW5kZXJpbmdcIjtcclxuaW1wb3J0IHsgZ2V0UmVuZGVySW5mb0Zyb21ZYW1sIH0gZnJvbSBcIi4vcGFyc2luZ1wiO1xyXG5pbXBvcnQge1xyXG4gICAgRGF0YXNldHMsXHJcbiAgICBRdWVyeSxcclxuICAgIFF1ZXJ5VmFsdWVQYWlyLFxyXG4gICAgT3V0cHV0VHlwZSxcclxuICAgIFNlYXJjaFR5cGUsXHJcbiAgICBUYWJsZURhdGEsXHJcbiAgICBSZW5kZXJJbmZvLFxyXG4gICAgWFZhbHVlTWFwLFxyXG4gICAgRGF0YU1hcCxcclxufSBmcm9tIFwiLi9kYXRhXCI7XHJcbmltcG9ydCAqIGFzIGNvbGxlY3RpbmcgZnJvbSBcIi4vY29sbGVjdGluZ1wiO1xyXG5pbXBvcnQge1xyXG4gICAgVHJhY2tlclNldHRpbmdzLFxyXG4gICAgREVGQVVMVF9TRVRUSU5HUyxcclxuICAgIFRyYWNrZXJTZXR0aW5nVGFiLFxyXG59IGZyb20gXCIuL3NldHRpbmdzXCI7XHJcbmltcG9ydCAqIGFzIGhlbHBlciBmcm9tIFwiLi9oZWxwZXJcIjtcclxuaW1wb3J0IHsgTW9tZW50IH0gZnJvbSBcIm1vbWVudFwiO1xyXG4vLyBpbXBvcnQgeyBnZXREYWlseU5vdGVTZXR0aW5ncyB9IGZyb20gXCJvYnNpZGlhbi1kYWlseS1ub3Rlcy1pbnRlcmZhY2VcIjtcclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgICAgIGFwcDogQXBwO1xyXG4gICAgICAgIG1vbWVudDogKCkgPT4gTW9tZW50O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFja2VyIGV4dGVuZHMgUGx1Z2luIHtcclxuICAgIHNldHRpbmdzOiBUcmFja2VyU2V0dGluZ3M7XHJcblxyXG4gICAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwibG9hZGluZyBvYnNpZGlhbi10cmFja2VyIHBsdWdpblwiKTtcclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBUcmFja2VyU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xyXG5cclxuICAgICAgICB0aGlzLnJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IoXHJcbiAgICAgICAgICAgIFwidHJhY2tlclwiLFxyXG4gICAgICAgICAgICB0aGlzLnBvc3Rwcm9jZXNzb3IuYmluZCh0aGlzKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgICAgICAgIGlkOiBcImFkZC1saW5lLWNoYXJ0LXRyYWNrZXJcIixcclxuICAgICAgICAgICAgbmFtZTogXCJBZGQgTGluZSBDaGFydCBUcmFja2VyXCIsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB0aGlzLmFkZENvZGVCbG9jayhPdXRwdXRUeXBlLkxpbmUpLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICAgICAgICBpZDogXCJhZGQtYmFyLWNoYXJ0LXRyYWNrZXJcIixcclxuICAgICAgICAgICAgbmFtZTogXCJBZGQgQmFyIENoYXJ0IFRyYWNrZXJcIixcclxuICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHRoaXMuYWRkQ29kZUJsb2NrKE91dHB1dFR5cGUuQmFyKSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgICAgICAgaWQ6IFwiYWRkLXN1bW1hcnktdHJhY2tlclwiLFxyXG4gICAgICAgICAgICBuYW1lOiBcIkFkZCBTdW1tYXJ5IFRyYWNrZXJcIixcclxuICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHRoaXMuYWRkQ29kZUJsb2NrKE91dHB1dFR5cGUuU3VtbWFyeSksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKFxyXG4gICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgREVGQVVMVF9TRVRUSU5HUyxcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkRGF0YSgpXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcclxuICAgIH1cclxuXHJcbiAgICBvbnVubG9hZCgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcInVubG9hZGluZyBvYnNpZGlhbi10cmFja2VyIHBsdWdpblwiKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRGaWxlc0luRm9sZGVyKFxyXG4gICAgICAgIGZvbGRlcjogVEZvbGRlcixcclxuICAgICAgICBpbmNsdWRlU3ViRm9sZGVyczogYm9vbGVhbiA9IHRydWVcclxuICAgICk6IFRGaWxlW10ge1xyXG4gICAgICAgIGxldCBmaWxlczogVEZpbGVbXSA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpdGVtIG9mIGZvbGRlci5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFRGaWxlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5leHRlbnNpb24gPT09IFwibWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGVzLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFRGb2xkZXIgJiYgaW5jbHVkZVN1YkZvbGRlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWxlcyA9IGZpbGVzLmNvbmNhdCh0aGlzLmdldEZpbGVzSW5Gb2xkZXIoaXRlbSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmlsZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RmlsZXMoZm9sZGVyVG9TZWFyY2g6IHN0cmluZywgaW5jbHVkZVN1YkZvbGRlcnM6IGJvb2xlYW4gPSB0cnVlKSB7XHJcbiAgICAgICAgbGV0IGZpbGVzOiBURmlsZVtdID0gW107XHJcblxyXG4gICAgICAgIGxldCBmb2xkZXIgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoXHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZVBhdGgoZm9sZGVyVG9TZWFyY2gpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoIWZvbGRlciB8fCAhKGZvbGRlciBpbnN0YW5jZW9mIFRGb2xkZXIpKSB7XHJcbiAgICAgICAgICAgIC8vIEZvbGRlciBub3QgZXhpc3RzXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZmlsZXMgPSBmaWxlcy5jb25jYXQodGhpcy5nZXRGaWxlc0luRm9sZGVyKGZvbGRlcikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZpbGVzO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3Rwcm9jZXNzb3IoXHJcbiAgICAgICAgc291cmNlOiBzdHJpbmcsXHJcbiAgICAgICAgZWw6IEhUTUxFbGVtZW50LFxyXG4gICAgICAgIGN0eDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dFxyXG4gICAgKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJwb3N0cHJvY2Vzc1wiKTtcclxuICAgICAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG5cclxuICAgICAgICBsZXQgeWFtbFRleHQgPSBzb3VyY2UudHJpbSgpO1xyXG4gICAgICAgIGxldCByZXRSZW5kZXJJbmZvID0gZ2V0UmVuZGVySW5mb0Zyb21ZYW1sKHlhbWxUZXh0LCB0aGlzKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldFJlbmRlckluZm8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IHJldFJlbmRlckluZm87XHJcbiAgICAgICAgICAgIHJlbmRlckVycm9yTWVzc2FnZShjYW52YXMsIGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGNhbnZhcyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHJlbmRlckluZm8gPSByZXRSZW5kZXJJbmZvIGFzIFJlbmRlckluZm87XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mbyk7XHJcblxyXG4gICAgICAgIC8vIEdldCBmaWxlc1xyXG4gICAgICAgIGxldCBmaWxlczogVEZpbGVbXTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBmaWxlcyA9IHRoaXMuZ2V0RmlsZXMocmVuZGVySW5mby5mb2xkZXIpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IGUubWVzc2FnZTtcclxuICAgICAgICAgICAgcmVuZGVyRXJyb3JNZXNzYWdlKGNhbnZhcywgZXJyb3JNZXNzYWdlKTtcclxuICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoY2FudmFzKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhmaWxlcyk7XHJcblxyXG4gICAgICAgIC8vIGxldCBkYWlseU5vdGVzU2V0dGluZ3MgPSBnZXREYWlseU5vdGVTZXR0aW5ncygpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGRhaWx5Tm90ZXNTZXR0aW5ncyk7XHJcbiAgICAgICAgLy8gSSBhbHdheXMgZ290IFlZWVktTU0tREQgZnJvbSBkYWlseU5vdGVzU2V0dGluZ3MuZm9ybWF0XHJcbiAgICAgICAgLy8gVXNlIG93biBzZXR0aW5ncyBwYW5lbCBmb3Igbm93XHJcblxyXG4gICAgICAgIC8vIENvbGxlY3RpbmcgZGF0YSB0byBkYXRhTWFwIGZpcnN0XHJcbiAgICAgICAgbGV0IG1pbkRhdGUgPSB3aW5kb3cubW9tZW50KFwiXCIpO1xyXG4gICAgICAgIGxldCBtYXhEYXRlID0gd2luZG93Lm1vbWVudChcIlwiKTtcclxuICAgICAgICBsZXQgZmlsZUNvdW50ZXIgPSAwO1xyXG5cclxuICAgICAgICBsZXQgZGF0YU1hcDogRGF0YU1hcCA9IG5ldyBNYXAoKTsgLy8ge3N0ckRhdGU6IFtxdWVyeTogdmFsdWUsIC4uLl19XHJcbiAgICAgICAgLy8gQ29sbGVjdCBkYXRhIGZyb20gZmlsZXMsIGVhY2ggZmlsZSBoYXMgb25lIGRhdGEgcG9pbnQgZm9yIGVhY2ggcXVlcnlcclxuICAgICAgICBjb25zdCBsb29wRmlsZVByb21pc2VzID0gZmlsZXMubWFwKGFzeW5jIChmaWxlKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGZpbGUuYmFzZW5hbWUpO1xyXG4gICAgICAgICAgICAvLyBHZXQgZmlsZUNhY2hlIGFuZCBjb250ZW50XHJcbiAgICAgICAgICAgIGxldCBmaWxlQ2FjaGU6IENhY2hlZE1ldGFkYXRhID0gbnVsbDtcclxuICAgICAgICAgICAgbGV0IG5lZWRGaWxlQ2FjaGUgPSByZW5kZXJJbmZvLnF1ZXJpZXMuc29tZSgocSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IHR5cGUgPSBxLmdldFR5cGUoKTtcclxuICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSBxLmdldFRhcmdldCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT09IFNlYXJjaFR5cGUuRnJvbnRtYXR0ZXIgfHxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlID09PSBTZWFyY2hUeXBlLlRhZyB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT09IFNlYXJjaFR5cGUuV2lraVxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAobmVlZEZpbGVDYWNoZSkge1xyXG4gICAgICAgICAgICAgICAgZmlsZUNhY2hlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBjb250ZW50OiBzdHJpbmcgPSBudWxsO1xyXG4gICAgICAgICAgICBsZXQgbmVlZENvbnRlbnQgPSByZW5kZXJJbmZvLnF1ZXJpZXMuc29tZSgocSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IHR5cGUgPSBxLmdldFR5cGUoKTtcclxuICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSBxLmdldFRhcmdldCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT09IFNlYXJjaFR5cGUuVGFnIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PT0gU2VhcmNoVHlwZS5UZXh0IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PT0gU2VhcmNoVHlwZS5kdkZpZWxkIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PT0gU2VhcmNoVHlwZS5UYXNrXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gU2VhcmNoVHlwZS5GaWxlTWV0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID09PSBcIm51bVdvcmRzXCIgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID09PSBcIm51bUNoYXJzXCIgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID09PSBcIm51bVNlbnRlbmNlc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChuZWVkQ29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIucmVhZChmaWxlLnBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBHZXQgeFZhbHVlIGFuZCBhZGQgaXQgaW50byB4VmFsdWVNYXAgZm9yIGxhdGVyIHVzZVxyXG4gICAgICAgICAgICBsZXQgeFZhbHVlTWFwOiBYVmFsdWVNYXAgPSBuZXcgTWFwKCk7IC8vIHF1ZXJ5SWQ6IHhWYWx1ZSBmb3IgdGhpcyBmaWxlXHJcbiAgICAgICAgICAgIGxldCBza2lwVGhpc0ZpbGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby54RGF0YXNldCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHhEYXRhc2V0SWQgb2YgcmVuZGVySW5mby54RGF0YXNldCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF4VmFsdWVNYXAuaGFzKHhEYXRhc2V0SWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHhEYXRlID0gd2luZG93Lm1vbWVudChcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeERhdGFzZXRJZCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGVmYXVsdCB1c2luZyBkYXRlIGluIGZpbGVuYW1lIGFzIHhWYWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4RGF0ZSA9IGNvbGxlY3RpbmcuZ2V0RGF0ZUZyb21GaWxlbmFtZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJJbmZvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHhEYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeERhdGFzZXRRdWVyeSA9IHJlbmRlckluZm8ucXVlcmllc1t4RGF0YXNldElkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coeERhdGFzZXRRdWVyeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoeERhdGFzZXRRdWVyeS5nZXRUeXBlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU2VhcmNoVHlwZS5Gcm9udG1hdHRlcjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4RGF0ZSA9IGNvbGxlY3RpbmcuZ2V0RGF0ZUZyb21Gcm9udG1hdHRlcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZUNhY2hlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4RGF0YXNldFF1ZXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJJbmZvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU2VhcmNoVHlwZS5UYWc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeERhdGUgPSBjb2xsZWN0aW5nLmdldERhdGVGcm9tVGFnKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4RGF0YXNldFF1ZXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJJbmZvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU2VhcmNoVHlwZS5UZXh0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhEYXRlID0gY29sbGVjdGluZy5nZXREYXRlRnJvbVRleHQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhEYXRhc2V0UXVlcnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckluZm9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBTZWFyY2hUeXBlLmR2RmllbGQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeERhdGUgPSBjb2xsZWN0aW5nLmdldERhdGVGcm9tRHZGaWVsZChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeERhdGFzZXRRdWVyeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySW5mb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFNlYXJjaFR5cGUuRmlsZU1ldGE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeERhdGUgPSBjb2xsZWN0aW5nLmdldERhdGVGcm9tRmlsZU1ldGEoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhEYXRhc2V0UXVlcnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckluZm9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBTZWFyY2hUeXBlLlRhc2s6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeERhdGUgPSBjb2xsZWN0aW5nLmdldERhdGVGcm9tVGFzayhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeERhdGFzZXRRdWVyeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySW5mb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgheERhdGUuaXNWYWxpZCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiSW52YWxpZCB4RGF0ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcFRoaXNGaWxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImZpbGUgXCIgKyBmaWxlLmJhc2VuYW1lICsgXCIgYWNjZXB0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW5kZXJJbmZvLnN0YXJ0RGF0ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHhEYXRlIDwgcmVuZGVySW5mby5zdGFydERhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwVGhpc0ZpbGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW5kZXJJbmZvLmVuZERhdGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4RGF0ZSA+IHJlbmRlckluZm8uZW5kRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBUaGlzRmlsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2tpcFRoaXNGaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhWYWx1ZU1hcC5zZXQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4RGF0YXNldElkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyLmRhdGVUb1N0cih4RGF0ZSwgcmVuZGVySW5mby5kYXRlRm9ybWF0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlQ291bnRlcisrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IG1pbi9tYXggZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUNvdW50ZXIgPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluRGF0ZSA9IHhEYXRlLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhEYXRlID0geERhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4RGF0ZSA8IG1pbkRhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5EYXRlID0geERhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4RGF0ZSA+IG1heERhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhEYXRlID0geERhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc2tpcFRoaXNGaWxlKSByZXR1cm47XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHhWYWx1ZU1hcCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBtaW5EYXRlOiAke21pbkRhdGV9YCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBtYXhEYXRlOiAke21heERhdGV9YCk7XHJcblxyXG4gICAgICAgICAgICAvLyBMb29wIG92ZXIgcXVlcmllc1xyXG4gICAgICAgICAgICBsZXQgeURhdGFzZXRRdWVyaWVzID0gcmVuZGVySW5mby5xdWVyaWVzLmZpbHRlcigocSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHEuZ2V0VHlwZSgpICE9PSBTZWFyY2hUeXBlLlRhYmxlICYmICFxLnVzZWRBc1hEYXRhc2V0O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29uc3QgbG9vcFF1ZXJ5UHJvbWlzZXMgPSB5RGF0YXNldFF1ZXJpZXMubWFwKGFzeW5jIChxdWVyeSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gR2V0IHhWYWx1ZSBmcm9tIGZpbGUgaWYgeERhdGFzZXQgYXNzaWduZWRcclxuICAgICAgICAgICAgICAgIC8vIGlmIChyZW5kZXJJbmZvLnhEYXRhc2V0ICE9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgLy8gbGV0IHhEYXRhc2V0SWQgPSByZW5kZXJJbmZvLnhEYXRhc2V0O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiU2VhcmNoIGZyb250bWF0dGVyIHRhZ3NcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmlsZUNhY2hlICYmIHF1ZXJ5LmdldFR5cGUoKSA9PT0gU2VhcmNoVHlwZS5UYWcpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgZnJvbnRtYXR0ZXIgdGFncywgYWxsb3cgc2ltcGxlIHRhZyBvbmx5XHJcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGluZy5jb2xsZWN0RGF0YUZyb21Gcm9udG1hdHRlclRhZyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZUNhY2hlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySW5mbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU1hcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeFZhbHVlTWFwXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH0gLy8gU2VhcmNoIGZyb250bWF0dGVyIHRhZ3NcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlNlYXJjaCBmcm9udG1hdHRlciBrZXlzXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbGVDYWNoZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5LmdldFR5cGUoKSA9PT0gU2VhcmNoVHlwZS5Gcm9udG1hdHRlciAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5LmdldFRhcmdldCgpICE9PSBcInRhZ3NcIlxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGluZy5jb2xsZWN0RGF0YUZyb21Gcm9udG1hdHRlcktleShcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZUNhY2hlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySW5mbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU1hcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeFZhbHVlTWFwXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH0gLy8gY29uc29sZS5sb2coXCJTZWFyY2ggZnJvbnRtYXR0ZXIga2V5c1wiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlNlYXJjaCB3aWtpIGxpbmtzXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpbGVDYWNoZSAmJiBxdWVyeS5nZXRUeXBlKCkgPT09IFNlYXJjaFR5cGUuV2lraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3RpbmcuY29sbGVjdERhdGFGcm9tV2lraShcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZUNhY2hlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySW5mbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU1hcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeFZhbHVlTWFwXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlNlYXJjaCBpbmxpbmUgdGFnc1wiKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb250ZW50ICYmIHF1ZXJ5LmdldFR5cGUoKSA9PT0gU2VhcmNoVHlwZS5UYWcpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW5nLmNvbGxlY3REYXRhRnJvbUlubGluZVRhZyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckluZm8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFNYXAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhWYWx1ZU1hcFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9IC8vIFNlYXJjaCBpbmxpbmUgdGFnc1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiU2VhcmNoIFRleHRcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudCAmJiBxdWVyeS5nZXRUeXBlKCkgPT09IFNlYXJjaFR5cGUuVGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3RpbmcuY29sbGVjdERhdGFGcm9tVGV4dChcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckluZm8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFNYXAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhWYWx1ZU1hcFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9IC8vIFNlYXJjaCB0ZXh0XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJTZWFyY2ggRmlsZU1ldGFcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAocXVlcnkuZ2V0VHlwZSgpID09PSBTZWFyY2hUeXBlLkZpbGVNZXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGluZy5jb2xsZWN0RGF0YUZyb21GaWxlTWV0YShcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckluZm8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFNYXAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhWYWx1ZU1hcFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9IC8vIFNlYXJjaCBGaWxlTWV0YVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiU2VhcmNoIGR2RmllbGRcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudCAmJiBxdWVyeS5nZXRUeXBlKCkgPT09IFNlYXJjaFR5cGUuZHZGaWVsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3RpbmcuY29sbGVjdERhdGFGcm9tRHZGaWVsZChcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckluZm8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFNYXAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhWYWx1ZU1hcFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9IC8vIHNlYXJjaCBkdkZpZWxkXHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJTZWFyY2ggVGFza1wiKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb250ZW50ICYmIHF1ZXJ5LmdldFR5cGUoKSA9PT0gU2VhcmNoVHlwZS5UYXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGluZy5jb2xsZWN0RGF0YUZyb21UYXNrKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySW5mbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU1hcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeFZhbHVlTWFwXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH0gLy8gc2VhcmNoIFRhc2tcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKGxvb3BRdWVyeVByb21pc2VzKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChsb29wRmlsZVByb21pc2VzKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhkYXRhTWFwKTtcclxuXHJcbiAgICAgICAgLy8gQ29sbGVjdCBkYXRhIGZyb20gYSBmaWxlLCBvbmUgZmlsZSBjb250YWlucyBmdWxsIGRhdGFzZXRcclxuICAgICAgICBsZXQgdGFibGVRdWVyaWVzID0gcmVuZGVySW5mby5xdWVyaWVzLmZpbHRlcihcclxuICAgICAgICAgICAgKHEpID0+IHEuZ2V0VHlwZSgpID09PSBTZWFyY2hUeXBlLlRhYmxlXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyBTZXBhcmF0ZSBxdWVyaWVzIGJ5IHRhYmxlcyBhbmQgeERhdGFzZXRzL3lEYXRhc2V0c1xyXG4gICAgICAgIGxldCB0YWJsZXM6IEFycmF5PFRhYmxlRGF0YT4gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBxdWVyeSBvZiB0YWJsZVF1ZXJpZXMpIHtcclxuICAgICAgICAgICAgbGV0IGZpbGVQYXRoID0gcXVlcnkuZ2V0UGFyZW50VGFyZ2V0KCk7XHJcbiAgICAgICAgICAgIGxldCB0YWJsZUluZGV4ID0gcXVlcnkuZ2V0QWNjZXNzb3IoKTtcclxuICAgICAgICAgICAgbGV0IGlzWCA9IHF1ZXJ5LnVzZWRBc1hEYXRhc2V0O1xyXG5cclxuICAgICAgICAgICAgbGV0IHRhYmxlID0gdGFibGVzLmZpbmQoXHJcbiAgICAgICAgICAgICAgICAodCkgPT4gdC5maWxlUGF0aCA9PT0gZmlsZVBhdGggJiYgdC50YWJsZUluZGV4ID09PSB0YWJsZUluZGV4XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGlmICh0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzWCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLnhEYXRhc2V0ID0gcXVlcnk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLnlEYXRhc2V0cy5wdXNoKHF1ZXJ5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldCB0YWJsZURhdGEgPSBuZXcgVGFibGVEYXRhKGZpbGVQYXRoLCB0YWJsZUluZGV4KTtcclxuICAgICAgICAgICAgICAgIGlmIChpc1gpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZURhdGEueERhdGFzZXQgPSBxdWVyeTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGVEYXRhLnlEYXRhc2V0cy5wdXNoKHF1ZXJ5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRhYmxlcy5wdXNoKHRhYmxlRGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGFibGVzKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgdGFibGVEYXRhIG9mIHRhYmxlcykge1xyXG4gICAgICAgICAgICAvL2V4dHJhY3QgeERhdGFzZXQgZnJvbSBxdWVyeVxyXG4gICAgICAgICAgICBsZXQgeERhdGFzZXRRdWVyeSA9IHRhYmxlRGF0YS54RGF0YXNldDtcclxuICAgICAgICAgICAgbGV0IHlEYXRhc2V0UXVlcmllcyA9IHRhYmxlRGF0YS55RGF0YXNldHM7XHJcbiAgICAgICAgICAgIGxldCBmaWxlUGF0aCA9IHhEYXRhc2V0UXVlcnkuZ2V0UGFyZW50VGFyZ2V0KCk7XHJcbiAgICAgICAgICAgIGxldCB0YWJsZUluZGV4ID0geERhdGFzZXRRdWVyeS5nZXRBY2Nlc3NvcigpO1xyXG5cclxuICAgICAgICAgICAgLy8gR2V0IHRhYmxlIHRleHRcclxuICAgICAgICAgICAgbGV0IHRleHRUYWJsZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIGZpbGVQYXRoID0gZmlsZVBhdGggKyBcIi5tZFwiO1xyXG4gICAgICAgICAgICBsZXQgZmlsZSA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChcclxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZVBhdGgoZmlsZVBhdGgpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGlmIChmaWxlICYmIGZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xyXG4gICAgICAgICAgICAgICAgZmlsZUNvdW50ZXIrKztcclxuICAgICAgICAgICAgICAgIGxldCBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5yZWFkKGZpbGUucGF0aCk7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhjb250ZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBUZXN0IHRoaXMgaW4gUmVnZXgxMDFcclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBub3Qtc28tc3RyaWN0IHRhYmxlIHNlbGVjdG9yXHJcbiAgICAgICAgICAgICAgICAvLyAoKFxccj9cXG4pezJ9fF4pKFteXFxyXFxuXSpcXHxbXlxcclxcbl0qKFxccj9cXG4pPykrKD89KFxccj9cXG4pezJ9fCQpXHJcbiAgICAgICAgICAgICAgICBsZXQgc3RyTURUYWJsZVJlZ2V4ID1cclxuICAgICAgICAgICAgICAgICAgICBcIigoXFxcXHI/XFxcXG4pezJ9fF4pKFteXFxcXHJcXFxcbl0qXFxcXHxbXlxcXFxyXFxcXG5dKihcXFxccj9cXFxcbik/KSsoPz0oXFxcXHI/XFxcXG4pezJ9fCQpXCI7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhzdHJNRFRhYmxlUmVnZXgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IG1kVGFibGVSZWdleCA9IG5ldyBSZWdFeHAoc3RyTURUYWJsZVJlZ2V4LCBcImdtXCIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoO1xyXG4gICAgICAgICAgICAgICAgbGV0IGluZFRhYmxlID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoKG1hdGNoID0gbWRUYWJsZVJlZ2V4LmV4ZWMoY29udGVudCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cobWF0Y2gpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRUYWJsZSA9PT0gdGFibGVJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0VGFibGUgPSBtYXRjaFswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGluZFRhYmxlKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBmaWxlIG5vdCBleGlzdHNcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRleHRUYWJsZSk7XHJcblxyXG4gICAgICAgICAgICBsZXQgdGFibGVMaW5lcyA9IHRleHRUYWJsZS5zcGxpdCgvXFxyP1xcbi8pO1xyXG4gICAgICAgICAgICB0YWJsZUxpbmVzID0gdGFibGVMaW5lcy5maWx0ZXIoKGxpbmUpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsaW5lICE9PSBcIlwiO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbGV0IG51bUNvbHVtbnMgPSAwO1xyXG4gICAgICAgICAgICBsZXQgbnVtRGF0YVJvd3MgPSAwO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0YWJsZUxpbmVzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSBpdCBpcyBhIHZhbGlkIHRhYmxlIGZpcnN0XHJcbiAgICAgICAgICAgIGlmICh0YWJsZUxpbmVzLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBNdXN0IGhhdmUgaGVhZGVyIGFuZCBzZXBhcmF0b3IgbGluZVxyXG4gICAgICAgICAgICAgICAgbGV0IGhlYWRlckxpbmUgPSB0YWJsZUxpbmVzLnNoaWZ0KCkudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyTGluZSA9IGhlbHBlci50cmltQnlDaGFyKGhlYWRlckxpbmUsIFwifFwiKTtcclxuICAgICAgICAgICAgICAgIGxldCBoZWFkZXJTcGxpdHRlZCA9IGhlYWRlckxpbmUuc3BsaXQoXCJ8XCIpO1xyXG4gICAgICAgICAgICAgICAgbnVtQ29sdW1ucyA9IGhlYWRlclNwbGl0dGVkLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgc2VwTGluZSA9IHRhYmxlTGluZXMuc2hpZnQoKS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICBzZXBMaW5lID0gaGVscGVyLnRyaW1CeUNoYXIoc2VwTGluZSwgXCJ8XCIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNwZXBMaW5lU3BsaXR0ZWQgPSBzZXBMaW5lLnNwbGl0KFwifFwiKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGNvbCBvZiBzcGVwTGluZVNwbGl0dGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb2wuaW5jbHVkZXMoXCItXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOyAvLyBOb3QgYSB2YWxpZCBzZXBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbnVtRGF0YVJvd3MgPSB0YWJsZUxpbmVzLmxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG51bURhdGFSb3dzID09IDApIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgLy8gZ2V0IHggZGF0YVxyXG4gICAgICAgICAgICBsZXQgY29sdW1uWERhdGFzZXQgPSB4RGF0YXNldFF1ZXJ5LmdldEFjY2Vzc29yKDEpO1xyXG4gICAgICAgICAgICBpZiAoY29sdW1uWERhdGFzZXQgPj0gbnVtQ29sdW1ucykgY29udGludWU7XHJcbiAgICAgICAgICAgIGxldCB4VmFsdWVzID0gW107XHJcblxyXG4gICAgICAgICAgICBsZXQgaW5kTGluZSA9IDA7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHRhYmxlTGluZSBvZiB0YWJsZUxpbmVzKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGF0YVJvdyA9IGhlbHBlci50cmltQnlDaGFyKHRhYmxlTGluZS50cmltKCksIFwifFwiKTtcclxuICAgICAgICAgICAgICAgIGxldCBkYXRhUm93U3BsaXR0ZWQgPSBkYXRhUm93LnNwbGl0KFwifFwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb2x1bW5YRGF0YXNldCA8IGRhdGFSb3dTcGxpdHRlZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IGRhdGFSb3dTcGxpdHRlZFtjb2x1bW5YRGF0YXNldF0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkYXRlID0gaGVscGVyLnN0clRvRGF0ZShkYXRhLCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0ZS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeFZhbHVlcy5wdXNoKGRhdGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtaW5EYXRlLmlzVmFsaWQoKSAmJiAhbWF4RGF0ZS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbkRhdGUgPSBkYXRlLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhEYXRlID0gZGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGUgPCBtaW5EYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluRGF0ZSA9IGRhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRlID4gbWF4RGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heERhdGUgPSBkYXRlLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4VmFsdWVzLnB1c2gobnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB4VmFsdWVzLnB1c2gobnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpbmRMaW5lKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coeFZhbHVlcyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoeFZhbHVlcy5ldmVyeSgodikgPT4gdiA9PT0gbnVsbCkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIk5vIHZhbGlkIFggdmFsdWUgZm91bmRcIjtcclxuICAgICAgICAgICAgICAgIHJlbmRlckVycm9yTWVzc2FnZShjYW52YXMsIGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChjYW52YXMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBnZXQgeSBkYXRhXHJcbiAgICAgICAgICAgIGZvciAobGV0IHlEYXRhc2V0UXVlcnkgb2YgeURhdGFzZXRRdWVyaWVzKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29sdW1uT2ZJbnRlcmVzdCA9IHlEYXRhc2V0UXVlcnkuZ2V0QWNjZXNzb3IoMSk7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgY29sdW1uT2ZJbnRlcmVzdDogJHtjb2x1bW5PZkludGVyZXN0fSwgbnVtQ29sdW1uczogJHtudW1Db2x1bW5zfWApO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbk9mSW50ZXJlc3QgPj0gbnVtQ29sdW1ucykgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGluZExpbmUgPSAwO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdGFibGVMaW5lIG9mIHRhYmxlTGluZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YVJvdyA9IGhlbHBlci50cmltQnlDaGFyKHRhYmxlTGluZS50cmltKCksIFwifFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YVJvd1NwbGl0dGVkID0gZGF0YVJvdy5zcGxpdChcInxcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbk9mSW50ZXJlc3QgPCBkYXRhUm93U3BsaXR0ZWQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhID0gZGF0YVJvd1NwbGl0dGVkW2NvbHVtbk9mSW50ZXJlc3RdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNwbGl0dGVkID0gZGF0YS5zcGxpdCh5RGF0YXNldFF1ZXJ5LmdldFNlcGFyYXRvcigpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzcGxpdHRlZCkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcGxpdHRlZC5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHBhcnNlRmxvYXQoc3BsaXR0ZWRbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE51bWJlci5pc051bWJlcih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZExpbmUgPCB4VmFsdWVzLmxlbmd0aCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4VmFsdWVzW2luZExpbmVdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxlY3RpbmcuYWRkVG9EYXRhTWFwKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU1hcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlci5kYXRlVG9TdHIoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeFZhbHVlc1tpbmRMaW5lXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmRhdGVGb3JtYXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5RGF0YXNldFF1ZXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGxpdHRlZC5sZW5ndGggPiB5RGF0YXNldFF1ZXJ5LmdldEFjY2Vzc29yKDIpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5RGF0YXNldFF1ZXJ5LmdldEFjY2Vzc29yKDIpID49IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNwbGl0dGVkUGFydCA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BsaXR0ZWRbeURhdGFzZXRRdWVyeS5nZXRBY2Nlc3NvcigyKV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUZsb2F0KHNwbGl0dGVkUGFydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kTGluZSA8IHhWYWx1ZXMubGVuZ3RoICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhWYWx1ZXNbaW5kTGluZV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGluZy5hZGRUb0RhdGFNYXAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhTWFwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyLmRhdGVUb1N0cihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4VmFsdWVzW2luZExpbmVdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckluZm8uZGF0ZUZvcm1hdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlEYXRhc2V0UXVlcnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaW5kTGluZSsrO1xyXG4gICAgICAgICAgICAgICAgfSAvLyBMb29wIG92ZXIgdGFibGVMaW5lc1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZmlsZUNvdW50ZXIgPT09IDApIHtcclxuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9XHJcbiAgICAgICAgICAgICAgICBcIk5vIG5vdGVzIGZvdW5kIHVuZGVyIHRoZSBnaXZlbiBzZWFyY2ggY29uZGl0aW9uXCI7XHJcbiAgICAgICAgICAgIHJlbmRlckVycm9yTWVzc2FnZShjYW52YXMsIGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGNhbnZhcyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobWluRGF0ZSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobWF4RGF0ZSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coZGF0YU1hcCk7XHJcblxyXG4gICAgICAgIC8vIENoZWNrIGRhdGUgcmFuZ2VcclxuICAgICAgICBpZiAoIW1pbkRhdGUuaXNWYWxpZCgpIHx8ICFtYXhEYXRlLmlzVmFsaWQoKSkge1xyXG4gICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGRhdGUgcmFuZ2VcIjtcclxuICAgICAgICAgICAgcmVuZGVyRXJyb3JNZXNzYWdlKGNhbnZhcywgZXJyb3JNZXNzYWdlKTtcclxuICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoY2FudmFzKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVuZGVySW5mby5zdGFydERhdGUgPT09IG51bGwgJiYgcmVuZGVySW5mby5lbmREYXRlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIE5vIGRhdGUgYXJndW1lbnRzXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uc3RhcnREYXRlID0gbWluRGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmVuZERhdGUgPSBtYXhEYXRlLmNsb25lKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICAgICAgcmVuZGVySW5mby5zdGFydERhdGUgIT09IG51bGwgJiZcclxuICAgICAgICAgICAgcmVuZGVySW5mby5lbmREYXRlID09PSBudWxsXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmIChyZW5kZXJJbmZvLnN0YXJ0RGF0ZSA8IG1heERhdGUpIHtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8uZW5kRGF0ZSA9IG1heERhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgZGF0ZSByYW5nZVwiO1xyXG4gICAgICAgICAgICAgICAgcmVuZGVyRXJyb3JNZXNzYWdlKGNhbnZhcywgZXJyb3JNZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGNhbnZhcyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmVuZERhdGUgIT09IG51bGwgJiZcclxuICAgICAgICAgICAgcmVuZGVySW5mby5zdGFydERhdGUgPT09IG51bGxcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgaWYgKHJlbmRlckluZm8uZW5kRGF0ZSA+IG1pbkRhdGUpIHtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8uc3RhcnREYXRlID0gbWluRGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBkYXRlIHJhbmdlXCI7XHJcbiAgICAgICAgICAgICAgICByZW5kZXJFcnJvck1lc3NhZ2UoY2FudmFzLCBlcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoY2FudmFzKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHN0YXJ0RGF0ZSBhbmQgZW5kRGF0ZSBhcmUgdmFsaWRcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgKHJlbmRlckluZm8uc3RhcnREYXRlIDwgbWluRGF0ZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckluZm8uZW5kRGF0ZSA8IG1pbkRhdGUpIHx8XHJcbiAgICAgICAgICAgICAgICAocmVuZGVySW5mby5zdGFydERhdGUgPiBtYXhEYXRlICYmIHJlbmRlckluZm8uZW5kRGF0ZSA+IG1heERhdGUpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBkYXRlIHJhbmdlXCI7XHJcbiAgICAgICAgICAgICAgICByZW5kZXJFcnJvck1lc3NhZ2UoY2FudmFzLCBlcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoY2FudmFzKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLnN0YXJ0RGF0ZSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby5lbmREYXRlKTtcclxuXHJcbiAgICAgICAgLy8gUmVzaGFwZSBkYXRhIGZvciByZW5kZXJpbmdcclxuICAgICAgICBsZXQgZGF0YXNldHMgPSBuZXcgRGF0YXNldHMocmVuZGVySW5mby5zdGFydERhdGUsIHJlbmRlckluZm8uZW5kRGF0ZSk7XHJcbiAgICAgICAgZm9yIChsZXQgcXVlcnkgb2YgcmVuZGVySW5mby5xdWVyaWVzKSB7XHJcbiAgICAgICAgICAgIC8vIFdlIHN0aWxsIGNyZWF0ZSBhIGRhdGFzZXQgZm9yIHhEYXRhc2V0LFxyXG4gICAgICAgICAgICAvLyB0byBrZWVwIHRoZSBzZXF1ZW5jZSBhbmQgb3JkZXIgb2YgdGFyZ2V0c1xyXG4gICAgICAgICAgICBsZXQgZGF0YXNldCA9IGRhdGFzZXRzLmNyZWF0ZURhdGFzZXQocXVlcnksIHJlbmRlckluZm8pO1xyXG4gICAgICAgICAgICAvLyBBZGQgbnVtYmVyIG9mIHRhcmdldHMgdG8gdGhlIGRhdGFzZXRcclxuICAgICAgICAgICAgLy8gTnVtYmVyIG9mIHRhcmdldHMgaGFzIGJlZW4gYWNjdW11bGF0ZWQgd2hpbGUgY29sbGVjdGluZyBkYXRhXHJcbiAgICAgICAgICAgIGRhdGFzZXQuYWRkTnVtVGFyZ2V0cyhxdWVyeS5nZXROdW1UYXJnZXRzKCkpO1xyXG4gICAgICAgICAgICBmb3IgKFxyXG4gICAgICAgICAgICAgICAgbGV0IGN1ckRhdGUgPSByZW5kZXJJbmZvLnN0YXJ0RGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgY3VyRGF0ZSA8PSByZW5kZXJJbmZvLmVuZERhdGU7XHJcbiAgICAgICAgICAgICAgICBjdXJEYXRlLmFkZCgxLCBcImRheXNcIilcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhjdXJEYXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBkYXRhTWFwIC0tPiB7ZGF0ZTogW3F1ZXJ5OiB2YWx1ZSwgLi4uXX1cclxuICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICBkYXRhTWFwLmhhcyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyLmRhdGVUb1N0cihjdXJEYXRlLCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpXHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHF1ZXJ5VmFsdWVQYWlycyA9IGRhdGFNYXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldChoZWxwZXIuZGF0ZVRvU3RyKGN1ckRhdGUsIHJlbmRlckluZm8uZGF0ZUZvcm1hdCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHBhaXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYWlyLnF1ZXJ5LmVxdWFsVG8ocXVlcnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocXVlcnlWYWx1ZVBhaXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWVyZ2UgdmFsdWVzIG9mIHRoZSBzYW1lIGRheSBzYW1lIHF1ZXJ5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5kUGFpciA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRQYWlyIDwgcXVlcnlWYWx1ZVBhaXJzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZFBhaXIrK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb2xsZWN0ZWQgPSBxdWVyeVZhbHVlUGFpcnNbaW5kUGFpcl0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTnVtYmVyLmlzTnVtYmVyKGNvbGxlY3RlZCkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhTnVtYmVyLmlzTmFOKGNvbGxlY3RlZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGNvbGxlY3RlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSBjb2xsZWN0ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGhhc1ZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFzZXQuc2V0VmFsdWUoY3VyRGF0ZSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlbmRlckluZm8uZGF0YXNldHMgPSBkYXRhc2V0cztcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLmRhdGFzZXRzKTtcclxuXHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IHJlbmRlcihjYW52YXMsIHJlbmRlckluZm8pO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSByZXN1bHQ7XHJcbiAgICAgICAgICAgIHJlbmRlckVycm9yTWVzc2FnZShjYW52YXMsIGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGNhbnZhcyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVsLmFwcGVuZENoaWxkKGNhbnZhcyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RWRpdG9yKCk6IEVkaXRvciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldykuZWRpdG9yO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZENvZGVCbG9jayhvdXRwdXRUeXBlOiBPdXRwdXRUeXBlKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgY3VycmVudFZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZi52aWV3O1xyXG5cclxuICAgICAgICBpZiAoIShjdXJyZW50VmlldyBpbnN0YW5jZW9mIE1hcmtkb3duVmlldykpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGNvZGVibG9ja1RvSW5zZXJ0ID0gXCJcIjtcclxuICAgICAgICBzd2l0Y2ggKG91dHB1dFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBPdXRwdXRUeXBlLkxpbmU6XHJcbiAgICAgICAgICAgICAgICBjb2RlYmxvY2tUb0luc2VydCA9IGBcXGBcXGBcXGAgdHJhY2tlclxyXG5zZWFyY2hUeXBlOiB0YWdcclxuc2VhcmNoVGFyZ2V0OiB0YWdOYW1lXHJcbmZvbGRlcjogL1xyXG5zdGFydERhdGU6XHJcbmVuZERhdGU6XHJcbmxpbmU6XHJcbiAgICB0aXRsZTogXCJMaW5lIENoYXJ0XCJcclxuICAgIHhBeGlzTGFiZWw6IERhdGVcclxuICAgIHlBeGlzTGFiZWw6IFZhbHVlXHJcblxcYFxcYFxcYGA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBPdXRwdXRUeXBlLkJhcjpcclxuICAgICAgICAgICAgICAgIGNvZGVibG9ja1RvSW5zZXJ0ID0gYFxcYFxcYFxcYCB0cmFja2VyXHJcbnNlYXJjaFR5cGU6IHRhZ1xyXG5zZWFyY2hUYXJnZXQ6IHRhZ05hbWVcclxuZm9sZGVyOiAvXHJcbnN0YXJ0RGF0ZTpcclxuZW5kRGF0ZTpcclxuYmFyOlxyXG4gICAgdGl0bGU6IFwiQmFyIENoYXJ0XCJcclxuICAgIHhBeGlzTGFiZWw6IERhdGVcclxuICAgIHlBeGlzTGFiZWw6IFZhbHVlXHJcblxcYFxcYFxcYGA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBPdXRwdXRUeXBlLlN1bW1hcnk6XHJcbiAgICAgICAgICAgICAgICBjb2RlYmxvY2tUb0luc2VydCA9IGBcXGBcXGBcXGAgdHJhY2tlclxyXG5zZWFyY2hUeXBlOiB0YWdcclxuc2VhcmNoVGFyZ2V0OiB0YWdOYW1lXHJcbmZvbGRlcjogL1xyXG5zdGFydERhdGU6XHJcbmVuZERhdGU6XHJcbnN1bW1hcnk6XHJcbiAgICB0ZW1wbGF0ZTogXCJBdmVyYWdlIHZhbHVlIG9mIHRhZ05hbWUgaXMge3thdmVyYWdlfX1cIlxyXG4gICAgc3R5bGU6IFwiY29sb3I6d2hpdGU7XCJcclxuXFxgXFxgXFxgYDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29kZWJsb2NrVG9JbnNlcnQgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgbGV0IHRleHRJbnNlcnRlZCA9IHRoaXMuaW5zZXJ0VG9OZXh0TGluZShjb2RlYmxvY2tUb0luc2VydCk7XHJcbiAgICAgICAgICAgIGlmICghdGV4dEluc2VydGVkKSB7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaW5zZXJ0VG9OZXh0TGluZSh0ZXh0OiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICBsZXQgZWRpdG9yID0gdGhpcy5nZXRFZGl0b3IoKTtcclxuXHJcbiAgICAgICAgaWYgKGVkaXRvcikge1xyXG4gICAgICAgICAgICBsZXQgY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpO1xyXG4gICAgICAgICAgICBsZXQgbGluZU51bWJlciA9IGN1cnNvci5saW5lO1xyXG4gICAgICAgICAgICBsZXQgbGluZSA9IGVkaXRvci5nZXRMaW5lKGxpbmVOdW1iZXIpO1xyXG5cclxuICAgICAgICAgICAgY3Vyc29yLmNoID0gbGluZS5sZW5ndGg7XHJcbiAgICAgICAgICAgIGVkaXRvci5zZXRTZWxlY3Rpb24oY3Vyc29yKTtcclxuICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24oXCJcXG5cIiArIHRleHQpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJhIiwiYiIsIk5hTiIsImYiLCJkZWx0YSIsImNvbXBhcmUiLCJsZWZ0IiwieCIsImxvIiwiaGkiLCJsZW5ndGgiLCJtaWQiLCJkIiwiYXNjZW5kaW5nIiwiYXNjZW5kaW5nQ29tcGFyYXRvciIsImNlbnRlciIsImkiLCJyaWdodCIsImJpc2VjdFJpZ2h0IiwiYmlzZWN0b3IiLCJlMTAiLCJNYXRoIiwic3FydCIsImU1IiwiZTIiLCJ0aWNrSW5jcmVtZW50Iiwic3RhcnQiLCJzdG9wIiwiY291bnQiLCJtYXgiLCJwb3dlciIsImZsb29yIiwibG9nIiwiTE4xMCIsImVycm9yIiwicG93IiwidGlja1N0ZXAiLCJzdGVwMCIsImFicyIsInN0ZXAxIiwidmFsdWVzIiwidmFsdWVvZiIsInVuZGVmaW5lZCIsImluZGV4IiwibWluIiwicXVpY2tzZWxlY3QiLCJhcnJheSIsImsiLCJuIiwibSIsInoiLCJzIiwiZXhwIiwic2QiLCJ0IiwiaiIsInN3YXAiLCJxdWFudGlsZSIsInAiLCJGbG9hdDY0QXJyYXkiLCJmcm9tIiwibnVtYmVycyIsImkwIiwidmFsdWUwIiwic3ViYXJyYXkiLCJhcmd1bWVudHMiLCJjZWlsIiwicmFuZ2UiLCJBcnJheSIsInN1bSIsInNsaWNlIiwicHJvdG90eXBlIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJ5IiwibnVtYmVyIiwic2NhbGUiLCJvZmZzZXQiLCJiYW5kd2lkdGgiLCJyb3VuZCIsImVudGVyaW5nIiwidGhpcyIsIl9fYXhpcyIsImF4aXMiLCJvcmllbnQiLCJ0aWNrQXJndW1lbnRzIiwidGlja1ZhbHVlcyIsInRpY2tGb3JtYXQiLCJ0aWNrU2l6ZUlubmVyIiwidGlja1NpemVPdXRlciIsInRpY2tQYWRkaW5nIiwid2luZG93IiwiZGV2aWNlUGl4ZWxSYXRpbyIsInRyYW5zZm9ybSIsImNvbnRleHQiLCJ0aWNrcyIsImRvbWFpbiIsImZvcm1hdCIsImlkZW50aXR5Iiwic3BhY2luZyIsInJhbmdlMCIsInJhbmdlMSIsInBvc2l0aW9uIiwiY29weSIsInNlbGVjdGlvbiIsInBhdGgiLCJzZWxlY3RBbGwiLCJkYXRhIiwidGljayIsIm9yZGVyIiwidGlja0V4aXQiLCJleGl0IiwidGlja0VudGVyIiwiZW50ZXIiLCJhcHBlbmQiLCJhdHRyIiwibGluZSIsInNlbGVjdCIsInRleHQiLCJtZXJnZSIsImluc2VydCIsInRyYW5zaXRpb24iLCJpc0Zpbml0ZSIsImdldEF0dHJpYnV0ZSIsInBhcmVudE5vZGUiLCJyZW1vdmUiLCJmaWx0ZXIiLCJlYWNoIiwiXyIsImNhbGwiLCJ0aWNrU2l6ZSIsImF4aXNCb3R0b20iLCJheGlzTGVmdCIsIm5vb3AiLCJkaXNwYXRjaCIsInRlc3QiLCJFcnJvciIsIkRpc3BhdGNoIiwicGFyc2VUeXBlbmFtZXMiLCJ0eXBlbmFtZXMiLCJ0eXBlcyIsInRyaW0iLCJzcGxpdCIsIm1hcCIsIm5hbWUiLCJpbmRleE9mIiwiaGFzT3duUHJvcGVydHkiLCJ0eXBlIiwiZ2V0IiwiYyIsInNldCIsImNhbGxiYWNrIiwiY29uY2F0IiwicHVzaCIsImNvbnN0cnVjdG9yIiwib24iLCJ0eXBlbmFtZSIsIlQiLCJ0aGF0IiwiYXJncyIsInhodG1sIiwic3ZnIiwieGxpbmsiLCJ4bWwiLCJ4bWxucyIsInByZWZpeCIsIm5hbWVzcGFjZXMiLCJzcGFjZSIsImxvY2FsIiwiY3JlYXRvckluaGVyaXQiLCJkb2N1bWVudCIsIm93bmVyRG9jdW1lbnQiLCJ1cmkiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRvckZpeGVkIiwiZnVsbG5hbWUiLCJuYW1lc3BhY2UiLCJub25lIiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwiZW1wdHkiLCJxdWVyeVNlbGVjdG9yQWxsIiwibWF0Y2hlcyIsImNoaWxkTWF0Y2hlciIsIm5vZGUiLCJmaW5kIiwiY2hpbGRGaXJzdCIsImZpcnN0RWxlbWVudENoaWxkIiwiY2hpbGRyZW4iLCJ1cGRhdGUiLCJFbnRlck5vZGUiLCJwYXJlbnQiLCJkYXR1bSIsIl9uZXh0IiwiX3BhcmVudCIsIl9fZGF0YV9fIiwiYmluZEluZGV4IiwiZ3JvdXAiLCJncm91cExlbmd0aCIsImRhdGFMZW5ndGgiLCJiaW5kS2V5Iiwia2V5Iiwia2V5VmFsdWUiLCJub2RlQnlLZXlWYWx1ZSIsIk1hcCIsImtleVZhbHVlcyIsImhhcyIsImRlbGV0ZSIsImF0dHJSZW1vdmUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJhdHRyUmVtb3ZlTlMiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsImF0dHJDb25zdGFudCIsInNldEF0dHJpYnV0ZSIsImF0dHJDb25zdGFudE5TIiwic2V0QXR0cmlidXRlTlMiLCJhdHRyRnVuY3Rpb24iLCJ2IiwiYXR0ckZ1bmN0aW9uTlMiLCJkZWZhdWx0VmlldyIsInN0eWxlUmVtb3ZlIiwic3R5bGUiLCJyZW1vdmVQcm9wZXJ0eSIsInN0eWxlQ29uc3RhbnQiLCJwcmlvcml0eSIsInNldFByb3BlcnR5Iiwic3R5bGVGdW5jdGlvbiIsInN0eWxlVmFsdWUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInByb3BlcnR5UmVtb3ZlIiwicHJvcGVydHlDb25zdGFudCIsInByb3BlcnR5RnVuY3Rpb24iLCJjbGFzc0FycmF5Iiwic3RyaW5nIiwiY2xhc3NMaXN0IiwiQ2xhc3NMaXN0IiwiX25vZGUiLCJfbmFtZXMiLCJjbGFzc2VkQWRkIiwibmFtZXMiLCJsaXN0IiwiYWRkIiwiY2xhc3NlZFJlbW92ZSIsImNsYXNzZWRUcnVlIiwiY2xhc3NlZEZhbHNlIiwiY2xhc3NlZEZ1bmN0aW9uIiwidGV4dFJlbW92ZSIsInRleHRDb250ZW50IiwidGV4dENvbnN0YW50IiwidGV4dEZ1bmN0aW9uIiwiaHRtbFJlbW92ZSIsImlubmVySFRNTCIsImh0bWxDb25zdGFudCIsImh0bWxGdW5jdGlvbiIsInJhaXNlIiwibmV4dFNpYmxpbmciLCJhcHBlbmRDaGlsZCIsImxvd2VyIiwicHJldmlvdXNTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RDaGlsZCIsImNvbnN0YW50TnVsbCIsInJlbW92ZUNoaWxkIiwic2VsZWN0aW9uX2Nsb25lU2hhbGxvdyIsImNsb25lIiwiY2xvbmVOb2RlIiwic2VsZWN0aW9uX2Nsb25lRGVlcCIsIm9uUmVtb3ZlIiwiX19vbiIsIm8iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibGlzdGVuZXIiLCJvcHRpb25zIiwib25BZGQiLCJldmVudCIsImNvbnRleHRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJkaXNwYXRjaEV2ZW50IiwicGFyYW1zIiwiQ3VzdG9tRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwiZGlzcGF0Y2hDb25zdGFudCIsImRpc3BhdGNoRnVuY3Rpb24iLCJjaGlsZCIsImpvaW4iLCJzcGxpY2UiLCJjb250YWlucyIsInJvb3QiLCJTZWxlY3Rpb24iLCJncm91cHMiLCJwYXJlbnRzIiwiX2dyb3VwcyIsIl9wYXJlbnRzIiwiZmFjdG9yeSIsImV4dGVuZCIsImRlZmluaXRpb24iLCJPYmplY3QiLCJjcmVhdGUiLCJDb2xvciIsInN1Ymdyb3VwcyIsInN1Ym5vZGUiLCJzdWJncm91cCIsImFycmF5QWxsIiwic2VsZWN0b3JBbGwiLCJzZWxlY3RDaGlsZCIsIm1hdGNoIiwiY2hpbGRGaW5kIiwic2VsZWN0Q2hpbGRyZW4iLCJjaGlsZHJlbkZpbHRlciIsIm1hdGNoZXIiLCJiaW5kIiwiY29uc3RhbnQiLCJlbnRlckdyb3VwIiwidXBkYXRlR3JvdXAiLCJleGl0R3JvdXAiLCJwcmV2aW91cyIsImkxIiwiX2VudGVyIiwiX2V4aXQiLCJzcGFyc2UiLCJvbmVudGVyIiwib251cGRhdGUiLCJvbmV4aXQiLCJncm91cHMwIiwiZ3JvdXBzMSIsIm0wIiwibTEiLCJtZXJnZXMiLCJncm91cDAiLCJncm91cDEiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsInNvcnQiLCJjb21wYXJlTm9kZSIsInNvcnRncm91cHMiLCJzb3J0Z3JvdXAiLCJub2RlcyIsInNpemUiLCJnZXRBdHRyaWJ1dGVOUyIsInByb3BlcnR5IiwiY2xhc3NlZCIsImh0bWwiLCJjcmVhdG9yIiwiYmVmb3JlIiwiZGVlcCIsIltvYmplY3QgT2JqZWN0XSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiYnJpZ2h0ZXIiLCJyZUkiLCJyZU4iLCJyZVAiLCJyZUhleCIsInJlUmdiSW50ZWdlciIsIlJlZ0V4cCIsInJlUmdiUGVyY2VudCIsInJlUmdiYUludGVnZXIiLCJyZVJnYmFQZXJjZW50IiwicmVIc2xQZXJjZW50IiwicmVIc2xhUGVyY2VudCIsIm5hbWVkIiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWUiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImdyZXkiLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJjb2xvcl9mb3JtYXRIZXgiLCJyZ2IiLCJmb3JtYXRIZXgiLCJjb2xvcl9mb3JtYXRSZ2IiLCJmb3JtYXRSZ2IiLCJjb2xvciIsImwiLCJ0b0xvd2VyQ2FzZSIsImV4ZWMiLCJwYXJzZUludCIsInJnYm4iLCJSZ2IiLCJyZ2JhIiwiaHNsYSIsInIiLCJnIiwicmdiQ29udmVydCIsIm9wYWNpdHkiLCJyZ2JfZm9ybWF0SGV4IiwiaGV4IiwicmdiX2Zvcm1hdFJnYiIsImlzTmFOIiwidG9TdHJpbmciLCJoIiwiSHNsIiwiaHNsQ29udmVydCIsImhzbDJyZ2IiLCJtMiIsImRlZmluZSIsImNoYW5uZWxzIiwiYXNzaWduIiwiZGlzcGxheWFibGUiLCJmb3JtYXRIc2wiLCJkYXJrZXIiLCJyYWRpYW5zIiwiUEkiLCJkZWdyZWVzIiwidDAiLCJ0MSIsInQyIiwibGFiQ29udmVydCIsIkxhYiIsIkhjbCIsImhjbDJsYWIiLCJyZ2IybHJnYiIsInh5ejJsYWIiLCJsYWIiLCJsYWIyeHl6IiwibHJnYjJyZ2IiLCJoY2xDb252ZXJ0IiwiYXRhbjIiLCJjb3MiLCJzaW4iLCJ0YXNrSGVhZCIsInRhc2tUYWlsIiwiZnJhbWUiLCJ0aW1lb3V0IiwiaW50ZXJ2YWwiLCJjbG9ja0xhc3QiLCJjbG9ja05vdyIsImNsb2NrU2tldyIsImNsb2NrIiwicGVyZm9ybWFuY2UiLCJub3ciLCJEYXRlIiwic2V0RnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRUaW1lb3V0IiwiY2xlYXJOb3ciLCJUaW1lciIsIl9jYWxsIiwiX3RpbWUiLCJ0aW1lciIsImRlbGF5IiwidGltZSIsInJlc3RhcnQiLCJ3YWtlIiwidGltZXJGbHVzaCIsIkluZmluaXR5Iiwic2xlZXAiLCJuYXAiLCJwb2tlIiwiY2xlYXJUaW1lb3V0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiZWxhcHNlZCIsIlR5cGVFcnJvciIsImVtcHR5T24iLCJlbXB0eVR3ZWVuIiwiaWQiLCJ0aW1pbmciLCJzY2hlZHVsZXMiLCJfX3RyYW5zaXRpb24iLCJzZWxmIiwidHdlZW4iLCJzY2hlZHVsZSIsInN0YXRlIiwiZHVyYXRpb24iLCJlYXNlIiwiaW5pdCIsImdhbW1hIiwibm9nYW1tYSIsImV4cG9uZW50aWFsIiwibGluZWFyIiwicmdiR2FtbWEiLCJlbmQiLCJjb2xvclJnYiIsInJlQSIsInJlQiIsInNvdXJjZSIsImFtIiwiYm0iLCJicyIsImJpIiwibGFzdEluZGV4IiwicSIsIm9uZSIsInplcm8iLCJzdmdOb2RlIiwicm90YXRlIiwic2tld1giLCJzY2FsZVgiLCJzY2FsZVkiLCJhdGFuIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm0iLCJwYXJzZSIsInB4Q29tbWEiLCJweFBhcmVuIiwiZGVnUGFyZW4iLCJwb3AiLCJ4YSIsInlhIiwieGIiLCJ5YiIsInRyYW5zbGF0ZSIsImludGVycG9sYXRlVHJhbnNmb3JtQ3NzIiwiRE9NTWF0cml4IiwiV2ViS2l0Q1NTTWF0cml4IiwiaXNJZGVudGl0eSIsImRlY29tcG9zZSIsImludGVycG9sYXRlVHJhbnNmb3JtU3ZnIiwiYmFzZVZhbCIsImNvbnNvbGlkYXRlIiwibWF0cml4IiwidHdlZW5SZW1vdmUiLCJ0d2VlbjAiLCJ0d2VlbjEiLCJ0d2VlbkZ1bmN0aW9uIiwidHdlZW5WYWx1ZSIsIl9pZCIsImludGVycG9sYXRlTnVtYmVyIiwiaW50ZXJwb2xhdGVSZ2IiLCJpbnRlcnBvbGF0ZVN0cmluZyIsImludGVycG9sYXRlIiwidmFsdWUxIiwic3RyaW5nMDAiLCJpbnRlcnBvbGF0ZTAiLCJzdHJpbmcxIiwic3RyaW5nMCIsInN0cmluZzEwIiwiYXR0ckludGVycG9sYXRlIiwiYXR0ckludGVycG9sYXRlTlMiLCJhdHRyVHdlZW5OUyIsIl92YWx1ZSIsImF0dHJUd2VlbiIsImRlbGF5RnVuY3Rpb24iLCJkZWxheUNvbnN0YW50IiwiZHVyYXRpb25GdW5jdGlvbiIsImR1cmF0aW9uQ29uc3RhbnQiLCJlYXNlQ29uc3RhbnQiLCJvbkZ1bmN0aW9uIiwib24wIiwib24xIiwic2l0IiwiZXZlcnkiLCJzdHlsZUludGVycG9sYXRlIiwic3R5bGVUd2VlbiIsInRleHRJbnRlcnBvbGF0ZSIsInRleHRUd2VlbiIsIlRyYW5zaXRpb24iLCJfbmFtZSIsIm5ld0lkIiwic2VsZWN0aW9uX3Byb3RvdHlwZSIsImluaGVyaXQiLCJpZDAiLCJpZDEiLCJzdHlsZU51bGwiLCJsaXN0ZW5lcjAiLCJzdHlsZU1heWJlUmVtb3ZlIiwicmVtb3ZlRnVuY3Rpb24iLCJlYXNlVmFyeWluZyIsImNhbmNlbCIsImludGVycnVwdCIsImRlZmF1bHRUaW1pbmciLCJhY3RpdmUiLCJwaSIsInRhdSIsInRhdUVwc2lsb24iLCJQYXRoIiwiX3gwIiwiX3kwIiwiX3gxIiwiX3kxIiwiZm9ybWF0RGVjaW1hbFBhcnRzIiwidG9FeHBvbmVudGlhbCIsImNvZWZmaWNpZW50IiwibW92ZVRvIiwiY2xvc2VQYXRoIiwibGluZVRvIiwicXVhZHJhdGljQ3VydmVUbyIsIngxIiwieTEiLCJiZXppZXJDdXJ2ZVRvIiwieDIiLCJ5MiIsImFyY1RvIiwieDAiLCJ5MCIsIngyMSIsInkyMSIsIngwMSIsInkwMSIsImwwMV8yIiwieDIwIiwieTIwIiwibDIxXzIiLCJsMjBfMiIsImwyMSIsImwwMSIsImFjb3MiLCJ0MDEiLCJ0MjEiLCJhcmMiLCJhMCIsImExIiwiY2N3IiwiZHgiLCJkeSIsImN3IiwiZGEiLCJyZWN0IiwidyIsInByZWZpeEV4cG9uZW50IiwicmUiLCJmb3JtYXRTcGVjaWZpZXIiLCJzcGVjaWZpZXIiLCJGb3JtYXRTcGVjaWZpZXIiLCJmaWxsIiwiYWxpZ24iLCJzaWduIiwic3ltYm9sIiwid2lkdGgiLCJjb21tYSIsInByZWNpc2lvbiIsImV4cG9uZW50IiwiJSIsInRvRml4ZWQiLCJ0b0xvY2FsZVN0cmluZyIsInJlcGxhY2UiLCJ0b1ByZWNpc2lvbiIsImZvcm1hdFJvdW5kZWQiLCJYIiwidG9VcHBlckNhc2UiLCJsb2NhbGUiLCJmb3JtYXRQcmVmaXgiLCJwcmVmaXhlcyIsImdyb3VwaW5nIiwidGhvdXNhbmRzIiwiTnVtYmVyIiwic3Vic3RyaW5nIiwicmV2ZXJzZSIsImN1cnJlbmN5UHJlZml4IiwiY3VycmVuY3kiLCJjdXJyZW5jeVN1ZmZpeCIsImRlY2ltYWwiLCJudW1lcmFscyIsImZvcm1hdE51bWVyYWxzIiwiU3RyaW5nIiwicGVyY2VudCIsIm1pbnVzIiwibmFuIiwibmV3Rm9ybWF0IiwiZm9ybWF0VHlwZXMiLCJzdWZmaXgiLCJmb3JtYXRUeXBlIiwibWF5YmVTdWZmaXgiLCJ2YWx1ZVByZWZpeCIsInZhbHVlU3VmZml4IiwidmFsdWVOZWdhdGl2ZSIsIm91dCIsImZvcm1hdFRyaW0iLCJjaGFyQ29kZUF0IiwicGFkZGluZyIsImZvcm1hdExvY2FsZSIsImNvbG9yTGFiIiwiaW5pdFJhbmdlIiwiZ2VuZXJpY0FycmF5IiwibmIiLCJuYSIsInNldFRpbWUiLCJkYXRlIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJEYXRhVmlldyIsImlzTnVtYmVyQXJyYXkiLCJudW1iZXJBcnJheSIsImlzQXJyYXkiLCJ2YWx1ZU9mIiwib2JqZWN0IiwidW5pdCIsIm5vcm1hbGl6ZSIsImJpbWFwIiwiZDAiLCJkMSIsInIwIiwicjEiLCJwb2x5bWFwIiwiYmlzZWN0IiwidGFyZ2V0IiwiY2xhbXAiLCJ1bmtub3duIiwidHJhbnNmb3JtZXIiLCJ1bnRyYW5zZm9ybSIsInBpZWNld2lzZSIsIm91dHB1dCIsImlucHV0IiwiaW50ZXJwb2xhdGVWYWx1ZSIsInJlc2NhbGUiLCJpbnZlcnQiLCJyYW5nZVJvdW5kIiwiaW50ZXJwb2xhdGVSb3VuZCIsInUiLCJjb250aW51b3VzIiwicHJlY2lzaW9uUHJlZml4IiwicHJlY2lzaW9uUm91bmQiLCJwcmVjaXNpb25GaXhlZCIsImxpbmVhcmlzaCIsIm5pY2UiLCJwcmVzdGVwIiwibWF4SXRlciIsIm5ld0ludGVydmFsIiwiZmxvb3JpIiwib2Zmc2V0aSIsImZpZWxkIiwibWlsbGlzZWNvbmQiLCJzZWNvbmQiLCJnZXRNaWxsaXNlY29uZHMiLCJnZXRVVENTZWNvbmRzIiwibWludXRlIiwiZ2V0U2Vjb25kcyIsImR1cmF0aW9uU2Vjb25kIiwiZ2V0TWludXRlcyIsImhvdXIiLCJkdXJhdGlvbk1pbnV0ZSIsImdldEhvdXJzIiwiZGF5Iiwic2V0SG91cnMiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0IiwiZHVyYXRpb25Ib3VyIiwid2Vla2RheSIsImdldERheSIsImR1cmF0aW9uRGF5Iiwic3VuZGF5IiwibW9uZGF5IiwidGh1cnNkYXkiLCJtb250aCIsInNldE1vbnRoIiwiZ2V0TW9udGgiLCJnZXRGdWxsWWVhciIsInllYXIiLCJzZXRGdWxsWWVhciIsInNldFVUQ1NlY29uZHMiLCJnZXRVVENNaW51dGVzIiwic2V0VVRDTWludXRlcyIsImdldFVUQ0hvdXJzIiwidXRjRGF5Iiwic2V0VVRDSG91cnMiLCJzZXRVVENEYXRlIiwiZ2V0VVRDRGF0ZSIsInV0Y1dlZWtkYXkiLCJnZXRVVENEYXkiLCJ1dGNTdW5kYXkiLCJ1dGNNb25kYXkiLCJ1dGNUaHVyc2RheSIsInNldFVUQ01vbnRoIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENGdWxsWWVhciIsInV0Y1llYXIiLCJzZXRVVENGdWxsWWVhciIsInRpbWVUaWNrcyIsInRpbWVUaWNrSW50ZXJ2YWwiLCJ3ZWVrIiwidGlja0ludGVydmFscyIsInRpY2tJbnRlcnZhbCIsInRpY2tlciIsImxvY2FsRGF0ZSIsIkgiLCJNIiwiUyIsIkwiLCJ1dGNEYXRlIiwiVVRDIiwibmV3RGF0ZSIsInRpbWVGb3JtYXQiLCJTZWFyY2hUeXBlIiwiT3V0cHV0VHlwZSIsIlZhbHVlVHlwZSIsInBhZHMiLCItIiwiMCIsIm51bWJlclJlIiwicGVyY2VudFJlIiwicmVxdW90ZVJlIiwicGFkIiwicmVxdW90ZSIsImZvcm1hdFJlIiwiZm9ybWF0TG9va3VwIiwicGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5IiwicGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5IiwicGFyc2VXZWVrTnVtYmVyU3VuZGF5IiwiVSIsInBhcnNlV2Vla051bWJlcklTTyIsIlYiLCJwYXJzZVdlZWtOdW1iZXJNb25kYXkiLCJXIiwicGFyc2VGdWxsWWVhciIsInBhcnNlWWVhciIsInBhcnNlWm9uZSIsIloiLCJwYXJzZVF1YXJ0ZXIiLCJwYXJzZU1vbnRoTnVtYmVyIiwicGFyc2VEYXlPZk1vbnRoIiwicGFyc2VEYXlPZlllYXIiLCJwYXJzZUhvdXIyNCIsInBhcnNlTWludXRlcyIsInBhcnNlU2Vjb25kcyIsInBhcnNlTWlsbGlzZWNvbmRzIiwicGFyc2VNaWNyb3NlY29uZHMiLCJwYXJzZUxpdGVyYWxQZXJjZW50IiwicGFyc2VVbml4VGltZXN0YW1wIiwiUSIsInBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMiLCJmb3JtYXREYXlPZk1vbnRoIiwiZm9ybWF0SG91cjI0IiwiZm9ybWF0SG91cjEyIiwiZm9ybWF0RGF5T2ZZZWFyIiwidGltZURheSIsInRpbWVZZWFyIiwiZm9ybWF0TWlsbGlzZWNvbmRzIiwiZm9ybWF0TWljcm9zZWNvbmRzIiwiZm9ybWF0TW9udGhOdW1iZXIiLCJmb3JtYXRNaW51dGVzIiwiZm9ybWF0U2Vjb25kcyIsImZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXkiLCJmb3JtYXRXZWVrTnVtYmVyU3VuZGF5IiwidGltZVN1bmRheSIsImRJU08iLCJ0aW1lVGh1cnNkYXkiLCJmb3JtYXRXZWVrTnVtYmVySVNPIiwiZm9ybWF0V2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFdlZWtOdW1iZXJNb25kYXkiLCJ0aW1lTW9uZGF5IiwiZm9ybWF0WWVhciIsImZvcm1hdFllYXJJU08iLCJmb3JtYXRGdWxsWWVhciIsImZvcm1hdEZ1bGxZZWFySVNPIiwiZm9ybWF0Wm9uZSIsImZvcm1hdFVUQ0RheU9mTW9udGgiLCJmb3JtYXRVVENIb3VyMjQiLCJmb3JtYXRVVENIb3VyMTIiLCJmb3JtYXRVVENEYXlPZlllYXIiLCJmb3JtYXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJmb3JtYXRVVENNaWNyb3NlY29uZHMiLCJmb3JtYXRVVENNb250aE51bWJlciIsImZvcm1hdFVUQ01pbnV0ZXMiLCJmb3JtYXRVVENTZWNvbmRzIiwiZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheSIsImRvdyIsImZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkiLCJVVENkSVNPIiwiZm9ybWF0VVRDV2Vla051bWJlcklTTyIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5IiwiZm9ybWF0VVRDWWVhciIsImZvcm1hdFVUQ1llYXJJU08iLCJmb3JtYXRVVENGdWxsWWVhciIsImZvcm1hdFVUQ0Z1bGxZZWFySVNPIiwiZm9ybWF0VVRDWm9uZSIsImZvcm1hdExpdGVyYWxQZXJjZW50IiwiZm9ybWF0VW5peFRpbWVzdGFtcCIsImZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzIiwiY2FsZW5kYXIiLCJmb3JtYXRNaWxsaXNlY29uZCIsImZvcm1hdFNlY29uZCIsImZvcm1hdE1pbnV0ZSIsImZvcm1hdEhvdXIiLCJmb3JtYXREYXkiLCJmb3JtYXRXZWVrIiwiZm9ybWF0TW9udGgiLCJMaW5lYXIiLCJfY29udGV4dCIsImRlZmluZWQiLCJjdXJ2ZSIsImN1cnZlTGluZWFyIiwiYnVmZmVyIiwiZGVmaW5lZDAiLCJsaW5lU3RhcnQiLCJsaW5lRW5kIiwicG9pbnQiLCJwb2ludFgiLCJwb2ludFkiLCJsb2NhbGVfZGF0ZVRpbWUiLCJkYXRlVGltZSIsImxvY2FsZV9kYXRlIiwibG9jYWxlX3RpbWUiLCJsb2NhbGVfcGVyaW9kcyIsInBlcmlvZHMiLCJsb2NhbGVfd2Vla2RheXMiLCJkYXlzIiwibG9jYWxlX3Nob3J0V2Vla2RheXMiLCJzaG9ydERheXMiLCJsb2NhbGVfbW9udGhzIiwibW9udGhzIiwibG9jYWxlX3Nob3J0TW9udGhzIiwic2hvcnRNb250aHMiLCJwZXJpb2RSZSIsInBlcmlvZExvb2t1cCIsIndlZWtkYXlSZSIsIndlZWtkYXlMb29rdXAiLCJzaG9ydFdlZWtkYXlSZSIsInNob3J0V2Vla2RheUxvb2t1cCIsIm1vbnRoUmUiLCJtb250aExvb2t1cCIsInNob3J0TW9udGhSZSIsInNob3J0TW9udGhMb29rdXAiLCJmb3JtYXRzIiwiQSIsIkIiLCJHIiwiSSIsIlkiLCJ1dGNGb3JtYXRzIiwicGFyc2VzIiwicGFyc2VTcGVjaWZpZXIiLCJjaGFyQXQiLCJuZXdQYXJzZSIsInV0Y0Zvcm1hdCIsInV0Y1BhcnNlIiwiZGVmYXVsdExvY2FsZSIsImFyZWFTdGFydCIsIl9saW5lIiwiYXJlYUVuZCIsIl9wb2ludCIsIkRhdGFQb2ludCIsIlF1ZXJ5Iiwic2VhcmNoVHlwZSIsInNlYXJjaFRhcmdldCIsInN1YlR5cGUiLCJzZXBhcmF0b3IiLCJhY2Nlc3NvciIsImFjY2Vzc29yMSIsImFjY2Vzc29yMiIsInZhbHVlVHlwZSIsInVzZWRBc1hEYXRhc2V0IiwibnVtVGFyZ2V0cyIsIlRhYmxlIiwicmVnZXgiLCJwYXJzZUZsb2F0IiwiaXNOdW1iZXIiLCJwYXJlbnRUYXJnZXQiLCJvdGhlciIsInNlcCIsIm51bSIsIkRhdGFzZXQiLCJxdWVyeSIsInlNaW4iLCJ5TWF4Iiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsImxpbmVJbmZvIiwiYmFySW5mbyIsImluZCIsImdldERhdGVzIiwiZGF5U2hpZnQiLCJnZXRJbmRleE9mRGF0ZSIsInNoaWZ0QW1vdW50IiwicGVuYWx0eSIsImFjY3VtVmFsdWUiLCJjb3VudE5vdE51bGwiLCJjdXJyZW50SW5kZXgiLCJEYXRhc2V0cyIsImRhdGVzIiwiZGF0YXNldHMiLCJkYXRlRm9ybWF0IiwiY3JlYXRpb25EYXRhIiwiY3VyRGF0ZSIsIm1vbWVudCIsInJlbmRlckluZm8iLCJkYXRhc2V0Iiwic2V0SWQiLCJnZXRJZCIsInNldE5hbWUiLCJkYXRhc2V0TmFtZSIsImdldFF1ZXJ5IiwiZXF1YWxUbyIsImlkcyIsImluY2x1ZGVzIiwiZ2V0TmFtZSIsIlJlbmRlckluZm8iLCJxdWVyaWVzIiwieERhdGFzZXQiLCJmb2xkZXIiLCJkYXRlRm9ybWF0UHJlZml4IiwiZGF0ZUZvcm1hdFN1ZmZpeCIsImNvbnN0VmFsdWUiLCJpZ25vcmVBdHRhY2hlZFZhbHVlIiwiaWdub3JlWmVyb1ZhbHVlIiwiYWNjdW0iLCJ2YWx1ZVNoaWZ0IiwiZGF0YUFyZWFTaXplIiwiU2l6ZSIsIm1hcmdpbiIsIk1hcmdpbiIsInRvb2x0aXBTaXplIiwiZml4ZWRTY2FsZSIsImZpdFBhbmVsV2lkdGgiLCJiYXIiLCJwaWUiLCJzdW1tYXJ5IiwiaGVhdG1hcCIsImJ1bGxldCIsIk91dHB1dEluZm8iLCJDb21tb25DaGFydEluZm8iLCJzdXBlciIsInRpdGxlIiwieEF4aXNMYWJlbCIsInhBeGlzQ29sb3IiLCJ4QXhpc0xhYmVsQ29sb3IiLCJ5QXhpc0xhYmVsIiwieUF4aXNDb2xvciIsInlBeGlzTGFiZWxDb2xvciIsInlBeGlzVW5pdCIsInJldmVyc2VZQXhpcyIsImFsbG93SW5zcGVjdERhdGEiLCJzaG93TGVnZW5kIiwibGVnZW5kUG9zaXRpb24iLCJsZWdlbmRPcmllbnRhdGlvbiIsImxlZ2VuZEJnQ29sb3IiLCJsZWdlbmRCb3JkZXJDb2xvciIsImNoYXJ0VHlwZSIsIlVua25vd24iLCJMaW5lSW5mbyIsImxpbmVDb2xvciIsImxpbmVXaWR0aCIsInNob3dMaW5lIiwic2hvd1BvaW50IiwicG9pbnRDb2xvciIsInBvaW50Qm9yZGVyQ29sb3IiLCJwb2ludEJvcmRlcldpZHRoIiwicG9pbnRTaXplIiwiZmlsbEdhcCIsInlBeGlzTG9jYXRpb24iLCJMaW5lIiwiQmFySW5mbyIsImJhckNvbG9yIiwiQmFyIiwiUGllSW5mbyIsImRhdGFDb2xvciIsInJhdGlvSW5uZXJSYWRpdXMiLCJTdW1tYXJ5SW5mbyIsInRlbXBsYXRlIiwiTW9udGhJbmZvIiwibW9kZSIsInN0YXJ0V2Vla09uIiwidGhyZXNob2xkIiwic2hvd0NpcmNsZSIsImRpbU5vdEluTW9udGgiLCJzaG93U3RyZWFrIiwic2hvd1RvZGF5UmluZyIsInNob3dTZWxlY3RlZFZhbHVlIiwic2hvd1NlbGVjdGVkUmluZyIsImNpcmNsZUNvbG9yIiwiY2lyY2xlQ29sb3JCeVZhbHVlIiwiaGVhZGVyWWVhckNvbG9yIiwiaGVhZGVyTW9udGhDb2xvciIsImRpdmlkaW5nTGluZUNvbG9yIiwidG9kYXlSaW5nQ29sb3IiLCJzZWxlY3RlZFJpbmdDb2xvciIsImluaXRNb250aCIsInNlbGVjdGVkRGF0ZSIsInNlbGVjdGVkRGF0YXNldCIsIkhlYXRtYXBJbmZvIiwib3JpZW50YXRpb24iLCJCdWxsZXRJbmZvIiwidmFsdWVVbml0IiwidmFsdWVDb2xvciIsInJhbmdlQ29sb3IiLCJzaG93TWFya2VyIiwibWFya2VyVmFsdWUiLCJtYXJrZXJDb2xvciIsImhlaWdodCIsInRvcCIsImJvdHRvbSIsIlRyYW5zZm9ybSIsIlRhYmxlRGF0YSIsImZpbGVQYXRoIiwidGFibGVJbmRleCIsInlEYXRhc2V0cyIsInN0clRvRGF0ZSIsInN0ckRhdGUiLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJJU09fODYwMSIsInN0YXJ0T2YiLCJyZWxEYXRlU3RyaW5nVG9EYXRlIiwicmVsRGF0ZVN0cmluZyIsInJlbERhdGVSZWdleCIsImdldERhdGVUb2RheSIsImlzVmFsaWQiLCJkYXRlVG9TdHIiLCJnZXREYXRlRnJvbVVuaXhUaW1lIiwidW5peFRpbWUiLCJkZWVwVmFsdWUiLCJvYmoiLCJzdHIiLCJ0cmltQnlDaGFyIiwiY2hhciIsImFyciIsImZpcnN0IiwiZmluZEluZGV4IiwibGFzdCIsInBhcnNlRmxvYXRGcm9tQW55IiwidG9QYXJzZSIsIm5lZ2F0aXZlVmFsdWUiLCJ0aW1lVmFsdWUiLCJkaWZmIiwiVGltZSIsIm1lYXN1cmVUZXh0U2l6ZSIsInN0eWxlQ2xhc3MiLCJjb250YWluZXIiLCJkMy5zZWxlY3QiLCJ0ZXh0QmxvY2siLCJnZXRCQm94IiwiZXhwYW5kQXJlYSIsImFyZWEiLCJhZGRXIiwiYWRkSCIsIm5ld1dpZHRoIiwibmV3SGVpZ2h0IiwibW92ZUFyZWEiLCJzaGlmdFgiLCJzaGlmdFkiLCJ0cmFucyIsImNsZWFuVGV4dCIsIkNPTVBPVU5EIiwiTUVNQkVSX0VYUCIsIkxJVEVSQUwiLCJ0aHJvd0Vycm9yIiwidW5hcnlfb3BzIiwiYmluYXJ5X29wcyIsImdldE1heEtleUxlbiIsIm1heF91bm9wX2xlbiIsIm1heF9iaW5vcF9sZW4iLCJsaXRlcmFscyIsImJpbmFyeVByZWNlZGVuY2UiLCJjcmVhdGVCaW5hcnlFeHByZXNzaW9uIiwiaXNEZWNpbWFsRGlnaXQiLCJpc0lkZW50aWZpZXJTdGFydCIsImlzSWRlbnRpZmllclBhcnQiLCJqc2VwIiwibWVzc2FnZSIsImRlc2NyaXB0aW9uIiwifHwiLCImJiIsInwiLCJeIiwiJiIsIj09IiwiIT0iLCI9PT0iLCIhPT0iLCI8IiwiPiIsIjw9IiwiPj0iLCI8PCIsIj4+IiwiPj4+IiwiKyIsIioiLCIvIiwibGVuIiwibWF4X2xlbiIsIiEiLCJ+IiwidHJ1ZSIsImZhbHNlIiwibnVsbCIsIm9wX3ZhbCIsIm9wZXJhdG9yIiwiY2giLCJmcm9tQ2hhckNvZGUiLCJleHByIiwiY2hfaSIsImNoYXJBdEZ1bmMiLCJjaGFyQ29kZUF0RnVuYyIsImV4cHJJIiwiZXhwcklDb2RlIiwiZ29iYmxlU3BhY2VzIiwiZ29iYmxlRXhwcmVzc2lvbiIsImNvbnNlcXVlbnQiLCJhbHRlcm5hdGUiLCJnb2JibGVCaW5hcnlFeHByZXNzaW9uIiwiZ29iYmxlQmluYXJ5T3AiLCJ0b19jaGVjayIsInN1YnN0ciIsInRjX2xlbiIsImJpb3AiLCJwcmVjIiwic3RhY2siLCJiaW9wX2luZm8iLCJjdXJfYmlvcCIsImdvYmJsZVRva2VuIiwiZ29iYmxlTnVtZXJpY0xpdGVyYWwiLCJnb2JibGVTdHJpbmdMaXRlcmFsIiwiZ29iYmxlQXJyYXkiLCJhcmd1bWVudCIsImdvYmJsZVZhcmlhYmxlIiwiY2hDb2RlIiwicmF3IiwicXVvdGUiLCJjbG9zZWQiLCJnb2JibGVJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsImdvYmJsZUFyZ3VtZW50cyIsInRlcm1pbmF0aW9uIiwic2VwYXJhdG9yX2NvdW50IiwiYXJnIiwiZ29iYmxlR3JvdXAiLCJjb21wdXRlZCIsImNhbGxlZSIsImVsZW1lbnRzIiwiYm9keSIsInZlcnNpb24iLCJhZGRVbmFyeU9wIiwib3BfbmFtZSIsImFkZEJpbmFyeU9wIiwicHJlY2VkZW5jZSIsImFkZExpdGVyYWwiLCJsaXRlcmFsX25hbWUiLCJsaXRlcmFsX3ZhbHVlIiwicmVtb3ZlVW5hcnlPcCIsInJlbW92ZUFsbFVuYXJ5T3BzIiwicmVtb3ZlQmluYXJ5T3AiLCJyZW1vdmVBbGxCaW5hcnlPcHMiLCJyZW1vdmVMaXRlcmFsIiwicmVtb3ZlQWxsTGl0ZXJhbHMiLCJtb2R1bGUiLCJleHBvcnRzIiwiZm5TZXQiLCJkYXRhc2V0SWQiLCJkMy5taW4iLCJnZXREYXRhc2V0QnlJZCIsImdldFZhbHVlcyIsIm1pbkRhdGUiLCJhcnJheURhdGFzZXQiLCJkYXRhUG9pbnQiLCJoZWxwZXIuZGF0ZVRvU3RyIiwiZDMubWF4IiwibWF4RGF0ZSIsImdldFN0YXJ0RGF0ZSIsImdldEVuZERhdGUiLCJkMy5zdW0iLCJnZXROdW1UYXJnZXRzIiwibnVtRGF5cyIsImdldExlbmd0aCIsIm51bURheXNIYXZpbmdEYXRhIiwiZ2V0TGVuZ3RoTm90TnVsbCIsIm1heFN0cmVhayIsInN0cmVhayIsIm1heFN0cmVha1N0YXJ0Iiwic3RyZWFrU3RhcnQiLCJtYXhTdHJlYWtFbmQiLCJzdHJlYWtFbmQiLCJuZXh0UG9pbnQiLCJtYXhCcmVha3MiLCJicmVha3MiLCJtYXhCcmVha3NTdGFydCIsImJyZWFrc1N0YXJ0IiwibWF4QnJlYWtzRW5kIiwiYnJlYWtzRW5kIiwibGFzdFN0cmVhayIsImN1cnJlbnRTdHJlYWsiLCJjdXJyZW50U3RyZWFrU3RhcnQiLCJjdXJyZW50U3RyZWFrRW5kIiwiY3VycmVudEJyZWFrcyIsImN1cnJlbnRCcmVha3NTdGFydCIsImN1cnJlbnRCcmVha3NFbmQiLCJhdmVyYWdlIiwibWVkaWFuIiwidmFyaWFuY2UiLCJtZWFuIiwiZDMudmFyaWFuY2UiLCJyZXNvbHZlVGVtcGxhdGUiLCJyZXBsYWNlTWFwIiwiZW50cmllcyIsImZvckVhY2giLCJmbk5hbWUiLCJmbiIsImlzSW50ZWdlciIsInN0clJlcGxhY2VSZWdleCIsInN0clJlc3VsdCIsInJlbmRlclBpZUNoYXJ0IiwiY2FudmFzIiwicGllSW5mbyIsInJlbmRlclN1bW1hcnkiLCJzdW1tYXJ5SW5mbyIsIm91dHB1dFN1bW1hcnkiLCJleHByLnJlc29sdmVUZW1wbGF0ZSIsIm91dHB1dExpbmVzIiwib3V0cHV0TGluZSIsInRvTmV4dERhdGFzZXQiLCJtb250aEluZm8iLCJkYXRhc2V0SWRzIiwiY3VyRGF0YXNldElkIiwiY3VySW5kZXgiLCJjcmVhdGVBcmVhcyIsImNoYXJ0RWxlbWVudHMiLCJwcm9wcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJkM1xyXG4gICAgICAgIC5zZWxlY3QiLCJncmFwaEFyZWEiLCJkYXRhQXJlYSIsImNsZWFyU2VsZWN0aW9uIiwiY2lyY2xlcyIsImNpcmNsZSIsIm1vbml0b3IiLCJyZW5kZXJNb250aEhlYWRlciIsImN1ck1vbnRoRGF0ZSIsImRheXNJbk1vbnRoIiwibWF4RGF5VGV4dFNpemUiLCJoZWxwZXIubWVhc3VyZVRleHRTaXplIiwiY2VsbFNpemUiLCJoZWFkZXJZZWFyVGV4dCIsImhlYWRlck1vbnRoVGV4dCIsImhlYWRlclllYXJTaXplIiwiaGVhZGVyTW9udGhTaXplIiwiaGVhZGVySGVpZ2h0IiwiaGVhZGVyR3JvdXAiLCJoZWFkZXJNb250aCIsImhlYWRlclllYXIiLCJkYXRhc2V0TmFtZVNpemUiLCJkYXRhc2V0Um90YXRvciIsInJlZnJlc2giLCJtb25pdG9yVGV4dFNpemUiLCJhcnJvd1NpemUiLCJwcmV2TW9udGhEYXRlIiwibmV4dE1vbnRoRGF0ZSIsInRvZGF5RGF0ZSIsImhlbHBlci5nZXREYXRlVG9kYXkiLCJ3ZWVrZGF5TmFtZXMiLCJzaGlmdCIsIndlZWtkYXlOYW1lU2l6ZSIsImRpdmlkaW5nTGluZSIsImhlbHBlci5tb3ZlQXJlYSIsInJlbmRlck1vbnRoRGF5cyIsImN1ckRhdGFzZXRJbmRleCIsImRvdFJhZGl1cyIsInN0cmVha1dpZHRoIiwiYWxsb3dTY2FsZWRWYWx1ZSIsIm1vbnRoU3RhcnREYXRlIiwic3VidHJhY3QiLCJtb250aEVuZERhdGUiLCJlbmRPZiIsImRhdGFTdGFydERhdGUiLCJkYXRhRW5kRGF0ZSIsImRheXNJbk1vbnRoVmlldyIsImluZENvbCIsImluZFJvdyIsImlzSW5UaGlzTW9udGgiLCJpc091dE9mRGF0YVJhbmdlIiwiY3VyVmFsdWUiLCJnZXRWYWx1ZSIsInNjYWxlZFZhbHVlIiwibmV4dFZhbHVlIiwicHJldlZhbHVlIiwic3RyZWFrSW4iLCJzdHJlYWtPdXQiLCJkYXlJbk1vbnRoIiwicm93IiwiY29sIiwidG90YWxEYXlCbG9ja1dpZHRoIiwiZDNcclxuICAgICAgICAuc2NhbGVMaW5lYXIiLCJzdHJlYWtDb2xvciIsInN0cmVha0hlaWdodCIsImQzLmludGVycG9sYXRlTGFiIiwidG9kYXkiLCJ0b2RheVJpbmdzIiwic3RyVmFsdWUiLCJ2YWx1ZVRleHQiLCJzdmdXaWR0aCIsInN2Z0hlaWdodCIsImdyYXBoQXJlYVdpZHRoIiwiZ3JhcGhBcmVhSGVpZ2h0IiwidG90YWxIZWlnaHQiLCJoZWFkZXIiLCJ0b3RhbFdpZHRoIiwiaGVscGVyLmV4cGFuZEFyZWEiLCJyZW5kZXJNb250aCIsIm51bUF2YWlsYWJsZURhdGFzZXQiLCJtb250aERhdGUiLCJyZW5kZXJIZWF0bWFwIiwiaGVhdG1hcEluZm8iLCJyZW5kZXJCdWxsZXQiLCJidWxsZXRJbmZvIiwicmV0UmVuZGVyQXhpcyIsImxhc3RSYW5nZSIsInRpY2tGb3JtYXRGbiIsImQzLnRpY2tGb3JtYXQiLCJtYXhUaWNrTGFiZWxTaXplIiwiZDMuc2NhbGVMaW5lYXIiLCJheGlzR2VuIiwiZDMuYXhpc0JvdHRvbSIsImQzLmF4aXNMZWZ0IiwicmVuZGVyQXhpcyIsInRpdGxlU2l6ZSIsInhNaWRkbGUiLCJheGlzV2lkdGgiLCJ1bml0U2l6ZSIsInJlbmRlclRpdGxlIiwibGFzdEJvdW5kIiwicmVuZGVyQmFja1BhbmVsIiwicmV0UmVuZGVyQmFyIiwiZXJyb3JNZXNzYWdlIiwicmV0QWN0dWFsVmFsdWUiLCJhY3R1YWxWYWx1ZSIsImJhcldpZHRoIiwicmVuZGVyQmFyIiwibWFya2VyTGVuZ3RoIiwicmVuZGVyTWFyayIsIl9jYW52YXMiLCJzZXRDaGFydFNjYWxlIiwiZ2V0WVRpY2tGb3JtYXQiLCJ5TG93ZXIiLCJ5VXBwZXIiLCJza2lwIiwiYWJzRXh0ZW50IiwidGlja1RpbWUiLCJpbnRlcmxlYXZlIiwicmVuZGVyWEF4aXMiLCJjaGFydEluZm8iLCJ4RG9tYWluIiwiZDMuZXh0ZW50IiwieFNjYWxlIiwidGltZU1vbnRoIiwidGltZVdlZWsiLCJ0aW1lSG91ciIsInRpbWVNaW51dGUiLCJ0aW1lU2Vjb25kIiwiZDNcclxuICAgICAgICAuc2NhbGVUaW1lIiwiZDMudGltZURheSIsImQzLnRpbWVXZWVrIiwiZDMudGltZU1vbnRoIiwiZDMudGltZVllYXIiLCJnZXRYVGlja0ludGVydmFsIiwiZDMudGltZUZvcm1hdCIsImdldFhUaWNrRm9ybWF0IiwieEF4aXNHZW4iLCJkM1xyXG4gICAgICAgIC5heGlzQm90dG9tIiwieEF4aXMiLCJ0ZXh0U2l6ZSIsInhBeGlzVGlja0xhYmVscyIsInRpY2tMYWJlbEhlaWdodCIsInJlbmRlcllBeGlzIiwieU1pbk9mRGF0YXNldHMiLCJ5TWF4T2ZEYXRhc2V0cyIsInRtcFZhbHVlSXNUaW1lIiwidmFsdWVJc1RpbWUiLCJnZXRZTWluIiwiZ2V0WU1heCIsInlNaW5Bc3NpZ25lZCIsInlNYXhBc3NpZ25lZCIsInlUbXAiLCJ5VG1wQXNzaWduZWQiLCJ5RXh0ZW50IiwieVNjYWxlIiwiR2V0Q2hhcnRUeXBlIiwieUF4aXNMYWJlbFRleHQiLCJ5QXhpc0dlbiIsInlBeGlzVW5pdFRleHQiLCJkMy5yYW5nZSIsImdldFlUaWNrVmFsdWVzIiwieUF4aXMiLCJ5QXhpc0xpbmUiLCJ5QXhpc1RpY2tzIiwieUF4aXNUaWNrTGFiZWxzIiwieVRpY2tGb3JtYXQiLCJ5TG93ZXJMYWJlbFNpemUiLCJ5VXBwZXJMYWJlbFNpemUiLCJtYXhUaWNrTGFiZWxXaWR0aCIsInlBeGlzTGFiZWxTaXplIiwieUF4aXNXaWR0aCIsInJlbmRlckxpbmUiLCJsZWZ0WVNjYWxlIiwicmlnaHRZU2NhbGUiLCJsaW5lR2VuIiwiZDNcclxuICAgICAgICAgICAgLmxpbmUiLCJyZW5kZXJQb2ludHMiLCJkb3RzIiwidG9vbHRpcCIsInRvb2x0aXBMYWJlbCIsInRvb2x0aXBMYWJlbERhdGUiLCJ0b29sdGlwTGFiZWxWYWx1ZSIsImRhdGVWYWx1ZSIsInNvdXJjZUV2ZW50IiwiY3VycmVudFRhcmdldCIsIm93bmVyU1ZHRWxlbWVudCIsImNyZWF0ZVNWR1BvaW50IiwiY2xpZW50WCIsImNsaWVudFkiLCJtYXRyaXhUcmFuc2Zvcm0iLCJnZXRTY3JlZW5DVE0iLCJpbnZlcnNlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50TGVmdCIsImNsaWVudFRvcCIsInBhZ2VYIiwicGFnZVkiLCJkMy5wb2ludGVyIiwiY3VyckJhclNldCIsInRvdGFsTnVtT2ZCYXJTZXRzIiwiYmFyU2V0V2lkdGgiLCJiYXJzIiwicG9ydGlvblZpc2libGUiLCJyZW5kZXJMZWdlbmQiLCJsZWZ0WUF4aXMiLCJyaWdodFlBeGlzIiwidGl0bGVIZWlnaHQiLCJ4QXhpc0hlaWdodCIsImxlZnRZQXhpc1dpZHRoIiwicmlnaHRZQXhpc1dpZHRoIiwieERhdGFzZXRJZHMiLCJnZXRYRGF0YXNldElkcyIsImdldE5hbWVzIiwibmFtZVNpemVzIiwiaW5kTWF4TmFtZSIsIm1heE5hbWVXaWR0aCIsImNoYXJhY3RlcldpZHRoIiwibmFtZUhlaWdodCIsIm51bU5hbWVzIiwieFNwYWNpbmciLCJ5U3BhY2luZyIsIm1hcmtlcldpZHRoIiwibGVnZW5kV2lkdGgiLCJsZWdlbmRIZWlnaHQiLCJsZWdlbmRYIiwibGVnZW5kWSIsImxlZ2VuZCIsImxlZ2VuZEJnIiwiZmlyc3RNYXJrZXJYIiwiZmlyc3RNYXJrZXJZIiwiZmlyc3RMYWJlbFgiLCJmaXJzdExhYmVsWSIsIm51bUVsZW1zRXhjbHVkZWQiLCJuYW1lTGFiZWxzIiwiY3VyclJlbmRlclBvc1giLCJjdXJyUmVuZGVyUG9zWDIiLCJyZW5kZXJMaW5lQ2hhcnQiLCJkYXRhc2V0T25MZWZ0WUF4aXMiLCJkYXRhc2V0T25SaWdodFlBeGlzIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJyZXRSZW5kZXJMZWZ0WUF4aXMiLCJyZXRSZW5kZXJSaWdodFlBeGlzIiwicmVuZGVyQmFyQ2hhcnQiLCJyZW5kZXJFcnJvck1lc3NhZ2UiLCJkZWZpbmVQcm9wZXJ0eSIsIkRFRkFVTFRfREFJTFlfTk9URV9GT1JNQVQiLCJERUZBVUxUX1dFRUtMWV9OT1RFX0ZPUk1BVCIsIkRFRkFVTFRfTU9OVEhMWV9OT1RFX0ZPUk1BVCIsInNob3VsZFVzZVBlcmlvZGljTm90ZXNTZXR0aW5ncyIsInBlcmlvZGljaXR5IiwicGVyaW9kaWNOb3RlcyIsImFwcCIsInBsdWdpbnMiLCJnZXRQbHVnaW4iLCJzZXR0aW5ncyIsImVuYWJsZWQiLCJnZXREYWlseU5vdGVTZXR0aW5ncyIsImludGVybmFsUGx1Z2lucyIsImRhaWx5IiwiZ2V0UGx1Z2luQnlJZCIsImluc3RhbmNlIiwiZXJyIiwiY29uc29sZSIsImluZm8iLCJnZXRXZWVrbHlOb3RlU2V0dGluZ3MiLCJwbHVnaW5NYW5hZ2VyIiwiY2FsZW5kYXJTZXR0aW5ncyIsInBlcmlvZGljTm90ZXNTZXR0aW5ncyIsIndlZWtseSIsIndlZWtseU5vdGVGb3JtYXQiLCJ3ZWVrbHlOb3RlRm9sZGVyIiwid2Vla2x5Tm90ZVRlbXBsYXRlIiwiZ2V0TW9udGhseU5vdGVTZXR0aW5ncyIsIm1vbnRobHkiLCJwYXJ0U2VnbWVudHMiLCJwYXJ0cyIsIm5ld1BhcnRzIiwicGFydCIsInVuc2hpZnQiLCJhc3luYyIsImdldE5vdGVQYXRoIiwiZGlyZWN0b3J5IiwiZmlsZW5hbWUiLCJvYnNpZGlhbiIsIm5vcm1hbGl6ZVBhdGgiLCJkaXJzIiwiZGlyIiwidmF1bHQiLCJnZXRBYnN0cmFjdEZpbGVCeVBhdGgiLCJjcmVhdGVGb2xkZXIiLCJlbnN1cmVGb2xkZXJFeGlzdHMiLCJnZXRUZW1wbGF0ZUluZm8iLCJtZXRhZGF0YUNhY2hlIiwidGVtcGxhdGVQYXRoIiwidGVtcGxhdGVGaWxlIiwiZ2V0Rmlyc3RMaW5rcGF0aERlc3QiLCJjb250ZW50cyIsImNhY2hlZFJlYWQiLCJmb2xkTWFuYWdlciIsImxvYWQiLCJOb3RpY2UiLCJnZXREYXRlVUlEIiwiZ3JhbnVsYXJpdHkiLCJyZW1vdmVFc2NhcGVkQ2hhcmFjdGVycyIsImdldERhdGVGcm9tRmlsZSIsImZpbGUiLCJnZXREYXRlRnJvbUZpbGVuYW1lIiwiYmFzZW5hbWUiLCJub3RlRGF0ZSIsImNsZWFuRm9ybWF0IiwiaXNGb3JtYXRBbWJpZ3VvdXMiLCJEYWlseU5vdGVzRm9sZGVyTWlzc2luZ0Vycm9yIiwiY3JlYXRlRGFpbHlOb3RlIiwidGVtcGxhdGVDb250ZW50cyIsIklGb2xkSW5mbyIsIm5vcm1hbGl6ZWRQYXRoIiwiY3JlYXRlZEZpbGUiLCJfdGltZU9yRGF0ZSIsImNhbGMiLCJ0aW1lRGVsdGEiLCJtb21lbnRGb3JtYXQiLCJjdXJyZW50RGF0ZSIsInNhdmUiLCJXZWVrbHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvciIsImdldERheU9mV2Vla051bWVyaWNhbFZhbHVlIiwiZGF5T2ZXZWVrTmFtZSIsIndlZWtTdGFydCIsImxvY2FsZURhdGEiLCJfd2VlayIsImRheXNPZldlZWsiLCJnZXREYXlzT2ZXZWVrIiwiY3JlYXRlV2Vla2x5Tm90ZSIsImRheU9mV2VlayIsIk1vbnRobHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvciIsImNyZWF0ZU1vbnRobHlOb3RlIiwiYXBwSGFzV2Vla2x5Tm90ZXNQbHVnaW5Mb2FkZWQiLCJhcHBIYXNNb250aGx5Tm90ZXNQbHVnaW5Mb2FkZWQiLCJkYWlseU5vdGVzUGx1Z2luIiwiZGFpbHlOb3Rlc0ZvbGRlciIsImRhaWx5Tm90ZXMiLCJWYXVsdCIsInJlY3Vyc2VDaGlsZHJlbiIsIm5vdGUiLCJURmlsZSIsImRhdGVTdHJpbmciLCJtb250aGx5Tm90ZXMiLCJtb250aGx5Tm90ZXNGb2xkZXIiLCJ3ZWVrbHlOb3RlcyIsIndlZWtseU5vdGVzRm9sZGVyIiwiZnVsbFBhdGgiLCJiYXNlIiwibGFzdEluZGV4T2YiLCJnZXRTZXR0aW5ncyIsInN0clRvQm9vbCIsInZhbGlkYXRlU2VhcmNoVHlwZSIsInZhbGlkYXRlWUF4aXNMb2NhdGlvbiIsImxvY2F0aW9uIiwidmFsaWRhdGVDb2xvciIsImdldEJvb2xBcnJheUZyb21JbnB1dCIsIm51bURhdGFzZXQiLCJkZWZhdWx0VmFsdWUiLCJhbGxvd05vVmFsaWRWYWx1ZSIsIm51bVZhbGlkVmFsdWUiLCJjdXJyIiwicHJldiIsInNwbGl0dGVkIiwiY3VyckJvb2wiLCJpbnB1dEJvb2wiLCJnZXROdW1iZXJBcnJheUZyb21JbnB1dCIsImhlbHBlci5wYXJzZUZsb2F0RnJvbUFueSIsImN1cnJOdW0iLCJpbnB1dE51bSIsImdldFN0cmluZ0FycmF5RnJvbUlucHV0IiwidmFsaWRhdG9yIiwiZ2V0TnVtYmVyQXJyYXkiLCJudW1BcnJheSIsImVsZW0iLCJwaWVjZSIsImdldFN0cmluZ0FycmF5Iiwic3RyQXJyYXkiLCJwYXJzZUNvbW1vbkNoYXJ0SW5mbyIsInlhbWwiLCJyZXRZQXhpc0xhYmVsIiwicmV0WUF4aXNDb2xvciIsInJldFlBeGlzTGFiZWxDb2xvciIsInJldFlBeGlzVW5pdCIsInJldFlNaW4iLCJyZXRZTWF4IiwicmV0UmV2ZXJzZVlBeGlzIiwiZ2V0QXZhaWxhYmxlS2V5c09mQ2xhc3MiLCJrZXlzIiwib2JqZWN0S2V5cyIsImZpbGVCYXNlTmFtZSIsImhlbHBlci5zdHJUb0RhdGUiLCJnZXREYXRlRnJvbUZyb250bWF0dGVyIiwiZmlsZUNhY2hlIiwiZnJvbnRNYXR0ZXIiLCJmcm9udG1hdHRlciIsImhlbHBlci5kZWVwVmFsdWUiLCJnZXRUYXJnZXQiLCJnZXREYXRlRnJvbVRhZyIsImNvbnRlbnQiLCJ0YWdOYW1lIiwiZ2V0UGFyZW50VGFyZ2V0IiwiaGFzaFRhZ1JlZ2V4IiwiZ2V0RGF0ZUZyb21UZXh0Iiwic3RyVGV4dFJlZ2V4IiwidGV4dFJlZ2V4IiwiZ2V0RGF0ZUZyb21EdkZpZWxkIiwiZHZUYXJnZXQiLCJnZXREYXRlRnJvbUZpbGVNZXRhIiwiaGVscGVyLmdldERhdGVGcm9tVW5peFRpbWUiLCJzdGF0IiwiY3RpbWUiLCJtdGltZSIsImdldERhdGVGcm9tVGFzayIsImdldFN1YlR5cGUiLCJhZGRUb0RhdGFNYXAiLCJkYXRhTWFwIiwicXVlcnlWYWx1ZVBhaXJzIiwiY29sbGVjdERhdGFGcm9tRmlsZU1ldGEiLCJ4VmFsdWVNYXAiLCJ4VmFsdWUiLCJhZGROdW1UYXJnZXRzIiwicGF0dGVybiIsImhlbHBlci5nZXRXb3JkQ291bnQiLCJudW1DaGFycyIsIm51bVNlbnRlbmNlcyIsImhlbHBlci5nZXRTZW50ZW5jZUNvdW50IiwiREVGQVVMVF9TRVRUSU5HUyIsIlRyYWNrZXJTZXR0aW5nVGFiIiwiUGx1Z2luU2V0dGluZ1RhYiIsInBsdWdpbiIsImNvbnRhaW5lckVsIiwiU2V0dGluZyIsInNldERlc2MiLCJhZGRUZXh0Iiwic2V0UGxhY2Vob2xkZXIiLCJzZXRWYWx1ZSIsIm9uQ2hhbmdlIiwic2F2ZVNldHRpbmdzIiwiVHJhY2tlciIsIlBsdWdpbiIsImxvYWRTZXR0aW5ncyIsImFkZFNldHRpbmdUYWIiLCJyZWdpc3Rlck1hcmtkb3duQ29kZUJsb2NrUHJvY2Vzc29yIiwicG9zdHByb2Nlc3NvciIsImFkZENvbW1hbmQiLCJhZGRDb2RlQmxvY2siLCJTdW1tYXJ5IiwibG9hZERhdGEiLCJzYXZlRGF0YSIsImluY2x1ZGVTdWJGb2xkZXJzIiwiZmlsZXMiLCJpdGVtIiwiZXh0ZW5zaW9uIiwiVEZvbGRlciIsImdldEZpbGVzSW5Gb2xkZXIiLCJmb2xkZXJUb1NlYXJjaCIsImVsIiwiY3R4IiwicmV0UmVuZGVySW5mbyIsInlhbWxUZXh0IiwicGFyc2VZYW1sIiwia2V5c0ZvdW5kSW5ZQU1MIiwibnVtRGF0YXNldHMiLCJzZWFyY2hTdWJUeXBlIiwicmV0U2VhcmNoVHlwZSIsInN0clR5cGUiLCJUYWciLCJGcm9udG1hdHRlciIsIldpa2kiLCJUZXh0IiwiZHZGaWVsZCIsIkZpbGVNZXRhIiwiVGFzayIsIm11bHRpcGxlVmFsdWVTcGFyYXRvciIsInJldE11bHRpcGxlVmFsdWVTcGFyYXRvciIsInJldFhEYXRhc2V0Iiwic2V0U2VwYXJhdG9yIiwic2V0U3ViVHlwZSIsImtleXNPZlJlbmRlckluZm8iLCJhZGRpdGlvbmFsQWxsb3dlZEtleXMiLCJ5YW1sTGluZUtleXMiLCJ5YW1sQmFyS2V5cyIsInlhbWxQaWVLZXlzIiwieWFtbFN1bW1hcnlLZXlzIiwieWFtbE1vbnRoS2V5cyIsInlhbWxIZWF0bWFwS2V5cyIsInlhbWxCdWxsZXRLZXlzIiwiYWJzdHJhY3RGb2xkZXIiLCJzdHJTdGFydERhdGUiLCJpc1N0YXJ0RGF0ZVZhbGlkIiwiaGVscGVyLnJlbERhdGVTdHJpbmdUb0RhdGUiLCJzdHJFbmREYXRlIiwiaXNFbmREYXRlVmFsaWQiLCJyZXREYXRhc2V0TmFtZSIsImluZFVudGl0bGVkIiwiU2V0IiwicmV0Q29uc3RWYWx1ZSIsInJldElnbm9yZUF0dGFjaGVkVmFsdWUiLCJyZXRJZ25vcmVaZXJvVmFsdWUiLCJyZXRBY2N1bSIsInJldFBlbmFsdHkiLCJyZXRWYWx1ZVNoaWZ0IiwicmV0TWFyZ2luIiwibGluZUtleSIsInlhbWxMaW5lIiwia2V5c09mTGluZUluZm8iLCJyZXRQYXJzZUNvbW1vbkNoYXJ0SW5mbyIsInJldExpbmVDb2xvciIsInJldExpbmVXaWR0aCIsInJldFNob3dMaW5lIiwicmV0U2hvd1BvaW50IiwicmV0UG9pbnRDb2xvciIsInJldFBvaW50Qm9yZGVyQ29sb3IiLCJyZXRQb2ludEJvcmRlcldpZHRoIiwicmV0UG9pbnRTaXplIiwicmV0RmlsbEdhcCIsInJldFlBeGlzTG9jYXRpb24iLCJiYXJLZXkiLCJ5YW1sQmFyIiwia2V5c09mQmFySW5mbyIsInJldEJhckNvbG9yIiwicGllS2V5IiwieWFtbFBpZSIsImtleXNPZlBpZUluZm8iLCJyZXREYXRhIiwibnVtRGF0YSIsInJldERhdGFDb2xvciIsInN1bW1hcnlLZXkiLCJ5YW1sU3VtbWFyeSIsImtleXNPZlN1bW1hcnlJbmZvIiwibW9udGhLZXkiLCJ5YW1sTW9udGgiLCJrZXlzT2ZNb250aEluZm8iLCJyZXREYXRhc2V0IiwicmV0VGhyZXNob2xkIiwiaW5kRGF0YXNldCIsImhlYXRtYXBLZXkiLCJ5YW1sSGVhdG1hcCIsImtleXNPZkhlYXRtYXBJbmZvIiwiYnVsbGV0S2V5IiwieWFtbEJ1bGxldCIsImtleXNPZkJ1bGxldEluZm8iLCJyZXRSYW5nZSIsIm51bVJhbmdlIiwicmV0UmFuZ2VDb2xvciIsImdldFJlbmRlckluZm9Gcm9tWWFtbCIsImdldEZpbGVzIiwiZmlsZUNvdW50ZXIiLCJsb29wRmlsZVByb21pc2VzIiwic29tZSIsImdldFR5cGUiLCJnZXRGaWxlQ2FjaGUiLCJhZGFwdGVyIiwicmVhZCIsInNraXBUaGlzRmlsZSIsInhEYXRhc2V0SWQiLCJ4RGF0ZSIsImNvbGxlY3RpbmcuZ2V0RGF0ZUZyb21GaWxlbmFtZSIsInhEYXRhc2V0UXVlcnkiLCJjb2xsZWN0aW5nLmdldERhdGVGcm9tRnJvbnRtYXR0ZXIiLCJjb2xsZWN0aW5nLmdldERhdGVGcm9tVGFnIiwiY29sbGVjdGluZy5nZXREYXRlRnJvbVRleHQiLCJjb2xsZWN0aW5nLmdldERhdGVGcm9tRHZGaWVsZCIsImNvbGxlY3RpbmcuZ2V0RGF0ZUZyb21GaWxlTWV0YSIsImNvbGxlY3RpbmcuZ2V0RGF0ZUZyb21UYXNrIiwibG9vcFF1ZXJ5UHJvbWlzZXMiLCJmcm9udE1hdHRlclRhZ3MiLCJ0YWdzIiwidGFnTWVhc3VyZSIsInRhZ0V4aXN0IiwidGFnIiwiY29sbGVjdGluZy5jb2xsZWN0RGF0YUZyb21Gcm9udG1hdHRlclRhZyIsInJldFBhcnNlIiwiZ2V0U2VwYXJhdG9yIiwiZ2V0QWNjZXNzb3IiLCJjb2xsZWN0aW5nLmNvbGxlY3REYXRhRnJvbUZyb250bWF0dGVyS2V5IiwibGlua3MiLCJsaW5rTWVhc3VyZSIsImxpbmtFeGlzdCIsImxpbmsiLCJsaW5rVmFsdWUiLCJjb2xsZWN0aW5nLmNvbGxlY3REYXRhRnJvbVdpa2kiLCJjb2xsZWN0aW5nLmNvbGxlY3REYXRhRnJvbUlubGluZVRhZyIsInRleHRNZWFzdXJlIiwidGV4dEV4aXN0IiwiY29sbGVjdGluZy5jb2xsZWN0RGF0YUZyb21UZXh0IiwiY29sbGVjdGluZy5jb2xsZWN0RGF0YUZyb21GaWxlTWV0YSIsImNvbGxlY3RpbmcuY29sbGVjdERhdGFGcm9tRHZGaWVsZCIsImNvbGxlY3RpbmcuY29sbGVjdERhdGFGcm9tVGFzayIsImFsbCIsInRhYmxlUXVlcmllcyIsInRhYmxlcyIsImlzWCIsInRhYmxlIiwidGFibGVEYXRhIiwieURhdGFzZXRRdWVyaWVzIiwidGV4dFRhYmxlIiwibWRUYWJsZVJlZ2V4IiwiaW5kVGFibGUiLCJ0YWJsZUxpbmVzIiwibnVtQ29sdW1ucyIsIm51bURhdGFSb3dzIiwiaGVhZGVyTGluZSIsImhlbHBlci50cmltQnlDaGFyIiwic2VwTGluZSIsInNwZXBMaW5lU3BsaXR0ZWQiLCJjb2x1bW5YRGF0YXNldCIsInhWYWx1ZXMiLCJ0YWJsZUxpbmUiLCJkYXRhUm93U3BsaXR0ZWQiLCJ5RGF0YXNldFF1ZXJ5IiwiY29sdW1uT2ZJbnRlcmVzdCIsImluZExpbmUiLCJjb2xsZWN0aW5nLmFkZFRvRGF0YU1hcCIsInNwbGl0dGVkUGFydCIsImNyZWF0ZURhdGFzZXQiLCJwYWlyIiwiaW5kUGFpciIsImNvbGxlY3RlZCIsInNldFBlbmFsdHkiLCJhY2N1bXVsYXRlVmFsdWVzIiwicmV0IiwicGllLnJlbmRlclBpZUNoYXJ0Iiwic3VtbWFyeS5yZW5kZXJTdW1tYXJ5IiwiYnVsbGV0LnJlbmRlckJ1bGxldCIsIm1vbnRoLnJlbmRlck1vbnRoIiwiaGVhdG1hcC5yZW5kZXJIZWF0bWFwIiwicmVuZGVyIiwid29ya3NwYWNlIiwiZ2V0QWN0aXZlVmlld09mVHlwZSIsIk1hcmtkb3duVmlldyIsImVkaXRvciIsIm91dHB1dFR5cGUiLCJhY3RpdmVMZWFmIiwidmlldyIsImNvZGVibG9ja1RvSW5zZXJ0IiwiaW5zZXJ0VG9OZXh0TGluZSIsImdldEVkaXRvciIsImN1cnNvciIsImdldEN1cnNvciIsImxpbmVOdW1iZXIiLCJnZXRMaW5lIiwic2V0U2VsZWN0aW9uIiwicmVwbGFjZVNlbGVjdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Z0ZBcUVPLFNBQVNBLEVBQVVDLEVBQVNDLEVBQVlDLEVBQUdDLEdBRTlDLE9BQU8sSUFBS0QsSUFBTUEsRUFBSUUsV0FBVSxTQUFVQyxFQUFTQyxHQUMvQyxTQUFTQyxFQUFVQyxHQUFTLElBQU1DLEVBQUtOLEVBQVVPLEtBQUtGLElBQVcsTUFBT0csR0FBS0wsRUFBT0ssSUFDcEYsU0FBU0MsRUFBU0osR0FBUyxJQUFNQyxFQUFLTixFQUFpQixNQUFFSyxJQUFXLE1BQU9HLEdBQUtMLEVBQU9LLElBQ3ZGLFNBQVNGLEVBQUtJLEdBSmxCLElBQWVMLEVBSWFLLEVBQU9DLEtBQU9ULEVBQVFRLEVBQU9MLFFBSjFDQSxFQUl5REssRUFBT0wsTUFKaERBLGFBQWlCTixF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

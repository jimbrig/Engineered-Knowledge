"use strict";var t=require("obsidian");function e(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var n=e(t);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function r(t,e,n,r){return new(n||(n=Promise))((function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function l(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,l)}u((r=r.apply(t,e||[])).next())}))}function a(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function i(t){let e=t,n=t;function r(t,e,r,a){for(null==r&&(r=0),null==a&&(a=t.length);r<a;){const i=r+a>>>1;n(t[i],e)<0?r=i+1:a=i}return r}return 1===t.length&&(e=(e,n)=>t(e)-n,n=function(t){return(e,n)=>a(t(e),n)}(t)),{left:r,center:function(t,n,a,i){null==a&&(a=0),null==i&&(i=t.length);const o=r(t,n,a,i-1);return o>a&&e(t[o-1],n)>-e(t[o],n)?o-1:o},right:function(t,e,r,a){for(null==r&&(r=0),null==a&&(a=t.length);r<a;){const i=r+a>>>1;n(t[i],e)>0?a=i:r=i+1}return r}}}const o=i(a).right;function l(t,e,n){return t(n={path:e,exports:{},require:function(t,e){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==e&&n.path)}},n.exports),n.exports}i((function(t){return null===t?NaN:+t})).center;var u=Math.sqrt(50),s=Math.sqrt(10),c=Math.sqrt(2);function f(t,e,n){var r=(e-t)/Math.max(0,n),a=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,a);return a>=0?(i>=u?10:i>=s?5:i>=c?2:1)*Math.pow(10,a):-Math.pow(10,-a)/(i>=u?10:i>=s?5:i>=c?2:1)}function h(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),a=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/a;return i>=u?a*=10:i>=s?a*=5:i>=c&&(a*=2),e<t?-a:a}function d(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n<e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let a of t)null!=(a=e(a,++r,t))&&(n<a||void 0===n&&a>=a)&&(n=a)}return n}function g(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n>e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let a of t)null!=(a=e(a,++r,t))&&(n>a||void 0===n&&a>=a)&&(n=a)}return n}function p(t,e,n=0,r=t.length-1,i=a){for(;r>n;){if(r-n>600){const a=r-n+1,o=e-n+1,l=Math.log(a),u=.5*Math.exp(2*l/3),s=.5*Math.sqrt(l*u*(a-u)/a)*(o-a/2<0?-1:1);p(t,e,Math.max(n,Math.floor(e-o*u/a+s)),Math.min(r,Math.floor(e+(a-o)*u/a+s)),i)}const a=t[e];let o=n,l=r;for(m(t,n,e),i(t[r],a)>0&&m(t,n,r);o<l;){for(m(t,o,l),++o,--l;i(t[o],a)<0;)++o;for(;i(t[l],a)>0;)--l}0===i(t[n],a)?m(t,n,l):(++l,m(t,l,r)),l<=e&&(n=l+1),e<=l&&(r=l-1)}return t}function m(t,e,n){const r=t[e];t[e]=t[n],t[n]=r}function y(t,e,n){if(r=(t=Float64Array.from(function*(t,e){if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(yield e);else{let n=-1;for(let r of t)null!=(r=e(r,++n,t))&&(r=+r)>=r&&(yield r)}}(t,n))).length){if((e=+e)<=0||r<2)return g(t);if(e>=1)return d(t);var r,a=(r-1)*e,i=Math.floor(a),o=d(p(t,i).subarray(0,i+1));return o+(g(t.subarray(i+1))-o)*(a-i)}}function v(t,e,n){t=+t,e=+e,n=(a=arguments.length)<2?(e=t,t=0,1):a<3?1:+n;for(var r=-1,a=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(a);++r<a;)i[r]=t+r*n;return i}function w(t,e){let n=0;if(void 0===e)for(let e of t)(e=+e)&&(n+=e);else{let r=-1;for(let a of t)(a=+e(a,++r,t))&&(n+=a)}return n}var A=Array.prototype.slice;function x(t){return t}function b(t){return"translate("+t+",0)"}function D(t){return"translate(0,"+t+")"}function C(t){return e=>+t(e)}function F(t,e){return e=Math.max(0,t.bandwidth()-2*e)/2,t.round()&&(e=Math.round(e)),n=>+t(n)+e}function M(){return!this.__axis}function k(t,e){var n=[],r=null,a=null,i=6,o=6,l=3,u="undefined"!=typeof window&&window.devicePixelRatio>1?0:.5,s=1===t||4===t?-1:1,c=4===t||2===t?"x":"y",f=1===t||3===t?b:D;function h(h){var d=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,g=null==a?e.tickFormat?e.tickFormat.apply(e,n):x:a,p=Math.max(i,0)+l,m=e.range(),y=+m[0]+u,v=+m[m.length-1]+u,w=(e.bandwidth?F:C)(e.copy(),u),A=h.selection?h.selection():h,b=A.selectAll(".domain").data([null]),D=A.selectAll(".tick").data(d,e).order(),k=D.exit(),T=D.enter().append("g").attr("class","tick"),_=D.select("line"),S=D.select("text");b=b.merge(b.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),D=D.merge(T),_=_.merge(T.append("line").attr("stroke","currentColor").attr(c+"2",s*i)),S=S.merge(T.append("text").attr("fill","currentColor").attr(c,s*p).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),h!==A&&(b=b.transition(h),D=D.transition(h),_=_.transition(h),S=S.transition(h),k=k.transition(h).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=w(t))?f(t+u):this.getAttribute("transform")})),T.attr("opacity",1e-6).attr("transform",(function(t){var e=this.parentNode.__axis;return f((e&&isFinite(e=e(t))?e:w(t))+u)}))),k.remove(),b.attr("d",4===t||2===t?o?"M"+s*o+","+y+"H"+u+"V"+v+"H"+s*o:"M"+u+","+y+"V"+v:o?"M"+y+","+s*o+"V"+u+"H"+v+"V"+s*o:"M"+y+","+u+"H"+v),D.attr("opacity",1).attr("transform",(function(t){return f(w(t)+u)})),_.attr(c+"2",s*i),S.attr(c,s*p).text(g),A.filter(M).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),A.each((function(){this.__axis=w}))}return h.scale=function(t){return arguments.length?(e=t,h):e},h.ticks=function(){return n=A.call(arguments),h},h.tickArguments=function(t){return arguments.length?(n=null==t?[]:A.call(t),h):n.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:A.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(a=t,h):a},h.tickSize=function(t){return arguments.length?(i=o=+t,h):i},h.tickSizeInner=function(t){return arguments.length?(i=+t,h):i},h.tickSizeOuter=function(t){return arguments.length?(o=+t,h):o},h.tickPadding=function(t){return arguments.length?(l=+t,h):l},h.offset=function(t){return arguments.length?(u=+t,h):u},h}function T(t){return k(3,t)}function _(t){return k(4,t)}var S={value:()=>{}};function N(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new B(r)}function B(t){this._=t}function E(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function I(t,e){for(var n,r=0,a=t.length;r<a;++r)if((n=t[r]).name===e)return n.value}function L(t,e,n){for(var r=0,a=t.length;r<a;++r)if(t[r].name===e){t[r]=S,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}B.prototype=N.prototype={constructor:B,on:function(t,e){var n,r=this._,a=E(t+"",r),i=-1,o=a.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++i<o;)if(n=(t=a[i]).type)r[n]=L(r[n],t.name,e);else if(null==e)for(n in r)r[n]=L(r[n],t.name,null);return this}for(;++i<o;)if((n=(t=a[i]).type)&&(n=I(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new B(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,a=new Array(n),i=0;i<n;++i)a[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,a)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],a=0,i=r.length;a<i;++a)r[a].value.apply(e,n)}};var P="http://www.w3.org/1999/xhtml",Y={svg:"http://www.w3.org/2000/svg",xhtml:P,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function V(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),Y.hasOwnProperty(e)?{space:Y[e],local:t}:t}function z(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===P&&e.documentElement.namespaceURI===P?e.createElement(t):e.createElementNS(n,t)}}function U(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function O(t){var e=V(t);return(e.local?U:z)(e)}function H(){}function R(t){return null==t?H:function(){return this.querySelector(t)}}function W(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function q(){return[]}function X(t){return null==t?q:function(){return this.querySelectorAll(t)}}function $(t){return function(){return this.matches(t)}}function j(t){return function(e){return e.matches(t)}}var Z=Array.prototype.find;function G(){return this.firstElementChild}var Q=Array.prototype.filter;function J(){return this.children}function K(t){return new Array(t.length)}function tt(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function et(t){return function(){return t}}function nt(t,e,n,r,a,i){for(var o,l=0,u=e.length,s=i.length;l<s;++l)(o=e[l])?(o.__data__=i[l],r[l]=o):n[l]=new tt(t,i[l]);for(;l<u;++l)(o=e[l])&&(a[l]=o)}function rt(t,e,n,r,a,i,o){var l,u,s,c=new Map,f=e.length,h=i.length,d=new Array(f);for(l=0;l<f;++l)(u=e[l])&&(d[l]=s=o.call(u,u.__data__,l,e)+"",c.has(s)?a[l]=u:c.set(s,u));for(l=0;l<h;++l)s=o.call(t,i[l],l,i)+"",(u=c.get(s))?(r[l]=u,u.__data__=i[l],c.delete(s)):n[l]=new tt(t,i[l]);for(l=0;l<f;++l)(u=e[l])&&c.get(d[l])===u&&(a[l]=u)}function at(t){return t.__data__}function it(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function ot(t){return function(){this.removeAttribute(t)}}function lt(t){return function(){this.removeAttributeNS(t.space,t.local)}}function ut(t,e){return function(){this.setAttribute(t,e)}}function st(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function ct(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function ft(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function ht(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function dt(t){return function(){this.style.removeProperty(t)}}function gt(t,e,n){return function(){this.style.setProperty(t,e,n)}}function pt(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function mt(t,e){return t.style.getPropertyValue(e)||ht(t).getComputedStyle(t,null).getPropertyValue(e)}function yt(t){return function(){delete this[t]}}function vt(t,e){return function(){this[t]=e}}function wt(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function At(t){return t.trim().split(/^|\s+/)}function xt(t){return t.classList||new bt(t)}function bt(t){this._node=t,this._names=At(t.getAttribute("class")||"")}function Dt(t,e){for(var n=xt(t),r=-1,a=e.length;++r<a;)n.add(e[r])}function Ct(t,e){for(var n=xt(t),r=-1,a=e.length;++r<a;)n.remove(e[r])}function Ft(t){return function(){Dt(this,t)}}function Mt(t){return function(){Ct(this,t)}}function kt(t,e){return function(){(e.apply(this,arguments)?Dt:Ct)(this,t)}}function Tt(){this.textContent=""}function _t(t){return function(){this.textContent=t}}function St(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function Nt(){this.innerHTML=""}function Bt(t){return function(){this.innerHTML=t}}function Et(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function It(){this.nextSibling&&this.parentNode.appendChild(this)}function Lt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Pt(){return null}function Yt(){var t=this.parentNode;t&&t.removeChild(this)}function Vt(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function zt(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Ut(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function Ot(t){return function(){var e=this.__on;if(e){for(var n,r=0,a=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++a]=n:this.removeEventListener(n.type,n.listener,n.options);++a?e.length=a:delete this.__on}}}function Ht(t,e,n){return function(){var r,a=this.__on,i=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(a)for(var o=0,l=a.length;o<l;++o)if((r=a[o]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=i,r.options=n),void(r.value=e);this.addEventListener(t.type,i,n),r={type:t.type,name:t.name,value:e,listener:i,options:n},a?a.push(r):this.__on=[r]}}function Rt(t,e,n){var r=ht(t),a=r.CustomEvent;"function"==typeof a?a=new a(e,n):(a=r.document.createEvent("Event"),n?(a.initEvent(e,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(e,!1,!1)),t.dispatchEvent(a)}function Wt(t,e){return function(){return Rt(this,t,e)}}function qt(t,e){return function(){return Rt(this,t,e.apply(this,arguments))}}tt.prototype={constructor:tt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}},bt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Xt=[null];function $t(t,e){this._groups=t,this._parents=e}function jt(){return new $t([[document.documentElement]],Xt)}function Zt(t){return"string"==typeof t?new $t([[document.querySelector(t)]],[document.documentElement]):new $t([[t]],Xt)}function Gt(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function Qt(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Jt(){}$t.prototype=jt.prototype={constructor:$t,select:function(t){"function"!=typeof t&&(t=R(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o,l=e[a],u=l.length,s=r[a]=new Array(u),c=0;c<u;++c)(i=l[c])&&(o=t.call(i,i.__data__,c,l))&&("__data__"in i&&(o.__data__=i.__data__),s[c]=o);return new $t(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);return null==e?[]:W(e)}}(t):X(t);for(var e=this._groups,n=e.length,r=[],a=[],i=0;i<n;++i)for(var o,l=e[i],u=l.length,s=0;s<u;++s)(o=l[s])&&(r.push(t.call(o,o.__data__,s,l)),a.push(o));return new $t(r,a)},selectChild:function(t){return this.select(null==t?G:function(t){return function(){return Z.call(this.children,t)}}("function"==typeof t?t:j(t)))},selectChildren:function(t){return this.selectAll(null==t?J:function(t){return function(){return Q.call(this.children,t)}}("function"==typeof t?t:j(t)))},filter:function(t){"function"!=typeof t&&(t=$(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],l=o.length,u=r[a]=[],s=0;s<l;++s)(i=o[s])&&t.call(i,i.__data__,s,o)&&u.push(i);return new $t(r,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,at);var n=e?rt:nt,r=this._parents,a=this._groups;"function"!=typeof t&&(t=et(t));for(var i=a.length,o=new Array(i),l=new Array(i),u=new Array(i),s=0;s<i;++s){var c=r[s],f=a[s],h=f.length,d=W(t.call(c,c&&c.__data__,s,r)),g=d.length,p=l[s]=new Array(g),m=o[s]=new Array(g),y=u[s]=new Array(h);n(c,f,p,m,y,d,e);for(var v,w,A=0,x=0;A<g;++A)if(v=p[A]){for(A>=x&&(x=A+1);!(w=m[x])&&++x<g;);v._next=w||null}}return(o=new $t(o,r))._enter=l,o._exit=u,o},enter:function(){return new $t(this._enter||this._groups.map(K),this._parents)},exit:function(){return new $t(this._exit||this._groups.map(K),this._parents)},join:function(t,e,n){var r=this.enter(),a=this,i=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(a=e(a)),null==n?i.remove():n(i),r&&a?r.merge(a).order():a},merge:function(t){if(!(t instanceof $t))throw new Error("invalid merge");for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),l=0;l<i;++l)for(var u,s=e[l],c=n[l],f=s.length,h=o[l]=new Array(f),d=0;d<f;++d)(u=s[d]||c[d])&&(h[d]=u);for(;l<r;++l)o[l]=e[l];return new $t(o,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,a=t[e],i=a.length-1,o=a[i];--i>=0;)(r=a[i])&&(o&&4^r.compareDocumentPosition(o)&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=it);for(var n=this._groups,r=n.length,a=new Array(r),i=0;i<r;++i){for(var o,l=n[i],u=l.length,s=a[i]=new Array(u),c=0;c<u;++c)(o=l[c])&&(s[c]=o);s.sort(e)}return new $t(a,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],a=0,i=r.length;a<i;++a){var o=r[a];if(o)return o}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var a,i=e[n],o=0,l=i.length;o<l;++o)(a=i[o])&&t.call(a,a.__data__,o,i);return this},attr:function(t,e){var n=V(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?lt:ot:"function"==typeof e?n.local?ft:ct:n.local?st:ut)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?dt:"function"==typeof e?pt:gt)(t,e,null==n?"":n)):mt(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?yt:"function"==typeof e?wt:vt)(t,e)):this.node()[t]},classed:function(t,e){var n=At(t+"");if(arguments.length<2){for(var r=xt(this.node()),a=-1,i=n.length;++a<i;)if(!r.contains(n[a]))return!1;return!0}return this.each(("function"==typeof e?kt:e?Ft:Mt)(n,e))},text:function(t){return arguments.length?this.each(null==t?Tt:("function"==typeof t?St:_t)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Nt:("function"==typeof t?Et:Bt)(t)):this.node().innerHTML},raise:function(){return this.each(It)},lower:function(){return this.each(Lt)},append:function(t){var e="function"==typeof t?t:O(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:O(t),r=null==e?Pt:"function"==typeof e?e:R(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Yt)},clone:function(t){return this.select(t?zt:Vt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,a,i=Ut(t+""),o=i.length;if(!(arguments.length<2)){for(l=e?Ht:Ot,r=0;r<o;++r)this.each(l(i[r],e,n));return this}var l=this.node().__on;if(l)for(var u,s=0,c=l.length;s<c;++s)for(r=0,u=l[s];r<o;++r)if((a=i[r]).type===u.type&&a.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?qt:Wt)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r,a=t[e],i=0,o=a.length;i<o;++i)(r=a[i])&&(yield r)}};var Kt=1/.7,te="\\s*([+-]?\\d+)\\s*",ee="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",ne="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",re=/^#([0-9a-f]{3,8})$/,ae=new RegExp("^rgb\\("+[te,te,te]+"\\)$"),ie=new RegExp("^rgb\\("+[ne,ne,ne]+"\\)$"),oe=new RegExp("^rgba\\("+[te,te,te,ee]+"\\)$"),le=new RegExp("^rgba\\("+[ne,ne,ne,ee]+"\\)$"),ue=new RegExp("^hsl\\("+[ee,ne,ne]+"\\)$"),se=new RegExp("^hsla\\("+[ee,ne,ne,ee]+"\\)$"),ce={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function fe(){return this.rgb().formatHex()}function he(){return this.rgb().formatRgb()}function de(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=re.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?ge(e):3===n?new ve(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?pe(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?pe(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=ae.exec(t))?new ve(e[1],e[2],e[3],1):(e=ie.exec(t))?new ve(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=oe.exec(t))?pe(e[1],e[2],e[3],e[4]):(e=le.exec(t))?pe(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=ue.exec(t))?be(e[1],e[2]/100,e[3]/100,1):(e=se.exec(t))?be(e[1],e[2]/100,e[3]/100,e[4]):ce.hasOwnProperty(t)?ge(ce[t]):"transparent"===t?new ve(NaN,NaN,NaN,0):null}function ge(t){return new ve(t>>16&255,t>>8&255,255&t,1)}function pe(t,e,n,r){return r<=0&&(t=e=n=NaN),new ve(t,e,n,r)}function me(t){return t instanceof Jt||(t=de(t)),t?new ve((t=t.rgb()).r,t.g,t.b,t.opacity):new ve}function ye(t,e,n,r){return 1===arguments.length?me(t):new ve(t,e,n,null==r?1:r)}function ve(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function we(){return"#"+xe(this.r)+xe(this.g)+xe(this.b)}function Ae(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function xe(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function be(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Ce(t,e,n,r)}function De(t){if(t instanceof Ce)return new Ce(t.h,t.s,t.l,t.opacity);if(t instanceof Jt||(t=de(t)),!t)return new Ce;if(t instanceof Ce)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,a=Math.min(e,n,r),i=Math.max(e,n,r),o=NaN,l=i-a,u=(i+a)/2;return l?(o=e===i?(n-r)/l+6*(n<r):n===i?(r-e)/l+2:(e-n)/l+4,l/=u<.5?i+a:2-i-a,o*=60):l=u>0&&u<1?0:o,new Ce(o,l,u,t.opacity)}function Ce(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Fe(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}Gt(Jt,de,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:fe,formatHex:fe,formatHsl:function(){return De(this).formatHsl()},formatRgb:he,toString:he}),Gt(ve,ye,Qt(Jt,{brighter:function(t){return t=null==t?Kt:Math.pow(Kt,t),new ve(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ve(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:we,formatHex:we,formatRgb:Ae,toString:Ae})),Gt(Ce,(function(t,e,n,r){return 1===arguments.length?De(t):new Ce(t,e,n,null==r?1:r)}),Qt(Jt,{brighter:function(t){return t=null==t?Kt:Math.pow(Kt,t),new Ce(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ce(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,a=2*n-r;return new ve(Fe(t>=240?t-240:t+120,a,r),Fe(t,a,r),Fe(t<120?t+240:t-120,a,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));const Me=Math.PI/180,ke=180/Math.PI,Te=4/29,_e=6/29,Se=3*_e*_e;function Ne(t){if(t instanceof Ee)return new Ee(t.l,t.a,t.b,t.opacity);if(t instanceof ze)return Ue(t);t instanceof ve||(t=me(t));var e,n,r=Ye(t.r),a=Ye(t.g),i=Ye(t.b),o=Ie((.2225045*r+.7168786*a+.0606169*i)/1);return r===a&&a===i?e=n=o:(e=Ie((.4360747*r+.3850649*a+.1430804*i)/.96422),n=Ie((.0139322*r+.0971045*a+.7141733*i)/.82521)),new Ee(116*o-16,500*(e-o),200*(o-n),t.opacity)}function Be(t,e,n,r){return 1===arguments.length?Ne(t):new Ee(t,e,n,null==r?1:r)}function Ee(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function Ie(t){return t>.008856451679035631?Math.pow(t,1/3):t/Se+Te}function Le(t){return t>_e?t*t*t:Se*(t-Te)}function Pe(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Ye(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Ve(t){if(t instanceof ze)return new ze(t.h,t.c,t.l,t.opacity);if(t instanceof Ee||(t=Ne(t)),0===t.a&&0===t.b)return new ze(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*ke;return new ze(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function ze(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function Ue(t){if(isNaN(t.h))return new Ee(t.l,0,0,t.opacity);var e=t.h*Me;return new Ee(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}Gt(Ee,Be,Qt(Jt,{brighter:function(t){return new Ee(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Ee(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new ve(Pe(3.1338561*(e=.96422*Le(e))-1.6168667*(t=1*Le(t))-.4906146*(n=.82521*Le(n))),Pe(-.9787684*e+1.9161415*t+.033454*n),Pe(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),Gt(ze,(function(t,e,n,r){return 1===arguments.length?Ve(t):new ze(t,e,n,null==r?1:r)}),Qt(Jt,{brighter:function(t){return new ze(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new ze(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Ue(this).rgb()}}));var Oe,He,Re=0,We=0,qe=0,Xe=0,$e=0,je=0,Ze="object"==typeof performance&&performance.now?performance:Date,Ge="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Qe(){return $e||(Ge(Je),$e=Ze.now()+je)}function Je(){$e=0}function Ke(){this._call=this._time=this._next=null}function tn(t,e,n){var r=new Ke;return r.restart(t,e,n),r}function en(){$e=(Xe=Ze.now())+je,Re=We=0;try{!function(){Qe(),++Re;for(var t,e=Oe;e;)(t=$e-e._time)>=0&&e._call.call(null,t),e=e._next;--Re}()}finally{Re=0,function(){var t,e,n=Oe,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Oe=e);He=t,rn(r)}(),$e=0}}function nn(){var t=Ze.now(),e=t-Xe;e>1e3&&(je-=e,Xe=t)}function rn(t){Re||(We&&(We=clearTimeout(We)),t-$e>24?(t<1/0&&(We=setTimeout(en,t-Ze.now()-je)),qe&&(qe=clearInterval(qe))):(qe||(Xe=Ze.now(),qe=setInterval(nn,1e3)),Re=1,Ge(en)))}function an(t,e,n){var r=new Ke;return e=null==e?0:+e,r.restart((n=>{r.stop(),t(n+e)}),e,n),r}Ke.prototype=tn.prototype={constructor:Ke,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Qe():+n)+(null==e?0:+e),this._next||He===this||(He?He._next=this:Oe=this,He=this),this._call=t,this._time=n,rn()},stop:function(){this._call&&(this._call=null,this._time=1/0,rn())}};var on=N("start","end","cancel","interrupt"),ln=[];function un(t,e,n,r,a,i){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var r,a=t.__transition;function i(t){n.state=1,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}function o(i){var s,c,f,h;if(1!==n.state)return u();for(s in a)if((h=a[s]).name===n.name){if(3===h.state)return an(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete a[s]):+s<e&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete a[s])}if(an((function(){3===n.state&&(n.state=4,n.timer.restart(l,n.delay,n.time),l(i))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(f=n.tween.length),s=0,c=-1;s<f;++s)(h=n.tween[s].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=h);r.length=c+1}}function l(e){for(var a=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(u),n.state=5,1),i=-1,o=r.length;++i<o;)r[i].call(t,a);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),u())}function u(){for(var r in n.state=6,n.timer.stop(),delete a[e],a)return;delete t.__transition}a[e]=n,n.timer=tn(i,0,n.time)}(t,n,{name:e,index:r,group:a,on:on,tween:ln,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:0})}function sn(t,e){var n=fn(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function cn(t,e){var n=fn(t,e);if(n.state>3)throw new Error("too late; already running");return n}function fn(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var hn=t=>()=>t;function dn(t){return 1==(t=+t)?gn:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):hn(isNaN(e)?n:e)}}function gn(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):hn(isNaN(t)?e:t)}var pn=function t(e){var n=dn(e);function r(t,e){var r=n((t=ye(t)).r,(e=ye(e)).r),a=n(t.g,e.g),i=n(t.b,e.b),o=gn(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=a(e),t.b=i(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);function mn(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}var yn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,vn=new RegExp(yn.source,"g");function wn(t,e){var n,r,a,i=yn.lastIndex=vn.lastIndex=0,o=-1,l=[],u=[];for(t+="",e+="";(n=yn.exec(t))&&(r=vn.exec(e));)(a=r.index)>i&&(a=e.slice(i,a),l[o]?l[o]+=a:l[++o]=a),(n=n[0])===(r=r[0])?l[o]?l[o]+=r:l[++o]=r:(l[++o]=null,u.push({i:o,x:mn(n,r)})),i=vn.lastIndex;return i<e.length&&(a=e.slice(i),l[o]?l[o]+=a:l[++o]=a),l.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)l[(n=u[r]).i]=n.x(t);return l.join("")})}var An,xn=180/Math.PI,bn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Dn(t,e,n,r,a,i){var o,l,u;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(u=t*n+e*r)&&(n-=t*u,r-=e*u),(l=Math.sqrt(n*n+r*r))&&(n/=l,r/=l,u/=l),t*r<e*n&&(t=-t,e=-e,u=-u,o=-o),{translateX:a,translateY:i,rotate:Math.atan2(e,t)*xn,skewX:Math.atan(u)*xn,scaleX:o,scaleY:l}}function Cn(t,e,n,r){function a(t){return t.length?t.pop()+" ":""}return function(i,o){var l=[],u=[];return i=t(i),o=t(o),function(t,r,a,i,o,l){if(t!==a||r!==i){var u=o.push("translate(",null,e,null,n);l.push({i:u-4,x:mn(t,a)},{i:u-2,x:mn(r,i)})}else(a||i)&&o.push("translate("+a+e+i+n)}(i.translateX,i.translateY,o.translateX,o.translateY,l,u),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(a(n)+"rotate(",null,r)-2,x:mn(t,e)})):e&&n.push(a(n)+"rotate("+e+r)}(i.rotate,o.rotate,l,u),function(t,e,n,i){t!==e?i.push({i:n.push(a(n)+"skewX(",null,r)-2,x:mn(t,e)}):e&&n.push(a(n)+"skewX("+e+r)}(i.skewX,o.skewX,l,u),function(t,e,n,r,i,o){if(t!==n||e!==r){var l=i.push(a(i)+"scale(",null,",",null,")");o.push({i:l-4,x:mn(t,n)},{i:l-2,x:mn(e,r)})}else 1===n&&1===r||i.push(a(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,o.scaleX,o.scaleY,l,u),i=o=null,function(t){for(var e,n=-1,r=u.length;++n<r;)l[(e=u[n]).i]=e.x(t);return l.join("")}}}var Fn=Cn((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?bn:Dn(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),Mn=Cn((function(t){return null==t?bn:(An||(An=document.createElementNS("http://www.w3.org/2000/svg","g")),An.setAttribute("transform",t),(t=An.transform.baseVal.consolidate())?Dn((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):bn)}),", ",")",")");function kn(t,e){var n,r;return function(){var a=cn(this,t),i=a.tween;if(i!==n)for(var o=0,l=(r=n=i).length;o<l;++o)if(r[o].name===e){(r=r.slice()).splice(o,1);break}a.tween=r}}function Tn(t,e,n){var r,a;if("function"!=typeof n)throw new Error;return function(){var i=cn(this,t),o=i.tween;if(o!==r){a=(r=o).slice();for(var l={name:e,value:n},u=0,s=a.length;u<s;++u)if(a[u].name===e){a[u]=l;break}u===s&&a.push(l)}i.tween=a}}function _n(t,e,n){var r=t._id;return t.each((function(){var t=cn(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return fn(t,r).value[e]}}function Sn(t,e){var n;return("number"==typeof e?mn:e instanceof de?pn:(n=de(e))?(e=n,pn):wn)(t,e)}function Nn(t){return function(){this.removeAttribute(t)}}function Bn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function En(t,e,n){var r,a,i=n+"";return function(){var o=this.getAttribute(t);return o===i?null:o===r?a:a=e(r=o,n)}}function In(t,e,n){var r,a,i=n+"";return function(){var o=this.getAttributeNS(t.space,t.local);return o===i?null:o===r?a:a=e(r=o,n)}}function Ln(t,e,n){var r,a,i;return function(){var o,l,u=n(this);if(null!=u)return(o=this.getAttribute(t))===(l=u+"")?null:o===r&&l===a?i:(a=l,i=e(r=o,u));this.removeAttribute(t)}}function Pn(t,e,n){var r,a,i;return function(){var o,l,u=n(this);if(null!=u)return(o=this.getAttributeNS(t.space,t.local))===(l=u+"")?null:o===r&&l===a?i:(a=l,i=e(r=o,u));this.removeAttributeNS(t.space,t.local)}}function Yn(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}function Vn(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}function zn(t,e){var n,r;function a(){var a=e.apply(this,arguments);return a!==r&&(n=(r=a)&&Vn(t,a)),n}return a._value=e,a}function Un(t,e){var n,r;function a(){var a=e.apply(this,arguments);return a!==r&&(n=(r=a)&&Yn(t,a)),n}return a._value=e,a}function On(t,e){return function(){sn(this,t).delay=+e.apply(this,arguments)}}function Hn(t,e){return e=+e,function(){sn(this,t).delay=e}}function Rn(t,e){return function(){cn(this,t).duration=+e.apply(this,arguments)}}function Wn(t,e){return e=+e,function(){cn(this,t).duration=e}}function qn(t,e){if("function"!=typeof e)throw new Error;return function(){cn(this,t).ease=e}}function Xn(t,e,n){var r,a,i=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?sn:cn;return function(){var o=i(this,t),l=o.on;l!==r&&(a=(r=l).copy()).on(e,n),o.on=a}}var $n=jt.prototype.constructor;function jn(t){return function(){this.style.removeProperty(t)}}function Zn(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}function Gn(t,e,n){var r,a;function i(){var i=e.apply(this,arguments);return i!==a&&(r=(a=i)&&Zn(t,i,n)),r}return i._value=e,i}function Qn(t){return function(e){this.textContent=t.call(this,e)}}function Jn(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&Qn(r)),e}return r._value=t,r}var Kn=0;function tr(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function er(){return++Kn}var nr=jt.prototype;tr.prototype={constructor:tr,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=R(t));for(var r=this._groups,a=r.length,i=new Array(a),o=0;o<a;++o)for(var l,u,s=r[o],c=s.length,f=i[o]=new Array(c),h=0;h<c;++h)(l=s[h])&&(u=t.call(l,l.__data__,h,s))&&("__data__"in l&&(u.__data__=l.__data__),f[h]=u,un(f[h],e,n,h,f,fn(l,n)));return new tr(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=X(t));for(var r=this._groups,a=r.length,i=[],o=[],l=0;l<a;++l)for(var u,s=r[l],c=s.length,f=0;f<c;++f)if(u=s[f]){for(var h,d=t.call(u,u.__data__,f,s),g=fn(u,n),p=0,m=d.length;p<m;++p)(h=d[p])&&un(h,e,n,p,d,g);i.push(d),o.push(u)}return new tr(i,o,e,n)},filter:function(t){"function"!=typeof t&&(t=$(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],l=o.length,u=r[a]=[],s=0;s<l;++s)(i=o[s])&&t.call(i,i.__data__,s,o)&&u.push(i);return new tr(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),l=0;l<i;++l)for(var u,s=e[l],c=n[l],f=s.length,h=o[l]=new Array(f),d=0;d<f;++d)(u=s[d]||c[d])&&(h[d]=u);for(;l<r;++l)o[l]=e[l];return new tr(o,this._parents,this._name,this._id)},selection:function(){return new $n(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=er(),r=this._groups,a=r.length,i=0;i<a;++i)for(var o,l=r[i],u=l.length,s=0;s<u;++s)if(o=l[s]){var c=fn(o,e);un(o,t,n,s,l,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new tr(r,this._parents,t,n)},call:nr.call,nodes:nr.nodes,node:nr.node,size:nr.size,empty:nr.empty,each:nr.each,on:function(t,e){var n=this._id;return arguments.length<2?fn(this.node(),n).on.on(t):this.each(Xn(n,t,e))},attr:function(t,e){var n=V(t),r="transform"===n?Mn:Sn;return this.attrTween(t,"function"==typeof e?(n.local?Pn:Ln)(n,r,_n(this,"attr."+t,e)):null==e?(n.local?Bn:Nn)(n):(n.local?In:En)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=V(t);return this.tween(n,(r.local?zn:Un)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Fn:Sn;return null==e?this.styleTween(t,function(t,e){var n,r,a;return function(){var i=mt(this,t),o=(this.style.removeProperty(t),mt(this,t));return i===o?null:i===n&&o===r?a:a=e(n=i,r=o)}}(t,r)).on("end.style."+t,jn(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,a,i;return function(){var o=mt(this,t),l=n(this),u=l+"";return null==l&&(this.style.removeProperty(t),u=l=mt(this,t)),o===u?null:o===r&&u===a?i:(a=u,i=e(r=o,l))}}(t,r,_n(this,"style."+t,e))).each(function(t,e){var n,r,a,i,o="style."+e,l="end."+o;return function(){var u=cn(this,t),s=u.on,c=null==u.value[o]?i||(i=jn(e)):void 0;s===n&&a===c||(r=(n=s).copy()).on(l,a=c),u.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,a,i=n+"";return function(){var o=mt(this,t);return o===i?null:o===r?a:a=e(r=o,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,Gn(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(_n(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,Jn(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,a=fn(this.node(),n).tween,i=0,o=a.length;i<o;++i)if((r=a[i]).name===t)return r.value;return null}return this.each((null==e?kn:Tn)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?On:Hn)(e,t)):fn(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Rn:Wn)(e,t)):fn(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(qn(e,t)):fn(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;cn(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,r=n._id,a=n.size();return new Promise((function(i,o){var l={value:o},u={value:function(){0==--a&&i()}};n.each((function(){var n=cn(this,r),a=n.on;a!==t&&((e=(t=a).copy())._.cancel.push(l),e._.interrupt.push(l),e._.end.push(u)),n.on=e})),0===a&&i()}))},[Symbol.iterator]:nr[Symbol.iterator]};var rr={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function ar(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}jt.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,r,a,i=t.__transition,o=!0;if(i){for(a in e=null==e?null:e+"",i)(n=i[a]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete i[a]):o=!1;o&&delete t.__transition}}(this,t)}))},jt.prototype.transition=function(t){var e,n;t instanceof tr?(e=t._id,t=t._name):(e=er(),(n=rr).time=Qe(),t=null==t?null:t+"");for(var r=this._groups,a=r.length,i=0;i<a;++i)for(var o,l=r[i],u=l.length,s=0;s<u;++s)(o=l[s])&&un(o,t,e,s,l,n||ar(o,e));return new tr(r,this._parents,t,e)};const ir=Math.PI,or=2*ir,lr=or-1e-6;function ur(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function sr(){return new ur}function cr(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function fr(t){return(t=cr(Math.abs(t)))?t[1]:NaN}ur.prototype=sr.prototype={constructor:ur,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,a,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+a)+","+(this._y1=+i)},arcTo:function(t,e,n,r,a){t=+t,e=+e,n=+n,r=+r,a=+a;var i=this._x1,o=this._y1,l=n-t,u=r-e,s=i-t,c=o-e,f=s*s+c*c;if(a<0)throw new Error("negative radius: "+a);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>1e-6)if(Math.abs(c*l-u*s)>1e-6&&a){var h=n-i,d=r-o,g=l*l+u*u,p=h*h+d*d,m=Math.sqrt(g),y=Math.sqrt(f),v=a*Math.tan((ir-Math.acos((g+f-p)/(2*m*y)))/2),w=v/y,A=v/m;Math.abs(w-1)>1e-6&&(this._+="L"+(t+w*s)+","+(e+w*c)),this._+="A"+a+","+a+",0,0,"+ +(c*h>s*d)+","+(this._x1=t+A*l)+","+(this._y1=e+A*u)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,a,i){t=+t,e=+e,i=!!i;var o=(n=+n)*Math.cos(r),l=n*Math.sin(r),u=t+o,s=e+l,c=1^i,f=i?r-a:a-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+u+","+s:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-s)>1e-6)&&(this._+="L"+u+","+s),n&&(f<0&&(f=f%or+or),f>lr?this._+="A"+n+","+n+",0,1,"+c+","+(t-o)+","+(e-l)+"A"+n+","+n+",0,1,"+c+","+(this._x1=u)+","+(this._y1=s):f>1e-6&&(this._+="A"+n+","+n+",0,"+ +(f>=ir)+","+c+","+(this._x1=t+n*Math.cos(a))+","+(this._y1=e+n*Math.sin(a))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var hr,dr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function gr(t){if(!(e=dr.exec(t)))throw new Error("invalid format: "+t);var e;return new pr({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function pr(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function mr(t,e){var n=cr(t,e);if(!n)return t+"";var r=n[0],a=n[1];return a<0?"0."+new Array(-a).join("0")+r:r.length>a+1?r.slice(0,a+1)+"."+r.slice(a+1):r+new Array(a-r.length+2).join("0")}gr.prototype=pr.prototype,pr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var yr={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>mr(100*t,e),r:mr,s:function(t,e){var n=cr(t,e);if(!n)return t+"";var r=n[0],a=n[1],i=a-(hr=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,o=r.length;return i===o?r:i>o?r+new Array(i-o+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+cr(t,Math.max(0,e+i-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function vr(t){return t}var wr,Ar,xr,br=Array.prototype.map,Dr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Cr(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?vr:(e=br.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var a=t.length,i=[],o=0,l=e[0],u=0;a>0&&l>0&&(u+l+1>r&&(l=Math.max(1,r-u)),i.push(t.substring(a-=l,a+l)),!((u+=l+1)>r));)l=e[o=(o+1)%e.length];return i.reverse().join(n)}),a=void 0===t.currency?"":t.currency[0]+"",i=void 0===t.currency?"":t.currency[1]+"",o=void 0===t.decimal?".":t.decimal+"",l=void 0===t.numerals?vr:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(br.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",s=void 0===t.minus?"−":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=gr(t)).fill,n=t.align,f=t.sign,h=t.symbol,d=t.zero,g=t.width,p=t.comma,m=t.precision,y=t.trim,v=t.type;"n"===v?(p=!0,v="g"):yr[v]||(void 0===m&&(m=12),y=!0,v="g"),(d||"0"===e&&"="===n)&&(d=!0,e="0",n="=");var w="$"===h?a:"#"===h&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",A="$"===h?i:/[%p]/.test(v)?u:"",x=yr[v],b=/[defgprs%]/.test(v);function D(t){var a,i,u,h=w,D=A;if("c"===v)D=x(t)+D,t="";else{var C=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:x(Math.abs(t),m),y&&(t=function(t){t:for(var e,n=t.length,r=1,a=-1;r<n;++r)switch(t[r]){case".":a=e=r;break;case"0":0===a&&(a=r),e=r;break;default:if(!+t[r])break t;a>0&&(a=0)}return a>0?t.slice(0,a)+t.slice(e+1):t}(t)),C&&0==+t&&"+"!==f&&(C=!1),h=(C?"("===f?f:s:"-"===f||"("===f?"":f)+h,D=("s"===v?Dr[8+hr/3]:"")+D+(C&&"("===f?")":""),b)for(a=-1,i=t.length;++a<i;)if(48>(u=t.charCodeAt(a))||u>57){D=(46===u?o+t.slice(a+1):t.slice(a))+D,t=t.slice(0,a);break}}p&&!d&&(t=r(t,1/0));var F=h.length+t.length+D.length,M=F<g?new Array(g-F+1).join(e):"";switch(p&&d&&(t=r(M+t,M.length?g-D.length:1/0),M=""),n){case"<":t=h+t+D+M;break;case"=":t=h+M+t+D;break;case"^":t=M.slice(0,F=M.length>>1)+h+t+D+M.slice(F);break;default:t=M+h+t+D}return l(t)}return m=void 0===m?6:/[gprs]/.test(v)?Math.max(1,Math.min(21,m)):Math.max(0,Math.min(20,m)),D.toString=function(){return t+""},D}return{format:f,formatPrefix:function(t,e){var n=f(((t=gr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(fr(e)/3))),a=Math.pow(10,-r),i=Dr[8+r/3];return function(t){return n(a*t)+i}}}}wr=Cr({thousands:",",grouping:[3],currency:["$",""]}),Ar=wr.format,xr=wr.formatPrefix;function Fr(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):(t=>()=>t)(isNaN(t)?e:t)}function Mr(t,e){var n=Fr((t=Be(t)).l,(e=Be(e)).l),r=Fr(t.a,e.a),a=Fr(t.b,e.b),i=Fr(t.opacity,e.opacity);return function(e){return t.l=n(e),t.a=r(e),t.b=a(e),t.opacity=i(e),t+""}}function kr(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}var Tr=t=>()=>t;function _r(t){return 1==(t=+t)?Sr:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Tr(isNaN(e)?n:e)}}function Sr(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):Tr(isNaN(t)?e:t)}var Nr=function t(e){var n=_r(e);function r(t,e){var r=n((t=ye(t)).r,(e=ye(e)).r),a=n(t.g,e.g),i=n(t.b,e.b),o=Sr(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=a(e),t.b=i(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);function Br(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,a=e.slice();return function(i){for(n=0;n<r;++n)a[n]=t[n]*(1-i)+e[n]*i;return a}}function Er(t,e){var n,r=e?e.length:0,a=t?Math.min(r,t.length):0,i=new Array(a),o=new Array(r);for(n=0;n<a;++n)i[n]=Ur(t[n],e[n]);for(;n<r;++n)o[n]=e[n];return function(t){for(n=0;n<a;++n)o[n]=i[n](t);return o}}function Ir(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}}function Lr(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function Pr(t,e){var n,r={},a={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Ur(t[n],e[n]):a[n]=e[n];return function(t){for(n in r)a[n]=r[n](t);return a}}var Yr=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Vr=new RegExp(Yr.source,"g");function zr(t,e){var n,r,a,i=Yr.lastIndex=Vr.lastIndex=0,o=-1,l=[],u=[];for(t+="",e+="";(n=Yr.exec(t))&&(r=Vr.exec(e));)(a=r.index)>i&&(a=e.slice(i,a),l[o]?l[o]+=a:l[++o]=a),(n=n[0])===(r=r[0])?l[o]?l[o]+=r:l[++o]=r:(l[++o]=null,u.push({i:o,x:Lr(n,r)})),i=Vr.lastIndex;return i<e.length&&(a=e.slice(i),l[o]?l[o]+=a:l[++o]=a),l.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)l[(n=u[r]).i]=n.x(t);return l.join("")})}function Ur(t,e){var n,r=typeof e;return null==e||"boolean"===r?Tr(e):("number"===r?Lr:"string"===r?(n=de(e))?(e=n,Nr):zr:e instanceof de?Nr:e instanceof Date?Ir:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}(e)?Br:Array.isArray(e)?Er:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Pr:Lr)(t,e)}function Or(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}function Hr(t){return+t}var Rr=[0,1];function Wr(t){return t}function qr(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:function(t){return function(){return t}}(isNaN(e)?NaN:.5)}function Xr(t,e,n){var r=t[0],a=t[1],i=e[0],o=e[1];return a<r?(r=qr(a,r),i=n(o,i)):(r=qr(r,a),i=n(i,o)),function(t){return i(r(t))}}function $r(t,e,n){var r=Math.min(t.length,e.length)-1,a=new Array(r),i=new Array(r),l=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++l<r;)a[l]=qr(t[l],t[l+1]),i[l]=n(e[l],e[l+1]);return function(e){var n=o(t,e,1,r)-1;return i[n](a[n](e))}}function jr(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Zr(){var t,e,n,r,a,i,o=Rr,l=Rr,u=Ur,s=Wr;function c(){var t,e,n,u=Math.min(o.length,l.length);return s!==Wr&&(t=o[0],e=o[u-1],t>e&&(n=t,t=e,e=n),s=function(n){return Math.max(t,Math.min(e,n))}),r=u>2?$r:Xr,a=i=null,f}function f(e){return null==e||isNaN(e=+e)?n:(a||(a=r(o.map(t),l,u)))(t(s(e)))}return f.invert=function(n){return s(e((i||(i=r(l,o.map(t),Lr)))(n)))},f.domain=function(t){return arguments.length?(o=Array.from(t,Hr),c()):o.slice()},f.range=function(t){return arguments.length?(l=Array.from(t),c()):l.slice()},f.rangeRound=function(t){return l=Array.from(t),u=Or,c()},f.clamp=function(t){return arguments.length?(s=!!t||Wr,c()):s!==Wr},f.interpolate=function(t){return arguments.length?(u=t,c()):u},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,c()}}function Gr(){return Zr()(Wr,Wr)}function Qr(t,e,n,r){var a,i=h(t,e,n);switch((r=gr(null==r?",f":r)).type){case"s":var o=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(a=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(fr(e)/3)))-fr(Math.abs(t)))}(i,o))||(r.precision=a),xr(r,o);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(a=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,fr(e)-fr(t))+1}(i,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=a-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(a=function(t){return Math.max(0,-fr(Math.abs(t)))}(i))||(r.precision=a-2*("%"===r.type))}return Ar(r)}function Jr(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var r,a,i,o,l=-1;if(n=+n,(t=+t)==(e=+e)&&n>0)return[t];if((r=e<t)&&(a=t,t=e,e=a),0===(o=f(t,e,n))||!isFinite(o))return[];if(o>0){let n=Math.round(t/o),r=Math.round(e/o);for(n*o<t&&++n,r*o>e&&--r,i=new Array(a=r-n+1);++l<a;)i[l]=(n+l)*o}else{o=-o;let n=Math.round(t*o),r=Math.round(e*o);for(n/o<t&&++n,r/o>e&&--r,i=new Array(a=r-n+1);++l<a;)i[l]=(n+l)/o}return r&&i.reverse(),i}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return Qr(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,a,i=e(),o=0,l=i.length-1,u=i[o],s=i[l],c=10;for(s<u&&(a=u,u=s,s=a,a=o,o=l,l=a);c-- >0;){if((a=f(u,s,n))===r)return i[o]=u,i[l]=s,e(i);if(a>0)u=Math.floor(u/a)*a,s=Math.ceil(s/a)*a;else{if(!(a<0))break;u=Math.ceil(u*a)/a,s=Math.floor(s*a)/a}r=a}return t},t}function Kr(){var t=Gr();return t.copy=function(){return jr(t,Kr())},kr.apply(t,arguments),Jr(t)}var ta=new Date,ea=new Date;function na(t,e,n,r){function a(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return a.floor=function(e){return t(e=new Date(+e)),e},a.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},a.round=function(t){var e=a(t),n=a.ceil(t);return t-e<n-t?e:n},a.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},a.range=function(n,r,i){var o,l=[];if(n=a.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return l;do{l.push(o=new Date(+n)),e(n,i),t(n)}while(o<n&&n<r);return l},a.filter=function(n){return na((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(a.count=function(e,r){return ta.setTime(+e),ea.setTime(+r),t(ta),t(ea),Math.floor(n(ta,ea))},a.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?a.filter(r?function(e){return r(e)%t==0}:function(e){return a.count(0,e)%t==0}):a:null}),a}var ra=na((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t}));ra.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?na((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):ra:null};var aa=na((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()})),ia=na((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getMinutes()})),oa=na((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()})),la=na((t=>t.setHours(0,0,0,0)),((t,e)=>t.setDate(t.getDate()+e)),((t,e)=>(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/864e5),(t=>t.getDate()-1));function ua(t){return na((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var sa=ua(0),ca=ua(1);ua(2),ua(3);var fa=ua(4);ua(5),ua(6);var ha=na((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),da=na((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));da.every=function(t){return isFinite(t=Math.floor(t))&&t>0?na((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null},na((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getUTCMinutes()})),na((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}));var ga=na((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}));function pa(t){return na((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/6048e5}))}var ma=pa(0),ya=pa(1);pa(2),pa(3);var va=pa(4);pa(5),pa(6),na((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()}));var wa=na((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));wa.every=function(t){return isFinite(t=Math.floor(t))&&t>0?na((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};const[Aa,xa]=function(t,e,n,r,a,o){const l=[[aa,1,1e3],[aa,5,5e3],[aa,15,15e3],[aa,30,3e4],[o,1,6e4],[o,5,3e5],[o,15,9e5],[o,30,18e5],[a,1,36e5],[a,3,108e5],[a,6,216e5],[a,12,432e5],[r,1,864e5],[r,2,1728e5],[n,1,6048e5],[e,1,2592e6],[e,3,7776e6],[t,1,31536e6]];function u(e,n,r){const a=Math.abs(n-e)/r,o=i((([,,t])=>t)).right(l,a);if(o===l.length)return t.every(h(e/31536e6,n/31536e6,r));if(0===o)return ra.every(Math.max(h(e,n,r),1));const[u,s]=l[a/l[o-1][2]<l[o][2]/a?o-1:o];return u.every(s)}return[function(t,e,n){const r=e<t;r&&([t,e]=[e,t]);const a=n&&"function"==typeof n.range?n:u(t,e,n),i=a?a.range(t,+e+1):[];return r?i.reverse():i},u]}(da,ha,sa,la,oa,ia);function ba(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Da(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Ca(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var Fa,Ma,ka,Ta,_a,Sa={"-":"",_:" ",0:"0"},Na=/^\s*\d+/,Ba=/^%/,Ea=/[\\^$*+?|[\]().{}]/g;function Ia(t,e,n){var r=t<0?"-":"",a=(r?-t:t)+"",i=a.length;return r+(i<n?new Array(n-i+1).join(e)+a:a)}function La(t){return t.replace(Ea,"\\$&")}function Pa(t){return new RegExp("^(?:"+t.map(La).join("|")+")","i")}function Ya(t){return new Map(t.map(((t,e)=>[t.toLowerCase(),e])))}function Va(t,e,n){var r=Na.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function za(t,e,n){var r=Na.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function Ua(t,e,n){var r=Na.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function Oa(t,e,n){var r=Na.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function Ha(t,e,n){var r=Na.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function Ra(t,e,n){var r=Na.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function Wa(t,e,n){var r=Na.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function qa(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Xa(t,e,n){var r=Na.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function $a(t,e,n){var r=Na.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function ja(t,e,n){var r=Na.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Za(t,e,n){var r=Na.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function Ga(t,e,n){var r=Na.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function Qa(t,e,n){var r=Na.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function Ja(t,e,n){var r=Na.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Ka(t,e,n){var r=Na.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function ti(t,e,n){var r=Na.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function ei(t,e,n){var r=Ba.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function ni(t,e,n){var r=Na.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function ri(t,e,n){var r=Na.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function ai(t,e){return Ia(t.getDate(),e,2)}function ii(t,e){return Ia(t.getHours(),e,2)}function oi(t,e){return Ia(t.getHours()%12||12,e,2)}function li(t,e){return Ia(1+la.count(da(t),t),e,3)}function ui(t,e){return Ia(t.getMilliseconds(),e,3)}function si(t,e){return ui(t,e)+"000"}function ci(t,e){return Ia(t.getMonth()+1,e,2)}function fi(t,e){return Ia(t.getMinutes(),e,2)}function hi(t,e){return Ia(t.getSeconds(),e,2)}function di(t){var e=t.getDay();return 0===e?7:e}function gi(t,e){return Ia(sa.count(da(t)-1,t),e,2)}function pi(t){var e=t.getDay();return e>=4||0===e?fa(t):fa.ceil(t)}function mi(t,e){return t=pi(t),Ia(fa.count(da(t),t)+(4===da(t).getDay()),e,2)}function yi(t){return t.getDay()}function vi(t,e){return Ia(ca.count(da(t)-1,t),e,2)}function wi(t,e){return Ia(t.getFullYear()%100,e,2)}function Ai(t,e){return Ia((t=pi(t)).getFullYear()%100,e,2)}function xi(t,e){return Ia(t.getFullYear()%1e4,e,4)}function bi(t,e){var n=t.getDay();return Ia((t=n>=4||0===n?fa(t):fa.ceil(t)).getFullYear()%1e4,e,4)}function Di(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Ia(e/60|0,"0",2)+Ia(e%60,"0",2)}function Ci(t,e){return Ia(t.getUTCDate(),e,2)}function Fi(t,e){return Ia(t.getUTCHours(),e,2)}function Mi(t,e){return Ia(t.getUTCHours()%12||12,e,2)}function ki(t,e){return Ia(1+ga.count(wa(t),t),e,3)}function Ti(t,e){return Ia(t.getUTCMilliseconds(),e,3)}function _i(t,e){return Ti(t,e)+"000"}function Si(t,e){return Ia(t.getUTCMonth()+1,e,2)}function Ni(t,e){return Ia(t.getUTCMinutes(),e,2)}function Bi(t,e){return Ia(t.getUTCSeconds(),e,2)}function Ei(t){var e=t.getUTCDay();return 0===e?7:e}function Ii(t,e){return Ia(ma.count(wa(t)-1,t),e,2)}function Li(t){var e=t.getUTCDay();return e>=4||0===e?va(t):va.ceil(t)}function Pi(t,e){return t=Li(t),Ia(va.count(wa(t),t)+(4===wa(t).getUTCDay()),e,2)}function Yi(t){return t.getUTCDay()}function Vi(t,e){return Ia(ya.count(wa(t)-1,t),e,2)}function zi(t,e){return Ia(t.getUTCFullYear()%100,e,2)}function Ui(t,e){return Ia((t=Li(t)).getUTCFullYear()%100,e,2)}function Oi(t,e){return Ia(t.getUTCFullYear()%1e4,e,4)}function Hi(t,e){var n=t.getUTCDay();return Ia((t=n>=4||0===n?va(t):va.ceil(t)).getUTCFullYear()%1e4,e,4)}function Ri(){return"+0000"}function Wi(){return"%"}function qi(t){return+t}function Xi(t){return Math.floor(+t/1e3)}function $i(t){return new Date(t)}function ji(t){return t instanceof Date?+t:+new Date(+t)}function Zi(t,e,n,r,a,i,o,l,u,s){var c=Gr(),f=c.invert,h=c.domain,d=s(".%L"),g=s(":%S"),p=s("%I:%M"),m=s("%I %p"),y=s("%a %d"),v=s("%b %d"),w=s("%B"),A=s("%Y");function x(t){return(u(t)<t?d:l(t)<t?g:o(t)<t?p:i(t)<t?m:r(t)<t?a(t)<t?y:v:n(t)<t?w:A)(t)}return c.invert=function(t){return new Date(f(t))},c.domain=function(t){return arguments.length?h(Array.from(t,ji)):h().map($i)},c.ticks=function(e){var n=h();return t(n[0],n[n.length-1],null==e?10:e)},c.tickFormat=function(t,e){return null==e?x:s(e)},c.nice=function(t){var n=h();return t&&"function"==typeof t.range||(t=e(n[0],n[n.length-1],null==t?10:t)),t?h(function(t,e){var n,r=0,a=(t=t.slice()).length-1,i=t[r],o=t[a];return o<i&&(n=r,r=a,a=n,n=i,i=o,o=n),t[r]=e.floor(i),t[a]=e.ceil(o),t}(n,t)):c},c.copy=function(){return jr(c,Zi(t,e,n,r,a,i,o,l,u,s))},c}function Gi(t){return function(){return t}}function Qi(t){this._context=t}function Ji(t){return new Qi(t)}function Ki(t){return t[0]}function to(t){return t[1]}function eo(t,e){var n=Gi(!0),r=null,a=Ji,i=null;function o(o){var l,u,s,c=(o=function(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}(o)).length,f=!1;for(null==r&&(i=a(s=sr())),l=0;l<=c;++l)!(l<c&&n(u=o[l],l,o))===f&&((f=!f)?i.lineStart():i.lineEnd()),f&&i.point(+t(u,l,o),+e(u,l,o));if(s)return i=null,s+""||null}return t="function"==typeof t?t:void 0===t?Ki:Gi(t),e="function"==typeof e?e:void 0===e?to:Gi(e),o.x=function(e){return arguments.length?(t="function"==typeof e?e:Gi(+e),o):t},o.y=function(t){return arguments.length?(e="function"==typeof t?t:Gi(+t),o):e},o.defined=function(t){return arguments.length?(n="function"==typeof t?t:Gi(!!t),o):n},o.curve=function(t){return arguments.length?(a=t,null!=r&&(i=a(r)),o):a},o.context=function(t){return arguments.length?(null==t?r=i=null:i=a(r=t),o):r},o}!function(t){Fa=function(t){var e=t.dateTime,n=t.date,r=t.time,a=t.periods,i=t.days,o=t.shortDays,l=t.months,u=t.shortMonths,s=Pa(a),c=Ya(a),f=Pa(i),h=Ya(i),d=Pa(o),g=Ya(o),p=Pa(l),m=Ya(l),y=Pa(u),v=Ya(u),w={a:function(t){return o[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return l[t.getMonth()]},c:null,d:ai,e:ai,f:si,g:Ai,G:bi,H:ii,I:oi,j:li,L:ui,m:ci,M:fi,p:function(t){return a[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:qi,s:Xi,S:hi,u:di,U:gi,V:mi,w:yi,W:vi,x:null,X:null,y:wi,Y:xi,Z:Di,"%":Wi},A={a:function(t){return o[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return l[t.getUTCMonth()]},c:null,d:Ci,e:Ci,f:_i,g:Ui,G:Hi,H:Fi,I:Mi,j:ki,L:Ti,m:Si,M:Ni,p:function(t){return a[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:qi,s:Xi,S:Bi,u:Ei,U:Ii,V:Pi,w:Yi,W:Vi,x:null,X:null,y:zi,Y:Oi,Z:Ri,"%":Wi},x={a:function(t,e,n){var r=d.exec(e.slice(n));return r?(t.w=g.get(r[0].toLowerCase()),n+r[0].length):-1},A:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.w=h.get(r[0].toLowerCase()),n+r[0].length):-1},b:function(t,e,n){var r=y.exec(e.slice(n));return r?(t.m=v.get(r[0].toLowerCase()),n+r[0].length):-1},B:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.m=m.get(r[0].toLowerCase()),n+r[0].length):-1},c:function(t,n,r){return C(t,e,n,r)},d:ja,e:ja,f:ti,g:Wa,G:Ra,H:Ga,I:Ga,j:Za,L:Ka,m:$a,M:Qa,p:function(t,e,n){var r=s.exec(e.slice(n));return r?(t.p=c.get(r[0].toLowerCase()),n+r[0].length):-1},q:Xa,Q:ni,s:ri,S:Ja,u:za,U:Ua,V:Oa,w:Va,W:Ha,x:function(t,e,r){return C(t,n,e,r)},X:function(t,e,n){return C(t,r,e,n)},y:Wa,Y:Ra,Z:qa,"%":ei};function b(t,e){return function(n){var r,a,i,o=[],l=-1,u=0,s=t.length;for(n instanceof Date||(n=new Date(+n));++l<s;)37===t.charCodeAt(l)&&(o.push(t.slice(u,l)),null!=(a=Sa[r=t.charAt(++l)])?r=t.charAt(++l):a="e"===r?" ":"0",(i=e[r])&&(r=i(n,a)),o.push(r),u=l+1);return o.push(t.slice(u,l)),o.join("")}}function D(t,e){return function(n){var r,a,i=Ca(1900,void 0,1);if(C(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("s"in i)return new Date(1e3*i.s+("L"in i?i.L:0));if(e&&!("Z"in i)&&(i.Z=0),"p"in i&&(i.H=i.H%12+12*i.p),void 0===i.m&&(i.m="q"in i?i.q:0),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(a=(r=Da(Ca(i.y,0,1))).getUTCDay(),r=a>4||0===a?ya.ceil(r):ya(r),r=ga.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(a=(r=ba(Ca(i.y,0,1))).getDay(),r=a>4||0===a?ca.ceil(r):ca(r),r=la.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),a="Z"in i?Da(Ca(i.y,0,1)).getUTCDay():ba(Ca(i.y,0,1)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(a+5)%7:i.w+7*i.U-(a+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Da(i)):ba(i)}}function C(t,e,n,r){for(var a,i,o=0,l=e.length,u=n.length;o<l;){if(r>=u)return-1;if(37===(a=e.charCodeAt(o++))){if(a=e.charAt(o++),!(i=x[a in Sa?e.charAt(o++):a])||(r=i(t,n,r))<0)return-1}else if(a!=n.charCodeAt(r++))return-1}return r}return w.x=b(n,w),w.X=b(r,w),w.c=b(e,w),A.x=b(n,A),A.X=b(r,A),A.c=b(e,A),{format:function(t){var e=b(t+="",w);return e.toString=function(){return t},e},parse:function(t){var e=D(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=b(t+="",A);return e.toString=function(){return t},e},utcParse:function(t){var e=D(t+="",!0);return e.toString=function(){return t},e}}}(t),Ma=Fa.format,Fa.parse,Fa.utcFormat,Fa.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]}),Qi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}},function(t){t[t.Tag=0]="Tag",t[t.Frontmatter=1]="Frontmatter",t[t.Wiki=2]="Wiki",t[t.Text=3]="Text",t[t.dvField=4]="dvField",t[t.Table=5]="Table",t[t.FileMeta=6]="FileMeta",t[t.Task=7]="Task",t[t.TaskDone=8]="TaskDone",t[t.TaskNotDone=9]="TaskNotDone"}(ka||(ka={})),function(t){t[t.Line=0]="Line",t[t.Bar=1]="Bar",t[t.Pie=2]="Pie",t[t.Radar=3]="Radar",t[t.Summary=4]="Summary",t[t.Table=5]="Table",t[t.Month=6]="Month",t[t.Heatmap=7]="Heatmap",t[t.Bullet=8]="Bullet",t[t.Unknown=9]="Unknown"}(Ta||(Ta={})),function(t){t[t.Number=0]="Number",t[t.Int=1]="Int",t[t.Date=2]="Date",t[t.Time=3]="Time",t[t.DateTime=4]="DateTime",t[t.String=5]="String"}(_a||(_a={}));class no{constructor(t,e){this.date=t,this.value=e}}class ro{constructor(t,e,n){if(this.type=e,this.target=n,this.separator="/",this.id=t,this.accessor=-1,this.accessor1=-1,this.accessor2=-1,this.valueType=_a.Number,this.usedAsXDataset=!1,this.numTargets=0,e===ka.Table){let t,e=new RegExp("\\[(?<accessor>[0-9]+)\\]\\[(?<accessor1>[0-9]+)\\](\\[(?<accessor2>[0-9]+)\\])?","gm");for(;t=e.exec(n);)if(void 0!==t.groups.accessor){let r=parseFloat(t.groups.accessor);if(Number.isNumber(r)&&void 0!==t.groups.accessor1){let a=parseFloat(t.groups.accessor1);if(Number.isNumber(a)){let i;void 0!==t.groups.accessor2&&(i=parseFloat(t.groups.accessor2)),this.accessor=r,this.accessor1=a,Number.isNumber(i)&&(this.accessor2=i),this.parentTarget=n.replace(e,"")}break}}}else{let t,e=new RegExp("\\[(?<accessor>[0-9]+)\\]","gm");for(;t=e.exec(n);)if(void 0!==t.groups.accessor){let r=parseFloat(t.groups.accessor);Number.isNumber(r)&&(this.accessor=r,this.parentTarget=n.replace(e,""));break}}}equalTo(t){return this.type===t.type&&this.target===t.target}getType(){return this.type}getTarget(){return this.target}getParentTarget(){return this.parentTarget}getId(){return this.id}getAccessor(t=0){switch(t){case 0:return this.accessor;case 1:return this.accessor1;case 2:return this.accessor2}return null}setSeparator(t){this.separator=t}getSeparator(){return this.separator}addNumTargets(t=1){this.numTargets=this.numTargets+t}getNumTargets(){return this.numTargets}}class ao{constructor(t,e){this.currentIndex=0,this.name="untitled",this.query=e,this.values=[],this.parent=t,this.id=-1,this.yMin=null,this.yMax=null,this.startDate=null,this.endDate=null,this.numTargets=0,this.lineInfo=null,this.barInfo=null,this.valueType=e.valueType;for(let e=0;e<t.getDates().length;e++)this.values.push(null)}getName(){return this.name}setName(t){this.name=t}getId(){return this.id}setId(t){this.id=t}addNumTargets(t){this.numTargets=this.numTargets+t}getNumTargets(){return this.numTargets}getValue(t,e=0){let n=this.parent.getIndexOfDate(t)+Math.floor(e);return n>=0&&n<this.values.length?this.values[n]:null}setValue(t,e){let n=this.parent.getIndexOfDate(t);n>=0&&(this.values[n]=e,(null===this.yMin||e<this.yMin)&&(this.yMin=e),(null===this.yMax||e>this.yMax)&&(this.yMax=e),(null===this.startDate||t<this.startDate)&&(this.startDate=t.clone()),(null===this.endDate||t>this.endDate)&&(this.endDate=t.clone()))}getYMin(){return this.yMin}getYMax(){return this.yMax}getStartDate(){return this.startDate}getEndDate(){return this.endDate}shift(t){for(let e=0;e<this.values.length;e++)null!==this.values[e]&&(this.values[e]=this.values[e]+t);this.yMin=this.yMin+t,this.yMax=this.yMax+t}setPenalty(t){for(let e=0;e<this.values.length;e++)null===this.values[e]&&(this.values[e]=t,t<this.yMin&&(this.yMin=t),t>this.yMax&&(this.yMax=t))}getQuery(){return this.query}accumulateValues(){let t=0;for(let e=0;e<this.values.length;e++)null!==this.values[e]&&(t+=this.values[e]),this.values[e]=t,t<this.yMin&&(this.yMin=t),t>this.yMax&&(this.yMax=t)}getValues(){return this.values}getLength(){return this.values.length}getLengthNotNull(){let t=0;for(let e=0;e<this.values.length;e++)null!==this.values[e]&&t++;return t}next(){if(this.currentIndex<this.values.length){let t=this.currentIndex++;return{done:!1,value:new no(this.parent.getDates()[t],this.values[t])}}return this.currentIndex=0,{done:!0,value:null}}[Symbol.iterator](){return this}}class io{constructor(t,e){this.currentIndex=0,this.dates=[],this.datasets=[];const n=t.creationData().format.toString();for(let r=t.clone();r<=e;r.add(1,"days")){let t=window.moment(r.format(n),n,!0);this.dates.push(t)}}createDataset(t,e){let n=new ao(this,t);return n.setId(t.getId()),e&&n.setName(e.datasetName[t.getId()]),this.datasets.push(n),n}getIndexOfDate(t){const e=t.creationData().format.toString();for(let n=0;n<this.dates.length;n++)if(this.dates[n].format(e)===t.format(e))return n;return-1}getDatasetByQuery(t){for(let e of this.datasets)if(e.getQuery().equalTo(t))return e;return null}getDatasetById(t){for(let e of this.datasets)if(e.getId()===t)return e;return null}getXDatasetIds(){let t=[];for(let e of this.datasets)if(e.getQuery().usedAsXDataset){let n=e.getQuery().getId();t.includes(n)||-1===n||t.push(n)}return t}getDates(){return this.dates}getNames(){let t=[];for(let e of this.datasets)t.push(e.getName());return t}next(){return this.currentIndex<this.datasets.length?{done:!1,value:this.datasets[this.currentIndex++]}:(this.currentIndex=0,{done:!0,value:null})}[Symbol.iterator](){return this}}class oo{constructor(t){this.queries=t,this.xDataset=[],this.folder="/",this.dateFormat="YYYY-MM-DD",this.dateFormatPrefix="",this.dateFormatSuffix="",this.startDate=null,this.endDate=null,this.datasetName=[],this.constValue=[1],this.ignoreAttachedValue=[],this.ignoreZeroValue=[],this.accum=[],this.penalty=[],this.valueShift=[],this.valueType=[],this.dataAreaSize=new yo(300,300),this.margin=new vo(10,10,10,10),this.tooltipSize=new yo(90,45),this.fixedScale=1,this.fitPanelWidth=!1,this.output=[],this.line=[],this.bar=[],this.pie=[],this.summary=[],this.month=[],this.heatmap=[],this.bullet=[],this.datasets=null}getQueryById(t){for(let e of this.queries)if(e.getId()===t)return e}}class lo{constructor(){}}class uo extends lo{constructor(){super(),this.title="",this.xAxisLabel="Date",this.xAxisColor="",this.xAxisLabelColor="",this.yAxisLabel=[],this.yAxisColor=[],this.yAxisLabelColor=[],this.yAxisUnit=[],this.yMin=[],this.yMax=[],this.reverseYAxis=[],this.allowInspectData=!0,this.showLegend=!1,this.legendPosition="",this.legendOrientation="",this.legendBgColor="",this.legendBorderColor="",this.chartType=Ta.Unknown}GetChartType(){return this.chartType}}class so extends uo{constructor(){super(),this.lineColor=[],this.lineWidth=[],this.showLine=[],this.showPoint=[],this.pointColor=[],this.pointBorderColor=[],this.pointBorderWidth=[],this.pointSize=[],this.fillGap=[],this.yAxisLocation=[]}GetChartType(){return Ta.Line}}class co extends uo{constructor(){super(),this.barColor=[],this.yAxisLocation=[]}GetChartType(){return Ta.Bar}}class fo extends lo{constructor(){super(),this.title="",this.data=[],this.dataColor=[],this.ratioInnerRadius=0}}class ho extends lo{constructor(){super(),this.template="",this.style=""}}class go extends lo{constructor(){super(),this.mode="circle",this.dataset=[],this.startWeekOn="Sun",this.threshold=[],this.yMin=[],this.yMax=[],this.showCircle=!0,this.color=null,this.dimNotInMonth=!0,this.showStreak=!0,this.showTodayRing=!0,this.showSelectedValue=!0,this.showSelectedRing=!0,this.circleColor=null,this.circleColorByValue=!1,this.headerYearColor=null,this.headerMonthColor=null,this.dividingLineColor=null,this.todayRingColor="",this.selectedRingColor="firebrick",this.initMonth="",this.selectedDate="",this.selectedDataset=null}}class po{constructor(){this.dataset="0",this.startWeekOn="Sun",this.orientation="vertical",this.yMin=null,this.yMax=null,this.color=null}}class mo extends lo{constructor(){super(),this.title="",this.dataset="0",this.orientation="horizontal",this.value="",this.valueUnit="",this.valueColor="#69b3a2",this.range=[],this.rangeColor=[],this.showMarker=!1,this.markerValue=0,this.markerColor=""}}class yo{constructor(t,e){this.width=t,this.height=e}}class vo{constructor(t,e,n,r){this.top=t,this.right=e,this.bottom=n,this.left=r}}class wo{constructor(t){if(this.translateX=0,this.translateY=0,"string"==typeof t){let e=t.match(/translate\(\s*(?<x>[\d\.\/-]+)\s*,\s*(?<y>[\d\.\/-]+)\s*\)/).groups;e&&(this.translateX=parseFloat(e.x),this.translateY=parseFloat(e.y))}}}class Ao{constructor(t,e){this.filePath=t,this.tableIndex=e,this.xDataset=null,this.yDatasets=[]}}const xo=["HH:mm","HH:m","H:mm","H:m","hh:mm A","hh:mm a","hh:m A","hh:m a","h:mm A","h:mm a","h:m A","h:m a"];function bo(t,e){let n=e;t.length>4&&t.startsWith("[[")&&t.endsWith("]]")&&(t=t.substring(2,t.length-2)),"iso-8601"===e.toLowerCase()&&(n=window.moment.ISO_8601);let r=window.moment(t,n,!0);return r=r.startOf("day"),r}function Do(t,e){let n=null;const r=/^(?<value>[\-\+]?[0-9]+)(?<unit>[dwmy])$/;if(r.test(t)){let a=r.exec(t);if(void 0!==a.groups&&void 0!==a.groups.value&&void 0!==a.groups.unit){let t=parseFloat(a.groups.value),r=a.groups.unit;n=Mo(e),"d"===r?n=n.add(t,"days"):"w"===r?n=n.add(t,"weeks"):"m"===r?n=n.add(t,"months"):"y"===r&&(n=n.add(t,"years"))}}return n&&n.isValid()?n:null}function Co(t,e){return null==t?null:"iso-8601"===e.toLowerCase()?t.format():t.format(e)}function Fo(t,e){return bo(Co(window.moment(t),e),e)}function Mo(t){return bo(Co(window.moment(),t),t)}function ko(t,e){for(var n=(e=e.replace(/^\./,"")).split("."),r=0,a=n.length;r<a;++r){var i=n[r];if(!(i in t))return;t=t[i]}return t}function To(t,e){const n=Array.from(t),r=n.findIndex((t=>t!==e)),a=n.reverse().findIndex((t=>t!==e));return-1===r&&-1===a?t:t.substring(r,t.length-a)}function _o(t){let e=null,n=_a.Number;if("string"==typeof t)if(t.includes(":")){let r=!1;t.startsWith("-")&&(r=!0,t=t.substring(1));let a=window.moment(t,xo,!0);a.isValid()&&(e=a.diff(window.moment("00:00","HH:mm",!0),"seconds"),r&&(e*=-1),n=_a.Time)}else e=parseFloat(t);else"number"==typeof t&&(e=t);return{type:n,value:e}}function So(t,e="",n=""){var r=Zt("body").append("svg");let a=r.append("text").text(t).attr("x",-99999).attr("y",-99999);e&&a.attr("class",e),n&&a.attr("transform","rotate("+n+")");var i=r.node().getBBox();return r.remove(),{width:i.width,height:i.height}}function No(t,e,n){let r=(0|parseFloat(t.attr("width")))+e,a=(0|parseFloat(t.attr("height")))+n;t.attr("width",r),t.attr("height",a)}function Bo(t,e,n){let r=new wo(t.attr("transform"));t.attr("transform","translate("+(r.translateX+e)+","+(r.translateY+n)+")")}function Eo(t){return t=(t=(t=t.replace(/(^\\s\*)|(\\s\*$)/gi,"")).replace(/\[ \]{2,}/gi," ")).replace(/\\n /,"\\n")}l((function(t,e){var n,r,a,i,o,l,u,s,c,f,h,d,g,p,m,y,v;n="Compound",r="MemberExpression",a="Literal",i=function(t,e){var n=new Error(t+" at character "+e);throw n.index=e,n.description=t,n},u={"||":1,"&&":2,"|":3,"^":4,"&":5,"==":6,"!=":6,"===":6,"!==":6,"<":7,">":7,"<=":7,">=":7,"<<":8,">>":8,">>>":8,"+":9,"-":9,"*":10,"/":10,"%":10},c=(s=function(t){var e,n=0;for(var r in t)(e=r.length)>n&&t.hasOwnProperty(r)&&(n=e);return n})(l={"-":o=!0,"!":o,"~":o,"+":o}),f=s(u),h={true:!0,false:!1,null:null},d=function(t){return u[t]||0},g=function(t,e,n){return{type:"||"===t||"&&"===t?"LogicalExpression":"BinaryExpression",operator:t,left:e,right:n}},p=function(t){return t>=48&&t<=57},m=function(t){return 36===t||95===t||t>=65&&t<=90||t>=97&&t<=122||t>=128&&!u[String.fromCharCode(t)]},y=function(t){return 36===t||95===t||t>=65&&t<=90||t>=97&&t<=122||t>=48&&t<=57||t>=128&&!u[String.fromCharCode(t)]},(v=function(t){for(var e,o,s=0,v=t.charAt,w=t.charCodeAt,A=function(e){return v.call(t,e)},x=function(e){return w.call(t,e)},b=t.length,D=function(){for(var t=x(s);32===t||9===t||10===t||13===t;)t=x(++s)},C=function(){var t,e,n=M();return D(),63!==x(s)?n:(s++,(t=C())||i("Expected expression",s),D(),58===x(s)?(s++,(e=C())||i("Expected expression",s),{type:"ConditionalExpression",test:n,consequent:t,alternate:e}):void i("Expected :",s))},F=function(){D();for(var e=t.substr(s,f),n=e.length;n>0;){if(u.hasOwnProperty(e)&&(!m(x(s))||s+e.length<t.length&&!y(x(s+e.length))))return s+=n,e;e=e.substr(0,--n)}return!1},M=function(){var t,e,n,r,a,o,l,u,c;if(o=k(),!(e=F()))return o;for(a={value:e,prec:d(e)},(l=k())||i("Expected expression after "+e,s),r=[o,a,l];(e=F())&&0!==(n=d(e));){for(a={value:e,prec:n},c=e;r.length>2&&n<=r[r.length-2].prec;)l=r.pop(),e=r.pop().value,o=r.pop(),t=g(e,o,l),r.push(t);(t=k())||i("Expected expression after "+c,s),r.push(a,t)}for(t=r[u=r.length-1];u>1;)t=g(r[u-1].value,r[u-2],t),u-=2;return t},k=function(){var e,n,r;if(D(),e=x(s),p(e)||46===e)return T();if(39===e||34===e)return _();if(91===e)return I();for(r=(n=t.substr(s,c)).length;r>0;){if(l.hasOwnProperty(n)&&(!m(x(s))||s+n.length<t.length&&!y(x(s+n.length))))return s+=r,{type:"UnaryExpression",operator:n,argument:k(),prefix:!0};n=n.substr(0,--r)}return!(!m(e)&&40!==e)&&B()},T=function(){for(var t,e,n="";p(x(s));)n+=A(s++);if(46===x(s))for(n+=A(s++);p(x(s));)n+=A(s++);if("e"===(t=A(s))||"E"===t){for(n+=A(s++),"+"!==(t=A(s))&&"-"!==t||(n+=A(s++));p(x(s));)n+=A(s++);p(x(s-1))||i("Expected exponent ("+n+A(s)+")",s)}return e=x(s),m(e)?i("Variable names cannot start with a number ("+n+A(s)+")",s):46===e&&i("Unexpected period",s),{type:a,value:parseFloat(n),raw:n}},_=function(){for(var t,e="",n=A(s++),r=!1;s<b;){if((t=A(s++))===n){r=!0;break}if("\\"===t)switch(t=A(s++)){case"n":e+="\n";break;case"r":e+="\r";break;case"t":e+="\t";break;case"b":e+="\b";break;case"f":e+="\f";break;case"v":e+="\v";break;default:e+=t}else e+=t}return r||i('Unclosed quote after "'+e+'"',s),{type:a,value:e,raw:n+e+n}},S=function(){var e,n=x(s),r=s;for(m(n)?s++:i("Unexpected "+A(s),s);s<b&&(n=x(s),y(n));)s++;return e=t.slice(r,s),h.hasOwnProperty(e)?{type:a,value:h[e],raw:e}:"this"===e?{type:"ThisExpression"}:{type:"Identifier",name:e}},N=function(t){for(var e,r,a=[],o=!1,l=0;s<b;){if(D(),(e=x(s))===t){o=!0,s++,41===t&&l&&l>=a.length&&i("Unexpected token "+String.fromCharCode(t),s);break}if(44===e){if(s++,++l!==a.length)if(41===t)i("Unexpected token ,",s);else if(93===t)for(var u=a.length;u<l;u++)a.push(null)}else(r=C())&&r.type!==n||i("Expected comma",s),a.push(r)}return o||i("Expected "+String.fromCharCode(t),s),a},B=function(){var t,e;for(e=40===(t=x(s))?E():S(),D(),t=x(s);46===t||91===t||40===t;)s++,46===t?(D(),e={type:r,computed:!1,object:e,property:S()}):91===t?(e={type:r,computed:!0,object:e,property:C()},D(),93!==(t=x(s))&&i("Unclosed [",s),s++):40===t&&(e={type:"CallExpression",arguments:N(41),callee:e}),D(),t=x(s);return e},E=function(){s++;var t=C();if(D(),41===x(s))return s++,t;i("Unclosed (",s)},I=function(){return s++,{type:"ArrayExpression",elements:N(93)}},L=[];s<b;)59===(e=x(s))||44===e?s++:(o=C())?L.push(o):s<b&&i('Unexpected "'+A(s)+'"',s);return 1===L.length?L[0]:{type:n,body:L}}).version="0.3.5",v.toString=function(){return"JavaScript Expression Parser (JSEP) v"+v.version},v.addUnaryOp=function(t){return c=Math.max(t.length,c),l[t]=o,this},v.addBinaryOp=function(t,e){return f=Math.max(t.length,f),u[t]=e,this},v.addLiteral=function(t,e){return h[t]=e,this},v.removeUnaryOp=function(t){return delete l[t],t.length===c&&(c=s(l)),this},v.removeAllUnaryOps=function(){return l={},c=0,this},v.removeBinaryOp=function(t){return delete u[t],t.length===f&&(f=s(u)),this},v.removeAllBinaryOps=function(){return u={},f=0,this},v.removeLiteral=function(t){return delete h[t],this},v.removeAllLiterals=function(){return h={},this},t.exports?e=t.exports=v:e.parse=v}));let Io={min:function(t,e){return g(t.datasets.getDatasetById(e).getValues())},minDate:function(t,e){let n=t.datasets.getDatasetById(e),r=g(n.getValues());if(Number.isNumber(r)){let e=Array.from(n);for(let n of e.reverse())if(null!==n.value&&n.value===r)return Co(n.date,t.dateFormat)}return"min not found"},max:function(t,e){return d(t.datasets.getDatasetById(e).getValues())},maxDate:function(t,e){let n=t.datasets.getDatasetById(e),r=d(n.getValues());if(Number.isNumber(r)){let e=Array.from(n);for(let n of e.reverse())if(null!==n.value&&n.value===r)return Co(n.date,t.dateFormat)}return"max not found"},startDate:function(t,e){let n=t.datasets.getDatasetById(e);if(n){let e=n.getStartDate();if(e&&e.isValid())return Co(e,t.dateFormat)}return Co(t.startDate,t.dateFormat)},endDate:function(t,e){let n=t.datasets.getDatasetById(e);if(n){let e=n.getEndDate();if(e&&e.isValid())return Co(e,t.dateFormat)}return Co(t.endDate,t.dateFormat)},sum:function(t,e){return w(t.datasets.getDatasetById(e).getValues())},count:function(t,e){return"deprecated template variable 'count'"},numTargets:function(t,e){return t.datasets.getDatasetById(e).getNumTargets()},days:function(t,e){return"deprecated template variable 'days'"},numDays:function(t,e){return t.datasets.getDatasetById(e).getLength()},numDaysHavingData:function(t,e){return t.datasets.getDatasetById(e).getLengthNotNull()},maxStreak:function(t,e){let n=0,r=0,a=t.datasets.getDatasetById(e);for(let t of a)null!==t.value?n++:n=0,n>=r&&(r=n);return r},maxStreakStart:function(t,e){let n=0,r=0,a=null,i=null,o=t.datasets.getDatasetById(e);if(o)for(let t of o)null!==t.value?(0===n&&(a=t.date),n++):n=0,n>=r&&(r=n,i=a);return Co(i,t.dateFormat)},maxStreakEnd:function(t,e){let n=0,r=0,a=null,i=null,o=t.datasets.getDatasetById(e);if(o){let t=Array.from(o);for(let e=0;e<t.length;e++){let o=t[e],l=null;e<t.length-1&&(l=t[e+1]),null!==o.value?(n++,null===(null==l?void 0:l.value)&&(a=o.date)):n=0,n>=r&&(r=n,i=a)}}return Co(i,t.dateFormat)},maxBreaks:function(t,e){let n=0,r=0,a=t.datasets.getDatasetById(e);for(let t of a)null===t.value?n++:n=0,n>r&&(r=n);return r},maxBreaksStart:function(t,e){let n=0,r=0,a=null,i=null,o=t.datasets.getDatasetById(e);if(o)for(let t of o)null===t.value?(0===n&&(a=t.date),n++):n=0,n>=r&&(r=n,i=a);return Co(i,t.dateFormat)},maxBreaksEnd:function(t,e){let n=0,r=0,a=null,i=null,o=t.datasets.getDatasetById(e);if(o){let t=Array.from(o);for(let e=0;e<t.length;e++){let o=t[e],l=null;e<t.length-1&&(l=t[e+1]),null===o.value?(n++,null!==(null==l?void 0:l.value)&&(a=o.date)):n=0,n>=r&&(r=n,i=a)}}return Co(i,t.dateFormat)},lastStreak:function(t,e){return"deprecated template variable 'lastStreak'"},currentStreak:function(t,e){let n=0,r=t.datasets.getDatasetById(e);if(r){let t=Array.from(r);for(let e=t.length-1;e>=0;e--){if(null===t[e].value)break;n++}}return n},currentStreakStart:function(t,e){let n=null,r=t.datasets.getDatasetById(e);if(r){let t=Array.from(r);for(let e=t.length-1;e>=0;e--){let r=t[e];if(e<t.length-1&&(n=t[e+1].date),null===r.value)break}}return null===n?"absense":Co(n,t.dateFormat)},currentStreakEnd:function(t,e){let n=0,r=null,a=t.datasets.getDatasetById(e);if(a){let t=Array.from(a);for(let e=t.length-1;e>=0;e--){let a=t[e];if(null===a.value)break;0===n&&(r=a.date),n++}}return null===r?"absense":Co(r,t.dateFormat)},currentBreaks:function(t,e){let n=0,r=t.datasets.getDatasetById(e);if(r){let t=Array.from(r);for(let e=t.length-1;e>=0;e--){if(null!==t[e].value)break;n++}}return n},currentBreaksStart:function(t,e){let n=null,r=t.datasets.getDatasetById(e);if(r){let t=Array.from(r);for(let e=t.length-1;e>=0;e--){let r=t[e];if(e<t.length-1&&(n=t[e+1].date),null!==r.value)break}}return null===n?"absense":Co(n,t.dateFormat)},currentBreaksEnd:function(t,e){let n=0,r=null,a=t.datasets.getDatasetById(e);if(a){let t=Array.from(a);for(let e=t.length-1;e>=0;e--){let a=t[e];if(null!==a.value)break;0===n&&(r=a.date),n++}}return null===r?"absense":Co(r,t.dateFormat)},average:function(t,e){let n=t.datasets.getDatasetById(e),r=n.getLengthNotNull();if(r>0){return w(n.getValues())/r}return null},median:function(t,e){let n=t.datasets.getDatasetById(e);return y(n.getValues(),.5,r);var r},variance:function(t,e){return function(t,e){let n,r=0,a=0,i=0;if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(n=e-a,a+=n/++r,i+=n*(e-a));else{let o=-1;for(let l of t)null!=(l=e(l,++o,t))&&(l=+l)>=l&&(n=l-a,a+=n/++r,i+=n*(l-a))}if(r>1)return i/(r-1)}(t.datasets.getDatasetById(e).getValues())}};function Lo(t,e){let n={};Object.entries(Io).forEach((([r,a])=>{let i,o=new RegExp("{{\\s*"+r+"(\\(\\s*Dataset\\(\\s*((?<datasetId>\\d+)|(?<datasetName>\\w+))\\s*\\)\\s*\\))?\\s*}}","gm");for(;i=o.exec(t);)if(void 0!==i.groups)if(void 0!==i.groups.datasetId){let t=parseInt(i.groups.datasetId);if(Number.isInteger(t)){let i="{{\\s*"+r+"(\\(\\s*Dataset\\(\\s*"+t.toString()+"\\s*\\)\\s*\\))?\\s*}}";if(!(i in n)){let r=a(e,t),o="{{NA}}";null!=r&&(o=Number.isInteger(r)?r.toFixed(0):r.toFixed(2)),n[i]=o}}}else if(void 0!==i.groups.datasetName){let t=i.groups.datasetName,o="{{\\s*"+r+"(\\(\\s*Dataset\\(\\s*"+t+"\\s*\\)\\s*\\))?\\s*}}",l=e.datasetName.indexOf(t);if(!(o in n)){let t="{{NA}}";if(l>=0){let n=a(e,l);null!=n&&(t=Number.isInteger(n)?n.toFixed(0):n.toFixed(2))}n[o]=t}}else{let t="{{\\s*"+r+"\\s*}}";if(!(t in n)){let r=a(e,0),i="{{NA}}";null!=r&&("number"==typeof r?i=Number.isInteger(r)?r.toFixed(0):r.toFixed(2):"string"==typeof r&&(i=r)),n[t]=i}}else{let t="{{\\s*"+r+"\\s*}}";if(!(t in n)){let r=a(e,0),i="{{NA}}";null!=r?i=Number.isInteger(r)?r.toFixed(0):r.toFixed(2):"string"==typeof r&&(i=r),n[t]=i}}}));for(let e in n){let r=n[e],a=new RegExp(e,"gi");t=t.replace(a,r)}return t}function Po(t,e,n){if(e&&n)return"Under construction"}function Yo(t,e,n){if(!e||!n)return;let r="";if(n.template,r=n.template,r=Lo(r,e),""!==r){let e=Zt(t).append("div");if(r.includes("\n")){let t=r.split("\n");for(let n of t)e.append("div").text(n)}else e.text(r);""!==n.style&&e.attr("style",n.style)}}function Vo(t,e){let n=e.dataset;if(0===n.length)return!1;let r=null;if(null===e.selectedDataset){for(let e of n)if(r=t.datasets.getDatasetById(e),r&&!r.getQuery().usedAsXDataset)break;if(r)return e.selectedDataset=r.getId(),!0}else{let a=e.selectedDataset,i=n.findIndex((t=>t===a));if(i>=0){if(i===e.dataset.length-1){for(let e of n)if(r=t.datasets.getDatasetById(e),r&&!r.getQuery().usedAsXDataset)break;return!!r&&(e.selectedDataset=r.getId(),!0)}{i++;let a=n[i];if(r=t.datasets.getDatasetById(a),e.selectedDataset=a,r&&!r.getQuery().usedAsXDataset)return!0;Vo(t,e)}}}return!1}function zo(t,e,n,r){Zt(e).select("#svg").remove();for(var a=Object.getOwnPropertyNames(t),i=0;i<a.length;i++)delete t[a[i]];let o=Zt(e).append("svg").attr("id","svg").attr("width",n.dataAreaSize.width+n.margin.left+n.margin.right).attr("height",n.dataAreaSize.height+n.margin.top+n.margin.bottom);t.svg=o;let l=o.append("g").attr("id","graphArea").attr("transform","translate("+n.margin.left+","+n.margin.top+")").attr("width",n.dataAreaSize.width+n.margin.right).attr("height",n.dataAreaSize.height+n.margin.bottom);t.graphArea=l;let u=l.append("g").attr("id","dataArea").attr("width",n.dataAreaSize.width).attr("height",n.dataAreaSize.height);return t.dataArea=u,t}function Uo(t,e){let n=t.svg.selectAll("circle");for(let t of n){let e=Zt(t).attr("id");e&&e.startsWith("tracker-selected-circle-")&&Zt(t).style("stroke","none")}e.selectedDate="",t.monitor.text("")}function Oo(t,e,n,r,a){if(!n||!r)return;let i=r.selectedDataset;if(null===i)return;let o=n.datasets.getDatasetById(i);if(!o)return;let l=o.getName();a.month(),a.daysInMonth(),a.year();let u=So("30","tracker-axis-label"),s=2.8*Math.max(u.width,u.height),c=a.format("YYYY"),f=a.format("MMM"),h=So(c,"tracker-month-header-year"),d=So(f,"tracker-month-header-month"),g=0,p=e.graphArea.append("g"),m=null;r.headerMonthColor?m=r.headerMonthColor:r.color&&(m=r.color);let y=p.append("text").text(f).attr("id","titleMonth").attr("transform","translate("+s/4+","+d.height+")").attr("class","tracker-month-header-month").style("cursor","default").on("click",(function(t){Uo(e,r)}));m&&y.style("fill",m),g+=d.height;let v=null;r.headerYearColor?v=r.headerYearColor:r.color&&(v=r.color);let w=p.append("text").text(c).attr("id","titleYear").attr("transform","translate("+s/4+","+(g+h.height)+")").attr("class","tracker-month-header-year").style("cursor","default").attr("font-weight","bold").on("click",(function(t){Uo(e,r)}));v&&w.style("fill",v),g+=h.height;let A=So(l,"tracker-month-title-rotator"),x=p.append("text").text(l).attr("transform","translate("+3.5*s+","+A.height+")").attr("class","tracker-month-title-rotator").style("cursor","pointer").on("click",(function(i){Vo(n,r)&&(Uo(e,r),Ro(t,e,n,r,a))}));e.rotator=x;let b=So("0.0000","tracker-month-title-monitor"),D=p.append("text").text("").attr("id","monitor").attr("class","tracker-month-title-monitor").attr("transform","translate("+3.5*s+","+(A.height+b.height)+")").style("cursor","pointer").style("fill",r.selectedRingColor);e.monitor=D;let C=So("<","tracker-month-title-arrow");p.append("text").text("<").attr("id","arrowLeft").attr("transform","translate("+5.5*s+","+(g/2+C.height/2)+")").attr("class","tracker-month-title-arrow").on("click",(function(i){Uo(e,r),r.selectedDate="";let o=a.clone().add(-1,"month");Ro(t,e,n,r,o)})).style("cursor","pointer"),p.append("text").text(">").attr("id","arrowLeft").attr("transform","translate("+6.5*s+","+(g/2+C.height/2)+")").attr("class","tracker-month-title-arrow").on("click",(function(i){Uo(e,r);let o=a.clone().add(1,"month");Ro(t,e,n,r,o)})).style("cursor","pointer"),p.append("text").text("◦").attr("id","arrowToday").attr("transform","translate("+6*s+","+(g/2+C.height/2)+")").attr("class","tracker-month-title-arrow").on("click",(function(a){Uo(e,r);let i=Mo(n.dateFormat);Ro(t,e,n,r,i)})).style("cursor","pointer"),g+=8;let F=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];"mon"===r.startWeekOn.toLowerCase()&&F.push(F.shift());let M=So(F[0],"tracker-month-weekday");e.graphArea.selectAll("weekDays").data(F).enter().append("text").text((function(t){return t})).attr("transform",(function(t,e){return"translate("+(e+.5)*s+","+(g+M.height)+")"})).attr("class","tracker-month-weekday").attr("text-anchor","middle").style("cursor","default").on("click",(function(t){Uo(e,r)})),g+=M.height+8;let k=null;r.dividingLineColor?k=r.dividingLineColor:r.color&&(k=r.color);let T=e.graphArea.append("rect").attr("x",0).attr("y",g).attr("width",6.5*s+M.width).attr("height",1).attr("class","tracker-month-dividing-line");k&&T.style("fill",k),g+=1,p.attr("height",g),e.header=p,Bo(e.dataArea,0,g)}function Ho(t,e,n,r,a){if(!n||!r)return;let i=r.selectedDataset;if(null===i)return;let o=n.datasets.getDatasetById(i);if(!o)return;let l=r.dataset.findIndex((t=>t===i)),u=r.threshold[l];a.month(),a.daysInMonth();let s=So("30","tracker-axis-label"),c=2.8*Math.max(s.width,s.height),f=c/2.8*1.8/2,h=(c-2*f)/2,p=g(o.getValues());null!==r.yMin[l]&&(p=r.yMin[l]);let m=d(o.getValues());null!==r.yMax[l]&&(m=r.yMax[l]);let y=!0;(null===m||null===p||m<=p)&&(y=!1);const v=a.clone().startOf("month");let w=v.clone().subtract(v.day(),"days");"mon"===r.startWeekOn.toLowerCase()&&(w=w.add(1,"days"));const A=a.clone().endOf("month");let x=A.clone().add(7-A.day()-1,"days");"mon"===r.startWeekOn.toLowerCase()&&(x=x.add(1,"days"));const b=o.getStartDate(),D=o.getEndDate();let C=[],F=0,M=0,k=0;for(let t=w.clone();t<=x;t.add(1,"days")){"mon"===r.startWeekOn.toLowerCase()?(F=t.day()-1,F<0&&(F=6),M=Math.floor(k/7)):(F=t.day(),M=Math.floor(k/7));let e=!0;(t.diff(v)<0||t.diff(A)>0)&&(e=!1);let a=!0;b&&D&&t.diff(b)>=0&&t.diff(D)<=0&&(a=!1);let i=o.getValue(t),l=!1;r.circleColorByValue?(y||null!==i&&i>u)&&(l=!0):null!==i&&i>u&&(l=!0);let s=null;r.circleColorByValue&&y&&null!==i&&(s=(i-p)/(m-p));let c=o.getValue(t,1),f=o.getValue(t,-1),h=!1;null!==i&&i>u&&null!==f&&f>u&&(h=!0);let d=!1;null!==i&&i>u&&null!==c&&c>u&&(d=!0),C.push({date:Co(t,n.dateFormat),value:i,scaledValue:s,dayInMonth:t.date(),isInThisMonth:e,isOutOfDataRange:a,row:M,col:F,showCircle:l,streakIn:h,streakOut:d}),k++}let T=(F+1)*c,_=Kr().domain([-.5,6.5]).range([0,T]);if(r.showStreak){let t="#69b3a2";r.circleColor?t=r.circleColor:r.color&&(t=r.color),e.dataArea.selectAll("streakIn").data(C.filter((function(t){return t.streakIn}))).enter().append("rect").attr("x",(function(t){return _(t.col)-f-h})).attr("y",(function(t){return _(t.row)-1.5})).attr("width",h).attr("height",3).style("fill",(function(e){return e.showCircle?r.circleColorByValue&&null!==e.scaledValue?Mr("white",t)(.8*e.scaledValue+.2):t:"none"})).style("opacity",(function(t){return t.isOutOfDataRange||r.dimNotInMonth&&!t.isInThisMonth?.2:1})),e.dataArea.selectAll("streakOut").data(C.filter((function(t){return t.streakOut}))).enter().append("rect").attr("x",(function(t){return _(t.col)+f})).attr("y",(function(t){return _(t.row)-1.5})).attr("width",h).attr("height",3).style("fill",(function(e){return e.showCircle?r.circleColorByValue&&null!==e.scaledValue?Mr("white",t)(.8*e.scaledValue+.2):t:"none"})).style("opacity",(function(t){return t.isOutOfDataRange||r.dimNotInMonth&&!t.isInThisMonth?.2:1}))}let S="#69b3a2";r.circleColor?S=r.circleColor:r.color&&(S=r.color),r.showCircle&&e.dataArea.selectAll("dot").data(C).enter().append("circle").attr("r",f).attr("cx",(function(t){return _(t.col)})).attr("cy",(function(t){return _(t.row)})).style("fill",(function(t){if(t.showCircle){if(!r.circleColorByValue)return S;if(null!==t.scaledValue){return Mr("white",S)(.8*t.scaledValue+.2)}return S}return"none"})).style("opacity",(function(t){return t.isOutOfDataRange||r.dimNotInMonth&&!t.isInThisMonth?.2:1})).style("cursor","default");let N=Co(window.moment(),n.dateFormat);if(r.showTodayRing){let t=e.dataArea.selectAll("todayRing").data(C.filter((function(t){return t.date===N}))).enter().append("circle").attr("r",.9*f).attr("cx",(function(t){return _(t.col)})).attr("cy",(function(t){return _(t.row)})).attr("class","tracker-month-today-circle").style("cursor","default");""!==r.todayRingColor?t.style("stroke",r.todayRingColor):t.style("stroke","white")}r.showSelectedRing&&e.dataArea.selectAll("selectedRing").data(C).enter().append("circle").attr("r",f).attr("cx",(function(t){return _(t.col)})).attr("cy",(function(t){return _(t.row)})).attr("id",(function(t){return"tracker-selected-circle-"+t.date})).attr("class","tracker-month-selected-circle").style("cursor","default").style("stroke","none"),e.dataArea.selectAll("dayLabel").data(C).enter().append("text").text((function(t){return t.dayInMonth.toString()})).attr("transform",(function(t){return"translate("+_(t.col)+","+(_(t.row)+s.height/4)+")"})).style("fill-opacity",(function(t){return t.isOutOfDataRange||r.dimNotInMonth&&!t.isInThisMonth?.2:1})).attr("date",(function(t){return t.date})).attr("value",(function(t){return t.value})).attr("valueType",(function(t){return _a[o.valueType]})).attr("class","tracker-axis-label").on("click",(function(t){Uo(e,r);let n=Zt(this).attr("date");if(r.selectedDate=n,r.showSelectedRing&&e.dataArea.select("#tracker-selected-circle-"+n).style("stroke",r.selectedRingColor),r.showSelectedValue){let t=Zt(this).attr("value"),n="";if("Time"===Zt(this).attr("valueType")){n=window.moment("00:00","HH:mm",!0).add(parseFloat(t),"seconds").format("HH:mm")}else n=t;e.monitor.text(n)}})).style("cursor","pointer");let B=parseFloat(e.svg.attr("width")),E=parseFloat(e.svg.attr("height")),I=parseFloat(e.graphArea.attr("width")),L=parseFloat(e.graphArea.attr("height")),P=7*c+parseFloat(e.header.attr("height")),Y=7*c;P>E&&No(e.svg,0,P-E),Y>B&&No(e.svg,Y-B,0),P>L&&No(e.graphArea,0,P-L),Y>I&&No(e.svg,Y-I,0)}function Ro(t,e,n,r,a){n&&Wo&&(Oo(t,e=zo(e,t,n),n,r,a),Ho(0,e,n,r,a))}function Wo(t,e,n){if(!e||!Wo)return;n.dataset;let r=0;for(let t of e.datasets)t.getQuery().usedAsXDataset||r++;if(0===r)return"No available dataset found";if(Vo(e,n),null===n.selectedDataset)return"No available dataset found";let a={};a=zo(a,t,e);let i=null;if(n.initMonth){let t=window.moment(n.initMonth,"YYYY-MM",!0);if(!t.isValid())return"Invalid initMonth";i=t}else window.moment(),i=e.datasets.getDates().last();i&&(Oo(t,a,e,n,i),Ho(0,a,e,n,i))}function qo(t,e,n){if(e&&qo)return"Under construction"}function Xo(t,e,n){if(!e||!n)return;let r=parseFloat(n.dataset);e.datasets.getDatasetById(r),"horizontal"===n.orientation?e.dataAreaSize={width:250,height:24}:"vertical"===n.orientation&&(e.dataAreaSize={width:24,height:250});let a=function(t,e,n){let r={};if(!e||!n)return;let a=Zt(t).append("svg").attr("id","svg").attr("width",e.dataAreaSize.width+e.margin.left+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.top+e.margin.bottom);r.svg=a;let i=a.append("g").attr("id","graphArea").attr("transform","translate("+e.margin.left+","+e.margin.top+")").attr("width",e.dataAreaSize.width+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.bottom);r.graphArea=i;let o=i.append("g").attr("id","dataArea").attr("width",e.dataAreaSize.width).attr("height",e.dataAreaSize.height);return r.dataArea=o,r}(t,e,n),i=function(t,e,n,r){if(!e||!n)return;let a=n.range,i=a[a.length-1],o=[0,i],l=n.valueUnit,u=function(t){return l&&l.endsWith("%")?Qr(0,i,7)(t)+" %":Qr(0,i,7)(t)},s=So(u(i),"tracker-tick-label");if("horizontal"===n.orientation){let n=Kr();n.domain(o).range([0,e.dataAreaSize.width]),t.scale=n;let r=T(n);r.tickFormat(u);let a=t.dataArea.append("g").attr("id","axis").attr("transform","translate(0,"+e.dataAreaSize.height+")").call(r).attr("class","tracker-axis");t.axis=a,a.selectAll("path").style("stroke","none"),a.selectAll("line"),a.selectAll("text").attr("class","tracker-tick-label"),a.attr("width",e.dataAreaSize.width+s.width),a.attr("height",6+s.height),No(t.svg,+s.width,6+s.height),No(t.graphArea,+s.width,6+s.height)}else if("vertical"===n.orientation){let n=Kr();n.domain(o).range([e.dataAreaSize.height,0]),t.scale=n;let r=_(n);r.tickFormat(u);let a=t.dataArea.append("g").attr("id","axis").attr("x",0).attr("y",0).call(r).attr("class","tracker-axis");t.axis=a,a.selectAll("path").style("stroke","none"),a.selectAll("line"),a.selectAll("text").attr("class","tracker-tick-label"),a.attr("width",6+s.width),a.attr("height",e.dataAreaSize.width),No(t.svg,6+s.width,0),No(t.graphArea,6+s.width,0),Bo(t.dataArea,6+s.width,0)}}(a,e,n);if("string"==typeof i)return i;!function(t,e,n){if(!e||!n)return;if(n.title){let r=So(n.title,"tracker-title-small");if("horizontal"===n.orientation){let a=t.graphArea.append("text").text(n.title).attr("id","title").attr("x",r.width/2).attr("y",e.dataAreaSize.height/2).attr("height",r.height).attr("class","tracker-title-small");t.title=a,No(t.svg,r.width+6,0),No(t.graphArea,r.width+6,0),Bo(t.dataArea,r.width+6,0)}else if("vertical"===n.orientation){let a=e.dataAreaSize.width/2;r.width>e.dataAreaSize.width&&(No(t.svg,r.width-e.dataAreaSize.width,0),No(t.graphArea,r.width-e.dataAreaSize.width,0),Bo(t.dataArea,r.width/2-e.dataAreaSize.width/2,0),a=r.width/2);let i=parseFloat(t.axis.attr("width")),o=t.graphArea.append("text").text(n.title).attr("id","title").attr("x",a+i).attr("y",r.height/2).attr("height",r.height).attr("class","tracker-title-small");t.title=o,No(t.svg,0,r.height+6),No(t.graphArea,0,r.height+6),Bo(t.dataArea,0,r.height+6)}}if(n.valueUnit){let r=So(n.valueUnit,"tracker-tick-label");if("horizontal"===n.orientation){let a=t.dataArea.append("text").text(n.valueUnit).attr("id","unit").attr("x",-1*(r.width+6)).attr("y",e.dataAreaSize.height+6).attr("height",r.height).attr("class","tracker-tick-label");t.unit=a}else if("vertical"===n.orientation){let a=t.dataArea.append("text").text(n.valueUnit).attr("id","unit").attr("x",e.dataAreaSize.width/2-r.width/2).attr("y",-(r.height/2+6)).attr("height",r.height).attr("class","tracker-tick-label");t.unit=a,No(t.svg,0,r.height+6),No(t.graphArea,0,r.height+6),Bo(t.dataArea,0,r.height+6)}}}(a,e,n),function(t,e,n,r){if(!e||!n)return;let a=t.scale,i=n.range,o=n.rangeColor,l=[],u=0;for(let t=0;t<i.length;t++)l.push({start:u,end:i[t],color:o[t]}),u=i[t];"horizontal"===n.orientation?t.dataArea.selectAll("backPanel").data(l).enter().append("rect").attr("x",(function(t,e){return Math.floor(a(t.start))})).attr("y",(function(t){return 0})).attr("width",(function(t,e){return Math.ceil(a(t.end-t.start))})).attr("height",e.dataAreaSize.height).style("fill",(function(t){return t.color})):"vertical"===n.orientation&&t.dataArea.selectAll("backPanel").data(l).enter().append("rect").attr("x",(function(t,e){return 0})).attr("y",(function(t){return Math.floor(a(t.end))})).attr("width",e.dataAreaSize.width).attr("height",(function(t){return e.dataAreaSize.height-Math.floor(a(t.end-t.start))})).style("fill",(function(t){return t.color}))}(a,e,n);let o=function(t,e,n,r){let a="";if(!e||!n)return;let i=n.value;i=Lo(i,e);let o=parseFloat(i);if(Number.isNaN(o))return a="Invalid input value: "+i,a;let l=n.valueColor,u=t.scale;if("horizontal"===n.orientation){let n=e.dataAreaSize.height/3;t.dataArea.append("rect").attr("x",u(0)).attr("y",n).attr("width",Math.floor(u(o))).attr("height",n).style("fill",l)}else if("vertical"===n.orientation){let n=e.dataAreaSize.width/3;t.dataArea.append("rect").attr("x",n).attr("y",Math.floor(u(o))).attr("width",n).attr("height",e.dataAreaSize.height-Math.floor(u(o))).style("fill",l)}}(a,e,n);if("string"==typeof o)return o;!function(t,e,n,r){if(!e||!n)return;if(!n.showMarker)return;let a=n.markerValue,i=n.markerColor,o=t.scale;if("horizontal"===n.orientation){let n=2*e.dataAreaSize.height/3;t.dataArea.append("rect").attr("x",o(a)-1.5).attr("y",n/4).attr("width",3).attr("height",n).style("fill",i)}else if("vertical"===n.orientation){let n=2*e.dataAreaSize.width/3;t.dataArea.append("rect").attr("x",n/4).attr("y",o(a)-1.5).attr("width",n).attr("height",3).style("fill",i)}}(a,e,n),function(t,e,n){let r=Zt(t),a=e.svg,i=parseFloat(a.attr("width")),o=parseFloat(a.attr("height"));a.attr("width",null).attr("height",null).attr("viewBox",`0 0 ${i} ${o}`).attr("preserveAspectRatio","xMidYMid meet"),n.fitPanelWidth?r.style("width","100%"):(r.style("width",(i*n.fixedScale).toString()+"px"),r.style("height",(o*n.fixedScale).toString()+"px"))}(t,a,e)}function $o(t,e,n=!0){return function(r){const a=Math.abs(e-t);let i=window.moment("00:00","HH:mm",!0).add(r,"seconds"),o=i.format("HH:mm");if(n&&a>43200){let n=(r-t)/3600%2;o=r<=t||r>=e?"":n>1?i.format("HH:mm"):""}return o}}function jo(t,e,n){if(!e||!n)return;let r=e.datasets,a=function(t,e){let n,r;if(void 0===e)for(const e of t)null!=e&&(void 0===n?e>=e&&(n=r=e):(n>e&&(n=e),r<e&&(r=e)));else{let a=-1;for(let i of t)null!=(i=e(i,++a,t))&&(void 0===n?i>=i&&(n=r=i):(n>i&&(n=i),r<i&&(r=i)))}return[n,r]}(r.getDates()),i=function(){return kr.apply(Zi(Aa,xa,da,ha,sa,la,oa,ia,aa,Ma).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}().domain(a).range([0,e.dataAreaSize.width]);t.xScale=i;let o=function(t){let e,n=t.getDates().length;return e=n<=15?la:n<=60?la.every(4):n<=105?sa:n<=450?ha:n<=900?ha.every(2):da,e}(r),l=function(t){let e,n=t.getDates().length;return e=Ma(n<=15||n<=60||n<=105?"%y-%m-%d":n<=450||n<=900?"%y %b":"%Y"),e}(r),u=T(i).ticks(o).tickFormat(l),s=t.dataArea.append("g").attr("id","xAxis").attr("transform","translate(0,"+e.dataAreaSize.height+")").call(u).attr("class","tracker-axis");n.xAxisColor&&s.style("stroke",n.xAxisColor),t.xAxis=s;let c=So("99-99-99"),f=s.selectAll("text").attr("x",-1*c.height*Math.cos(65/180*Math.PI)).attr("y",0).attr("transform","rotate(-65)").style("text-anchor","end").attr("class","tracker-tick-label");n.xAxisColor&&f.style("fill",n.xAxisColor);let h=c.width*Math.sin(65/180*Math.PI),d=s.append("text").text(n.xAxisLabel).attr("transform","translate("+e.dataAreaSize.width/2+","+(6+h)+")").attr("class","tracker-axis-label");n.xAxisLabelColor&&d.style("fill",n.xAxisLabelColor),s.attr("height",6+h),No(t.svg,0,6+h),No(t.graphArea,0,6+h)}function Zo(t,e,n,r,a){if(!e||!n)return;let i=e.datasets;if(0===a.length)return;if("left"!==r&&"right"!==r)return;let o=null,l=null,u=null,s=!1;for(let t of a){let e=i.getDatasetById(t);if(!e.getQuery().usedAsXDataset)if((null===o||e.getYMin()<o)&&(o=e.getYMin()),(null===l||e.getYMax()>l)&&(l=e.getYMax()),s=e.valueType===_a.Time,null===u)u=s;else if(s!==u)return"Not all values in time format"}let c=null;"left"===r?c=n.yMin[0]:"right"===r&&(c=n.yMin[1]);let f=!1;"number"!=typeof c?c=o:f=!0;let h=null;"left"===r?h=n.yMax[0]:"right"===r&&(h=n.yMax[1]);let d=!1;if("number"!=typeof h?h=l:d=!0,h<c){let t=c;c=h,h=t;let e=f;f=d,d=e}let g,p,m=h-c,y=Kr();g=f?c:c-.2*m,p=d?h:h+.2*m,n.GetChartType()===Ta.Bar&&(p<0&&(p=0),g>0&&(g=0));let w=[g,p];("left"===r&&n.reverseYAxis[0]||"right"===r&&n.reverseYAxis[1])&&(w=[p,g]),y.domain(w).range([e.dataAreaSize.height,0]),"left"===r?t.leftYScale=y:"right"===r&&(t.rightYScale=y);let A="";"left"===r?A=n.yAxisColor[0]:"right"===r&&(A=n.yAxisColor[1]);let x="";"left"===r?x=n.yAxisLabelColor[0]:"right"===r&&(x=n.yAxisLabelColor[1]);let b="";"left"===r?b=n.yAxisLabel[0]:"right"===r&&(b=n.yAxisLabel[1]);let D,C="";if("left"===r?C=n.yAxisUnit[0]:"right"===r&&(C=n.yAxisUnit[1]),"left"===r?D=_(y):"right"===r&&(D=k(2,y)),D&&s){let t=$o(g,p),e=function(t,e){let n=[];return n=Math.abs(e-t)>18e3?v(t=3600*Math.floor(t/3600),e=3600*Math.ceil(e/3600),3600):v(t=1800*Math.floor(t/1800),e=1800*Math.ceil(e/1800),1800),n}(g,p);D.tickValues(e).tickFormat(t)}let F=t.dataArea.append("g").attr("id","yAxis").call(D).attr("class","tracker-axis");"right"==r&&F.attr("transform","translate("+e.dataAreaSize.width+" ,0)"),"left"===r?t.leftYAxis=F:"right"===r&&(t.rightYAxis=F);let M=F.selectAll("path");A&&M.style("stroke",A);let T=F.selectAll("line");A&&T.style("stroke",A);let S=F.selectAll("text").attr("class","tracker-tick-label");A&&S.style("fill",A);let N=Qr(g,p,10);s&&(N=$o(g,p,!1));let B=So(N(g),"tracker-axis-label"),E=So(N(p),"tracker-axis-label"),I=Math.max(B.width,E.width);""!==C&&(b+=" ("+C+")");let L=So(b),P=F.append("text").text(b).attr("transform","rotate(-90)").attr("x",-1*e.dataAreaSize.height/2).attr("class","tracker-axis-label");"left"===r?P.attr("y",-6-I-L.height/2):P.attr("y",6+I+L.height),x&&P.style("fill",x);let Y=L.height+I+6;F.attr("width",Y),No(t.svg,Y,0),No(t.graphArea,Y,0),"left"===r&&(Bo(t.dataArea,Y,0),t.title&&Bo(t.title,Y,0))}function Go(t,e,n,r,a){if(!e||!n)return;let i=null;if("left"===a?i=t.leftYScale:"right"===a&&(i=t.rightYScale),n.showLine[r.getId()]){let e=eo().defined((function(t){return null!==t.value})).x((function(e){return t.xScale(e.date)})).y((function(t){return i(t.value)})),a=t.dataArea.append("path").attr("class","tracker-line").style("stroke-width",n.lineWidth[r.getId()]);n.fillGap[r.getId()]?a.datum(Array.from(r).filter((function(t){return null!==t.value}))).attr("d",e):a.datum(r).attr("d",e),n.lineColor[r.getId()]&&a.style("stroke",n.lineColor[r.getId()])}}function Qo(t,e,n,r,a){if(!e||!n)return;let i=null;if("left"===a?i=t.leftYScale:"right"===a&&(i=t.rightYScale),n.showPoint[r.getId()]){let a=t.dataArea.selectAll("dot").data(Array.from(r).filter((function(t){return null!==t.value}))).enter().append("circle").attr("r",n.pointSize[r.getId()]).attr("cx",(function(e){return t.xScale(e.date)})).attr("cy",(function(t){return i(t.value)})).attr("date",(function(t){return Ma("%y-%m-%d")(t.date)})).attr("value",(function(t){if(null!==t.value)return Number.isInteger(t.value)?t.value.toFixed(0):t.value.toFixed(2)})).attr("valueType",_a[r.valueType]).attr("class","tracker-dot");if(n.pointColor[r.getId()]&&(a.style("fill",n.pointColor[r.getId()]),n.pointBorderColor[r.getId()]&&n.pointBorderWidth[r.getId()]>0&&(a.style("stroke",n.pointBorderColor[r.getId()]),a.style("stroke-width",n.pointBorderWidth[r.getId()]))),n.allowInspectData){let n=t.svg.append("g").style("opacity",0);n.append("rect").attr("width",e.tooltipSize.width).attr("height",e.tooltipSize.height).attr("class","tracker-tooltip");let r=n.append("text").attr("width",e.tooltipSize.width).attr("height",e.tooltipSize.height).attr("class","tracker-tooltip-label"),i=r.append("tspan").attr("x",4).attr("y",e.tooltipSize.height/5*2),o=r.append("tspan").attr("x",4).attr("y",e.tooltipSize.height/5*4);a.on("mouseenter",(function(t){i.text("date:"+Zt(this).attr("date"));let r=Zt(this).attr("valueType"),a=Zt(this).attr("value");if("Time"===r){let t=window.moment("00:00","HH:mm",!0).add(parseFloat(a),"seconds").format("HH:mm");o.text("value:"+t)}else o.text("value:"+a);const[l,u]=function(t,e){if(t=function(t){let e;for(;e=t.sourceEvent;)t=e;return t}(t),void 0===e&&(e=t.currentTarget),e){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}if(e.getBoundingClientRect){var a=e.getBoundingClientRect();return[t.clientX-a.left-e.clientLeft,t.clientY-a.top-e.clientTop]}}return[t.pageX,t.pageY]}(t);l<e.dataAreaSize.width/2?n.attr("transform","translate("+(l+1.3*e.tooltipSize.width)+","+(u-1*e.tooltipSize.height)+")"):n.attr("transform","translate("+(l-0*e.tooltipSize.width)+","+(u-1*e.tooltipSize.height)+")"),n.transition().duration(200).style("opacity",1)})).on("mouseleave",(function(){n.transition().duration(500).style("opacity",0)}))}}}function Jo(t,e,n,r,a,i,o){if(!e||!n)return;let l=e.dataAreaSize.width/r.getLength(),u=l;l-1>0&&(u=l-1),u/=o;let s=null;"left"===a?s=t.leftYScale:"right"===a&&(s=t.rightYScale);let c=t.dataArea.selectAll("bar").data(Array.from(r).filter((function(t){return null!==t.value}))).enter().append("rect").attr("x",(function(e,n){if(0===n){let n=i+1-o/2;if(n<1)return t.xScale(e.date)-l/2+i*u+n*u}return t.xScale(e.date)-l/2+i*u})).attr("y",(function(t){return s(Math.max(t.value,0))})).attr("width",(function(t,e){if(0===e){let t=i+1-o/2;return t<0?0:t<1?u*t:u}if(e===r.getLength()-1){let t=1-(i+1-o/2);return t<0?0:t<1?u*t:u}return u})).attr("height",(function(t){if(null!==t.value)return Math.abs(s(t.value)-s(0))})).attr("class","tracker-bar");n.barColor[r.getId()]&&c.style("fill",n.barColor[r.getId()])}function Ko(t,e,n){let r=t.svg;t.graphArea;let a=t.dataArea,i=t.title,o=t.xAxis,l=t.leftYAxis,u=t.rightYAxis,s=0;i&&(s=parseFloat(i.attr("height")));let c=parseFloat(o.attr("height")),f=0;l&&(f=parseFloat(l.attr("width")));let h=0;u&&(h=parseFloat(u.attr("width")));let d=e.datasets,g=d.getXDatasetIds(),p=d.getNames(),m=p.map((function(t){return So(t,"tracker-legend-label")})),y=0,v=0;for(let t=0;t<p.length;t++)g.includes(t)||m[t].width>v&&(v=m[t].width,y=t);let A=v/p[y].length,x=m[y].height,b=p.length-g.length,D=2*A,C=x,F=2*A,M=0,k=0;"vertical"===n.legendOrientation?(M=3*D+F+v,k=(b+1)*C):"horizontal"===n.legendOrientation&&(M=(2*D+F)*b+D+w(m,(function(t,e){return g.includes(e)?0:t.width})),k=C+x);let T=0,_=0;if("top"===n.legendPosition)T=f+e.dataAreaSize.width/2-M/2,_=s,No(r,0,k+C),Bo(a,0,k+C);else if("bottom"===n.legendPosition)T=f+e.dataAreaSize.width/2-M/2,_=s+e.dataAreaSize.height+c+C,No(r,0,k+C);else if("left"===n.legendPosition)T=0,_=s+e.dataAreaSize.height/2-k/2,No(r,M+D,0),Bo(a,M+D,0);else{if("right"!==n.legendPosition)return;T=e.dataAreaSize.width+f+h+D,_=s+e.dataAreaSize.height/2-k/2,No(r,M+D,0)}let S=t.graphArea.append("g").attr("id","legend").attr("transform","translate("+T+","+_+")"),N=S.append("rect").attr("class","tracker-legend").attr("width",M).attr("height",k);n.legendBgColor&&N.style("fill",n.legendBgColor),n.legendBorderColor&&N.style("stroke",n.legendBorderColor);let B=D,E=x,I=B+D+F,L=E;if("vertical"===n.legendOrientation){n.GetChartType()===Ta.Line?(S.selectAll("markers").data(p).enter().append("line").attr("x1",B).attr("x2",B+F).attr("y1",(function(t,e){let n=g.filter((t=>t<e)).length;return E+(e-=n)*C})).attr("y2",(function(t,e){let n=g.filter((t=>t<e)).length;return E+(e-=n)*C})).style("stroke",(function(t,e){if(!g.includes(e))return n.lineColor[e]})),S.selectAll("markers").data(p).enter().append("circle").attr("cx",B+F/2).attr("cy",(function(t,e){let n=g.filter((t=>t<e)).length;return E+(e-=n)*C})).attr("r",(function(t,e){if(!g.includes(e))return n.showPoint[e]?n.pointSize[e]:0})).style("fill",(function(t,e){if(!g.includes(e))return n.pointColor[e]}))):n.GetChartType()===Ta.Bar&&S.selectAll("markers").data(p).enter().append("rect").attr("x",B).attr("y",(function(t,e){let n=g.filter((t=>t<e)).length;return E+(e-=n)*C-x/2})).attr("width",F).attr("height",x).style("fill",(function(t,e){if(!g.includes(e))return n.barColor[e]}));let t=S.selectAll("labels").data(p).enter().append("text").attr("x",I).attr("y",(function(t,e){let n=g.filter((t=>t<e)).length;return L+(e-=n)*C})).text((function(t,e){return g.includes(e)?"":t})).style("alignment-baseline","middle").attr("class","tracker-legend-label");n.GetChartType()===Ta.Line?t.style("fill",(function(t,e){if(!g.includes(e))return n.lineColor[e]})):n.GetChartType()===Ta.Bar&&t.style("fill",(function(t,e){if(!g.includes(e))return n.barColor[e]}))}else if("horizontal"===n.legendOrientation){let t=0,e=0;n.GetChartType()===Ta.Line?(S.selectAll("markers").data(p).enter().append("line").attr("x1",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=B:t+=m[n].width+D+F+D,t})).attr("x2",(function(t,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?e=B+F:e+=m[n].width+D+F+D,e})).attr("y1",E).attr("y2",E).style("stroke",(function(t,e){if(!g.includes(e))return n.lineColor[e]})),t=0,S.selectAll("markers").data(p).enter().append("circle").attr("cx",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=B+F/2:t+=m[n].width+D+F+D,t})).attr("cy",E).attr("r",(function(t,e){if(!g.includes(e))return n.showPoint[e]?n.pointSize[e]:0})).style("fill",(function(t,e){if(!g.includes(e))return n.pointColor[e]}))):n.GetChartType()===Ta.Bar&&(t=0,S.selectAll("markers").data(p.filter(((t,e)=>!g.includes(e)))).enter().append("rect").attr("x",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=B:t+=m[n].width+D+F+D,t})).attr("y",E-x/2).attr("width",F).attr("height",x).style("fill",(function(t,e){if(!g.includes(e))return n.barColor[e]}))),t=0;let r=S.selectAll("labels").data(p).enter().append("text").attr("x",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=I:t+=m[n].width+D+F+D,t})).attr("y",L).text((function(t,e){return g.includes(e)?"":t})).style("alignment-baseline","middle").attr("class","tracker-legend-label");n.GetChartType()===Ta.Line?r.style("fill",(function(t,e){if(!g.includes(e))return n.lineColor[e]})):n.GetChartType()===Ta.Bar&&r.style("fill",(function(t,e){if(!g.includes(e))return n.barColor[e]}))}}function tl(t,e,n){if(!e||!n)return;if(!n.title)return;let r=So(n.title,"tracker-title"),a=t.graphArea.append("text").text(n.title).attr("id","title").attr("transform","translate("+e.dataAreaSize.width/2+","+r.height/2+")").attr("height",r.height).attr("class","tracker-title");t.title=a,No(t.svg,0,r.height),No(t.graphArea,0,r.height),Bo(t.dataArea,0,r.height)}function el(t,e,n){let r=Zt(t),a=e.svg,i=parseFloat(a.attr("width")),o=parseFloat(a.attr("height"));a.attr("width",null).attr("height",null).attr("viewBox",`0 0 ${i} ${o}`).attr("preserveAspectRatio","xMidYMid meet"),n.fitPanelWidth?r.style("width","100%"):(r.style("width",(i*n.fixedScale).toString()+"px"),r.style("height",(o*n.fixedScale).toString()+"px"))}function nl(t,e){let n={},r=Zt(t).append("svg").attr("id","svg").attr("width",e.dataAreaSize.width+e.margin.left+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.top+e.margin.bottom);n.svg=r;let a=r.append("g").attr("id","graphArea").attr("transform","translate("+e.margin.left+","+e.margin.top+")").attr("width",e.dataAreaSize.width+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.bottom);n.graphArea=a;let i=a.append("g").attr("id","dataArea").attr("width",e.dataAreaSize.width).attr("height",e.dataAreaSize.height);return n.dataArea=i,n}function rl(t,e,n){if(!e||!n)return;let r=nl(t,e);tl(r,e,n),jo(r,e,n);let a=[],i=[],o=e.datasets.getXDatasetIds();for(let t=0;t<n.yAxisLocation.length;t++){if(o.includes(t))continue;let e=n.yAxisLocation[t];"left"===e.toLowerCase()?a.push(t):"right"===e.toLocaleLowerCase()&&i.push(t)}let l=Zo(r,e,n,"left",a);if("string"==typeof l)return l;if(r.leftYAxis&&r.leftYScale)for(let t of a){let a=e.datasets.getDatasetById(t);a.getQuery().usedAsXDataset||(Go(r,e,n,a,"left"),Qo(r,e,n,a,"left"))}let u=Zo(r,e,n,"right",i);if("string"==typeof u)return u;if(r.rightYAxis&&r.rightYScale)for(let t of i){let a=e.datasets.getDatasetById(t);a.getQuery().usedAsXDataset||(Go(r,e,n,a,"right"),Qo(r,e,n,a,"right"))}n.showLegend&&Ko(r,e,n),el(t,r,e)}function al(t,e,n){if(!e||!n)return;let r=nl(t,e);tl(r,e,n),jo(r,e,n);let a=[],i=[],o=e.datasets.getXDatasetIds();for(let t=0;t<n.yAxisLocation.length;t++){if(o.includes(t))continue;let e=n.yAxisLocation[t];"left"===e.toLowerCase()?a.push(t):"right"===e.toLocaleLowerCase()&&i.push(t)}let l=Zo(r,e,n,"left",a);if("string"==typeof l)return l;let u=a.length+i.length,s=0;if(r.leftYAxis&&r.leftYScale)for(let t of a){let a=e.datasets.getDatasetById(t);a.getQuery().usedAsXDataset||(Jo(r,e,n,a,"left",s,u),s++)}let c=Zo(r,e,n,"right",i);if("string"==typeof c)return c;if(r.rightYAxis&&r.rightYScale)for(let t of i){let a=e.datasets.getDatasetById(t);a.getQuery().usedAsXDataset||(Jo(r,e,n,a,"right",s,u),s++)}n.showLegend&&Ko(r,e,n),el(t,r,e)}function il(t,e){Zt(t).select("#svg").remove(),Zt(t).append("div").text(e).style("background-color","white").style("margin-bottom","20px").style("padding","10px").style("color","red")}var ol=l((function(t,e){Object.defineProperty(e,"__esModule",{value:!0});const r="YYYY-MM-DD",a="gggg-[W]ww",i="YYYY-MM";function o(t){const e=window.app.plugins.getPlugin("periodic-notes");return e&&e.settings?.[t]?.enabled}function l(){try{const{internalPlugins:t,plugins:e}=window.app;if(o("daily")){const{format:t,folder:n,template:a}=e.getPlugin("periodic-notes")?.settings?.daily||{};return{format:t||r,folder:n?.trim()||"",template:a?.trim()||""}}const{folder:n,format:a,template:i}=t.getPluginById("daily-notes")?.instance?.options||{};return{format:a||r,folder:n?.trim()||"",template:i?.trim()||""}}catch(t){console.info("No custom daily note settings found!",t)}}function u(){try{const t=window.app.plugins,e=t.getPlugin("calendar")?.options,n=t.getPlugin("periodic-notes")?.settings?.weekly;if(o("weekly"))return{format:n.format||a,folder:n.folder?.trim()||"",template:n.template?.trim()||""};const r=e||{};return{format:r.weeklyNoteFormat||a,folder:r.weeklyNoteFolder?.trim()||"",template:r.weeklyNoteTemplate?.trim()||""}}catch(t){console.info("No custom weekly note settings found!",t)}}function s(){const t=window.app.plugins;try{const e=o("monthly")&&t.getPlugin("periodic-notes")?.settings?.monthly||{};return{format:e.format||i,folder:e.folder?.trim()||"",template:e.template?.trim()||""}}catch(t){console.info("No custom monthly note settings found!",t)}}function c(...t){let e=[];for(let n=0,r=t.length;n<r;n++)e=e.concat(t[n].split("/"));const n=[];for(let t=0,r=e.length;t<r;t++){const r=e[t];r&&"."!==r&&n.push(r)}return""===e[0]&&n.unshift(""),n.join("/")}async function f(t,e){e.endsWith(".md")||(e+=".md");const r=n.default.normalizePath(c(t,e));return await async function(t){const e=t.replace(/\\/g,"/").split("/");if(e.pop(),e.length){const t=c(...e);window.app.vault.getAbstractFileByPath(t)||await window.app.vault.createFolder(t)}}(r),r}async function h(t){const{metadataCache:e,vault:r}=window.app,a=n.default.normalizePath(t);if("/"===a)return Promise.resolve(["",null]);try{const t=e.getFirstLinkpathDest(a,""),n=await r.cachedRead(t);return[n,window.app.foldManager.load(t)]}catch(t){return console.error(`Failed to read the daily note template '${a}'`,t),new n.default.Notice("Failed to read the daily note template"),["",null]}}function d(t,e="day"){return`${e}-${t.clone().startOf(e).format()}`}function g(t){return t.replace(/\[[^\]]*\]/g,"")}function p(t,e){return m(t.basename,e)}function m(t,e){const n={day:l,week:u,month:s}[e]().format.split("/").pop(),r=window.moment(t,n,!0);if(!r.isValid())return null;if(function(t,e){if("week"===e){const e=g(t);return/w{1,2}/i.test(e)&&(/M{1,4}/.test(e)||/D{1,4}/.test(e))}return!1}(n,e)&&"week"===e){const e=g(n);if(/w{1,2}/i.test(e))return window.moment(t,n.replace(/M{1,4}/g,"").replace(/D{1,4}/g,""),!1)}return r}class y extends Error{}async function v(t){const e=window.app,{vault:r}=e,a=window.moment,{template:i,format:o,folder:u}=l(),[s,c]=await h(i),d=t.format(o),g=await f(u,d);try{const n=await r.create(g,s.replace(/{{\s*date\s*}}/gi,d).replace(/{{\s*time\s*}}/gi,a().format("HH:mm")).replace(/{{\s*title\s*}}/gi,d).replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,((e,n,r,i,l,u)=>{const s=a(),c=t.clone().set({hour:s.get("hour"),minute:s.get("minute"),second:s.get("second")});return r&&c.add(parseInt(i,10),l),u?c.format(u.substring(1).trim()):c.format(o)})).replace(/{{\s*yesterday\s*}}/gi,t.clone().subtract(1,"day").format(o)).replace(/{{\s*tomorrow\s*}}/gi,t.clone().add(1,"d").format(o)));return e.foldManager.save(n,c),n}catch(t){console.error(`Failed to create file: '${g}'`,t),new n.default.Notice("Unable to create new file.")}}class w extends Error{}function A(t){return function(){const{moment:t}=window;let e=t.localeData()._week.dow;const n=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"];for(;e;)n.push(n.shift()),e--;return n}().indexOf(t.toLowerCase())}async function x(t){const{vault:e}=window.app,{template:r,format:a,folder:i}=u(),[o,l]=await h(r),s=t.format(a),c=await f(i,s);try{const n=await e.create(c,o.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,((e,n,r,i,o,l)=>{const u=window.moment(),s=t.clone().set({hour:u.get("hour"),minute:u.get("minute"),second:u.get("second")});return r&&s.add(parseInt(i,10),o),l?s.format(l.substring(1).trim()):s.format(a)})).replace(/{{\s*title\s*}}/gi,s).replace(/{{\s*time\s*}}/gi,window.moment().format("HH:mm")).replace(/{{\s*(sunday|monday|tuesday|wednesday|thursday|friday|saturday)\s*:(.*?)}}/gi,((e,n,r)=>{const a=A(n);return t.weekday(a).format(r.trim())})));return window.app.foldManager.save(n,l),n}catch(t){console.error(`Failed to create file: '${c}'`,t),new n.default.Notice("Unable to create new file.")}}class b extends Error{}async function D(t){const{vault:e}=window.app,{template:r,format:a,folder:i}=s(),[o,l]=await h(r),u=t.format(a),c=await f(i,u);try{const n=await e.create(c,o.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,((e,n,r,i,o,l)=>{const u=window.moment(),s=t.clone().set({hour:u.get("hour"),minute:u.get("minute"),second:u.get("second")});return r&&s.add(parseInt(i,10),o),l?s.format(l.substring(1).trim()):s.format(a)})).replace(/{{\s*date\s*}}/gi,u).replace(/{{\s*time\s*}}/gi,window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi,u));return window.app.foldManager.save(n,l),n}catch(t){console.error(`Failed to create file: '${c}'`,t),new n.default.Notice("Unable to create new file.")}}function C(){const{app:t}=window;if(t.plugins.getPlugin("calendar"))return!0;const e=t.plugins.getPlugin("periodic-notes");return e&&e.settings?.weekly?.enabled}function F(){const{app:t}=window,e=t.plugins.getPlugin("periodic-notes");return e&&e.settings?.monthly?.enabled}e.DEFAULT_DAILY_NOTE_FORMAT=r,e.DEFAULT_MONTHLY_NOTE_FORMAT=i,e.DEFAULT_WEEKLY_NOTE_FORMAT=a,e.appHasDailyNotesPluginLoaded=function(){const{app:t}=window,e=t.internalPlugins.plugins["daily-notes"];if(e&&e.enabled)return!0;const n=t.plugins.getPlugin("periodic-notes");return n&&n.settings?.daily?.enabled},e.appHasMonthlyNotesPluginLoaded=F,e.appHasWeeklyNotesPluginLoaded=C,e.createDailyNote=v,e.createMonthlyNote=D,e.createPeriodicNote=function(t,e){return{day:v,month:D,week:x}[t](e)},e.createWeeklyNote=x,e.getAllDailyNotes=function(){const{vault:t}=window.app,{folder:e}=l(),r=t.getAbstractFileByPath(n.default.normalizePath(e));if(!r)throw new y("Failed to find daily notes folder");const a={};return n.default.Vault.recurseChildren(r,(t=>{if(t instanceof n.default.TFile){const e=p(t,"day");if(e){const n=d(e,"day");a[n]=t}}})),a},e.getAllMonthlyNotes=function(){const t={};if(!F())return t;const{vault:e}=window.app,{folder:r}=s(),a=e.getAbstractFileByPath(n.default.normalizePath(r));if(!a)throw new b("Failed to find monthly notes folder");return n.default.Vault.recurseChildren(a,(e=>{if(e instanceof n.default.TFile){const n=p(e,"month");if(n){const r=d(n,"month");t[r]=e}}})),t},e.getAllWeeklyNotes=function(){const t={};if(!C())return t;const{vault:e}=window.app,{folder:r}=u(),a=e.getAbstractFileByPath(n.default.normalizePath(r));if(!a)throw new w("Failed to find weekly notes folder");return n.default.Vault.recurseChildren(a,(e=>{if(e instanceof n.default.TFile){const n=p(e,"week");if(n){const r=d(n,"week");t[r]=e}}})),t},e.getDailyNote=function(t,e){return e[d(t,"day")]??null},e.getDailyNoteSettings=l,e.getDateFromFile=p,e.getDateFromPath=function(t,e){return m(function(t){let e=t.substring(t.lastIndexOf("/")+1);return-1!=e.lastIndexOf(".")&&(e=e.substring(0,e.lastIndexOf("."))),e}(t),e)},e.getDateUID=d,e.getMonthlyNote=function(t,e){return e[d(t,"month")]??null},e.getMonthlyNoteSettings=s,e.getPeriodicNoteSettings=function(t){return(0,{day:l,week:u,month:s}[t])()},e.getTemplateInfo=h,e.getWeeklyNote=function(t,e){return e[d(t,"week")]??null},e.getWeeklyNoteSettings=u}));function ll(t){switch(t=t.trim().toLowerCase()){case"true":case"1":case"on":case"yes":return!0;case"false":case"0":case"off":case"no":return!1}return null}function ul(t){return"tag"===t.toLowerCase()||"text"===t.toLowerCase()||"frontmatter"===t.toLowerCase()||"wiki"===t.toLowerCase()||"dvfield"===t.toLowerCase()||"table"===t.toLowerCase()||"filemeta"===t.toLowerCase()||"task"===t.toLowerCase()||"task.all"===t.toLowerCase()||"task.done"===t.toLowerCase()||"task.notdone"===t.toLowerCase()}function sl(t){return"left"===t||"right"===t||"none"===t}function cl(t){return!0}function fl(t,e,n,r,a){let i=[],o="",l=0;for(;n>i.length;)i.push(r);if(null==e);else if("object"==typeof e&&null!==e){if(Array.isArray(e)){if(e.length>n)return o="Too many inputs for parameter '"+t+"'",o;if(0===e.length)return o="Empty array not allowd for "+t,o;for(let n=0;n<i.length;n++)if(n<e.length){let a=e[n],u=null;if(n>0&&(u=e[n-1].trim()),"string"==typeof a){if(a=a.trim(),""!==a){o="Invalid inputs for "+t;break}i[n]=null!==u?u:r}else{if("boolean"!=typeof a){o="Invalid inputs for "+t;break}i[n]=a,l++}}else{let t=e[e.length-1];i[n]=l>0?t:r}}}else if("string"==typeof e){let a=e.split(",");if(a.length>1){if(a.length>n)return o="Too many inputs for parameter '"+t+"'",o;for(let e=0;e<i.length;e++)if(e<a.length){let n=a[e].trim(),u=null;if(e>0&&(u=ll(a[e-1].trim())),""===n)i[e]=null!==u?u:r;else{let r=ll(n);if(null===r){o="Invalid inputs for "+t;break}i[e]=r,l++}}else{let t=ll(a[a.length-1].trim());i[e]=l>0&&null!==t?t:r}}else if(""===e);else{let n=ll(e);if(null!==n){i[0]=n,l++;for(let t=1;t<i.length;t++)i[t]=n}else o="Invalid inputs for "+t}}else if("boolean"==typeof e){i[0]=e,l++;for(let t=1;t<i.length;t++)i[t]=e}else o="Invalid inputs for "+t;return a||0!==l||(o="No valid input for "+t),""!==o?o:i}function hl(t,e,n,r,a){let i=[],o="",l=0;for(;n>i.length;)i.push(r);if(null==e);else if("object"==typeof e&&null!==e){if(Array.isArray(e)){if(e.length>n)return o="Too many inputs for parameter '"+t+"'",o;if(0===e.length)return o="Empty array not allowd for "+t,o;for(let n=0;n<i.length;n++)if(n<e.length){let a=e[n],u=null;if(n>0&&(u=e[n-1].trim()),"string"==typeof a){if(a=a.trim(),""!==a){o="Invalid inputs for "+t;break}i[n]=null!==u?u:r}else{if("number"!=typeof a){o="Invalid inputs for "+t;break}i[n]=a,l++}}else{let t=e[e.length-1];i[n]=l>0?t:r}}}else if("string"==typeof e){let a=e.split(",");if(a.length>1){if(a.length>n)return o="Too many inputs for parameter '"+t+"'",o;for(let n=0;n<i.length;n++)if(n<a.length){let e=a[n].trim(),u=null;if(n>0&&(u=_o(a[n-1].trim()).value),""===e)null!==u&&Number.isNumber(u)?i[n]=u:i[n]=r;else{let r=_o(e).value;if(!Number.isNumber(r)){o="Invalid inputs for "+t;break}i[n]=r,l++}}else{let t=_o(a[e.length-1].trim()).value;l>0&&Number.isNumber(t)?i[n]=t:i[n]=r}}else if(""===e);else{let n=_o(e).value;if(Number.isNumber(n)){i[0]=n,l++;for(let t=1;t<i.length;t++)i[t]=n}else o="Invalid inputs for "+t}}else if("number"==typeof e)if(Number.isNumber(e)){i[0]=e,l++;for(let t=1;t<i.length;t++)i[t]=e}else o="Invalid inputs for "+t;else o="Invalid inputs for "+t;return a||0!==l||(o="No valid input for "+t),""!==o?o:i}function dl(t,e,n,r,a,i){let o=[],l="",u=0;for(;n>o.length;)o.push(r);if(null==e);else if("object"==typeof e&&null!==e){if(Array.isArray(e)){if(e.length>n)return l="Too many inputs for parameter '"+t+"'",l;if(0===e.length)return l="Empty array not allowd for "+t,l;for(let n=0;n<o.length;n++)if(n<e.length){let i=e[n],s=null;if(n>0&&(s=e[n-1].trim()),"string"!=typeof i){l="Invalid inputs for "+t;break}if(i=i.trim(),""===i)o[n]=null!==s?s:r;else if(a){if(!a(i)){l="Invalid inputs for "+t;break}o[n]=i,u++}else o[n]=i,u++}else{let t=e[e.length-1].trim();o[n]=u>0?t:r}}}else if("string"==typeof e){let i=e.split(",");if(i.length>1){if(i.length>n)return l="Too many inputs for parameter '"+t+"'",l;for(let e=0;e<o.length;e++)if(e<i.length){let n=i[e].trim(),s=null;if(e>0&&(s=i[e-1].trim()),""===n)o[e]=null!==s?s:r;else if(a){if(!a(n)){l="Invalid inputs for "+t;break}o[e]=n,u++}else o[e]=n,u++}else{let t=i[i.length-1].trim();o[e]=u>0?t:r}}else if(""===e);else if(a)if(a(e)){o[0]=e,u++;for(let t=1;t<o.length;t++)o[t]=e}else l="Invalid inputs for "+t;else{o[0]=e,u++;for(let t=1;t<o.length;t++)o[t]=e}}else l="Invalid inputs for "+t;return i||0!==u||(l="No valid input for "+t),""!==l?l:o}function gl(t,e){let n=[];if(null==e)return n;if("object"==typeof e){if(Array.isArray(e))for(let r of e)if("string"==typeof r){let e=parseFloat(r);if(!Number.isNumber(e)){return`Parameter '${t}' accepts only numbers`}n.push(e)}}else if("string"==typeof e){let r=e.split(",");if(r.length>1)for(let e of r){let r=parseFloat(e.trim());if(Number.isNaN(r)){return`Parameter '${t}' accepts only numbers`}n.push(r)}else{if(""===e){return`Empty ${t} is not allowed.`}{let r=parseFloat(e);if(!Number.isNumber(r)){return`Parameter '${t}' accepts only numbers`}n.push(r)}}}else{if("number"!=typeof e){return`Invalid ${t}`}n.push(e)}return n}function pl(t,e){let n=[];if(null==e)return n;if("object"==typeof e){if(Array.isArray(e))for(let t of e)"string"==typeof t&&n.push(t)}else{if("string"!=typeof e){return`Invalid ${t}`}{let r=e.split(",");if(r.length>1)for(let t of r)n.push(t);else{if(""===e){return`Empty ${t} is not allowed.`}n.push(e)}}}return n}function ml(t,e){t&&("string"==typeof t.title&&(e.title=t.title),"string"==typeof t.xAxisLabel&&(e.xAxisLabel=t.xAxisLabel),"string"==typeof t.xAxisColor&&(e.xAxisColor=t.xAxisColor),"string"==typeof t.xAxisLabelColor&&(e.xAxisLabelColor=t.xAxisLabelColor),"boolean"==typeof t.allowInspectData&&(e.allowInspectData=t.allowInspectData),"boolean"==typeof t.showLegend&&(e.showLegend=t.showLegend),"string"==typeof t.legendPosition?e.legendPosition=t.legendPosition:e.legendPosition="bottom","string"==typeof t.legendOrientation?e.legendOrientation=t.legendOrientation:"top"===e.legendPosition||"bottom"===e.legendPosition?e.legendOrientation="horizontal":"left"===e.legendPosition||"right"===e.legendPosition?e.legendOrientation="vertical":e.legendOrientation="horizontal","string"==typeof t.legendBgColor&&(e.legendBgColor=t.legendBgColor),"string"==typeof t.legendBorderColor&&(e.legendBorderColor=t.legendBorderColor));let n=dl("yAxisLabel",null==t?void 0:t.yAxisLabel,2,"Value",null,!0);if("string"==typeof n)return n;if(n.length>2)return"yAxisLabel accepts not more than two values for left and right y-axes";e.yAxisLabel=n;let r=dl("yAxisColor",null==t?void 0:t.yAxisColor,2,"",cl,!0);if("string"==typeof r)return r;if(r.length>2)return"yAxisColor accepts not more than two values for left and right y-axes";e.yAxisColor=r;let a=dl("yAxisLabelColor",null==t?void 0:t.yAxisLabelColor,2,"",cl,!0);if("string"==typeof a)return a;if(a.length>2)return"yAxisLabelColor accepts not more than two values for left and right y-axes";e.yAxisLabelColor=a;let i=dl("yAxisUnit",null==t?void 0:t.yAxisUnit,2,"",null,!0);if("string"==typeof i)return i;if(i.length>2)return"yAxisUnit accepts not more than two values for left and right y-axes";e.yAxisUnit=i;let o=hl("yMin",null==t?void 0:t.yMin,2,null,!0);if("string"==typeof o)return o;if(o.length>2)return"yMin accepts not more than two values for left and right y-axes";e.yMin=o;let l=hl("yMax",null==t?void 0:t.yMax,2,null,!0);if("string"==typeof l)return l;if(l.length>2)return"yMax accepts not more than two values for left and right y-axes";e.yMax=l;let u=fl("reverseYAxis",null==t?void 0:t.reverseYAxis,2,!1,!0);return"string"==typeof u?u:u.length>2?"reverseYAxis accepts not more than two values for left and right y-axes":void(e.reverseYAxis=u)}function yl(t){let e=[];if(null!==t){const n=Object.keys(t);for(let t of n)e.push(t.toString())}return e}function vl(t,e){let n=t.basename;return e.dateFormatPrefix&&n.startsWith(e.dateFormatPrefix)&&(n=n.slice(e.dateFormatPrefix.length)),e.dateFormatSuffix&&n.endsWith(e.dateFormatSuffix)&&(n=n.slice(0,n.length-e.dateFormatSuffix.length)),bo(n,e.dateFormat)}function wl(t,e,n){let r=window.moment(""),a=t.frontmatter;if(a&&ko(a,e.getTarget())){r=bo(ko(a,e.getTarget()),n.dateFormat)}return r}function Al(t,e,n){let r=window.moment(""),a=e.getTarget();e.getParentTarget()&&(a=e.getParentTarget());let i,o=new RegExp("(^|\\s)#"+a+"(\\/[\\w-]+)*(:(?<values>[\\d\\.\\/-]*)[a-zA-Z]*)?([\\.!,\\?;~-]*)?(\\s|$)","gm");for(;i=o.exec(t);)if(void 0!==i.groups&&void 0!==i.groups.values){if(r=bo(i.groups.values,n.dateFormat),r.isValid())break}return r}function xl(t,e,n){let r,a=window.moment(""),i=e.getTarget(),o=new RegExp(i,"gm");for(;r=o.exec(t);)if(void 0!==r.groups&&void 0!==r.groups.value){if(a=bo(r.groups.value.trim(),n.dateFormat),a.isValid())break}return a}function bl(t,e,n){let r=window.moment(""),a=e.getTarget();e.getParentTarget()&&(a=e.getParentTarget()),a=a.replace("-","[\\s\\-]");let i,o=new RegExp("(^|\\s)\\*{0,2}"+a+"\\*{0,2}(::\\s*(?<values>[\\d\\.\\/\\-\\w,@;\\s]*))(\r?\n|\r)","gm");for(;i=o.exec(t);)if(void 0!==i.groups&&void 0!==i.groups.values){if(r=bo(i.groups.values.trim(),n.dateFormat),r.isValid())break}return r}function Dl(e,n,r){let a=window.moment("");if(e&&e instanceof t.TFile){let t=n.getTarget();if("cDate"===t){a=Fo(e.stat.ctime,r.dateFormat)}else if("mDate"===t){a=Fo(e.stat.mtime,r.dateFormat)}}return a}function Cl(t,e,n){let r=window.moment(""),a=e.getType(),i=e.getTarget();i=a===ka.Task?"\\[[\\sx]\\]\\s"+i:a===ka.TaskDone?"\\[x\\]\\s"+i:a===ka.TaskNotDone?"\\[\\s\\]\\s"+i:"\\[[\\sx]\\]\\s"+i;let o,l=new RegExp(i,"gm");for(;o=l.exec(t);)if(void 0!==o.groups&&void 0!==o.groups.value){if(r=bo(o.groups.value.trim(),n.dateFormat),r.isValid())break}return r}function Fl(t,e,n,r){if(t.has(e)){t.get(e).push({query:n,value:r})}else{let a=new Array;a.push({query:n,value:r}),t.set(e,a)}}function Ml(e,n,r,a,i,o){if(e&&e instanceof t.TFile){let t=r.getTarget(),l=o.get(a.xDataset[r.getId()]);if("cDate"===t){let t=e.stat.ctime;r.valueType=_a.Date,r.addNumTargets(),Fl(i,l,r,t)}else if("mDate"===t){let t=e.stat.mtime;r.valueType=_a.Date,r.addNumTargets(),Fl(i,l,r,t)}else if("size"===t){let t=e.stat.size;r.addNumTargets(),Fl(i,l,r,t)}else if("numWords"===t){Fl(i,l,r,function(t){t=Eo(t);var e=new RegExp(["(?:[0-9]+(?:(?:,|\\.)[0-9]+)*|[\\-"+/A-Za-z\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC/.source+"])+",/[\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u4E00-\u9FD5]{1}/.source].join("|"),"g");return(t.match(e)||[]).length}(n))}else if("numChars"===t){let t=n.length;r.addNumTargets(),Fl(i,l,r,t)}else if("numSentences"===t){let t=function(t){return(((t=Eo(t))||"").match(/[^.。!！?？\s][^.。!！?？]*(?:[.!?](?!['‘’"“”「」『』]?\s|$)[^.。!！?？]*)*[.。!！?？]?['’"”」』]?(?=\s||$)/gm)||[]).length}(n);r.addNumTargets(),Fl(i,l,r,t)}}}const kl={folder:"/",dateFormat:"YYYY-MM-DD"};class Tl extends t.PluginSettingTab{constructor(t,e){super(t,e),this.plugin=e}display(){let{containerEl:e}=this;e.empty(),new t.Setting(e).setName("Default folder location").setDesc("Files in this folder will be parsed and used as input data of the tracker plugin.\nYou can also override it using 'folder' argument int the tracker codeblock.").addText((t=>t.setPlaceholder("Folder Path").setValue(this.plugin.settings.folder).onChange((t=>r(this,void 0,void 0,(function*(){this.plugin.settings.folder=t,yield this.plugin.saveSettings()})))))),new t.Setting(e).setName("Default date format").setDesc("This format is used to parse the date in your diary title.\nYou can also override it using 'date-format' argument in the tracker codeblock.").addText((t=>t.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange((t=>r(this,void 0,void 0,(function*(){this.plugin.settings.dateFormat=t,yield this.plugin.saveSettings()}))))))}}class _l extends t.Plugin{onload(){return r(this,void 0,void 0,(function*(){console.log("loading obsidian-tracker plugin"),yield this.loadSettings(),this.addSettingTab(new Tl(this.app,this)),this.registerMarkdownCodeBlockProcessor("tracker",this.postprocessor.bind(this)),this.addCommand({id:"add-line-chart-tracker",name:"Add Line Chart Tracker",callback:()=>this.addCodeBlock(Ta.Line)}),this.addCommand({id:"add-bar-chart-tracker",name:"Add Bar Chart Tracker",callback:()=>this.addCodeBlock(Ta.Bar)}),this.addCommand({id:"add-summary-tracker",name:"Add Summary Tracker",callback:()=>this.addCodeBlock(Ta.Summary)})}))}loadSettings(){return r(this,void 0,void 0,(function*(){this.settings=Object.assign({},kl,yield this.loadData())}))}saveSettings(){return r(this,void 0,void 0,(function*(){yield this.saveData(this.settings)}))}onunload(){console.log("unloading obsidian-tracker plugin")}getFilesInFolder(e,n=!0){let r=[];for(let a of e.children)a instanceof t.TFile?"md"===a.extension&&r.push(a):a instanceof t.TFolder&&n&&(r=r.concat(this.getFilesInFolder(a)));return r}getFiles(e,n=!0){let r=[],a=this.app.vault.getAbstractFileByPath(t.normalizePath(e));return a&&a instanceof t.TFolder&&(r=r.concat(this.getFilesInFolder(a))),r}postprocessor(e,n,a){return r(this,void 0,void 0,(function*(){const a=document.createElement("div");let i=function(e,n){let r;try{r=t.parseYaml(e)}catch(t){let e="Error parsing YAML";return console.log(t),e}if(!r)return"Error parsing YAML";let a=yl(r),i="";if(!a.includes("searchTarget"))return"Parameter 'searchTarget' not found in YAML";let o=[];if("object"==typeof r.searchTarget&&null!==r.searchTarget){if(Array.isArray(r.searchTarget))for(let t of r.searchTarget)if("string"==typeof t){if(""===t){i="Empty search target is not allowed.";break}o.push(t)}}else if("string"==typeof r.searchTarget){let t=r.searchTarget.split(",");if(t.length>1)for(let e of t){if(e=e.trim(),""===e){i="Empty search target is not allowed.";break}o.push(e)}else""===r.searchTarget?i="Empty search target is not allowed.":o.push(r.searchTarget)}else i="Invalid search target (searchTarget)";if(""!==i)return i;let l=o.length;if(!a.includes("searchType"))return"Parameter 'searchType' not found in YAML";let u=[],s=dl("searchType",r.searchType,l,"",ul,!1);if("string"==typeof s)return s;for(let t of s)switch(t.toLowerCase()){case"tag":u.push(ka.Tag);break;case"frontmatter":u.push(ka.Frontmatter);break;case"wiki":u.push(ka.Wiki);break;case"text":u.push(ka.Text);break;case"dvfield":u.push(ka.dvField);break;case"table":u.push(ka.Table);break;case"filemeta":u.push(ka.FileMeta);break;case"task":case"task.all":u.push(ka.Task);break;case"task.done":u.push(ka.TaskDone);break;case"task.notdone":u.push(ka.TaskNotDone)}if(u.includes(ka.Table)&&u.filter((t=>t!==ka.Table)).length>0)return"searchType 'table' doestn't work with other types for now";let c=[],f=dl("separator",r.separator,l,"/",null,!0);if("string"==typeof f)return f;c=f.map((t=>"comma"===t?",":t));let h=hl("xDataset",r.xDataset,l,-1,!0);if("string"==typeof h)return h;let d=h.map((t=>t<0||t>=l?-1:t)),g=[];for(let t=0;t<o.length;t++){let e=new ro(g.length,u[t],o[t]);e.setSeparator(c[t]),d.includes(t)&&(e.usedAsXDataset=!0),g.push(e)}let p=new oo(g),m=yl(p),y=["searchType","searchTarget","separator"],v=[],w=[],A=[],x=[],b=[],D=[],C=[];for(let t of a)/^line[0-9]*$/.test(t)&&(v.push(t),y.push(t)),/^bar[0-9]*$/.test(t)&&(w.push(t),y.push(t)),/^pie[0-9]*$/.test(t)&&(A.push(t),y.push(t)),/^summary[0-9]*$/.test(t)&&(x.push(t),y.push(t)),/^bullet[0-9]*$/.test(t)&&(C.push(t),y.push(t)),/^month[0-9]*$/.test(t)&&(b.push(t),y.push(t)),/^heatmap[0-9]*$/.test(t)&&(D.push(t),y.push(t));for(let t of a)if(!m.includes(t)&&!y.includes(t))return i="'"+t+"' is not an available key",i;if(0===v.length+w.length+A.length+x.length+C.length+b.length+D.length)return"No output parameter provided, please place line, bar, pie, month, bullet, or summary.";ol.getDailyNoteSettings(),"string"==typeof r.folder?""===r.folder?p.folder=n.settings.folder:p.folder=r.folder:p.folder=n.settings.folder;let F=n.app.vault.getAbstractFileByPath(t.normalizePath(p.folder));if(!(F&&F instanceof t.TFolder))return"Folder '"+p.folder+"' doesn't exist";const M=r.dateFormat;if("string"==typeof r.dateFormat?""===r.dateFormat?p.dateFormat=n.settings.dateFormat:p.dateFormat=M:p.dateFormat=n.settings.dateFormat,"string"==typeof r.dateFormatPrefix&&(p.dateFormatPrefix=r.dateFormatPrefix),"string"==typeof r.dateFormatSuffix&&(p.dateFormatSuffix=r.dateFormatSuffix),"string"==typeof r.startDate){let t=r.startDate;p.dateFormatPrefix&&t.startsWith(p.dateFormatPrefix)&&(t=t.slice(p.dateFormatPrefix.length)),p.dateFormatSuffix&&t.endsWith(p.dateFormatSuffix)&&(t=t.slice(0,t.length-p.dateFormatSuffix.length));let e=null,n=!1;if(e=Do(t,p.dateFormat),e?n=!0:(e=bo(t,p.dateFormat),e.isValid()&&(n=!0)),!n||null===e)return"Invalid startDate, the format of startDate may not match your dateFormat "+p.dateFormat;p.startDate=e}if("string"==typeof r.endDate){let t=r.endDate;p.dateFormatPrefix&&t.startsWith(p.dateFormatPrefix)&&(t=t.slice(p.dateFormatPrefix.length)),p.dateFormatSuffix&&t.endsWith(p.dateFormatSuffix)&&(t=t.slice(0,t.length-p.dateFormatSuffix.length));let e=null,n=!1;if(e=Do(t,p.dateFormat),e?n=!0:(e=bo(t,p.dateFormat),e.isValid()&&(n=!0)),!n||null===e)return"Invalid endDate, the format of endDate may not match your dateFormat "+p.dateFormat;p.endDate=e}if(null!==p.startDate&&p.startDate.isValid()&&null!==p.endDate&&p.endDate.isValid()&&p.endDate<p.startDate)return"Invalid date range (startDate larger than endDate)";p.xDataset=d;let k=dl("datasetName",r.datasetName,l,"untitled",null,!0);if("string"==typeof k)return k;let T=0;for(let t=0;t<k.length;t++)p.xDataset.includes(t)||"untitled"===k[t]&&(k[t]="untitled"+T.toString(),T++);if(new Set(k).size!==k.length)return"Not enough dataset names or duplicated names";p.datasetName=k;let _=hl("constValue",r.constValue,l,1,!0);if("string"==typeof _)return _;p.constValue=_;let S=fl("ignoreAttachedValue",r.ignoreAttachedValue,l,!1,!0);if("string"==typeof S)return S;p.ignoreAttachedValue=S;let N=fl("ignoreZeroValue",r.ignoreZeroValue,l,!1,!0);if("string"==typeof N)return N;p.ignoreZeroValue=N;let B=fl("accum",r.accum,l,!1,!0);if("string"==typeof B)return B;p.accum=B;let E=hl("penalty",r.penalty,l,null,!0);if("string"==typeof E)return E;p.penalty=E;let I=hl("valueShift",r.valueShift,l,0,!0);if("string"==typeof I)return I;p.valueShift=I,"number"==typeof r.fixedScale&&(p.fixedScale=r.fixedScale),"boolean"==typeof r.fitPanelWidth&&(p.fitPanelWidth=r.fitPanelWidth);let L=hl("margin",r.margin,4,10,!0);if("string"==typeof L)return L;if(L.length>4)return"margin accepts not more than four values for top, right, bottom, and left margins.";p.margin=new vo(L[0],L[1],L[2],L[3]);for(let t of v){let e=new so,n=r[t],a=yl(e),o=yl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;let u=ml(n,e);if("string"==typeof u)return u;let s=dl("lineColor",null==n?void 0:n.lineColor,l,"",cl,!0);if("string"==typeof s)return s;e.lineColor=s;let c=hl("lineWidth",null==n?void 0:n.lineWidth,l,1.5,!0);if("string"==typeof c)return c;e.lineWidth=c;let f=fl("showLine",null==n?void 0:n.showLine,l,!0,!0);if("string"==typeof f)return f;e.showLine=f;let h=fl("showPoint",null==n?void 0:n.showPoint,l,!0,!0);if("string"==typeof h)return h;e.showPoint=h;let d=dl("pointColor",null==n?void 0:n.pointColor,l,"#69b3a2",cl,!0);if("string"==typeof d)return d;e.pointColor=d;let g=dl("pointBorderColor",null==n?void 0:n.pointBorderColor,l,"#69b3a2",cl,!0);if("string"==typeof g)return g;e.pointBorderColor=g;let m=hl("pointBorderWidth",null==n?void 0:n.pointBorderWidth,l,0,!0);if("string"==typeof m)return m;e.pointBorderWidth=m;let y=hl("pointSize",null==n?void 0:n.pointSize,l,3,!0);if("string"==typeof y)return y;e.pointSize=y;let v=fl("fillGap",null==n?void 0:n.fillGap,l,!1,!0);if("string"==typeof v)return v;e.fillGap=v;let w=dl("yAxisLocation",null==n?void 0:n.yAxisLocation,l,"left",sl,!0);if("string"==typeof w)return w;e.yAxisLocation=w,p.line.push(e)}for(let t of w){let e=new co,n=r[t],a=yl(e),o=yl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;let u=ml(n,e);if("string"==typeof u)return u;let s=dl("barColor",null==n?void 0:n.barColor,l,"",cl,!0);if("string"==typeof s)return s;e.barColor=s;let c=dl("yAxisLocation",null==n?void 0:n.yAxisLocation,l,"left",sl,!0);if("string"==typeof c)return c;e.yAxisLocation=c,p.bar.push(e)}for(let t of A){let e=new fo,n=r[t],a=yl(e),o=yl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;"string"==typeof(null==n?void 0:n.title)&&(e.title=n.title);let l=pl("data",null==n?void 0:n.data);if("string"==typeof l)return l;e.data=l;let u=e.data.length,s=dl("dataColor",null==n?void 0:n.dataColor,u,"none",cl,!0);if("string"==typeof s)return s;e.dataColor=s,"number"==typeof(null==n?void 0:n.ratioInnerRadius)&&(e.ratioInnerRadius=n.ratioInnerRadius),p.pie.push(e)}for(let t of x){let e=new ho,n=r[t],a=yl(e),o=yl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;"string"==typeof(null==n?void 0:n.template)&&(e.template=n.template),"string"==typeof(null==n?void 0:n.style)&&(e.style=n.style),p.summary.push(e)}for(let t of b){let e=new go,n=r[t],a=yl(e),o=yl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;let l=gl("dataset",null==n?void 0:n.dataset);if("string"==typeof l)return l;if(0===l.length)for(let t of g)l.push(t.getId());e.dataset=l;let u=e.dataset.length;"string"==typeof(null==n?void 0:n.startWeekOn)&&(e.startWeekOn=n.startWeekOn),"boolean"==typeof(null==n?void 0:n.showCircle)&&(e.showCircle=n.showCircle);let s=gl("threshold",null==n?void 0:n.threshold);if("string"==typeof s)return s;if(e.threshold=s,0===e.threshold.length)for(let t=0;t<u;t++)e.threshold.push(0);if(e.threshold.length!==e.dataset.length)return"The number of inputs of threshold and dataset not matched";let c=gl("yMin",null==n?void 0:n.yMin);if("string"==typeof c)return c;if(e.yMin=c,0===e.yMin.length)for(let t=0;t<u;t++)e.yMin.push(null);if(e.yMin.length!==e.dataset.length)return"The number of inputs of yMin and dataset not matched";let f=gl("yMax",null==n?void 0:n.yMax);if("string"==typeof f)return f;if(e.yMax=f,0===e.yMax.length)for(let t=0;t<u;t++)e.yMax.push(null);if(e.yMax.length!==e.dataset.length)return"The number of inputs of yMin and dataset not matched";"string"==typeof(null==n?void 0:n.color)&&(e.color=n.color),"boolean"==typeof(null==n?void 0:n.dimNotInMonth)&&(e.dimNotInMonth=n.dimNotInMonth),"boolean"==typeof(null==n?void 0:n.showStreak)&&(e.showStreak=n.showStreak),"boolean"==typeof(null==n?void 0:n.showTodayRing)&&(e.showTodayRing=n.showTodayRing),"boolean"==typeof(null==n?void 0:n.showSelectedValue)&&(e.showSelectedValue=n.showSelectedValue),"boolean"==typeof(null==n?void 0:n.showSelectedRing)&&(e.showSelectedRing=n.showSelectedRing),"string"==typeof(null==n?void 0:n.circleColor)&&(e.circleColor=n.circleColor),"boolean"==typeof(null==n?void 0:n.circleColorByValue)&&(e.circleColorByValue=n.circleColorByValue),"string"==typeof(null==n?void 0:n.headerYearColor)&&(e.headerYearColor=n.headerYearColor),"string"==typeof(null==n?void 0:n.headerMonthColor)&&(e.headerMonthColor=n.headerMonthColor),"string"==typeof(null==n?void 0:n.dividingLineColor)&&(e.dividingLineColor=n.dividingLineColor),"string"==typeof(null==n?void 0:n.todayRingColor)&&(e.todayRingColor=n.todayRingColor),"string"==typeof(null==n?void 0:n.selectedRingColor)&&(e.selectedRingColor=n.selectedRingColor),"string"==typeof(null==n?void 0:n.initMonth)&&(e.initMonth=n.initMonth),p.month.push(e)}for(let t of D){let e=new po,n=r[t],a=yl(e),o=yl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;p.heatmap.push(e)}for(let t of C){let e=new mo,n=r[t],a=yl(e),o=yl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;"string"==typeof(null==n?void 0:n.title)&&(e.title=n.title),"string"==typeof(null==n?void 0:n.dataset)&&(e.dataset=n.dataset),"string"==typeof(null==n?void 0:n.orientation)&&(e.orientation=n.orientation);let l=gl("range",null==n?void 0:n.range);if("string"==typeof l)return l;let u=l;if(1===u.length){if(u[0]<0)return i="Negative range value is not allowed",i}else{if(!(u.length>1))return i="Empty range is not allowed",i;{let t=u[0];if(t<0)return i="Negative range value is not allowed",i;for(let e=1;e<u.length;e++)if(u[e]<=t)return i="Values in parameter 'range' should be monotonically increasing",i}}e.range=u;let s=u.length,c=dl("rangeColor",null==n?void 0:n.rangeColor,s,"",cl,!0);if("string"==typeof c)return c;e.rangeColor=c,"string"==typeof(null==n?void 0:n.value)&&(e.value=n.value),"string"==typeof(null==n?void 0:n.valueUnit)&&(e.valueUnit=n.valueUnit),"string"==typeof(null==n?void 0:n.valueColor)&&(e.valueColor=n.valueColor),"boolean"==typeof(null==n?void 0:n.showMarker)&&(e.showMarker=n.showMarker),"number"==typeof(null==n?void 0:n.markerValue)&&(e.markerValue=n.markerValue),"string"==typeof(null==n?void 0:n.markerColor)&&(e.markerColor=n.markerColor),p.bullet.push(e)}return p}(e.trim(),this);if("string"==typeof i){return il(a,i),void n.appendChild(a)}let o,l=i;try{o=this.getFiles(l.folder)}catch(t){return il(a,t.message),void n.appendChild(a)}let u=window.moment(""),s=window.moment(""),c=0,f=new Map;const h=o.map((t=>r(this,void 0,void 0,(function*(){let e=null;l.queries.some((t=>{let e=t.getType();return t.getTarget(),e===ka.Frontmatter||e===ka.Tag||e===ka.Wiki}))&&(e=this.app.metadataCache.getFileCache(t));let n=null;l.queries.some((t=>{let e=t.getType(),n=t.getTarget();return e===ka.Tag||e===ka.Text||e===ka.dvField||e===ka.Task||e===ka.TaskDone||e===ka.TaskNotDone||e===ka.FileMeta&&("numWords"===n||"numChars"===n||"numSentences"===n)}))&&(n=yield this.app.vault.adapter.read(t.path));let a=new Map,i=!1;for(let r of l.xDataset)if(!a.has(r)){let o=window.moment("");if(-1===r)o=vl(t,l);else{let a=l.queries[r];switch(a.getType()){case ka.Frontmatter:o=wl(e,a,l);break;case ka.Tag:o=Al(n,a,l);break;case ka.Text:o=xl(n,a,l);break;case ka.dvField:o=bl(n,a,l);break;case ka.FileMeta:o=Dl(t,a,l);break;case ka.Task:case ka.TaskDone:case ka.TaskNotDone:o=Cl(n,a,l)}}o.isValid()?(null!==l.startDate&&o<l.startDate&&(i=!0),null!==l.endDate&&o>l.endDate&&(i=!0)):i=!0,i||(a.set(r,Co(o,l.dateFormat)),c++,1==c?(u=o.clone(),s=o.clone()):(o<u&&(u=o.clone()),o>s&&(s=o.clone())))}if(i)return;const o=l.queries.filter((t=>t.getType()!==ka.Table&&!t.usedAsXDataset)).map((i=>r(this,void 0,void 0,(function*(){e&&i.getType()===ka.Tag&&function(t,e,n,r,a){let i=t.frontmatter,o=[];if(i&&i.tags){let t=0,l=!1;Array.isArray(i.tags)?o=o.concat(i.tags):o.push(i.tags);for(let i of o){if(i===e.getTarget())t+=n.constValue[e.getId()],l=!0,e.addNumTargets();else{if(!i.startsWith(e.getTarget()+"/"))continue;t+=n.constValue[e.getId()],l=!0,e.addNumTargets()}let o=null;l&&(o=t),Fl(r,a.get(n.xDataset[e.getId()]),e,o)}}}(e,i,l,f,a),e&&i.getType()===ka.Frontmatter&&"tags"!==i.getTarget()&&function(t,e,n,r,a){let i=t.frontmatter;if(i)if(ko(i,e.getTarget())){let t=_o(ko(i,e.getTarget()));null!==t.value&&(t.type===_a.Time&&(e.valueType=_a.Time),e.addNumTargets(),Fl(r,a.get(n.xDataset[e.getId()]),e,t.value))}else if(e.getParentTarget()&&ko(i,e.getParentTarget())){let t=ko(i,e.getParentTarget()),o=null;if(Array.isArray(t)?o=t.map((t=>t.toString())):"string"==typeof t&&(o=t.split(e.getSeparator())),o&&o.length>e.getAccessor()&&e.getAccessor()>=0){let t=_o(o[e.getAccessor()].trim());null!==t.value&&(t.type===_a.Time&&(e.valueType=_a.Time),e.addNumTargets(),Fl(r,a.get(n.xDataset[e.getId()]),e,t.value))}}}(e,i,l,f,a),e&&i.getType()===ka.Wiki&&function(t,e,n,r,a){let i=t.links,o=0,l=!1;for(let t of i)t.link===e.getTarget()&&(l=!0,o+=n.constValue[e.getId()],e.addNumTargets());let u=null;l&&(u=o),Fl(r,a.get(n.xDataset[e.getId()]),e,u)}(e,i,l,f,a),n&&i.getType()===ka.Tag&&function(t,e,n,r,a){let i=e.getTarget();e.getParentTarget()&&(i=e.getParentTarget()),i.length>1&&i.startsWith("#")&&(i=i.substring(1));let o,l=new RegExp("(^|\\s)#"+i+"(\\/[\\w-]+)*(:(?<values>[\\d\\.\\/-]*)[a-zA-Z]*)?([\\.!,\\?;~-]*)?(\\s|$)","gm"),u=0,s=!1;for(;o=l.exec(t);)if(n.ignoreAttachedValue[e.getId()]||void 0===o.groups||void 0===o.groups.values)u+=n.constValue[e.getId()],s=!0,e.addNumTargets();else{let t=o.groups.values.split(e.getSeparator());if(!t)continue;if(1===t.length){let r=_o(t[0].trim());null!==r.value&&(r.type===_a.Time?(u=r.value,s=!0,e.valueType=_a.Time,e.addNumTargets()):n.ignoreZeroValue[e.getId()]&&0===r.value||(u+=r.value,s=!0,e.addNumTargets()))}else if(t.length>e.getAccessor()&&e.getAccessor()>=0){let n=_o(t[e.getAccessor()].trim());null!==n.value&&(n.type===_a.Time?(u=n.value,s=!0,e.valueType=_a.Time,e.addNumTargets()):(u+=n.value,s=!0,e.addNumTargets()))}}let c=null;s&&(c=u),Fl(r,a.get(n.xDataset[e.getId()]),e,c)}(n,i,l,f,a),n&&i.getType()===ka.Text&&function(t,e,n,r,a){let i,o=e.getTarget(),l=new RegExp(o,"gm"),u=0,s=!1;for(;i=l.exec(t);)if(n.ignoreAttachedValue[e.getId()]||void 0===i.groups)u+=n.constValue[e.getId()],s=!0,e.addNumTargets();else if(void 0!==i.groups.value){let t=parseFloat(i.groups.value);Number.isNaN(t)||n.ignoreZeroValue[e.getId()]&&0===t||(u+=t,s=!0,e.addNumTargets())}s&&Fl(r,a.get(n.xDataset[e.getId()]),e,u)}(n,i,l,f,a),i.getType()===ka.FileMeta&&Ml(t,n,i,l,f,a),n&&i.getType()===ka.dvField&&function(t,e,n,r,a){let i=e.getTarget();e.getParentTarget()&&(i=e.getParentTarget()),i=i.replace("-","[\\s\\-]");let o,l=new RegExp("(^|\\s)\\*{0,2}"+i+"\\*{0,2}(::\\s*(?<values>[\\d\\.\\/\\-\\w,@;\\s]*))(\r?\n|\r|$)","gm"),u=0,s=!1;for(;o=l.exec(t);)if(void 0!==o.groups&&void 0!==o.groups.values){let t=o.groups.values.trim().split(e.getSeparator());if(!t)continue;if(1===t.length){let r=_o(t[0]);null!==r.value&&(r.type===_a.Time?(u=r.value,s=!0,e.valueType=_a.Time,e.addNumTargets()):n.ignoreZeroValue[e.getId()]&&0===r.value||(u+=r.value,s=!0,e.addNumTargets()))}else if(t.length>e.getAccessor()&&e.getAccessor()>=0){let n=_o(t[e.getAccessor()].trim());null!==n.value&&(n.type===_a.Time?(u=n.value,s=!0,e.valueType=_a.Time,e.addNumTargets()):(u+=n.value,s=!0,e.addNumTargets()))}}else u+=n.constValue[e.getId()],s=!0,e.addNumTargets();let c=null;s&&(c=u),Fl(r,a.get(n.xDataset[e.getId()]),e,c)}(n,i,l,f,a),!n||i.getType()!==ka.Task&&i.getType()!==ka.TaskDone&&i.getType()!==ka.TaskNotDone||function(t,e,n,r,a){let i=e.getType(),o=e.getTarget();o=i===ka.Task?"\\[[\\sx]\\]\\s"+o:i===ka.TaskDone?"\\[x\\]\\s"+o:i===ka.TaskNotDone?"\\[\\s\\]\\s"+o:"\\[[\\sx]\\]\\s"+o;let l,u=new RegExp(o,"gm"),s=0,c=!1;for(;l=u.exec(t);)if(n.ignoreAttachedValue[e.getId()]||void 0===l.groups)s+=n.constValue[e.getId()],c=!0,e.addNumTargets();else if(void 0!==l.groups.value){let t=parseFloat(l.groups.value);Number.isNaN(t)||n.ignoreZeroValue[e.getId()]&&0===t||(s+=t,c=!0,e.addNumTargets())}c&&Fl(r,a.get(n.xDataset[e.getId()]),e,s)}(n,i,l,f,a)}))));yield Promise.all(o)}))));yield Promise.all(h);let d=l.queries.filter((t=>t.getType()===ka.Table)),g=[];for(let t of d){let e=t.getParentTarget(),n=t.getAccessor(),r=t.usedAsXDataset,a=g.find((t=>t.filePath===e&&t.tableIndex===n));if(a)r?a.xDataset=t:a.yDatasets.push(t);else{let a=new Ao(e,n);r?a.xDataset=t:a.yDatasets.push(t),g.push(a)}}for(let e of g){let r=e.xDataset,i=e.yDatasets,o=r.getParentTarget(),h=r.getAccessor(),d="";o+=".md";let g=this.app.vault.getAbstractFileByPath(t.normalizePath(o));if(!(g&&g instanceof t.TFile))continue;{c++;let t,e=yield this.app.vault.adapter.read(g.path),n=new RegExp("((\\r?\\n){2}|^)([^\\r\\n]*\\|[^\\r\\n]*(\\r?\\n)?)+(?=(\\r?\\n){2}|$)","gm"),r=0;for(;t=n.exec(e);){if(r===h){d=t[0];break}r++}}let p=d.split(/\r?\n/);p=p.filter((t=>""!==t));let m=0,y=0;if(p.length>=2){let t=p.shift().trim();t=To(t,"|"),m=t.split("|").length;let e=p.shift().trim();e=To(e,"|");let n=e.split("|");for(let t of n)if(!t.includes("-"))break;y=p.length}if(0==y)continue;let v=r.getAccessor(1);if(v>=m)continue;let w=[];for(let t of p){let e=To(t.trim(),"|").split("|");if(v<e.length){let t=bo(e[v].trim(),l.dateFormat);t.isValid()?(w.push(t),u.isValid()||s.isValid()?(t<u&&(u=t.clone()),t>s&&(s=t.clone())):(u=t.clone(),s=t.clone())):w.push(null)}else w.push(null)}if(w.every((t=>null===t))){return il(a,"No valid X value found"),void n.appendChild(a)}for(let t of i){let e=t.getAccessor(1);if(e>=m)continue;let n=0;for(let r of p){let a=To(r.trim(),"|").split("|");if(e<a.length){let r=a[e].trim().split(t.getSeparator());if(!r)continue;if(1===r.length){let e=parseFloat(r[0]);Number.isNumber(e)&&n<w.length&&w[n]&&Fl(f,Co(w[n],l.dateFormat),t,e)}else if(r.length>t.getAccessor(2)&&t.getAccessor(2)>=0){let e=null,a=r[t.getAccessor(2)].trim();e=parseFloat(a),Number.isNumber(e)&&n<w.length&&w[n]&&Fl(f,Co(w[n],l.dateFormat),t,e)}}n++}}}if(0===c){return il(a,"No notes found under the given search condition"),void n.appendChild(a)}if(!u.isValid()||!s.isValid()){return il(a,"Invalid date range"),void n.appendChild(a)}if(null===l.startDate&&null===l.endDate)l.startDate=u.clone(),l.endDate=s.clone();else if(null!==l.startDate&&null===l.endDate){if(!(l.startDate<s)){return il(a,"Invalid date range"),void n.appendChild(a)}l.endDate=s.clone()}else if(null!==l.endDate&&null===l.startDate){if(!(l.endDate>u)){return il(a,"Invalid date range"),void n.appendChild(a)}l.startDate=u.clone()}else if(l.startDate<u&&l.endDate<u||l.startDate>s&&l.endDate>s){return il(a,"Invalid date range"),void n.appendChild(a)}let p=new io(l.startDate,l.endDate);for(let t of l.queries){let e=p.createDataset(t,l);e.addNumTargets(t.getNumTargets());for(let n=l.startDate.clone();n<=l.endDate;n.add(1,"days"))if(f.has(Co(n,l.dateFormat))){let r=f.get(Co(n,l.dateFormat)).filter((function(e){return e.query.equalTo(t)}));if(r.length>0){let t=null;for(let e=0;e<r.length;e++){let n=r[e].value;Number.isNumber(n)&&!Number.isNaN(n)&&(null===t?t=n:t+=n)}null!==t&&e.setValue(n,t)}}}l.datasets=p;let m=function(t,e){for(let t of e.datasets)t.getQuery().usedAsXDataset||(null!==e.valueShift[t.getId()]&&t.shift(e.valueShift[t.getId()]),null!==e.penalty[t.getId()]&&t.setPenalty(e.penalty[t.getId()]),e.accum[t.getId()]&&t.accumulateValues());for(let n of e.line){let r=rl(t,e,n);if("string"==typeof r)return r}for(let n of e.bar){let r=al(t,e,n);if("string"==typeof r)return r}for(let t of e.pie){let n=Po(0,e,t);if("string"==typeof n)return n}for(let n of e.summary){let r=Yo(t,e,n);if("string"==typeof r)return r}for(let n of e.bullet){let r=Xo(t,e,n);if("string"==typeof r)return r}for(let n of e.month){let r=Wo(t,e,n);if("string"==typeof r)return r}for(let t of e.heatmap){let t=qo(0,e);if("string"==typeof t)return t}}(a,l);if("string"==typeof m){return il(a,m),void n.appendChild(a)}n.appendChild(a)}))}getEditor(){return this.app.workspace.getActiveViewOfType(t.MarkdownView).editor}addCodeBlock(e){if(!(this.app.workspace.activeLeaf.view instanceof t.MarkdownView))return;let n="";switch(e){case Ta.Line:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nline:\n    title: "Line Chart"\n    xAxisLabel: Date\n    yAxisLabel: Value\n```';break;case Ta.Bar:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nbar:\n    title: "Bar Chart"\n    xAxisLabel: Date\n    yAxisLabel: Value\n```';break;case Ta.Summary:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nsummary:\n    template: "Average value of tagName is {{average}}"\n    style: "color:white;"\n```'}""!==n&&this.insertToNextLine(n)}insertToNextLine(t){let e=this.getEditor();if(e){let n=e.getCursor(),r=n.line,a=e.getLine(r);return n.ch=a.length,e.setSelection(n),e.replaceSelection("\n"+t),!0}return!1}}module.exports=_l;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

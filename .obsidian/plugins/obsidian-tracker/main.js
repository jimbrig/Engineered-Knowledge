"use strict";var t=require("obsidian");
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function e(t,e,n,r){return new(n||(n=Promise))((function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function l(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,l)}u((r=r.apply(t,e||[])).next())}))}function n(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function r(t){let e=t,r=t;function a(t,e,n,a){for(null==n&&(n=0),null==a&&(a=t.length);n<a;){const i=n+a>>>1;r(t[i],e)<0?n=i+1:a=i}return n}return 1===t.length&&(e=(e,n)=>t(e)-n,r=function(t){return(e,r)=>n(t(e),r)}(t)),{left:a,center:function(t,n,r,i){null==r&&(r=0),null==i&&(i=t.length);const o=a(t,n,r,i-1);return o>r&&e(t[o-1],n)>-e(t[o],n)?o-1:o},right:function(t,e,n,a){for(null==n&&(n=0),null==a&&(a=t.length);n<a;){const i=n+a>>>1;r(t[i],e)>0?a=i:n=i+1}return n}}}const a=r(n).right;function i(t,e,n){return t(n={path:e,exports:{},require:function(t,e){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==e&&n.path)}},n.exports),n.exports}r((function(t){return null===t?NaN:+t})).center;var o=Math.sqrt(50),l=Math.sqrt(10),u=Math.sqrt(2);function s(t,e,n){var r=(e-t)/Math.max(0,n),a=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,a);return a>=0?(i>=o?10:i>=l?5:i>=u?2:1)*Math.pow(10,a):-Math.pow(10,-a)/(i>=o?10:i>=l?5:i>=u?2:1)}function f(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),a=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/a;return i>=o?a*=10:i>=l?a*=5:i>=u&&(a*=2),e<t?-a:a}function c(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n<e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let a of t)null!=(a=e(a,++r,t))&&(n<a||void 0===n&&a>=a)&&(n=a)}return n}function h(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n>e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let a of t)null!=(a=e(a,++r,t))&&(n>a||void 0===n&&a>=a)&&(n=a)}return n}function d(t,e,r=0,a=t.length-1,i=n){for(;a>r;){if(a-r>600){const n=a-r+1,o=e-r+1,l=Math.log(n),u=.5*Math.exp(2*l/3),s=.5*Math.sqrt(l*u*(n-u)/n)*(o-n/2<0?-1:1);d(t,e,Math.max(r,Math.floor(e-o*u/n+s)),Math.min(a,Math.floor(e+(n-o)*u/n+s)),i)}const n=t[e];let o=r,l=a;for(g(t,r,e),i(t[a],n)>0&&g(t,r,a);o<l;){for(g(t,o,l),++o,--l;i(t[o],n)<0;)++o;for(;i(t[l],n)>0;)--l}0===i(t[r],n)?g(t,r,l):(++l,g(t,l,a)),l<=e&&(r=l+1),e<=l&&(a=l-1)}return t}function g(t,e,n){const r=t[e];t[e]=t[n],t[n]=r}function p(t,e,n){if(r=(t=Float64Array.from(function*(t,e){if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(yield e);else{let n=-1;for(let r of t)null!=(r=e(r,++n,t))&&(r=+r)>=r&&(yield r)}}(t,n))).length){if((e=+e)<=0||r<2)return h(t);if(e>=1)return c(t);var r,a=(r-1)*e,i=Math.floor(a),o=c(d(t,i).subarray(0,i+1));return o+(h(t.subarray(i+1))-o)*(a-i)}}function y(t,e,n){t=+t,e=+e,n=(a=arguments.length)<2?(e=t,t=0,1):a<3?1:+n;for(var r=-1,a=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(a);++r<a;)i[r]=t+r*n;return i}function m(t,e){let n=0;if(void 0===e)for(let e of t)(e=+e)&&(n+=e);else{let r=-1;for(let a of t)(a=+e(a,++r,t))&&(n+=a)}return n}var v=Array.prototype.slice;function w(t){return t}function x(t){return"translate("+t+",0)"}function A(t){return"translate(0,"+t+")"}function b(t){return e=>+t(e)}function D(t,e){return e=Math.max(0,t.bandwidth()-2*e)/2,t.round()&&(e=Math.round(e)),n=>+t(n)+e}function M(){return!this.__axis}function C(t,e){var n=[],r=null,a=null,i=6,o=6,l=3,u="undefined"!=typeof window&&window.devicePixelRatio>1?0:.5,s=1===t||4===t?-1:1,f=4===t||2===t?"x":"y",c=1===t||3===t?x:A;function h(h){var d=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,g=null==a?e.tickFormat?e.tickFormat.apply(e,n):w:a,p=Math.max(i,0)+l,y=e.range(),m=+y[0]+u,v=+y[y.length-1]+u,x=(e.bandwidth?D:b)(e.copy(),u),A=h.selection?h.selection():h,C=A.selectAll(".domain").data([null]),T=A.selectAll(".tick").data(d,e).order(),k=T.exit(),F=T.enter().append("g").attr("class","tick"),_=T.select("line"),S=T.select("text");C=C.merge(C.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),T=T.merge(F),_=_.merge(F.append("line").attr("stroke","currentColor").attr(f+"2",s*i)),S=S.merge(F.append("text").attr("fill","currentColor").attr(f,s*p).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),h!==A&&(C=C.transition(h),T=T.transition(h),_=_.transition(h),S=S.transition(h),k=k.transition(h).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=x(t))?c(t+u):this.getAttribute("transform")})),F.attr("opacity",1e-6).attr("transform",(function(t){var e=this.parentNode.__axis;return c((e&&isFinite(e=e(t))?e:x(t))+u)}))),k.remove(),C.attr("d",4===t||2===t?o?"M"+s*o+","+m+"H"+u+"V"+v+"H"+s*o:"M"+u+","+m+"V"+v:o?"M"+m+","+s*o+"V"+u+"H"+v+"V"+s*o:"M"+m+","+u+"H"+v),T.attr("opacity",1).attr("transform",(function(t){return c(x(t)+u)})),_.attr(f+"2",s*i),S.attr(f,s*p).text(g),A.filter(M).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),A.each((function(){this.__axis=x}))}return h.scale=function(t){return arguments.length?(e=t,h):e},h.ticks=function(){return n=v.call(arguments),h},h.tickArguments=function(t){return arguments.length?(n=null==t?[]:v.call(t),h):n.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:v.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(a=t,h):a},h.tickSize=function(t){return arguments.length?(i=o=+t,h):i},h.tickSizeInner=function(t){return arguments.length?(i=+t,h):i},h.tickSizeOuter=function(t){return arguments.length?(o=+t,h):o},h.tickPadding=function(t){return arguments.length?(l=+t,h):l},h.offset=function(t){return arguments.length?(u=+t,h):u},h}function T(t){return C(3,t)}function k(t){return C(4,t)}var F={value:()=>{}};function _(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new S(r)}function S(t){this._=t}function E(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function B(t,e){for(var n,r=0,a=t.length;r<a;++r)if((n=t[r]).name===e)return n.value}function N(t,e,n){for(var r=0,a=t.length;r<a;++r)if(t[r].name===e){t[r]=F,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}S.prototype=_.prototype={constructor:S,on:function(t,e){var n,r=this._,a=E(t+"",r),i=-1,o=a.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++i<o;)if(n=(t=a[i]).type)r[n]=N(r[n],t.name,e);else if(null==e)for(n in r)r[n]=N(r[n],t.name,null);return this}for(;++i<o;)if((n=(t=a[i]).type)&&(n=B(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new S(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,a=new Array(n),i=0;i<n;++i)a[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,a)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],a=0,i=r.length;a<i;++a)r[a].value.apply(e,n)}};var I="http://www.w3.org/1999/xhtml",L={svg:"http://www.w3.org/2000/svg",xhtml:I,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function V(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),L.hasOwnProperty(e)?{space:L[e],local:t}:t}function P(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===I&&e.documentElement.namespaceURI===I?e.createElement(t):e.createElementNS(n,t)}}function z(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function Y(t){var e=V(t);return(e.local?z:P)(e)}function U(){}function O(t){return null==t?U:function(){return this.querySelector(t)}}function R(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function H(){return[]}function W(t){return null==t?H:function(){return this.querySelectorAll(t)}}function q(t){return function(){return this.matches(t)}}function $(t){return function(e){return e.matches(t)}}var X=Array.prototype.find;function j(){return this.firstElementChild}var G=Array.prototype.filter;function Z(){return this.children}function Q(t){return new Array(t.length)}function J(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function K(t){return function(){return t}}function tt(t,e,n,r,a,i){for(var o,l=0,u=e.length,s=i.length;l<s;++l)(o=e[l])?(o.__data__=i[l],r[l]=o):n[l]=new J(t,i[l]);for(;l<u;++l)(o=e[l])&&(a[l]=o)}function et(t,e,n,r,a,i,o){var l,u,s,f=new Map,c=e.length,h=i.length,d=new Array(c);for(l=0;l<c;++l)(u=e[l])&&(d[l]=s=o.call(u,u.__data__,l,e)+"",f.has(s)?a[l]=u:f.set(s,u));for(l=0;l<h;++l)s=o.call(t,i[l],l,i)+"",(u=f.get(s))?(r[l]=u,u.__data__=i[l],f.delete(s)):n[l]=new J(t,i[l]);for(l=0;l<c;++l)(u=e[l])&&f.get(d[l])===u&&(a[l]=u)}function nt(t){return t.__data__}function rt(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function at(t){return function(){this.removeAttribute(t)}}function it(t){return function(){this.removeAttributeNS(t.space,t.local)}}function ot(t,e){return function(){this.setAttribute(t,e)}}function lt(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function ut(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function st(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function ft(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function ct(t){return function(){this.style.removeProperty(t)}}function ht(t,e,n){return function(){this.style.setProperty(t,e,n)}}function dt(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function gt(t,e){return t.style.getPropertyValue(e)||ft(t).getComputedStyle(t,null).getPropertyValue(e)}function pt(t){return function(){delete this[t]}}function yt(t,e){return function(){this[t]=e}}function mt(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function vt(t){return t.trim().split(/^|\s+/)}function wt(t){return t.classList||new xt(t)}function xt(t){this._node=t,this._names=vt(t.getAttribute("class")||"")}function At(t,e){for(var n=wt(t),r=-1,a=e.length;++r<a;)n.add(e[r])}function bt(t,e){for(var n=wt(t),r=-1,a=e.length;++r<a;)n.remove(e[r])}function Dt(t){return function(){At(this,t)}}function Mt(t){return function(){bt(this,t)}}function Ct(t,e){return function(){(e.apply(this,arguments)?At:bt)(this,t)}}function Tt(){this.textContent=""}function kt(t){return function(){this.textContent=t}}function Ft(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function _t(){this.innerHTML=""}function St(t){return function(){this.innerHTML=t}}function Et(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Bt(){this.nextSibling&&this.parentNode.appendChild(this)}function Nt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function It(){return null}function Lt(){var t=this.parentNode;t&&t.removeChild(this)}function Vt(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Pt(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function zt(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function Yt(t){return function(){var e=this.__on;if(e){for(var n,r=0,a=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++a]=n:this.removeEventListener(n.type,n.listener,n.options);++a?e.length=a:delete this.__on}}}function Ut(t,e,n){return function(){var r,a=this.__on,i=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(a)for(var o=0,l=a.length;o<l;++o)if((r=a[o]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=i,r.options=n),void(r.value=e);this.addEventListener(t.type,i,n),r={type:t.type,name:t.name,value:e,listener:i,options:n},a?a.push(r):this.__on=[r]}}function Ot(t,e,n){var r=ft(t),a=r.CustomEvent;"function"==typeof a?a=new a(e,n):(a=r.document.createEvent("Event"),n?(a.initEvent(e,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(e,!1,!1)),t.dispatchEvent(a)}function Rt(t,e){return function(){return Ot(this,t,e)}}function Ht(t,e){return function(){return Ot(this,t,e.apply(this,arguments))}}J.prototype={constructor:J,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}},xt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Wt=[null];function qt(t,e){this._groups=t,this._parents=e}function $t(){return new qt([[document.documentElement]],Wt)}function Xt(t){return"string"==typeof t?new qt([[document.querySelector(t)]],[document.documentElement]):new qt([[t]],Wt)}function jt(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function Gt(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Zt(){}qt.prototype=$t.prototype={constructor:qt,select:function(t){"function"!=typeof t&&(t=O(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o,l=e[a],u=l.length,s=r[a]=new Array(u),f=0;f<u;++f)(i=l[f])&&(o=t.call(i,i.__data__,f,l))&&("__data__"in i&&(o.__data__=i.__data__),s[f]=o);return new qt(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);return null==e?[]:R(e)}}(t):W(t);for(var e=this._groups,n=e.length,r=[],a=[],i=0;i<n;++i)for(var o,l=e[i],u=l.length,s=0;s<u;++s)(o=l[s])&&(r.push(t.call(o,o.__data__,s,l)),a.push(o));return new qt(r,a)},selectChild:function(t){return this.select(null==t?j:function(t){return function(){return X.call(this.children,t)}}("function"==typeof t?t:$(t)))},selectChildren:function(t){return this.selectAll(null==t?Z:function(t){return function(){return G.call(this.children,t)}}("function"==typeof t?t:$(t)))},filter:function(t){"function"!=typeof t&&(t=q(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],l=o.length,u=r[a]=[],s=0;s<l;++s)(i=o[s])&&t.call(i,i.__data__,s,o)&&u.push(i);return new qt(r,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,nt);var n=e?et:tt,r=this._parents,a=this._groups;"function"!=typeof t&&(t=K(t));for(var i=a.length,o=new Array(i),l=new Array(i),u=new Array(i),s=0;s<i;++s){var f=r[s],c=a[s],h=c.length,d=R(t.call(f,f&&f.__data__,s,r)),g=d.length,p=l[s]=new Array(g),y=o[s]=new Array(g),m=u[s]=new Array(h);n(f,c,p,y,m,d,e);for(var v,w,x=0,A=0;x<g;++x)if(v=p[x]){for(x>=A&&(A=x+1);!(w=y[A])&&++A<g;);v._next=w||null}}return(o=new qt(o,r))._enter=l,o._exit=u,o},enter:function(){return new qt(this._enter||this._groups.map(Q),this._parents)},exit:function(){return new qt(this._exit||this._groups.map(Q),this._parents)},join:function(t,e,n){var r=this.enter(),a=this,i=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(a=e(a)),null==n?i.remove():n(i),r&&a?r.merge(a).order():a},merge:function(t){if(!(t instanceof qt))throw new Error("invalid merge");for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),l=0;l<i;++l)for(var u,s=e[l],f=n[l],c=s.length,h=o[l]=new Array(c),d=0;d<c;++d)(u=s[d]||f[d])&&(h[d]=u);for(;l<r;++l)o[l]=e[l];return new qt(o,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,a=t[e],i=a.length-1,o=a[i];--i>=0;)(r=a[i])&&(o&&4^r.compareDocumentPosition(o)&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=rt);for(var n=this._groups,r=n.length,a=new Array(r),i=0;i<r;++i){for(var o,l=n[i],u=l.length,s=a[i]=new Array(u),f=0;f<u;++f)(o=l[f])&&(s[f]=o);s.sort(e)}return new qt(a,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],a=0,i=r.length;a<i;++a){var o=r[a];if(o)return o}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var a,i=e[n],o=0,l=i.length;o<l;++o)(a=i[o])&&t.call(a,a.__data__,o,i);return this},attr:function(t,e){var n=V(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?it:at:"function"==typeof e?n.local?st:ut:n.local?lt:ot)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?ct:"function"==typeof e?dt:ht)(t,e,null==n?"":n)):gt(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?pt:"function"==typeof e?mt:yt)(t,e)):this.node()[t]},classed:function(t,e){var n=vt(t+"");if(arguments.length<2){for(var r=wt(this.node()),a=-1,i=n.length;++a<i;)if(!r.contains(n[a]))return!1;return!0}return this.each(("function"==typeof e?Ct:e?Dt:Mt)(n,e))},text:function(t){return arguments.length?this.each(null==t?Tt:("function"==typeof t?Ft:kt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?_t:("function"==typeof t?Et:St)(t)):this.node().innerHTML},raise:function(){return this.each(Bt)},lower:function(){return this.each(Nt)},append:function(t){var e="function"==typeof t?t:Y(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:Y(t),r=null==e?It:"function"==typeof e?e:O(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Lt)},clone:function(t){return this.select(t?Pt:Vt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,a,i=zt(t+""),o=i.length;if(!(arguments.length<2)){for(l=e?Ut:Yt,r=0;r<o;++r)this.each(l(i[r],e,n));return this}var l=this.node().__on;if(l)for(var u,s=0,f=l.length;s<f;++s)for(r=0,u=l[s];r<o;++r)if((a=i[r]).type===u.type&&a.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?Ht:Rt)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r,a=t[e],i=0,o=a.length;i<o;++i)(r=a[i])&&(yield r)}};var Qt=1/.7,Jt="\\s*([+-]?\\d+)\\s*",Kt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",te="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",ee=/^#([0-9a-f]{3,8})$/,ne=new RegExp("^rgb\\("+[Jt,Jt,Jt]+"\\)$"),re=new RegExp("^rgb\\("+[te,te,te]+"\\)$"),ae=new RegExp("^rgba\\("+[Jt,Jt,Jt,Kt]+"\\)$"),ie=new RegExp("^rgba\\("+[te,te,te,Kt]+"\\)$"),oe=new RegExp("^hsl\\("+[Kt,te,te]+"\\)$"),le=new RegExp("^hsla\\("+[Kt,te,te,Kt]+"\\)$"),ue={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function se(){return this.rgb().formatHex()}function fe(){return this.rgb().formatRgb()}function ce(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=ee.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?he(e):3===n?new ye(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?de(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?de(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=ne.exec(t))?new ye(e[1],e[2],e[3],1):(e=re.exec(t))?new ye(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=ae.exec(t))?de(e[1],e[2],e[3],e[4]):(e=ie.exec(t))?de(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=oe.exec(t))?xe(e[1],e[2]/100,e[3]/100,1):(e=le.exec(t))?xe(e[1],e[2]/100,e[3]/100,e[4]):ue.hasOwnProperty(t)?he(ue[t]):"transparent"===t?new ye(NaN,NaN,NaN,0):null}function he(t){return new ye(t>>16&255,t>>8&255,255&t,1)}function de(t,e,n,r){return r<=0&&(t=e=n=NaN),new ye(t,e,n,r)}function ge(t){return t instanceof Zt||(t=ce(t)),t?new ye((t=t.rgb()).r,t.g,t.b,t.opacity):new ye}function pe(t,e,n,r){return 1===arguments.length?ge(t):new ye(t,e,n,null==r?1:r)}function ye(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function me(){return"#"+we(this.r)+we(this.g)+we(this.b)}function ve(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function we(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function xe(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new be(t,e,n,r)}function Ae(t){if(t instanceof be)return new be(t.h,t.s,t.l,t.opacity);if(t instanceof Zt||(t=ce(t)),!t)return new be;if(t instanceof be)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,a=Math.min(e,n,r),i=Math.max(e,n,r),o=NaN,l=i-a,u=(i+a)/2;return l?(o=e===i?(n-r)/l+6*(n<r):n===i?(r-e)/l+2:(e-n)/l+4,l/=u<.5?i+a:2-i-a,o*=60):l=u>0&&u<1?0:o,new be(o,l,u,t.opacity)}function be(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function De(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}jt(Zt,ce,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:se,formatHex:se,formatHsl:function(){return Ae(this).formatHsl()},formatRgb:fe,toString:fe}),jt(ye,pe,Gt(Zt,{brighter:function(t){return t=null==t?Qt:Math.pow(Qt,t),new ye(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ye(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:me,formatHex:me,formatRgb:ve,toString:ve})),jt(be,(function(t,e,n,r){return 1===arguments.length?Ae(t):new be(t,e,n,null==r?1:r)}),Gt(Zt,{brighter:function(t){return t=null==t?Qt:Math.pow(Qt,t),new be(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new be(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,a=2*n-r;return new ye(De(t>=240?t-240:t+120,a,r),De(t,a,r),De(t<120?t+240:t-120,a,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));const Me=Math.PI/180,Ce=180/Math.PI,Te=4/29,ke=6/29,Fe=3*ke*ke;function _e(t){if(t instanceof Ee)return new Ee(t.l,t.a,t.b,t.opacity);if(t instanceof Pe)return ze(t);t instanceof ye||(t=ge(t));var e,n,r=Le(t.r),a=Le(t.g),i=Le(t.b),o=Be((.2225045*r+.7168786*a+.0606169*i)/1);return r===a&&a===i?e=n=o:(e=Be((.4360747*r+.3850649*a+.1430804*i)/.96422),n=Be((.0139322*r+.0971045*a+.7141733*i)/.82521)),new Ee(116*o-16,500*(e-o),200*(o-n),t.opacity)}function Se(t,e,n,r){return 1===arguments.length?_e(t):new Ee(t,e,n,null==r?1:r)}function Ee(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function Be(t){return t>.008856451679035631?Math.pow(t,1/3):t/Fe+Te}function Ne(t){return t>ke?t*t*t:Fe*(t-Te)}function Ie(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Le(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Ve(t){if(t instanceof Pe)return new Pe(t.h,t.c,t.l,t.opacity);if(t instanceof Ee||(t=_e(t)),0===t.a&&0===t.b)return new Pe(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*Ce;return new Pe(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Pe(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function ze(t){if(isNaN(t.h))return new Ee(t.l,0,0,t.opacity);var e=t.h*Me;return new Ee(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}jt(Ee,Se,Gt(Zt,{brighter:function(t){return new Ee(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Ee(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new ye(Ie(3.1338561*(e=.96422*Ne(e))-1.6168667*(t=1*Ne(t))-.4906146*(n=.82521*Ne(n))),Ie(-.9787684*e+1.9161415*t+.033454*n),Ie(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),jt(Pe,(function(t,e,n,r){return 1===arguments.length?Ve(t):new Pe(t,e,n,null==r?1:r)}),Gt(Zt,{brighter:function(t){return new Pe(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Pe(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return ze(this).rgb()}}));var Ye,Ue,Oe=0,Re=0,He=0,We=0,qe=0,$e=0,Xe="object"==typeof performance&&performance.now?performance:Date,je="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Ge(){return qe||(je(Ze),qe=Xe.now()+$e)}function Ze(){qe=0}function Qe(){this._call=this._time=this._next=null}function Je(t,e,n){var r=new Qe;return r.restart(t,e,n),r}function Ke(){qe=(We=Xe.now())+$e,Oe=Re=0;try{!function(){Ge(),++Oe;for(var t,e=Ye;e;)(t=qe-e._time)>=0&&e._call.call(null,t),e=e._next;--Oe}()}finally{Oe=0,function(){var t,e,n=Ye,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Ye=e);Ue=t,en(r)}(),qe=0}}function tn(){var t=Xe.now(),e=t-We;e>1e3&&($e-=e,We=t)}function en(t){Oe||(Re&&(Re=clearTimeout(Re)),t-qe>24?(t<1/0&&(Re=setTimeout(Ke,t-Xe.now()-$e)),He&&(He=clearInterval(He))):(He||(We=Xe.now(),He=setInterval(tn,1e3)),Oe=1,je(Ke)))}function nn(t,e,n){var r=new Qe;return e=null==e?0:+e,r.restart((n=>{r.stop(),t(n+e)}),e,n),r}Qe.prototype=Je.prototype={constructor:Qe,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Ge():+n)+(null==e?0:+e),this._next||Ue===this||(Ue?Ue._next=this:Ye=this,Ue=this),this._call=t,this._time=n,en()},stop:function(){this._call&&(this._call=null,this._time=1/0,en())}};var rn=_("start","end","cancel","interrupt"),an=[];function on(t,e,n,r,a,i){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var r,a=t.__transition;function i(t){n.state=1,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}function o(i){var s,f,c,h;if(1!==n.state)return u();for(s in a)if((h=a[s]).name===n.name){if(3===h.state)return nn(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete a[s]):+s<e&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete a[s])}if(nn((function(){3===n.state&&(n.state=4,n.timer.restart(l,n.delay,n.time),l(i))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(c=n.tween.length),s=0,f=-1;s<c;++s)(h=n.tween[s].value.call(t,t.__data__,n.index,n.group))&&(r[++f]=h);r.length=f+1}}function l(e){for(var a=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(u),n.state=5,1),i=-1,o=r.length;++i<o;)r[i].call(t,a);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),u())}function u(){for(var r in n.state=6,n.timer.stop(),delete a[e],a)return;delete t.__transition}a[e]=n,n.timer=Je(i,0,n.time)}(t,n,{name:e,index:r,group:a,on:rn,tween:an,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:0})}function ln(t,e){var n=sn(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function un(t,e){var n=sn(t,e);if(n.state>3)throw new Error("too late; already running");return n}function sn(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var fn=t=>()=>t;function cn(t){return 1==(t=+t)?hn:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):fn(isNaN(e)?n:e)}}function hn(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):fn(isNaN(t)?e:t)}var dn=function t(e){var n=cn(e);function r(t,e){var r=n((t=pe(t)).r,(e=pe(e)).r),a=n(t.g,e.g),i=n(t.b,e.b),o=hn(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=a(e),t.b=i(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);function gn(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}var pn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,yn=new RegExp(pn.source,"g");function mn(t,e){var n,r,a,i=pn.lastIndex=yn.lastIndex=0,o=-1,l=[],u=[];for(t+="",e+="";(n=pn.exec(t))&&(r=yn.exec(e));)(a=r.index)>i&&(a=e.slice(i,a),l[o]?l[o]+=a:l[++o]=a),(n=n[0])===(r=r[0])?l[o]?l[o]+=r:l[++o]=r:(l[++o]=null,u.push({i:o,x:gn(n,r)})),i=yn.lastIndex;return i<e.length&&(a=e.slice(i),l[o]?l[o]+=a:l[++o]=a),l.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)l[(n=u[r]).i]=n.x(t);return l.join("")})}var vn,wn=180/Math.PI,xn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function An(t,e,n,r,a,i){var o,l,u;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(u=t*n+e*r)&&(n-=t*u,r-=e*u),(l=Math.sqrt(n*n+r*r))&&(n/=l,r/=l,u/=l),t*r<e*n&&(t=-t,e=-e,u=-u,o=-o),{translateX:a,translateY:i,rotate:Math.atan2(e,t)*wn,skewX:Math.atan(u)*wn,scaleX:o,scaleY:l}}function bn(t,e,n,r){function a(t){return t.length?t.pop()+" ":""}return function(i,o){var l=[],u=[];return i=t(i),o=t(o),function(t,r,a,i,o,l){if(t!==a||r!==i){var u=o.push("translate(",null,e,null,n);l.push({i:u-4,x:gn(t,a)},{i:u-2,x:gn(r,i)})}else(a||i)&&o.push("translate("+a+e+i+n)}(i.translateX,i.translateY,o.translateX,o.translateY,l,u),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(a(n)+"rotate(",null,r)-2,x:gn(t,e)})):e&&n.push(a(n)+"rotate("+e+r)}(i.rotate,o.rotate,l,u),function(t,e,n,i){t!==e?i.push({i:n.push(a(n)+"skewX(",null,r)-2,x:gn(t,e)}):e&&n.push(a(n)+"skewX("+e+r)}(i.skewX,o.skewX,l,u),function(t,e,n,r,i,o){if(t!==n||e!==r){var l=i.push(a(i)+"scale(",null,",",null,")");o.push({i:l-4,x:gn(t,n)},{i:l-2,x:gn(e,r)})}else 1===n&&1===r||i.push(a(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,o.scaleX,o.scaleY,l,u),i=o=null,function(t){for(var e,n=-1,r=u.length;++n<r;)l[(e=u[n]).i]=e.x(t);return l.join("")}}}var Dn=bn((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?xn:An(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),Mn=bn((function(t){return null==t?xn:(vn||(vn=document.createElementNS("http://www.w3.org/2000/svg","g")),vn.setAttribute("transform",t),(t=vn.transform.baseVal.consolidate())?An((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):xn)}),", ",")",")");function Cn(t,e){var n,r;return function(){var a=un(this,t),i=a.tween;if(i!==n)for(var o=0,l=(r=n=i).length;o<l;++o)if(r[o].name===e){(r=r.slice()).splice(o,1);break}a.tween=r}}function Tn(t,e,n){var r,a;if("function"!=typeof n)throw new Error;return function(){var i=un(this,t),o=i.tween;if(o!==r){a=(r=o).slice();for(var l={name:e,value:n},u=0,s=a.length;u<s;++u)if(a[u].name===e){a[u]=l;break}u===s&&a.push(l)}i.tween=a}}function kn(t,e,n){var r=t._id;return t.each((function(){var t=un(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return sn(t,r).value[e]}}function Fn(t,e){var n;return("number"==typeof e?gn:e instanceof ce?dn:(n=ce(e))?(e=n,dn):mn)(t,e)}function _n(t){return function(){this.removeAttribute(t)}}function Sn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function En(t,e,n){var r,a,i=n+"";return function(){var o=this.getAttribute(t);return o===i?null:o===r?a:a=e(r=o,n)}}function Bn(t,e,n){var r,a,i=n+"";return function(){var o=this.getAttributeNS(t.space,t.local);return o===i?null:o===r?a:a=e(r=o,n)}}function Nn(t,e,n){var r,a,i;return function(){var o,l,u=n(this);if(null!=u)return(o=this.getAttribute(t))===(l=u+"")?null:o===r&&l===a?i:(a=l,i=e(r=o,u));this.removeAttribute(t)}}function In(t,e,n){var r,a,i;return function(){var o,l,u=n(this);if(null!=u)return(o=this.getAttributeNS(t.space,t.local))===(l=u+"")?null:o===r&&l===a?i:(a=l,i=e(r=o,u));this.removeAttributeNS(t.space,t.local)}}function Ln(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}function Vn(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}function Pn(t,e){var n,r;function a(){var a=e.apply(this,arguments);return a!==r&&(n=(r=a)&&Vn(t,a)),n}return a._value=e,a}function zn(t,e){var n,r;function a(){var a=e.apply(this,arguments);return a!==r&&(n=(r=a)&&Ln(t,a)),n}return a._value=e,a}function Yn(t,e){return function(){ln(this,t).delay=+e.apply(this,arguments)}}function Un(t,e){return e=+e,function(){ln(this,t).delay=e}}function On(t,e){return function(){un(this,t).duration=+e.apply(this,arguments)}}function Rn(t,e){return e=+e,function(){un(this,t).duration=e}}function Hn(t,e){if("function"!=typeof e)throw new Error;return function(){un(this,t).ease=e}}function Wn(t,e,n){var r,a,i=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?ln:un;return function(){var o=i(this,t),l=o.on;l!==r&&(a=(r=l).copy()).on(e,n),o.on=a}}var qn=$t.prototype.constructor;function $n(t){return function(){this.style.removeProperty(t)}}function Xn(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}function jn(t,e,n){var r,a;function i(){var i=e.apply(this,arguments);return i!==a&&(r=(a=i)&&Xn(t,i,n)),r}return i._value=e,i}function Gn(t){return function(e){this.textContent=t.call(this,e)}}function Zn(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&Gn(r)),e}return r._value=t,r}var Qn=0;function Jn(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Kn(){return++Qn}var tr=$t.prototype;Jn.prototype={constructor:Jn,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=O(t));for(var r=this._groups,a=r.length,i=new Array(a),o=0;o<a;++o)for(var l,u,s=r[o],f=s.length,c=i[o]=new Array(f),h=0;h<f;++h)(l=s[h])&&(u=t.call(l,l.__data__,h,s))&&("__data__"in l&&(u.__data__=l.__data__),c[h]=u,on(c[h],e,n,h,c,sn(l,n)));return new Jn(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=W(t));for(var r=this._groups,a=r.length,i=[],o=[],l=0;l<a;++l)for(var u,s=r[l],f=s.length,c=0;c<f;++c)if(u=s[c]){for(var h,d=t.call(u,u.__data__,c,s),g=sn(u,n),p=0,y=d.length;p<y;++p)(h=d[p])&&on(h,e,n,p,d,g);i.push(d),o.push(u)}return new Jn(i,o,e,n)},filter:function(t){"function"!=typeof t&&(t=q(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],l=o.length,u=r[a]=[],s=0;s<l;++s)(i=o[s])&&t.call(i,i.__data__,s,o)&&u.push(i);return new Jn(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),l=0;l<i;++l)for(var u,s=e[l],f=n[l],c=s.length,h=o[l]=new Array(c),d=0;d<c;++d)(u=s[d]||f[d])&&(h[d]=u);for(;l<r;++l)o[l]=e[l];return new Jn(o,this._parents,this._name,this._id)},selection:function(){return new qn(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Kn(),r=this._groups,a=r.length,i=0;i<a;++i)for(var o,l=r[i],u=l.length,s=0;s<u;++s)if(o=l[s]){var f=sn(o,e);on(o,t,n,s,l,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new Jn(r,this._parents,t,n)},call:tr.call,nodes:tr.nodes,node:tr.node,size:tr.size,empty:tr.empty,each:tr.each,on:function(t,e){var n=this._id;return arguments.length<2?sn(this.node(),n).on.on(t):this.each(Wn(n,t,e))},attr:function(t,e){var n=V(t),r="transform"===n?Mn:Fn;return this.attrTween(t,"function"==typeof e?(n.local?In:Nn)(n,r,kn(this,"attr."+t,e)):null==e?(n.local?Sn:_n)(n):(n.local?Bn:En)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=V(t);return this.tween(n,(r.local?Pn:zn)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Dn:Fn;return null==e?this.styleTween(t,function(t,e){var n,r,a;return function(){var i=gt(this,t),o=(this.style.removeProperty(t),gt(this,t));return i===o?null:i===n&&o===r?a:a=e(n=i,r=o)}}(t,r)).on("end.style."+t,$n(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,a,i;return function(){var o=gt(this,t),l=n(this),u=l+"";return null==l&&(this.style.removeProperty(t),u=l=gt(this,t)),o===u?null:o===r&&u===a?i:(a=u,i=e(r=o,l))}}(t,r,kn(this,"style."+t,e))).each(function(t,e){var n,r,a,i,o="style."+e,l="end."+o;return function(){var u=un(this,t),s=u.on,f=null==u.value[o]?i||(i=$n(e)):void 0;s===n&&a===f||(r=(n=s).copy()).on(l,a=f),u.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,a,i=n+"";return function(){var o=gt(this,t);return o===i?null:o===r?a:a=e(r=o,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,jn(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(kn(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,Zn(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,a=sn(this.node(),n).tween,i=0,o=a.length;i<o;++i)if((r=a[i]).name===t)return r.value;return null}return this.each((null==e?Cn:Tn)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Yn:Un)(e,t)):sn(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?On:Rn)(e,t)):sn(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(Hn(e,t)):sn(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;un(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,r=n._id,a=n.size();return new Promise((function(i,o){var l={value:o},u={value:function(){0==--a&&i()}};n.each((function(){var n=un(this,r),a=n.on;a!==t&&((e=(t=a).copy())._.cancel.push(l),e._.interrupt.push(l),e._.end.push(u)),n.on=e})),0===a&&i()}))},[Symbol.iterator]:tr[Symbol.iterator]};var er={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function nr(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}$t.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,r,a,i=t.__transition,o=!0;if(i){for(a in e=null==e?null:e+"",i)(n=i[a]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete i[a]):o=!1;o&&delete t.__transition}}(this,t)}))},$t.prototype.transition=function(t){var e,n;t instanceof Jn?(e=t._id,t=t._name):(e=Kn(),(n=er).time=Ge(),t=null==t?null:t+"");for(var r=this._groups,a=r.length,i=0;i<a;++i)for(var o,l=r[i],u=l.length,s=0;s<u;++s)(o=l[s])&&on(o,t,e,s,l,n||nr(o,e));return new Jn(r,this._parents,t,e)};const rr=Math.PI,ar=2*rr,ir=ar-1e-6;function or(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function lr(){return new or}function ur(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function sr(t){return(t=ur(Math.abs(t)))?t[1]:NaN}or.prototype=lr.prototype={constructor:or,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,a,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+a)+","+(this._y1=+i)},arcTo:function(t,e,n,r,a){t=+t,e=+e,n=+n,r=+r,a=+a;var i=this._x1,o=this._y1,l=n-t,u=r-e,s=i-t,f=o-e,c=s*s+f*f;if(a<0)throw new Error("negative radius: "+a);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(c>1e-6)if(Math.abs(f*l-u*s)>1e-6&&a){var h=n-i,d=r-o,g=l*l+u*u,p=h*h+d*d,y=Math.sqrt(g),m=Math.sqrt(c),v=a*Math.tan((rr-Math.acos((g+c-p)/(2*y*m)))/2),w=v/m,x=v/y;Math.abs(w-1)>1e-6&&(this._+="L"+(t+w*s)+","+(e+w*f)),this._+="A"+a+","+a+",0,0,"+ +(f*h>s*d)+","+(this._x1=t+x*l)+","+(this._y1=e+x*u)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,a,i){t=+t,e=+e,i=!!i;var o=(n=+n)*Math.cos(r),l=n*Math.sin(r),u=t+o,s=e+l,f=1^i,c=i?r-a:a-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+u+","+s:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-s)>1e-6)&&(this._+="L"+u+","+s),n&&(c<0&&(c=c%ar+ar),c>ir?this._+="A"+n+","+n+",0,1,"+f+","+(t-o)+","+(e-l)+"A"+n+","+n+",0,1,"+f+","+(this._x1=u)+","+(this._y1=s):c>1e-6&&(this._+="A"+n+","+n+",0,"+ +(c>=rr)+","+f+","+(this._x1=t+n*Math.cos(a))+","+(this._y1=e+n*Math.sin(a))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var fr,cr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function hr(t){if(!(e=cr.exec(t)))throw new Error("invalid format: "+t);var e;return new dr({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function dr(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function gr(t,e){var n=ur(t,e);if(!n)return t+"";var r=n[0],a=n[1];return a<0?"0."+new Array(-a).join("0")+r:r.length>a+1?r.slice(0,a+1)+"."+r.slice(a+1):r+new Array(a-r.length+2).join("0")}hr.prototype=dr.prototype,dr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var pr={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>gr(100*t,e),r:gr,s:function(t,e){var n=ur(t,e);if(!n)return t+"";var r=n[0],a=n[1],i=a-(fr=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,o=r.length;return i===o?r:i>o?r+new Array(i-o+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+ur(t,Math.max(0,e+i-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function yr(t){return t}var mr,vr,wr,xr=Array.prototype.map,Ar=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function br(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?yr:(e=xr.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var a=t.length,i=[],o=0,l=e[0],u=0;a>0&&l>0&&(u+l+1>r&&(l=Math.max(1,r-u)),i.push(t.substring(a-=l,a+l)),!((u+=l+1)>r));)l=e[o=(o+1)%e.length];return i.reverse().join(n)}),a=void 0===t.currency?"":t.currency[0]+"",i=void 0===t.currency?"":t.currency[1]+"",o=void 0===t.decimal?".":t.decimal+"",l=void 0===t.numerals?yr:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(xr.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",s=void 0===t.minus?"−":t.minus+"",f=void 0===t.nan?"NaN":t.nan+"";function c(t){var e=(t=hr(t)).fill,n=t.align,c=t.sign,h=t.symbol,d=t.zero,g=t.width,p=t.comma,y=t.precision,m=t.trim,v=t.type;"n"===v?(p=!0,v="g"):pr[v]||(void 0===y&&(y=12),m=!0,v="g"),(d||"0"===e&&"="===n)&&(d=!0,e="0",n="=");var w="$"===h?a:"#"===h&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",x="$"===h?i:/[%p]/.test(v)?u:"",A=pr[v],b=/[defgprs%]/.test(v);function D(t){var a,i,u,h=w,D=x;if("c"===v)D=A(t)+D,t="";else{var M=(t=+t)<0||1/t<0;if(t=isNaN(t)?f:A(Math.abs(t),y),m&&(t=function(t){t:for(var e,n=t.length,r=1,a=-1;r<n;++r)switch(t[r]){case".":a=e=r;break;case"0":0===a&&(a=r),e=r;break;default:if(!+t[r])break t;a>0&&(a=0)}return a>0?t.slice(0,a)+t.slice(e+1):t}(t)),M&&0==+t&&"+"!==c&&(M=!1),h=(M?"("===c?c:s:"-"===c||"("===c?"":c)+h,D=("s"===v?Ar[8+fr/3]:"")+D+(M&&"("===c?")":""),b)for(a=-1,i=t.length;++a<i;)if(48>(u=t.charCodeAt(a))||u>57){D=(46===u?o+t.slice(a+1):t.slice(a))+D,t=t.slice(0,a);break}}p&&!d&&(t=r(t,1/0));var C=h.length+t.length+D.length,T=C<g?new Array(g-C+1).join(e):"";switch(p&&d&&(t=r(T+t,T.length?g-D.length:1/0),T=""),n){case"<":t=h+t+D+T;break;case"=":t=h+T+t+D;break;case"^":t=T.slice(0,C=T.length>>1)+h+t+D+T.slice(C);break;default:t=T+h+t+D}return l(t)}return y=void 0===y?6:/[gprs]/.test(v)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),D.toString=function(){return t+""},D}return{format:c,formatPrefix:function(t,e){var n=c(((t=hr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(sr(e)/3))),a=Math.pow(10,-r),i=Ar[8+r/3];return function(t){return n(a*t)+i}}}}mr=br({thousands:",",grouping:[3],currency:["$",""]}),vr=mr.format,wr=mr.formatPrefix;function Dr(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):(t=>()=>t)(isNaN(t)?e:t)}function Mr(t,e){var n=Dr((t=Se(t)).l,(e=Se(e)).l),r=Dr(t.a,e.a),a=Dr(t.b,e.b),i=Dr(t.opacity,e.opacity);return function(e){return t.l=n(e),t.a=r(e),t.b=a(e),t.opacity=i(e),t+""}}function Cr(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}const Tr=Symbol("implicit");function kr(){var t=new Map,e=[],n=[],r=Tr;function a(a){var i=a+"",o=t.get(i);if(!o){if(r!==Tr)return r;t.set(i,o=e.push(a))}return n[(o-1)%n.length]}return a.domain=function(n){if(!arguments.length)return e.slice();e=[],t=new Map;for(const r of n){const n=r+"";t.has(n)||t.set(n,e.push(r))}return a},a.range=function(t){return arguments.length?(n=Array.from(t),a):n.slice()},a.unknown=function(t){return arguments.length?(r=t,a):r},a.copy=function(){return kr(e,n).unknown(r)},Cr.apply(a,arguments),a}var Fr=t=>()=>t;function _r(t){return 1==(t=+t)?Sr:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Fr(isNaN(e)?n:e)}}function Sr(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):Fr(isNaN(t)?e:t)}var Er=function t(e){var n=_r(e);function r(t,e){var r=n((t=pe(t)).r,(e=pe(e)).r),a=n(t.g,e.g),i=n(t.b,e.b),o=Sr(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=a(e),t.b=i(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);function Br(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,a=e.slice();return function(i){for(n=0;n<r;++n)a[n]=t[n]*(1-i)+e[n]*i;return a}}function Nr(t,e){var n,r=e?e.length:0,a=t?Math.min(r,t.length):0,i=new Array(a),o=new Array(r);for(n=0;n<a;++n)i[n]=Ur(t[n],e[n]);for(;n<r;++n)o[n]=e[n];return function(t){for(n=0;n<a;++n)o[n]=i[n](t);return o}}function Ir(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}}function Lr(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function Vr(t,e){var n,r={},a={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Ur(t[n],e[n]):a[n]=e[n];return function(t){for(n in r)a[n]=r[n](t);return a}}var Pr=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,zr=new RegExp(Pr.source,"g");function Yr(t,e){var n,r,a,i=Pr.lastIndex=zr.lastIndex=0,o=-1,l=[],u=[];for(t+="",e+="";(n=Pr.exec(t))&&(r=zr.exec(e));)(a=r.index)>i&&(a=e.slice(i,a),l[o]?l[o]+=a:l[++o]=a),(n=n[0])===(r=r[0])?l[o]?l[o]+=r:l[++o]=r:(l[++o]=null,u.push({i:o,x:Lr(n,r)})),i=zr.lastIndex;return i<e.length&&(a=e.slice(i),l[o]?l[o]+=a:l[++o]=a),l.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)l[(n=u[r]).i]=n.x(t);return l.join("")})}function Ur(t,e){var n,r=typeof e;return null==e||"boolean"===r?Fr(e):("number"===r?Lr:"string"===r?(n=ce(e))?(e=n,Er):Yr:e instanceof ce?Er:e instanceof Date?Ir:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}(e)?Br:Array.isArray(e)?Nr:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Vr:Lr)(t,e)}function Or(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}function Rr(t){return+t}var Hr=[0,1];function Wr(t){return t}function qr(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:function(t){return function(){return t}}(isNaN(e)?NaN:.5)}function $r(t,e,n){var r=t[0],a=t[1],i=e[0],o=e[1];return a<r?(r=qr(a,r),i=n(o,i)):(r=qr(r,a),i=n(i,o)),function(t){return i(r(t))}}function Xr(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),l=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++l<r;)i[l]=qr(t[l],t[l+1]),o[l]=n(e[l],e[l+1]);return function(e){var n=a(t,e,1,r)-1;return o[n](i[n](e))}}function jr(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Gr(){var t,e,n,r,a,i,o=Hr,l=Hr,u=Ur,s=Wr;function f(){var t,e,n,u=Math.min(o.length,l.length);return s!==Wr&&(t=o[0],e=o[u-1],t>e&&(n=t,t=e,e=n),s=function(n){return Math.max(t,Math.min(e,n))}),r=u>2?Xr:$r,a=i=null,c}function c(e){return null==e||isNaN(e=+e)?n:(a||(a=r(o.map(t),l,u)))(t(s(e)))}return c.invert=function(n){return s(e((i||(i=r(l,o.map(t),Lr)))(n)))},c.domain=function(t){return arguments.length?(o=Array.from(t,Rr),f()):o.slice()},c.range=function(t){return arguments.length?(l=Array.from(t),f()):l.slice()},c.rangeRound=function(t){return l=Array.from(t),u=Or,f()},c.clamp=function(t){return arguments.length?(s=!!t||Wr,f()):s!==Wr},c.interpolate=function(t){return arguments.length?(u=t,f()):u},c.unknown=function(t){return arguments.length?(n=t,c):n},function(n,r){return t=n,e=r,f()}}function Zr(){return Gr()(Wr,Wr)}function Qr(t,e,n,r){var a,i=f(t,e,n);switch((r=hr(null==r?",f":r)).type){case"s":var o=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(a=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(sr(e)/3)))-sr(Math.abs(t)))}(i,o))||(r.precision=a),wr(r,o);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(a=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,sr(e)-sr(t))+1}(i,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=a-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(a=function(t){return Math.max(0,-sr(Math.abs(t)))}(i))||(r.precision=a-2*("%"===r.type))}return vr(r)}function Jr(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var r,a,i,o,l=-1;if(n=+n,(t=+t)==(e=+e)&&n>0)return[t];if((r=e<t)&&(a=t,t=e,e=a),0===(o=s(t,e,n))||!isFinite(o))return[];if(o>0){let n=Math.round(t/o),r=Math.round(e/o);for(n*o<t&&++n,r*o>e&&--r,i=new Array(a=r-n+1);++l<a;)i[l]=(n+l)*o}else{o=-o;let n=Math.round(t*o),r=Math.round(e*o);for(n/o<t&&++n,r/o>e&&--r,i=new Array(a=r-n+1);++l<a;)i[l]=(n+l)/o}return r&&i.reverse(),i}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return Qr(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,a,i=e(),o=0,l=i.length-1,u=i[o],f=i[l],c=10;for(f<u&&(a=u,u=f,f=a,a=o,o=l,l=a);c-- >0;){if((a=s(u,f,n))===r)return i[o]=u,i[l]=f,e(i);if(a>0)u=Math.floor(u/a)*a,f=Math.ceil(f/a)*a;else{if(!(a<0))break;u=Math.ceil(u*a)/a,f=Math.floor(f*a)/a}r=a}return t},t}function Kr(){var t=Zr();return t.copy=function(){return jr(t,Kr())},Cr.apply(t,arguments),Jr(t)}var ta=new Date,ea=new Date;function na(t,e,n,r){function a(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return a.floor=function(e){return t(e=new Date(+e)),e},a.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},a.round=function(t){var e=a(t),n=a.ceil(t);return t-e<n-t?e:n},a.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},a.range=function(n,r,i){var o,l=[];if(n=a.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return l;do{l.push(o=new Date(+n)),e(n,i),t(n)}while(o<n&&n<r);return l},a.filter=function(n){return na((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(a.count=function(e,r){return ta.setTime(+e),ea.setTime(+r),t(ta),t(ea),Math.floor(n(ta,ea))},a.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?a.filter(r?function(e){return r(e)%t==0}:function(e){return a.count(0,e)%t==0}):a:null}),a}var ra=na((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t}));ra.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?na((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):ra:null};var aa=na((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()})),ia=na((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getMinutes()})),oa=na((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()})),la=na((t=>t.setHours(0,0,0,0)),((t,e)=>t.setDate(t.getDate()+e)),((t,e)=>(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/864e5),(t=>t.getDate()-1));function ua(t){return na((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var sa=ua(0),fa=ua(1);ua(2),ua(3);var ca=ua(4);ua(5),ua(6);var ha=na((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),da=na((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));da.every=function(t){return isFinite(t=Math.floor(t))&&t>0?na((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null},na((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getUTCMinutes()})),na((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}));var ga=na((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}));function pa(t){return na((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/6048e5}))}var ya=pa(0),ma=pa(1);pa(2),pa(3);var va=pa(4);pa(5),pa(6),na((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()}));var wa=na((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));wa.every=function(t){return isFinite(t=Math.floor(t))&&t>0?na((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};const[xa,Aa]=function(t,e,n,a,i,o){const l=[[aa,1,1e3],[aa,5,5e3],[aa,15,15e3],[aa,30,3e4],[o,1,6e4],[o,5,3e5],[o,15,9e5],[o,30,18e5],[i,1,36e5],[i,3,108e5],[i,6,216e5],[i,12,432e5],[a,1,864e5],[a,2,1728e5],[n,1,6048e5],[e,1,2592e6],[e,3,7776e6],[t,1,31536e6]];function u(e,n,a){const i=Math.abs(n-e)/a,o=r((([,,t])=>t)).right(l,i);if(o===l.length)return t.every(f(e/31536e6,n/31536e6,a));if(0===o)return ra.every(Math.max(f(e,n,a),1));const[u,s]=l[i/l[o-1][2]<l[o][2]/i?o-1:o];return u.every(s)}return[function(t,e,n){const r=e<t;r&&([t,e]=[e,t]);const a=n&&"function"==typeof n.range?n:u(t,e,n),i=a?a.range(t,+e+1):[];return r?i.reverse():i},u]}(da,ha,sa,la,oa,ia);function ba(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Da(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Ma(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var Ca,Ta,ka={"-":"",_:" ",0:"0"},Fa=/^\s*\d+/,_a=/^%/,Sa=/[\\^$*+?|[\]().{}]/g;function Ea(t,e,n){var r=t<0?"-":"",a=(r?-t:t)+"",i=a.length;return r+(i<n?new Array(n-i+1).join(e)+a:a)}function Ba(t){return t.replace(Sa,"\\$&")}function Na(t){return new RegExp("^(?:"+t.map(Ba).join("|")+")","i")}function Ia(t){return new Map(t.map(((t,e)=>[t.toLowerCase(),e])))}function La(t,e,n){var r=Fa.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Va(t,e,n){var r=Fa.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function Pa(t,e,n){var r=Fa.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function za(t,e,n){var r=Fa.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function Ya(t,e,n){var r=Fa.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function Ua(t,e,n){var r=Fa.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function Oa(t,e,n){var r=Fa.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function Ra(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Ha(t,e,n){var r=Fa.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function Wa(t,e,n){var r=Fa.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function qa(t,e,n){var r=Fa.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function $a(t,e,n){var r=Fa.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function Xa(t,e,n){var r=Fa.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function ja(t,e,n){var r=Fa.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function Ga(t,e,n){var r=Fa.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Za(t,e,n){var r=Fa.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function Qa(t,e,n){var r=Fa.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Ja(t,e,n){var r=_a.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Ka(t,e,n){var r=Fa.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function ti(t,e,n){var r=Fa.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function ei(t,e){return Ea(t.getDate(),e,2)}function ni(t,e){return Ea(t.getHours(),e,2)}function ri(t,e){return Ea(t.getHours()%12||12,e,2)}function ai(t,e){return Ea(1+la.count(da(t),t),e,3)}function ii(t,e){return Ea(t.getMilliseconds(),e,3)}function oi(t,e){return ii(t,e)+"000"}function li(t,e){return Ea(t.getMonth()+1,e,2)}function ui(t,e){return Ea(t.getMinutes(),e,2)}function si(t,e){return Ea(t.getSeconds(),e,2)}function fi(t){var e=t.getDay();return 0===e?7:e}function ci(t,e){return Ea(sa.count(da(t)-1,t),e,2)}function hi(t){var e=t.getDay();return e>=4||0===e?ca(t):ca.ceil(t)}function di(t,e){return t=hi(t),Ea(ca.count(da(t),t)+(4===da(t).getDay()),e,2)}function gi(t){return t.getDay()}function pi(t,e){return Ea(fa.count(da(t)-1,t),e,2)}function yi(t,e){return Ea(t.getFullYear()%100,e,2)}function mi(t,e){return Ea((t=hi(t)).getFullYear()%100,e,2)}function vi(t,e){return Ea(t.getFullYear()%1e4,e,4)}function wi(t,e){var n=t.getDay();return Ea((t=n>=4||0===n?ca(t):ca.ceil(t)).getFullYear()%1e4,e,4)}function xi(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Ea(e/60|0,"0",2)+Ea(e%60,"0",2)}function Ai(t,e){return Ea(t.getUTCDate(),e,2)}function bi(t,e){return Ea(t.getUTCHours(),e,2)}function Di(t,e){return Ea(t.getUTCHours()%12||12,e,2)}function Mi(t,e){return Ea(1+ga.count(wa(t),t),e,3)}function Ci(t,e){return Ea(t.getUTCMilliseconds(),e,3)}function Ti(t,e){return Ci(t,e)+"000"}function ki(t,e){return Ea(t.getUTCMonth()+1,e,2)}function Fi(t,e){return Ea(t.getUTCMinutes(),e,2)}function _i(t,e){return Ea(t.getUTCSeconds(),e,2)}function Si(t){var e=t.getUTCDay();return 0===e?7:e}function Ei(t,e){return Ea(ya.count(wa(t)-1,t),e,2)}function Bi(t){var e=t.getUTCDay();return e>=4||0===e?va(t):va.ceil(t)}function Ni(t,e){return t=Bi(t),Ea(va.count(wa(t),t)+(4===wa(t).getUTCDay()),e,2)}function Ii(t){return t.getUTCDay()}function Li(t,e){return Ea(ma.count(wa(t)-1,t),e,2)}function Vi(t,e){return Ea(t.getUTCFullYear()%100,e,2)}function Pi(t,e){return Ea((t=Bi(t)).getUTCFullYear()%100,e,2)}function zi(t,e){return Ea(t.getUTCFullYear()%1e4,e,4)}function Yi(t,e){var n=t.getUTCDay();return Ea((t=n>=4||0===n?va(t):va.ceil(t)).getUTCFullYear()%1e4,e,4)}function Ui(){return"+0000"}function Oi(){return"%"}function Ri(t){return+t}function Hi(t){return Math.floor(+t/1e3)}function Wi(t){return new Date(t)}function qi(t){return t instanceof Date?+t:+new Date(+t)}function $i(t,e,n,r,a,i,o,l,u,s){var f=Zr(),c=f.invert,h=f.domain,d=s(".%L"),g=s(":%S"),p=s("%I:%M"),y=s("%I %p"),m=s("%a %d"),v=s("%b %d"),w=s("%B"),x=s("%Y");function A(t){return(u(t)<t?d:l(t)<t?g:o(t)<t?p:i(t)<t?y:r(t)<t?a(t)<t?m:v:n(t)<t?w:x)(t)}return f.invert=function(t){return new Date(c(t))},f.domain=function(t){return arguments.length?h(Array.from(t,qi)):h().map(Wi)},f.ticks=function(e){var n=h();return t(n[0],n[n.length-1],null==e?10:e)},f.tickFormat=function(t,e){return null==e?A:s(e)},f.nice=function(t){var n=h();return t&&"function"==typeof t.range||(t=e(n[0],n[n.length-1],null==t?10:t)),t?h(function(t,e){var n,r=0,a=(t=t.slice()).length-1,i=t[r],o=t[a];return o<i&&(n=r,r=a,a=n,n=i,i=o,o=n),t[r]=e.floor(i),t[a]=e.ceil(o),t}(n,t)):f},f.copy=function(){return jr(f,$i(t,e,n,r,a,i,o,l,u,s))},f}function Xi(t){return function(){return t}}!function(t){Ca=function(t){var e=t.dateTime,n=t.date,r=t.time,a=t.periods,i=t.days,o=t.shortDays,l=t.months,u=t.shortMonths,s=Na(a),f=Ia(a),c=Na(i),h=Ia(i),d=Na(o),g=Ia(o),p=Na(l),y=Ia(l),m=Na(u),v=Ia(u),w={a:function(t){return o[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return l[t.getMonth()]},c:null,d:ei,e:ei,f:oi,g:mi,G:wi,H:ni,I:ri,j:ai,L:ii,m:li,M:ui,p:function(t){return a[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Ri,s:Hi,S:si,u:fi,U:ci,V:di,w:gi,W:pi,x:null,X:null,y:yi,Y:vi,Z:xi,"%":Oi},x={a:function(t){return o[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return l[t.getUTCMonth()]},c:null,d:Ai,e:Ai,f:Ti,g:Pi,G:Yi,H:bi,I:Di,j:Mi,L:Ci,m:ki,M:Fi,p:function(t){return a[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Ri,s:Hi,S:_i,u:Si,U:Ei,V:Ni,w:Ii,W:Li,x:null,X:null,y:Vi,Y:zi,Z:Ui,"%":Oi},A={a:function(t,e,n){var r=d.exec(e.slice(n));return r?(t.w=g.get(r[0].toLowerCase()),n+r[0].length):-1},A:function(t,e,n){var r=c.exec(e.slice(n));return r?(t.w=h.get(r[0].toLowerCase()),n+r[0].length):-1},b:function(t,e,n){var r=m.exec(e.slice(n));return r?(t.m=v.get(r[0].toLowerCase()),n+r[0].length):-1},B:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.m=y.get(r[0].toLowerCase()),n+r[0].length):-1},c:function(t,n,r){return M(t,e,n,r)},d:qa,e:qa,f:Qa,g:Oa,G:Ua,H:Xa,I:Xa,j:$a,L:Za,m:Wa,M:ja,p:function(t,e,n){var r=s.exec(e.slice(n));return r?(t.p=f.get(r[0].toLowerCase()),n+r[0].length):-1},q:Ha,Q:Ka,s:ti,S:Ga,u:Va,U:Pa,V:za,w:La,W:Ya,x:function(t,e,r){return M(t,n,e,r)},X:function(t,e,n){return M(t,r,e,n)},y:Oa,Y:Ua,Z:Ra,"%":Ja};function b(t,e){return function(n){var r,a,i,o=[],l=-1,u=0,s=t.length;for(n instanceof Date||(n=new Date(+n));++l<s;)37===t.charCodeAt(l)&&(o.push(t.slice(u,l)),null!=(a=ka[r=t.charAt(++l)])?r=t.charAt(++l):a="e"===r?" ":"0",(i=e[r])&&(r=i(n,a)),o.push(r),u=l+1);return o.push(t.slice(u,l)),o.join("")}}function D(t,e){return function(n){var r,a,i=Ma(1900,void 0,1);if(M(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("s"in i)return new Date(1e3*i.s+("L"in i?i.L:0));if(e&&!("Z"in i)&&(i.Z=0),"p"in i&&(i.H=i.H%12+12*i.p),void 0===i.m&&(i.m="q"in i?i.q:0),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(a=(r=Da(Ma(i.y,0,1))).getUTCDay(),r=a>4||0===a?ma.ceil(r):ma(r),r=ga.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(a=(r=ba(Ma(i.y,0,1))).getDay(),r=a>4||0===a?fa.ceil(r):fa(r),r=la.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),a="Z"in i?Da(Ma(i.y,0,1)).getUTCDay():ba(Ma(i.y,0,1)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(a+5)%7:i.w+7*i.U-(a+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Da(i)):ba(i)}}function M(t,e,n,r){for(var a,i,o=0,l=e.length,u=n.length;o<l;){if(r>=u)return-1;if(37===(a=e.charCodeAt(o++))){if(a=e.charAt(o++),!(i=A[a in ka?e.charAt(o++):a])||(r=i(t,n,r))<0)return-1}else if(a!=n.charCodeAt(r++))return-1}return r}return w.x=b(n,w),w.X=b(r,w),w.c=b(e,w),x.x=b(n,x),x.X=b(r,x),x.c=b(e,x),{format:function(t){var e=b(t+="",w);return e.toString=function(){return t},e},parse:function(t){var e=D(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=b(t+="",x);return e.toString=function(){return t},e},utcParse:function(t){var e=D(t+="",!0);return e.toString=function(){return t},e}}}(t),Ta=Ca.format}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var ji,Gi,Zi,Qi=Math.abs,Ji=Math.atan2,Ki=Math.cos,to=Math.max,eo=Math.min,no=Math.sin,ro=Math.sqrt,ao=Math.PI,io=ao/2,oo=2*ao;function lo(t){return t>1?0:t<-1?ao:Math.acos(t)}function uo(t){return t>=1?io:t<=-1?-io:Math.asin(t)}function so(t){return t.innerRadius}function fo(t){return t.outerRadius}function co(t){return t.startAngle}function ho(t){return t.endAngle}function go(t){return t&&t.padAngle}function po(t,e,n,r,a,i,o,l){var u=n-t,s=r-e,f=o-a,c=l-i,h=c*u-f*s;if(!(h*h<1e-12))return[t+(h=(f*(e-i)-c*(t-a))/h)*u,e+h*s]}function yo(t,e,n,r,a,i,o){var l=t-n,u=e-r,s=(o?i:-i)/ro(l*l+u*u),f=s*u,c=-s*l,h=t+f,d=e+c,g=n+f,p=r+c,y=(h+g)/2,m=(d+p)/2,v=g-h,w=p-d,x=v*v+w*w,A=a-i,b=h*p-g*d,D=(w<0?-1:1)*ro(to(0,A*A*x-b*b)),M=(b*w-v*D)/x,C=(-b*v-w*D)/x,T=(b*w+v*D)/x,k=(-b*v+w*D)/x,F=M-y,_=C-m,S=T-y,E=k-m;return F*F+_*_>S*S+E*E&&(M=T,C=k),{cx:M,cy:C,x01:-f,y01:-c,x11:M*(a/A-1),y11:C*(a/A-1)}}function mo(){var t=so,e=fo,n=Xi(0),r=null,a=co,i=ho,o=go,l=null;function u(){var u,s,f=+t.apply(this,arguments),c=+e.apply(this,arguments),h=a.apply(this,arguments)-io,d=i.apply(this,arguments)-io,g=Qi(d-h),p=d>h;if(l||(l=u=lr()),c<f&&(s=c,c=f,f=s),c>1e-12)if(g>oo-1e-12)l.moveTo(c*Ki(h),c*no(h)),l.arc(0,0,c,h,d,!p),f>1e-12&&(l.moveTo(f*Ki(d),f*no(d)),l.arc(0,0,f,d,h,p));else{var y,m,v=h,w=d,x=h,A=d,b=g,D=g,M=o.apply(this,arguments)/2,C=M>1e-12&&(r?+r.apply(this,arguments):ro(f*f+c*c)),T=eo(Qi(c-f)/2,+n.apply(this,arguments)),k=T,F=T;if(C>1e-12){var _=uo(C/f*no(M)),S=uo(C/c*no(M));(b-=2*_)>1e-12?(x+=_*=p?1:-1,A-=_):(b=0,x=A=(h+d)/2),(D-=2*S)>1e-12?(v+=S*=p?1:-1,w-=S):(D=0,v=w=(h+d)/2)}var E=c*Ki(v),B=c*no(v),N=f*Ki(A),I=f*no(A);if(T>1e-12){var L,V=c*Ki(w),P=c*no(w),z=f*Ki(x),Y=f*no(x);if(g<ao&&(L=po(E,B,z,Y,V,P,N,I))){var U=E-L[0],O=B-L[1],R=V-L[0],H=P-L[1],W=1/no(lo((U*R+O*H)/(ro(U*U+O*O)*ro(R*R+H*H)))/2),q=ro(L[0]*L[0]+L[1]*L[1]);k=eo(T,(f-q)/(W-1)),F=eo(T,(c-q)/(W+1))}}D>1e-12?F>1e-12?(y=yo(z,Y,E,B,c,F,p),m=yo(V,P,N,I,c,F,p),l.moveTo(y.cx+y.x01,y.cy+y.y01),F<T?l.arc(y.cx,y.cy,F,Ji(y.y01,y.x01),Ji(m.y01,m.x01),!p):(l.arc(y.cx,y.cy,F,Ji(y.y01,y.x01),Ji(y.y11,y.x11),!p),l.arc(0,0,c,Ji(y.cy+y.y11,y.cx+y.x11),Ji(m.cy+m.y11,m.cx+m.x11),!p),l.arc(m.cx,m.cy,F,Ji(m.y11,m.x11),Ji(m.y01,m.x01),!p))):(l.moveTo(E,B),l.arc(0,0,c,v,w,!p)):l.moveTo(E,B),f>1e-12&&b>1e-12?k>1e-12?(y=yo(N,I,V,P,f,-k,p),m=yo(E,B,z,Y,f,-k,p),l.lineTo(y.cx+y.x01,y.cy+y.y01),k<T?l.arc(y.cx,y.cy,k,Ji(y.y01,y.x01),Ji(m.y01,m.x01),!p):(l.arc(y.cx,y.cy,k,Ji(y.y01,y.x01),Ji(y.y11,y.x11),!p),l.arc(0,0,f,Ji(y.cy+y.y11,y.cx+y.x11),Ji(m.cy+m.y11,m.cx+m.x11),p),l.arc(m.cx,m.cy,k,Ji(m.y11,m.x11),Ji(m.y01,m.x01),!p))):l.arc(0,0,f,A,x,p):l.lineTo(N,I)}else l.moveTo(0,0);if(l.closePath(),u)return l=null,u+""||null}return u.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+a.apply(this,arguments)+ +i.apply(this,arguments))/2-ao/2;return[Ki(r)*n,no(r)*n]},u.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:Xi(+e),u):t},u.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Xi(+t),u):e},u.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:Xi(+t),u):n},u.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Xi(+t),u):r},u.startAngle=function(t){return arguments.length?(a="function"==typeof t?t:Xi(+t),u):a},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Xi(+t),u):i},u.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:Xi(+t),u):o},u.context=function(t){return arguments.length?(l=null==t?null:t,u):l},u}function vo(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function wo(t){this._context=t}function xo(t){return new wo(t)}function Ao(t){return t[0]}function bo(t){return t[1]}function Do(t,e){return e<t?-1:e>t?1:e>=t?0:NaN}function Mo(t){return t}wo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}},function(t){t[t.Tag=0]="Tag",t[t.Frontmatter=1]="Frontmatter",t[t.Wiki=2]="Wiki",t[t.Text=3]="Text",t[t.dvField=4]="dvField",t[t.Table=5]="Table",t[t.FileMeta=6]="FileMeta",t[t.Task=7]="Task",t[t.TaskDone=8]="TaskDone",t[t.TaskNotDone=9]="TaskNotDone"}(ji||(ji={})),function(t){t[t.Line=0]="Line",t[t.Bar=1]="Bar",t[t.Pie=2]="Pie",t[t.Radar=3]="Radar",t[t.Summary=4]="Summary",t[t.Table=5]="Table",t[t.Month=6]="Month",t[t.Heatmap=7]="Heatmap",t[t.Bullet=8]="Bullet",t[t.Unknown=9]="Unknown"}(Gi||(Gi={})),function(t){t[t.Number=0]="Number",t[t.Int=1]="Int",t[t.Date=2]="Date",t[t.Time=3]="Time",t[t.DateTime=4]="DateTime",t[t.String=5]="String"}(Zi||(Zi={}));class Co{constructor(t,e){this.date=t,this.value=e}}class To{constructor(t,e,n){if(this.type=e,this.target=n,this.separator="/",this.id=t,this.accessor=-1,this.accessor1=-1,this.accessor2=-1,this.valueType=Zi.Number,this.usedAsXDataset=!1,this.numTargets=0,e===ji.Table){let t,e=new RegExp("\\[(?<accessor>[0-9]+)\\]\\[(?<accessor1>[0-9]+)\\](\\[(?<accessor2>[0-9]+)\\])?","gm");for(;t=e.exec(n);)if(void 0!==t.groups.accessor){let r=parseFloat(t.groups.accessor);if(Number.isNumber(r)&&void 0!==t.groups.accessor1){let a=parseFloat(t.groups.accessor1);if(Number.isNumber(a)){let i;void 0!==t.groups.accessor2&&(i=parseFloat(t.groups.accessor2)),this.accessor=r,this.accessor1=a,Number.isNumber(i)&&(this.accessor2=i),this.parentTarget=n.replace(e,"")}break}}}else{let t,e=new RegExp("\\[(?<accessor>[0-9]+)\\]","gm");for(;t=e.exec(n);)if(void 0!==t.groups.accessor){let r=parseFloat(t.groups.accessor);Number.isNumber(r)&&(this.accessor=r,this.parentTarget=n.replace(e,""));break}}}equalTo(t){return this.type===t.type&&this.target===t.target}getType(){return this.type}getTarget(){return this.target}getParentTarget(){return this.parentTarget}getId(){return this.id}getAccessor(t=0){switch(t){case 0:return this.accessor;case 1:return this.accessor1;case 2:return this.accessor2}return null}setSeparator(t){this.separator=t}getSeparator(){return this.separator}addNumTargets(t=1){this.numTargets=this.numTargets+t}getNumTargets(){return this.numTargets}}class ko{constructor(t,e){this.currentIndex=0,this.name="untitled",this.query=e,this.values=[],this.parent=t,this.id=-1,this.yMin=null,this.yMax=null,this.startDate=null,this.endDate=null,this.numTargets=0,this.lineInfo=null,this.barInfo=null,this.isTmpDataset=!1,this.valueType=null==e?void 0:e.valueType;for(let e=0;e<t.getDates().length;e++)this.values.push(null)}cloneToTmpDataset(){if(!this.isTmpDataset){let t=new ko(this.parent,null);return t.name="tmp",t.values=[...this.values],t.yMin=this.yMin,t.yMax=this.yMax,t.startDate=this.startDate.clone(),t.endDate=this.endDate.clone(),t.numTargets=this.numTargets,t.isTmpDataset=!0,t.valueType=this.valueType,t}return this}getName(){return this.name}setName(t){this.name=t}getId(){return this.id}setId(t){this.id=t}addNumTargets(t){this.numTargets=this.numTargets+t}getNumTargets(){return this.numTargets}getValue(t,e=0){let n=this.parent.getIndexOfDate(t)+Math.floor(e);return n>=0&&n<this.values.length?this.values[n]:null}setValue(t,e){let n=this.parent.getIndexOfDate(t);n>=0&&n<this.values.length&&(this.values[n]=e,(null===this.yMin||e<this.yMin)&&(this.yMin=e),(null===this.yMax||e>this.yMax)&&(this.yMax=e),(null===this.startDate||t<this.startDate)&&(this.startDate=t.clone()),(null===this.endDate||t>this.endDate)&&(this.endDate=t.clone()))}recalculateMinMax(){this.yMin=Math.min(...this.values),this.yMax=Math.max(...this.values)}getYMin(){return this.yMin}getYMax(){return this.yMax}getStartDate(){return this.startDate}getEndDate(){return this.endDate}shift(t){for(let e=0;e<this.values.length;e++)null!==this.values[e]&&(this.values[e]=this.values[e]+t);this.yMin=this.yMin+t,this.yMax=this.yMax+t}setPenalty(t){for(let e=0;e<this.values.length;e++)null===this.values[e]&&(this.values[e]=t,t<this.yMin&&(this.yMin=t),t>this.yMax&&(this.yMax=t))}getQuery(){return this.query}accumulateValues(){let t=0;for(let e=0;e<this.values.length;e++)null!==this.values[e]&&(t+=this.values[e]),this.values[e]=t,t<this.yMin&&(this.yMin=t),t>this.yMax&&(this.yMax=t)}getValues(){return this.values}getLength(){return this.values.length}getLengthNotNull(){let t=0;for(let e=0;e<this.values.length;e++)null!==this.values[e]&&t++;return t}next(){if(this.currentIndex<this.values.length){let t=this.currentIndex++;return{done:!1,value:new Co(this.parent.getDates()[t],this.values[t])}}return this.currentIndex=0,{done:!0,value:null}}[Symbol.iterator](){return this}}class Fo{constructor(t,e){this.currentIndex=0,this.dates=[],this.datasets=[];const n=t.creationData().format.toString();for(let r=t.clone();r<=e;r.add(1,"days")){let t=window.moment(r.format(n),n,!0);this.dates.push(t)}}createDataset(t,e){let n=new ko(this,t);return n.setId(t.getId()),e&&n.setName(e.datasetName[t.getId()]),this.datasets.push(n),n}getIndexOfDate(t){const e=t.creationData().format.toString();for(let n=0;n<this.dates.length;n++)if(this.dates[n].format(e)===t.format(e))return n;return-1}getDatasetByQuery(t){for(let e of this.datasets)if(e.getQuery().equalTo(t))return e;return null}getDatasetById(t){for(let e of this.datasets)if(e.getId()===t)return e;return null}getXDatasetIds(){let t=[];for(let e of this.datasets)if(e.getQuery().usedAsXDataset){let n=e.getQuery().getId();t.includes(n)||-1===n||t.push(n)}return t}getDates(){return this.dates}getNames(){let t=[];for(let e of this.datasets)t.push(e.getName());return t}next(){return this.currentIndex<this.datasets.length?{done:!1,value:this.datasets[this.currentIndex++]}:(this.currentIndex=0,{done:!0,value:null})}[Symbol.iterator](){return this}}class _o{constructor(t){this.queries=t,this.xDataset=[],this.folder="/",this.dateFormat="YYYY-MM-DD",this.dateFormatPrefix="",this.dateFormatSuffix="",this.startDate=null,this.endDate=null,this.datasetName=[],this.constValue=[1],this.ignoreAttachedValue=[],this.ignoreZeroValue=[],this.accum=[],this.penalty=[],this.valueShift=[],this.valueType=[],this.dataAreaSize=new Yo(300,300),this.margin=new Uo(10,10,10,10),this.tooltipSize=new Yo(90,45),this.fixedScale=1,this.fitPanelWidth=!1,this.output=[],this.line=[],this.bar=[],this.pie=[],this.summary=[],this.month=[],this.heatmap=[],this.bullet=[],this.customDataset=[],this.datasets=null}getQueryById(t){for(let e of this.queries)if(e.getId()===t)return e}}class So{constructor(){this.id=-1,this.name="",this.xData=[],this.yData=[]}}class Eo{constructor(){this.title="",this.xAxisLabel="Date",this.xAxisColor="",this.xAxisLabelColor="",this.yAxisLabel=[],this.yAxisColor=[],this.yAxisLabelColor=[],this.yAxisUnit=[],this.yMin=[],this.yMax=[],this.reverseYAxis=[],this.allowInspectData=!0,this.showLegend=!1,this.legendPosition="",this.legendOrientation="",this.legendBgColor="",this.legendBorderColor=""}GetGraphType(){return Gi.Unknown}}class Bo extends Eo{constructor(){super(),this.lineColor=[],this.lineWidth=[],this.showLine=[],this.showPoint=[],this.pointColor=[],this.pointBorderColor=[],this.pointBorderWidth=[],this.pointSize=[],this.fillGap=[],this.yAxisLocation=[]}GetGraphType(){return Gi.Line}}class No extends Eo{constructor(){super(),this.barColor=[],this.yAxisLocation=[]}GetGraphType(){return Gi.Bar}}class Io{constructor(){this.title="",this.data=[],this.dataColor=[],this.dataName=[],this.label=[],this.hideLabelLessThan=.03,this.extLabel=[],this.showExtLabelOnlyIfNoLabel=!1,this.ratioInnerRadius=0,this.showLegend=!1,this.legendPosition="",this.legendOrientation="",this.legendBgColor="",this.legendBorderColor=""}GetGraphType(){return Gi.Pie}}class Lo{constructor(){this.template="",this.style=""}GetGraphType(){return Gi.Summary}}class Vo{constructor(){this.mode="circle",this.dataset=[],this.startWeekOn="Sun",this.threshold=[],this.yMin=[],this.yMax=[],this.showCircle=!0,this.color=null,this.dimNotInMonth=!0,this.showStreak=!0,this.showTodayRing=!0,this.showSelectedValue=!0,this.showSelectedRing=!0,this.circleColor=null,this.circleColorByValue=!1,this.headerYearColor=null,this.headerMonthColor=null,this.dividingLineColor=null,this.todayRingColor="",this.selectedRingColor="firebrick",this.initMonth="",this.selectedDate="",this.selectedDataset=null}GetGraphType(){return Gi.Month}}class Po{constructor(){this.dataset="0",this.startWeekOn="Sun",this.orientation="vertical",this.yMin=null,this.yMax=null,this.color=null}GetGraphType(){return Gi.Heatmap}}class zo{constructor(){this.title="",this.dataset="0",this.orientation="horizontal",this.value="",this.valueUnit="",this.valueColor="#69b3a2",this.range=[],this.rangeColor=[],this.showMarker=!1,this.markerValue=0,this.markerColor=""}GetGraphType(){return Gi.Bullet}}class Yo{constructor(t,e){this.width=t,this.height=e}}class Uo{constructor(t,e,n,r){this.top=t,this.right=e,this.bottom=n,this.left=r}}class Oo{constructor(t){if(this.translateX=0,this.translateY=0,"string"==typeof t){let e=t.match(/translate\(\s*(?<x>[\d\.\/-]+)\s*,\s*(?<y>[\d\.\/-]+)\s*\)/).groups;e&&(this.translateX=parseFloat(e.x),this.translateY=parseFloat(e.y))}}}class Ro{constructor(t,e){this.filePath=t,this.tableIndex=e,this.xDataset=null,this.yDatasets=[]}}const Ho=["HH:mm","HH:m","H:mm","H:m","hh:mm A","hh:mm a","hh:m A","hh:m a","h:mm A","h:mm a","h:m A","h:m a"];function Wo(t,e){let n=e;t.length>4&&t.startsWith("[[")&&t.endsWith("]]")&&(t=t.substring(2,t.length-2)),"iso-8601"===e.toLowerCase()&&(n=window.moment.ISO_8601);let r=window.moment(t,n,!0);return r=r.startOf("day"),r}function qo(t,e){let n=null;const r=/^(?<value>[\-\+]?[0-9]+)(?<unit>[dwmy])$/;if(r.test(t)){let a=r.exec(t);if(void 0!==a.groups&&void 0!==a.groups.value&&void 0!==a.groups.unit){let t=parseFloat(a.groups.value),r=a.groups.unit;n=jo(e),"d"===r?n=n.add(t,"days"):"w"===r?n=n.add(t,"weeks"):"m"===r?n=n.add(t,"months"):"y"===r&&(n=n.add(t,"years"))}}return n&&n.isValid()?n:null}function $o(t,e){return null==t?null:"iso-8601"===e.toLowerCase()?t.format():t.format(e)}function Xo(t,e){return Wo($o(window.moment(t),e),e)}function jo(t){return Wo($o(window.moment(),t),t)}function Go(t,e){for(var n=(e=e.replace(/^\./,"")).split("."),r=0,a=n.length;r<a;++r){var i=n[r];if(!(i in t))return;t=t[i]}return t}function Zo(t,e){const n=Array.from(t),r=n.findIndex((t=>t!==e)),a=n.reverse().findIndex((t=>t!==e));return-1===r&&-1===a?t:t.substring(r,t.length-a)}function Qo(t){let e=null,n=Zi.Number;if("string"==typeof t)if(t.includes(":")){let r=!1;t.startsWith("-")&&(r=!0,t=t.substring(1));let a=window.moment(t,Ho,!0);a.isValid()&&(e=a.diff(window.moment("00:00","HH:mm",!0),"seconds"),r&&(e*=-1),n=Zi.Time)}else e=parseFloat(t);else"number"==typeof t&&(e=t);return{type:n,value:e}}function Jo(t,e="",n=""){var r=Xt("body").append("svg");let a=r.append("text").text(t).attr("x",-99999).attr("y",-99999);e&&a.attr("class",e),n&&a.attr("transform","rotate("+n+")");var i=r.node().getBBox();return r.remove(),{width:i.width,height:i.height}}function Ko(t,e,n){let r=(0|parseFloat(t.attr("width")))+e,a=(0|parseFloat(t.attr("height")))+n;t.attr("width",r),t.attr("height",a)}function tl(t,e,n){let r=new Oo(t.attr("transform"));t.attr("transform","translate("+(r.translateX+e)+","+(r.translateY+n)+")")}function el(t){return t=(t=(t=t.replace(/(^\\s\*)|(\\s\*$)/gi,"")).replace(/\[ \]{2,}/gi," ")).replace(/\\n /,"\\n")}var nl=i((function(t,e){!function(n){var r="Compound",a="MemberExpression",i="Literal",o=function(t,e){var n=new Error(t+" at character "+e);throw n.index=e,n.description=t,n},l=!0,u={"-":l,"!":l,"~":l,"+":l},s={"||":1,"&&":2,"|":3,"^":4,"&":5,"==":6,"!=":6,"===":6,"!==":6,"<":7,">":7,"<=":7,">=":7,"<<":8,">>":8,">>>":8,"+":9,"-":9,"*":10,"/":10,"%":10},f={$:l,_:l},c=function(t){var e,n=0;for(var r in t)(e=r.length)>n&&t.hasOwnProperty(r)&&(n=e);return n},h=c(u),d=c(s),g={true:!0,false:!1,null:null},p=function(t){return s[t]||0},y=function(t,e,n){return{type:"||"===t||"&&"===t?"LogicalExpression":"BinaryExpression",operator:t,left:e,right:n}},m=function(t){return t>=48&&t<=57},v=function(t){return t>=65&&t<=90||t>=97&&t<=122||t>=128&&!s[String.fromCharCode(t)]||f.hasOwnProperty(String.fromCharCode(t))},w=function(t){return t>=65&&t<=90||t>=97&&t<=122||t>=48&&t<=57||t>=128&&!s[String.fromCharCode(t)]||f.hasOwnProperty(String.fromCharCode(t))},x=function(t){for(var e,n,l=0,f=t.charAt,c=t.charCodeAt,x=function(e){return f.call(t,e)},A=function(e){return c.call(t,e)},b=t.length,D=function(){for(var t=A(l);32===t||9===t||10===t||13===t;)t=A(++l)},M=function(){var t,e,n=T();return D(),63!==A(l)?n:(l++,(t=M())||o("Expected expression",l),D(),58===A(l)?(l++,(e=M())||o("Expected expression",l),{type:"ConditionalExpression",test:n,consequent:t,alternate:e}):void o("Expected :",l))},C=function(){D();for(var e=t.substr(l,d),n=e.length;n>0;){if(s.hasOwnProperty(e)&&(!v(A(l))||l+e.length<t.length&&!w(A(l+e.length))))return l+=n,e;e=e.substr(0,--n)}return!1},T=function(){var t,e,n,r,a,i,u,s,f;if(i=k(),!(e=C()))return i;for(a={value:e,prec:p(e)},(u=k())||o("Expected expression after "+e,l),r=[i,a,u];(e=C())&&0!==(n=p(e));){for(a={value:e,prec:n},f=e;r.length>2&&n<=r[r.length-2].prec;)u=r.pop(),e=r.pop().value,i=r.pop(),t=y(e,i,u),r.push(t);(t=k())||o("Expected expression after "+f,l),r.push(a,t)}for(t=r[s=r.length-1];s>1;)t=y(r[s-1].value,r[s-2],t),s-=2;return t},k=function(){var e,n,r,i;if(D(),e=A(l),m(e)||46===e)return F();if(39===e||34===e)i=_();else if(91===e)i=N();else{for(r=(n=t.substr(l,h)).length;r>0;){if(u.hasOwnProperty(n)&&(!v(A(l))||l+n.length<t.length&&!w(A(l+n.length))))return l+=r,{type:"UnaryExpression",operator:n,argument:k(),prefix:!0};n=n.substr(0,--r)}v(e)?i=S():40===e&&(i=B())}if(!i)return!1;for(D(),e=A(l);46===e||91===e||40===e;)l++,46===e?(D(),i={type:a,computed:!1,object:i,property:S()}):91===e?(i={type:a,computed:!0,object:i,property:M()},D(),93!==(e=A(l))&&o("Unclosed [",l),l++):40===e&&(i={type:"CallExpression",arguments:E(41),callee:i}),D(),e=A(l);return i},F=function(){for(var t,e,n="";m(A(l));)n+=x(l++);if(46===A(l))for(n+=x(l++);m(A(l));)n+=x(l++);if("e"===(t=x(l))||"E"===t){for(n+=x(l++),"+"!==(t=x(l))&&"-"!==t||(n+=x(l++));m(A(l));)n+=x(l++);m(A(l-1))||o("Expected exponent ("+n+x(l)+")",l)}return e=A(l),v(e)?o("Variable names cannot start with a number ("+n+x(l)+")",l):46===e&&o("Unexpected period",l),{type:i,value:parseFloat(n),raw:n}},_=function(){for(var t,e="",n=x(l++),r=!1;l<b;){if((t=x(l++))===n){r=!0;break}if("\\"===t)switch(t=x(l++)){case"n":e+="\n";break;case"r":e+="\r";break;case"t":e+="\t";break;case"b":e+="\b";break;case"f":e+="\f";break;case"v":e+="\v";break;default:e+=t}else e+=t}return r||o('Unclosed quote after "'+e+'"',l),{type:i,value:e,raw:n+e+n}},S=function(){var e,n=A(l),r=l;for(v(n)?l++:o("Unexpected "+x(l),l);l<b&&(n=A(l),w(n));)l++;return e=t.slice(r,l),g.hasOwnProperty(e)?{type:i,value:g[e],raw:e}:"this"===e?{type:"ThisExpression"}:{type:"Identifier",name:e}},E=function(t){for(var e,n,a=[],i=!1,u=0;l<b;){if(D(),(e=A(l))===t){i=!0,l++,41===t&&u&&u>=a.length&&o("Unexpected token "+String.fromCharCode(t),l);break}if(44===e){if(l++,++u!==a.length)if(41===t)o("Unexpected token ,",l);else if(93===t)for(var s=a.length;s<u;s++)a.push(null)}else(n=M())&&n.type!==r||o("Expected comma",l),a.push(n)}return i||o("Expected "+String.fromCharCode(t),l),a},B=function(){l++;var t=M();if(D(),41===A(l))return l++,t;o("Unclosed (",l)},N=function(){return l++,{type:"ArrayExpression",elements:E(93)}},I=[];l<b;)59===(e=A(l))||44===e?l++:(n=M())?I.push(n):l<b&&o('Unexpected "'+x(l)+'"',l);return 1===I.length?I[0]:{type:r,body:I}};x.version="0.4.0",x.toString=function(){return"JavaScript Expression Parser (JSEP) v"+x.version},x.addUnaryOp=function(t){return h=Math.max(t.length,h),u[t]=l,this},x.addBinaryOp=function(t,e){return d=Math.max(t.length,d),s[t]=e,this},x.addIdentifierChar=function(t){return f[t]=l,this},x.addLiteral=function(t,e){return g[t]=e,this},x.removeUnaryOp=function(t){return delete u[t],t.length===h&&(h=c(u)),this},x.removeAllUnaryOps=function(){return u={},h=0,this},x.removeIdentifierChar=function(t){return delete f[t],this},x.removeBinaryOp=function(t){return delete s[t],t.length===d&&(d=c(s)),this},x.removeAllBinaryOps=function(){return s={},d=0,this},x.removeLiteral=function(t){return delete g[t],this},x.removeAllLiterals=function(){return g={},this},t.exports?e=t.exports=x:e.parse=x}()})),rl=i((function(t,e){!function(){var t={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function n(t){return a(o(t),arguments)}function r(t,e){return n.apply(null,[t].concat(e||[]))}function a(e,r){var a,i,o,l,u,s,f,c,h,d=1,g=e.length,p="";for(i=0;i<g;i++)if("string"==typeof e[i])p+=e[i];else if("object"==typeof e[i]){if((l=e[i]).keys)for(a=r[d],o=0;o<l.keys.length;o++){if(null==a)throw new Error(n('[sprintf] Cannot access property "%s" of undefined value "%s"',l.keys[o],l.keys[o-1]));a=a[l.keys[o]]}else a=l.param_no?r[l.param_no]:r[d++];if(t.not_type.test(l.type)&&t.not_primitive.test(l.type)&&a instanceof Function&&(a=a()),t.numeric_arg.test(l.type)&&"number"!=typeof a&&isNaN(a))throw new TypeError(n("[sprintf] expecting number but found %T",a));switch(t.number.test(l.type)&&(c=a>=0),l.type){case"b":a=parseInt(a,10).toString(2);break;case"c":a=String.fromCharCode(parseInt(a,10));break;case"d":case"i":a=parseInt(a,10);break;case"j":a=JSON.stringify(a,null,l.width?parseInt(l.width):0);break;case"e":a=l.precision?parseFloat(a).toExponential(l.precision):parseFloat(a).toExponential();break;case"f":a=l.precision?parseFloat(a).toFixed(l.precision):parseFloat(a);break;case"g":a=l.precision?String(Number(a.toPrecision(l.precision))):parseFloat(a);break;case"o":a=(parseInt(a,10)>>>0).toString(8);break;case"s":a=String(a),a=l.precision?a.substring(0,l.precision):a;break;case"t":a=String(!!a),a=l.precision?a.substring(0,l.precision):a;break;case"T":a=Object.prototype.toString.call(a).slice(8,-1).toLowerCase(),a=l.precision?a.substring(0,l.precision):a;break;case"u":a=parseInt(a,10)>>>0;break;case"v":a=a.valueOf(),a=l.precision?a.substring(0,l.precision):a;break;case"x":a=(parseInt(a,10)>>>0).toString(16);break;case"X":a=(parseInt(a,10)>>>0).toString(16).toUpperCase()}t.json.test(l.type)?p+=a:(!t.number.test(l.type)||c&&!l.sign?h="":(h=c?"+":"-",a=a.toString().replace(t.sign,"")),s=l.pad_char?"0"===l.pad_char?"0":l.pad_char.charAt(1):" ",f=l.width-(h+a).length,u=l.width&&f>0?s.repeat(f):"",p+=l.align?h+a+u:"0"===s?h+u+a:u+h+a)}return p}var i=Object.create(null);function o(e){if(i[e])return i[e];for(var n,r=e,a=[],o=0;r;){if(null!==(n=t.text.exec(r)))a.push(n[0]);else if(null!==(n=t.modulo.exec(r)))a.push("%");else{if(null===(n=t.placeholder.exec(r)))throw new SyntaxError("[sprintf] unexpected placeholder");if(n[2]){o|=1;var l=[],u=n[2],s=[];if(null===(s=t.key.exec(u)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(l.push(s[1]);""!==(u=u.substring(s[0].length));)if(null!==(s=t.key_access.exec(u)))l.push(s[1]);else{if(null===(s=t.index_access.exec(u)))throw new SyntaxError("[sprintf] failed to parse named argument key");l.push(s[1])}n[2]=l}else o|=2;if(3===o)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");a.push({placeholder:n[0],param_no:n[1],keys:n[2],sign:n[3],pad_char:n[4],align:n[5],width:n[6],precision:n[7],type:n[8]})}r=r.substring(n[0].length)}return i[e]=a}e.sprintf=n,e.vsprintf=r,"undefined"!=typeof window&&(window.sprintf=n,window.vsprintf=r)}()}));function al(t){if("number"==typeof t){if(0===t)return!1}else if(t instanceof ko&&t.getValues().some((function(t){return 0===t})))return!1;return!0}const il={min:function(t,e){return h(t.getValues())},minDate:function(t,e){let n=h(t.getValues());if(Number.isNumber(n)){let e=Array.from(t);for(let t of e.reverse())if(null!==t.value&&t.value===n)return t.date}return"Error: min not found"},max:function(t,e){return c(t.getValues())},maxDate:function(t,e){let n=c(t.getValues());if(Number.isNumber(n)){let e=Array.from(t);for(let t of e.reverse())if(null!==t.value&&t.value===n)return t.date}return"Error: max not found"},startDate:function(t,e){if(t){let e=t.getStartDate();if(e&&e.isValid())return e}return e.startDate},endDate:function(t,e){if(t){let e=t.getEndDate();if(e&&e.isValid())return e}return e.endDate},sum:function(t,e){return m(t.getValues())},count:function(t,e){return"Error: deprecated function 'count'"},numTargets:function(t,e){return t.getNumTargets()},days:function(t,e){return"Error: deprecated function 'days'"},numDays:function(t,e){return t.getLength()},numDaysHavingData:function(t,e){return t.getLengthNotNull()},maxStreak:function(t,e){let n=0,r=0;for(let e of t)null!==e.value?n++:n=0,n>=r&&(r=n);return r},maxStreakStart:function(t,e){let n=0,r=0,a=null,i=null;if(t)for(let e of t)null!==e.value?(0===n&&(a=e.date),n++):n=0,n>=r&&(r=n,i=a);return i},maxStreakEnd:function(t,e){let n=0,r=0,a=null,i=null;if(t){let e=Array.from(t);for(let t=0;t<e.length;t++){let o=e[t],l=null;t<e.length-1&&(l=e[t+1]),null!==o.value?(n++,null===(null==l?void 0:l.value)&&(a=o.date)):n=0,n>=r&&(r=n,i=a)}}return i},maxBreaks:function(t,e){let n=0,r=0;for(let e of t)null===e.value?n++:n=0,n>r&&(r=n);return r},maxBreaksStart:function(t,e){let n=0,r=0,a=null,i=null;if(t)for(let e of t)null===e.value?(0===n&&(a=e.date),n++):n=0,n>=r&&(r=n,i=a);return i},maxBreaksEnd:function(t,e){let n=0,r=0,a=null,i=null;if(t){let e=Array.from(t);for(let t=0;t<e.length;t++){let o=e[t],l=null;t<e.length-1&&(l=e[t+1]),null===o.value?(n++,null!==(null==l?void 0:l.value)&&(a=o.date)):n=0,n>=r&&(r=n,i=a)}}return i},lastStreak:function(t,e){return"Error: deprecated function 'lastStreak'"},currentStreak:function(t,e){let n=0;if(t){let e=Array.from(t);for(let t=e.length-1;t>=0;t--){if(null===e[t].value)break;n++}}return n},currentStreakStart:function(t,e){let n=null;if(t){let e=Array.from(t);for(let t=e.length-1;t>=0;t--){let r=e[t];if(t<e.length-1&&(n=e[t+1].date),null===r.value)break}}return null===n?"Error: absense":n},currentStreakEnd:function(t,e){let n=0,r=null;if(t){let e=Array.from(t);for(let t=e.length-1;t>=0;t--){let a=e[t];if(null===a.value)break;0===n&&(r=a.date),n++}}return null===r?"Error: absense":r},currentBreaks:function(t,e){let n=0;if(t){let e=Array.from(t);for(let t=e.length-1;t>=0;t--){if(null!==e[t].value)break;n++}}return n},currentBreaksStart:function(t,e){let n=null;if(t){let e=Array.from(t);for(let t=e.length-1;t>=0;t--){let r=e[t];if(t<e.length-1&&(n=e[t+1].date),null!==r.value)break}}return null===n?"Error: absense":n},currentBreaksEnd:function(t,e){let n=0,r=null;if(t){let e=Array.from(t);for(let t=e.length-1;t>=0;t--){let a=e[t];if(null!==a.value)break;0===n&&(r=a.date),n++}}return null===r?"Error: absense":r},average:function(t,e){let n=t.getLengthNotNull();return al(n)?m(t.getValues())/n:"Error: divide by zero in expression"},median:function(t,e){return p(t.getValues(),.5,n);var n},variance:function(t,e){return function(t,e){let n,r=0,a=0,i=0;if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(n=e-a,a+=n/++r,i+=n*(e-a));else{let o=-1;for(let l of t)null!=(l=e(l,++o,t))&&(l=+l)>=l&&(n=l-a,a+=n/++r,i+=n*(l-a))}if(r>1)return i/(r-1)}(t.getValues())}},ol={"-":function(t){if("number"==typeof t)return-1*t;if(t instanceof ko){let e=t.cloneToTmpDataset();return e.getValues().forEach((function(t,e,n){null!==n[e]&&(n[e]=-1*t)})),e.recalculateMinMax(),e}return"Error: unknown operation for '-'"},"+":function(t){if("number"==typeof t)return t;if(t instanceof ko){return t.cloneToTmpDataset()}return"Error: unknown operation for '+'"}},ll={"+":function(t,e){if("number"==typeof t&&"number"==typeof e)return t+e;if("number"==typeof t&&e instanceof ko){let n=e.cloneToTmpDataset();return n.getValues().forEach((function(e,n,r){null!==r[n]?r[n]=t+e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof ko&&"number"==typeof e){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t+e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof ko&&e instanceof ko){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t+e.getValues()[n]:r[n]=null})),n.recalculateMinMax(),n}return"Error: unknown operation for '+'"},"-":function(t,e){if("number"==typeof t&&"number"==typeof e)return t-e;if("number"==typeof t&&e instanceof ko){let n=e.cloneToTmpDataset();return n.getValues().forEach((function(e,n,r){null!==r[n]?r[n]=t-e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof ko&&"number"==typeof e){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t-e:r[n]=null})),n}if(t instanceof ko&&e instanceof ko){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t-e.getValues()[n]:r[n]=null})),n.recalculateMinMax(),n}return"Error: unknown operation for '-'"},"*":function(t,e){if("number"==typeof t&&"number"==typeof e)return t*e;if("number"==typeof t&&e instanceof ko){let n=e.cloneToTmpDataset();return n.getValues().forEach((function(e,n,r){null!==r[n]?r[n]=t*e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof ko&&"number"==typeof e){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t*e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof ko&&e instanceof ko){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t*e.getValues()[n]:r[n]=null})),n.recalculateMinMax(),n}return"Error: unknown operation for '*'"},"/":function(t,e){if(!al(e))return"Error: divide by zero in expression";if("number"==typeof t&&"number"==typeof e)return t/e;if("number"==typeof t&&e instanceof ko){let n=e.cloneToTmpDataset();return n.getValues().forEach((function(e,n,r){null!==r[n]?r[n]=t/e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof ko&&"number"==typeof e){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t/e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof ko&&e instanceof ko){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t/e.getValues()[n]:r[n]=null})),n.recalculateMinMax(),n}return"Error: unknown operation for '/'"},"%":function(t,e){if(!al(e))return"Error: divide by zero in expression";if("number"==typeof t&&"number"==typeof e)return t%e;if("number"==typeof t&&e instanceof ko){let n=e.cloneToTmpDataset();return n.getValues().forEach((function(e,n,r){null!==r[n]?r[n]=t%e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof ko&&"number"==typeof e){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t%e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof ko&&e instanceof ko){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t%e.getValues()[n]:r[n]=null})),n.recalculateMinMax(),n}return"Error: unknown operation for '%'"}},ul={normalize:function(t,e,n){let r=t.getYMin(),a=t.getYMax();if(null!==r&&null!==a&&a>r){let e=t.cloneToTmpDataset();return e.getValues().forEach((function(t,e,n){n[e]=(t-r)/(a-r)})),e.recalculateMinMax(),e}return"Error: invalid data range for function 'normalize'"},setMissingValues:function(t,e,n){if(e&&e.length>0){let n=e[0],r=t.cloneToTmpDataset();return Number.isNumber(n)&&!Number.isNaN(n)?(r.getValues().forEach((function(t,e,r){null===t&&(r[e]=n)})),r.recalculateMinMax(),r):"Error: invalid arguments for function 'setMissingValues'"}return"Error: invalid arguments for function 'setMissingValues"}};function sl(t,e){switch(t.type){case"Literal":return t.value;case"Identifier":let n=t.name;return n in il||n in ul?`Error: deprecated template variable '${n}', use '${n}()' instead`:`Error: unknown function name '${n}'`;case"UnaryExpression":let r=t,a=sl(r.argument,e);return"string"==typeof a?a:ol[r.operator](a);case"BinaryExpression":let i=t,o=sl(i.left,e),l=sl(i.right,e),u=function(t,e){return"string"==typeof t?t:"string"==typeof e?e:"number"==typeof t||window.moment.isMoment(t)||t instanceof ko?"number"==typeof e||window.moment.isMoment(e)||e instanceof ko?"":"Error: invalide operant type":"Error: invalid operant type"}(o,l);return"string"==typeof u&&u.startsWith("Error:")?u:ll[i.operator](o,l);case"CallExpression":let s=t,f=s.callee.name,c=function(t,e){return t.map((function(t){return sl(t,e)}))}(s.arguments,e);if("string"==typeof c)return c;if("dataset"===f){if(1===c.length){let t=c[0];if("string"==typeof t)return t;if("number"!=typeof t)return"Error: function 'dataset' only accepts id in number";let n=function(t,e){return e.datasets.getDatasetById(t)}(t,e);return n||`Error: no dataset found for id '${t}'`}}else{if(f in il){if(0===c.length){let t=null;for(let n of e.datasets)t||n.getQuery().usedAsXDataset||(t=n);return t?il[f](t,e):`No available dataset found for function ${f}`}if(1===c.length){let t=c[0];return"string"==typeof t?t:t instanceof ko?il[f](t,e):`Error: function '${f}' only accepts Dataset`}return`Error: Too many arguments for function ${f}`}if(f in ul){if(1===c.length){if("string"==typeof c[0])return c[0];if(c[0]instanceof ko){let t=c[0];return ul[f](t,null,e)}return`Error: function ${f} only accept Dataset`}if(c.length>1){if("string"==typeof c[0])return c[0];if(c[0]instanceof ko){let t=c[0];return ul[f](t,c.filter((function(t,e,n){return e>0})),e)}return`Error: function ${f} only accept Dataset`}return`Error: Too many arguments for function ${f}`}}return`Error: unknown function name '${f}'`}return"Error: unknown expression"}function fl(t,e){let n,r=[],a=new RegExp("{{(?<expr>[\\w+\\-*\\/0-9\\s()\\[\\]%.,]+)(::(?<format>[\\w+\\-*\\/0-9\\s()\\[\\]%.:]+))?}}","gm");for(;n=a.exec(t);){let t=n[0];if(!r.some((e=>e.source===t))&&(void 0!==n.groups&&void 0!==n.groups.expr)){let a=n.groups.expr,i=null;try{i=nl(a)}catch(t){return"Error:"+t.message}if(!i)return"Error: failed to parse expression";const o=sl(i,e);if("string"==typeof o)return o;if("number"==typeof o||window.moment.isMoment(o)){let e=null;void 0!==n.groups.format&&(e=n.groups.format),r.push({source:t,value:o,format:e})}}}return r}function cl(t,e){let n=fl(t,e);if("string"==typeof n)return n;let r=n;for(let n of r){let r=n.value,a=n.format,i="";"number"==typeof r?i=a?rl.sprintf("%"+a,r):r.toFixed(1):window.moment.isMoment(r)&&(i=$o(r,a||e.dateFormat)),i&&(t=t.replaceAll(n.source,i))}return t}function hl(t,e){if(t=t.trim(),/^([\-]?[0-9]+[\.][0-9]+|[\-]?[0-9]+)$/.test(t))return parseFloat(t);let n=fl(t,e);if("string"==typeof n)return n;let r=n;return r.length>0?r[0].value:"Error: failed to resolve values"}function dl(t,e,n,r){let a="",i=.5*n.dataAreaSize.width,o=.7*i,l=o*r.ratioInnerRadius,u=[];for(let t of r.data){let e=hl(t,n);if("string"==typeof e){a=e;break}"number"==typeof e&&u.push(e)}if(""!==a)return a;let s=[];for(let t of r.label){let e=cl(t,n);if(e.startsWith("Error")){a=e;break}s.push(e)}if(""!==a)return a;let f=r.hideLabelLessThan,c=s.map((function(t){return Jo(t,"tracker-tick-label")})),h=[];for(let t of r.extLabel){let e=cl(t,n);if(e.startsWith("Error")){a=e;break}h.push(e)}if(""!==a)return a;let d=s.map((function(t){return Jo(t,"tracker-tick-label")})),g=r.showExtLabelOnlyIfNoLabel,p=kr().range(r.dataColor),y=e.dataArea.append("g");y.attr("transform",(function(){return"translate("+.5*n.dataAreaSize.width+","+.5*n.dataAreaSize.height+")"}));let m=function(){var t=Mo,e=Do,n=null,r=Xi(0),a=Xi(oo),i=Xi(0);function o(o){var l,u,s,f,c,h=(o=vo(o)).length,d=0,g=new Array(h),p=new Array(h),y=+r.apply(this,arguments),m=Math.min(oo,Math.max(-oo,a.apply(this,arguments)-y)),v=Math.min(Math.abs(m)/h,i.apply(this,arguments)),w=v*(m<0?-1:1);for(l=0;l<h;++l)(c=p[g[l]=l]=+t(o[l],l,o))>0&&(d+=c);for(null!=e?g.sort((function(t,n){return e(p[t],p[n])})):null!=n&&g.sort((function(t,e){return n(o[t],o[e])})),l=0,s=d?(m-h*w)/d:0;l<h;++l,y=f)u=g[l],f=y+((c=p[u])>0?c*s:0)+w,p[u]={data:o[u],index:l,value:c,startAngle:y,endAngle:f,padAngle:v};return p}return o.value=function(e){return arguments.length?(t="function"==typeof e?e:Xi(+e),o):t},o.sortValues=function(t){return arguments.length?(e=t,n=null,o):e},o.sort=function(t){return arguments.length?(n=t,e=null,o):n},o.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Xi(+t),o):r},o.endAngle=function(t){return arguments.length?(a="function"==typeof t?t:Xi(+t),o):a},o.padAngle=function(t){return arguments.length?(i="function"==typeof t?t:Xi(+t),o):i},o}(),v=m(u),w=y.selectAll("sector").data(v).enter().append("g").attr("class","sector"),x=mo().innerRadius(l).outerRadius(o);var A=mo().innerRadius(.9*i).outerRadius(.9*i);function b(t){return(t.endAngle-t.startAngle)/(2*Math.PI)<f}function D(t){return t.startAngle+(t.endAngle-t.startAngle)/2}function M(t,e){let n=c[e].width,r=d[e].width;b(t);let a=D(t),o=x.centroid(t),l=A.centroid(t),u=A.centroid(t),f=Math.sqrt(Math.pow(l[0]-o[0],2)+Math.pow(l[1]-o[1],2));return""!==s[e]&&(o[0]=o[0]+(l[0]-o[0])*n/f,o[1]=o[1]+(l[1]-o[1])*n/f,u[0]=(.99*i-r-3)*(a<Math.PI?1:-1)),f=Math.sqrt(Math.pow(l[0]-o[0],2)+Math.pow(l[1]-o[1],2)),f>Math.sqrt(Math.pow(u[0]-o[0],2)+Math.pow(u[1]-o[1],2))?[o,u]:[o,l,u]}w.append("path").attr("fill",(function(t,e){return p(e.toString())})).attr("d",x),y.selectAll("label").data(m(u)).enter().append("text").text((function(t,e){return b(t)?"":s[e]})).attr("transform",(function(t){return"translate("+x.centroid(t)[0]+","+x.centroid(t)[1]+")"})).style("text-anchor","middle").attr("class","tracker-tick-label"),y.selectAll("extLabel").data(v).enter().append("text").text((function(t,e){return g?""===s[e]||b(t)?h[e]:"":h[e]})).attr("transform",(function(t,e){let n=A.centroid(t),r=D(t);return n[0]=(.99*i-d[e].width)*(r<Math.PI?1:-1),"translate("+n[0]+","+n[1]+")"})).style("text-anchor",(function(t){return D(t)<Math.PI?"start":"end"})).attr("class","tracker-tick-label"),y.selectAll("line").data(v).enter().append("polyline").attr("stroke","black").style("fill","none").attr("stroke-width",1).attr("points",(function(t,e){if(g){if((""===s[e]||b(t))&&""!==h[e])return M(t,e)}else if(""!==h[e])return M(t,e)})).attr("class","tracker-axis")}function gl(t,e,n){if(!e||!n)return;let r={};r=function(t,e,n,r){Xt(e).select("#svg").remove();for(var a=Object.getOwnPropertyNames(t),i=0;i<a.length;i++)delete t[a[i]];let o=Xt(e).append("svg").attr("id","svg").attr("width",n.dataAreaSize.width+n.margin.left+n.margin.right).attr("height",n.dataAreaSize.height+n.margin.top+n.margin.bottom);t.svg=o;let l=o.append("g").attr("id","graphArea").attr("transform","translate("+n.margin.left+","+n.margin.top+")").attr("width",n.dataAreaSize.width+n.margin.right).attr("height",n.dataAreaSize.height+n.margin.bottom);t.graphArea=l;let u=l.append("g").attr("id","dataArea").attr("width",n.dataAreaSize.width).attr("height",n.dataAreaSize.height);return t.dataArea=u,t}(r,t,e),function(t,e,n,r){if(!n||!r)return;if(!r.title)return;let a=Jo(r.title,"tracker-title"),i=e.graphArea.append("text").text(r.title).attr("id","title").attr("transform","translate("+n.dataAreaSize.width/2+","+a.height/2+")").attr("height",a.height).attr("class","tracker-title");e.title=i,Ko(e.svg,0,a.height),Ko(e.graphArea,0,a.height),tl(e.dataArea,0,a.height)}(0,r,e,n),dl(0,r,e,n),n.showLegend&&function(t,e,n,r){let a=e.svg;e.graphArea;let i=e.dataArea,o=e.title,l=0;o&&(l=parseFloat(o.attr("height")));let u=r.dataName,s=u.map((function(t){return Jo(t,"tracker-legend-label")})),f=0,c=0;for(let t=0;t<u.length;t++)s[t].width>c&&(c=s[t].width,f=t);let h=c/u[f].length,d=s[f].height,g=u.length,p=2*h,y=d,v=2*h,w=0,x=0;"vertical"===r.legendOrientation?(w=3*p+v+c,x=(g+1)*y):"horizontal"===r.legendOrientation&&(w=(2*p+v)*g+p+m(s,(function(t,e){return t.width})),x=y+d);let A=0,b=0;if("top"===r.legendPosition)A=n.dataAreaSize.width/2-w/2,b=l,Ko(a,0,x+y),tl(i,0,x+y);else if("bottom"===r.legendPosition)A=n.dataAreaSize.width/2-w/2,b=l+n.dataAreaSize.height+y,Ko(a,0,x+y);else if("left"===r.legendPosition)A=0,b=l+n.dataAreaSize.height/2-x/2,Ko(a,w+p,0),tl(i,w+p,0);else{if("right"!==r.legendPosition)return;A=n.dataAreaSize.width+p,b=l+n.dataAreaSize.height/2-x/2,Ko(a,w+p,0)}let D=e.graphArea.append("g").attr("id","legend").attr("transform","translate("+A+","+b+")"),M=D.append("rect").attr("class","tracker-legend").attr("width",w).attr("height",x);r.legendBgColor&&M.style("fill",r.legendBgColor),r.legendBorderColor&&M.style("stroke",r.legendBorderColor);let C=p,T=d,k=C+p+v,F=T;if("vertical"===r.legendOrientation)D.selectAll("markers").data(u).enter().append("circle").attr("cx",C+v/2).attr("cy",(function(t,e){return T+e*y})).attr("r",(function(t,e){return 5})).style("fill",(function(t,e){return r.dataColor[e]})),D.selectAll("labels").data(u).enter().append("text").attr("x",k).attr("y",(function(t,e){return F+e*y})).text((function(t,e){return t})).style("alignment-baseline","middle").attr("class","tracker-legend-label").style("fill",(function(t,e){return r.dataColor[e]}));else if("horizontal"===r.legendOrientation){let t=0;t=0,D.selectAll("markers").data(u).enter().append("circle").attr("cx",(function(e,n){return 0===n?t=C+v/2:t+=s[n].width+p+v+p,t})).attr("cy",T).attr("r",(function(t,e){return 5})).style("fill",(function(t,e){return r.dataColor[e]})),t=0,D.selectAll("labels").data(u).enter().append("text").attr("x",(function(e,n){return 0===n?t=k:t+=s[n].width+p+v+p,t})).attr("y",F).text((function(t,e){return t})).style("alignment-baseline","middle").attr("class","tracker-legend-label").style("fill",(function(t,e){return r.dataColor[e]}))}}(0,r,e,n)}function pl(t,e,n){if(!e||!n)return;let r="";n.template,r=n.template;let a=cl(r,e);if(a.startsWith("Error:"))return a;if(r=a,""!==r){let e=Xt(t).append("div");if(r.includes("\n")){let t=r.split("\n");for(let n of t)e.append("div").text(n)}else e.text(r);""!==n.style&&e.attr("style",n.style)}}function yl(t,e){let n=e.dataset;if(0===n.length)return!1;let r=null;if(null===e.selectedDataset){for(let e of n)if(r=t.datasets.getDatasetById(e),r&&!r.getQuery().usedAsXDataset)break;if(r)return e.selectedDataset=r.getId(),!0}else{let a=e.selectedDataset,i=n.findIndex((t=>t===a));if(i>=0){if(i===e.dataset.length-1){for(let e of n)if(r=t.datasets.getDatasetById(e),r&&!r.getQuery().usedAsXDataset)break;return!!r&&(e.selectedDataset=r.getId(),!0)}{i++;let a=n[i];if(r=t.datasets.getDatasetById(a),e.selectedDataset=a,r&&!r.getQuery().usedAsXDataset)return!0;yl(t,e)}}}return!1}function ml(t,e,n,r){Xt(e).select("#svg").remove();for(var a=Object.getOwnPropertyNames(t),i=0;i<a.length;i++)delete t[a[i]];let o=Xt(e).append("svg").attr("id","svg").attr("width",n.dataAreaSize.width+n.margin.left+n.margin.right).attr("height",n.dataAreaSize.height+n.margin.top+n.margin.bottom);t.svg=o;let l=o.append("g").attr("id","graphArea").attr("transform","translate("+n.margin.left+","+n.margin.top+")").attr("width",n.dataAreaSize.width+n.margin.right).attr("height",n.dataAreaSize.height+n.margin.bottom);t.graphArea=l;let u=l.append("g").attr("id","dataArea").attr("width",n.dataAreaSize.width).attr("height",n.dataAreaSize.height);return t.dataArea=u,t}function vl(t,e){let n=t.svg.selectAll("circle");for(let t of n){let e=Xt(t).attr("id");e&&e.startsWith("tracker-selected-circle-")&&Xt(t).style("stroke","none")}e.selectedDate="",t.monitor.text("")}function wl(t,e,n,r,a){if(!n||!r)return;let i=r.selectedDataset;if(null===i)return;let o=n.datasets.getDatasetById(i);if(!o)return;let l=o.getName();a.month(),a.daysInMonth(),a.year();let u=Jo("30","tracker-axis-label"),s=2.8*Math.max(u.width,u.height),f=a.format("YYYY"),c=a.format("MMM"),h=Jo(f,"tracker-month-header-year"),d=Jo(c,"tracker-month-header-month"),g=0,p=e.graphArea.append("g"),y=null;r.headerMonthColor?y=r.headerMonthColor:r.color&&(y=r.color);let m=p.append("text").text(c).attr("id","titleMonth").attr("transform","translate("+s/4+","+d.height+")").attr("class","tracker-month-header-month").style("cursor","default").on("click",(function(t){vl(e,r)}));y&&m.style("fill",y),g+=d.height;let v=null;r.headerYearColor?v=r.headerYearColor:r.color&&(v=r.color);let w=p.append("text").text(f).attr("id","titleYear").attr("transform","translate("+s/4+","+(g+h.height)+")").attr("class","tracker-month-header-year").style("cursor","default").attr("font-weight","bold").on("click",(function(t){vl(e,r)}));v&&w.style("fill",v),g+=h.height;let x=Jo(l,"tracker-month-title-rotator"),A=p.append("text").text(l).attr("transform","translate("+3.5*s+","+x.height+")").attr("class","tracker-month-title-rotator").style("cursor","pointer").on("click",(function(i){yl(n,r)&&(vl(e,r),Al(t,e,n,r,a))}));e.rotator=A;let b=Jo("0.0000","tracker-month-title-monitor"),D=p.append("text").text("").attr("id","monitor").attr("class","tracker-month-title-monitor").attr("transform","translate("+3.5*s+","+(x.height+b.height)+")").style("cursor","pointer").style("fill",r.selectedRingColor);e.monitor=D;let M=Jo("<","tracker-month-title-arrow");p.append("text").text("<").attr("id","arrowLeft").attr("transform","translate("+5.5*s+","+(g/2+M.height/2)+")").attr("class","tracker-month-title-arrow").on("click",(function(i){vl(e,r),r.selectedDate="";let o=a.clone().add(-1,"month");Al(t,e,n,r,o)})).style("cursor","pointer"),p.append("text").text(">").attr("id","arrowLeft").attr("transform","translate("+6.5*s+","+(g/2+M.height/2)+")").attr("class","tracker-month-title-arrow").on("click",(function(i){vl(e,r);let o=a.clone().add(1,"month");Al(t,e,n,r,o)})).style("cursor","pointer"),p.append("text").text("◦").attr("id","arrowToday").attr("transform","translate("+6*s+","+(g/2+M.height/2)+")").attr("class","tracker-month-title-arrow").on("click",(function(a){vl(e,r);let i=jo(n.dateFormat);Al(t,e,n,r,i)})).style("cursor","pointer"),g+=8;let C=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];"mon"===r.startWeekOn.toLowerCase()&&C.push(C.shift());let T=Jo(C[0],"tracker-month-weekday");e.graphArea.selectAll("weekDays").data(C).enter().append("text").text((function(t){return t})).attr("transform",(function(t,e){return"translate("+(e+.5)*s+","+(g+T.height)+")"})).attr("class","tracker-month-weekday").attr("text-anchor","middle").style("cursor","default").on("click",(function(t){vl(e,r)})),g+=T.height+8;let k=null;r.dividingLineColor?k=r.dividingLineColor:r.color&&(k=r.color);let F=e.graphArea.append("rect").attr("x",0).attr("y",g).attr("width",6.5*s+T.width).attr("height",1).attr("class","tracker-month-dividing-line");k&&F.style("fill",k),g+=1,p.attr("height",g),e.header=p,tl(e.dataArea,0,g)}function xl(t,e,n,r,a){if(!n||!r)return;let i=r.selectedDataset;if(null===i)return;let o=n.datasets.getDatasetById(i);if(!o)return;let l=r.dataset.findIndex((t=>t===i)),u=r.threshold[l];a.month(),a.daysInMonth();let s=Jo("30","tracker-axis-label"),f=2.8*Math.max(s.width,s.height),d=f/2.8*1.8/2,g=(f-2*d)/2,p=h(o.getValues());null!==r.yMin[l]&&(p=r.yMin[l]);let y=c(o.getValues());null!==r.yMax[l]&&(y=r.yMax[l]);let m=!0;(null===y||null===p||y<=p)&&(m=!1);const v=a.clone().startOf("month");let w=v.clone().subtract(v.day(),"days");"mon"===r.startWeekOn.toLowerCase()&&(w=w.add(1,"days"));const x=a.clone().endOf("month");let A=x.clone().add(7-x.day()-1,"days");"mon"===r.startWeekOn.toLowerCase()&&(A=A.add(1,"days"));const b=o.getStartDate(),D=o.getEndDate();let M=[],C=0,T=0,k=0;for(let t=w.clone();t<=A;t.add(1,"days")){"mon"===r.startWeekOn.toLowerCase()?(C=t.day()-1,C<0&&(C=6),T=Math.floor(k/7)):(C=t.day(),T=Math.floor(k/7));let e=!0;(t.diff(v)<0||t.diff(x)>0)&&(e=!1);let a=!0;b&&D&&t.diff(b)>=0&&t.diff(D)<=0&&(a=!1);let i=o.getValue(t),l=!1;r.circleColorByValue?(m||null!==i&&i>u)&&(l=!0):null!==i&&i>u&&(l=!0);let s=null;r.circleColorByValue&&m&&null!==i&&(s=(i-p)/(y-p));let f=o.getValue(t,1),c=o.getValue(t,-1),h=!1;null!==i&&i>u&&null!==c&&c>u&&(h=!0);let d=!1;null!==i&&i>u&&null!==f&&f>u&&(d=!0),M.push({date:$o(t,n.dateFormat),value:i,scaledValue:s,dayInMonth:t.date(),isInThisMonth:e,isOutOfDataRange:a,row:T,col:C,showCircle:l,streakIn:h,streakOut:d}),k++}let F=(C+1)*f,_=Kr().domain([-.5,6.5]).range([0,F]);if(r.showStreak){let t="#69b3a2";r.circleColor?t=r.circleColor:r.color&&(t=r.color),e.dataArea.selectAll("streakIn").data(M.filter((function(t){return t.streakIn}))).enter().append("rect").attr("x",(function(t){return _(t.col)-d-g})).attr("y",(function(t){return _(t.row)-1.5})).attr("width",g).attr("height",3).style("fill",(function(e){return e.showCircle?r.circleColorByValue&&null!==e.scaledValue?Mr("white",t)(.8*e.scaledValue+.2):t:"none"})).style("opacity",(function(t){return t.isOutOfDataRange||r.dimNotInMonth&&!t.isInThisMonth?.2:1})),e.dataArea.selectAll("streakOut").data(M.filter((function(t){return t.streakOut}))).enter().append("rect").attr("x",(function(t){return _(t.col)+d})).attr("y",(function(t){return _(t.row)-1.5})).attr("width",g).attr("height",3).style("fill",(function(e){return e.showCircle?r.circleColorByValue&&null!==e.scaledValue?Mr("white",t)(.8*e.scaledValue+.2):t:"none"})).style("opacity",(function(t){return t.isOutOfDataRange||r.dimNotInMonth&&!t.isInThisMonth?.2:1}))}let S="#69b3a2";r.circleColor?S=r.circleColor:r.color&&(S=r.color),r.showCircle&&e.dataArea.selectAll("dot").data(M).enter().append("circle").attr("r",d).attr("cx",(function(t){return _(t.col)})).attr("cy",(function(t){return _(t.row)})).style("fill",(function(t){if(t.showCircle){if(!r.circleColorByValue)return S;if(null!==t.scaledValue){return Mr("white",S)(.8*t.scaledValue+.2)}return S}return"none"})).style("opacity",(function(t){return t.isOutOfDataRange||r.dimNotInMonth&&!t.isInThisMonth?.2:1})).style("cursor","default");let E=$o(window.moment(),n.dateFormat);if(r.showTodayRing){let t=e.dataArea.selectAll("todayRing").data(M.filter((function(t){return t.date===E}))).enter().append("circle").attr("r",.9*d).attr("cx",(function(t){return _(t.col)})).attr("cy",(function(t){return _(t.row)})).attr("class","tracker-month-today-circle").style("cursor","default");""!==r.todayRingColor?t.style("stroke",r.todayRingColor):t.style("stroke","white")}r.showSelectedRing&&e.dataArea.selectAll("selectedRing").data(M).enter().append("circle").attr("r",d).attr("cx",(function(t){return _(t.col)})).attr("cy",(function(t){return _(t.row)})).attr("id",(function(t){return"tracker-selected-circle-"+t.date})).attr("class","tracker-month-selected-circle").style("cursor","default").style("stroke","none"),e.dataArea.selectAll("dayLabel").data(M).enter().append("text").text((function(t){return t.dayInMonth.toString()})).attr("transform",(function(t){return"translate("+_(t.col)+","+(_(t.row)+s.height/4)+")"})).style("fill-opacity",(function(t){return t.isOutOfDataRange||r.dimNotInMonth&&!t.isInThisMonth?.2:1})).attr("date",(function(t){return t.date})).attr("value",(function(t){return t.value})).attr("valueType",(function(t){return Zi[o.valueType]})).attr("class","tracker-axis-label").on("click",(function(t){vl(e,r);let n=Xt(this).attr("date");if(r.selectedDate=n,r.showSelectedRing&&e.dataArea.select("#tracker-selected-circle-"+n).style("stroke",r.selectedRingColor),r.showSelectedValue){let t=Xt(this).attr("value"),n="";if("Time"===Xt(this).attr("valueType")){n=window.moment("00:00","HH:mm",!0).add(parseFloat(t),"seconds").format("HH:mm")}else n=t;e.monitor.text(n)}})).style("cursor","pointer");let B=parseFloat(e.svg.attr("width")),N=parseFloat(e.svg.attr("height")),I=parseFloat(e.graphArea.attr("width")),L=parseFloat(e.graphArea.attr("height")),V=7*f+parseFloat(e.header.attr("height")),P=7*f;V>N&&Ko(e.svg,0,V-N),P>B&&Ko(e.svg,P-B,0),V>L&&Ko(e.graphArea,0,V-L),P>I&&Ko(e.svg,P-I,0)}function Al(t,e,n,r,a){n&&bl&&(wl(t,e=ml(e,t,n),n,r,a),xl(0,e,n,r,a))}function bl(t,e,n){if(!e||!bl)return;n.dataset;let r=0;for(let t of e.datasets)t.getQuery().usedAsXDataset||r++;if(0===r)return"No available dataset found";if(yl(e,n),null===n.selectedDataset)return"No available dataset found";let a={};a=ml(a,t,e);let i=null;if(n.initMonth){let t=window.moment(n.initMonth,"YYYY-MM",!0);if(!t.isValid())return"Invalid initMonth";i=t}else window.moment(),i=e.datasets.getDates().last();i&&(wl(t,a,e,n,i),xl(0,a,e,n,i))}function Dl(t,e,n){if(e&&Dl)return"Under construction"}function Ml(t,e,n){if(!e||!n)return;let r=parseFloat(n.dataset);e.datasets.getDatasetById(r),"horizontal"===n.orientation?e.dataAreaSize={width:250,height:24}:"vertical"===n.orientation&&(e.dataAreaSize={width:24,height:250});let a=function(t,e,n){let r={};if(!e||!n)return;let a=Xt(t).append("svg").attr("id","svg").attr("width",e.dataAreaSize.width+e.margin.left+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.top+e.margin.bottom);r.svg=a;let i=a.append("g").attr("id","graphArea").attr("transform","translate("+e.margin.left+","+e.margin.top+")").attr("width",e.dataAreaSize.width+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.bottom);r.graphArea=i;let o=i.append("g").attr("id","dataArea").attr("width",e.dataAreaSize.width).attr("height",e.dataAreaSize.height);return r.dataArea=o,r}(t,e,n),i=function(t,e,n,r){if(!e||!n)return;let a=n.range,i=a[a.length-1],o=[0,i],l=n.valueUnit,u=function(t){return l&&l.endsWith("%")?Qr(0,i,7)(t)+" %":Qr(0,i,7)(t)},s=Jo(u(i),"tracker-tick-label");if("horizontal"===n.orientation){let n=Kr();n.domain(o).range([0,e.dataAreaSize.width]),t.scale=n;let r=T(n);r.tickFormat(u);let a=t.dataArea.append("g").attr("id","axis").attr("transform","translate(0,"+e.dataAreaSize.height+")").call(r).attr("class","tracker-axis");t.axis=a,a.selectAll("path").style("stroke","none"),a.selectAll("line"),a.selectAll("text").attr("class","tracker-tick-label"),a.attr("width",e.dataAreaSize.width+s.width),a.attr("height",6+s.height),Ko(t.svg,+s.width,6+s.height),Ko(t.graphArea,+s.width,6+s.height)}else if("vertical"===n.orientation){let n=Kr();n.domain(o).range([e.dataAreaSize.height,0]),t.scale=n;let r=k(n);r.tickFormat(u);let a=t.dataArea.append("g").attr("id","axis").attr("x",0).attr("y",0).call(r).attr("class","tracker-axis");t.axis=a,a.selectAll("path").style("stroke","none"),a.selectAll("line"),a.selectAll("text").attr("class","tracker-tick-label"),a.attr("width",6+s.width),a.attr("height",e.dataAreaSize.width),Ko(t.svg,6+s.width,0),Ko(t.graphArea,6+s.width,0),tl(t.dataArea,6+s.width,0)}}(a,e,n);if("string"==typeof i)return i;!function(t,e,n){if(!e||!n)return;if(n.title){let r=Jo(n.title,"tracker-title-small");if("horizontal"===n.orientation){let a=t.graphArea.append("text").text(n.title).attr("id","title").attr("x",r.width/2).attr("y",e.dataAreaSize.height/2).attr("height",r.height).attr("class","tracker-title-small");t.title=a,Ko(t.svg,r.width+6,0),Ko(t.graphArea,r.width+6,0),tl(t.dataArea,r.width+6,0)}else if("vertical"===n.orientation){let a=e.dataAreaSize.width/2;r.width>e.dataAreaSize.width&&(Ko(t.svg,r.width-e.dataAreaSize.width,0),Ko(t.graphArea,r.width-e.dataAreaSize.width,0),tl(t.dataArea,r.width/2-e.dataAreaSize.width/2,0),a=r.width/2);let i=parseFloat(t.axis.attr("width")),o=t.graphArea.append("text").text(n.title).attr("id","title").attr("x",a+i).attr("y",r.height/2).attr("height",r.height).attr("class","tracker-title-small");t.title=o,Ko(t.svg,0,r.height+6),Ko(t.graphArea,0,r.height+6),tl(t.dataArea,0,r.height+6)}}if(n.valueUnit){let r=Jo(n.valueUnit,"tracker-tick-label");if("horizontal"===n.orientation){let a=t.dataArea.append("text").text(n.valueUnit).attr("id","unit").attr("x",-1*(r.width+6)).attr("y",e.dataAreaSize.height+6).attr("height",r.height).attr("class","tracker-tick-label");t.unit=a}else if("vertical"===n.orientation){let a=t.dataArea.append("text").text(n.valueUnit).attr("id","unit").attr("x",e.dataAreaSize.width/2-r.width/2).attr("y",-(r.height/2+6)).attr("height",r.height).attr("class","tracker-tick-label");t.unit=a,Ko(t.svg,0,r.height+6),Ko(t.graphArea,0,r.height+6),tl(t.dataArea,0,r.height+6)}}}(a,e,n),function(t,e,n,r){if(!e||!n)return;let a=t.scale,i=n.range,o=n.rangeColor,l=[],u=0;for(let t=0;t<i.length;t++)l.push({start:u,end:i[t],color:o[t]}),u=i[t];"horizontal"===n.orientation?t.dataArea.selectAll("backPanel").data(l).enter().append("rect").attr("x",(function(t,e){return Math.floor(a(t.start))})).attr("y",(function(t){return 0})).attr("width",(function(t,e){return Math.ceil(a(t.end-t.start))})).attr("height",e.dataAreaSize.height).style("fill",(function(t){return t.color})):"vertical"===n.orientation&&t.dataArea.selectAll("backPanel").data(l).enter().append("rect").attr("x",(function(t,e){return 0})).attr("y",(function(t){return Math.floor(a(t.end))})).attr("width",e.dataAreaSize.width).attr("height",(function(t){return e.dataAreaSize.height-Math.floor(a(t.end-t.start))})).style("fill",(function(t){return t.color}))}(a,e,n);let o=function(t,e,n,r){let a="";if(!e||!n)return;let i=hl(n.value,e);if("string"==typeof i)return i;let o=i;if(Number.isNaN(o))return a="Invalid input value: "+i,a;let l=n.valueColor,u=t.scale;if("horizontal"===n.orientation){let n=e.dataAreaSize.height/3;t.dataArea.append("rect").attr("x",u(0)).attr("y",n).attr("width",Math.floor(u(o))).attr("height",n).style("fill",l)}else if("vertical"===n.orientation){let n=e.dataAreaSize.width/3;t.dataArea.append("rect").attr("x",n).attr("y",Math.floor(u(o))).attr("width",n).attr("height",e.dataAreaSize.height-Math.floor(u(o))).style("fill",l)}}(a,e,n);if("string"==typeof o)return o;!function(t,e,n,r){if(!e||!n)return;if(!n.showMarker)return;let a=n.markerValue,i=n.markerColor,o=t.scale;if("horizontal"===n.orientation){let n=2*e.dataAreaSize.height/3;t.dataArea.append("rect").attr("x",o(a)-1.5).attr("y",n/4).attr("width",3).attr("height",n).style("fill",i)}else if("vertical"===n.orientation){let n=2*e.dataAreaSize.width/3;t.dataArea.append("rect").attr("x",n/4).attr("y",o(a)-1.5).attr("width",n).attr("height",3).style("fill",i)}}(a,e,n),function(t,e,n){let r=Xt(t),a=e.svg,i=parseFloat(a.attr("width")),o=parseFloat(a.attr("height"));a.attr("width",null).attr("height",null).attr("viewBox",`0 0 ${i} ${o}`).attr("preserveAspectRatio","xMidYMid meet"),n.fitPanelWidth?r.style("width","100%"):(r.style("width",(i*n.fixedScale).toString()+"px"),r.style("height",(o*n.fixedScale).toString()+"px"))}(t,a,e)}function Cl(t,e,n=!0){return function(r){const a=Math.abs(e-t);let i=window.moment("00:00","HH:mm",!0).add(r,"seconds"),o=i.format("HH:mm");if(n&&a>43200){let n=(r-t)/3600%2;o=r<=t||r>=e?"":n>1?i.format("HH:mm"):""}return o}}function Tl(t,e,n){if(!e||!n)return;let r=e.datasets,a=function(t,e){let n,r;if(void 0===e)for(const e of t)null!=e&&(void 0===n?e>=e&&(n=r=e):(n>e&&(n=e),r<e&&(r=e)));else{let a=-1;for(let i of t)null!=(i=e(i,++a,t))&&(void 0===n?i>=i&&(n=r=i):(n>i&&(n=i),r<i&&(r=i)))}return[n,r]}(r.getDates()),i=function(){return Cr.apply($i(xa,Aa,da,ha,sa,la,oa,ia,aa,Ta).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}().domain(a).range([0,e.dataAreaSize.width]);t.xScale=i;let o=function(t){let e,n=t.getDates().length;return e=n<=15?la:n<=60?la.every(4):n<=105?sa:n<=450?ha:n<=900?ha.every(2):da,e}(r),l=function(t){let e,n=t.getDates().length;return e=Ta(n<=15||n<=60||n<=105?"%y-%m-%d":n<=450||n<=900?"%y %b":"%Y"),e}(r),u=T(i).ticks(o).tickFormat(l),s=t.dataArea.append("g").attr("id","xAxis").attr("transform","translate(0,"+e.dataAreaSize.height+")").call(u).attr("class","tracker-axis");n.xAxisColor&&s.style("stroke",n.xAxisColor),t.xAxis=s;let f=Jo("99-99-99"),c=s.selectAll("text").attr("x",-1*f.height*Math.cos(65/180*Math.PI)).attr("y",0).attr("transform","rotate(-65)").style("text-anchor","end").attr("class","tracker-tick-label");n.xAxisColor&&c.style("fill",n.xAxisColor);let h=f.width*Math.sin(65/180*Math.PI),d=s.append("text").text(n.xAxisLabel).attr("transform","translate("+e.dataAreaSize.width/2+","+(6+h)+")").attr("class","tracker-axis-label");n.xAxisLabelColor&&d.style("fill",n.xAxisLabelColor),s.attr("height",6+h),Ko(t.svg,0,6+h),Ko(t.graphArea,0,6+h)}function kl(t,e,n,r,a){if(!e||!n)return;let i=e.datasets;if(0===a.length)return;if("left"!==r&&"right"!==r)return;let o=null,l=null,u=null,s=!1;for(let t of a){let e=i.getDatasetById(t);if(!e.getQuery().usedAsXDataset)if((null===o||e.getYMin()<o)&&(o=e.getYMin()),(null===l||e.getYMax()>l)&&(l=e.getYMax()),s=e.valueType===Zi.Time,null===u)u=s;else if(s!==u)return"Not all values in time format"}let f=null;"left"===r?f=n.yMin[0]:"right"===r&&(f=n.yMin[1]);let c=!1;"number"!=typeof f?f=o:c=!0;let h=null;"left"===r?h=n.yMax[0]:"right"===r&&(h=n.yMax[1]);let d=!1;if("number"!=typeof h?h=l:d=!0,h<f){let t=f;f=h,h=t;let e=c;c=d,d=e}let g,p,m=h-f,v=Kr();g=c?f:f-.2*m,p=d?h:h+.2*m,n.GetGraphType()===Gi.Bar&&(p<0&&(p=0),g>0&&(g=0));let w=[g,p];("left"===r&&n.reverseYAxis[0]||"right"===r&&n.reverseYAxis[1])&&(w=[p,g]),v.domain(w).range([e.dataAreaSize.height,0]),"left"===r?t.leftYScale=v:"right"===r&&(t.rightYScale=v);let x="";"left"===r?x=n.yAxisColor[0]:"right"===r&&(x=n.yAxisColor[1]);let A="";"left"===r?A=n.yAxisLabelColor[0]:"right"===r&&(A=n.yAxisLabelColor[1]);let b="";"left"===r?b=n.yAxisLabel[0]:"right"===r&&(b=n.yAxisLabel[1]);let D,M="";if("left"===r?M=n.yAxisUnit[0]:"right"===r&&(M=n.yAxisUnit[1]),"left"===r?D=k(v):"right"===r&&(D=C(2,v)),D&&s){let t=Cl(g,p),e=function(t,e){let n=[];return n=Math.abs(e-t)>18e3?y(t=3600*Math.floor(t/3600),e=3600*Math.ceil(e/3600),3600):y(t=1800*Math.floor(t/1800),e=1800*Math.ceil(e/1800),1800),n}(g,p);D.tickValues(e).tickFormat(t)}let T=t.dataArea.append("g").attr("id","yAxis").call(D).attr("class","tracker-axis");"right"==r&&T.attr("transform","translate("+e.dataAreaSize.width+" ,0)"),"left"===r?t.leftYAxis=T:"right"===r&&(t.rightYAxis=T);let F=T.selectAll("path");x&&F.style("stroke",x);let _=T.selectAll("line");x&&_.style("stroke",x);let S=T.selectAll("text").attr("class","tracker-tick-label");x&&S.style("fill",x);let E=Qr(g,p,10);s&&(E=Cl(g,p,!1));let B=Jo(E(g),"tracker-axis-label"),N=Jo(E(p),"tracker-axis-label"),I=Math.max(B.width,N.width);""!==M&&(b+=" ("+M+")");let L=Jo(b),V=T.append("text").text(b).attr("transform","rotate(-90)").attr("x",-1*e.dataAreaSize.height/2).attr("class","tracker-axis-label");"left"===r?V.attr("y",-6-I-L.height/2):V.attr("y",6+I+L.height),A&&V.style("fill",A);let P=L.height+I+6;T.attr("width",P),Ko(t.svg,P,0),Ko(t.graphArea,P,0),"left"===r&&(tl(t.dataArea,P,0),t.title&&tl(t.title,P,0))}function Fl(t,e,n,r,a){if(!e||!n)return;let i=null;if("left"===a?i=t.leftYScale:"right"===a&&(i=t.rightYScale),n.showLine[r.getId()]){let e=function(t,e){var n=Xi(!0),r=null,a=xo,i=null;function o(o){var l,u,s,f=(o=vo(o)).length,c=!1;for(null==r&&(i=a(s=lr())),l=0;l<=f;++l)!(l<f&&n(u=o[l],l,o))===c&&((c=!c)?i.lineStart():i.lineEnd()),c&&i.point(+t(u,l,o),+e(u,l,o));if(s)return i=null,s+""||null}return t="function"==typeof t?t:void 0===t?Ao:Xi(t),e="function"==typeof e?e:void 0===e?bo:Xi(e),o.x=function(e){return arguments.length?(t="function"==typeof e?e:Xi(+e),o):t},o.y=function(t){return arguments.length?(e="function"==typeof t?t:Xi(+t),o):e},o.defined=function(t){return arguments.length?(n="function"==typeof t?t:Xi(!!t),o):n},o.curve=function(t){return arguments.length?(a=t,null!=r&&(i=a(r)),o):a},o.context=function(t){return arguments.length?(null==t?r=i=null:i=a(r=t),o):r},o}().defined((function(t){return null!==t.value})).x((function(e){return t.xScale(e.date)})).y((function(t){return i(t.value)})),a=t.dataArea.append("path").attr("class","tracker-line").style("stroke-width",n.lineWidth[r.getId()]);n.fillGap[r.getId()]?a.datum(Array.from(r).filter((function(t){return null!==t.value}))).attr("d",e):a.datum(r).attr("d",e),n.lineColor[r.getId()]&&a.style("stroke",n.lineColor[r.getId()])}}function _l(t,e,n,r,a){if(!e||!n)return;let i=null;if("left"===a?i=t.leftYScale:"right"===a&&(i=t.rightYScale),n.showPoint[r.getId()]){let a=t.dataArea.selectAll("dot").data(Array.from(r).filter((function(t){return null!==t.value}))).enter().append("circle").attr("r",n.pointSize[r.getId()]).attr("cx",(function(e){return t.xScale(e.date)})).attr("cy",(function(t){return i(t.value)})).attr("date",(function(t){return Ta("%y-%m-%d")(t.date)})).attr("value",(function(t){if(null!==t.value)return Number.isInteger(t.value)?t.value.toFixed(0):t.value.toFixed(2)})).attr("valueType",Zi[r.valueType]).attr("class","tracker-dot");if(n.pointColor[r.getId()]&&(a.style("fill",n.pointColor[r.getId()]),n.pointBorderColor[r.getId()]&&n.pointBorderWidth[r.getId()]>0&&(a.style("stroke",n.pointBorderColor[r.getId()]),a.style("stroke-width",n.pointBorderWidth[r.getId()]))),n.allowInspectData){let n=t.svg.append("g").style("opacity",0);n.append("rect").attr("width",e.tooltipSize.width).attr("height",e.tooltipSize.height).attr("class","tracker-tooltip");let r=n.append("text").attr("width",e.tooltipSize.width).attr("height",e.tooltipSize.height).attr("class","tracker-tooltip-label"),i=r.append("tspan").attr("x",4).attr("y",e.tooltipSize.height/5*2),o=r.append("tspan").attr("x",4).attr("y",e.tooltipSize.height/5*4);a.on("mouseenter",(function(t){i.text("date:"+Xt(this).attr("date"));let r=Xt(this).attr("valueType"),a=Xt(this).attr("value");if("Time"===r){let t=window.moment("00:00","HH:mm",!0).add(parseFloat(a),"seconds").format("HH:mm");o.text("value:"+t)}else o.text("value:"+a);const[l,u]=function(t,e){if(t=function(t){let e;for(;e=t.sourceEvent;)t=e;return t}(t),void 0===e&&(e=t.currentTarget),e){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}if(e.getBoundingClientRect){var a=e.getBoundingClientRect();return[t.clientX-a.left-e.clientLeft,t.clientY-a.top-e.clientTop]}}return[t.pageX,t.pageY]}(t);l<e.dataAreaSize.width/2?n.attr("transform","translate("+(l+1.3*e.tooltipSize.width)+","+(u-1*e.tooltipSize.height)+")"):n.attr("transform","translate("+(l-0*e.tooltipSize.width)+","+(u-1*e.tooltipSize.height)+")"),n.transition().duration(200).style("opacity",1)})).on("mouseleave",(function(){n.transition().duration(500).style("opacity",0)}))}}}function Sl(t,e,n,r,a,i,o){if(!e||!n)return;let l=e.dataAreaSize.width/r.getLength(),u=l;l-1>0&&(u=l-1),u/=o;let s=null;"left"===a?s=t.leftYScale:"right"===a&&(s=t.rightYScale);let f=t.dataArea.selectAll("bar").data(Array.from(r).filter((function(t){return null!==t.value}))).enter().append("rect").attr("x",(function(e,n){if(0===n){let n=i+1-o/2;if(n<1)return t.xScale(e.date)-l/2+i*u+n*u}return t.xScale(e.date)-l/2+i*u})).attr("y",(function(t){return s(Math.max(t.value,0))})).attr("width",(function(t,e){if(0===e){let t=i+1-o/2;return t<0?0:t<1?u*t:u}if(e===r.getLength()-1){let t=1-(i+1-o/2);return t<0?0:t<1?u*t:u}return u})).attr("height",(function(t){if(null!==t.value)return Math.abs(s(t.value)-s(0))})).attr("class","tracker-bar");n.barColor[r.getId()]&&f.style("fill",n.barColor[r.getId()])}function El(t,e,n){let r=t.svg;t.graphArea;let a=t.dataArea,i=t.title,o=t.xAxis,l=t.leftYAxis,u=t.rightYAxis,s=0;i&&(s=parseFloat(i.attr("height")));let f=parseFloat(o.attr("height")),c=0;l&&(c=parseFloat(l.attr("width")));let h=0;u&&(h=parseFloat(u.attr("width")));let d=e.datasets,g=d.getXDatasetIds(),p=d.getNames(),y=p.map((function(t){return Jo(t,"tracker-legend-label")})),v=0,w=0;for(let t=0;t<p.length;t++)g.includes(t)||y[t].width>w&&(w=y[t].width,v=t);let x=w/p[v].length,A=y[v].height,b=p.length-g.length,D=2*x,M=A,C=2*x,T=0,k=0;"vertical"===n.legendOrientation?(T=3*D+C+w,k=(b+1)*M):"horizontal"===n.legendOrientation&&(T=(2*D+C)*b+D+m(y,(function(t,e){return g.includes(e)?0:t.width})),k=M+A);let F=0,_=0;if("top"===n.legendPosition)F=c+e.dataAreaSize.width/2-T/2,_=s,Ko(r,0,k+M),tl(a,0,k+M);else if("bottom"===n.legendPosition)F=c+e.dataAreaSize.width/2-T/2,_=s+e.dataAreaSize.height+f+M,Ko(r,0,k+M);else if("left"===n.legendPosition)F=0,_=s+e.dataAreaSize.height/2-k/2,Ko(r,T+D,0),tl(a,T+D,0);else{if("right"!==n.legendPosition)return;F=e.dataAreaSize.width+c+h+D,_=s+e.dataAreaSize.height/2-k/2,Ko(r,T+D,0)}let S=t.graphArea.append("g").attr("id","legend").attr("transform","translate("+F+","+_+")"),E=S.append("rect").attr("class","tracker-legend").attr("width",T).attr("height",k);n.legendBgColor&&E.style("fill",n.legendBgColor),n.legendBorderColor&&E.style("stroke",n.legendBorderColor);let B=D,N=A,I=B+D+C,L=N;if("vertical"===n.legendOrientation){n.GetGraphType()===Gi.Line?(S.selectAll("markers").data(p).enter().append("line").attr("x1",B).attr("x2",B+C).attr("y1",(function(t,e){let n=g.filter((t=>t<e)).length;return N+(e-=n)*M})).attr("y2",(function(t,e){let n=g.filter((t=>t<e)).length;return N+(e-=n)*M})).style("stroke",(function(t,e){if(!g.includes(e))return n.lineColor[e]})),S.selectAll("markers").data(p).enter().append("circle").attr("cx",B+C/2).attr("cy",(function(t,e){let n=g.filter((t=>t<e)).length;return N+(e-=n)*M})).attr("r",(function(t,e){if(!g.includes(e))return n.showPoint[e]?n.pointSize[e]:0})).style("fill",(function(t,e){if(!g.includes(e))return n.pointColor[e]}))):n.GetGraphType()===Gi.Bar&&S.selectAll("markers").data(p).enter().append("rect").attr("x",B).attr("y",(function(t,e){let n=g.filter((t=>t<e)).length;return N+(e-=n)*M-A/2})).attr("width",C).attr("height",A).style("fill",(function(t,e){if(!g.includes(e))return n.barColor[e]}));let t=S.selectAll("labels").data(p).enter().append("text").attr("x",I).attr("y",(function(t,e){let n=g.filter((t=>t<e)).length;return L+(e-=n)*M})).text((function(t,e){return g.includes(e)?"":t})).style("alignment-baseline","middle").attr("class","tracker-legend-label");n.GetGraphType()===Gi.Line?t.style("fill",(function(t,e){if(!g.includes(e))return n.lineColor[e]})):n.GetGraphType()===Gi.Bar&&t.style("fill",(function(t,e){if(!g.includes(e))return n.barColor[e]}))}else if("horizontal"===n.legendOrientation){let t=0,e=0;n.GetGraphType()===Gi.Line?(S.selectAll("markers").data(p).enter().append("line").attr("x1",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=B:t+=y[n].width+D+C+D,t})).attr("x2",(function(t,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?e=B+C:e+=y[n].width+D+C+D,e})).attr("y1",N).attr("y2",N).style("stroke",(function(t,e){if(!g.includes(e))return n.lineColor[e]})),t=0,S.selectAll("markers").data(p).enter().append("circle").attr("cx",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=B+C/2:t+=y[n].width+D+C+D,t})).attr("cy",N).attr("r",(function(t,e){if(!g.includes(e))return n.showPoint[e]?n.pointSize[e]:0})).style("fill",(function(t,e){if(!g.includes(e))return n.pointColor[e]}))):n.GetGraphType()===Gi.Bar&&(t=0,S.selectAll("markers").data(p.filter(((t,e)=>!g.includes(e)))).enter().append("rect").attr("x",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=B:t+=y[n].width+D+C+D,t})).attr("y",N-A/2).attr("width",C).attr("height",A).style("fill",(function(t,e){if(!g.includes(e))return n.barColor[e]}))),t=0;let r=S.selectAll("labels").data(p).enter().append("text").attr("x",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=I:t+=y[n].width+D+C+D,t})).attr("y",L).text((function(t,e){return g.includes(e)?"":t})).style("alignment-baseline","middle").attr("class","tracker-legend-label");n.GetGraphType()===Gi.Line?r.style("fill",(function(t,e){if(!g.includes(e))return n.lineColor[e]})):n.GetGraphType()===Gi.Bar&&r.style("fill",(function(t,e){if(!g.includes(e))return n.barColor[e]}))}}function Bl(t,e,n){if(!e||!n)return;if(!n.title)return;let r=Jo(n.title,"tracker-title"),a=t.graphArea.append("text").text(n.title).attr("id","title").attr("transform","translate("+e.dataAreaSize.width/2+","+r.height/2+")").attr("height",r.height).attr("class","tracker-title");t.title=a,Ko(t.svg,0,r.height),Ko(t.graphArea,0,r.height),tl(t.dataArea,0,r.height)}function Nl(t,e,n){let r=Xt(t),a=e.svg,i=parseFloat(a.attr("width")),o=parseFloat(a.attr("height"));a.attr("width",null).attr("height",null).attr("viewBox",`0 0 ${i} ${o}`).attr("preserveAspectRatio","xMidYMid meet"),n.fitPanelWidth?r.style("width","100%"):(r.style("width",(i*n.fixedScale).toString()+"px"),r.style("height",(o*n.fixedScale).toString()+"px"))}function Il(t,e){let n={},r=Xt(t).append("svg").attr("id","svg").attr("width",e.dataAreaSize.width+e.margin.left+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.top+e.margin.bottom);n.svg=r;let a=r.append("g").attr("id","graphArea").attr("transform","translate("+e.margin.left+","+e.margin.top+")").attr("width",e.dataAreaSize.width+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.bottom);n.graphArea=a;let i=a.append("g").attr("id","dataArea").attr("width",e.dataAreaSize.width).attr("height",e.dataAreaSize.height);return n.dataArea=i,n}function Ll(t,e,n){if(!e||!n)return;let r=Il(t,e);Bl(r,e,n),Tl(r,e,n);let a=[],i=[],o=e.datasets.getXDatasetIds();for(let t=0;t<n.yAxisLocation.length;t++){if(o.includes(t))continue;let e=n.yAxisLocation[t];"left"===e.toLowerCase()?a.push(t):"right"===e.toLocaleLowerCase()&&i.push(t)}let l=kl(r,e,n,"left",a);if("string"==typeof l)return l;if(r.leftYAxis&&r.leftYScale)for(let t of a){let a=e.datasets.getDatasetById(t);a.getQuery().usedAsXDataset||(Fl(r,e,n,a,"left"),_l(r,e,n,a,"left"))}let u=kl(r,e,n,"right",i);if("string"==typeof u)return u;if(r.rightYAxis&&r.rightYScale)for(let t of i){let a=e.datasets.getDatasetById(t);a.getQuery().usedAsXDataset||(Fl(r,e,n,a,"right"),_l(r,e,n,a,"right"))}n.showLegend&&El(r,e,n),Nl(t,r,e)}function Vl(t,e,n){if(!e||!n)return;let r=Il(t,e);Bl(r,e,n),Tl(r,e,n);let a=[],i=[],o=e.datasets.getXDatasetIds();for(let t=0;t<n.yAxisLocation.length;t++){if(o.includes(t))continue;let e=n.yAxisLocation[t];"left"===e.toLowerCase()?a.push(t):"right"===e.toLocaleLowerCase()&&i.push(t)}let l=kl(r,e,n,"left",a);if("string"==typeof l)return l;let u=a.length+i.length,s=0;if(r.leftYAxis&&r.leftYScale)for(let t of a){let a=e.datasets.getDatasetById(t);a.getQuery().usedAsXDataset||(Sl(r,e,n,a,"left",s,u),s++)}let f=kl(r,e,n,"right",i);if("string"==typeof f)return f;if(r.rightYAxis&&r.rightYScale)for(let t of i){let a=e.datasets.getDatasetById(t);a.getQuery().usedAsXDataset||(Sl(r,e,n,a,"right",s,u),s++)}n.showLegend&&El(r,e,n),Nl(t,r,e)}function Pl(t,e){Xt(t).select("#svg").remove(),Xt(t).append("div").text(e).style("background-color","white").style("margin-bottom","20px").style("padding","10px").style("color","red")}function zl(t){switch(t=t.trim().toLowerCase()){case"true":case"1":case"on":case"yes":return!0;case"false":case"0":case"off":case"no":return!1}return null}function Yl(t){return"tag"===t.toLowerCase()||"text"===t.toLowerCase()||"frontmatter"===t.toLowerCase()||"wiki"===t.toLowerCase()||"dvfield"===t.toLowerCase()||"table"===t.toLowerCase()||"filemeta"===t.toLowerCase()||"task"===t.toLowerCase()||"task.all"===t.toLowerCase()||"task.done"===t.toLowerCase()||"task.notdone"===t.toLowerCase()}function Ul(t){return"left"===t||"right"===t||"none"===t}function Ol(t){return!0}function Rl(t,e,n,r,a){let i=[],o="",l=0;for(;n>i.length;)i.push(r);if(null==e);else if("object"==typeof e&&null!==e){if(Array.isArray(e)){if(e.length>n)return o="Too many inputs for parameter '"+t+"'",o;if(0===e.length)return o="Empty array not allowd for "+t,o;for(let n=0;n<i.length;n++)if(n<e.length){let a=e[n],u=null;if(n>0&&(u=e[n-1].trim()),"string"==typeof a){if(a=a.trim(),""!==a){o="Invalid inputs for "+t;break}i[n]=null!==u?u:r}else{if("boolean"!=typeof a){o="Invalid inputs for "+t;break}i[n]=a,l++}}else{let t=e[e.length-1];i[n]=l>0?t:r}}}else if("string"==typeof e){let a=e.split(",");if(a.length>1){if(a.length>n)return o="Too many inputs for parameter '"+t+"'",o;for(let e=0;e<i.length;e++)if(e<a.length){let n=a[e].trim(),u=null;if(e>0&&(u=zl(a[e-1].trim())),""===n)i[e]=null!==u?u:r;else{let r=zl(n);if(null===r){o="Invalid inputs for "+t;break}i[e]=r,l++}}else{let t=zl(a[a.length-1].trim());i[e]=l>0&&null!==t?t:r}}else if(""===e);else{let n=zl(e);if(null!==n){i[0]=n,l++;for(let t=1;t<i.length;t++)i[t]=n}else o="Invalid inputs for "+t}}else if("boolean"==typeof e){i[0]=e,l++;for(let t=1;t<i.length;t++)i[t]=e}else o="Invalid inputs for "+t;return a||0!==l||(o="No valid input for "+t),""!==o?o:i}function Hl(t,e,n,r,a){let i=[],o="",l=0;for(;n>i.length;)i.push(r);if(null==e);else if("object"==typeof e&&null!==e){if(Array.isArray(e)){if(e.length>n)return o="Too many inputs for parameter '"+t+"'",o;if(0===e.length)return o="Empty array not allowd for "+t,o;for(let n=0;n<i.length;n++)if(n<e.length){let a=e[n],u=null;if(n>0&&(u=e[n-1].trim()),"string"==typeof a){if(a=a.trim(),""!==a){o="Invalid inputs for "+t;break}i[n]=null!==u?u:r}else{if("number"!=typeof a){o="Invalid inputs for "+t;break}i[n]=a,l++}}else{let t=e[e.length-1];i[n]=l>0?t:r}}}else if("string"==typeof e){let a=e.split(",");if(a.length>1){if(a.length>n)return o="Too many inputs for parameter '"+t+"'",o;for(let n=0;n<i.length;n++)if(n<a.length){let e=a[n].trim(),u=null;if(n>0&&(u=Qo(a[n-1].trim()).value),""===e)null!==u&&Number.isNumber(u)?i[n]=u:i[n]=r;else{let r=Qo(e).value;if(!Number.isNumber(r)){o="Invalid inputs for "+t;break}i[n]=r,l++}}else{let t=Qo(a[e.length-1].trim()).value;l>0&&Number.isNumber(t)?i[n]=t:i[n]=r}}else if(""===e);else{let n=Qo(e).value;if(Number.isNumber(n)){i[0]=n,l++;for(let t=1;t<i.length;t++)i[t]=n}else o="Invalid inputs for "+t}}else if("number"==typeof e)if(Number.isNumber(e)){i[0]=e,l++;for(let t=1;t<i.length;t++)i[t]=e}else o="Invalid inputs for "+t;else o="Invalid inputs for "+t;return a||0!==l||(o="No valid input for "+t),""!==o?o:i}function Wl(t,e,n,r,a,i){let o=[],l="",u=0;for(;n>o.length;)o.push(r);if(null==e);else if("object"==typeof e&&null!==e){if(Array.isArray(e)){if(e.length>n)return l="Too many inputs for parameter '"+t+"'",l;if(0===e.length)return l="Empty array not allowd for "+t,l;for(let n=0;n<o.length;n++)if(n<e.length){let i=e[n],s=null;if(n>0&&(s=e[n-1].trim()),"string"!=typeof i){l="Invalid inputs for "+t;break}if(i=i.trim(),""===i)o[n]=null!==s?s:r;else if(a){if(!a(i)){l="Invalid inputs for "+t;break}o[n]=i,u++}else o[n]=i,u++}else{let t=e[e.length-1].trim();o[n]=u>0?t:r}}}else if("string"==typeof e){let i=e.split(",");if(i.length>1){if(i.length>n)return l="Too many inputs for parameter '"+t+"'",l;for(let e=0;e<o.length;e++)if(e<i.length){let n=i[e].trim(),s=null;if(e>0&&(s=i[e-1].trim()),""===n)o[e]=null!==s?s:r;else if(a){if(!a(n)){l="Invalid inputs for "+t;break}o[e]=n,u++}else o[e]=n,u++}else{let t=i[i.length-1].trim();o[e]=u>0?t:r}}else if(""===e);else if(a)if(a(e)){o[0]=e,u++;for(let t=1;t<o.length;t++)o[t]=e}else l="Invalid inputs for "+t;else{o[0]=e,u++;for(let t=1;t<o.length;t++)o[t]=e}}else l="Invalid inputs for "+t;return i||0!==u||(l="No valid input for "+t),""!==l?l:o}function ql(t,e){let n=[];if(null==e)return n;if("object"==typeof e){if(Array.isArray(e))for(let r of e)if("string"==typeof r){let e=parseFloat(r);if(!Number.isNumber(e)){return`Parameter '${t}' accepts only numbers`}n.push(e)}}else if("string"==typeof e){let r=e.split(",");if(r.length>1)for(let e of r){let r=parseFloat(e.trim());if(Number.isNaN(r)){return`Parameter '${t}' accepts only numbers`}n.push(r)}else{if(""===e){return`Empty ${t} is not allowed.`}{let r=parseFloat(e);if(!Number.isNumber(r)){return`Parameter '${t}' accepts only numbers`}n.push(r)}}}else{if("number"!=typeof e){return`Invalid ${t}`}n.push(e)}return n}function $l(t,e){let n=[];if(null==e)return n;if("object"==typeof e){if(Array.isArray(e))for(let t of e)"string"==typeof t&&n.push(t)}else{if("string"!=typeof e){return`Invalid ${t}`}{let r=e.split(",");if(r.length>1)for(let t of r)n.push(t);else{if(""===e){return`Empty ${t} is not allowed.`}n.push(e)}}}return n}function Xl(t,e){t&&("string"==typeof t.title&&(e.title=t.title),"string"==typeof t.xAxisLabel&&(e.xAxisLabel=t.xAxisLabel),"string"==typeof t.xAxisColor&&(e.xAxisColor=t.xAxisColor),"string"==typeof t.xAxisLabelColor&&(e.xAxisLabelColor=t.xAxisLabelColor),"boolean"==typeof t.allowInspectData&&(e.allowInspectData=t.allowInspectData),"boolean"==typeof t.showLegend&&(e.showLegend=t.showLegend),"string"==typeof t.legendPosition?e.legendPosition=t.legendPosition:e.legendPosition="bottom","string"==typeof t.legendOrientation?e.legendOrientation=t.legendOrientation:"top"===e.legendPosition||"bottom"===e.legendPosition?e.legendOrientation="horizontal":"left"===e.legendPosition||"right"===e.legendPosition?e.legendOrientation="vertical":e.legendOrientation="horizontal","string"==typeof t.legendBgColor&&(e.legendBgColor=t.legendBgColor),"string"==typeof t.legendBorderColor&&(e.legendBorderColor=t.legendBorderColor));let n=Wl("yAxisLabel",null==t?void 0:t.yAxisLabel,2,"Value",null,!0);if("string"==typeof n)return n;if(n.length>2)return"yAxisLabel accepts not more than two values for left and right y-axes";e.yAxisLabel=n;let r=Wl("yAxisColor",null==t?void 0:t.yAxisColor,2,"",Ol,!0);if("string"==typeof r)return r;if(r.length>2)return"yAxisColor accepts not more than two values for left and right y-axes";e.yAxisColor=r;let a=Wl("yAxisLabelColor",null==t?void 0:t.yAxisLabelColor,2,"",Ol,!0);if("string"==typeof a)return a;if(a.length>2)return"yAxisLabelColor accepts not more than two values for left and right y-axes";e.yAxisLabelColor=a;let i=Wl("yAxisUnit",null==t?void 0:t.yAxisUnit,2,"",null,!0);if("string"==typeof i)return i;if(i.length>2)return"yAxisUnit accepts not more than two values for left and right y-axes";e.yAxisUnit=i;let o=Hl("yMin",null==t?void 0:t.yMin,2,null,!0);if("string"==typeof o)return o;if(o.length>2)return"yMin accepts not more than two values for left and right y-axes";e.yMin=o;let l=Hl("yMax",null==t?void 0:t.yMax,2,null,!0);if("string"==typeof l)return l;if(l.length>2)return"yMax accepts not more than two values for left and right y-axes";e.yMax=l;let u=Rl("reverseYAxis",null==t?void 0:t.reverseYAxis,2,!1,!0);return"string"==typeof u?u:u.length>2?"reverseYAxis accepts not more than two values for left and right y-axes":void(e.reverseYAxis=u)}function jl(t){let e=[];if(null!==t){const n=Object.keys(t);for(let t of n)e.push(t.toString())}return e}function Gl(t,e){let n=t.basename;return e.dateFormatPrefix&&n.startsWith(e.dateFormatPrefix)&&(n=n.slice(e.dateFormatPrefix.length)),e.dateFormatSuffix&&n.endsWith(e.dateFormatSuffix)&&(n=n.slice(0,n.length-e.dateFormatSuffix.length)),Wo(n,e.dateFormat)}function Zl(t,e,n){let r=window.moment(""),a=t.frontmatter;if(a&&Go(a,e.getTarget())){r=Wo(Go(a,e.getTarget()),n.dateFormat)}return r}function Ql(t,e,n){let r=window.moment(""),a=e.getTarget();e.getParentTarget()&&(a=e.getParentTarget());let i,o=new RegExp("(^|\\s)#"+a+"(\\/[\\w-]+)*(:(?<values>[\\d\\.\\/-]*)[a-zA-Z]*)?([\\.!,\\?;~-]*)?(\\s|$)","gm");for(;i=o.exec(t);)if(void 0!==i.groups&&void 0!==i.groups.values){if(r=Wo(i.groups.values,n.dateFormat),r.isValid())break}return r}function Jl(t,e,n){let r,a=window.moment(""),i=e.getTarget(),o=new RegExp(i,"gm");for(;r=o.exec(t);)if(void 0!==r.groups&&void 0!==r.groups.value){if(a=Wo(r.groups.value.trim(),n.dateFormat),a.isValid())break}return a}function Kl(t,e,n){let r=window.moment(""),a=e.getTarget();e.getParentTarget()&&(a=e.getParentTarget()),a=a.replace("-","[\\s\\-]");let i,o=new RegExp("(^|\\s)\\*{0,2}"+a+"\\*{0,2}(::\\s*(?<values>[\\d\\.\\/\\-\\w,@;\\s]*))(\r?\n|\r)","gm");for(;i=o.exec(t);)if(void 0!==i.groups&&void 0!==i.groups.values){if(r=Wo(i.groups.values.trim(),n.dateFormat),r.isValid())break}return r}function tu(e,n,r){let a=window.moment("");if(e&&e instanceof t.TFile){let t=n.getTarget();if("cDate"===t){a=Xo(e.stat.ctime,r.dateFormat)}else if("mDate"===t){a=Xo(e.stat.mtime,r.dateFormat)}}return a}function eu(t,e,n){let r=window.moment(""),a=e.getType(),i=e.getTarget();i=a===ji.Task?"\\[[\\sx]\\]\\s"+i:a===ji.TaskDone?"\\[x\\]\\s"+i:a===ji.TaskNotDone?"\\[\\s\\]\\s"+i:"\\[[\\sx]\\]\\s"+i;let o,l=new RegExp(i,"gm");for(;o=l.exec(t);)if(void 0!==o.groups&&void 0!==o.groups.value){if(r=Wo(o.groups.value.trim(),n.dateFormat),r.isValid())break}return r}function nu(t,e,n,r){if(t.has(e)){t.get(e).push({query:n,value:r})}else{let a=new Array;a.push({query:n,value:r}),t.set(e,a)}}function ru(e,n,r,a,i,o){if(e&&e instanceof t.TFile){let t=r.getTarget(),l=o.get(a.xDataset[r.getId()]);if("cDate"===t){let t=e.stat.ctime;r.valueType=Zi.Date,r.addNumTargets(),nu(i,l,r,t)}else if("mDate"===t){let t=e.stat.mtime;r.valueType=Zi.Date,r.addNumTargets(),nu(i,l,r,t)}else if("size"===t){let t=e.stat.size;r.addNumTargets(),nu(i,l,r,t)}else if("numWords"===t){nu(i,l,r,function(t){t=el(t);var e=new RegExp(["(?:[0-9]+(?:(?:,|\\.)[0-9]+)*|[\\-"+/A-Za-z\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC/.source+"])+",/[\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u4E00-\u9FD5]{1}/.source].join("|"),"g");return(t.match(e)||[]).length}(n))}else if("numChars"===t){let t=n.length;r.addNumTargets(),nu(i,l,r,t)}else if("numSentences"===t){let t=function(t){return(((t=el(t))||"").match(/[^.。!！?？\s][^.。!！?？]*(?:[.!?](?!['‘’"“”「」『』]?\s|$)[^.。!！?？]*)*[.。!！?？]?['’"”」』]?(?=\s||$)/gm)||[]).length}(n);r.addNumTargets(),nu(i,l,r,t)}}}const au={folder:"/",dateFormat:"YYYY-MM-DD"};class iu extends t.PluginSettingTab{constructor(t,e){super(t,e),this.plugin=e}display(){let{containerEl:n}=this;n.empty(),new t.Setting(n).setName("Default folder location").setDesc("Files in this folder will be parsed and used as input data of the tracker plugin.\nYou can also override it using 'folder' argument int the tracker codeblock.").addText((t=>t.setPlaceholder("Folder Path").setValue(this.plugin.settings.folder).onChange((t=>e(this,void 0,void 0,(function*(){this.plugin.settings.folder=t,yield this.plugin.saveSettings()})))))),new t.Setting(n).setName("Default date format").setDesc("This format is used to parse the date in your diary title.\nYou can also override it using 'date-format' argument in the tracker codeblock.").addText((t=>t.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange((t=>e(this,void 0,void 0,(function*(){this.plugin.settings.dateFormat=t,yield this.plugin.saveSettings()}))))))}}class ou extends t.Plugin{onload(){return e(this,void 0,void 0,(function*(){console.log("loading obsidian-tracker plugin"),yield this.loadSettings(),this.addSettingTab(new iu(this.app,this)),this.registerMarkdownCodeBlockProcessor("tracker",this.postprocessor.bind(this)),this.addCommand({id:"add-line-chart-tracker",name:"Add Line Chart Tracker",callback:()=>this.addCodeBlock(Gi.Line)}),this.addCommand({id:"add-bar-chart-tracker",name:"Add Bar Chart Tracker",callback:()=>this.addCodeBlock(Gi.Bar)}),this.addCommand({id:"add-summary-tracker",name:"Add Summary Tracker",callback:()=>this.addCodeBlock(Gi.Summary)})}))}loadSettings(){return e(this,void 0,void 0,(function*(){this.settings=Object.assign({},au,yield this.loadData())}))}saveSettings(){return e(this,void 0,void 0,(function*(){yield this.saveData(this.settings)}))}onunload(){console.log("unloading obsidian-tracker plugin")}getFilesInFolder(e,n=!0){let r=[];for(let a of e.children)a instanceof t.TFile?"md"===a.extension&&r.push(a):a instanceof t.TFolder&&n&&(r=r.concat(this.getFilesInFolder(a)));return r}getFiles(e,n=!0){let r=[],a=this.app.vault.getAbstractFileByPath(t.normalizePath(e));return a&&a instanceof t.TFolder&&(r=r.concat(this.getFilesInFolder(a))),r}postprocessor(n,r,a){return e(this,void 0,void 0,(function*(){const a=document.createElement("div");let i=function(e,n){let r;try{r=t.parseYaml(e)}catch(t){let e="Error parsing YAML";return console.log(t),e}if(!r)return"Error parsing YAML";let a=jl(r),i="";if(!a.includes("searchTarget"))return"Parameter 'searchTarget' not found in YAML";let o=[];if("object"==typeof r.searchTarget&&null!==r.searchTarget){if(Array.isArray(r.searchTarget))for(let t of r.searchTarget)if("string"==typeof t){if(""===t){i="Empty search target is not allowed.";break}o.push(t)}}else if("string"==typeof r.searchTarget){let t=r.searchTarget.split(",");if(t.length>1)for(let e of t){if(e=e.trim(),""===e){i="Empty search target is not allowed.";break}o.push(e)}else""===r.searchTarget?i="Empty search target is not allowed.":o.push(r.searchTarget)}else i="Invalid search target (searchTarget)";if(""!==i)return i;let l=o.length;if(!a.includes("searchType"))return"Parameter 'searchType' not found in YAML";let u=[],s=Wl("searchType",r.searchType,l,"",Yl,!1);if("string"==typeof s)return s;for(let t of s)switch(t.toLowerCase()){case"tag":u.push(ji.Tag);break;case"frontmatter":u.push(ji.Frontmatter);break;case"wiki":u.push(ji.Wiki);break;case"text":u.push(ji.Text);break;case"dvfield":u.push(ji.dvField);break;case"table":u.push(ji.Table);break;case"filemeta":u.push(ji.FileMeta);break;case"task":case"task.all":u.push(ji.Task);break;case"task.done":u.push(ji.TaskDone);break;case"task.notdone":u.push(ji.TaskNotDone)}if(u.includes(ji.Table)&&u.filter((t=>t!==ji.Table)).length>0)return"searchType 'table' doestn't work with other types for now";let f=[],c=Wl("separator",r.separator,l,"/",null,!0);if("string"==typeof c)return c;f=c.map((t=>"comma"===t?",":t));let h=Hl("xDataset",r.xDataset,l,-1,!0);if("string"==typeof h)return h;let d=h.map((t=>t<0||t>=l?-1:t)),g=[];for(let t=0;t<o.length;t++){let e=new To(g.length,u[t],o[t]);e.setSeparator(f[t]),d.includes(t)&&(e.usedAsXDataset=!0),g.push(e)}let p=new _o(g),y=jl(p),m=["searchType","searchTarget","separator"],v=[],w=[],x=[],A=[],b=[],D=[],M=[];for(let t of a)/^line[0-9]*$/.test(t)&&(v.push(t),m.push(t)),/^bar[0-9]*$/.test(t)&&(w.push(t),m.push(t)),/^pie[0-9]*$/.test(t)&&(x.push(t),m.push(t)),/^summary[0-9]*$/.test(t)&&(A.push(t),m.push(t)),/^bullet[0-9]*$/.test(t)&&(M.push(t),m.push(t)),/^month[0-9]*$/.test(t)&&(b.push(t),m.push(t)),/^heatmap[0-9]*$/.test(t)&&(D.push(t),m.push(t));let C=[];for(let t of a)if(/^dataset[0-9]*$/.test(t)){let e=-1,n=t.replace("dataset","");if(e=""===n?0:parseFloat(n),g.some((t=>t.getId()===e)))return i="Duplicated dataset id for key '"+t+"'",i;C.push(t),m.push(t)}for(let t of a)if(!y.includes(t)&&!m.includes(t))return i="'"+t+"' is not an available key",i;if(0===v.length+w.length+x.length+A.length+M.length+b.length+D.length)return"No output parameter provided, please place line, bar, pie, month, bullet, or summary.";"string"==typeof r.folder?""===r.folder?p.folder=n.settings.folder:p.folder=r.folder:p.folder=n.settings.folder;let T=n.app.vault.getAbstractFileByPath(t.normalizePath(p.folder));if(!(T&&T instanceof t.TFolder))return"Folder '"+p.folder+"' doesn't exist";const k=r.dateFormat;if("string"==typeof r.dateFormat?""===r.dateFormat?p.dateFormat=n.settings.dateFormat:p.dateFormat=k:p.dateFormat=n.settings.dateFormat,"string"==typeof r.dateFormatPrefix&&(p.dateFormatPrefix=r.dateFormatPrefix),"string"==typeof r.dateFormatSuffix&&(p.dateFormatSuffix=r.dateFormatSuffix),"string"==typeof r.startDate){let t=r.startDate;p.dateFormatPrefix&&t.startsWith(p.dateFormatPrefix)&&(t=t.slice(p.dateFormatPrefix.length)),p.dateFormatSuffix&&t.endsWith(p.dateFormatSuffix)&&(t=t.slice(0,t.length-p.dateFormatSuffix.length));let e=null,n=!1;if(e=qo(t,p.dateFormat),e?n=!0:(e=Wo(t,p.dateFormat),e.isValid()&&(n=!0)),!n||null===e)return"Invalid startDate, the format of startDate may not match your dateFormat "+p.dateFormat;p.startDate=e}if("string"==typeof r.endDate){let t=r.endDate;p.dateFormatPrefix&&t.startsWith(p.dateFormatPrefix)&&(t=t.slice(p.dateFormatPrefix.length)),p.dateFormatSuffix&&t.endsWith(p.dateFormatSuffix)&&(t=t.slice(0,t.length-p.dateFormatSuffix.length));let e=null,n=!1;if(e=qo(t,p.dateFormat),e?n=!0:(e=Wo(t,p.dateFormat),e.isValid()&&(n=!0)),!n||null===e)return"Invalid endDate, the format of endDate may not match your dateFormat "+p.dateFormat;p.endDate=e}if(null!==p.startDate&&p.startDate.isValid()&&null!==p.endDate&&p.endDate.isValid()&&p.endDate<p.startDate)return"Invalid date range (startDate larger than endDate)";p.xDataset=d;let F=Wl("datasetName",r.datasetName,l,"untitled",null,!0);if("string"==typeof F)return F;let _=0;for(let t=0;t<F.length;t++)p.xDataset.includes(t)||"untitled"===F[t]&&(F[t]="untitled"+_.toString(),_++);if(new Set(F).size!==F.length)return"Not enough dataset names or duplicated names";p.datasetName=F;let S=Hl("constValue",r.constValue,l,1,!0);if("string"==typeof S)return S;p.constValue=S;let E=Rl("ignoreAttachedValue",r.ignoreAttachedValue,l,!1,!0);if("string"==typeof E)return E;p.ignoreAttachedValue=E;let B=Rl("ignoreZeroValue",r.ignoreZeroValue,l,!1,!0);if("string"==typeof B)return B;p.ignoreZeroValue=B;let N=Rl("accum",r.accum,l,!1,!0);if("string"==typeof N)return N;p.accum=N;let I=Hl("penalty",r.penalty,l,null,!0);if("string"==typeof I)return I;p.penalty=I;let L=Hl("valueShift",r.valueShift,l,0,!0);if("string"==typeof L)return L;p.valueShift=L,"number"==typeof r.fixedScale&&(p.fixedScale=r.fixedScale),"boolean"==typeof r.fitPanelWidth&&(p.fitPanelWidth=r.fitPanelWidth);let V=Hl("margin",r.margin,4,10,!0);if("string"==typeof V)return V;if(V.length>4)return"margin accepts not more than four values for top, right, bottom, and left margins.";p.margin=new Uo(V[0],V[1],V[2],V[3]);for(let t of C){let e=new So,n=r[t],a=jl(e),o=jl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;let l=-1,u=t.replace("dataset","");l=""===u?0:parseFloat(u),e.id=l,"string"==typeof(null==n?void 0:n.name)&&(e.name=n.name);let s=$l("xData",null==n?void 0:n.xData);if("string"==typeof s)return s;e.xData=s;let f=e.xData.length,c=$l("yData",null==n?void 0:n.yData);if("string"==typeof c)return c;if(e.yData=c,e.yData.length!==f)return"Number of elements in xData and yData not matched";p.customDataset.push(e)}for(let t of v){let e=new Bo,n=r[t],a=jl(e),o=jl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;let u=Xl(n,e);if("string"==typeof u)return u;let s=Wl("lineColor",null==n?void 0:n.lineColor,l,"",Ol,!0);if("string"==typeof s)return s;e.lineColor=s;let f=Hl("lineWidth",null==n?void 0:n.lineWidth,l,1.5,!0);if("string"==typeof f)return f;e.lineWidth=f;let c=Rl("showLine",null==n?void 0:n.showLine,l,!0,!0);if("string"==typeof c)return c;e.showLine=c;let h=Rl("showPoint",null==n?void 0:n.showPoint,l,!0,!0);if("string"==typeof h)return h;e.showPoint=h;let d=Wl("pointColor",null==n?void 0:n.pointColor,l,"#69b3a2",Ol,!0);if("string"==typeof d)return d;e.pointColor=d;let g=Wl("pointBorderColor",null==n?void 0:n.pointBorderColor,l,"#69b3a2",Ol,!0);if("string"==typeof g)return g;e.pointBorderColor=g;let y=Hl("pointBorderWidth",null==n?void 0:n.pointBorderWidth,l,0,!0);if("string"==typeof y)return y;e.pointBorderWidth=y;let m=Hl("pointSize",null==n?void 0:n.pointSize,l,3,!0);if("string"==typeof m)return m;e.pointSize=m;let v=Rl("fillGap",null==n?void 0:n.fillGap,l,!1,!0);if("string"==typeof v)return v;e.fillGap=v;let w=Wl("yAxisLocation",null==n?void 0:n.yAxisLocation,l,"left",Ul,!0);if("string"==typeof w)return w;e.yAxisLocation=w,p.line.push(e)}for(let t of w){let e=new No,n=r[t],a=jl(e),o=jl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;let u=Xl(n,e);if("string"==typeof u)return u;let s=Wl("barColor",null==n?void 0:n.barColor,l,"",Ol,!0);if("string"==typeof s)return s;e.barColor=s;let f=Wl("yAxisLocation",null==n?void 0:n.yAxisLocation,l,"left",Ul,!0);if("string"==typeof f)return f;e.yAxisLocation=f,p.bar.push(e)}for(let t of x){let e=new Io,n=r[t],a=jl(e),o=jl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;"string"==typeof(null==n?void 0:n.title)&&(e.title=n.title);let l=$l("data",null==n?void 0:n.data);if("string"==typeof l)return l;e.data=l;let u=e.data.length,s=Wl("dataColor",null==n?void 0:n.dataColor,u,"none",Ol,!0);if("string"==typeof s)return s;e.dataColor=s;let f=Wl("dataName",null==n?void 0:n.dataName,u,"",null,!0);if("string"==typeof f)return f;e.dataName=f;let c=Wl("label",null==n?void 0:n.label,u,"",null,!0);if("string"==typeof c)return c;e.label=c,"number"==typeof(null==n?void 0:n.hideLabelLessThan)&&(e.hideLabelLessThan=n.hideLabelLessThan);let h=Wl("extLabel",null==n?void 0:n.extLabel,u,"",null,!0);if("string"==typeof h)return h;e.extLabel=h,"boolean"==typeof(null==n?void 0:n.showExtLabelOnlyIfNoLabel)&&(e.showExtLabelOnlyIfNoLabel=n.showExtLabelOnlyIfNoLabel),"number"==typeof(null==n?void 0:n.ratioInnerRadius)&&(e.ratioInnerRadius=n.ratioInnerRadius),"boolean"==typeof(null==n?void 0:n.showLegend)&&(e.showLegend=n.showLegend),"string"==typeof(null==n?void 0:n.legendPosition)?e.legendPosition=n.legendPosition:e.legendPosition="right","string"==typeof(null==n?void 0:n.legendOrientation)?e.legendOrientation=n.legendOrientation:"top"===e.legendPosition||"bottom"===e.legendPosition?e.legendOrientation="horizontal":"left"===e.legendPosition||"right"===e.legendPosition?e.legendOrientation="vertical":e.legendOrientation="horizontal","string"==typeof(null==n?void 0:n.legendBgColor)&&(e.legendBgColor=n.legendBgColor),"string"==typeof(null==n?void 0:n.legendBorderColor)&&(e.legendBorderColor=n.legendBorderColor),p.pie.push(e)}for(let t of A){let e=new Lo,n=r[t],a=jl(e),o=jl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;"string"==typeof(null==n?void 0:n.template)&&(e.template=n.template),"string"==typeof(null==n?void 0:n.style)&&(e.style=n.style),p.summary.push(e)}for(let t of b){let e=new Vo,n=r[t],a=jl(e),o=jl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;let l=ql("dataset",null==n?void 0:n.dataset);if("string"==typeof l)return l;if(0===l.length)for(let t of g)l.push(t.getId());e.dataset=l;let u=e.dataset.length;"string"==typeof(null==n?void 0:n.startWeekOn)&&(e.startWeekOn=n.startWeekOn),"boolean"==typeof(null==n?void 0:n.showCircle)&&(e.showCircle=n.showCircle);let s=ql("threshold",null==n?void 0:n.threshold);if("string"==typeof s)return s;if(e.threshold=s,0===e.threshold.length)for(let t=0;t<u;t++)e.threshold.push(0);if(e.threshold.length!==e.dataset.length)return"The number of inputs of threshold and dataset not matched";let f=ql("yMin",null==n?void 0:n.yMin);if("string"==typeof f)return f;if(e.yMin=f,0===e.yMin.length)for(let t=0;t<u;t++)e.yMin.push(null);if(e.yMin.length!==e.dataset.length)return"The number of inputs of yMin and dataset not matched";let c=ql("yMax",null==n?void 0:n.yMax);if("string"==typeof c)return c;if(e.yMax=c,0===e.yMax.length)for(let t=0;t<u;t++)e.yMax.push(null);if(e.yMax.length!==e.dataset.length)return"The number of inputs of yMin and dataset not matched";"string"==typeof(null==n?void 0:n.color)&&(e.color=n.color),"boolean"==typeof(null==n?void 0:n.dimNotInMonth)&&(e.dimNotInMonth=n.dimNotInMonth),"boolean"==typeof(null==n?void 0:n.showStreak)&&(e.showStreak=n.showStreak),"boolean"==typeof(null==n?void 0:n.showTodayRing)&&(e.showTodayRing=n.showTodayRing),"boolean"==typeof(null==n?void 0:n.showSelectedValue)&&(e.showSelectedValue=n.showSelectedValue),"boolean"==typeof(null==n?void 0:n.showSelectedRing)&&(e.showSelectedRing=n.showSelectedRing),"string"==typeof(null==n?void 0:n.circleColor)&&(e.circleColor=n.circleColor),"boolean"==typeof(null==n?void 0:n.circleColorByValue)&&(e.circleColorByValue=n.circleColorByValue),"string"==typeof(null==n?void 0:n.headerYearColor)&&(e.headerYearColor=n.headerYearColor),"string"==typeof(null==n?void 0:n.headerMonthColor)&&(e.headerMonthColor=n.headerMonthColor),"string"==typeof(null==n?void 0:n.dividingLineColor)&&(e.dividingLineColor=n.dividingLineColor),"string"==typeof(null==n?void 0:n.todayRingColor)&&(e.todayRingColor=n.todayRingColor),"string"==typeof(null==n?void 0:n.selectedRingColor)&&(e.selectedRingColor=n.selectedRingColor),"string"==typeof(null==n?void 0:n.initMonth)&&(e.initMonth=n.initMonth),p.month.push(e)}for(let t of D){let e=new Po,n=r[t],a=jl(e),o=jl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;p.heatmap.push(e)}for(let t of M){let e=new zo,n=r[t],a=jl(e),o=jl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;"string"==typeof(null==n?void 0:n.title)&&(e.title=n.title),"string"==typeof(null==n?void 0:n.dataset)&&(e.dataset=n.dataset),"string"==typeof(null==n?void 0:n.orientation)&&(e.orientation=n.orientation);let l=ql("range",null==n?void 0:n.range);if("string"==typeof l)return l;let u=l;if(1===u.length){if(u[0]<0)return i="Negative range value is not allowed",i}else{if(!(u.length>1))return i="Empty range is not allowed",i;{let t=u[0];if(t<0)return i="Negative range value is not allowed",i;for(let e=1;e<u.length;e++)if(u[e]<=t)return i="Values in parameter 'range' should be monotonically increasing",i}}e.range=u;let s=u.length,f=Wl("rangeColor",null==n?void 0:n.rangeColor,s,"",Ol,!0);if("string"==typeof f)return f;e.rangeColor=f,"string"==typeof(null==n?void 0:n.value)?e.value=n.value:"number"==typeof(null==n?void 0:n.value)&&(e.value=n.value.toString()),"string"==typeof(null==n?void 0:n.valueUnit)&&(e.valueUnit=n.valueUnit),"string"==typeof(null==n?void 0:n.valueColor)&&(e.valueColor=n.valueColor),"boolean"==typeof(null==n?void 0:n.showMarker)&&(e.showMarker=n.showMarker),"number"==typeof(null==n?void 0:n.markerValue)&&(e.markerValue=n.markerValue),"string"==typeof(null==n?void 0:n.markerColor)&&(e.markerColor=n.markerColor),p.bullet.push(e)}return p}(n.trim(),this);if("string"==typeof i){return Pl(a,i),void r.appendChild(a)}let o,l=i;try{o=this.getFiles(l.folder)}catch(t){return Pl(a,t.message),void r.appendChild(a)}let u=window.moment(""),s=window.moment(""),f=0,c=new Map;const h=o.map((t=>e(this,void 0,void 0,(function*(){let n=null;l.queries.some((t=>{let e=t.getType();return t.getTarget(),e===ji.Frontmatter||e===ji.Tag||e===ji.Wiki}))&&(n=this.app.metadataCache.getFileCache(t));let r=null;l.queries.some((t=>{let e=t.getType(),n=t.getTarget();return e===ji.Tag||e===ji.Text||e===ji.dvField||e===ji.Task||e===ji.TaskDone||e===ji.TaskNotDone||e===ji.FileMeta&&("numWords"===n||"numChars"===n||"numSentences"===n)}))&&(r=yield this.app.vault.adapter.read(t.path));let a=new Map,i=!1;for(let e of l.xDataset)if(!a.has(e)){let o=window.moment("");if(-1===e)o=Gl(t,l);else{let a=l.queries[e];switch(a.getType()){case ji.Frontmatter:o=Zl(n,a,l);break;case ji.Tag:o=Ql(r,a,l);break;case ji.Text:o=Jl(r,a,l);break;case ji.dvField:o=Kl(r,a,l);break;case ji.FileMeta:o=tu(t,a,l);break;case ji.Task:case ji.TaskDone:case ji.TaskNotDone:o=eu(r,a,l)}}o.isValid()?(null!==l.startDate&&o<l.startDate&&(i=!0),null!==l.endDate&&o>l.endDate&&(i=!0)):i=!0,i||(a.set(e,$o(o,l.dateFormat)),f++,1==f?(u=o.clone(),s=o.clone()):(o<u&&(u=o.clone()),o>s&&(s=o.clone())))}if(i)return;const o=l.queries.filter((t=>t.getType()!==ji.Table&&!t.usedAsXDataset)).map((i=>e(this,void 0,void 0,(function*(){n&&i.getType()===ji.Tag&&function(t,e,n,r,a){let i=t.frontmatter,o=[];if(i&&i.tags){let t=0,l=!1;Array.isArray(i.tags)?o=o.concat(i.tags):o.push(i.tags);for(let i of o){if(i===e.getTarget())t+=n.constValue[e.getId()],l=!0,e.addNumTargets();else{if(!i.startsWith(e.getTarget()+"/"))continue;t+=n.constValue[e.getId()],l=!0,e.addNumTargets()}let o=null;l&&(o=t),nu(r,a.get(n.xDataset[e.getId()]),e,o)}}}(n,i,l,c,a),n&&i.getType()===ji.Frontmatter&&"tags"!==i.getTarget()&&function(t,e,n,r,a){let i=t.frontmatter;if(i)if(Go(i,e.getTarget())){let t=Qo(Go(i,e.getTarget()));null!==t.value&&(t.type===Zi.Time&&(e.valueType=Zi.Time),e.addNumTargets(),nu(r,a.get(n.xDataset[e.getId()]),e,t.value))}else if(e.getParentTarget()&&Go(i,e.getParentTarget())){let t=Go(i,e.getParentTarget()),o=null;if(Array.isArray(t)?o=t.map((t=>t.toString())):"string"==typeof t&&(o=t.split(e.getSeparator())),o&&o.length>e.getAccessor()&&e.getAccessor()>=0){let t=Qo(o[e.getAccessor()].trim());null!==t.value&&(t.type===Zi.Time&&(e.valueType=Zi.Time),e.addNumTargets(),nu(r,a.get(n.xDataset[e.getId()]),e,t.value))}}}(n,i,l,c,a),n&&i.getType()===ji.Wiki&&function(t,e,n,r,a){let i=t.links,o=0,l=!1;for(let t of i)t.link===e.getTarget()&&(l=!0,o+=n.constValue[e.getId()],e.addNumTargets());let u=null;l&&(u=o),nu(r,a.get(n.xDataset[e.getId()]),e,u)}(n,i,l,c,a),r&&i.getType()===ji.Tag&&function(t,e,n,r,a){let i=e.getTarget();e.getParentTarget()&&(i=e.getParentTarget()),i.length>1&&i.startsWith("#")&&(i=i.substring(1));let o,l=new RegExp("(^|\\s)#"+i+"(\\/[\\w-]+)*(:(?<values>[\\d\\.\\/-]*)[a-zA-Z]*)?([\\.!,\\?;~-]*)?(\\s|$)","gm"),u=0,s=!1;for(;o=l.exec(t);)if(n.ignoreAttachedValue[e.getId()]||void 0===o.groups||void 0===o.groups.values)u+=n.constValue[e.getId()],s=!0,e.addNumTargets();else{let t=o.groups.values.split(e.getSeparator());if(!t)continue;if(1===t.length){let r=Qo(t[0].trim());null!==r.value&&(r.type===Zi.Time?(u=r.value,s=!0,e.valueType=Zi.Time,e.addNumTargets()):n.ignoreZeroValue[e.getId()]&&0===r.value||(u+=r.value,s=!0,e.addNumTargets()))}else if(t.length>e.getAccessor()&&e.getAccessor()>=0){let n=Qo(t[e.getAccessor()].trim());null!==n.value&&(n.type===Zi.Time?(u=n.value,s=!0,e.valueType=Zi.Time,e.addNumTargets()):(u+=n.value,s=!0,e.addNumTargets()))}}let f=null;s&&(f=u),nu(r,a.get(n.xDataset[e.getId()]),e,f)}(r,i,l,c,a),r&&i.getType()===ji.Text&&function(t,e,n,r,a){let i,o=e.getTarget(),l=new RegExp(o,"gm"),u=0,s=!1;for(;i=l.exec(t);)if(n.ignoreAttachedValue[e.getId()]||void 0===i.groups)u+=n.constValue[e.getId()],s=!0,e.addNumTargets();else if(void 0!==i.groups.value){let t=parseFloat(i.groups.value);Number.isNaN(t)||n.ignoreZeroValue[e.getId()]&&0===t||(u+=t,s=!0,e.addNumTargets())}s&&nu(r,a.get(n.xDataset[e.getId()]),e,u)}(r,i,l,c,a),i.getType()===ji.FileMeta&&ru(t,r,i,l,c,a),r&&i.getType()===ji.dvField&&function(t,e,n,r,a){let i=e.getTarget();e.getParentTarget()&&(i=e.getParentTarget()),i=i.replace("-","[\\s\\-]");let o,l=new RegExp("(^|\\s)\\*{0,2}"+i+"\\*{0,2}(::\\s*(?<values>[\\d\\.\\/\\-\\w,@;\\s]*))(\r?\n|\r|$)","gm"),u=0,s=!1;for(;o=l.exec(t);)if(void 0!==o.groups&&void 0!==o.groups.values){let t=o.groups.values.trim().split(e.getSeparator());if(!t)continue;if(1===t.length){let r=Qo(t[0]);null!==r.value&&(r.type===Zi.Time?(u=r.value,s=!0,e.valueType=Zi.Time,e.addNumTargets()):n.ignoreZeroValue[e.getId()]&&0===r.value||(u+=r.value,s=!0,e.addNumTargets()))}else if(t.length>e.getAccessor()&&e.getAccessor()>=0){let n=Qo(t[e.getAccessor()].trim());null!==n.value&&(n.type===Zi.Time?(u=n.value,s=!0,e.valueType=Zi.Time,e.addNumTargets()):(u+=n.value,s=!0,e.addNumTargets()))}}else u+=n.constValue[e.getId()],s=!0,e.addNumTargets();let f=null;s&&(f=u),nu(r,a.get(n.xDataset[e.getId()]),e,f)}(r,i,l,c,a),!r||i.getType()!==ji.Task&&i.getType()!==ji.TaskDone&&i.getType()!==ji.TaskNotDone||function(t,e,n,r,a){let i=e.getType(),o=e.getTarget();o=i===ji.Task?"\\[[\\sx]\\]\\s"+o:i===ji.TaskDone?"\\[x\\]\\s"+o:i===ji.TaskNotDone?"\\[\\s\\]\\s"+o:"\\[[\\sx]\\]\\s"+o;let l,u=new RegExp(o,"gm"),s=0,f=!1;for(;l=u.exec(t);)if(n.ignoreAttachedValue[e.getId()]||void 0===l.groups)s+=n.constValue[e.getId()],f=!0,e.addNumTargets();else if(void 0!==l.groups.value){let t=parseFloat(l.groups.value);Number.isNaN(t)||n.ignoreZeroValue[e.getId()]&&0===t||(s+=t,f=!0,e.addNumTargets())}f&&nu(r,a.get(n.xDataset[e.getId()]),e,s)}(r,i,l,c,a)}))));yield Promise.all(o)}))));yield Promise.all(h);let d=l.queries.filter((t=>t.getType()===ji.Table)),g=[],p=!1;for(let e of d){let n=e.getParentTarget(),r=this.app.vault.getAbstractFileByPath(t.normalizePath(n+".md"));if(!(r&&r instanceof t.TFile)){p=!0;break}let a=e.getAccessor(),i=e.usedAsXDataset,o=g.find((t=>t.filePath===n&&t.tableIndex===a));if(o)i?o.xDataset=e:o.yDatasets.push(e);else{let t=new Ro(n,a);i?t.xDataset=e:t.yDatasets.push(e),g.push(t)}}if(p){return Pl(a,"File containing tables not found"),void r.appendChild(a)}for(let e of g){let n=e.xDataset;if(!n)continue;let i=e.yDatasets,o=n.getParentTarget(),h=n.getAccessor(),d="";o+=".md";let g=this.app.vault.getAbstractFileByPath(t.normalizePath(o));if(!(g&&g instanceof t.TFile))continue;{f++;let t,e=yield this.app.vault.adapter.read(g.path),n=new RegExp("((\\r?\\n){2}|^)([^\\r\\n]*\\|[^\\r\\n]*(\\r?\\n)?)+(?=(\\r?\\n){2}|$)","gm"),r=0;for(;t=n.exec(e);){if(r===h){d=t[0];break}r++}}let p=d.split(/\r?\n/);p=p.filter((t=>""!==t));let y=0,m=0;if(p.length>=2){let t=p.shift().trim();t=Zo(t,"|"),y=t.split("|").length;let e=p.shift().trim();e=Zo(e,"|");let n=e.split("|");for(let t of n)if(!t.includes("-"))break;m=p.length}if(0==m)continue;let v=n.getAccessor(1);if(v>=y)continue;let w=[];for(let t of p){let e=Zo(t.trim(),"|").split("|");if(v<e.length){let t=Wo(e[v].trim(),l.dateFormat);t.isValid()?(w.push(t),u.isValid()||s.isValid()?(t<u&&(u=t.clone()),t>s&&(s=t.clone())):(u=t.clone(),s=t.clone())):w.push(null)}else w.push(null)}if(w.every((t=>null===t))){return Pl(a,"No valid X value found"),void r.appendChild(a)}for(let t of i){let e=t.getAccessor(1);if(e>=y)continue;let n=0;for(let r of p){let a=Zo(r.trim(),"|").split("|");if(e<a.length){let r=a[e].trim().split(t.getSeparator());if(!r)continue;if(1===r.length){let e=parseFloat(r[0]);Number.isNumber(e)&&n<w.length&&w[n]&&nu(c,$o(w[n],l.dateFormat),t,e)}else if(r.length>t.getAccessor(2)&&t.getAccessor(2)>=0){let e=null,a=r[t.getAccessor(2)].trim();e=parseFloat(a),Number.isNumber(e)&&n<w.length&&w[n]&&nu(c,$o(w[n],l.dateFormat),t,e)}}n++}}}if(0===f){return Pl(a,"No notes found under the given search condition"),void r.appendChild(a)}if(!u.isValid()||!s.isValid()){return Pl(a,"Invalid date range"),void r.appendChild(a)}if(null===l.startDate&&null===l.endDate)l.startDate=u.clone(),l.endDate=s.clone();else if(null!==l.startDate&&null===l.endDate){if(!(l.startDate<s)){return Pl(a,"Invalid date range"),void r.appendChild(a)}l.endDate=s.clone()}else if(null!==l.endDate&&null===l.startDate){if(!(l.endDate>u)){return Pl(a,"Invalid date range"),void r.appendChild(a)}l.startDate=u.clone()}else if(l.startDate<u&&l.endDate<u||l.startDate>s&&l.endDate>s){return Pl(a,"Invalid date range"),void r.appendChild(a)}let y=new Fo(l.startDate,l.endDate);for(let t of l.queries){let e=y.createDataset(t,l);e.addNumTargets(t.getNumTargets());for(let n=l.startDate.clone();n<=l.endDate;n.add(1,"days"))if(c.has($o(n,l.dateFormat))){let r=c.get($o(n,l.dateFormat)).filter((function(e){return e.query.equalTo(t)}));if(r.length>0){let t=null;for(let e=0;e<r.length;e++){let n=r[e].value;Number.isNumber(n)&&!Number.isNaN(n)&&(null===t?t=n:t+=n)}null!==t&&e.setValue(n,t)}}}l.datasets=y;let m=function(t,e){for(let t of e.datasets)t.getQuery().usedAsXDataset||(null!==e.valueShift[t.getId()]&&t.shift(e.valueShift[t.getId()]),null!==e.penalty[t.getId()]&&t.setPenalty(e.penalty[t.getId()]),e.accum[t.getId()]&&t.accumulateValues());for(let n of e.line){let r=Ll(t,e,n);if("string"==typeof r)return r}for(let n of e.bar){let r=Vl(t,e,n);if("string"==typeof r)return r}for(let n of e.pie){let r=gl(t,e,n);if("string"==typeof r)return r}for(let n of e.summary){let r=pl(t,e,n);if("string"==typeof r)return r}for(let n of e.bullet){let r=Ml(t,e,n);if("string"==typeof r)return r}for(let n of e.month){let r=bl(t,e,n);if("string"==typeof r)return r}for(let t of e.heatmap){let t=Dl(0,e);if("string"==typeof t)return t}}(a,l);if("string"==typeof m){return Pl(a,m),void r.appendChild(a)}r.appendChild(a)}))}getEditor(){return this.app.workspace.getActiveViewOfType(t.MarkdownView).editor}addCodeBlock(e){if(!(this.app.workspace.activeLeaf.view instanceof t.MarkdownView))return;let n="";switch(e){case Gi.Line:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nline:\n    title: "Line Chart"\n    xAxisLabel: Date\n    yAxisLabel: Value\n```';break;case Gi.Bar:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nbar:\n    title: "Bar Chart"\n    xAxisLabel: Date\n    yAxisLabel: Value\n```';break;case Gi.Summary:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nsummary:\n    template: "Average value of tagName is {{average}}"\n    style: "color:white;"\n```'}""!==n&&this.insertToNextLine(n)}insertToNextLine(t){let e=this.getEditor();if(e){let n=e.getCursor(),r=n.line,a=e.getLine(r);return n.ch=a.length,e.setSelection(n),e.replaceSelection("\n"+t),!0}return!1}}module.exports=ou;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIm5vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYXNjZW5kaW5nLmpzIiwibm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0LmpzIiwibm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9udW1iZXIuanMiLCJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RpY2tzLmpzIiwibm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tYXguanMiLCJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21pbi5qcyIsIm5vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvcXVpY2tzZWxlY3QuanMiLCJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3F1YW50aWxlLmpzIiwibm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9yYW5nZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvc3VtLmpzIiwibm9kZV9tb2R1bGVzL2QzLWF4aXMvc3JjL2FycmF5LmpzIiwibm9kZV9tb2R1bGVzL2QzLWF4aXMvc3JjL2lkZW50aXR5LmpzIiwibm9kZV9tb2R1bGVzL2QzLWF4aXMvc3JjL2F4aXMuanMiLCJub2RlX21vZHVsZXMvZDMtZGlzcGF0Y2gvc3JjL2Rpc3BhdGNoLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlcy5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NyZWF0b3IuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2FycmF5LmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3JBbGwuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9tYXRjaGVyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdENoaWxkLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdENoaWxkcmVuLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NwYXJzZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbnRlci5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NvbnN0YW50LmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdGEuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc29ydC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hdHRyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvd2luZG93LmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3N0eWxlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3Byb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NsYXNzZWQuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vdGV4dC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9odG1sLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JhaXNlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2xvd2VyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2luc2VydC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yZW1vdmUuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xvbmUuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb24uanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGlzcGF0Y2guanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3QuanMiLCJub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2RlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY29sb3IuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0LmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdEFsbC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9maWx0ZXIuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZXhpdC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9qb2luLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL21lcmdlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL29yZGVyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NhbGwuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZXMuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zaXplLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VtcHR5LmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VhY2guanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vYXBwZW5kLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdHVtLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2l0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9tYXRoLmpzIiwibm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9sYWIuanMiLCJub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL3RpbWVyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lb3V0LmpzIiwibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2NoZWR1bGUuanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbnN0YW50LmpzIiwibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb2xvci5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcmdiLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9udW1iZXIuanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3N0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2RlY29tcG9zZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL3BhcnNlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vaW5kZXguanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90d2Vlbi5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ludGVycG9sYXRlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0ci5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHJUd2Vlbi5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2RlbGF5LmpzIiwibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZHVyYXRpb24uanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lYXNlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vb24uanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3Rpb24uanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zdHlsZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlVHdlZW4uanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0VHdlZW4uanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdEFsbC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ZpbHRlci5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL21lcmdlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHJhbnNpdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RleHQuanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9yZW1vdmUuanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lYXNlVmFyeWluZy5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2VuZC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vdHJhbnNpdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9jdWJpYy5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2ludGVycnVwdC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9pbnRlcnJ1cHQuanMiLCJub2RlX21vZHVsZXMvZDMtcGF0aC9zcmMvcGF0aC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdERlY2ltYWwuanMiLCJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9leHBvbmVudC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFNwZWNpZmllci5qcyIsIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFByZWZpeEF1dG8uanMiLCJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRSb3VuZGVkLmpzIiwibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHlwZXMuanMiLCJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9pZGVudGl0eS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdE51bWVyYWxzLmpzIiwibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHJpbS5qcyIsIm5vZGVfbW9kdWxlcy9kMy9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbG9yLmpzIiwibm9kZV9tb2R1bGVzL2QzL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29uc3RhbnQuanMiLCJub2RlX21vZHVsZXMvZDMvbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9sYWIuanMiLCJub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2luaXQuanMiLCJub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL29yZGluYWwuanMiLCJub2RlX21vZHVsZXMvZDMtc2NhbGUvbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb25zdGFudC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zY2FsZS9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbG9yLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNjYWxlL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcmdiLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNjYWxlL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbnVtYmVyQXJyYXkuanMiLCJub2RlX21vZHVsZXMvZDMtc2NhbGUvbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zY2FsZS9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2RhdGUuanMiLCJub2RlX21vZHVsZXMvZDMtc2NhbGUvbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9udW1iZXIuanMiLCJub2RlX21vZHVsZXMvZDMtc2NhbGUvbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9vYmplY3QuanMiLCJub2RlX21vZHVsZXMvZDMtc2NhbGUvbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvZDMtc2NhbGUvbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy92YWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zY2FsZS9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JvdW5kLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9udW1iZXIuanMiLCJub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2NvbnRpbnVvdXMuanMiLCJub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2NvbnN0YW50LmpzIiwibm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy90aWNrRm9ybWF0LmpzIiwibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uUHJlZml4LmpzIiwibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uUm91bmQuanMiLCJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25GaXhlZC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbGluZWFyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2ludGVydmFsLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21pbGxpc2Vjb25kLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3NlY29uZC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9kdXJhdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9taW51dGUuanMiLCJub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvaG91ci5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9kYXkuanMiLCJub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvd2Vlay5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9tb250aC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy95ZWFyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y01pbnV0ZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNIb3VyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y0RheS5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNXZWVrLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y01vbnRoLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y1llYXIuanMiLCJub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdGlja3MuanMiLCJub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvZGVmYXVsdExvY2FsZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGltZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbmljZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY29uc3RhbnQuanMiLCJub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL21hdGguanMiLCJzcmMvZGF0YS50cyIsIm5vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvYXJjLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbGluZWFyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9wb2ludC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvZGVzY2VuZGluZy5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvaWRlbnRpdHkuanMiLCJzcmMvaGVscGVyLnRzIiwibm9kZV9tb2R1bGVzL2pzZXAvYnVpbGQvanNlcC5qcyIsIm5vZGVfbW9kdWxlcy9zcHJpbnRmLWpzL3NyYy9zcHJpbnRmLmpzIiwic3JjL2V4cHIudHMiLCJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21lZGlhbi5qcyIsIm5vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdmFyaWFuY2UuanMiLCJzcmMvcGllLnRzIiwibm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9waWUuanMiLCJzcmMvc3VtbWFyeS50cyIsInNyYy9tb250aC50cyIsInNyYy9oZWF0bWFwLnRzIiwic3JjL2J1bGxldC50cyIsInNyYy9yZW5kZXJpbmcudHMiLCJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2V4dGVudC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvbGluZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3BvaW50ZXIuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zb3VyY2VFdmVudC5qcyIsInNyYy9wYXJzaW5nLnRzIiwic3JjL2NvbGxlY3RpbmcudHMiLCJzcmMvc2V0dGluZ3MudHMiLCJzcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xyXG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XHJcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XHJcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IGZyb20pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XHJcbn0pIDogZnVuY3Rpb24obywgdikge1xyXG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XHJcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihmKSB7XG4gIGxldCBkZWx0YSA9IGY7XG4gIGxldCBjb21wYXJlID0gZjtcblxuICBpZiAoZi5sZW5ndGggPT09IDEpIHtcbiAgICBkZWx0YSA9IChkLCB4KSA9PiBmKGQpIC0geDtcbiAgICBjb21wYXJlID0gYXNjZW5kaW5nQ29tcGFyYXRvcihmKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlZnQoYSwgeCwgbG8sIGhpKSB7XG4gICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgY29uc3QgbWlkID0gKGxvICsgaGkpID4+PiAxO1xuICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA8IDApIGxvID0gbWlkICsgMTtcbiAgICAgIGVsc2UgaGkgPSBtaWQ7XG4gICAgfVxuICAgIHJldHVybiBsbztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJpZ2h0KGEsIHgsIGxvLCBoaSkge1xuICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgIGNvbnN0IG1pZCA9IChsbyArIGhpKSA+Pj4gMTtcbiAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPiAwKSBoaSA9IG1pZDtcbiAgICAgIGVsc2UgbG8gPSBtaWQgKyAxO1xuICAgIH1cbiAgICByZXR1cm4gbG87XG4gIH1cblxuICBmdW5jdGlvbiBjZW50ZXIoYSwgeCwgbG8sIGhpKSB7XG4gICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICBjb25zdCBpID0gbGVmdChhLCB4LCBsbywgaGkgLSAxKTtcbiAgICByZXR1cm4gaSA+IGxvICYmIGRlbHRhKGFbaSAtIDFdLCB4KSA+IC1kZWx0YShhW2ldLCB4KSA/IGkgLSAxIDogaTtcbiAgfVxuXG4gIHJldHVybiB7bGVmdCwgY2VudGVyLCByaWdodH07XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZ0NvbXBhcmF0b3IoZikge1xuICByZXR1cm4gKGQsIHgpID0+IGFzY2VuZGluZyhmKGQpLCB4KTtcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nLmpzXCI7XG5pbXBvcnQgYmlzZWN0b3IgZnJvbSBcIi4vYmlzZWN0b3IuanNcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbmNvbnN0IGFzY2VuZGluZ0Jpc2VjdCA9IGJpc2VjdG9yKGFzY2VuZGluZyk7XG5leHBvcnQgY29uc3QgYmlzZWN0UmlnaHQgPSBhc2NlbmRpbmdCaXNlY3QucmlnaHQ7XG5leHBvcnQgY29uc3QgYmlzZWN0TGVmdCA9IGFzY2VuZGluZ0Jpc2VjdC5sZWZ0O1xuZXhwb3J0IGNvbnN0IGJpc2VjdENlbnRlciA9IGJpc2VjdG9yKG51bWJlcikuY2VudGVyO1xuZXhwb3J0IGRlZmF1bHQgYmlzZWN0UmlnaHQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4ID09PSBudWxsID8gTmFOIDogK3g7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiogbnVtYmVycyh2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgaWYgKHZhbHVlb2YgPT09IHVuZGVmaW5lZCkge1xuICAgIGZvciAobGV0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiYgKHZhbHVlID0gK3ZhbHVlKSA+PSB2YWx1ZSkge1xuICAgICAgICB5aWVsZCB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZSwgKytpbmRleCwgdmFsdWVzKSkgIT0gbnVsbCAmJiAodmFsdWUgPSArdmFsdWUpID49IHZhbHVlKSB7XG4gICAgICAgIHlpZWxkIHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwidmFyIGUxMCA9IE1hdGguc3FydCg1MCksXG4gICAgZTUgPSBNYXRoLnNxcnQoMTApLFxuICAgIGUyID0gTWF0aC5zcXJ0KDIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHJldmVyc2UsXG4gICAgICBpID0gLTEsXG4gICAgICBuLFxuICAgICAgdGlja3MsXG4gICAgICBzdGVwO1xuXG4gIHN0b3AgPSArc3RvcCwgc3RhcnQgPSArc3RhcnQsIGNvdW50ID0gK2NvdW50O1xuICBpZiAoc3RhcnQgPT09IHN0b3AgJiYgY291bnQgPiAwKSByZXR1cm4gW3N0YXJ0XTtcbiAgaWYgKHJldmVyc2UgPSBzdG9wIDwgc3RhcnQpIG4gPSBzdGFydCwgc3RhcnQgPSBzdG9wLCBzdG9wID0gbjtcbiAgaWYgKChzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpKSA9PT0gMCB8fCAhaXNGaW5pdGUoc3RlcCkpIHJldHVybiBbXTtcblxuICBpZiAoc3RlcCA+IDApIHtcbiAgICBsZXQgcjAgPSBNYXRoLnJvdW5kKHN0YXJ0IC8gc3RlcCksIHIxID0gTWF0aC5yb3VuZChzdG9wIC8gc3RlcCk7XG4gICAgaWYgKHIwICogc3RlcCA8IHN0YXJ0KSArK3IwO1xuICAgIGlmIChyMSAqIHN0ZXAgPiBzdG9wKSAtLXIxO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSByMSAtIHIwICsgMSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHIwICsgaSkgKiBzdGVwO1xuICB9IGVsc2Uge1xuICAgIHN0ZXAgPSAtc3RlcDtcbiAgICBsZXQgcjAgPSBNYXRoLnJvdW5kKHN0YXJ0ICogc3RlcCksIHIxID0gTWF0aC5yb3VuZChzdG9wICogc3RlcCk7XG4gICAgaWYgKHIwIC8gc3RlcCA8IHN0YXJ0KSArK3IwO1xuICAgIGlmIChyMSAvIHN0ZXAgPiBzdG9wKSAtLXIxO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSByMSAtIHIwICsgMSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHIwICsgaSkgLyBzdGVwO1xuICB9XG5cbiAgaWYgKHJldmVyc2UpIHRpY2tzLnJldmVyc2UoKTtcblxuICByZXR1cm4gdGlja3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgcG93ZXIgPSBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXApIC8gTWF0aC5MTjEwKSxcbiAgICAgIGVycm9yID0gc3RlcCAvIE1hdGgucG93KDEwLCBwb3dlcik7XG4gIHJldHVybiBwb3dlciA+PSAwXG4gICAgICA/IChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpICogTWF0aC5wb3coMTAsIHBvd2VyKVxuICAgICAgOiAtTWF0aC5wb3coMTAsIC1wb3dlcikgLyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcDAgPSBNYXRoLmFicyhzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgc3RlcDEgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwMCkgLyBNYXRoLkxOMTApKSxcbiAgICAgIGVycm9yID0gc3RlcDAgLyBzdGVwMTtcbiAgaWYgKGVycm9yID49IGUxMCkgc3RlcDEgKj0gMTA7XG4gIGVsc2UgaWYgKGVycm9yID49IGU1KSBzdGVwMSAqPSA1O1xuICBlbHNlIGlmIChlcnJvciA+PSBlMikgc3RlcDEgKj0gMjtcbiAgcmV0dXJuIHN0b3AgPCBzdGFydCA/IC1zdGVwMSA6IHN0ZXAxO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWF4KHZhbHVlcywgdmFsdWVvZikge1xuICBsZXQgbWF4O1xuICBpZiAodmFsdWVvZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsXG4gICAgICAgICAgJiYgKG1heCA8IHZhbHVlIHx8IChtYXggPT09IHVuZGVmaW5lZCAmJiB2YWx1ZSA+PSB2YWx1ZSkpKSB7XG4gICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgaW5kZXggPSAtMTtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlLCArK2luZGV4LCB2YWx1ZXMpKSAhPSBudWxsXG4gICAgICAgICAgJiYgKG1heCA8IHZhbHVlIHx8IChtYXggPT09IHVuZGVmaW5lZCAmJiB2YWx1ZSA+PSB2YWx1ZSkpKSB7XG4gICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbWF4O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWluKHZhbHVlcywgdmFsdWVvZikge1xuICBsZXQgbWluO1xuICBpZiAodmFsdWVvZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsXG4gICAgICAgICAgJiYgKG1pbiA+IHZhbHVlIHx8IChtaW4gPT09IHVuZGVmaW5lZCAmJiB2YWx1ZSA+PSB2YWx1ZSkpKSB7XG4gICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgaW5kZXggPSAtMTtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlLCArK2luZGV4LCB2YWx1ZXMpKSAhPSBudWxsXG4gICAgICAgICAgJiYgKG1pbiA+IHZhbHVlIHx8IChtaW4gPT09IHVuZGVmaW5lZCAmJiB2YWx1ZSA+PSB2YWx1ZSkpKSB7XG4gICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbWluO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmcuanNcIjtcblxuLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL21vdXJuZXIvcXVpY2tzZWxlY3Rcbi8vIElTQyBsaWNlbnNlLCBDb3B5cmlnaHQgMjAxOCBWbGFkaW1pciBBZ2Fmb25raW4uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBxdWlja3NlbGVjdChhcnJheSwgaywgbGVmdCA9IDAsIHJpZ2h0ID0gYXJyYXkubGVuZ3RoIC0gMSwgY29tcGFyZSA9IGFzY2VuZGluZykge1xuICB3aGlsZSAocmlnaHQgPiBsZWZ0KSB7XG4gICAgaWYgKHJpZ2h0IC0gbGVmdCA+IDYwMCkge1xuICAgICAgY29uc3QgbiA9IHJpZ2h0IC0gbGVmdCArIDE7XG4gICAgICBjb25zdCBtID0gayAtIGxlZnQgKyAxO1xuICAgICAgY29uc3QgeiA9IE1hdGgubG9nKG4pO1xuICAgICAgY29uc3QgcyA9IDAuNSAqIE1hdGguZXhwKDIgKiB6IC8gMyk7XG4gICAgICBjb25zdCBzZCA9IDAuNSAqIE1hdGguc3FydCh6ICogcyAqIChuIC0gcykgLyBuKSAqIChtIC0gbiAvIDIgPCAwID8gLTEgOiAxKTtcbiAgICAgIGNvbnN0IG5ld0xlZnQgPSBNYXRoLm1heChsZWZ0LCBNYXRoLmZsb29yKGsgLSBtICogcyAvIG4gKyBzZCkpO1xuICAgICAgY29uc3QgbmV3UmlnaHQgPSBNYXRoLm1pbihyaWdodCwgTWF0aC5mbG9vcihrICsgKG4gLSBtKSAqIHMgLyBuICsgc2QpKTtcbiAgICAgIHF1aWNrc2VsZWN0KGFycmF5LCBrLCBuZXdMZWZ0LCBuZXdSaWdodCwgY29tcGFyZSk7XG4gICAgfVxuXG4gICAgY29uc3QgdCA9IGFycmF5W2tdO1xuICAgIGxldCBpID0gbGVmdDtcbiAgICBsZXQgaiA9IHJpZ2h0O1xuXG4gICAgc3dhcChhcnJheSwgbGVmdCwgayk7XG4gICAgaWYgKGNvbXBhcmUoYXJyYXlbcmlnaHRdLCB0KSA+IDApIHN3YXAoYXJyYXksIGxlZnQsIHJpZ2h0KTtcblxuICAgIHdoaWxlIChpIDwgaikge1xuICAgICAgc3dhcChhcnJheSwgaSwgaiksICsraSwgLS1qO1xuICAgICAgd2hpbGUgKGNvbXBhcmUoYXJyYXlbaV0sIHQpIDwgMCkgKytpO1xuICAgICAgd2hpbGUgKGNvbXBhcmUoYXJyYXlbal0sIHQpID4gMCkgLS1qO1xuICAgIH1cblxuICAgIGlmIChjb21wYXJlKGFycmF5W2xlZnRdLCB0KSA9PT0gMCkgc3dhcChhcnJheSwgbGVmdCwgaik7XG4gICAgZWxzZSArK2osIHN3YXAoYXJyYXksIGosIHJpZ2h0KTtcblxuICAgIGlmIChqIDw9IGspIGxlZnQgPSBqICsgMTtcbiAgICBpZiAoayA8PSBqKSByaWdodCA9IGogLSAxO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuZnVuY3Rpb24gc3dhcChhcnJheSwgaSwgaikge1xuICBjb25zdCB0ID0gYXJyYXlbaV07XG4gIGFycmF5W2ldID0gYXJyYXlbal07XG4gIGFycmF5W2pdID0gdDtcbn1cbiIsImltcG9ydCBtYXggZnJvbSBcIi4vbWF4LmpzXCI7XG5pbXBvcnQgbWluIGZyb20gXCIuL21pbi5qc1wiO1xuaW1wb3J0IHF1aWNrc2VsZWN0IGZyb20gXCIuL3F1aWNrc2VsZWN0LmpzXCI7XG5pbXBvcnQgbnVtYmVyLCB7bnVtYmVyc30gZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHF1YW50aWxlKHZhbHVlcywgcCwgdmFsdWVvZikge1xuICB2YWx1ZXMgPSBGbG9hdDY0QXJyYXkuZnJvbShudW1iZXJzKHZhbHVlcywgdmFsdWVvZikpO1xuICBpZiAoIShuID0gdmFsdWVzLmxlbmd0aCkpIHJldHVybjtcbiAgaWYgKChwID0gK3ApIDw9IDAgfHwgbiA8IDIpIHJldHVybiBtaW4odmFsdWVzKTtcbiAgaWYgKHAgPj0gMSkgcmV0dXJuIG1heCh2YWx1ZXMpO1xuICB2YXIgbixcbiAgICAgIGkgPSAobiAtIDEpICogcCxcbiAgICAgIGkwID0gTWF0aC5mbG9vcihpKSxcbiAgICAgIHZhbHVlMCA9IG1heChxdWlja3NlbGVjdCh2YWx1ZXMsIGkwKS5zdWJhcnJheSgwLCBpMCArIDEpKSxcbiAgICAgIHZhbHVlMSA9IG1pbih2YWx1ZXMuc3ViYXJyYXkoaTAgKyAxKSk7XG4gIHJldHVybiB2YWx1ZTAgKyAodmFsdWUxIC0gdmFsdWUwKSAqIChpIC0gaTApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcXVhbnRpbGVTb3J0ZWQodmFsdWVzLCBwLCB2YWx1ZW9mID0gbnVtYmVyKSB7XG4gIGlmICghKG4gPSB2YWx1ZXMubGVuZ3RoKSkgcmV0dXJuO1xuICBpZiAoKHAgPSArcCkgPD0gMCB8fCBuIDwgMikgcmV0dXJuICt2YWx1ZW9mKHZhbHVlc1swXSwgMCwgdmFsdWVzKTtcbiAgaWYgKHAgPj0gMSkgcmV0dXJuICt2YWx1ZW9mKHZhbHVlc1tuIC0gMV0sIG4gLSAxLCB2YWx1ZXMpO1xuICB2YXIgbixcbiAgICAgIGkgPSAobiAtIDEpICogcCxcbiAgICAgIGkwID0gTWF0aC5mbG9vcihpKSxcbiAgICAgIHZhbHVlMCA9ICt2YWx1ZW9mKHZhbHVlc1tpMF0sIGkwLCB2YWx1ZXMpLFxuICAgICAgdmFsdWUxID0gK3ZhbHVlb2YodmFsdWVzW2kwICsgMV0sIGkwICsgMSwgdmFsdWVzKTtcbiAgcmV0dXJuIHZhbHVlMCArICh2YWx1ZTEgLSB2YWx1ZTApICogKGkgLSBpMCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICBzdGFydCA9ICtzdGFydCwgc3RvcCA9ICtzdG9wLCBzdGVwID0gKG4gPSBhcmd1bWVudHMubGVuZ3RoKSA8IDIgPyAoc3RvcCA9IHN0YXJ0LCBzdGFydCA9IDAsIDEpIDogbiA8IDMgPyAxIDogK3N0ZXA7XG5cbiAgdmFyIGkgPSAtMSxcbiAgICAgIG4gPSBNYXRoLm1heCgwLCBNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSkgfCAwLFxuICAgICAgcmFuZ2UgPSBuZXcgQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICByYW5nZVtpXSA9IHN0YXJ0ICsgaSAqIHN0ZXA7XG4gIH1cblxuICByZXR1cm4gcmFuZ2U7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdW0odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIGxldCBzdW0gPSAwO1xuICBpZiAodmFsdWVvZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAodmFsdWUgPSArdmFsdWUpIHtcbiAgICAgICAgc3VtICs9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgaW5kZXggPSAtMTtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICh2YWx1ZSA9ICt2YWx1ZW9mKHZhbHVlLCArK2luZGV4LCB2YWx1ZXMpKSB7XG4gICAgICAgIHN1bSArPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN1bTtcbn1cbiIsImV4cG9ydCB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXkuanNcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eS5qc1wiO1xuXG52YXIgdG9wID0gMSxcbiAgICByaWdodCA9IDIsXG4gICAgYm90dG9tID0gMyxcbiAgICBsZWZ0ID0gNCxcbiAgICBlcHNpbG9uID0gMWUtNjtcblxuZnVuY3Rpb24gdHJhbnNsYXRlWCh4KSB7XG4gIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHggKyBcIiwwKVwiO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVZKHkpIHtcbiAgcmV0dXJuIFwidHJhbnNsYXRlKDAsXCIgKyB5ICsgXCIpXCI7XG59XG5cbmZ1bmN0aW9uIG51bWJlcihzY2FsZSkge1xuICByZXR1cm4gZCA9PiArc2NhbGUoZCk7XG59XG5cbmZ1bmN0aW9uIGNlbnRlcihzY2FsZSwgb2Zmc2V0KSB7XG4gIG9mZnNldCA9IE1hdGgubWF4KDAsIHNjYWxlLmJhbmR3aWR0aCgpIC0gb2Zmc2V0ICogMikgLyAyO1xuICBpZiAoc2NhbGUucm91bmQoKSkgb2Zmc2V0ID0gTWF0aC5yb3VuZChvZmZzZXQpO1xuICByZXR1cm4gZCA9PiArc2NhbGUoZCkgKyBvZmZzZXQ7XG59XG5cbmZ1bmN0aW9uIGVudGVyaW5nKCkge1xuICByZXR1cm4gIXRoaXMuX19heGlzO1xufVxuXG5mdW5jdGlvbiBheGlzKG9yaWVudCwgc2NhbGUpIHtcbiAgdmFyIHRpY2tBcmd1bWVudHMgPSBbXSxcbiAgICAgIHRpY2tWYWx1ZXMgPSBudWxsLFxuICAgICAgdGlja0Zvcm1hdCA9IG51bGwsXG4gICAgICB0aWNrU2l6ZUlubmVyID0gNixcbiAgICAgIHRpY2tTaXplT3V0ZXIgPSA2LFxuICAgICAgdGlja1BhZGRpbmcgPSAzLFxuICAgICAgb2Zmc2V0ID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+IDEgPyAwIDogMC41LFxuICAgICAgayA9IG9yaWVudCA9PT0gdG9wIHx8IG9yaWVudCA9PT0gbGVmdCA/IC0xIDogMSxcbiAgICAgIHggPSBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09PSByaWdodCA/IFwieFwiIDogXCJ5XCIsXG4gICAgICB0cmFuc2Zvcm0gPSBvcmllbnQgPT09IHRvcCB8fCBvcmllbnQgPT09IGJvdHRvbSA/IHRyYW5zbGF0ZVggOiB0cmFuc2xhdGVZO1xuXG4gIGZ1bmN0aW9uIGF4aXMoY29udGV4dCkge1xuICAgIHZhciB2YWx1ZXMgPSB0aWNrVmFsdWVzID09IG51bGwgPyAoc2NhbGUudGlja3MgPyBzY2FsZS50aWNrcy5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBzY2FsZS5kb21haW4oKSkgOiB0aWNrVmFsdWVzLFxuICAgICAgICBmb3JtYXQgPSB0aWNrRm9ybWF0ID09IG51bGwgPyAoc2NhbGUudGlja0Zvcm1hdCA/IHNjYWxlLnRpY2tGb3JtYXQuYXBwbHkoc2NhbGUsIHRpY2tBcmd1bWVudHMpIDogaWRlbnRpdHkpIDogdGlja0Zvcm1hdCxcbiAgICAgICAgc3BhY2luZyA9IE1hdGgubWF4KHRpY2tTaXplSW5uZXIsIDApICsgdGlja1BhZGRpbmcsXG4gICAgICAgIHJhbmdlID0gc2NhbGUucmFuZ2UoKSxcbiAgICAgICAgcmFuZ2UwID0gK3JhbmdlWzBdICsgb2Zmc2V0LFxuICAgICAgICByYW5nZTEgPSArcmFuZ2VbcmFuZ2UubGVuZ3RoIC0gMV0gKyBvZmZzZXQsXG4gICAgICAgIHBvc2l0aW9uID0gKHNjYWxlLmJhbmR3aWR0aCA/IGNlbnRlciA6IG51bWJlcikoc2NhbGUuY29weSgpLCBvZmZzZXQpLFxuICAgICAgICBzZWxlY3Rpb24gPSBjb250ZXh0LnNlbGVjdGlvbiA/IGNvbnRleHQuc2VsZWN0aW9uKCkgOiBjb250ZXh0LFxuICAgICAgICBwYXRoID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi5kb21haW5cIikuZGF0YShbbnVsbF0pLFxuICAgICAgICB0aWNrID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi50aWNrXCIpLmRhdGEodmFsdWVzLCBzY2FsZSkub3JkZXIoKSxcbiAgICAgICAgdGlja0V4aXQgPSB0aWNrLmV4aXQoKSxcbiAgICAgICAgdGlja0VudGVyID0gdGljay5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwidGlja1wiKSxcbiAgICAgICAgbGluZSA9IHRpY2suc2VsZWN0KFwibGluZVwiKSxcbiAgICAgICAgdGV4dCA9IHRpY2suc2VsZWN0KFwidGV4dFwiKTtcblxuICAgIHBhdGggPSBwYXRoLm1lcmdlKHBhdGguZW50ZXIoKS5pbnNlcnQoXCJwYXRoXCIsIFwiLnRpY2tcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRvbWFpblwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImN1cnJlbnRDb2xvclwiKSk7XG5cbiAgICB0aWNrID0gdGljay5tZXJnZSh0aWNrRW50ZXIpO1xuXG4gICAgbGluZSA9IGxpbmUubWVyZ2UodGlja0VudGVyLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJjdXJyZW50Q29sb3JcIilcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcikpO1xuXG4gICAgdGV4dCA9IHRleHQubWVyZ2UodGlja0VudGVyLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpXG4gICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAuYXR0cihcImR5XCIsIG9yaWVudCA9PT0gdG9wID8gXCIwZW1cIiA6IG9yaWVudCA9PT0gYm90dG9tID8gXCIwLjcxZW1cIiA6IFwiMC4zMmVtXCIpKTtcblxuICAgIGlmIChjb250ZXh0ICE9PSBzZWxlY3Rpb24pIHtcbiAgICAgIHBhdGggPSBwYXRoLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICB0aWNrID0gdGljay50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgbGluZSA9IGxpbmUudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIHRleHQgPSB0ZXh0LnRyYW5zaXRpb24oY29udGV4dCk7XG5cbiAgICAgIHRpY2tFeGl0ID0gdGlja0V4aXQudHJhbnNpdGlvbihjb250ZXh0KVxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGlzRmluaXRlKGQgPSBwb3NpdGlvbihkKSkgPyB0cmFuc2Zvcm0oZCArIG9mZnNldCkgOiB0aGlzLmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTsgfSk7XG5cbiAgICAgIHRpY2tFbnRlclxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgdmFyIHAgPSB0aGlzLnBhcmVudE5vZGUuX19heGlzOyByZXR1cm4gdHJhbnNmb3JtKChwICYmIGlzRmluaXRlKHAgPSBwKGQpKSA/IHAgOiBwb3NpdGlvbihkKSkgKyBvZmZzZXQpOyB9KTtcbiAgICB9XG5cbiAgICB0aWNrRXhpdC5yZW1vdmUoKTtcblxuICAgIHBhdGhcbiAgICAgICAgLmF0dHIoXCJkXCIsIG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT09IHJpZ2h0XG4gICAgICAgICAgICA/ICh0aWNrU2l6ZU91dGVyID8gXCJNXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiLFwiICsgcmFuZ2UwICsgXCJIXCIgKyBvZmZzZXQgKyBcIlZcIiArIHJhbmdlMSArIFwiSFwiICsgayAqIHRpY2tTaXplT3V0ZXIgOiBcIk1cIiArIG9mZnNldCArIFwiLFwiICsgcmFuZ2UwICsgXCJWXCIgKyByYW5nZTEpXG4gICAgICAgICAgICA6ICh0aWNrU2l6ZU91dGVyID8gXCJNXCIgKyByYW5nZTAgKyBcIixcIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCJWXCIgKyBvZmZzZXQgKyBcIkhcIiArIHJhbmdlMSArIFwiVlwiICsgayAqIHRpY2tTaXplT3V0ZXIgOiBcIk1cIiArIHJhbmdlMCArIFwiLFwiICsgb2Zmc2V0ICsgXCJIXCIgKyByYW5nZTEpKTtcblxuICAgIHRpY2tcbiAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIDEpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHRyYW5zZm9ybShwb3NpdGlvbihkKSArIG9mZnNldCk7IH0pO1xuXG4gICAgbGluZVxuICAgICAgICAuYXR0cih4ICsgXCIyXCIsIGsgKiB0aWNrU2l6ZUlubmVyKTtcblxuICAgIHRleHRcbiAgICAgICAgLmF0dHIoeCwgayAqIHNwYWNpbmcpXG4gICAgICAgIC50ZXh0KGZvcm1hdCk7XG5cbiAgICBzZWxlY3Rpb24uZmlsdGVyKGVudGVyaW5nKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAgIC5hdHRyKFwiZm9udC1zaXplXCIsIDEwKVxuICAgICAgICAuYXR0cihcImZvbnQtZmFtaWx5XCIsIFwic2Fucy1zZXJpZlwiKVxuICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIG9yaWVudCA9PT0gcmlnaHQgPyBcInN0YXJ0XCIgOiBvcmllbnQgPT09IGxlZnQgPyBcImVuZFwiIDogXCJtaWRkbGVcIik7XG5cbiAgICBzZWxlY3Rpb25cbiAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7IHRoaXMuX19heGlzID0gcG9zaXRpb247IH0pO1xuICB9XG5cbiAgYXhpcy5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzY2FsZSA9IF8sIGF4aXMpIDogc2NhbGU7XG4gIH07XG5cbiAgYXhpcy50aWNrcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aWNrQXJndW1lbnRzID0gc2xpY2UuY2FsbChhcmd1bWVudHMpLCBheGlzO1xuICB9O1xuXG4gIGF4aXMudGlja0FyZ3VtZW50cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrQXJndW1lbnRzID0gXyA9PSBudWxsID8gW10gOiBzbGljZS5jYWxsKF8pLCBheGlzKSA6IHRpY2tBcmd1bWVudHMuc2xpY2UoKTtcbiAgfTtcblxuICBheGlzLnRpY2tWYWx1ZXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1ZhbHVlcyA9IF8gPT0gbnVsbCA/IG51bGwgOiBzbGljZS5jYWxsKF8pLCBheGlzKSA6IHRpY2tWYWx1ZXMgJiYgdGlja1ZhbHVlcy5zbGljZSgpO1xuICB9O1xuXG4gIGF4aXMudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrRm9ybWF0ID0gXywgYXhpcykgOiB0aWNrRm9ybWF0O1xuICB9O1xuXG4gIGF4aXMudGlja1NpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVJbm5lciA9IHRpY2tTaXplT3V0ZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xuICB9O1xuXG4gIGF4aXMudGlja1NpemVJbm5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gK18sIGF4aXMpIDogdGlja1NpemVJbm5lcjtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplT3V0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVPdXRlciA9ICtfLCBheGlzKSA6IHRpY2tTaXplT3V0ZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrUGFkZGluZyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrUGFkZGluZyA9ICtfLCBheGlzKSA6IHRpY2tQYWRkaW5nO1xuICB9O1xuXG4gIGF4aXMub2Zmc2V0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG9mZnNldCA9ICtfLCBheGlzKSA6IG9mZnNldDtcbiAgfTtcblxuICByZXR1cm4gYXhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNUb3Aoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXModG9wLCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzUmlnaHQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMocmlnaHQsIHNjYWxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNCb3R0b20oc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMoYm90dG9tLCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzTGVmdChzY2FsZSkge1xuICByZXR1cm4gYXhpcyhsZWZ0LCBzY2FsZSk7XG59XG4iLCJ2YXIgbm9vcCA9IHt2YWx1ZTogKCkgPT4ge319O1xuXG5mdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBfID0ge30sIHQ7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoISh0ID0gYXJndW1lbnRzW2ldICsgXCJcIikgfHwgKHQgaW4gXykgfHwgL1tcXHMuXS8udGVzdCh0KSkgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCB0eXBlOiBcIiArIHQpO1xuICAgIF9bdF0gPSBbXTtcbiAgfVxuICByZXR1cm4gbmV3IERpc3BhdGNoKF8pO1xufVxuXG5mdW5jdGlvbiBEaXNwYXRjaChfKSB7XG4gIHRoaXMuXyA9IF87XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcywgdHlwZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIGlmICh0ICYmICF0eXBlcy5oYXNPd25Qcm9wZXJ0eSh0KSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHQpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5EaXNwYXRjaC5wcm90b3R5cGUgPSBkaXNwYXRjaC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBEaXNwYXRjaCxcbiAgb246IGZ1bmN0aW9uKHR5cGVuYW1lLCBjYWxsYmFjaykge1xuICAgIHZhciBfID0gdGhpcy5fLFxuICAgICAgICBUID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiLCBfKSxcbiAgICAgICAgdCxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gVC5sZW5ndGg7XG5cbiAgICAvLyBJZiBubyBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZXR1cm4gdGhlIGNhbGxiYWNrIG9mIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpICYmICh0ID0gZ2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUpKSkgcmV0dXJuIHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgYSB0eXBlIHdhcyBzcGVjaWZpZWQsIHNldCB0aGUgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIC8vIE90aGVyd2lzZSwgaWYgYSBudWxsIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJlbW92ZSBjYWxsYmFja3Mgb2YgdGhlIGdpdmVuIG5hbWUuXG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgY2FsbGJhY2spO1xuICAgICAgZWxzZSBpZiAoY2FsbGJhY2sgPT0gbnVsbCkgZm9yICh0IGluIF8pIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgbnVsbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGNvcHk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb3B5ID0ge30sIF8gPSB0aGlzLl87XG4gICAgZm9yICh2YXIgdCBpbiBfKSBjb3B5W3RdID0gX1t0XS5zbGljZSgpO1xuICAgIHJldHVybiBuZXcgRGlzcGF0Y2goY29weSk7XG4gIH0sXG4gIGNhbGw6IGZ1bmN0aW9uKHR5cGUsIHRoYXQpIHtcbiAgICBpZiAoKG4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMikgPiAwKSBmb3IgKHZhciBhcmdzID0gbmV3IEFycmF5KG4pLCBpID0gMCwgbiwgdDsgaSA8IG47ICsraSkgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbih0eXBlLCB0aGF0LCBhcmdzKSB7XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHZhciB0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXQodHlwZSwgbmFtZSkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoLCBjOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKChjID0gdHlwZVtpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgcmV0dXJuIGMudmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldCh0eXBlLCBuYW1lLCBjYWxsYmFjaykge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKHR5cGVbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgdHlwZVtpXSA9IG5vb3AsIHR5cGUgPSB0eXBlLnNsaWNlKDAsIGkpLmNvbmNhdCh0eXBlLnNsaWNlKGkgKyAxKSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHR5cGUucHVzaCh7bmFtZTogbmFtZSwgdmFsdWU6IGNhbGxiYWNrfSk7XG4gIHJldHVybiB0eXBlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkaXNwYXRjaDtcbiIsImV4cG9ydCB2YXIgeGh0bWwgPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzdmc6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgeGh0bWw6IHhodG1sLFxuICB4bGluazogXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gIHhtbDogXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy9cIlxufTtcbiIsImltcG9ydCBuYW1lc3BhY2VzIGZyb20gXCIuL25hbWVzcGFjZXMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgcHJlZml4ID0gbmFtZSArPSBcIlwiLCBpID0gcHJlZml4LmluZGV4T2YoXCI6XCIpO1xuICBpZiAoaSA+PSAwICYmIChwcmVmaXggPSBuYW1lLnNsaWNlKDAsIGkpKSAhPT0gXCJ4bWxuc1wiKSBuYW1lID0gbmFtZS5zbGljZShpICsgMSk7XG4gIHJldHVybiBuYW1lc3BhY2VzLmhhc093blByb3BlcnR5KHByZWZpeCkgPyB7c3BhY2U6IG5hbWVzcGFjZXNbcHJlZml4XSwgbG9jYWw6IG5hbWV9IDogbmFtZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbn1cbiIsImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4vbmFtZXNwYWNlLmpzXCI7XG5pbXBvcnQge3hodG1sfSBmcm9tIFwiLi9uYW1lc3BhY2VzLmpzXCI7XG5cbmZ1bmN0aW9uIGNyZWF0b3JJbmhlcml0KG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBkb2N1bWVudCA9IHRoaXMub3duZXJEb2N1bWVudCxcbiAgICAgICAgdXJpID0gdGhpcy5uYW1lc3BhY2VVUkk7XG4gICAgcmV0dXJuIHVyaSA9PT0geGh0bWwgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm5hbWVzcGFjZVVSSSA9PT0geGh0bWxcbiAgICAgICAgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpXG4gICAgICAgIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHVyaSwgbmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0b3JGaXhlZChmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiAoZnVsbG5hbWUubG9jYWxcbiAgICAgID8gY3JlYXRvckZpeGVkXG4gICAgICA6IGNyZWF0b3JJbmhlcml0KShmdWxsbmFtZSk7XG59XG4iLCJmdW5jdGlvbiBub25lKCkge31cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBub25lIDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJvYmplY3RcIiAmJiBcImxlbmd0aFwiIGluIHhcbiAgICA/IHggLy8gQXJyYXksIFR5cGVkQXJyYXksIE5vZGVMaXN0LCBhcnJheS1saWtlXG4gICAgOiBBcnJheS5mcm9tKHgpOyAvLyBNYXAsIFNldCwgaXRlcmFibGUsIHN0cmluZywgb3IgYW55dGhpbmcgZWxzZVxufVxuIiwiZnVuY3Rpb24gZW1wdHkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBlbXB0eSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm1hdGNoZXMoc2VsZWN0b3IpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hpbGRNYXRjaGVyKHNlbGVjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUubWF0Y2hlcyhzZWxlY3Rvcik7XG4gIH07XG59XG5cbiIsImltcG9ydCB7Y2hpbGRNYXRjaGVyfSBmcm9tIFwiLi4vbWF0Y2hlci5qc1wiO1xuXG52YXIgZmluZCA9IEFycmF5LnByb3RvdHlwZS5maW5kO1xuXG5mdW5jdGlvbiBjaGlsZEZpbmQobWF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmaW5kLmNhbGwodGhpcy5jaGlsZHJlbiwgbWF0Y2gpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjaGlsZEZpcnN0KCkge1xuICByZXR1cm4gdGhpcy5maXJzdEVsZW1lbnRDaGlsZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KG1hdGNoID09IG51bGwgPyBjaGlsZEZpcnN0XG4gICAgICA6IGNoaWxkRmluZCh0eXBlb2YgbWF0Y2ggPT09IFwiZnVuY3Rpb25cIiA/IG1hdGNoIDogY2hpbGRNYXRjaGVyKG1hdGNoKSkpO1xufVxuIiwiaW1wb3J0IHtjaGlsZE1hdGNoZXJ9IGZyb20gXCIuLi9tYXRjaGVyLmpzXCI7XG5cbnZhciBmaWx0ZXIgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyO1xuXG5mdW5jdGlvbiBjaGlsZHJlbigpIHtcbiAgcmV0dXJuIHRoaXMuY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNoaWxkcmVuRmlsdGVyKG1hdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZmlsdGVyLmNhbGwodGhpcy5jaGlsZHJlbiwgbWF0Y2gpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICByZXR1cm4gdGhpcy5zZWxlY3RBbGwobWF0Y2ggPT0gbnVsbCA/IGNoaWxkcmVuXG4gICAgICA6IGNoaWxkcmVuRmlsdGVyKHR5cGVvZiBtYXRjaCA9PT0gXCJmdW5jdGlvblwiID8gbWF0Y2ggOiBjaGlsZE1hdGNoZXIobWF0Y2gpKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih1cGRhdGUpIHtcbiAgcmV0dXJuIG5ldyBBcnJheSh1cGRhdGUubGVuZ3RoKTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlLmpzXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2VudGVyIHx8IHRoaXMuX2dyb3Vwcy5tYXAoc3BhcnNlKSwgdGhpcy5fcGFyZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBFbnRlck5vZGUocGFyZW50LCBkYXR1bSkge1xuICB0aGlzLm93bmVyRG9jdW1lbnQgPSBwYXJlbnQub3duZXJEb2N1bWVudDtcbiAgdGhpcy5uYW1lc3BhY2VVUkkgPSBwYXJlbnQubmFtZXNwYWNlVVJJO1xuICB0aGlzLl9uZXh0ID0gbnVsbDtcbiAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICB0aGlzLl9fZGF0YV9fID0gZGF0dW07XG59XG5cbkVudGVyTm9kZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBFbnRlck5vZGUsXG4gIGFwcGVuZENoaWxkOiBmdW5jdGlvbihjaGlsZCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgdGhpcy5fbmV4dCk7IH0sXG4gIGluc2VydEJlZm9yZTogZnVuY3Rpb24oY2hpbGQsIG5leHQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIG5leHQpOyB9LFxuICBxdWVyeVNlbGVjdG9yOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpOyB9LFxuICBxdWVyeVNlbGVjdG9yQWxsOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpOyB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCB7RW50ZXJOb2RlfSBmcm9tIFwiLi9lbnRlci5qc1wiO1xuaW1wb3J0IGFycmF5IGZyb20gXCIuLi9hcnJheS5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudC5qc1wiO1xuXG5mdW5jdGlvbiBiaW5kSW5kZXgocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSkge1xuICB2YXIgaSA9IDAsXG4gICAgICBub2RlLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGZpdCBpbnRvIHVwZGF0ZS5cbiAgLy8gUHV0IGFueSBudWxsIG5vZGVzIGludG8gZW50ZXIuXG4gIC8vIFB1dCBhbnkgcmVtYWluaW5nIGRhdGEgaW50byBlbnRlci5cbiAgZm9yICg7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBkb27igJl0IGZpdCBpbnRvIGV4aXQuXG4gIGZvciAoOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBiaW5kS2V5KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEsIGtleSkge1xuICB2YXIgaSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlQnlLZXlWYWx1ZSA9IG5ldyBNYXAsXG4gICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aCxcbiAgICAgIGtleVZhbHVlcyA9IG5ldyBBcnJheShncm91cExlbmd0aCksXG4gICAgICBrZXlWYWx1ZTtcblxuICAvLyBDb21wdXRlIHRoZSBrZXkgZm9yIGVhY2ggbm9kZS5cbiAgLy8gSWYgbXVsdGlwbGUgbm9kZXMgaGF2ZSB0aGUgc2FtZSBrZXksIHRoZSBkdXBsaWNhdGVzIGFyZSBhZGRlZCB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGtleVZhbHVlc1tpXSA9IGtleVZhbHVlID0ga2V5LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApICsgXCJcIjtcbiAgICAgIGlmIChub2RlQnlLZXlWYWx1ZS5oYXMoa2V5VmFsdWUpKSB7XG4gICAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZUJ5S2V5VmFsdWUuc2V0KGtleVZhbHVlLCBub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDb21wdXRlIHRoZSBrZXkgZm9yIGVhY2ggZGF0dW0uXG4gIC8vIElmIHRoZXJlIGEgbm9kZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBrZXksIGpvaW4gYW5kIGFkZCBpdCB0byB1cGRhdGUuXG4gIC8vIElmIHRoZXJlIGlzIG5vdCAob3IgdGhlIGtleSBpcyBhIGR1cGxpY2F0ZSksIGFkZCBpdCB0byBlbnRlci5cbiAgZm9yIChpID0gMDsgaSA8IGRhdGFMZW5ndGg7ICsraSkge1xuICAgIGtleVZhbHVlID0ga2V5LmNhbGwocGFyZW50LCBkYXRhW2ldLCBpLCBkYXRhKSArIFwiXCI7XG4gICAgaWYgKG5vZGUgPSBub2RlQnlLZXlWYWx1ZS5nZXQoa2V5VmFsdWUpKSB7XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICBub2RlQnlLZXlWYWx1ZS5kZWxldGUoa2V5VmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgYW55IHJlbWFpbmluZyBub2RlcyB0aGF0IHdlcmUgbm90IGJvdW5kIHRvIGRhdGEgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKG5vZGVCeUtleVZhbHVlLmdldChrZXlWYWx1ZXNbaV0pID09PSBub2RlKSkge1xuICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRhdHVtKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuX19kYXRhX187XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLCBkYXR1bSk7XG5cbiAgdmFyIGJpbmQgPSBrZXkgPyBiaW5kS2V5IDogYmluZEluZGV4LFxuICAgICAgcGFyZW50cyA9IHRoaXMuX3BhcmVudHMsXG4gICAgICBncm91cHMgPSB0aGlzLl9ncm91cHM7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB2YWx1ZSA9IGNvbnN0YW50KHZhbHVlKTtcblxuICBmb3IgKHZhciBtID0gZ3JvdXBzLmxlbmd0aCwgdXBkYXRlID0gbmV3IEFycmF5KG0pLCBlbnRlciA9IG5ldyBBcnJheShtKSwgZXhpdCA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICB2YXIgcGFyZW50ID0gcGFyZW50c1tqXSxcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbal0sXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICBkYXRhID0gYXJyYXkodmFsdWUuY2FsbChwYXJlbnQsIHBhcmVudCAmJiBwYXJlbnQuX19kYXRhX18sIGosIHBhcmVudHMpKSxcbiAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBlbnRlckdyb3VwID0gZW50ZXJbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIHVwZGF0ZUdyb3VwID0gdXBkYXRlW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICBleGl0R3JvdXAgPSBleGl0W2pdID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKTtcblxuICAgIGJpbmQocGFyZW50LCBncm91cCwgZW50ZXJHcm91cCwgdXBkYXRlR3JvdXAsIGV4aXRHcm91cCwgZGF0YSwga2V5KTtcblxuICAgIC8vIE5vdyBjb25uZWN0IHRoZSBlbnRlciBub2RlcyB0byB0aGVpciBmb2xsb3dpbmcgdXBkYXRlIG5vZGUsIHN1Y2ggdGhhdFxuICAgIC8vIGFwcGVuZENoaWxkIGNhbiBpbnNlcnQgdGhlIG1hdGVyaWFsaXplZCBlbnRlciBub2RlIGJlZm9yZSB0aGlzIG5vZGUsXG4gICAgLy8gcmF0aGVyIHRoYW4gYXQgdGhlIGVuZCBvZiB0aGUgcGFyZW50IG5vZGUuXG4gICAgZm9yICh2YXIgaTAgPSAwLCBpMSA9IDAsIHByZXZpb3VzLCBuZXh0OyBpMCA8IGRhdGFMZW5ndGg7ICsraTApIHtcbiAgICAgIGlmIChwcmV2aW91cyA9IGVudGVyR3JvdXBbaTBdKSB7XG4gICAgICAgIGlmIChpMCA+PSBpMSkgaTEgPSBpMCArIDE7XG4gICAgICAgIHdoaWxlICghKG5leHQgPSB1cGRhdGVHcm91cFtpMV0pICYmICsraTEgPCBkYXRhTGVuZ3RoKTtcbiAgICAgICAgcHJldmlvdXMuX25leHQgPSBuZXh0IHx8IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlID0gbmV3IFNlbGVjdGlvbih1cGRhdGUsIHBhcmVudHMpO1xuICB1cGRhdGUuX2VudGVyID0gZW50ZXI7XG4gIHVwZGF0ZS5fZXhpdCA9IGV4aXQ7XG4gIHJldHVybiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoIWNvbXBhcmUpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgZnVuY3Rpb24gY29tcGFyZU5vZGUoYSwgYikge1xuICAgIHJldHVybiBhICYmIGIgPyBjb21wYXJlKGEuX19kYXRhX18sIGIuX19kYXRhX18pIDogIWEgLSAhYjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHNvcnRncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHNvcnRncm91cCA9IHNvcnRncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNvcnRncm91cFtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvcnRncm91cC5zb3J0KGNvbXBhcmVOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHNvcnRncm91cHMsIHRoaXMuX3BhcmVudHMpLm9yZGVyKCk7XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZyhhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4uL25hbWVzcGFjZS5qc1wiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHYpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKTtcbiAgICByZXR1cm4gZnVsbG5hbWUubG9jYWxcbiAgICAgICAgPyBub2RlLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbClcbiAgICAgICAgOiBub2RlLmdldEF0dHJpYnV0ZShmdWxsbmFtZSk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkpKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLm93bmVyRG9jdW1lbnQgJiYgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSAvLyBub2RlIGlzIGEgTm9kZVxuICAgICAgfHwgKG5vZGUuZG9jdW1lbnQgJiYgbm9kZSkgLy8gbm9kZSBpcyBhIFdpbmRvd1xuICAgICAgfHwgbm9kZS5kZWZhdWx0VmlldzsgLy8gbm9kZSBpcyBhIERvY3VtZW50XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvdy5qc1wiO1xuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgZWxzZSB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHYsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gc3R5bGVSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBzdHlsZUZ1bmN0aW9uXG4gICAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQpKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSlcbiAgICAgIDogc3R5bGVWYWx1ZSh0aGlzLm5vZGUoKSwgbmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZVZhbHVlKG5vZGUsIG5hbWUpIHtcbiAgcmV0dXJuIG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKVxuICAgICAgfHwgZGVmYXVsdFZpZXcobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gcHJvcGVydHlSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZGVsZXRlIHRoaXNbbmFtZV07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5Q29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXNbbmFtZV0gPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgIGVsc2UgdGhpc1tuYW1lXSA9IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHByb3BlcnR5UmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHByb3BlcnR5RnVuY3Rpb25cbiAgICAgICAgICA6IHByb3BlcnR5Q29uc3RhbnQpKG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKClbbmFtZV07XG59XG4iLCJmdW5jdGlvbiBjbGFzc0FycmF5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnRyaW0oKS5zcGxpdCgvXnxcXHMrLyk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzTGlzdChub2RlKSB7XG4gIHJldHVybiBub2RlLmNsYXNzTGlzdCB8fCBuZXcgQ2xhc3NMaXN0KG5vZGUpO1xufVxuXG5mdW5jdGlvbiBDbGFzc0xpc3Qobm9kZSkge1xuICB0aGlzLl9ub2RlID0gbm9kZTtcbiAgdGhpcy5fbmFtZXMgPSBjbGFzc0FycmF5KG5vZGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIik7XG59XG5cbkNsYXNzTGlzdC5wcm90b3R5cGUgPSB7XG4gIGFkZDogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnB1c2gobmFtZSk7XG4gICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICBpZiAoaSA+PSAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5zcGxpY2UoaSwgMSk7XG4gICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gIH0sXG4gIGNvbnRhaW5zOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSkgPj0gMDtcbiAgfVxufTtcblxuZnVuY3Rpb24gY2xhc3NlZEFkZChub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5hZGQobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkUmVtb3ZlKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LnJlbW92ZShuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRUcnVlKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjbGFzc2VkQWRkKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZEZhbHNlKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjbGFzc2VkUmVtb3ZlKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZEZ1bmN0aW9uKG5hbWVzLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgKHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgPyBjbGFzc2VkQWRkIDogY2xhc3NlZFJlbW92ZSkodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgbmFtZXMgPSBjbGFzc0FycmF5KG5hbWUgKyBcIlwiKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbGlzdCA9IGNsYXNzTGlzdCh0aGlzLm5vZGUoKSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFsaXN0LmNvbnRhaW5zKG5hbWVzW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gY2xhc3NlZEZ1bmN0aW9uIDogdmFsdWVcbiAgICAgID8gY2xhc3NlZFRydWVcbiAgICAgIDogY2xhc3NlZEZhbHNlKShuYW1lcywgdmFsdWUpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRSZW1vdmUoKSB7XG4gIHRoaXMudGV4dENvbnRlbnQgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gdGV4dFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gdGV4dEZ1bmN0aW9uXG4gICAgICAgICAgOiB0ZXh0Q29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkudGV4dENvbnRlbnQ7XG59XG4iLCJmdW5jdGlvbiBodG1sUmVtb3ZlKCkge1xuICB0aGlzLmlubmVySFRNTCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGh0bWxDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaHRtbEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IGh0bWxSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGh0bWxGdW5jdGlvblxuICAgICAgICAgIDogaHRtbENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLmlubmVySFRNTDtcbn1cbiIsImZ1bmN0aW9uIHJhaXNlKCkge1xuICBpZiAodGhpcy5uZXh0U2libGluZykgdGhpcy5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyYWlzZSk7XG59XG4iLCJmdW5jdGlvbiBsb3dlcigpIHtcbiAgaWYgKHRoaXMucHJldmlvdXNTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMsIHRoaXMucGFyZW50Tm9kZS5maXJzdENoaWxkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gobG93ZXIpO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3IuanNcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3IuanNcIjtcblxuZnVuY3Rpb24gY29uc3RhbnROdWxsKCkge1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgYmVmb3JlKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSksXG4gICAgICBzZWxlY3QgPSBiZWZvcmUgPT0gbnVsbCA/IGNvbnN0YW50TnVsbCA6IHR5cGVvZiBiZWZvcmUgPT09IFwiZnVuY3Rpb25cIiA/IGJlZm9yZSA6IHNlbGVjdG9yKGJlZm9yZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHNlbGVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IG51bGwpO1xuICB9KTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyZW1vdmUpO1xufVxuIiwiZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lU2hhbGxvdygpIHtcbiAgdmFyIGNsb25lID0gdGhpcy5jbG9uZU5vZGUoZmFsc2UpLCBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIHJldHVybiBwYXJlbnQgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNsb25lLCB0aGlzLm5leHRTaWJsaW5nKSA6IGNsb25lO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVEZWVwKCkge1xuICB2YXIgY2xvbmUgPSB0aGlzLmNsb25lTm9kZSh0cnVlKSwgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICByZXR1cm4gcGFyZW50ID8gcGFyZW50Lmluc2VydEJlZm9yZShjbG9uZSwgdGhpcy5uZXh0U2libGluZykgOiBjbG9uZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVlcCkge1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZGVlcCA/IHNlbGVjdGlvbl9jbG9uZURlZXAgOiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KTtcbn1cbiIsImZ1bmN0aW9uIGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lcikge1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIGV2ZW50LCB0aGlzLl9fZGF0YV9fKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25SZW1vdmUodHlwZW5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbjtcbiAgICBpZiAoIW9uKSByZXR1cm47XG4gICAgZm9yICh2YXIgaiA9IDAsIGkgPSAtMSwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgaWYgKG8gPSBvbltqXSwgKCF0eXBlbmFtZS50eXBlIHx8IG8udHlwZSA9PT0gdHlwZW5hbWUudHlwZSkgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8ub3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvblsrK2ldID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCsraSkgb24ubGVuZ3RoID0gaTtcbiAgICBlbHNlIGRlbGV0ZSB0aGlzLl9fb247XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uQWRkKHR5cGVuYW1lLCB2YWx1ZSwgb3B0aW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uLCBvLCBsaXN0ZW5lciA9IGNvbnRleHRMaXN0ZW5lcih2YWx1ZSk7XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgICAgaWYgKChvID0gb25bal0pLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8ub3B0aW9ucyk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIgPSBsaXN0ZW5lciwgby5vcHRpb25zID0gb3B0aW9ucyk7XG4gICAgICAgIG8udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIodHlwZW5hbWUudHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpO1xuICAgIG8gPSB7dHlwZTogdHlwZW5hbWUudHlwZSwgbmFtZTogdHlwZW5hbWUubmFtZSwgdmFsdWU6IHZhbHVlLCBsaXN0ZW5lcjogbGlzdGVuZXIsIG9wdGlvbnM6IG9wdGlvbnN9O1xuICAgIGlmICghb24pIHRoaXMuX19vbiA9IFtvXTtcbiAgICBlbHNlIG9uLnB1c2gobyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGVuYW1lLCB2YWx1ZSwgb3B0aW9ucykge1xuICB2YXIgdHlwZW5hbWVzID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiKSwgaSwgbiA9IHR5cGVuYW1lcy5sZW5ndGgsIHQ7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG9uID0gdGhpcy5ub2RlKCkuX19vbjtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKGkgPSAwLCBvID0gb25bal07IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKCh0ID0gdHlwZW5hbWVzW2ldKS50eXBlID09PSBvLnR5cGUgJiYgdC5uYW1lID09PSBvLm5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gby52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBvbiA9IHZhbHVlID8gb25BZGQgOiBvblJlbW92ZTtcbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgdGhpcy5lYWNoKG9uKHR5cGVuYW1lc1tpXSwgdmFsdWUsIG9wdGlvbnMpKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvdy5qc1wiO1xuXG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50KG5vZGUsIHR5cGUsIHBhcmFtcykge1xuICB2YXIgd2luZG93ID0gZGVmYXVsdFZpZXcobm9kZSksXG4gICAgICBldmVudCA9IHdpbmRvdy5DdXN0b21FdmVudDtcblxuICBpZiAodHlwZW9mIGV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBldmVudCA9IG5ldyBldmVudCh0eXBlLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7XG4gICAgaWYgKHBhcmFtcykgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSksIGV2ZW50LmRldGFpbCA9IHBhcmFtcy5kZXRhaWw7XG4gICAgZWxzZSBldmVudC5pbml0RXZlbnQodHlwZSwgZmFsc2UsIGZhbHNlKTtcbiAgfVxuXG4gIG5vZGUuZGlzcGF0Y2hFdmVudChldmVudCk7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoQ29uc3RhbnQodHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaEZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGRpc3BhdGNoRnVuY3Rpb25cbiAgICAgIDogZGlzcGF0Y2hDb25zdGFudCkodHlwZSwgcGFyYW1zKSk7XG59XG4iLCJpbXBvcnQgc2VsZWN0aW9uX3NlbGVjdCBmcm9tIFwiLi9zZWxlY3QuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2VsZWN0QWxsIGZyb20gXCIuL3NlbGVjdEFsbC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3RDaGlsZCBmcm9tIFwiLi9zZWxlY3RDaGlsZC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3RDaGlsZHJlbiBmcm9tIFwiLi9zZWxlY3RDaGlsZHJlbi5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9maWx0ZXIgZnJvbSBcIi4vZmlsdGVyLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2RhdGEgZnJvbSBcIi4vZGF0YS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9lbnRlciBmcm9tIFwiLi9lbnRlci5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9leGl0IGZyb20gXCIuL2V4aXQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fam9pbiBmcm9tIFwiLi9qb2luLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX21lcmdlIGZyb20gXCIuL21lcmdlLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX29yZGVyIGZyb20gXCIuL29yZGVyLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NvcnQgZnJvbSBcIi4vc29ydC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9jYWxsIGZyb20gXCIuL2NhbGwuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fbm9kZXMgZnJvbSBcIi4vbm9kZXMuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fbm9kZSBmcm9tIFwiLi9ub2RlLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NpemUgZnJvbSBcIi4vc2l6ZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9lbXB0eSBmcm9tIFwiLi9lbXB0eS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9lYWNoIGZyb20gXCIuL2VhY2guanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXR0ciBmcm9tIFwiLi9hdHRyLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3N0eWxlIGZyb20gXCIuL3N0eWxlLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3Byb3BlcnR5IGZyb20gXCIuL3Byb3BlcnR5LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NsYXNzZWQgZnJvbSBcIi4vY2xhc3NlZC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl90ZXh0IGZyb20gXCIuL3RleHQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25faHRtbCBmcm9tIFwiLi9odG1sLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JhaXNlIGZyb20gXCIuL3JhaXNlLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2xvd2VyIGZyb20gXCIuL2xvd2VyLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2FwcGVuZCBmcm9tIFwiLi9hcHBlbmQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25faW5zZXJ0IGZyb20gXCIuL2luc2VydC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2Nsb25lIGZyb20gXCIuL2Nsb25lLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2RhdHVtIGZyb20gXCIuL2RhdHVtLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX29uIGZyb20gXCIuL29uLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2Rpc3BhdGNoIGZyb20gXCIuL2Rpc3BhdGNoLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2l0ZXJhdG9yIGZyb20gXCIuL2l0ZXJhdG9yLmpzXCI7XG5cbmV4cG9ydCB2YXIgcm9vdCA9IFtudWxsXTtcblxuZXhwb3J0IGZ1bmN0aW9uIFNlbGVjdGlvbihncm91cHMsIHBhcmVudHMpIHtcbiAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbihbW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF1dLCByb290KTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX3NlbGVjdGlvbigpIHtcbiAgcmV0dXJuIHRoaXM7XG59XG5cblNlbGVjdGlvbi5wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogU2VsZWN0aW9uLFxuICBzZWxlY3Q6IHNlbGVjdGlvbl9zZWxlY3QsXG4gIHNlbGVjdEFsbDogc2VsZWN0aW9uX3NlbGVjdEFsbCxcbiAgc2VsZWN0Q2hpbGQ6IHNlbGVjdGlvbl9zZWxlY3RDaGlsZCxcbiAgc2VsZWN0Q2hpbGRyZW46IHNlbGVjdGlvbl9zZWxlY3RDaGlsZHJlbixcbiAgZmlsdGVyOiBzZWxlY3Rpb25fZmlsdGVyLFxuICBkYXRhOiBzZWxlY3Rpb25fZGF0YSxcbiAgZW50ZXI6IHNlbGVjdGlvbl9lbnRlcixcbiAgZXhpdDogc2VsZWN0aW9uX2V4aXQsXG4gIGpvaW46IHNlbGVjdGlvbl9qb2luLFxuICBtZXJnZTogc2VsZWN0aW9uX21lcmdlLFxuICBzZWxlY3Rpb246IHNlbGVjdGlvbl9zZWxlY3Rpb24sXG4gIG9yZGVyOiBzZWxlY3Rpb25fb3JkZXIsXG4gIHNvcnQ6IHNlbGVjdGlvbl9zb3J0LFxuICBjYWxsOiBzZWxlY3Rpb25fY2FsbCxcbiAgbm9kZXM6IHNlbGVjdGlvbl9ub2RlcyxcbiAgbm9kZTogc2VsZWN0aW9uX25vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9zaXplLFxuICBlbXB0eTogc2VsZWN0aW9uX2VtcHR5LFxuICBlYWNoOiBzZWxlY3Rpb25fZWFjaCxcbiAgYXR0cjogc2VsZWN0aW9uX2F0dHIsXG4gIHN0eWxlOiBzZWxlY3Rpb25fc3R5bGUsXG4gIHByb3BlcnR5OiBzZWxlY3Rpb25fcHJvcGVydHksXG4gIGNsYXNzZWQ6IHNlbGVjdGlvbl9jbGFzc2VkLFxuICB0ZXh0OiBzZWxlY3Rpb25fdGV4dCxcbiAgaHRtbDogc2VsZWN0aW9uX2h0bWwsXG4gIHJhaXNlOiBzZWxlY3Rpb25fcmFpc2UsXG4gIGxvd2VyOiBzZWxlY3Rpb25fbG93ZXIsXG4gIGFwcGVuZDogc2VsZWN0aW9uX2FwcGVuZCxcbiAgaW5zZXJ0OiBzZWxlY3Rpb25faW5zZXJ0LFxuICByZW1vdmU6IHNlbGVjdGlvbl9yZW1vdmUsXG4gIGNsb25lOiBzZWxlY3Rpb25fY2xvbmUsXG4gIGRhdHVtOiBzZWxlY3Rpb25fZGF0dW0sXG4gIG9uOiBzZWxlY3Rpb25fb24sXG4gIGRpc3BhdGNoOiBzZWxlY3Rpb25fZGlzcGF0Y2gsXG4gIFtTeW1ib2wuaXRlcmF0b3JdOiBzZWxlY3Rpb25faXRlcmF0b3Jcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNlbGVjdGlvbjtcbiIsImltcG9ydCB7U2VsZWN0aW9uLCByb290fSBmcm9tIFwiLi9zZWxlY3Rpb24vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcildXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICA6IG5ldyBTZWxlY3Rpb24oW1tzZWxlY3Rvcl1dLCByb290KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnN0cnVjdG9yLCBmYWN0b3J5LCBwcm90b3R5cGUpIHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gZmFjdG9yeS5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gIHByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKHBhcmVudCwgZGVmaW5pdGlvbikge1xuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQucHJvdG90eXBlKTtcbiAgZm9yICh2YXIga2V5IGluIGRlZmluaXRpb24pIHByb3RvdHlwZVtrZXldID0gZGVmaW5pdGlvbltrZXldO1xuICByZXR1cm4gcHJvdG90eXBlO1xufVxuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBDb2xvcigpIHt9XG5cbmV4cG9ydCB2YXIgZGFya2VyID0gMC43O1xuZXhwb3J0IHZhciBicmlnaHRlciA9IDEgLyBkYXJrZXI7XG5cbnZhciByZUkgPSBcIlxcXFxzKihbKy1dP1xcXFxkKylcXFxccypcIixcbiAgICByZU4gPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KVxcXFxzKlwiLFxuICAgIHJlUCA9IFwiXFxcXHMqKFsrLV0/XFxcXGQqXFxcXC4/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pJVxcXFxzKlwiLFxuICAgIHJlSGV4ID0gL14jKFswLTlhLWZdezMsOH0pJC8sXG4gICAgcmVSZ2JJbnRlZ2VyID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlSSwgcmVJLCByZUldICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlUCwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JhSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiYVxcXFwoXCIgKyBbcmVJLCByZUksIHJlSSwgcmVOXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYVBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlUCwgcmVQLCByZVAsIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZUhzbFBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXmhzbFxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUF0gKyBcIlxcXFwpJFwiKSxcbiAgICByZUhzbGFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xhXFxcXChcIiArIFtyZU4sIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIik7XG5cbnZhciBuYW1lZCA9IHtcbiAgYWxpY2VibHVlOiAweGYwZjhmZixcbiAgYW50aXF1ZXdoaXRlOiAweGZhZWJkNyxcbiAgYXF1YTogMHgwMGZmZmYsXG4gIGFxdWFtYXJpbmU6IDB4N2ZmZmQ0LFxuICBhenVyZTogMHhmMGZmZmYsXG4gIGJlaWdlOiAweGY1ZjVkYyxcbiAgYmlzcXVlOiAweGZmZTRjNCxcbiAgYmxhY2s6IDB4MDAwMDAwLFxuICBibGFuY2hlZGFsbW9uZDogMHhmZmViY2QsXG4gIGJsdWU6IDB4MDAwMGZmLFxuICBibHVldmlvbGV0OiAweDhhMmJlMixcbiAgYnJvd246IDB4YTUyYTJhLFxuICBidXJseXdvb2Q6IDB4ZGViODg3LFxuICBjYWRldGJsdWU6IDB4NWY5ZWEwLFxuICBjaGFydHJldXNlOiAweDdmZmYwMCxcbiAgY2hvY29sYXRlOiAweGQyNjkxZSxcbiAgY29yYWw6IDB4ZmY3ZjUwLFxuICBjb3JuZmxvd2VyYmx1ZTogMHg2NDk1ZWQsXG4gIGNvcm5zaWxrOiAweGZmZjhkYyxcbiAgY3JpbXNvbjogMHhkYzE0M2MsXG4gIGN5YW46IDB4MDBmZmZmLFxuICBkYXJrYmx1ZTogMHgwMDAwOGIsXG4gIGRhcmtjeWFuOiAweDAwOGI4YixcbiAgZGFya2dvbGRlbnJvZDogMHhiODg2MGIsXG4gIGRhcmtncmF5OiAweGE5YTlhOSxcbiAgZGFya2dyZWVuOiAweDAwNjQwMCxcbiAgZGFya2dyZXk6IDB4YTlhOWE5LFxuICBkYXJra2hha2k6IDB4YmRiNzZiLFxuICBkYXJrbWFnZW50YTogMHg4YjAwOGIsXG4gIGRhcmtvbGl2ZWdyZWVuOiAweDU1NmIyZixcbiAgZGFya29yYW5nZTogMHhmZjhjMDAsXG4gIGRhcmtvcmNoaWQ6IDB4OTkzMmNjLFxuICBkYXJrcmVkOiAweDhiMDAwMCxcbiAgZGFya3NhbG1vbjogMHhlOTk2N2EsXG4gIGRhcmtzZWFncmVlbjogMHg4ZmJjOGYsXG4gIGRhcmtzbGF0ZWJsdWU6IDB4NDgzZDhiLFxuICBkYXJrc2xhdGVncmF5OiAweDJmNGY0ZixcbiAgZGFya3NsYXRlZ3JleTogMHgyZjRmNGYsXG4gIGRhcmt0dXJxdW9pc2U6IDB4MDBjZWQxLFxuICBkYXJrdmlvbGV0OiAweDk0MDBkMyxcbiAgZGVlcHBpbms6IDB4ZmYxNDkzLFxuICBkZWVwc2t5Ymx1ZTogMHgwMGJmZmYsXG4gIGRpbWdyYXk6IDB4Njk2OTY5LFxuICBkaW1ncmV5OiAweDY5Njk2OSxcbiAgZG9kZ2VyYmx1ZTogMHgxZTkwZmYsXG4gIGZpcmVicmljazogMHhiMjIyMjIsXG4gIGZsb3JhbHdoaXRlOiAweGZmZmFmMCxcbiAgZm9yZXN0Z3JlZW46IDB4MjI4YjIyLFxuICBmdWNoc2lhOiAweGZmMDBmZixcbiAgZ2FpbnNib3JvOiAweGRjZGNkYyxcbiAgZ2hvc3R3aGl0ZTogMHhmOGY4ZmYsXG4gIGdvbGQ6IDB4ZmZkNzAwLFxuICBnb2xkZW5yb2Q6IDB4ZGFhNTIwLFxuICBncmF5OiAweDgwODA4MCxcbiAgZ3JlZW46IDB4MDA4MDAwLFxuICBncmVlbnllbGxvdzogMHhhZGZmMmYsXG4gIGdyZXk6IDB4ODA4MDgwLFxuICBob25leWRldzogMHhmMGZmZjAsXG4gIGhvdHBpbms6IDB4ZmY2OWI0LFxuICBpbmRpYW5yZWQ6IDB4Y2Q1YzVjLFxuICBpbmRpZ286IDB4NGIwMDgyLFxuICBpdm9yeTogMHhmZmZmZjAsXG4gIGtoYWtpOiAweGYwZTY4YyxcbiAgbGF2ZW5kZXI6IDB4ZTZlNmZhLFxuICBsYXZlbmRlcmJsdXNoOiAweGZmZjBmNSxcbiAgbGF3bmdyZWVuOiAweDdjZmMwMCxcbiAgbGVtb25jaGlmZm9uOiAweGZmZmFjZCxcbiAgbGlnaHRibHVlOiAweGFkZDhlNixcbiAgbGlnaHRjb3JhbDogMHhmMDgwODAsXG4gIGxpZ2h0Y3lhbjogMHhlMGZmZmYsXG4gIGxpZ2h0Z29sZGVucm9keWVsbG93OiAweGZhZmFkMixcbiAgbGlnaHRncmF5OiAweGQzZDNkMyxcbiAgbGlnaHRncmVlbjogMHg5MGVlOTAsXG4gIGxpZ2h0Z3JleTogMHhkM2QzZDMsXG4gIGxpZ2h0cGluazogMHhmZmI2YzEsXG4gIGxpZ2h0c2FsbW9uOiAweGZmYTA3YSxcbiAgbGlnaHRzZWFncmVlbjogMHgyMGIyYWEsXG4gIGxpZ2h0c2t5Ymx1ZTogMHg4N2NlZmEsXG4gIGxpZ2h0c2xhdGVncmF5OiAweDc3ODg5OSxcbiAgbGlnaHRzbGF0ZWdyZXk6IDB4Nzc4ODk5LFxuICBsaWdodHN0ZWVsYmx1ZTogMHhiMGM0ZGUsXG4gIGxpZ2h0eWVsbG93OiAweGZmZmZlMCxcbiAgbGltZTogMHgwMGZmMDAsXG4gIGxpbWVncmVlbjogMHgzMmNkMzIsXG4gIGxpbmVuOiAweGZhZjBlNixcbiAgbWFnZW50YTogMHhmZjAwZmYsXG4gIG1hcm9vbjogMHg4MDAwMDAsXG4gIG1lZGl1bWFxdWFtYXJpbmU6IDB4NjZjZGFhLFxuICBtZWRpdW1ibHVlOiAweDAwMDBjZCxcbiAgbWVkaXVtb3JjaGlkOiAweGJhNTVkMyxcbiAgbWVkaXVtcHVycGxlOiAweDkzNzBkYixcbiAgbWVkaXVtc2VhZ3JlZW46IDB4M2NiMzcxLFxuICBtZWRpdW1zbGF0ZWJsdWU6IDB4N2I2OGVlLFxuICBtZWRpdW1zcHJpbmdncmVlbjogMHgwMGZhOWEsXG4gIG1lZGl1bXR1cnF1b2lzZTogMHg0OGQxY2MsXG4gIG1lZGl1bXZpb2xldHJlZDogMHhjNzE1ODUsXG4gIG1pZG5pZ2h0Ymx1ZTogMHgxOTE5NzAsXG4gIG1pbnRjcmVhbTogMHhmNWZmZmEsXG4gIG1pc3R5cm9zZTogMHhmZmU0ZTEsXG4gIG1vY2Nhc2luOiAweGZmZTRiNSxcbiAgbmF2YWpvd2hpdGU6IDB4ZmZkZWFkLFxuICBuYXZ5OiAweDAwMDA4MCxcbiAgb2xkbGFjZTogMHhmZGY1ZTYsXG4gIG9saXZlOiAweDgwODAwMCxcbiAgb2xpdmVkcmFiOiAweDZiOGUyMyxcbiAgb3JhbmdlOiAweGZmYTUwMCxcbiAgb3JhbmdlcmVkOiAweGZmNDUwMCxcbiAgb3JjaGlkOiAweGRhNzBkNixcbiAgcGFsZWdvbGRlbnJvZDogMHhlZWU4YWEsXG4gIHBhbGVncmVlbjogMHg5OGZiOTgsXG4gIHBhbGV0dXJxdW9pc2U6IDB4YWZlZWVlLFxuICBwYWxldmlvbGV0cmVkOiAweGRiNzA5MyxcbiAgcGFwYXlhd2hpcDogMHhmZmVmZDUsXG4gIHBlYWNocHVmZjogMHhmZmRhYjksXG4gIHBlcnU6IDB4Y2Q4NTNmLFxuICBwaW5rOiAweGZmYzBjYixcbiAgcGx1bTogMHhkZGEwZGQsXG4gIHBvd2RlcmJsdWU6IDB4YjBlMGU2LFxuICBwdXJwbGU6IDB4ODAwMDgwLFxuICByZWJlY2NhcHVycGxlOiAweDY2MzM5OSxcbiAgcmVkOiAweGZmMDAwMCxcbiAgcm9zeWJyb3duOiAweGJjOGY4ZixcbiAgcm95YWxibHVlOiAweDQxNjllMSxcbiAgc2FkZGxlYnJvd246IDB4OGI0NTEzLFxuICBzYWxtb246IDB4ZmE4MDcyLFxuICBzYW5keWJyb3duOiAweGY0YTQ2MCxcbiAgc2VhZ3JlZW46IDB4MmU4YjU3LFxuICBzZWFzaGVsbDogMHhmZmY1ZWUsXG4gIHNpZW5uYTogMHhhMDUyMmQsXG4gIHNpbHZlcjogMHhjMGMwYzAsXG4gIHNreWJsdWU6IDB4ODdjZWViLFxuICBzbGF0ZWJsdWU6IDB4NmE1YWNkLFxuICBzbGF0ZWdyYXk6IDB4NzA4MDkwLFxuICBzbGF0ZWdyZXk6IDB4NzA4MDkwLFxuICBzbm93OiAweGZmZmFmYSxcbiAgc3ByaW5nZ3JlZW46IDB4MDBmZjdmLFxuICBzdGVlbGJsdWU6IDB4NDY4MmI0LFxuICB0YW46IDB4ZDJiNDhjLFxuICB0ZWFsOiAweDAwODA4MCxcbiAgdGhpc3RsZTogMHhkOGJmZDgsXG4gIHRvbWF0bzogMHhmZjYzNDcsXG4gIHR1cnF1b2lzZTogMHg0MGUwZDAsXG4gIHZpb2xldDogMHhlZTgyZWUsXG4gIHdoZWF0OiAweGY1ZGViMyxcbiAgd2hpdGU6IDB4ZmZmZmZmLFxuICB3aGl0ZXNtb2tlOiAweGY1ZjVmNSxcbiAgeWVsbG93OiAweGZmZmYwMCxcbiAgeWVsbG93Z3JlZW46IDB4OWFjZDMyXG59O1xuXG5kZWZpbmUoQ29sb3IsIGNvbG9yLCB7XG4gIGNvcHk6IGZ1bmN0aW9uKGNoYW5uZWxzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IHRoaXMuY29uc3RydWN0b3IsIHRoaXMsIGNoYW5uZWxzKTtcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpLmRpc3BsYXlhYmxlKCk7XG4gIH0sXG4gIGhleDogY29sb3JfZm9ybWF0SGV4LCAvLyBEZXByZWNhdGVkISBVc2UgY29sb3IuZm9ybWF0SGV4LlxuICBmb3JtYXRIZXg6IGNvbG9yX2Zvcm1hdEhleCxcbiAgZm9ybWF0SHNsOiBjb2xvcl9mb3JtYXRIc2wsXG4gIGZvcm1hdFJnYjogY29sb3JfZm9ybWF0UmdiLFxuICB0b1N0cmluZzogY29sb3JfZm9ybWF0UmdiXG59KTtcblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0SGV4KCkge1xuICByZXR1cm4gdGhpcy5yZ2IoKS5mb3JtYXRIZXgoKTtcbn1cblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0SHNsKCkge1xuICByZXR1cm4gaHNsQ29udmVydCh0aGlzKS5mb3JtYXRIc2woKTtcbn1cblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0UmdiKCkge1xuICByZXR1cm4gdGhpcy5yZ2IoKS5mb3JtYXRSZ2IoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29sb3IoZm9ybWF0KSB7XG4gIHZhciBtLCBsO1xuICBmb3JtYXQgPSAoZm9ybWF0ICsgXCJcIikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAobSA9IHJlSGV4LmV4ZWMoZm9ybWF0KSkgPyAobCA9IG1bMV0ubGVuZ3RoLCBtID0gcGFyc2VJbnQobVsxXSwgMTYpLCBsID09PSA2ID8gcmdibihtKSAvLyAjZmYwMDAwXG4gICAgICA6IGwgPT09IDMgPyBuZXcgUmdiKChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4ZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgobSAmIDB4ZikgPDwgNCkgfCAobSAmIDB4ZiksIDEpIC8vICNmMDBcbiAgICAgIDogbCA9PT0gOCA/IHJnYmEobSA+PiAyNCAmIDB4ZmYsIG0gPj4gMTYgJiAweGZmLCBtID4+IDggJiAweGZmLCAobSAmIDB4ZmYpIC8gMHhmZikgLy8gI2ZmMDAwMDAwXG4gICAgICA6IGwgPT09IDQgPyByZ2JhKChtID4+IDEyICYgMHhmKSB8IChtID4+IDggJiAweGYwKSwgKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHhmMCksIChtID4+IDQgJiAweGYpIHwgKG0gJiAweGYwKSwgKCgobSAmIDB4ZikgPDwgNCkgfCAobSAmIDB4ZikpIC8gMHhmZikgLy8gI2YwMDBcbiAgICAgIDogbnVsbCkgLy8gaW52YWxpZCBoZXhcbiAgICAgIDogKG0gPSByZVJnYkludGVnZXIuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSwgbVsyXSwgbVszXSwgMSkgLy8gcmdiKDI1NSwgMCwgMClcbiAgICAgIDogKG0gPSByZVJnYlBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgMSkgLy8gcmdiKDEwMCUsIDAlLCAwJSlcbiAgICAgIDogKG0gPSByZVJnYmFJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0sIG1bMl0sIG1bM10sIG1bNF0pIC8vIHJnYmEoMjU1LCAwLCAwLCAxKVxuICAgICAgOiAobSA9IHJlUmdiYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgbVs0XSkgLy8gcmdiKDEwMCUsIDAlLCAwJSwgMSlcbiAgICAgIDogKG0gPSByZUhzbFBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgMSkgLy8gaHNsKDEyMCwgNTAlLCA1MCUpXG4gICAgICA6IChtID0gcmVIc2xhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCBtWzRdKSAvLyBoc2xhKDEyMCwgNTAlLCA1MCUsIDEpXG4gICAgICA6IG5hbWVkLmhhc093blByb3BlcnR5KGZvcm1hdCkgPyByZ2JuKG5hbWVkW2Zvcm1hdF0pIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgICA6IGZvcm1hdCA9PT0gXCJ0cmFuc3BhcmVudFwiID8gbmV3IFJnYihOYU4sIE5hTiwgTmFOLCAwKVxuICAgICAgOiBudWxsO1xufVxuXG5mdW5jdGlvbiByZ2JuKG4pIHtcbiAgcmV0dXJuIG5ldyBSZ2IobiA+PiAxNiAmIDB4ZmYsIG4gPj4gOCAmIDB4ZmYsIG4gJiAweGZmLCAxKTtcbn1cblxuZnVuY3Rpb24gcmdiYShyLCBnLCBiLCBhKSB7XG4gIGlmIChhIDw9IDApIHIgPSBnID0gYiA9IE5hTjtcbiAgcmV0dXJuIG5ldyBSZ2IociwgZywgYiwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2JDb252ZXJ0KG8pIHtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgUmdiO1xuICBvID0gby5yZ2IoKTtcbiAgcmV0dXJuIG5ldyBSZ2Ioby5yLCBvLmcsIG8uYiwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gcmdiQ29udmVydChyKSA6IG5ldyBSZ2IociwgZywgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5yID0gK3I7XG4gIHRoaXMuZyA9ICtnO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShSZ2IsIHJnYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKC0wLjUgPD0gdGhpcy5yICYmIHRoaXMuciA8IDI1NS41KVxuICAgICAgICAmJiAoLTAuNSA8PSB0aGlzLmcgJiYgdGhpcy5nIDwgMjU1LjUpXG4gICAgICAgICYmICgtMC41IDw9IHRoaXMuYiAmJiB0aGlzLmIgPCAyNTUuNSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfSxcbiAgaGV4OiByZ2JfZm9ybWF0SGV4LCAvLyBEZXByZWNhdGVkISBVc2UgY29sb3IuZm9ybWF0SGV4LlxuICBmb3JtYXRIZXg6IHJnYl9mb3JtYXRIZXgsXG4gIGZvcm1hdFJnYjogcmdiX2Zvcm1hdFJnYixcbiAgdG9TdHJpbmc6IHJnYl9mb3JtYXRSZ2Jcbn0pKTtcblxuZnVuY3Rpb24gcmdiX2Zvcm1hdEhleCgpIHtcbiAgcmV0dXJuIFwiI1wiICsgaGV4KHRoaXMucikgKyBoZXgodGhpcy5nKSArIGhleCh0aGlzLmIpO1xufVxuXG5mdW5jdGlvbiByZ2JfZm9ybWF0UmdiKCkge1xuICB2YXIgYSA9IHRoaXMub3BhY2l0eTsgYSA9IGlzTmFOKGEpID8gMSA6IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIGEpKTtcbiAgcmV0dXJuIChhID09PSAxID8gXCJyZ2IoXCIgOiBcInJnYmEoXCIpXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLnIpIHx8IDApKSArIFwiLCBcIlxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5nKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuYikgfHwgMCkpXG4gICAgICArIChhID09PSAxID8gXCIpXCIgOiBcIiwgXCIgKyBhICsgXCIpXCIpO1xufVxuXG5mdW5jdGlvbiBoZXgodmFsdWUpIHtcbiAgdmFsdWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodmFsdWUpIHx8IDApKTtcbiAgcmV0dXJuICh2YWx1ZSA8IDE2ID8gXCIwXCIgOiBcIlwiKSArIHZhbHVlLnRvU3RyaW5nKDE2KTtcbn1cblxuZnVuY3Rpb24gaHNsYShoLCBzLCBsLCBhKSB7XG4gIGlmIChhIDw9IDApIGggPSBzID0gbCA9IE5hTjtcbiAgZWxzZSBpZiAobCA8PSAwIHx8IGwgPj0gMSkgaCA9IHMgPSBOYU47XG4gIGVsc2UgaWYgKHMgPD0gMCkgaCA9IE5hTjtcbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBuZXcgSHNsKG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IEhzbDtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBvO1xuICBvID0gby5yZ2IoKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpLFxuICAgICAgbWF4ID0gTWF0aC5tYXgociwgZywgYiksXG4gICAgICBoID0gTmFOLFxuICAgICAgcyA9IG1heCAtIG1pbixcbiAgICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG4gIGlmIChzKSB7XG4gICAgaWYgKHIgPT09IG1heCkgaCA9IChnIC0gYikgLyBzICsgKGcgPCBiKSAqIDY7XG4gICAgZWxzZSBpZiAoZyA9PT0gbWF4KSBoID0gKGIgLSByKSAvIHMgKyAyO1xuICAgIGVsc2UgaCA9IChyIC0gZykgLyBzICsgNDtcbiAgICBzIC89IGwgPCAwLjUgPyBtYXggKyBtaW4gOiAyIC0gbWF4IC0gbWluO1xuICAgIGggKj0gNjA7XG4gIH0gZWxzZSB7XG4gICAgcyA9IGwgPiAwICYmIGwgPCAxID8gMCA6IGg7XG4gIH1cbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaHNsQ29udmVydChoKSA6IG5ldyBIc2woaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBIc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEhzbCwgaHNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoID0gdGhpcy5oICUgMzYwICsgKHRoaXMuaCA8IDApICogMzYwLFxuICAgICAgICBzID0gaXNOYU4oaCkgfHwgaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMsXG4gICAgICAgIGwgPSB0aGlzLmwsXG4gICAgICAgIG0yID0gbCArIChsIDwgMC41ID8gbCA6IDEgLSBsKSAqIHMsXG4gICAgICAgIG0xID0gMiAqIGwgLSBtMjtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGhzbDJyZ2IoaCA+PSAyNDAgPyBoIC0gMjQwIDogaCArIDEyMCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCA8IDEyMCA/IGggKyAyNDAgOiBoIC0gMTIwLCBtMSwgbTIpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoMCA8PSB0aGlzLnMgJiYgdGhpcy5zIDw9IDEgfHwgaXNOYU4odGhpcy5zKSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5sICYmIHRoaXMubCA8PSAxKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9LFxuICBmb3JtYXRIc2w6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhID0gdGhpcy5vcGFjaXR5OyBhID0gaXNOYU4oYSkgPyAxIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgYSkpO1xuICAgIHJldHVybiAoYSA9PT0gMSA/IFwiaHNsKFwiIDogXCJoc2xhKFwiKVxuICAgICAgICArICh0aGlzLmggfHwgMCkgKyBcIiwgXCJcbiAgICAgICAgKyAodGhpcy5zIHx8IDApICogMTAwICsgXCIlLCBcIlxuICAgICAgICArICh0aGlzLmwgfHwgMCkgKiAxMDAgKyBcIiVcIlxuICAgICAgICArIChhID09PSAxID8gXCIpXCIgOiBcIiwgXCIgKyBhICsgXCIpXCIpO1xuICB9XG59KSk7XG5cbi8qIEZyb20gRnZEIDEzLjM3LCBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDMgKi9cbmZ1bmN0aW9uIGhzbDJyZ2IoaCwgbTEsIG0yKSB7XG4gIHJldHVybiAoaCA8IDYwID8gbTEgKyAobTIgLSBtMSkgKiBoIC8gNjBcbiAgICAgIDogaCA8IDE4MCA/IG0yXG4gICAgICA6IGggPCAyNDAgPyBtMSArIChtMiAtIG0xKSAqICgyNDAgLSBoKSAvIDYwXG4gICAgICA6IG0xKSAqIDI1NTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3Rvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IGFycmF5IGZyb20gXCIuLi9hcnJheS5qc1wiO1xuaW1wb3J0IHNlbGVjdG9yQWxsIGZyb20gXCIuLi9zZWxlY3RvckFsbC5qc1wiO1xuXG5mdW5jdGlvbiBhcnJheUFsbChzZWxlY3QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBncm91cCA9IHNlbGVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBncm91cCA9PSBudWxsID8gW10gOiBhcnJheShncm91cCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCA9PT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBhcnJheUFsbChzZWxlY3QpO1xuICBlbHNlIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc3ViZ3JvdXBzLnB1c2goc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBtYXRjaGVyIGZyb20gXCIuLi9tYXRjaGVyLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIGlmICh0eXBlb2YgbWF0Y2ggIT09IFwiZnVuY3Rpb25cIikgbWF0Y2ggPSBtYXRjaGVyKG1hdGNoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgbWF0Y2guY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpIHtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2UuanNcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZXhpdCB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob25lbnRlciwgb251cGRhdGUsIG9uZXhpdCkge1xuICB2YXIgZW50ZXIgPSB0aGlzLmVudGVyKCksIHVwZGF0ZSA9IHRoaXMsIGV4aXQgPSB0aGlzLmV4aXQoKTtcbiAgZW50ZXIgPSB0eXBlb2Ygb25lbnRlciA9PT0gXCJmdW5jdGlvblwiID8gb25lbnRlcihlbnRlcikgOiBlbnRlci5hcHBlbmQob25lbnRlciArIFwiXCIpO1xuICBpZiAob251cGRhdGUgIT0gbnVsbCkgdXBkYXRlID0gb251cGRhdGUodXBkYXRlKTtcbiAgaWYgKG9uZXhpdCA9PSBudWxsKSBleGl0LnJlbW92ZSgpOyBlbHNlIG9uZXhpdChleGl0KTtcbiAgcmV0dXJuIGVudGVyICYmIHVwZGF0ZSA/IGVudGVyLm1lcmdlKHVwZGF0ZSkub3JkZXIoKSA6IHVwZGF0ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rpb24pIHtcbiAgaWYgKCEoc2VsZWN0aW9uIGluc3RhbmNlb2YgU2VsZWN0aW9uKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBtZXJnZVwiKTtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gc2VsZWN0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAtMSwgbSA9IGdyb3Vwcy5sZW5ndGg7ICsraiA8IG07KSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSBncm91cC5sZW5ndGggLSAxLCBuZXh0ID0gZ3JvdXBbaV0sIG5vZGU7IC0taSA+PSAwOykge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBpZiAobmV4dCAmJiBub2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG5leHQpIF4gNCkgbmV4dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBuZXh0KTtcbiAgICAgICAgbmV4dCA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzWzBdO1xuICBhcmd1bWVudHNbMF0gPSB0aGlzO1xuICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICB2YXIgbm9kZSA9IGdyb3VwW2ldO1xuICAgICAgaWYgKG5vZGUpIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIGxldCBzaXplID0gMDtcbiAgZm9yIChjb25zdCBub2RlIG9mIHRoaXMpICsrc2l6ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICByZXR1cm4gc2l6ZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gIXRoaXMubm9kZSgpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgY2FsbGJhY2suY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5hcHBlbmRDaGlsZChjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5wcm9wZXJ0eShcIl9fZGF0YV9fXCIsIHZhbHVlKVxuICAgICAgOiB0aGlzLm5vZGUoKS5fX2RhdGFfXztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKigpIHtcbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHlpZWxkIG5vZGU7XG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgY29uc3QgcmFkaWFucyA9IE1hdGguUEkgLyAxODA7XG5leHBvcnQgY29uc3QgZGVncmVlcyA9IDE4MCAvIE1hdGguUEk7XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmUuanNcIjtcbmltcG9ydCB7Q29sb3IsIHJnYkNvbnZlcnQsIFJnYn0gZnJvbSBcIi4vY29sb3IuanNcIjtcbmltcG9ydCB7ZGVncmVlcywgcmFkaWFuc30gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG4vLyBodHRwczovL29ic2VydmFibGVocS5jb20vQG1ib3N0b2NrL2xhYi1hbmQtcmdiXG5jb25zdCBLID0gMTgsXG4gICAgWG4gPSAwLjk2NDIyLFxuICAgIFluID0gMSxcbiAgICBabiA9IDAuODI1MjEsXG4gICAgdDAgPSA0IC8gMjksXG4gICAgdDEgPSA2IC8gMjksXG4gICAgdDIgPSAzICogdDEgKiB0MSxcbiAgICB0MyA9IHQxICogdDEgKiB0MTtcblxuZnVuY3Rpb24gbGFiQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgTGFiKSByZXR1cm4gbmV3IExhYihvLmwsIG8uYSwgby5iLCBvLm9wYWNpdHkpO1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIGhjbDJsYWIobyk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSByZ2IybHJnYihvLnIpLFxuICAgICAgZyA9IHJnYjJscmdiKG8uZyksXG4gICAgICBiID0gcmdiMmxyZ2Ioby5iKSxcbiAgICAgIHkgPSB4eXoybGFiKCgwLjIyMjUwNDUgKiByICsgMC43MTY4Nzg2ICogZyArIDAuMDYwNjE2OSAqIGIpIC8gWW4pLCB4LCB6O1xuICBpZiAociA9PT0gZyAmJiBnID09PSBiKSB4ID0geiA9IHk7IGVsc2Uge1xuICAgIHggPSB4eXoybGFiKCgwLjQzNjA3NDcgKiByICsgMC4zODUwNjQ5ICogZyArIDAuMTQzMDgwNCAqIGIpIC8gWG4pO1xuICAgIHogPSB4eXoybGFiKCgwLjAxMzkzMjIgKiByICsgMC4wOTcxMDQ1ICogZyArIDAuNzE0MTczMyAqIGIpIC8gWm4pO1xuICB9XG4gIHJldHVybiBuZXcgTGFiKDExNiAqIHkgLSAxNiwgNTAwICogKHggLSB5KSwgMjAwICogKHkgLSB6KSwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyYXkobCwgb3BhY2l0eSkge1xuICByZXR1cm4gbmV3IExhYihsLCAwLCAwLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gbGFiQ29udmVydChsKSA6IG5ldyBMYWIobCwgYSwgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMuYSA9ICthO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShMYWIsIGxhYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IExhYih0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHkgPSAodGhpcy5sICsgMTYpIC8gMTE2LFxuICAgICAgICB4ID0gaXNOYU4odGhpcy5hKSA/IHkgOiB5ICsgdGhpcy5hIC8gNTAwLFxuICAgICAgICB6ID0gaXNOYU4odGhpcy5iKSA/IHkgOiB5IC0gdGhpcy5iIC8gMjAwO1xuICAgIHggPSBYbiAqIGxhYjJ4eXooeCk7XG4gICAgeSA9IFluICogbGFiMnh5eih5KTtcbiAgICB6ID0gWm4gKiBsYWIyeHl6KHopO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgbHJnYjJyZ2IoIDMuMTMzODU2MSAqIHggLSAxLjYxNjg2NjcgKiB5IC0gMC40OTA2MTQ2ICogeiksXG4gICAgICBscmdiMnJnYigtMC45Nzg3Njg0ICogeCArIDEuOTE2MTQxNSAqIHkgKyAwLjAzMzQ1NDAgKiB6KSxcbiAgICAgIGxyZ2IycmdiKCAwLjA3MTk0NTMgKiB4IC0gMC4yMjg5OTE0ICogeSArIDEuNDA1MjQyNyAqIHopLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuXG5mdW5jdGlvbiB4eXoybGFiKHQpIHtcbiAgcmV0dXJuIHQgPiB0MyA/IE1hdGgucG93KHQsIDEgLyAzKSA6IHQgLyB0MiArIHQwO1xufVxuXG5mdW5jdGlvbiBsYWIyeHl6KHQpIHtcbiAgcmV0dXJuIHQgPiB0MSA/IHQgKiB0ICogdCA6IHQyICogKHQgLSB0MCk7XG59XG5cbmZ1bmN0aW9uIGxyZ2IycmdiKHgpIHtcbiAgcmV0dXJuIDI1NSAqICh4IDw9IDAuMDAzMTMwOCA/IDEyLjkyICogeCA6IDEuMDU1ICogTWF0aC5wb3coeCwgMSAvIDIuNCkgLSAwLjA1NSk7XG59XG5cbmZ1bmN0aW9uIHJnYjJscmdiKHgpIHtcbiAgcmV0dXJuICh4IC89IDI1NSkgPD0gMC4wNDA0NSA/IHggLyAxMi45MiA6IE1hdGgucG93KCh4ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG59XG5cbmZ1bmN0aW9uIGhjbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIG5ldyBIY2woby5oLCBvLmMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIExhYikpIG8gPSBsYWJDb252ZXJ0KG8pO1xuICBpZiAoby5hID09PSAwICYmIG8uYiA9PT0gMCkgcmV0dXJuIG5ldyBIY2woTmFOLCAwIDwgby5sICYmIG8ubCA8IDEwMCA/IDAgOiBOYU4sIG8ubCwgby5vcGFjaXR5KTtcbiAgdmFyIGggPSBNYXRoLmF0YW4yKG8uYiwgby5hKSAqIGRlZ3JlZXM7XG4gIHJldHVybiBuZXcgSGNsKGggPCAwID8gaCArIDM2MCA6IGgsIE1hdGguc3FydChvLmEgKiBvLmEgKyBvLmIgKiBvLmIpLCBvLmwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsY2gobCwgYywgaCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQobCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaGNsQ29udmVydChoKSA6IG5ldyBIY2woaCwgYywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSGNsKGgsIGMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMuYyA9ICtjO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmZ1bmN0aW9uIGhjbDJsYWIobykge1xuICBpZiAoaXNOYU4oby5oKSkgcmV0dXJuIG5ldyBMYWIoby5sLCAwLCAwLCBvLm9wYWNpdHkpO1xuICB2YXIgaCA9IG8uaCAqIHJhZGlhbnM7XG4gIHJldHVybiBuZXcgTGFiKG8ubCwgTWF0aC5jb3MoaCkgKiBvLmMsIE1hdGguc2luKGgpICogby5jLCBvLm9wYWNpdHkpO1xufVxuXG5kZWZpbmUoSGNsLCBoY2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgKyBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBIY2wodGhpcy5oLCB0aGlzLmMsIHRoaXMubCAtIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBoY2wybGFiKHRoaXMpLnJnYigpO1xuICB9XG59KSk7XG4iLCJ2YXIgZnJhbWUgPSAwLCAvLyBpcyBhbiBhbmltYXRpb24gZnJhbWUgcGVuZGluZz9cbiAgICB0aW1lb3V0ID0gMCwgLy8gaXMgYSB0aW1lb3V0IHBlbmRpbmc/XG4gICAgaW50ZXJ2YWwgPSAwLCAvLyBhcmUgYW55IHRpbWVycyBhY3RpdmU/XG4gICAgcG9rZURlbGF5ID0gMTAwMCwgLy8gaG93IGZyZXF1ZW50bHkgd2UgY2hlY2sgZm9yIGNsb2NrIHNrZXdcbiAgICB0YXNrSGVhZCxcbiAgICB0YXNrVGFpbCxcbiAgICBjbG9ja0xhc3QgPSAwLFxuICAgIGNsb2NrTm93ID0gMCxcbiAgICBjbG9ja1NrZXcgPSAwLFxuICAgIGNsb2NrID0gdHlwZW9mIHBlcmZvcm1hbmNlID09PSBcIm9iamVjdFwiICYmIHBlcmZvcm1hbmNlLm5vdyA/IHBlcmZvcm1hbmNlIDogRGF0ZSxcbiAgICBzZXRGcmFtZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpIDogZnVuY3Rpb24oZikgeyBzZXRUaW1lb3V0KGYsIDE3KTsgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIGNsb2NrTm93IHx8IChzZXRGcmFtZShjbGVhck5vdyksIGNsb2NrTm93ID0gY2xvY2subm93KCkgKyBjbG9ja1NrZXcpO1xufVxuXG5mdW5jdGlvbiBjbGVhck5vdygpIHtcbiAgY2xvY2tOb3cgPSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVGltZXIoKSB7XG4gIHRoaXMuX2NhbGwgPVxuICB0aGlzLl90aW1lID1cbiAgdGhpcy5fbmV4dCA9IG51bGw7XG59XG5cblRpbWVyLnByb3RvdHlwZSA9IHRpbWVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRpbWVyLFxuICByZXN0YXJ0OiBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgICB0aW1lID0gKHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWUpICsgKGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5KTtcbiAgICBpZiAoIXRoaXMuX25leHQgJiYgdGFza1RhaWwgIT09IHRoaXMpIHtcbiAgICAgIGlmICh0YXNrVGFpbCkgdGFza1RhaWwuX25leHQgPSB0aGlzO1xuICAgICAgZWxzZSB0YXNrSGVhZCA9IHRoaXM7XG4gICAgICB0YXNrVGFpbCA9IHRoaXM7XG4gICAgfVxuICAgIHRoaXMuX2NhbGwgPSBjYWxsYmFjaztcbiAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICBzbGVlcCgpO1xuICB9LFxuICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2FsbCkge1xuICAgICAgdGhpcy5fY2FsbCA9IG51bGw7XG4gICAgICB0aGlzLl90aW1lID0gSW5maW5pdHk7XG4gICAgICBzbGVlcCgpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgdC5yZXN0YXJ0KGNhbGxiYWNrLCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZXJGbHVzaCgpIHtcbiAgbm93KCk7IC8vIEdldCB0aGUgY3VycmVudCB0aW1lLCBpZiBub3QgYWxyZWFkeSBzZXQuXG4gICsrZnJhbWU7IC8vIFByZXRlbmQgd2XigJl2ZSBzZXQgYW4gYWxhcm0sIGlmIHdlIGhhdmVu4oCZdCBhbHJlYWR5LlxuICB2YXIgdCA9IHRhc2tIZWFkLCBlO1xuICB3aGlsZSAodCkge1xuICAgIGlmICgoZSA9IGNsb2NrTm93IC0gdC5fdGltZSkgPj0gMCkgdC5fY2FsbC5jYWxsKG51bGwsIGUpO1xuICAgIHQgPSB0Ll9uZXh0O1xuICB9XG4gIC0tZnJhbWU7XG59XG5cbmZ1bmN0aW9uIHdha2UoKSB7XG4gIGNsb2NrTm93ID0gKGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpKSArIGNsb2NrU2tldztcbiAgZnJhbWUgPSB0aW1lb3V0ID0gMDtcbiAgdHJ5IHtcbiAgICB0aW1lckZsdXNoKCk7XG4gIH0gZmluYWxseSB7XG4gICAgZnJhbWUgPSAwO1xuICAgIG5hcCgpO1xuICAgIGNsb2NrTm93ID0gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb2tlKCkge1xuICB2YXIgbm93ID0gY2xvY2subm93KCksIGRlbGF5ID0gbm93IC0gY2xvY2tMYXN0O1xuICBpZiAoZGVsYXkgPiBwb2tlRGVsYXkpIGNsb2NrU2tldyAtPSBkZWxheSwgY2xvY2tMYXN0ID0gbm93O1xufVxuXG5mdW5jdGlvbiBuYXAoKSB7XG4gIHZhciB0MCwgdDEgPSB0YXNrSGVhZCwgdDIsIHRpbWUgPSBJbmZpbml0eTtcbiAgd2hpbGUgKHQxKSB7XG4gICAgaWYgKHQxLl9jYWxsKSB7XG4gICAgICBpZiAodGltZSA+IHQxLl90aW1lKSB0aW1lID0gdDEuX3RpbWU7XG4gICAgICB0MCA9IHQxLCB0MSA9IHQxLl9uZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0MiA9IHQxLl9uZXh0LCB0MS5fbmV4dCA9IG51bGw7XG4gICAgICB0MSA9IHQwID8gdDAuX25leHQgPSB0MiA6IHRhc2tIZWFkID0gdDI7XG4gICAgfVxuICB9XG4gIHRhc2tUYWlsID0gdDA7XG4gIHNsZWVwKHRpbWUpO1xufVxuXG5mdW5jdGlvbiBzbGVlcCh0aW1lKSB7XG4gIGlmIChmcmFtZSkgcmV0dXJuOyAvLyBTb29uZXN0IGFsYXJtIGFscmVhZHkgc2V0LCBvciB3aWxsIGJlLlxuICBpZiAodGltZW91dCkgdGltZW91dCA9IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgdmFyIGRlbGF5ID0gdGltZSAtIGNsb2NrTm93OyAvLyBTdHJpY3RseSBsZXNzIHRoYW4gaWYgd2UgcmVjb21wdXRlZCBjbG9ja05vdy5cbiAgaWYgKGRlbGF5ID4gMjQpIHtcbiAgICBpZiAodGltZSA8IEluZmluaXR5KSB0aW1lb3V0ID0gc2V0VGltZW91dCh3YWtlLCB0aW1lIC0gY2xvY2subm93KCkgLSBjbG9ja1NrZXcpO1xuICAgIGlmIChpbnRlcnZhbCkgaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWludGVydmFsKSBjbG9ja0xhc3QgPSBjbG9jay5ub3coKSwgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChwb2tlLCBwb2tlRGVsYXkpO1xuICAgIGZyYW1lID0gMSwgc2V0RnJhbWUod2FrZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7VGltZXJ9IGZyb20gXCIuL3RpbWVyLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgZGVsYXkgPSBkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheTtcbiAgdC5yZXN0YXJ0KGVsYXBzZWQgPT4ge1xuICAgIHQuc3RvcCgpO1xuICAgIGNhbGxiYWNrKGVsYXBzZWQgKyBkZWxheSk7XG4gIH0sIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7dGltZXIsIHRpbWVvdXR9IGZyb20gXCJkMy10aW1lclwiO1xuXG52YXIgZW1wdHlPbiA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJlbmRcIiwgXCJjYW5jZWxcIiwgXCJpbnRlcnJ1cHRcIik7XG52YXIgZW1wdHlUd2VlbiA9IFtdO1xuXG5leHBvcnQgdmFyIENSRUFURUQgPSAwO1xuZXhwb3J0IHZhciBTQ0hFRFVMRUQgPSAxO1xuZXhwb3J0IHZhciBTVEFSVElORyA9IDI7XG5leHBvcnQgdmFyIFNUQVJURUQgPSAzO1xuZXhwb3J0IHZhciBSVU5OSU5HID0gNDtcbmV4cG9ydCB2YXIgRU5ESU5HID0gNTtcbmV4cG9ydCB2YXIgRU5ERUQgPSA2O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lLCBpZCwgaW5kZXgsIGdyb3VwLCB0aW1pbmcpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uO1xuICBpZiAoIXNjaGVkdWxlcykgbm9kZS5fX3RyYW5zaXRpb24gPSB7fTtcbiAgZWxzZSBpZiAoaWQgaW4gc2NoZWR1bGVzKSByZXR1cm47XG4gIGNyZWF0ZShub2RlLCBpZCwge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgaW5kZXg6IGluZGV4LCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgZ3JvdXA6IGdyb3VwLCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgb246IGVtcHR5T24sXG4gICAgdHdlZW46IGVtcHR5VHdlZW4sXG4gICAgdGltZTogdGltaW5nLnRpbWUsXG4gICAgZGVsYXk6IHRpbWluZy5kZWxheSxcbiAgICBkdXJhdGlvbjogdGltaW5nLmR1cmF0aW9uLFxuICAgIGVhc2U6IHRpbWluZy5lYXNlLFxuICAgIHRpbWVyOiBudWxsLFxuICAgIHN0YXRlOiBDUkVBVEVEXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBDUkVBVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBzY2hlZHVsZWRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBTVEFSVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBydW5uaW5nXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGUgfHwgIShzY2hlZHVsZSA9IHNjaGVkdWxlW2lkXSkpIHRocm93IG5ldyBFcnJvcihcInRyYW5zaXRpb24gbm90IGZvdW5kXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZShub2RlLCBpZCwgc2VsZikge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICB0d2VlbjtcblxuICAvLyBJbml0aWFsaXplIHRoZSBzZWxmIHRpbWVyIHdoZW4gdGhlIHRyYW5zaXRpb24gaXMgY3JlYXRlZC5cbiAgLy8gTm90ZSB0aGUgYWN0dWFsIGRlbGF5IGlzIG5vdCBrbm93biB1bnRpbCB0aGUgZmlyc3QgY2FsbGJhY2shXG4gIHNjaGVkdWxlc1tpZF0gPSBzZWxmO1xuICBzZWxmLnRpbWVyID0gdGltZXIoc2NoZWR1bGUsIDAsIHNlbGYudGltZSk7XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUoZWxhcHNlZCkge1xuICAgIHNlbGYuc3RhdGUgPSBTQ0hFRFVMRUQ7XG4gICAgc2VsZi50aW1lci5yZXN0YXJ0KHN0YXJ0LCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuXG4gICAgLy8gSWYgdGhlIGVsYXBzZWQgZGVsYXkgaXMgbGVzcyB0aGFuIG91ciBmaXJzdCBzbGVlcCwgc3RhcnQgaW1tZWRpYXRlbHkuXG4gICAgaWYgKHNlbGYuZGVsYXkgPD0gZWxhcHNlZCkgc3RhcnQoZWxhcHNlZCAtIHNlbGYuZGVsYXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQoZWxhcHNlZCkge1xuICAgIHZhciBpLCBqLCBuLCBvO1xuXG4gICAgLy8gSWYgdGhlIHN0YXRlIGlzIG5vdCBTQ0hFRFVMRUQsIHRoZW4gd2UgcHJldmlvdXNseSBlcnJvcmVkIG9uIHN0YXJ0LlxuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTQ0hFRFVMRUQpIHJldHVybiBzdG9wKCk7XG5cbiAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgICBvID0gc2NoZWR1bGVzW2ldO1xuICAgICAgaWYgKG8ubmFtZSAhPT0gc2VsZi5uYW1lKSBjb250aW51ZTtcblxuICAgICAgLy8gV2hpbGUgdGhpcyBlbGVtZW50IGFscmVhZHkgaGFzIGEgc3RhcnRpbmcgdHJhbnNpdGlvbiBkdXJpbmcgdGhpcyBmcmFtZSxcbiAgICAgIC8vIGRlZmVyIHN0YXJ0aW5nIGFuIGludGVycnVwdGluZyB0cmFuc2l0aW9uIHVudGlsIHRoYXQgdHJhbnNpdGlvbiBoYXMgYVxuICAgICAgLy8gY2hhbmNlIHRvIHRpY2sgKGFuZCBwb3NzaWJseSBlbmQpOyBzZWUgZDMvZDMtdHJhbnNpdGlvbiM1NCFcbiAgICAgIGlmIChvLnN0YXRlID09PSBTVEFSVEVEKSByZXR1cm4gdGltZW91dChzdGFydCk7XG5cbiAgICAgIC8vIEludGVycnVwdCB0aGUgYWN0aXZlIHRyYW5zaXRpb24sIGlmIGFueS5cbiAgICAgIGlmIChvLnN0YXRlID09PSBSVU5OSU5HKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImludGVycnVwdFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2FuY2VsIGFueSBwcmUtZW1wdGVkIHRyYW5zaXRpb25zLlxuICAgICAgZWxzZSBpZiAoK2kgPCBpZCkge1xuICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICBvLm9uLmNhbGwoXCJjYW5jZWxcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgby5pbmRleCwgby5ncm91cCk7XG4gICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVmZXIgdGhlIGZpcnN0IHRpY2sgdG8gZW5kIG9mIHRoZSBjdXJyZW50IGZyYW1lOyBzZWUgZDMvZDMjMTU3Ni5cbiAgICAvLyBOb3RlIHRoZSB0cmFuc2l0aW9uIG1heSBiZSBjYW5jZWxlZCBhZnRlciBzdGFydCBhbmQgYmVmb3JlIHRoZSBmaXJzdCB0aWNrIVxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIHNjaGVkdWxlZCBiZWZvcmUgdGhlIHN0YXJ0IGV2ZW50OyBzZWUgZDMvZDMtdHJhbnNpdGlvbiMxNiFcbiAgICAvLyBBc3N1bWluZyB0aGlzIGlzIHN1Y2Nlc3NmdWwsIHN1YnNlcXVlbnQgY2FsbGJhY2tzIGdvIHN0cmFpZ2h0IHRvIHRpY2suXG4gICAgdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzZWxmLnN0YXRlID09PSBTVEFSVEVEKSB7XG4gICAgICAgIHNlbGYuc3RhdGUgPSBSVU5OSU5HO1xuICAgICAgICBzZWxmLnRpbWVyLnJlc3RhcnQodGljaywgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcbiAgICAgICAgdGljayhlbGFwc2VkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIERpc3BhdGNoIHRoZSBzdGFydCBldmVudC5cbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSB0aGUgdHdlZW4gYXJlIGluaXRpYWxpemVkLlxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVElORztcbiAgICBzZWxmLm9uLmNhbGwoXCJzdGFydFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU1RBUlRJTkcpIHJldHVybjsgLy8gaW50ZXJydXB0ZWRcbiAgICBzZWxmLnN0YXRlID0gU1RBUlRFRDtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIHR3ZWVuLCBkZWxldGluZyBudWxsIHR3ZWVuLlxuICAgIHR3ZWVuID0gbmV3IEFycmF5KG4gPSBzZWxmLnR3ZWVuLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgaiA9IC0xOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobyA9IHNlbGYudHdlZW5baV0udmFsdWUuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKSkge1xuICAgICAgICB0d2VlblsrK2pdID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgdHdlZW4ubGVuZ3RoID0gaiArIDE7XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrKGVsYXBzZWQpIHtcbiAgICB2YXIgdCA9IGVsYXBzZWQgPCBzZWxmLmR1cmF0aW9uID8gc2VsZi5lYXNlLmNhbGwobnVsbCwgZWxhcHNlZCAvIHNlbGYuZHVyYXRpb24pIDogKHNlbGYudGltZXIucmVzdGFydChzdG9wKSwgc2VsZi5zdGF0ZSA9IEVORElORywgMSksXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IHR3ZWVuLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICB0d2VlbltpXS5jYWxsKG5vZGUsIHQpO1xuICAgIH1cblxuICAgIC8vIERpc3BhdGNoIHRoZSBlbmQgZXZlbnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgPT09IEVORElORykge1xuICAgICAgc2VsZi5vbi5jYWxsKFwiZW5kXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgICAgc3RvcCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgc2VsZi5zdGF0ZSA9IEVOREVEO1xuICAgIHNlbGYudGltZXIuc3RvcCgpO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaWRdO1xuICAgIGZvciAodmFyIGkgaW4gc2NoZWR1bGVzKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IHggPT4gKCkgPT4geDtcbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuXG5mdW5jdGlvbiBsaW5lYXIoYSwgZCkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgdCAqIGQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV4cG9uZW50aWFsKGEsIGIsIHkpIHtcbiAgcmV0dXJuIGEgPSBNYXRoLnBvdyhhLCB5KSwgYiA9IE1hdGgucG93KGIsIHkpIC0gYSwgeSA9IDEgLyB5LCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KGEgKyB0ICogYiwgeSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBodWUoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkID4gMTgwIHx8IGQgPCAtMTgwID8gZCAtIDM2MCAqIE1hdGgucm91bmQoZCAvIDM2MCkgOiBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2FtbWEoeSkge1xuICByZXR1cm4gKHkgPSAreSkgPT09IDEgPyBub2dhbW1hIDogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiIC0gYSA/IGV4cG9uZW50aWFsKGEsIGIsIHkpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vZ2FtbWEoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuIiwiaW1wb3J0IHtyZ2IgYXMgY29sb3JSZ2J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGJhc2lzIGZyb20gXCIuL2Jhc2lzLmpzXCI7XG5pbXBvcnQgYmFzaXNDbG9zZWQgZnJvbSBcIi4vYmFzaXNDbG9zZWQuanNcIjtcbmltcG9ydCBub2dhbW1hLCB7Z2FtbWF9IGZyb20gXCIuL2NvbG9yLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiByZ2JHYW1tYSh5KSB7XG4gIHZhciBjb2xvciA9IGdhbW1hKHkpO1xuXG4gIGZ1bmN0aW9uIHJnYihzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSBjb2xvcigoc3RhcnQgPSBjb2xvclJnYihzdGFydCkpLnIsIChlbmQgPSBjb2xvclJnYihlbmQpKS5yKSxcbiAgICAgICAgZyA9IGNvbG9yKHN0YXJ0LmcsIGVuZC5nKSxcbiAgICAgICAgYiA9IGNvbG9yKHN0YXJ0LmIsIGVuZC5iKSxcbiAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5yID0gcih0KTtcbiAgICAgIHN0YXJ0LmcgPSBnKHQpO1xuICAgICAgc3RhcnQuYiA9IGIodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxuXG4gIHJnYi5nYW1tYSA9IHJnYkdhbW1hO1xuXG4gIHJldHVybiByZ2I7XG59KSgxKTtcblxuZnVuY3Rpb24gcmdiU3BsaW5lKHNwbGluZSkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sb3JzKSB7XG4gICAgdmFyIG4gPSBjb2xvcnMubGVuZ3RoLFxuICAgICAgICByID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBnID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBpLCBjb2xvcjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBjb2xvciA9IGNvbG9yUmdiKGNvbG9yc1tpXSk7XG4gICAgICByW2ldID0gY29sb3IuciB8fCAwO1xuICAgICAgZ1tpXSA9IGNvbG9yLmcgfHwgMDtcbiAgICAgIGJbaV0gPSBjb2xvci5iIHx8IDA7XG4gICAgfVxuICAgIHIgPSBzcGxpbmUocik7XG4gICAgZyA9IHNwbGluZShnKTtcbiAgICBiID0gc3BsaW5lKGIpO1xuICAgIGNvbG9yLm9wYWNpdHkgPSAxO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBjb2xvci5yID0gcih0KTtcbiAgICAgIGNvbG9yLmcgPSBnKHQpO1xuICAgICAgY29sb3IuYiA9IGIodCk7XG4gICAgICByZXR1cm4gY29sb3IgKyBcIlwiO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgcmdiQmFzaXMgPSByZ2JTcGxpbmUoYmFzaXMpO1xuZXhwb3J0IHZhciByZ2JCYXNpc0Nsb3NlZCA9IHJnYlNwbGluZShiYXNpc0Nsb3NlZCk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgPSArYiwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICogKDEgLSB0KSArIGIgKiB0O1xuICB9O1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcblxudmFyIHJlQSA9IC9bLStdPyg/OlxcZCtcXC4/XFxkKnxcXC4/XFxkKykoPzpbZUVdWy0rXT9cXGQrKT8vZyxcbiAgICByZUIgPSBuZXcgUmVnRXhwKHJlQS5zb3VyY2UsIFwiZ1wiKTtcblxuZnVuY3Rpb24gemVybyhiKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25lKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGJpID0gcmVBLmxhc3RJbmRleCA9IHJlQi5sYXN0SW5kZXggPSAwLCAvLyBzY2FuIGluZGV4IGZvciBuZXh0IG51bWJlciBpbiBiXG4gICAgICBhbSwgLy8gY3VycmVudCBtYXRjaCBpbiBhXG4gICAgICBibSwgLy8gY3VycmVudCBtYXRjaCBpbiBiXG4gICAgICBicywgLy8gc3RyaW5nIHByZWNlZGluZyBjdXJyZW50IG51bWJlciBpbiBiLCBpZiBhbnlcbiAgICAgIGkgPSAtMSwgLy8gaW5kZXggaW4gc1xuICAgICAgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcblxuICAvLyBDb2VyY2UgaW5wdXRzIHRvIHN0cmluZ3MuXG4gIGEgPSBhICsgXCJcIiwgYiA9IGIgKyBcIlwiO1xuXG4gIC8vIEludGVycG9sYXRlIHBhaXJzIG9mIG51bWJlcnMgaW4gYSAmIGIuXG4gIHdoaWxlICgoYW0gPSByZUEuZXhlYyhhKSlcbiAgICAgICYmIChibSA9IHJlQi5leGVjKGIpKSkge1xuICAgIGlmICgoYnMgPSBibS5pbmRleCkgPiBiaSkgeyAvLyBhIHN0cmluZyBwcmVjZWRlcyB0aGUgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gICAgfVxuICAgIGlmICgoYW0gPSBhbVswXSkgPT09IChibSA9IGJtWzBdKSkgeyAvLyBudW1iZXJzIGluIGEgJiBiIG1hdGNoXG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBibTsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYm07XG4gICAgfSBlbHNlIHsgLy8gaW50ZXJwb2xhdGUgbm9uLW1hdGNoaW5nIG51bWJlcnNcbiAgICAgIHNbKytpXSA9IG51bGw7XG4gICAgICBxLnB1c2goe2k6IGksIHg6IG51bWJlcihhbSwgYm0pfSk7XG4gICAgfVxuICAgIGJpID0gcmVCLmxhc3RJbmRleDtcbiAgfVxuXG4gIC8vIEFkZCByZW1haW5zIG9mIGIuXG4gIGlmIChiaSA8IGIubGVuZ3RoKSB7XG4gICAgYnMgPSBiLnNsaWNlKGJpKTtcbiAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICBlbHNlIHNbKytpXSA9IGJzO1xuICB9XG5cbiAgLy8gU3BlY2lhbCBvcHRpbWl6YXRpb24gZm9yIG9ubHkgYSBzaW5nbGUgbWF0Y2guXG4gIC8vIE90aGVyd2lzZSwgaW50ZXJwb2xhdGUgZWFjaCBvZiB0aGUgbnVtYmVycyBhbmQgcmVqb2luIHRoZSBzdHJpbmcuXG4gIHJldHVybiBzLmxlbmd0aCA8IDIgPyAocVswXVxuICAgICAgPyBvbmUocVswXS54KVxuICAgICAgOiB6ZXJvKGIpKVxuICAgICAgOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG87IGkgPCBiOyArK2kpIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgICAgICB9KTtcbn1cbiIsInZhciBkZWdyZWVzID0gMTgwIC8gTWF0aC5QSTtcblxuZXhwb3J0IHZhciBpZGVudGl0eSA9IHtcbiAgdHJhbnNsYXRlWDogMCxcbiAgdHJhbnNsYXRlWTogMCxcbiAgcm90YXRlOiAwLFxuICBza2V3WDogMCxcbiAgc2NhbGVYOiAxLFxuICBzY2FsZVk6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFyIHNjYWxlWCwgc2NhbGVZLCBza2V3WDtcbiAgaWYgKHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKSkgYSAvPSBzY2FsZVgsIGIgLz0gc2NhbGVYO1xuICBpZiAoc2tld1ggPSBhICogYyArIGIgKiBkKSBjIC09IGEgKiBza2V3WCwgZCAtPSBiICogc2tld1g7XG4gIGlmIChzY2FsZVkgPSBNYXRoLnNxcnQoYyAqIGMgKyBkICogZCkpIGMgLz0gc2NhbGVZLCBkIC89IHNjYWxlWSwgc2tld1ggLz0gc2NhbGVZO1xuICBpZiAoYSAqIGQgPCBiICogYykgYSA9IC1hLCBiID0gLWIsIHNrZXdYID0gLXNrZXdYLCBzY2FsZVggPSAtc2NhbGVYO1xuICByZXR1cm4ge1xuICAgIHRyYW5zbGF0ZVg6IGUsXG4gICAgdHJhbnNsYXRlWTogZixcbiAgICByb3RhdGU6IE1hdGguYXRhbjIoYiwgYSkgKiBkZWdyZWVzLFxuICAgIHNrZXdYOiBNYXRoLmF0YW4oc2tld1gpICogZGVncmVlcyxcbiAgICBzY2FsZVg6IHNjYWxlWCxcbiAgICBzY2FsZVk6IHNjYWxlWVxuICB9O1xufVxuIiwiaW1wb3J0IGRlY29tcG9zZSwge2lkZW50aXR5fSBmcm9tIFwiLi9kZWNvbXBvc2UuanNcIjtcblxudmFyIHN2Z05vZGU7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDc3ModmFsdWUpIHtcbiAgY29uc3QgbSA9IG5ldyAodHlwZW9mIERPTU1hdHJpeCA9PT0gXCJmdW5jdGlvblwiID8gRE9NTWF0cml4IDogV2ViS2l0Q1NTTWF0cml4KSh2YWx1ZSArIFwiXCIpO1xuICByZXR1cm4gbS5pc0lkZW50aXR5ID8gaWRlbnRpdHkgOiBkZWNvbXBvc2UobS5hLCBtLmIsIG0uYywgbS5kLCBtLmUsIG0uZik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN2Zyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoIXN2Z05vZGUpIHN2Z05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcImdcIik7XG4gIHN2Z05vZGUuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHZhbHVlKTtcbiAgaWYgKCEodmFsdWUgPSBzdmdOb2RlLnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCkpKSByZXR1cm4gaWRlbnRpdHk7XG4gIHZhbHVlID0gdmFsdWUubWF0cml4O1xuICByZXR1cm4gZGVjb21wb3NlKHZhbHVlLmEsIHZhbHVlLmIsIHZhbHVlLmMsIHZhbHVlLmQsIHZhbHVlLmUsIHZhbHVlLmYpO1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi4vbnVtYmVyLmpzXCI7XG5pbXBvcnQge3BhcnNlQ3NzLCBwYXJzZVN2Z30gZnJvbSBcIi4vcGFyc2UuanNcIjtcblxuZnVuY3Rpb24gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2UsIHB4Q29tbWEsIHB4UGFyZW4sIGRlZ1BhcmVuKSB7XG5cbiAgZnVuY3Rpb24gcG9wKHMpIHtcbiAgICByZXR1cm4gcy5sZW5ndGggPyBzLnBvcCgpICsgXCIgXCIgOiBcIlwiO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKFwidHJhbnNsYXRlKFwiLCBudWxsLCBweENvbW1hLCBudWxsLCBweFBhcmVuKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgfHwgeWIpIHtcbiAgICAgIHMucHVzaChcInRyYW5zbGF0ZShcIiArIHhiICsgcHhDb21tYSArIHliICsgcHhQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcm90YXRlKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgaWYgKGEgLSBiID4gMTgwKSBiICs9IDM2MDsgZWxzZSBpZiAoYiAtIGEgPiAxODApIGEgKz0gMzYwOyAvLyBzaG9ydGVzdCBwYXRoXG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNrZXdYKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgdmFyIGkgPSBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiwgbnVsbCwgXCIsXCIsIG51bGwsIFwiKVwiKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgIT09IDEgfHwgeWIgIT09IDEpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiICsgeGIgKyBcIixcIiArIHliICsgXCIpXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcbiAgICBhID0gcGFyc2UoYSksIGIgPSBwYXJzZShiKTtcbiAgICB0cmFuc2xhdGUoYS50cmFuc2xhdGVYLCBhLnRyYW5zbGF0ZVksIGIudHJhbnNsYXRlWCwgYi50cmFuc2xhdGVZLCBzLCBxKTtcbiAgICByb3RhdGUoYS5yb3RhdGUsIGIucm90YXRlLCBzLCBxKTtcbiAgICBza2V3WChhLnNrZXdYLCBiLnNrZXdYLCBzLCBxKTtcbiAgICBzY2FsZShhLnNjYWxlWCwgYS5zY2FsZVksIGIuc2NhbGVYLCBiLnNjYWxlWSwgcywgcSk7XG4gICAgYSA9IGIgPSBudWxsOyAvLyBnY1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gcS5sZW5ndGgsIG87XG4gICAgICB3aGlsZSAoKytpIDwgbikgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtQ3NzID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VDc3MsIFwicHgsIFwiLCBcInB4KVwiLCBcImRlZylcIik7XG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtU3ZnID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VTdmcsIFwiLCBcIiwgXCIpXCIsIFwiKVwiKTtcbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIHR3ZWVuUmVtb3ZlKGlkLCBuYW1lKSB7XG4gIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSB0d2VlbjAgPSB0d2VlbjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjEgPSB0d2VlbjEuc2xpY2UoKTtcbiAgICAgICAgICB0d2VlbjEuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHR3ZWVuRnVuY3Rpb24oaWQsIG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gKHR3ZWVuMCA9IHR3ZWVuKS5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgdCA9IHtuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWV9LCBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xW2ldID0gdDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGkgPT09IG4pIHR3ZWVuMS5wdXNoKHQpO1xuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICBuYW1lICs9IFwiXCI7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIHR3ZWVuID0gZ2V0KHRoaXMubm9kZSgpLCBpZCkudHdlZW47XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2Vlbi5sZW5ndGgsIHQ7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodCA9IHR3ZWVuW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiB0LnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGwgPyB0d2VlblJlbW92ZSA6IHR3ZWVuRnVuY3Rpb24pKGlkLCBuYW1lLCB2YWx1ZSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHdlZW5WYWx1ZSh0cmFuc2l0aW9uLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgaWQgPSB0cmFuc2l0aW9uLl9pZDtcblxuICB0cmFuc2l0aW9uLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKTtcbiAgICAoc2NoZWR1bGUudmFsdWUgfHwgKHNjaGVkdWxlLnZhbHVlID0ge30pKVtuYW1lXSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIGdldChub2RlLCBpZCkudmFsdWVbbmFtZV07XG4gIH07XG59XG4iLCJpbXBvcnQge2NvbG9yfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVOdW1iZXIsIGludGVycG9sYXRlUmdiLCBpbnRlcnBvbGF0ZVN0cmluZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGM7XG4gIHJldHVybiAodHlwZW9mIGIgPT09IFwibnVtYmVyXCIgPyBpbnRlcnBvbGF0ZU51bWJlclxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyBpbnRlcnBvbGF0ZVJnYlxuICAgICAgOiAoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgaW50ZXJwb2xhdGVSZ2IpXG4gICAgICA6IGludGVycG9sYXRlU3RyaW5nKShhLCBiKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZS5qc1wiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpLCBzdHJpbmcxO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpLCBpID0gZnVsbG5hbWUgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdGhpcy5hdHRyVHdlZW4obmFtZSwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pKGZ1bGxuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwiYXR0ci5cIiArIG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdmFsdWUgPT0gbnVsbCA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpKGZ1bGxuYW1lKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkoZnVsbG5hbWUsIGksIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge25hbWVzcGFjZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGUobmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIGkuY2FsbCh0aGlzLCB0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIGkuY2FsbCh0aGlzLCB0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICB2YXIgdDAsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0MCA9IChpMCA9IGkpICYmIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKTtcbiAgICByZXR1cm4gdDA7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuKG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgYXR0ckludGVycG9sYXRlKG5hbWUsIGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJhdHRyLlwiICsgbmFtZTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgKGZ1bGxuYW1lLmxvY2FsID8gYXR0clR3ZWVuTlMgOiBhdHRyVHdlZW4pKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtnZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGRlbGF5RnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWxheUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGRlbGF5RnVuY3Rpb25cbiAgICAgICAgICA6IGRlbGF5Q29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmRlbGF5O1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZHVyYXRpb25GdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZHVyYXRpb25Db25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGR1cmF0aW9uRnVuY3Rpb25cbiAgICAgICAgICA6IGR1cmF0aW9uQ29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmR1cmF0aW9uO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZWFzZSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmVhc2U7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBzdGFydChuYW1lKSB7XG4gIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykuZXZlcnkoZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4gIXQgfHwgdCA9PT0gXCJzdGFydFwiO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG9uMCwgb24xLCBzaXQgPSBzdGFydChuYW1lKSA/IGluaXQgOiBzZXQ7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzaXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wKSAob24xID0gKG9uMCA9IG9uKS5jb3B5KCkpLm9uKG5hbWUsIGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDJcbiAgICAgID8gZ2V0KHRoaXMubm9kZSgpLCBpZCkub24ub24obmFtZSlcbiAgICAgIDogdGhpcy5lYWNoKG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG52YXIgU2VsZWN0aW9uID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2dyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtQ3NzIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7c3R5bGV9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlLmpzXCI7XG5cbmZ1bmN0aW9uIHN0eWxlTnVsbChuYW1lLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHN0cmluZzEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCBzdHJpbmcxMCA9IHN0cmluZzEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHZhbHVlMSA9IHZhbHVlKHRoaXMpLFxuICAgICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHN0cmluZzEgPSB2YWx1ZTEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVNYXliZVJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgb24wLCBvbjEsIGxpc3RlbmVyMCwga2V5ID0gXCJzdHlsZS5cIiArIG5hbWUsIGV2ZW50ID0gXCJlbmQuXCIgKyBrZXksIHJlbW92ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub24sXG4gICAgICAgIGxpc3RlbmVyID0gc2NoZWR1bGUudmFsdWVba2V5XSA9PSBudWxsID8gcmVtb3ZlIHx8IChyZW1vdmUgPSBzdHlsZVJlbW92ZShuYW1lKSkgOiB1bmRlZmluZWQ7XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjAgfHwgbGlzdGVuZXIwICE9PSBsaXN0ZW5lcikgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihldmVudCwgbGlzdGVuZXIwID0gbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZU51bGwobmFtZSwgaSkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBzdHlsZVJlbW92ZShuYW1lKSlcbiAgICA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVGdW5jdGlvbihuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSkpKVxuICAgICAgLmVhY2goc3R5bGVNYXliZVJlbW92ZSh0aGlzLl9pZCwgbmFtZSkpXG4gICAgOiB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZUNvbnN0YW50KG5hbWUsIGksIHZhbHVlKSwgcHJpb3JpdHkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBudWxsKTtcbn1cbiIsImZ1bmN0aW9uIHN0eWxlSW50ZXJwb2xhdGUobmFtZSwgaSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGkuY2FsbCh0aGlzLCB0KSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgdCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQgPSAoaTAgPSBpKSAmJiBzdHlsZUludGVycG9sYXRlKG5hbWUsIGksIHByaW9yaXR5KTtcbiAgICByZXR1cm4gdDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGtleSA9IFwic3R5bGUuXCIgKyAobmFtZSArPSBcIlwiKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZShpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IGkuY2FsbCh0aGlzLCB0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dFR3ZWVuKHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgdGV4dEludGVycG9sYXRlKGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJ0ZXh0XCI7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCB0ZXh0VHdlZW4odmFsdWUpKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyIGZyb20gXCIuL2F0dHIuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHJUd2VlbiBmcm9tIFwiLi9hdHRyVHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2RlbGF5IGZyb20gXCIuL2RlbGF5LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kdXJhdGlvbiBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZWFzZSBmcm9tIFwiLi9lYXNlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lYXNlVmFyeWluZyBmcm9tIFwiLi9lYXNlVmFyeWluZy5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlci5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2UuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX29uIGZyb20gXCIuL29uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3Rpb24gZnJvbSBcIi4vc2VsZWN0aW9uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGVUd2VlbiBmcm9tIFwiLi9zdHlsZVR3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0IGZyb20gXCIuL3RleHQuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RleHRUd2VlbiBmcm9tIFwiLi90ZXh0VHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHdlZW4gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2VuZCBmcm9tIFwiLi9lbmQuanNcIjtcblxudmFyIGlkID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zaXRpb24oZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCkge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xuICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgdGhpcy5faWQgPSBpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbihuYW1lKSB7XG4gIHJldHVybiBzZWxlY3Rpb24oKS50cmFuc2l0aW9uKG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3SWQoKSB7XG4gIHJldHVybiArK2lkO1xufVxuXG52YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cblRyYW5zaXRpb24ucHJvdG90eXBlID0gdHJhbnNpdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2l0aW9uLFxuICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHRyYW5zaXRpb25fc2VsZWN0QWxsLFxuICBmaWx0ZXI6IHRyYW5zaXRpb25fZmlsdGVyLFxuICBtZXJnZTogdHJhbnNpdGlvbl9tZXJnZSxcbiAgc2VsZWN0aW9uOiB0cmFuc2l0aW9uX3NlbGVjdGlvbixcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbl90cmFuc2l0aW9uLFxuICBjYWxsOiBzZWxlY3Rpb25fcHJvdG90eXBlLmNhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9wcm90b3R5cGUuc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9wcm90b3R5cGUuZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9wcm90b3R5cGUuZWFjaCxcbiAgb246IHRyYW5zaXRpb25fb24sXG4gIGF0dHI6IHRyYW5zaXRpb25fYXR0cixcbiAgYXR0clR3ZWVuOiB0cmFuc2l0aW9uX2F0dHJUd2VlbixcbiAgc3R5bGU6IHRyYW5zaXRpb25fc3R5bGUsXG4gIHN0eWxlVHdlZW46IHRyYW5zaXRpb25fc3R5bGVUd2VlbixcbiAgdGV4dDogdHJhbnNpdGlvbl90ZXh0LFxuICB0ZXh0VHdlZW46IHRyYW5zaXRpb25fdGV4dFR3ZWVuLFxuICByZW1vdmU6IHRyYW5zaXRpb25fcmVtb3ZlLFxuICB0d2VlbjogdHJhbnNpdGlvbl90d2VlbixcbiAgZGVsYXk6IHRyYW5zaXRpb25fZGVsYXksXG4gIGR1cmF0aW9uOiB0cmFuc2l0aW9uX2R1cmF0aW9uLFxuICBlYXNlOiB0cmFuc2l0aW9uX2Vhc2UsXG4gIGVhc2VWYXJ5aW5nOiB0cmFuc2l0aW9uX2Vhc2VWYXJ5aW5nLFxuICBlbmQ6IHRyYW5zaXRpb25fZW5kLFxuICBbU3ltYm9sLml0ZXJhdG9yXTogc2VsZWN0aW9uX3Byb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdXG59O1xuIiwiaW1wb3J0IHtzZWxlY3Rvcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgICAgc2NoZWR1bGUoc3ViZ3JvdXBbaV0sIG5hbWUsIGlkLCBpLCBzdWJncm91cCwgZ2V0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3RvckFsbH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApLCBjaGlsZCwgaW5oZXJpdCA9IGdldChub2RlLCBpZCksIGsgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBrIDwgbDsgKytrKSB7XG4gICAgICAgICAgaWYgKGNoaWxkID0gY2hpbGRyZW5ba10pIHtcbiAgICAgICAgICAgIHNjaGVkdWxlKGNoaWxkLCBuYW1lLCBpZCwgaywgY2hpbGRyZW4sIGluaGVyaXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdWJncm91cHMucHVzaChjaGlsZHJlbik7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge21hdGNoZXJ9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHJhbnNpdGlvbikge1xuICBpZiAodHJhbnNpdGlvbi5faWQgIT09IHRoaXMuX2lkKSB0aHJvdyBuZXcgRXJyb3I7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHRyYW5zaXRpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkMCA9IHRoaXMuX2lkLFxuICAgICAgaWQxID0gbmV3SWQoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICB2YXIgaW5oZXJpdCA9IGdldChub2RlLCBpZDApO1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZDEsIGksIGdyb3VwLCB7XG4gICAgICAgICAgdGltZTogaW5oZXJpdC50aW1lICsgaW5oZXJpdC5kZWxheSArIGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgZHVyYXRpb246IGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkMSk7XG59XG4iLCJpbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuLmpzXCI7XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWUxID09IG51bGwgPyBcIlwiIDogdmFsdWUxO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy50d2VlbihcInRleHRcIiwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gdGV4dEZ1bmN0aW9uKHR3ZWVuVmFsdWUodGhpcywgXCJ0ZXh0XCIsIHZhbHVlKSlcbiAgICAgIDogdGV4dENvbnN0YW50KHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiKSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmVGdW5jdGlvbihpZCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMuX190cmFuc2l0aW9uKSBpZiAoK2kgIT09IGlkKSByZXR1cm47XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMub24oXCJlbmQucmVtb3ZlXCIsIHJlbW92ZUZ1bmN0aW9uKHRoaXMuX2lkKSk7XG59XG4iLCJpbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZWFzZVZhcnlpbmcoaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHR5cGVvZiB2ICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgICBzZXQodGhpcywgaWQpLmVhc2UgPSB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMuZWFjaChlYXNlVmFyeWluZyh0aGlzLl9pZCwgdmFsdWUpKTtcbn1cbiIsImltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG9uMCwgb24xLCB0aGF0ID0gdGhpcywgaWQgPSB0aGF0Ll9pZCwgc2l6ZSA9IHRoYXQuc2l6ZSgpO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIGNhbmNlbCA9IHt2YWx1ZTogcmVqZWN0fSxcbiAgICAgICAgZW5kID0ge3ZhbHVlOiBmdW5jdGlvbigpIHsgaWYgKC0tc2l6ZSA9PT0gMCkgcmVzb2x2ZSgpOyB9fTtcblxuICAgIHRoYXQuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgICAgb24gPSBzY2hlZHVsZS5vbjtcblxuICAgICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICAgIGlmIChvbiAhPT0gb24wKSB7XG4gICAgICAgIG9uMSA9IChvbjAgPSBvbikuY29weSgpO1xuICAgICAgICBvbjEuXy5jYW5jZWwucHVzaChjYW5jZWwpO1xuICAgICAgICBvbjEuXy5pbnRlcnJ1cHQucHVzaChjYW5jZWwpO1xuICAgICAgICBvbjEuXy5lbmQucHVzaChlbmQpO1xuICAgICAgfVxuXG4gICAgICBzY2hlZHVsZS5vbiA9IG9uMTtcbiAgICB9KTtcblxuICAgIC8vIFRoZSBzZWxlY3Rpb24gd2FzIGVtcHR5LCByZXNvbHZlIGVuZCBpbW1lZGlhdGVseVxuICAgIGlmIChzaXplID09PSAwKSByZXNvbHZlKCk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4uL3RyYW5zaXRpb24vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSBmcm9tIFwiLi4vdHJhbnNpdGlvbi9zY2hlZHVsZS5qc1wiO1xuaW1wb3J0IHtlYXNlQ3ViaWNJbk91dH0gZnJvbSBcImQzLWVhc2VcIjtcbmltcG9ydCB7bm93fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGRlZmF1bHRUaW1pbmcgPSB7XG4gIHRpbWU6IG51bGwsIC8vIFNldCBvbiB1c2UuXG4gIGRlbGF5OiAwLFxuICBkdXJhdGlvbjogMjUwLFxuICBlYXNlOiBlYXNlQ3ViaWNJbk91dFxufTtcblxuZnVuY3Rpb24gaW5oZXJpdChub2RlLCBpZCkge1xuICB2YXIgdGltaW5nO1xuICB3aGlsZSAoISh0aW1pbmcgPSBub2RlLl9fdHJhbnNpdGlvbikgfHwgISh0aW1pbmcgPSB0aW1pbmdbaWRdKSkge1xuICAgIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHRyYW5zaXRpb24gJHtpZH0gbm90IGZvdW5kYCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aW1pbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGlkLFxuICAgICAgdGltaW5nO1xuXG4gIGlmIChuYW1lIGluc3RhbmNlb2YgVHJhbnNpdGlvbikge1xuICAgIGlkID0gbmFtZS5faWQsIG5hbWUgPSBuYW1lLl9uYW1lO1xuICB9IGVsc2Uge1xuICAgIGlkID0gbmV3SWQoKSwgKHRpbWluZyA9IGRlZmF1bHRUaW1pbmcpLnRpbWUgPSBub3coKSwgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkLCBpLCBncm91cCwgdGltaW5nIHx8IGluaGVyaXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gY3ViaWNJbih0KSB7XG4gIHJldHVybiB0ICogdCAqIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY091dCh0KSB7XG4gIHJldHVybiAtLXQgKiB0ICogdCArIDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY0luT3V0KHQpIHtcbiAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gdCAqIHQgKiB0IDogKHQgLT0gMikgKiB0ICogdCArIDIpIC8gMjtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ludGVycnVwdCBmcm9tIFwiLi9pbnRlcnJ1cHQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fdHJhbnNpdGlvbiBmcm9tIFwiLi90cmFuc2l0aW9uLmpzXCI7XG5cbnNlbGVjdGlvbi5wcm90b3R5cGUuaW50ZXJydXB0ID0gc2VsZWN0aW9uX2ludGVycnVwdDtcbnNlbGVjdGlvbi5wcm90b3R5cGUudHJhbnNpdGlvbiA9IHNlbGVjdGlvbl90cmFuc2l0aW9uO1xuIiwiaW1wb3J0IGludGVycnVwdCBmcm9tIFwiLi4vaW50ZXJydXB0LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICBpbnRlcnJ1cHQodGhpcywgbmFtZSk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHtTVEFSVElORywgRU5ESU5HLCBFTkRFRH0gZnJvbSBcIi4vdHJhbnNpdGlvbi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHNjaGVkdWxlLFxuICAgICAgYWN0aXZlLFxuICAgICAgZW1wdHkgPSB0cnVlLFxuICAgICAgaTtcblxuICBpZiAoIXNjaGVkdWxlcykgcmV0dXJuO1xuXG4gIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG5cbiAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLm5hbWUgIT09IG5hbWUpIHsgZW1wdHkgPSBmYWxzZTsgY29udGludWU7IH1cbiAgICBhY3RpdmUgPSBzY2hlZHVsZS5zdGF0ZSA+IFNUQVJUSU5HICYmIHNjaGVkdWxlLnN0YXRlIDwgRU5ESU5HO1xuICAgIHNjaGVkdWxlLnN0YXRlID0gRU5ERUQ7XG4gICAgc2NoZWR1bGUudGltZXIuc3RvcCgpO1xuICAgIHNjaGVkdWxlLm9uLmNhbGwoYWN0aXZlID8gXCJpbnRlcnJ1cHRcIiA6IFwiY2FuY2VsXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNjaGVkdWxlLmluZGV4LCBzY2hlZHVsZS5ncm91cCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgfVxuXG4gIGlmIChlbXB0eSkgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xufVxuIiwiY29uc3QgcGkgPSBNYXRoLlBJLFxuICAgIHRhdSA9IDIgKiBwaSxcbiAgICBlcHNpbG9uID0gMWUtNixcbiAgICB0YXVFcHNpbG9uID0gdGF1IC0gZXBzaWxvbjtcblxuZnVuY3Rpb24gUGF0aCgpIHtcbiAgdGhpcy5feDAgPSB0aGlzLl95MCA9IC8vIHN0YXJ0IG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl94MSA9IHRoaXMuX3kxID0gbnVsbDsgLy8gZW5kIG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl8gPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBwYXRoKCkge1xuICByZXR1cm4gbmV3IFBhdGg7XG59XG5cblBhdGgucHJvdG90eXBlID0gcGF0aC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQYXRoLFxuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3gxICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl94MSA9IHRoaXMuX3gwLCB0aGlzLl95MSA9IHRoaXMuX3kwO1xuICAgICAgdGhpcy5fICs9IFwiWlwiO1xuICAgIH1cbiAgfSxcbiAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIHF1YWRyYXRpY0N1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIlFcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiQ1wiICsgKCt4MSkgKyBcIixcIiArICgreTEpICsgXCIsXCIgKyAoK3gyKSArIFwiLFwiICsgKCt5MikgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBhcmNUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHIpIHtcbiAgICB4MSA9ICt4MSwgeTEgPSAreTEsIHgyID0gK3gyLCB5MiA9ICt5MiwgciA9ICtyO1xuICAgIHZhciB4MCA9IHRoaXMuX3gxLFxuICAgICAgICB5MCA9IHRoaXMuX3kxLFxuICAgICAgICB4MjEgPSB4MiAtIHgxLFxuICAgICAgICB5MjEgPSB5MiAtIHkxLFxuICAgICAgICB4MDEgPSB4MCAtIHgxLFxuICAgICAgICB5MDEgPSB5MCAtIHkxLFxuICAgICAgICBsMDFfMiA9IHgwMSAqIHgwMSArIHkwMSAqIHkwMTtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MSx5MSkuXG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgwLHkwKT8gRG8gbm90aGluZy5cbiAgICBlbHNlIGlmICghKGwwMV8yID4gZXBzaWxvbikpO1xuXG4gICAgLy8gT3IsIGFyZSAoeDAseTApLCAoeDEseTEpIGFuZCAoeDIseTIpIGNvbGxpbmVhcj9cbiAgICAvLyBFcXVpdmFsZW50bHksIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4Mix5Mik/XG4gICAgLy8gT3IsIGlzIHRoZSByYWRpdXMgemVybz8gTGluZSB0byAoeDEseTEpLlxuICAgIGVsc2UgaWYgKCEoTWF0aC5hYnMoeTAxICogeDIxIC0geTIxICogeDAxKSA+IGVwc2lsb24pIHx8ICFyKSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIGRyYXcgYW4gYXJjIVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHgyMCA9IHgyIC0geDAsXG4gICAgICAgICAgeTIwID0geTIgLSB5MCxcbiAgICAgICAgICBsMjFfMiA9IHgyMSAqIHgyMSArIHkyMSAqIHkyMSxcbiAgICAgICAgICBsMjBfMiA9IHgyMCAqIHgyMCArIHkyMCAqIHkyMCxcbiAgICAgICAgICBsMjEgPSBNYXRoLnNxcnQobDIxXzIpLFxuICAgICAgICAgIGwwMSA9IE1hdGguc3FydChsMDFfMiksXG4gICAgICAgICAgbCA9IHIgKiBNYXRoLnRhbigocGkgLSBNYXRoLmFjb3MoKGwyMV8yICsgbDAxXzIgLSBsMjBfMikgLyAoMiAqIGwyMSAqIGwwMSkpKSAvIDIpLFxuICAgICAgICAgIHQwMSA9IGwgLyBsMDEsXG4gICAgICAgICAgdDIxID0gbCAvIGwyMTtcblxuICAgICAgLy8gSWYgdGhlIHN0YXJ0IHRhbmdlbnQgaXMgbm90IGNvaW5jaWRlbnQgd2l0aCAoeDAseTApLCBsaW5lIHRvLlxuICAgICAgaWYgKE1hdGguYWJzKHQwMSAtIDEpID4gZXBzaWxvbikge1xuICAgICAgICB0aGlzLl8gKz0gXCJMXCIgKyAoeDEgKyB0MDEgKiB4MDEpICsgXCIsXCIgKyAoeTEgKyB0MDEgKiB5MDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwwLFwiICsgKCsoeTAxICogeDIwID4geDAxICogeTIwKSkgKyBcIixcIiArICh0aGlzLl94MSA9IHgxICsgdDIxICogeDIxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEgKyB0MjEgKiB5MjEpO1xuICAgIH1cbiAgfSxcbiAgYXJjOiBmdW5jdGlvbih4LCB5LCByLCBhMCwgYTEsIGNjdykge1xuICAgIHggPSAreCwgeSA9ICt5LCByID0gK3IsIGNjdyA9ICEhY2N3O1xuICAgIHZhciBkeCA9IHIgKiBNYXRoLmNvcyhhMCksXG4gICAgICAgIGR5ID0gciAqIE1hdGguc2luKGEwKSxcbiAgICAgICAgeDAgPSB4ICsgZHgsXG4gICAgICAgIHkwID0geSArIGR5LFxuICAgICAgICBjdyA9IDEgXiBjY3csXG4gICAgICAgIGRhID0gY2N3ID8gYTAgLSBhMSA6IGExIC0gYTA7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDAseTApLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIE9yLCBpcyAoeDAseTApIG5vdCBjb2luY2lkZW50IHdpdGggdGhlIHByZXZpb3VzIHBvaW50PyBMaW5lIHRvICh4MCx5MCkuXG4gICAgZWxzZSBpZiAoTWF0aC5hYnModGhpcy5feDEgLSB4MCkgPiBlcHNpbG9uIHx8IE1hdGguYWJzKHRoaXMuX3kxIC0geTApID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIElzIHRoaXMgYXJjIGVtcHR5PyBXZeKAmXJlIGRvbmUuXG4gICAgaWYgKCFyKSByZXR1cm47XG5cbiAgICAvLyBEb2VzIHRoZSBhbmdsZSBnbyB0aGUgd3Jvbmcgd2F5PyBGbGlwIHRoZSBkaXJlY3Rpb24uXG4gICAgaWYgKGRhIDwgMCkgZGEgPSBkYSAlIHRhdSArIHRhdTtcblxuICAgIC8vIElzIHRoaXMgYSBjb21wbGV0ZSBjaXJjbGU/IERyYXcgdHdvIGFyY3MgdG8gY29tcGxldGUgdGhlIGNpcmNsZS5cbiAgICBpZiAoZGEgPiB0YXVFcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwxLFwiICsgY3cgKyBcIixcIiArICh4IC0gZHgpICsgXCIsXCIgKyAoeSAtIGR5KSArIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MCkgKyBcIixcIiArICh0aGlzLl95MSA9IHkwKTtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBub24tZW1wdHk/IERyYXcgYW4gYXJjIVxuICAgIGVsc2UgaWYgKGRhID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsXCIgKyAoKyhkYSA+PSBwaSkpICsgXCIsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geCArIHIgKiBNYXRoLmNvcyhhMSkpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5ICsgciAqIE1hdGguc2luKGExKSk7XG4gICAgfVxuICB9LFxuICByZWN0OiBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpICsgXCJoXCIgKyAoK3cpICsgXCJ2XCIgKyAoK2gpICsgXCJoXCIgKyAoLXcpICsgXCJaXCI7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwYXRoO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gTWF0aC5hYnMoeCA9IE1hdGgucm91bmQoeCkpID49IDFlMjFcbiAgICAgID8geC50b0xvY2FsZVN0cmluZyhcImVuXCIpLnJlcGxhY2UoLywvZywgXCJcIilcbiAgICAgIDogeC50b1N0cmluZygxMCk7XG59XG5cbi8vIENvbXB1dGVzIHRoZSBkZWNpbWFsIGNvZWZmaWNpZW50IGFuZCBleHBvbmVudCBvZiB0aGUgc3BlY2lmaWVkIG51bWJlciB4IHdpdGhcbi8vIHNpZ25pZmljYW50IGRpZ2l0cyBwLCB3aGVyZSB4IGlzIHBvc2l0aXZlIGFuZCBwIGlzIGluIFsxLCAyMV0gb3IgdW5kZWZpbmVkLlxuLy8gRm9yIGV4YW1wbGUsIGZvcm1hdERlY2ltYWxQYXJ0cygxLjIzKSByZXR1cm5zIFtcIjEyM1wiLCAwXS5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXREZWNpbWFsUGFydHMoeCwgcCkge1xuICBpZiAoKGkgPSAoeCA9IHAgPyB4LnRvRXhwb25lbnRpYWwocCAtIDEpIDogeC50b0V4cG9uZW50aWFsKCkpLmluZGV4T2YoXCJlXCIpKSA8IDApIHJldHVybiBudWxsOyAvLyBOYU4sIMKxSW5maW5pdHlcbiAgdmFyIGksIGNvZWZmaWNpZW50ID0geC5zbGljZSgwLCBpKTtcblxuICAvLyBUaGUgc3RyaW5nIHJldHVybmVkIGJ5IHRvRXhwb25lbnRpYWwgZWl0aGVyIGhhcyB0aGUgZm9ybSBcXGRcXC5cXGQrZVstK11cXGQrXG4gIC8vIChlLmcuLCAxLjJlKzMpIG9yIHRoZSBmb3JtIFxcZGVbLStdXFxkKyAoZS5nLiwgMWUrMykuXG4gIHJldHVybiBbXG4gICAgY29lZmZpY2llbnQubGVuZ3RoID4gMSA/IGNvZWZmaWNpZW50WzBdICsgY29lZmZpY2llbnQuc2xpY2UoMikgOiBjb2VmZmljaWVudCxcbiAgICAreC5zbGljZShpICsgMSlcbiAgXTtcbn1cbiIsImltcG9ydCB7Zm9ybWF0RGVjaW1hbFBhcnRzfSBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPSBmb3JtYXREZWNpbWFsUGFydHMoTWF0aC5hYnMoeCkpLCB4ID8geFsxXSA6IE5hTjtcbn1cbiIsIi8vIFtbZmlsbF1hbGlnbl1bc2lnbl1bc3ltYm9sXVswXVt3aWR0aF1bLF1bLnByZWNpc2lvbl1bfl1bdHlwZV1cbnZhciByZSA9IC9eKD86KC4pPyhbPD49Xl0pKT8oWytcXC0oIF0pPyhbJCNdKT8oMCk/KFxcZCspPygsKT8oXFwuXFxkKyk/KH4pPyhbYS16JV0pPyQvaTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICBpZiAoIShtYXRjaCA9IHJlLmV4ZWMoc3BlY2lmaWVyKSkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZm9ybWF0OiBcIiArIHNwZWNpZmllcik7XG4gIHZhciBtYXRjaDtcbiAgcmV0dXJuIG5ldyBGb3JtYXRTcGVjaWZpZXIoe1xuICAgIGZpbGw6IG1hdGNoWzFdLFxuICAgIGFsaWduOiBtYXRjaFsyXSxcbiAgICBzaWduOiBtYXRjaFszXSxcbiAgICBzeW1ib2w6IG1hdGNoWzRdLFxuICAgIHplcm86IG1hdGNoWzVdLFxuICAgIHdpZHRoOiBtYXRjaFs2XSxcbiAgICBjb21tYTogbWF0Y2hbN10sXG4gICAgcHJlY2lzaW9uOiBtYXRjaFs4XSAmJiBtYXRjaFs4XS5zbGljZSgxKSxcbiAgICB0cmltOiBtYXRjaFs5XSxcbiAgICB0eXBlOiBtYXRjaFsxMF1cbiAgfSk7XG59XG5cbmZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUgPSBGb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlOyAvLyBpbnN0YW5jZW9mXG5cbmV4cG9ydCBmdW5jdGlvbiBGb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIHRoaXMuZmlsbCA9IHNwZWNpZmllci5maWxsID09PSB1bmRlZmluZWQgPyBcIiBcIiA6IHNwZWNpZmllci5maWxsICsgXCJcIjtcbiAgdGhpcy5hbGlnbiA9IHNwZWNpZmllci5hbGlnbiA9PT0gdW5kZWZpbmVkID8gXCI+XCIgOiBzcGVjaWZpZXIuYWxpZ24gKyBcIlwiO1xuICB0aGlzLnNpZ24gPSBzcGVjaWZpZXIuc2lnbiA9PT0gdW5kZWZpbmVkID8gXCItXCIgOiBzcGVjaWZpZXIuc2lnbiArIFwiXCI7XG4gIHRoaXMuc3ltYm9sID0gc3BlY2lmaWVyLnN5bWJvbCA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IHNwZWNpZmllci5zeW1ib2wgKyBcIlwiO1xuICB0aGlzLnplcm8gPSAhIXNwZWNpZmllci56ZXJvO1xuICB0aGlzLndpZHRoID0gc3BlY2lmaWVyLndpZHRoID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiArc3BlY2lmaWVyLndpZHRoO1xuICB0aGlzLmNvbW1hID0gISFzcGVjaWZpZXIuY29tbWE7XG4gIHRoaXMucHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogK3NwZWNpZmllci5wcmVjaXNpb247XG4gIHRoaXMudHJpbSA9ICEhc3BlY2lmaWVyLnRyaW07XG4gIHRoaXMudHlwZSA9IHNwZWNpZmllci50eXBlID09PSB1bmRlZmluZWQgPyBcIlwiIDogc3BlY2lmaWVyLnR5cGUgKyBcIlwiO1xufVxuXG5Gb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmZpbGxcbiAgICAgICsgdGhpcy5hbGlnblxuICAgICAgKyB0aGlzLnNpZ25cbiAgICAgICsgdGhpcy5zeW1ib2xcbiAgICAgICsgKHRoaXMuemVybyA/IFwiMFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMud2lkdGggPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBNYXRoLm1heCgxLCB0aGlzLndpZHRoIHwgMCkpXG4gICAgICArICh0aGlzLmNvbW1hID8gXCIsXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy5wcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBcIi5cIiArIE1hdGgubWF4KDAsIHRoaXMucHJlY2lzaW9uIHwgMCkpXG4gICAgICArICh0aGlzLnRyaW0gPyBcIn5cIiA6IFwiXCIpXG4gICAgICArIHRoaXMudHlwZTtcbn07XG4iLCJpbXBvcnQge2Zvcm1hdERlY2ltYWxQYXJ0c30gZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgdmFyIHByZWZpeEV4cG9uZW50O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbFBhcnRzKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXSxcbiAgICAgIGkgPSBleHBvbmVudCAtIChwcmVmaXhFeHBvbmVudCA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50IC8gMykpKSAqIDMpICsgMSxcbiAgICAgIG4gPSBjb2VmZmljaWVudC5sZW5ndGg7XG4gIHJldHVybiBpID09PSBuID8gY29lZmZpY2llbnRcbiAgICAgIDogaSA+IG4gPyBjb2VmZmljaWVudCArIG5ldyBBcnJheShpIC0gbiArIDEpLmpvaW4oXCIwXCIpXG4gICAgICA6IGkgPiAwID8gY29lZmZpY2llbnQuc2xpY2UoMCwgaSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGkpXG4gICAgICA6IFwiMC5cIiArIG5ldyBBcnJheSgxIC0gaSkuam9pbihcIjBcIikgKyBmb3JtYXREZWNpbWFsUGFydHMoeCwgTWF0aC5tYXgoMCwgcCArIGkgLSAxKSlbMF07IC8vIGxlc3MgdGhhbiAxeSFcbn1cbiIsImltcG9ydCB7Zm9ybWF0RGVjaW1hbFBhcnRzfSBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsUGFydHMoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdO1xuICByZXR1cm4gZXhwb25lbnQgPCAwID8gXCIwLlwiICsgbmV3IEFycmF5KC1leHBvbmVudCkuam9pbihcIjBcIikgKyBjb2VmZmljaWVudFxuICAgICAgOiBjb2VmZmljaWVudC5sZW5ndGggPiBleHBvbmVudCArIDEgPyBjb2VmZmljaWVudC5zbGljZSgwLCBleHBvbmVudCArIDEpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShleHBvbmVudCArIDEpXG4gICAgICA6IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGV4cG9uZW50IC0gY29lZmZpY2llbnQubGVuZ3RoICsgMikuam9pbihcIjBcIik7XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5pbXBvcnQgZm9ybWF0UHJlZml4QXV0byBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvLmpzXCI7XG5pbXBvcnQgZm9ybWF0Um91bmRlZCBmcm9tIFwiLi9mb3JtYXRSb3VuZGVkLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgXCIlXCI6ICh4LCBwKSA9PiAoeCAqIDEwMCkudG9GaXhlZChwKSxcbiAgXCJiXCI6ICh4KSA9PiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDIpLFxuICBcImNcIjogKHgpID0+IHggKyBcIlwiLFxuICBcImRcIjogZm9ybWF0RGVjaW1hbCxcbiAgXCJlXCI6ICh4LCBwKSA9PiB4LnRvRXhwb25lbnRpYWwocCksXG4gIFwiZlwiOiAoeCwgcCkgPT4geC50b0ZpeGVkKHApLFxuICBcImdcIjogKHgsIHApID0+IHgudG9QcmVjaXNpb24ocCksXG4gIFwib1wiOiAoeCkgPT4gTWF0aC5yb3VuZCh4KS50b1N0cmluZyg4KSxcbiAgXCJwXCI6ICh4LCBwKSA9PiBmb3JtYXRSb3VuZGVkKHggKiAxMDAsIHApLFxuICBcInJcIjogZm9ybWF0Um91bmRlZCxcbiAgXCJzXCI6IGZvcm1hdFByZWZpeEF1dG8sXG4gIFwiWFwiOiAoeCkgPT4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSxcbiAgXCJ4XCI6ICh4KSA9PiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcbmltcG9ydCBmb3JtYXRHcm91cCBmcm9tIFwiLi9mb3JtYXRHcm91cC5qc1wiO1xuaW1wb3J0IGZvcm1hdE51bWVyYWxzIGZyb20gXCIuL2Zvcm1hdE51bWVyYWxzLmpzXCI7XG5pbXBvcnQgZm9ybWF0U3BlY2lmaWVyIGZyb20gXCIuL2Zvcm1hdFNwZWNpZmllci5qc1wiO1xuaW1wb3J0IGZvcm1hdFRyaW0gZnJvbSBcIi4vZm9ybWF0VHJpbS5qc1wiO1xuaW1wb3J0IGZvcm1hdFR5cGVzIGZyb20gXCIuL2Zvcm1hdFR5cGVzLmpzXCI7XG5pbXBvcnQge3ByZWZpeEV4cG9uZW50fSBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvLmpzXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHkuanNcIjtcblxudmFyIG1hcCA9IEFycmF5LnByb3RvdHlwZS5tYXAsXG4gICAgcHJlZml4ZXMgPSBbXCJ5XCIsXCJ6XCIsXCJhXCIsXCJmXCIsXCJwXCIsXCJuXCIsXCLCtVwiLFwibVwiLFwiXCIsXCJrXCIsXCJNXCIsXCJHXCIsXCJUXCIsXCJQXCIsXCJFXCIsXCJaXCIsXCJZXCJdO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihsb2NhbGUpIHtcbiAgdmFyIGdyb3VwID0gbG9jYWxlLmdyb3VwaW5nID09PSB1bmRlZmluZWQgfHwgbG9jYWxlLnRob3VzYW5kcyA9PT0gdW5kZWZpbmVkID8gaWRlbnRpdHkgOiBmb3JtYXRHcm91cChtYXAuY2FsbChsb2NhbGUuZ3JvdXBpbmcsIE51bWJlciksIGxvY2FsZS50aG91c2FuZHMgKyBcIlwiKSxcbiAgICAgIGN1cnJlbmN5UHJlZml4ID0gbG9jYWxlLmN1cnJlbmN5ID09PSB1bmRlZmluZWQgPyBcIlwiIDogbG9jYWxlLmN1cnJlbmN5WzBdICsgXCJcIixcbiAgICAgIGN1cnJlbmN5U3VmZml4ID0gbG9jYWxlLmN1cnJlbmN5ID09PSB1bmRlZmluZWQgPyBcIlwiIDogbG9jYWxlLmN1cnJlbmN5WzFdICsgXCJcIixcbiAgICAgIGRlY2ltYWwgPSBsb2NhbGUuZGVjaW1hbCA9PT0gdW5kZWZpbmVkID8gXCIuXCIgOiBsb2NhbGUuZGVjaW1hbCArIFwiXCIsXG4gICAgICBudW1lcmFscyA9IGxvY2FsZS5udW1lcmFscyA9PT0gdW5kZWZpbmVkID8gaWRlbnRpdHkgOiBmb3JtYXROdW1lcmFscyhtYXAuY2FsbChsb2NhbGUubnVtZXJhbHMsIFN0cmluZykpLFxuICAgICAgcGVyY2VudCA9IGxvY2FsZS5wZXJjZW50ID09PSB1bmRlZmluZWQgPyBcIiVcIiA6IGxvY2FsZS5wZXJjZW50ICsgXCJcIixcbiAgICAgIG1pbnVzID0gbG9jYWxlLm1pbnVzID09PSB1bmRlZmluZWQgPyBcIuKIklwiIDogbG9jYWxlLm1pbnVzICsgXCJcIixcbiAgICAgIG5hbiA9IGxvY2FsZS5uYW4gPT09IHVuZGVmaW5lZCA/IFwiTmFOXCIgOiBsb2NhbGUubmFuICsgXCJcIjtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyKSB7XG4gICAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG5cbiAgICB2YXIgZmlsbCA9IHNwZWNpZmllci5maWxsLFxuICAgICAgICBhbGlnbiA9IHNwZWNpZmllci5hbGlnbixcbiAgICAgICAgc2lnbiA9IHNwZWNpZmllci5zaWduLFxuICAgICAgICBzeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sLFxuICAgICAgICB6ZXJvID0gc3BlY2lmaWVyLnplcm8sXG4gICAgICAgIHdpZHRoID0gc3BlY2lmaWVyLndpZHRoLFxuICAgICAgICBjb21tYSA9IHNwZWNpZmllci5jb21tYSxcbiAgICAgICAgcHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbixcbiAgICAgICAgdHJpbSA9IHNwZWNpZmllci50cmltLFxuICAgICAgICB0eXBlID0gc3BlY2lmaWVyLnR5cGU7XG5cbiAgICAvLyBUaGUgXCJuXCIgdHlwZSBpcyBhbiBhbGlhcyBmb3IgXCIsZ1wiLlxuICAgIGlmICh0eXBlID09PSBcIm5cIikgY29tbWEgPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBUaGUgXCJcIiB0eXBlLCBhbmQgYW55IGludmFsaWQgdHlwZSwgaXMgYW4gYWxpYXMgZm9yIFwiLjEyfmdcIi5cbiAgICBlbHNlIGlmICghZm9ybWF0VHlwZXNbdHlwZV0pIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkICYmIChwcmVjaXNpb24gPSAxMiksIHRyaW0gPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBJZiB6ZXJvIGZpbGwgaXMgc3BlY2lmaWVkLCBwYWRkaW5nIGdvZXMgYWZ0ZXIgc2lnbiBhbmQgYmVmb3JlIGRpZ2l0cy5cbiAgICBpZiAoemVybyB8fCAoZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSkgemVybyA9IHRydWUsIGZpbGwgPSBcIjBcIiwgYWxpZ24gPSBcIj1cIjtcblxuICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgIC8vIEZvciBTSS1wcmVmaXgsIHRoZSBzdWZmaXggaXMgbGF6aWx5IGNvbXB1dGVkLlxuICAgIHZhciBwcmVmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lQcmVmaXggOiBzeW1ib2wgPT09IFwiI1wiICYmIC9bYm94WF0vLnRlc3QodHlwZSkgPyBcIjBcIiArIHR5cGUudG9Mb3dlckNhc2UoKSA6IFwiXCIsXG4gICAgICAgIHN1ZmZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVN1ZmZpeCA6IC9bJXBdLy50ZXN0KHR5cGUpID8gcGVyY2VudCA6IFwiXCI7XG5cbiAgICAvLyBXaGF0IGZvcm1hdCBmdW5jdGlvbiBzaG91bGQgd2UgdXNlP1xuICAgIC8vIElzIHRoaXMgYW4gaW50ZWdlciB0eXBlP1xuICAgIC8vIENhbiB0aGlzIHR5cGUgZ2VuZXJhdGUgZXhwb25lbnRpYWwgbm90YXRpb24/XG4gICAgdmFyIGZvcm1hdFR5cGUgPSBmb3JtYXRUeXBlc1t0eXBlXSxcbiAgICAgICAgbWF5YmVTdWZmaXggPSAvW2RlZmdwcnMlXS8udGVzdCh0eXBlKTtcblxuICAgIC8vIFNldCB0aGUgZGVmYXVsdCBwcmVjaXNpb24gaWYgbm90IHNwZWNpZmllZCxcbiAgICAvLyBvciBjbGFtcCB0aGUgc3BlY2lmaWVkIHByZWNpc2lvbiB0byB0aGUgc3VwcG9ydGVkIHJhbmdlLlxuICAgIC8vIEZvciBzaWduaWZpY2FudCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzEsIDIxXS5cbiAgICAvLyBGb3IgZml4ZWQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFswLCAyMF0uXG4gICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyA2XG4gICAgICAgIDogL1tncHJzXS8udGVzdCh0eXBlKSA/IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKVxuICAgICAgICA6IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgdmFyIHZhbHVlUHJlZml4ID0gcHJlZml4LFxuICAgICAgICAgIHZhbHVlU3VmZml4ID0gc3VmZml4LFxuICAgICAgICAgIGksIG4sIGM7XG5cbiAgICAgIGlmICh0eXBlID09PSBcImNcIikge1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9IGZvcm1hdFR5cGUodmFsdWUpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gK3ZhbHVlO1xuXG4gICAgICAgIC8vIERldGVybWluZSB0aGUgc2lnbi4gLTAgaXMgbm90IGxlc3MgdGhhbiAwLCBidXQgMSAvIC0wIGlzIVxuICAgICAgICB2YXIgdmFsdWVOZWdhdGl2ZSA9IHZhbHVlIDwgMCB8fCAxIC8gdmFsdWUgPCAwO1xuXG4gICAgICAgIC8vIFBlcmZvcm0gdGhlIGluaXRpYWwgZm9ybWF0dGluZy5cbiAgICAgICAgdmFsdWUgPSBpc05hTih2YWx1ZSkgPyBuYW4gOiBmb3JtYXRUeXBlKE1hdGguYWJzKHZhbHVlKSwgcHJlY2lzaW9uKTtcblxuICAgICAgICAvLyBUcmltIGluc2lnbmlmaWNhbnQgemVyb3MuXG4gICAgICAgIGlmICh0cmltKSB2YWx1ZSA9IGZvcm1hdFRyaW0odmFsdWUpO1xuXG4gICAgICAgIC8vIElmIGEgbmVnYXRpdmUgdmFsdWUgcm91bmRzIHRvIHplcm8gYWZ0ZXIgZm9ybWF0dGluZywgYW5kIG5vIGV4cGxpY2l0IHBvc2l0aXZlIHNpZ24gaXMgcmVxdWVzdGVkLCBoaWRlIHRoZSBzaWduLlxuICAgICAgICBpZiAodmFsdWVOZWdhdGl2ZSAmJiArdmFsdWUgPT09IDAgJiYgc2lnbiAhPT0gXCIrXCIpIHZhbHVlTmVnYXRpdmUgPSBmYWxzZTtcblxuICAgICAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAgICAgdmFsdWVQcmVmaXggPSAodmFsdWVOZWdhdGl2ZSA/IChzaWduID09PSBcIihcIiA/IHNpZ24gOiBtaW51cykgOiBzaWduID09PSBcIi1cIiB8fCBzaWduID09PSBcIihcIiA/IFwiXCIgOiBzaWduKSArIHZhbHVlUHJlZml4O1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9ICh0eXBlID09PSBcInNcIiA/IHByZWZpeGVzWzggKyBwcmVmaXhFeHBvbmVudCAvIDNdIDogXCJcIikgKyB2YWx1ZVN1ZmZpeCArICh2YWx1ZU5lZ2F0aXZlICYmIHNpZ24gPT09IFwiKFwiID8gXCIpXCIgOiBcIlwiKTtcblxuICAgICAgICAvLyBCcmVhayB0aGUgZm9ybWF0dGVkIHZhbHVlIGludG8gdGhlIGludGVnZXIg4oCcdmFsdWXigJ0gcGFydCB0aGF0IGNhbiBiZVxuICAgICAgICAvLyBncm91cGVkLCBhbmQgZnJhY3Rpb25hbCBvciBleHBvbmVudGlhbCDigJxzdWZmaXjigJ0gcGFydCB0aGF0IGlzIG5vdC5cbiAgICAgICAgaWYgKG1heWJlU3VmZml4KSB7XG4gICAgICAgICAgaSA9IC0xLCBuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgICBpZiAoYyA9IHZhbHVlLmNoYXJDb2RlQXQoaSksIDQ4ID4gYyB8fCBjID4gNTcpIHtcbiAgICAgICAgICAgICAgdmFsdWVTdWZmaXggPSAoYyA9PT0gNDYgPyBkZWNpbWFsICsgdmFsdWUuc2xpY2UoaSArIDEpIDogdmFsdWUuc2xpY2UoaSkpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgbm90IFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGJlZm9yZSBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmICF6ZXJvKSB2YWx1ZSA9IGdyb3VwKHZhbHVlLCBJbmZpbml0eSk7XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIHBhZGRpbmcuXG4gICAgICB2YXIgbGVuZ3RoID0gdmFsdWVQcmVmaXgubGVuZ3RoICsgdmFsdWUubGVuZ3RoICsgdmFsdWVTdWZmaXgubGVuZ3RoLFxuICAgICAgICAgIHBhZGRpbmcgPSBsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgOiBcIlwiO1xuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYWZ0ZXIgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiB6ZXJvKSB2YWx1ZSA9IGdyb3VwKHBhZGRpbmcgKyB2YWx1ZSwgcGFkZGluZy5sZW5ndGggPyB3aWR0aCAtIHZhbHVlU3VmZml4Lmxlbmd0aCA6IEluZmluaXR5KSwgcGFkZGluZyA9IFwiXCI7XG5cbiAgICAgIC8vIFJlY29uc3RydWN0IHRoZSBmaW5hbCBvdXRwdXQgYmFzZWQgb24gdGhlIGRlc2lyZWQgYWxpZ25tZW50LlxuICAgICAgc3dpdGNoIChhbGlnbikge1xuICAgICAgICBjYXNlIFwiPFwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmc7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiPVwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgcGFkZGluZyArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiXlwiOiB2YWx1ZSA9IHBhZGRpbmcuc2xpY2UoMCwgbGVuZ3RoID0gcGFkZGluZy5sZW5ndGggPj4gMSkgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nLnNsaWNlKGxlbmd0aCk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiB2YWx1ZSA9IHBhZGRpbmcgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVtZXJhbHModmFsdWUpO1xuICAgIH1cblxuICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNwZWNpZmllciArIFwiXCI7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JtYXQ7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSkge1xuICAgIHZhciBmID0gbmV3Rm9ybWF0KChzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSwgc3BlY2lmaWVyLnR5cGUgPSBcImZcIiwgc3BlY2lmaWVyKSksXG4gICAgICAgIGUgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCh2YWx1ZSkgLyAzKSkpICogMyxcbiAgICAgICAgayA9IE1hdGgucG93KDEwLCAtZSksXG4gICAgICAgIHByZWZpeCA9IHByZWZpeGVzWzggKyBlIC8gM107XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZihrICogdmFsdWUpICsgcHJlZml4O1xuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogbmV3Rm9ybWF0LFxuICAgIGZvcm1hdFByZWZpeDogZm9ybWF0UHJlZml4XG4gIH07XG59XG4iLCJpbXBvcnQgZm9ybWF0TG9jYWxlIGZyb20gXCIuL2xvY2FsZS5qc1wiO1xuXG52YXIgbG9jYWxlO1xuZXhwb3J0IHZhciBmb3JtYXQ7XG5leHBvcnQgdmFyIGZvcm1hdFByZWZpeDtcblxuZGVmYXVsdExvY2FsZSh7XG4gIHRob3VzYW5kczogXCIsXCIsXG4gIGdyb3VwaW5nOiBbM10sXG4gIGN1cnJlbmN5OiBbXCIkXCIsIFwiXCJdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgZm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgZm9ybWF0UHJlZml4ID0gbG9jYWxlLmZvcm1hdFByZWZpeDtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGdyb3VwaW5nLCB0aG91c2FuZHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCB3aWR0aCkge1xuICAgIHZhciBpID0gdmFsdWUubGVuZ3RoLFxuICAgICAgICB0ID0gW10sXG4gICAgICAgIGogPSAwLFxuICAgICAgICBnID0gZ3JvdXBpbmdbMF0sXG4gICAgICAgIGxlbmd0aCA9IDA7XG5cbiAgICB3aGlsZSAoaSA+IDAgJiYgZyA+IDApIHtcbiAgICAgIGlmIChsZW5ndGggKyBnICsgMSA+IHdpZHRoKSBnID0gTWF0aC5tYXgoMSwgd2lkdGggLSBsZW5ndGgpO1xuICAgICAgdC5wdXNoKHZhbHVlLnN1YnN0cmluZyhpIC09IGcsIGkgKyBnKSk7XG4gICAgICBpZiAoKGxlbmd0aCArPSBnICsgMSkgPiB3aWR0aCkgYnJlYWs7XG4gICAgICBnID0gZ3JvdXBpbmdbaiA9IChqICsgMSkgJSBncm91cGluZy5sZW5ndGhdO1xuICAgIH1cblxuICAgIHJldHVybiB0LnJldmVyc2UoKS5qb2luKHRob3VzYW5kcyk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihudW1lcmFscykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvWzAtOV0vZywgZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIG51bWVyYWxzWytpXTtcbiAgICB9KTtcbiAgfTtcbn1cbiIsIi8vIFRyaW1zIGluc2lnbmlmaWNhbnQgemVyb3MsIGUuZy4sIHJlcGxhY2VzIDEuMjAwMGsgd2l0aCAxLjJrLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocykge1xuICBvdXQ6IGZvciAodmFyIG4gPSBzLmxlbmd0aCwgaSA9IDEsIGkwID0gLTEsIGkxOyBpIDwgbjsgKytpKSB7XG4gICAgc3dpdGNoIChzW2ldKSB7XG4gICAgICBjYXNlIFwiLlwiOiBpMCA9IGkxID0gaTsgYnJlYWs7XG4gICAgICBjYXNlIFwiMFwiOiBpZiAoaTAgPT09IDApIGkwID0gaTsgaTEgPSBpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IGlmICghK3NbaV0pIGJyZWFrIG91dDsgaWYgKGkwID4gMCkgaTAgPSAwOyBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkwID4gMCA/IHMuc2xpY2UoMCwgaTApICsgcy5zbGljZShpMSArIDEpIDogcztcbn1cbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuXG5mdW5jdGlvbiBsaW5lYXIoYSwgZCkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgdCAqIGQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV4cG9uZW50aWFsKGEsIGIsIHkpIHtcbiAgcmV0dXJuIGEgPSBNYXRoLnBvdyhhLCB5KSwgYiA9IE1hdGgucG93KGIsIHkpIC0gYSwgeSA9IDEgLyB5LCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KGEgKyB0ICogYiwgeSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBodWUoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkID4gMTgwIHx8IGQgPCAtMTgwID8gZCAtIDM2MCAqIE1hdGgucm91bmQoZCAvIDM2MCkgOiBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2FtbWEoeSkge1xuICByZXR1cm4gKHkgPSAreSkgPT09IDEgPyBub2dhbW1hIDogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiIC0gYSA/IGV4cG9uZW50aWFsKGEsIGIsIHkpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vZ2FtbWEoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgeCA9PiAoKSA9PiB4O1xuIiwiaW1wb3J0IHtsYWIgYXMgY29sb3JMYWJ9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGNvbG9yIGZyb20gXCIuL2NvbG9yLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxhYihzdGFydCwgZW5kKSB7XG4gIHZhciBsID0gY29sb3IoKHN0YXJ0ID0gY29sb3JMYWIoc3RhcnQpKS5sLCAoZW5kID0gY29sb3JMYWIoZW5kKSkubCksXG4gICAgICBhID0gY29sb3Ioc3RhcnQuYSwgZW5kLmEpLFxuICAgICAgYiA9IGNvbG9yKHN0YXJ0LmIsIGVuZC5iKSxcbiAgICAgIG9wYWNpdHkgPSBjb2xvcihzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgc3RhcnQubCA9IGwodCk7XG4gICAgc3RhcnQuYSA9IGEodCk7XG4gICAgc3RhcnQuYiA9IGIodCk7XG4gICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgfTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBpbml0UmFuZ2UoZG9tYWluLCByYW5nZSkge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IGJyZWFrO1xuICAgIGNhc2UgMTogdGhpcy5yYW5nZShkb21haW4pOyBicmVhaztcbiAgICBkZWZhdWx0OiB0aGlzLnJhbmdlKHJhbmdlKS5kb21haW4oZG9tYWluKTsgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0SW50ZXJwb2xhdG9yKGRvbWFpbiwgaW50ZXJwb2xhdG9yKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogYnJlYWs7XG4gICAgY2FzZSAxOiB7XG4gICAgICBpZiAodHlwZW9mIGRvbWFpbiA9PT0gXCJmdW5jdGlvblwiKSB0aGlzLmludGVycG9sYXRvcihkb21haW4pO1xuICAgICAgZWxzZSB0aGlzLnJhbmdlKGRvbWFpbik7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgdGhpcy5kb21haW4oZG9tYWluKTtcbiAgICAgIGlmICh0eXBlb2YgaW50ZXJwb2xhdG9yID09PSBcImZ1bmN0aW9uXCIpIHRoaXMuaW50ZXJwb2xhdG9yKGludGVycG9sYXRvcik7XG4gICAgICBlbHNlIHRoaXMucmFuZ2UoaW50ZXJwb2xhdG9yKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0LmpzXCI7XG5cbmV4cG9ydCBjb25zdCBpbXBsaWNpdCA9IFN5bWJvbChcImltcGxpY2l0XCIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcmRpbmFsKCkge1xuICB2YXIgaW5kZXggPSBuZXcgTWFwKCksXG4gICAgICBkb21haW4gPSBbXSxcbiAgICAgIHJhbmdlID0gW10sXG4gICAgICB1bmtub3duID0gaW1wbGljaXQ7XG5cbiAgZnVuY3Rpb24gc2NhbGUoZCkge1xuICAgIHZhciBrZXkgPSBkICsgXCJcIiwgaSA9IGluZGV4LmdldChrZXkpO1xuICAgIGlmICghaSkge1xuICAgICAgaWYgKHVua25vd24gIT09IGltcGxpY2l0KSByZXR1cm4gdW5rbm93bjtcbiAgICAgIGluZGV4LnNldChrZXksIGkgPSBkb21haW4ucHVzaChkKSk7XG4gICAgfVxuICAgIHJldHVybiByYW5nZVsoaSAtIDEpICUgcmFuZ2UubGVuZ3RoXTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgICBkb21haW4gPSBbXSwgaW5kZXggPSBuZXcgTWFwKCk7XG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiBfKSB7XG4gICAgICBjb25zdCBrZXkgPSB2YWx1ZSArIFwiXCI7XG4gICAgICBpZiAoaW5kZXguaGFzKGtleSkpIGNvbnRpbnVlO1xuICAgICAgaW5kZXguc2V0KGtleSwgZG9tYWluLnB1c2godmFsdWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gQXJyYXkuZnJvbShfKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gb3JkaW5hbChkb21haW4sIHJhbmdlKS51bmtub3duKHVua25vd24pO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gc2NhbGU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCB4ID0+ICgpID0+IHg7XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcblxuZnVuY3Rpb24gbGluZWFyKGEsIGQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIHQgKiBkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleHBvbmVudGlhbChhLCBiLCB5KSB7XG4gIHJldHVybiBhID0gTWF0aC5wb3coYSwgeSksIGIgPSBNYXRoLnBvdyhiLCB5KSAtIGEsIHkgPSAxIC8geSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhhICsgdCAqIGIsIHkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHVlKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCA+IDE4MCB8fCBkIDwgLTE4MCA/IGQgLSAzNjAgKiBNYXRoLnJvdW5kKGQgLyAzNjApIDogZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdhbW1hKHkpIHtcbiAgcmV0dXJuICh5ID0gK3kpID09PSAxID8gbm9nYW1tYSA6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGEgPyBleHBvbmVudGlhbChhLCBiLCB5KSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2dhbW1hKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cbiIsImltcG9ydCB7cmdiIGFzIGNvbG9yUmdifSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBiYXNpcyBmcm9tIFwiLi9iYXNpcy5qc1wiO1xuaW1wb3J0IGJhc2lzQ2xvc2VkIGZyb20gXCIuL2Jhc2lzQ2xvc2VkLmpzXCI7XG5pbXBvcnQgbm9nYW1tYSwge2dhbW1hfSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gcmdiR2FtbWEoeSkge1xuICB2YXIgY29sb3IgPSBnYW1tYSh5KTtcblxuICBmdW5jdGlvbiByZ2Ioc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gY29sb3IoKHN0YXJ0ID0gY29sb3JSZ2Ioc3RhcnQpKS5yLCAoZW5kID0gY29sb3JSZ2IoZW5kKSkuciksXG4gICAgICAgIGcgPSBjb2xvcihzdGFydC5nLCBlbmQuZyksXG4gICAgICAgIGIgPSBjb2xvcihzdGFydC5iLCBlbmQuYiksXG4gICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuciA9IHIodCk7XG4gICAgICBzdGFydC5nID0gZyh0KTtcbiAgICAgIHN0YXJ0LmIgPSBiKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cblxuICByZ2IuZ2FtbWEgPSByZ2JHYW1tYTtcblxuICByZXR1cm4gcmdiO1xufSkoMSk7XG5cbmZ1bmN0aW9uIHJnYlNwbGluZShzcGxpbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbG9ycykge1xuICAgIHZhciBuID0gY29sb3JzLmxlbmd0aCxcbiAgICAgICAgciA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgZyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgaSwgY29sb3I7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgY29sb3IgPSBjb2xvclJnYihjb2xvcnNbaV0pO1xuICAgICAgcltpXSA9IGNvbG9yLnIgfHwgMDtcbiAgICAgIGdbaV0gPSBjb2xvci5nIHx8IDA7XG4gICAgICBiW2ldID0gY29sb3IuYiB8fCAwO1xuICAgIH1cbiAgICByID0gc3BsaW5lKHIpO1xuICAgIGcgPSBzcGxpbmUoZyk7XG4gICAgYiA9IHNwbGluZShiKTtcbiAgICBjb2xvci5vcGFjaXR5ID0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgY29sb3IuciA9IHIodCk7XG4gICAgICBjb2xvci5nID0gZyh0KTtcbiAgICAgIGNvbG9yLmIgPSBiKHQpO1xuICAgICAgcmV0dXJuIGNvbG9yICsgXCJcIjtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIHJnYkJhc2lzID0gcmdiU3BsaW5lKGJhc2lzKTtcbmV4cG9ydCB2YXIgcmdiQmFzaXNDbG9zZWQgPSByZ2JTcGxpbmUoYmFzaXNDbG9zZWQpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICBpZiAoIWIpIGIgPSBbXTtcbiAgdmFyIG4gPSBhID8gTWF0aC5taW4oYi5sZW5ndGgsIGEubGVuZ3RoKSA6IDAsXG4gICAgICBjID0gYi5zbGljZSgpLFxuICAgICAgaTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjW2ldID0gYVtpXSAqICgxIC0gdCkgKyBiW2ldICogdDtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyQXJyYXkoeCkge1xuICByZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KHgpICYmICEoeCBpbnN0YW5jZW9mIERhdGFWaWV3KTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZS5qc1wiO1xuaW1wb3J0IG51bWJlckFycmF5LCB7aXNOdW1iZXJBcnJheX0gZnJvbSBcIi4vbnVtYmVyQXJyYXkuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gKGlzTnVtYmVyQXJyYXkoYikgPyBudW1iZXJBcnJheSA6IGdlbmVyaWNBcnJheSkoYSwgYik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmljQXJyYXkoYSwgYikge1xuICB2YXIgbmIgPSBiID8gYi5sZW5ndGggOiAwLFxuICAgICAgbmEgPSBhID8gTWF0aC5taW4obmIsIGEubGVuZ3RoKSA6IDAsXG4gICAgICB4ID0gbmV3IEFycmF5KG5hKSxcbiAgICAgIGMgPSBuZXcgQXJyYXkobmIpLFxuICAgICAgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgeFtpXSA9IHZhbHVlKGFbaV0sIGJbaV0pO1xuICBmb3IgKDsgaSA8IG5iOyArK2kpIGNbaV0gPSBiW2ldO1xuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIGNbaV0gPSB4W2ldKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgZCA9IG5ldyBEYXRlO1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gZC5zZXRUaW1lKGEgKiAoMSAtIHQpICsgYiAqIHQpLCBkO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSAqICgxIC0gdCkgKyBiICogdDtcbiAgfTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBpID0ge30sXG4gICAgICBjID0ge30sXG4gICAgICBrO1xuXG4gIGlmIChhID09PSBudWxsIHx8IHR5cGVvZiBhICE9PSBcIm9iamVjdFwiKSBhID0ge307XG4gIGlmIChiID09PSBudWxsIHx8IHR5cGVvZiBiICE9PSBcIm9iamVjdFwiKSBiID0ge307XG5cbiAgZm9yIChrIGluIGIpIHtcbiAgICBpZiAoayBpbiBhKSB7XG4gICAgICBpW2tdID0gdmFsdWUoYVtrXSwgYltrXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNba10gPSBiW2tdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChrIGluIGkpIGNba10gPSBpW2tdKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcblxudmFyIHJlQSA9IC9bLStdPyg/OlxcZCtcXC4/XFxkKnxcXC4/XFxkKykoPzpbZUVdWy0rXT9cXGQrKT8vZyxcbiAgICByZUIgPSBuZXcgUmVnRXhwKHJlQS5zb3VyY2UsIFwiZ1wiKTtcblxuZnVuY3Rpb24gemVybyhiKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25lKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGJpID0gcmVBLmxhc3RJbmRleCA9IHJlQi5sYXN0SW5kZXggPSAwLCAvLyBzY2FuIGluZGV4IGZvciBuZXh0IG51bWJlciBpbiBiXG4gICAgICBhbSwgLy8gY3VycmVudCBtYXRjaCBpbiBhXG4gICAgICBibSwgLy8gY3VycmVudCBtYXRjaCBpbiBiXG4gICAgICBicywgLy8gc3RyaW5nIHByZWNlZGluZyBjdXJyZW50IG51bWJlciBpbiBiLCBpZiBhbnlcbiAgICAgIGkgPSAtMSwgLy8gaW5kZXggaW4gc1xuICAgICAgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcblxuICAvLyBDb2VyY2UgaW5wdXRzIHRvIHN0cmluZ3MuXG4gIGEgPSBhICsgXCJcIiwgYiA9IGIgKyBcIlwiO1xuXG4gIC8vIEludGVycG9sYXRlIHBhaXJzIG9mIG51bWJlcnMgaW4gYSAmIGIuXG4gIHdoaWxlICgoYW0gPSByZUEuZXhlYyhhKSlcbiAgICAgICYmIChibSA9IHJlQi5leGVjKGIpKSkge1xuICAgIGlmICgoYnMgPSBibS5pbmRleCkgPiBiaSkgeyAvLyBhIHN0cmluZyBwcmVjZWRlcyB0aGUgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gICAgfVxuICAgIGlmICgoYW0gPSBhbVswXSkgPT09IChibSA9IGJtWzBdKSkgeyAvLyBudW1iZXJzIGluIGEgJiBiIG1hdGNoXG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBibTsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYm07XG4gICAgfSBlbHNlIHsgLy8gaW50ZXJwb2xhdGUgbm9uLW1hdGNoaW5nIG51bWJlcnNcbiAgICAgIHNbKytpXSA9IG51bGw7XG4gICAgICBxLnB1c2goe2k6IGksIHg6IG51bWJlcihhbSwgYm0pfSk7XG4gICAgfVxuICAgIGJpID0gcmVCLmxhc3RJbmRleDtcbiAgfVxuXG4gIC8vIEFkZCByZW1haW5zIG9mIGIuXG4gIGlmIChiaSA8IGIubGVuZ3RoKSB7XG4gICAgYnMgPSBiLnNsaWNlKGJpKTtcbiAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICBlbHNlIHNbKytpXSA9IGJzO1xuICB9XG5cbiAgLy8gU3BlY2lhbCBvcHRpbWl6YXRpb24gZm9yIG9ubHkgYSBzaW5nbGUgbWF0Y2guXG4gIC8vIE90aGVyd2lzZSwgaW50ZXJwb2xhdGUgZWFjaCBvZiB0aGUgbnVtYmVycyBhbmQgcmVqb2luIHRoZSBzdHJpbmcuXG4gIHJldHVybiBzLmxlbmd0aCA8IDIgPyAocVswXVxuICAgICAgPyBvbmUocVswXS54KVxuICAgICAgOiB6ZXJvKGIpKVxuICAgICAgOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG87IGkgPCBiOyArK2kpIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgICAgICB9KTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHJnYiBmcm9tIFwiLi9yZ2IuanNcIjtcbmltcG9ydCB7Z2VuZXJpY0FycmF5fSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuaW1wb3J0IGRhdGUgZnJvbSBcIi4vZGF0ZS5qc1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcbmltcG9ydCBvYmplY3QgZnJvbSBcIi4vb2JqZWN0LmpzXCI7XG5pbXBvcnQgc3RyaW5nIGZyb20gXCIuL3N0cmluZy5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgbnVtYmVyQXJyYXksIHtpc051bWJlckFycmF5fSBmcm9tIFwiLi9udW1iZXJBcnJheS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciB0ID0gdHlwZW9mIGIsIGM7XG4gIHJldHVybiBiID09IG51bGwgfHwgdCA9PT0gXCJib29sZWFuXCIgPyBjb25zdGFudChiKVxuICAgICAgOiAodCA9PT0gXCJudW1iZXJcIiA/IG51bWJlclxuICAgICAgOiB0ID09PSBcInN0cmluZ1wiID8gKChjID0gY29sb3IoYikpID8gKGIgPSBjLCByZ2IpIDogc3RyaW5nKVxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyByZ2JcbiAgICAgIDogYiBpbnN0YW5jZW9mIERhdGUgPyBkYXRlXG4gICAgICA6IGlzTnVtYmVyQXJyYXkoYikgPyBudW1iZXJBcnJheVxuICAgICAgOiBBcnJheS5pc0FycmF5KGIpID8gZ2VuZXJpY0FycmF5XG4gICAgICA6IHR5cGVvZiBiLnZhbHVlT2YgIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYi50b1N0cmluZyAhPT0gXCJmdW5jdGlvblwiIHx8IGlzTmFOKGIpID8gb2JqZWN0XG4gICAgICA6IG51bWJlcikoYSwgYik7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgPSArYiwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKGEgKiAoMSAtIHQpICsgYiAqIHQpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbnVtYmVyKHgpIHtcbiAgcmV0dXJuICt4O1xufVxuIiwiaW1wb3J0IHtiaXNlY3R9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZSBhcyBpbnRlcnBvbGF0ZVZhbHVlLCBpbnRlcnBvbGF0ZU51bWJlciwgaW50ZXJwb2xhdGVSb3VuZH0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbnZhciB1bml0ID0gWzAsIDFdO1xuXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICByZXR1cm4geDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplKGEsIGIpIHtcbiAgcmV0dXJuIChiIC09IChhID0gK2EpKVxuICAgICAgPyBmdW5jdGlvbih4KSB7IHJldHVybiAoeCAtIGEpIC8gYjsgfVxuICAgICAgOiBjb25zdGFudChpc05hTihiKSA/IE5hTiA6IDAuNSk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wZXIoYSwgYikge1xuICB2YXIgdDtcbiAgaWYgKGEgPiBiKSB0ID0gYSwgYSA9IGIsIGIgPSB0O1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5tYXgoYSwgTWF0aC5taW4oYiwgeCkpOyB9O1xufVxuXG4vLyBub3JtYWxpemUoYSwgYikoeCkgdGFrZXMgYSBkb21haW4gdmFsdWUgeCBpbiBbYSxiXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBwYXJhbWV0ZXIgdCBpbiBbMCwxXS5cbi8vIGludGVycG9sYXRlKGEsIGIpKHQpIHRha2VzIGEgcGFyYW1ldGVyIHQgaW4gWzAsMV0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmFuZ2UgdmFsdWUgeCBpbiBbYSxiXS5cbmZ1bmN0aW9uIGJpbWFwKGRvbWFpbiwgcmFuZ2UsIGludGVycG9sYXRlKSB7XG4gIHZhciBkMCA9IGRvbWFpblswXSwgZDEgPSBkb21haW5bMV0sIHIwID0gcmFuZ2VbMF0sIHIxID0gcmFuZ2VbMV07XG4gIGlmIChkMSA8IGQwKSBkMCA9IG5vcm1hbGl6ZShkMSwgZDApLCByMCA9IGludGVycG9sYXRlKHIxLCByMCk7XG4gIGVsc2UgZDAgPSBub3JtYWxpemUoZDAsIGQxKSwgcjAgPSBpbnRlcnBvbGF0ZShyMCwgcjEpO1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4gcjAoZDAoeCkpOyB9O1xufVxuXG5mdW5jdGlvbiBwb2x5bWFwKGRvbWFpbiwgcmFuZ2UsIGludGVycG9sYXRlKSB7XG4gIHZhciBqID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSAtIDEsXG4gICAgICBkID0gbmV3IEFycmF5KGopLFxuICAgICAgciA9IG5ldyBBcnJheShqKSxcbiAgICAgIGkgPSAtMTtcblxuICAvLyBSZXZlcnNlIGRlc2NlbmRpbmcgZG9tYWlucy5cbiAgaWYgKGRvbWFpbltqXSA8IGRvbWFpblswXSkge1xuICAgIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgpLnJldmVyc2UoKTtcbiAgICByYW5nZSA9IHJhbmdlLnNsaWNlKCkucmV2ZXJzZSgpO1xuICB9XG5cbiAgd2hpbGUgKCsraSA8IGopIHtcbiAgICBkW2ldID0gbm9ybWFsaXplKGRvbWFpbltpXSwgZG9tYWluW2kgKyAxXSk7XG4gICAgcltpXSA9IGludGVycG9sYXRlKHJhbmdlW2ldLCByYW5nZVtpICsgMV0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICB2YXIgaSA9IGJpc2VjdChkb21haW4sIHgsIDEsIGopIC0gMTtcbiAgICByZXR1cm4gcltpXShkW2ldKHgpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkoc291cmNlLCB0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldFxuICAgICAgLmRvbWFpbihzb3VyY2UuZG9tYWluKCkpXG4gICAgICAucmFuZ2Uoc291cmNlLnJhbmdlKCkpXG4gICAgICAuaW50ZXJwb2xhdGUoc291cmNlLmludGVycG9sYXRlKCkpXG4gICAgICAuY2xhbXAoc291cmNlLmNsYW1wKCkpXG4gICAgICAudW5rbm93bihzb3VyY2UudW5rbm93bigpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybWVyKCkge1xuICB2YXIgZG9tYWluID0gdW5pdCxcbiAgICAgIHJhbmdlID0gdW5pdCxcbiAgICAgIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVWYWx1ZSxcbiAgICAgIHRyYW5zZm9ybSxcbiAgICAgIHVudHJhbnNmb3JtLFxuICAgICAgdW5rbm93bixcbiAgICAgIGNsYW1wID0gaWRlbnRpdHksXG4gICAgICBwaWVjZXdpc2UsXG4gICAgICBvdXRwdXQsXG4gICAgICBpbnB1dDtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHZhciBuID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKTtcbiAgICBpZiAoY2xhbXAgIT09IGlkZW50aXR5KSBjbGFtcCA9IGNsYW1wZXIoZG9tYWluWzBdLCBkb21haW5bbiAtIDFdKTtcbiAgICBwaWVjZXdpc2UgPSBuID4gMiA/IHBvbHltYXAgOiBiaW1hcDtcbiAgICBvdXRwdXQgPSBpbnB1dCA9IG51bGw7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiB4ID09IG51bGwgfHwgaXNOYU4oeCA9ICt4KSA/IHVua25vd24gOiAob3V0cHV0IHx8IChvdXRwdXQgPSBwaWVjZXdpc2UoZG9tYWluLm1hcCh0cmFuc2Zvcm0pLCByYW5nZSwgaW50ZXJwb2xhdGUpKSkodHJhbnNmb3JtKGNsYW1wKHgpKSk7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIGNsYW1wKHVudHJhbnNmb3JtKChpbnB1dCB8fCAoaW5wdXQgPSBwaWVjZXdpc2UocmFuZ2UsIGRvbWFpbi5tYXAodHJhbnNmb3JtKSwgaW50ZXJwb2xhdGVOdW1iZXIpKSkoeSkpKTtcbiAgfTtcblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gQXJyYXkuZnJvbShfLCBudW1iZXIpLCByZXNjYWxlKCkpIDogZG9tYWluLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBBcnJheS5mcm9tKF8pLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiByYW5nZSA9IEFycmF5LmZyb20oXyksIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVSb3VuZCwgcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gXyA/IHRydWUgOiBpZGVudGl0eSwgcmVzY2FsZSgpKSA6IGNsYW1wICE9PSBpZGVudGl0eTtcbiAgfTtcblxuICBzY2FsZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0ZSA9IF8sIHJlc2NhbGUoKSkgOiBpbnRlcnBvbGF0ZTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHJldHVybiBmdW5jdGlvbih0LCB1KSB7XG4gICAgdHJhbnNmb3JtID0gdCwgdW50cmFuc2Zvcm0gPSB1O1xuICAgIHJldHVybiByZXNjYWxlKCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnRpbnVvdXMoKSB7XG4gIHJldHVybiB0cmFuc2Zvcm1lcigpKGlkZW50aXR5LCBpZGVudGl0eSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25zdGFudHMoeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQge3RpY2tTdGVwfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7Zm9ybWF0LCBmb3JtYXRQcmVmaXgsIGZvcm1hdFNwZWNpZmllciwgcHJlY2lzaW9uRml4ZWQsIHByZWNpc2lvblByZWZpeCwgcHJlY2lzaW9uUm91bmR9IGZyb20gXCJkMy1mb3JtYXRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGlja0Zvcm1hdChzdGFydCwgc3RvcCwgY291bnQsIHNwZWNpZmllcikge1xuICB2YXIgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCksXG4gICAgICBwcmVjaXNpb247XG4gIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIgPT0gbnVsbCA/IFwiLGZcIiA6IHNwZWNpZmllcik7XG4gIHN3aXRjaCAoc3BlY2lmaWVyLnR5cGUpIHtcbiAgICBjYXNlIFwic1wiOiB7XG4gICAgICB2YXIgdmFsdWUgPSBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKTtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblByZWZpeChzdGVwLCB2YWx1ZSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xuICAgICAgcmV0dXJuIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKTtcbiAgICB9XG4gICAgY2FzZSBcIlwiOlxuICAgIGNhc2UgXCJlXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJyXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblJvdW5kKHN0ZXAsIE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiZVwiKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZlwiOlxuICAgIGNhc2UgXCIlXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvbkZpeGVkKHN0ZXApKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCIlXCIpICogMjtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZm9ybWF0KHNwZWNpZmllcik7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCwgdmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzIC0gZXhwb25lbnQoTWF0aC5hYnMoc3RlcCkpKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCBtYXgpIHtcbiAgc3RlcCA9IE1hdGguYWJzKHN0ZXApLCBtYXggPSBNYXRoLmFicyhtYXgpIC0gc3RlcDtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIGV4cG9uZW50KG1heCkgLSBleHBvbmVudChzdGVwKSkgKyAxO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXApIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIC1leHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IHt0aWNrcywgdGlja0luY3JlbWVudH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQgY29udGludW91cywge2NvcHl9IGZyb20gXCIuL2NvbnRpbnVvdXMuanNcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0LmpzXCI7XG5pbXBvcnQgdGlja0Zvcm1hdCBmcm9tIFwiLi90aWNrRm9ybWF0LmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5lYXJpc2goc2NhbGUpIHtcbiAgdmFyIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja3MoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCk7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgIHJldHVybiB0aWNrRm9ybWF0KGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQsIHNwZWNpZmllcik7XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG5cbiAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgIHZhciBpMCA9IDA7XG4gICAgdmFyIGkxID0gZC5sZW5ndGggLSAxO1xuICAgIHZhciBzdGFydCA9IGRbaTBdO1xuICAgIHZhciBzdG9wID0gZFtpMV07XG4gICAgdmFyIHByZXN0ZXA7XG4gICAgdmFyIHN0ZXA7XG4gICAgdmFyIG1heEl0ZXIgPSAxMDtcblxuICAgIGlmIChzdG9wIDwgc3RhcnQpIHtcbiAgICAgIHN0ZXAgPSBzdGFydCwgc3RhcnQgPSBzdG9wLCBzdG9wID0gc3RlcDtcbiAgICAgIHN0ZXAgPSBpMCwgaTAgPSBpMSwgaTEgPSBzdGVwO1xuICAgIH1cbiAgICBcbiAgICB3aGlsZSAobWF4SXRlci0tID4gMCkge1xuICAgICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcbiAgICAgIGlmIChzdGVwID09PSBwcmVzdGVwKSB7XG4gICAgICAgIGRbaTBdID0gc3RhcnRcbiAgICAgICAgZFtpMV0gPSBzdG9wXG4gICAgICAgIHJldHVybiBkb21haW4oZCk7XG4gICAgICB9IGVsc2UgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCAvIHN0ZXApICogc3RlcDtcbiAgICAgICAgc3RvcCA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgfSBlbHNlIGlmIChzdGVwIDwgMCkge1xuICAgICAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcHJlc3RlcCA9IHN0ZXA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGluZWFyKCkge1xuICB2YXIgc2NhbGUgPSBjb250aW51b3VzKCk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBsaW5lYXIoKSk7XG4gIH07XG5cbiAgaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuIiwidmFyIHQwID0gbmV3IERhdGUsXG4gICAgdDEgPSBuZXcgRGF0ZTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbmV3SW50ZXJ2YWwoZmxvb3JpLCBvZmZzZXRpLCBjb3VudCwgZmllbGQpIHtcblxuICBmdW5jdGlvbiBpbnRlcnZhbChkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMCA/IG5ldyBEYXRlIDogbmV3IERhdGUoK2RhdGUpKSwgZGF0ZTtcbiAgfVxuXG4gIGludGVydmFsLmZsb29yID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKSksIGRhdGU7XG4gIH07XG5cbiAgaW50ZXJ2YWwuY2VpbCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZShkYXRlIC0gMSkpLCBvZmZzZXRpKGRhdGUsIDEpLCBmbG9vcmkoZGF0ZSksIGRhdGU7XG4gIH07XG5cbiAgaW50ZXJ2YWwucm91bmQgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgdmFyIGQwID0gaW50ZXJ2YWwoZGF0ZSksXG4gICAgICAgIGQxID0gaW50ZXJ2YWwuY2VpbChkYXRlKTtcbiAgICByZXR1cm4gZGF0ZSAtIGQwIDwgZDEgLSBkYXRlID8gZDAgOiBkMTtcbiAgfTtcblxuICBpbnRlcnZhbC5vZmZzZXQgPSBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgcmV0dXJuIG9mZnNldGkoZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKSwgc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCkpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLnJhbmdlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICB2YXIgcmFuZ2UgPSBbXSwgcHJldmlvdXM7XG4gICAgc3RhcnQgPSBpbnRlcnZhbC5jZWlsKHN0YXJ0KTtcbiAgICBzdGVwID0gc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgaWYgKCEoc3RhcnQgPCBzdG9wKSB8fCAhKHN0ZXAgPiAwKSkgcmV0dXJuIHJhbmdlOyAvLyBhbHNvIGhhbmRsZXMgSW52YWxpZCBEYXRlXG4gICAgZG8gcmFuZ2UucHVzaChwcmV2aW91cyA9IG5ldyBEYXRlKCtzdGFydCkpLCBvZmZzZXRpKHN0YXJ0LCBzdGVwKSwgZmxvb3JpKHN0YXJ0KTtcbiAgICB3aGlsZSAocHJldmlvdXMgPCBzdGFydCAmJiBzdGFydCA8IHN0b3ApO1xuICAgIHJldHVybiByYW5nZTtcbiAgfTtcblxuICBpbnRlcnZhbC5maWx0ZXIgPSBmdW5jdGlvbih0ZXN0KSB7XG4gICAgcmV0dXJuIG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIGlmIChkYXRlID49IGRhdGUpIHdoaWxlIChmbG9vcmkoZGF0ZSksICF0ZXN0KGRhdGUpKSBkYXRlLnNldFRpbWUoZGF0ZSAtIDEpO1xuICAgIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICAgIGlmIChkYXRlID49IGRhdGUpIHtcbiAgICAgICAgaWYgKHN0ZXAgPCAwKSB3aGlsZSAoKytzdGVwIDw9IDApIHtcbiAgICAgICAgICB3aGlsZSAob2Zmc2V0aShkYXRlLCAtMSksICF0ZXN0KGRhdGUpKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gICAgICAgIH0gZWxzZSB3aGlsZSAoLS1zdGVwID49IDApIHtcbiAgICAgICAgICB3aGlsZSAob2Zmc2V0aShkYXRlLCArMSksICF0ZXN0KGRhdGUpKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBpZiAoY291bnQpIHtcbiAgICBpbnRlcnZhbC5jb3VudCA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHQwLnNldFRpbWUoK3N0YXJ0KSwgdDEuc2V0VGltZSgrZW5kKTtcbiAgICAgIGZsb29yaSh0MCksIGZsb29yaSh0MSk7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcihjb3VudCh0MCwgdDEpKTtcbiAgICB9O1xuXG4gICAgaW50ZXJ2YWwuZXZlcnkgPSBmdW5jdGlvbihzdGVwKSB7XG4gICAgICBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcbiAgICAgIHJldHVybiAhaXNGaW5pdGUoc3RlcCkgfHwgIShzdGVwID4gMCkgPyBudWxsXG4gICAgICAgICAgOiAhKHN0ZXAgPiAxKSA/IGludGVydmFsXG4gICAgICAgICAgOiBpbnRlcnZhbC5maWx0ZXIoZmllbGRcbiAgICAgICAgICAgICAgPyBmdW5jdGlvbihkKSB7IHJldHVybiBmaWVsZChkKSAlIHN0ZXAgPT09IDA7IH1cbiAgICAgICAgICAgICAgOiBmdW5jdGlvbihkKSB7IHJldHVybiBpbnRlcnZhbC5jb3VudCgwLCBkKSAlIHN0ZXAgPT09IDA7IH0pO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gaW50ZXJ2YWw7XG59XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIG1pbGxpc2Vjb25kID0gaW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gIC8vIG5vb3Bcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQgLSBzdGFydDtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG5taWxsaXNlY29uZC5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgayA9IE1hdGguZmxvb3Ioayk7XG4gIGlmICghaXNGaW5pdGUoaykgfHwgIShrID4gMCkpIHJldHVybiBudWxsO1xuICBpZiAoIShrID4gMSkpIHJldHVybiBtaWxsaXNlY29uZDtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gaykgKiBrKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBrKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gaztcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtaWxsaXNlY29uZDtcbmV4cG9ydCB2YXIgbWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmQucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciBzZWNvbmQgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25TZWNvbmQ7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ1NlY29uZHMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzZWNvbmQ7XG5leHBvcnQgdmFyIHNlY29uZHMgPSBzZWNvbmQucmFuZ2U7XG4iLCJleHBvcnQgY29uc3QgZHVyYXRpb25TZWNvbmQgPSAxMDAwO1xuZXhwb3J0IGNvbnN0IGR1cmF0aW9uTWludXRlID0gZHVyYXRpb25TZWNvbmQgKiA2MDtcbmV4cG9ydCBjb25zdCBkdXJhdGlvbkhvdXIgPSBkdXJhdGlvbk1pbnV0ZSAqIDYwO1xuZXhwb3J0IGNvbnN0IGR1cmF0aW9uRGF5ID0gZHVyYXRpb25Ib3VyICogMjQ7XG5leHBvcnQgY29uc3QgZHVyYXRpb25XZWVrID0gZHVyYXRpb25EYXkgKiA3O1xuZXhwb3J0IGNvbnN0IGR1cmF0aW9uTW9udGggPSBkdXJhdGlvbkRheSAqIDMwO1xuZXhwb3J0IGNvbnN0IGR1cmF0aW9uWWVhciA9IGR1cmF0aW9uRGF5ICogMzY1O1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlLCBkdXJhdGlvblNlY29uZH0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIG1pbnV0ZSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKGRhdGUgLSBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC0gZGF0ZS5nZXRTZWNvbmRzKCkgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25NaW51dGU7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldE1pbnV0ZXMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtaW51dGU7XG5leHBvcnQgdmFyIG1pbnV0ZXMgPSBtaW51dGUucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25Ib3VyLCBkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciBob3VyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFRpbWUoZGF0ZSAtIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkgLSBkYXRlLmdldFNlY29uZHMoKSAqIGR1cmF0aW9uU2Vjb25kIC0gZGF0ZS5nZXRNaW51dGVzKCkgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbkhvdXIpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uSG91cjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBob3VyO1xuZXhwb3J0IHZhciBob3VycyA9IGhvdXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25EYXksIGR1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgZGF5ID0gaW50ZXJ2YWwoXG4gIGRhdGUgPT4gZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKSxcbiAgKGRhdGUsIHN0ZXApID0+IGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXApLFxuICAoc3RhcnQsIGVuZCkgPT4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbkRheSxcbiAgZGF0ZSA9PiBkYXRlLmdldERhdGUoKSAtIDFcbik7XG5cbmV4cG9ydCBkZWZhdWx0IGRheTtcbmV4cG9ydCB2YXIgZGF5cyA9IGRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25XZWVrfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG5mdW5jdGlvbiB3ZWVrZGF5KGkpIHtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoZGF0ZS5nZXREYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwICogNyk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbldlZWs7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIHN1bmRheSA9IHdlZWtkYXkoMCk7XG5leHBvcnQgdmFyIG1vbmRheSA9IHdlZWtkYXkoMSk7XG5leHBvcnQgdmFyIHR1ZXNkYXkgPSB3ZWVrZGF5KDIpO1xuZXhwb3J0IHZhciB3ZWRuZXNkYXkgPSB3ZWVrZGF5KDMpO1xuZXhwb3J0IHZhciB0aHVyc2RheSA9IHdlZWtkYXkoNCk7XG5leHBvcnQgdmFyIGZyaWRheSA9IHdlZWtkYXkoNSk7XG5leHBvcnQgdmFyIHNhdHVyZGF5ID0gd2Vla2RheSg2KTtcblxuZXhwb3J0IHZhciBzdW5kYXlzID0gc3VuZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBtb25kYXlzID0gbW9uZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB0dWVzZGF5cyA9IHR1ZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHdlZG5lc2RheXMgPSB3ZWRuZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHRodXJzZGF5cyA9IHRodXJzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBmcmlkYXlzID0gZnJpZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBzYXR1cmRheXMgPSBzYXR1cmRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG52YXIgbW9udGggPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0RGF0ZSgxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRNb250aCgpIC0gc3RhcnQuZ2V0TW9udGgoKSArIChlbmQuZ2V0RnVsbFllYXIoKSAtIHN0YXJ0LmdldEZ1bGxZZWFyKCkpICogMTI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldE1vbnRoKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbW9udGg7XG5leHBvcnQgdmFyIG1vbnRocyA9IG1vbnRoLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5cbnZhciB5ZWFyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpO1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbnllYXIuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKE1hdGguZmxvb3IoZGF0ZS5nZXRGdWxsWWVhcigpIC8gaykgKiBrKTtcbiAgICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB5ZWFyO1xuZXhwb3J0IHZhciB5ZWFycyA9IHllYXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciB1dGNNaW51dGUgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDU2Vjb25kcygwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbk1pbnV0ZTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTWludXRlcygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y01pbnV0ZTtcbmV4cG9ydCB2YXIgdXRjTWludXRlcyA9IHV0Y01pbnV0ZS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbkhvdXJ9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciB1dGNIb3VyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ01pbnV0ZXMoMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbkhvdXIpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uSG91cjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDSG91cnMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNIb3VyO1xuZXhwb3J0IHZhciB1dGNIb3VycyA9IHV0Y0hvdXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25EYXl9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciB1dGNEYXkgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uRGF5O1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENEYXRlKCkgLSAxO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y0RheTtcbmV4cG9ydCB2YXIgdXRjRGF5cyA9IHV0Y0RheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbldlZWt9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbmZ1bmN0aW9uIHV0Y1dlZWtkYXkoaSkge1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIChkYXRlLmdldFVUQ0RheSgpICsgNyAtIGkpICUgNyk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXAgKiA3KTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25XZWVrO1xuICB9KTtcbn1cblxuZXhwb3J0IHZhciB1dGNTdW5kYXkgPSB1dGNXZWVrZGF5KDApO1xuZXhwb3J0IHZhciB1dGNNb25kYXkgPSB1dGNXZWVrZGF5KDEpO1xuZXhwb3J0IHZhciB1dGNUdWVzZGF5ID0gdXRjV2Vla2RheSgyKTtcbmV4cG9ydCB2YXIgdXRjV2VkbmVzZGF5ID0gdXRjV2Vla2RheSgzKTtcbmV4cG9ydCB2YXIgdXRjVGh1cnNkYXkgPSB1dGNXZWVrZGF5KDQpO1xuZXhwb3J0IHZhciB1dGNGcmlkYXkgPSB1dGNXZWVrZGF5KDUpO1xuZXhwb3J0IHZhciB1dGNTYXR1cmRheSA9IHV0Y1dlZWtkYXkoNik7XG5cbmV4cG9ydCB2YXIgdXRjU3VuZGF5cyA9IHV0Y1N1bmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjTW9uZGF5cyA9IHV0Y01vbmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjVHVlc2RheXMgPSB1dGNUdWVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNXZWRuZXNkYXlzID0gdXRjV2VkbmVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNUaHVyc2RheXMgPSB1dGNUaHVyc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjRnJpZGF5cyA9IHV0Y0ZyaWRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjU2F0dXJkYXlzID0gdXRjU2F0dXJkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIHV0Y01vbnRoID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ0RhdGUoMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDTW9udGgoZGF0ZS5nZXRVVENNb250aCgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0VVRDTW9udGgoKSAtIHN0YXJ0LmdldFVUQ01vbnRoKCkgKyAoZW5kLmdldFVUQ0Z1bGxZZWFyKCkgLSBzdGFydC5nZXRVVENGdWxsWWVhcigpKSAqIDEyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENNb250aCgpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y01vbnRoO1xuZXhwb3J0IHZhciB1dGNNb250aHMgPSB1dGNNb250aC5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG52YXIgdXRjWWVhciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRVVENGdWxsWWVhcigpIC0gc3RhcnQuZ2V0VVRDRnVsbFllYXIoKTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG51dGNZZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICByZXR1cm4gIWlzRmluaXRlKGsgPSBNYXRoLmZsb29yKGspKSB8fCAhKGsgPiAwKSA/IG51bGwgOiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSAvIGspICogayk7XG4gICAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjWWVhcjtcbmV4cG9ydCB2YXIgdXRjWWVhcnMgPSB1dGNZZWFyLnJhbmdlO1xuIiwiaW1wb3J0IHtiaXNlY3RvciwgdGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtkdXJhdGlvbkRheSwgZHVyYXRpb25Ib3VyLCBkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25Nb250aCwgZHVyYXRpb25TZWNvbmQsIGR1cmF0aW9uV2VlaywgZHVyYXRpb25ZZWFyfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuaW1wb3J0IG1pbGxpc2Vjb25kIGZyb20gXCIuL21pbGxpc2Vjb25kLmpzXCI7XG5pbXBvcnQgc2Vjb25kIGZyb20gXCIuL3NlY29uZC5qc1wiO1xuaW1wb3J0IG1pbnV0ZSBmcm9tIFwiLi9taW51dGUuanNcIjtcbmltcG9ydCBob3VyIGZyb20gXCIuL2hvdXIuanNcIjtcbmltcG9ydCBkYXkgZnJvbSBcIi4vZGF5LmpzXCI7XG5pbXBvcnQge3N1bmRheSBhcyB3ZWVrfSBmcm9tIFwiLi93ZWVrLmpzXCI7XG5pbXBvcnQgbW9udGggZnJvbSBcIi4vbW9udGguanNcIjtcbmltcG9ydCB5ZWFyIGZyb20gXCIuL3llYXIuanNcIjtcbmltcG9ydCB1dGNNaW51dGUgZnJvbSBcIi4vdXRjTWludXRlLmpzXCI7XG5pbXBvcnQgdXRjSG91ciBmcm9tIFwiLi91dGNIb3VyLmpzXCI7XG5pbXBvcnQgdXRjRGF5IGZyb20gXCIuL3V0Y0RheS5qc1wiO1xuaW1wb3J0IHt1dGNTdW5kYXkgYXMgdXRjV2Vla30gZnJvbSBcIi4vdXRjV2Vlay5qc1wiO1xuaW1wb3J0IHV0Y01vbnRoIGZyb20gXCIuL3V0Y01vbnRoLmpzXCI7XG5pbXBvcnQgdXRjWWVhciBmcm9tIFwiLi91dGNZZWFyLmpzXCI7XG5cbmZ1bmN0aW9uIHRpY2tlcih5ZWFyLCBtb250aCwgd2VlaywgZGF5LCBob3VyLCBtaW51dGUpIHtcblxuICBjb25zdCB0aWNrSW50ZXJ2YWxzID0gW1xuICAgIFtzZWNvbmQsICAxLCAgICAgIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbc2Vjb25kLCAgNSwgIDUgKiBkdXJhdGlvblNlY29uZF0sXG4gICAgW3NlY29uZCwgMTUsIDE1ICogZHVyYXRpb25TZWNvbmRdLFxuICAgIFtzZWNvbmQsIDMwLCAzMCAqIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbbWludXRlLCAgMSwgICAgICBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgW21pbnV0ZSwgIDUsICA1ICogZHVyYXRpb25NaW51dGVdLFxuICAgIFttaW51dGUsIDE1LCAxNSAqIGR1cmF0aW9uTWludXRlXSxcbiAgICBbbWludXRlLCAzMCwgMzAgKiBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgWyAgaG91ciwgIDEsICAgICAgZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgIGhvdXIsICAzLCAgMyAqIGR1cmF0aW9uSG91ciAgXSxcbiAgICBbICBob3VyLCAgNiwgIDYgKiBkdXJhdGlvbkhvdXIgIF0sXG4gICAgWyAgaG91ciwgMTIsIDEyICogZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgICBkYXksICAxLCAgICAgIGR1cmF0aW9uRGF5ICAgXSxcbiAgICBbICAgZGF5LCAgMiwgIDIgKiBkdXJhdGlvbkRheSAgIF0sXG4gICAgWyAgd2VlaywgIDEsICAgICAgZHVyYXRpb25XZWVrICBdLFxuICAgIFsgbW9udGgsICAxLCAgICAgIGR1cmF0aW9uTW9udGggXSxcbiAgICBbIG1vbnRoLCAgMywgIDMgKiBkdXJhdGlvbk1vbnRoIF0sXG4gICAgWyAgeWVhciwgIDEsICAgICAgZHVyYXRpb25ZZWFyICBdXG4gIF07XG5cbiAgZnVuY3Rpb24gdGlja3Moc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gICAgY29uc3QgcmV2ZXJzZSA9IHN0b3AgPCBzdGFydDtcbiAgICBpZiAocmV2ZXJzZSkgW3N0YXJ0LCBzdG9wXSA9IFtzdG9wLCBzdGFydF07XG4gICAgY29uc3QgaW50ZXJ2YWwgPSBjb3VudCAmJiB0eXBlb2YgY291bnQucmFuZ2UgPT09IFwiZnVuY3Rpb25cIiA/IGNvdW50IDogdGlja0ludGVydmFsKHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgY29uc3QgdGlja3MgPSBpbnRlcnZhbCA/IGludGVydmFsLnJhbmdlKHN0YXJ0LCArc3RvcCArIDEpIDogW107IC8vIGluY2x1c2l2ZSBzdG9wXG4gICAgcmV0dXJuIHJldmVyc2UgPyB0aWNrcy5yZXZlcnNlKCkgOiB0aWNrcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2tJbnRlcnZhbChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBNYXRoLmFicyhzdG9wIC0gc3RhcnQpIC8gY291bnQ7XG4gICAgY29uc3QgaSA9IGJpc2VjdG9yKChbLCwgc3RlcF0pID0+IHN0ZXApLnJpZ2h0KHRpY2tJbnRlcnZhbHMsIHRhcmdldCk7XG4gICAgaWYgKGkgPT09IHRpY2tJbnRlcnZhbHMubGVuZ3RoKSByZXR1cm4geWVhci5ldmVyeSh0aWNrU3RlcChzdGFydCAvIGR1cmF0aW9uWWVhciwgc3RvcCAvIGR1cmF0aW9uWWVhciwgY291bnQpKTtcbiAgICBpZiAoaSA9PT0gMCkgcmV0dXJuIG1pbGxpc2Vjb25kLmV2ZXJ5KE1hdGgubWF4KHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCksIDEpKTtcbiAgICBjb25zdCBbdCwgc3RlcF0gPSB0aWNrSW50ZXJ2YWxzW3RhcmdldCAvIHRpY2tJbnRlcnZhbHNbaSAtIDFdWzJdIDwgdGlja0ludGVydmFsc1tpXVsyXSAvIHRhcmdldCA/IGkgLSAxIDogaV07XG4gICAgcmV0dXJuIHQuZXZlcnkoc3RlcCk7XG4gIH1cblxuICByZXR1cm4gW3RpY2tzLCB0aWNrSW50ZXJ2YWxdO1xufVxuXG5jb25zdCBbdXRjVGlja3MsIHV0Y1RpY2tJbnRlcnZhbF0gPSB0aWNrZXIodXRjWWVhciwgdXRjTW9udGgsIHV0Y1dlZWssIHV0Y0RheSwgdXRjSG91ciwgdXRjTWludXRlKTtcbmNvbnN0IFt0aW1lVGlja3MsIHRpbWVUaWNrSW50ZXJ2YWxdID0gdGlja2VyKHllYXIsIG1vbnRoLCB3ZWVrLCBkYXksIGhvdXIsIG1pbnV0ZSk7XG5cbmV4cG9ydCB7dXRjVGlja3MsIHV0Y1RpY2tJbnRlcnZhbCwgdGltZVRpY2tzLCB0aW1lVGlja0ludGVydmFsfTtcbiIsImltcG9ydCB7XG4gIHRpbWVEYXksXG4gIHRpbWVTdW5kYXksXG4gIHRpbWVNb25kYXksXG4gIHRpbWVUaHVyc2RheSxcbiAgdGltZVllYXIsXG4gIHV0Y0RheSxcbiAgdXRjU3VuZGF5LFxuICB1dGNNb25kYXksXG4gIHV0Y1RodXJzZGF5LFxuICB1dGNZZWFyXG59IGZyb20gXCJkMy10aW1lXCI7XG5cbmZ1bmN0aW9uIGxvY2FsRGF0ZShkKSB7XG4gIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG59XG5cbmZ1bmN0aW9uIHV0Y0RhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQygtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZC55KTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG59XG5cbmZ1bmN0aW9uIG5ld0RhdGUoeSwgbSwgZCkge1xuICByZXR1cm4ge3k6IHksIG06IG0sIGQ6IGQsIEg6IDAsIE06IDAsIFM6IDAsIEw6IDB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRMb2NhbGUobG9jYWxlKSB7XG4gIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsXG4gICAgICBsb2NhbGVfZGF0ZSA9IGxvY2FsZS5kYXRlLFxuICAgICAgbG9jYWxlX3RpbWUgPSBsb2NhbGUudGltZSxcbiAgICAgIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsXG4gICAgICBsb2NhbGVfd2Vla2RheXMgPSBsb2NhbGUuZGF5cyxcbiAgICAgIGxvY2FsZV9zaG9ydFdlZWtkYXlzID0gbG9jYWxlLnNob3J0RGF5cyxcbiAgICAgIGxvY2FsZV9tb250aHMgPSBsb2NhbGUubW9udGhzLFxuICAgICAgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuXG4gIHZhciBwZXJpb2RSZSA9IGZvcm1hdFJlKGxvY2FsZV9wZXJpb2RzKSxcbiAgICAgIHBlcmlvZExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfcGVyaW9kcyksXG4gICAgICB3ZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgd2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICBzaG9ydFdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgbW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9tb250aHMpLFxuICAgICAgbW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX21vbnRocyksXG4gICAgICBzaG9ydE1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRNb250aHMpLFxuICAgICAgc2hvcnRNb250aExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRNb250aHMpO1xuXG4gIHZhciBmb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFdlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFNob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdE1vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRNaWNyb3NlY29uZHMsXG4gICAgXCJnXCI6IGZvcm1hdFllYXJJU08sXG4gICAgXCJHXCI6IGZvcm1hdEZ1bGxZZWFySVNPLFxuICAgIFwiSFwiOiBmb3JtYXRIb3VyMjQsXG4gICAgXCJJXCI6IGZvcm1hdEhvdXIxMixcbiAgICBcImpcIjogZm9ybWF0RGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBmb3JtYXRNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IGZvcm1hdE1vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBmb3JtYXRNaW51dGVzLFxuICAgIFwicFwiOiBmb3JtYXRQZXJpb2QsXG4gICAgXCJxXCI6IGZvcm1hdFF1YXJ0ZXIsXG4gICAgXCJRXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBmb3JtYXRTZWNvbmRzLFxuICAgIFwidVwiOiBmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBmb3JtYXRXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBudWxsLFxuICAgIFwiWFwiOiBudWxsLFxuICAgIFwieVwiOiBmb3JtYXRZZWFyLFxuICAgIFwiWVwiOiBmb3JtYXRGdWxsWWVhcixcbiAgICBcIlpcIjogZm9ybWF0Wm9uZSxcbiAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICB2YXIgdXRjRm9ybWF0cyA9IHtcbiAgICBcImFcIjogZm9ybWF0VVRDU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBmb3JtYXRVVENXZWVrZGF5LFxuICAgIFwiYlwiOiBmb3JtYXRVVENTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBmb3JtYXRVVENNb250aCxcbiAgICBcImNcIjogbnVsbCxcbiAgICBcImRcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImVcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImZcIjogZm9ybWF0VVRDTWljcm9zZWNvbmRzLFxuICAgIFwiZ1wiOiBmb3JtYXRVVENZZWFySVNPLFxuICAgIFwiR1wiOiBmb3JtYXRVVENGdWxsWWVhcklTTyxcbiAgICBcIkhcIjogZm9ybWF0VVRDSG91cjI0LFxuICAgIFwiSVwiOiBmb3JtYXRVVENIb3VyMTIsXG4gICAgXCJqXCI6IGZvcm1hdFVUQ0RheU9mWWVhcixcbiAgICBcIkxcIjogZm9ybWF0VVRDTWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBmb3JtYXRVVENNb250aE51bWJlcixcbiAgICBcIk1cIjogZm9ybWF0VVRDTWludXRlcyxcbiAgICBcInBcIjogZm9ybWF0VVRDUGVyaW9kLFxuICAgIFwicVwiOiBmb3JtYXRVVENRdWFydGVyLFxuICAgIFwiUVwiOiBmb3JtYXRVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogZm9ybWF0VVRDU2Vjb25kcyxcbiAgICBcInVcIjogZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogZm9ybWF0VVRDV2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogZm9ybWF0VVRDV2Vla051bWJlcklTTyxcbiAgICBcIndcIjogZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogZm9ybWF0VVRDV2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogbnVsbCxcbiAgICBcIlhcIjogbnVsbCxcbiAgICBcInlcIjogZm9ybWF0VVRDWWVhcixcbiAgICBcIllcIjogZm9ybWF0VVRDRnVsbFllYXIsXG4gICAgXCJaXCI6IGZvcm1hdFVUQ1pvbmUsXG4gICAgXCIlXCI6IGZvcm1hdExpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgdmFyIHBhcnNlcyA9IHtcbiAgICBcImFcIjogcGFyc2VTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IHBhcnNlV2Vla2RheSxcbiAgICBcImJcIjogcGFyc2VTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBwYXJzZU1vbnRoLFxuICAgIFwiY1wiOiBwYXJzZUxvY2FsZURhdGVUaW1lLFxuICAgIFwiZFwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgXCJlXCI6IHBhcnNlRGF5T2ZNb250aCxcbiAgICBcImZcIjogcGFyc2VNaWNyb3NlY29uZHMsXG4gICAgXCJnXCI6IHBhcnNlWWVhcixcbiAgICBcIkdcIjogcGFyc2VGdWxsWWVhcixcbiAgICBcIkhcIjogcGFyc2VIb3VyMjQsXG4gICAgXCJJXCI6IHBhcnNlSG91cjI0LFxuICAgIFwialwiOiBwYXJzZURheU9mWWVhcixcbiAgICBcIkxcIjogcGFyc2VNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IHBhcnNlTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IHBhcnNlTWludXRlcyxcbiAgICBcInBcIjogcGFyc2VQZXJpb2QsXG4gICAgXCJxXCI6IHBhcnNlUXVhcnRlcixcbiAgICBcIlFcIjogcGFyc2VVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBwYXJzZVNlY29uZHMsXG4gICAgXCJ1XCI6IHBhcnNlV2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogcGFyc2VXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBwYXJzZVdlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IHBhcnNlV2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogcGFyc2VXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBwYXJzZUxvY2FsZURhdGUsXG4gICAgXCJYXCI6IHBhcnNlTG9jYWxlVGltZSxcbiAgICBcInlcIjogcGFyc2VZZWFyLFxuICAgIFwiWVwiOiBwYXJzZUZ1bGxZZWFyLFxuICAgIFwiWlwiOiBwYXJzZVpvbmUsXG4gICAgXCIlXCI6IHBhcnNlTGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICAvLyBUaGVzZSByZWN1cnNpdmUgZGlyZWN0aXZlIGRlZmluaXRpb25zIG11c3QgYmUgZGVmZXJyZWQuXG4gIGZvcm1hdHMueCA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIGZvcm1hdHMpO1xuICB1dGNGb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCB1dGNGb3JtYXRzKTtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyLCBmb3JtYXRzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBbXSxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgaiA9IDAsXG4gICAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgICAgYyxcbiAgICAgICAgICBwYWQsXG4gICAgICAgICAgZm9ybWF0O1xuXG4gICAgICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSk7XG5cbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmIChzcGVjaWZpZXIuY2hhckNvZGVBdChpKSA9PT0gMzcpIHtcbiAgICAgICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgICAgIGlmICgocGFkID0gcGFkc1tjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpXSkgIT0gbnVsbCkgYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKTtcbiAgICAgICAgICBlbHNlIHBhZCA9IGMgPT09IFwiZVwiID8gXCIgXCIgOiBcIjBcIjtcbiAgICAgICAgICBpZiAoZm9ybWF0ID0gZm9ybWF0c1tjXSkgYyA9IGZvcm1hdChkYXRlLCBwYWQpO1xuICAgICAgICAgIHN0cmluZy5wdXNoKGMpO1xuICAgICAgICAgIGogPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgcmV0dXJuIHN0cmluZy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBuZXdQYXJzZShzcGVjaWZpZXIsIFopIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgZCA9IG5ld0RhdGUoMTkwMCwgdW5kZWZpbmVkLCAxKSxcbiAgICAgICAgICBpID0gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcgKz0gXCJcIiwgMCksXG4gICAgICAgICAgd2VlaywgZGF5O1xuICAgICAgaWYgKGkgIT0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cbiAgICAgIC8vIElmIGEgVU5JWCB0aW1lc3RhbXAgaXMgc3BlY2lmaWVkLCByZXR1cm4gaXQuXG4gICAgICBpZiAoXCJRXCIgaW4gZCkgcmV0dXJuIG5ldyBEYXRlKGQuUSk7XG4gICAgICBpZiAoXCJzXCIgaW4gZCkgcmV0dXJuIG5ldyBEYXRlKGQucyAqIDEwMDAgKyAoXCJMXCIgaW4gZCA/IGQuTCA6IDApKTtcblxuICAgICAgLy8gSWYgdGhpcyBpcyB1dGNQYXJzZSwgbmV2ZXIgdXNlIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAgICAgIGlmIChaICYmICEoXCJaXCIgaW4gZCkpIGQuWiA9IDA7XG5cbiAgICAgIC8vIFRoZSBhbS1wbSBmbGFnIGlzIDAgZm9yIEFNLCBhbmQgMSBmb3IgUE0uXG4gICAgICBpZiAoXCJwXCIgaW4gZCkgZC5IID0gZC5IICUgMTIgKyBkLnAgKiAxMjtcblxuICAgICAgLy8gSWYgdGhlIG1vbnRoIHdhcyBub3Qgc3BlY2lmaWVkLCBpbmhlcml0IGZyb20gdGhlIHF1YXJ0ZXIuXG4gICAgICBpZiAoZC5tID09PSB1bmRlZmluZWQpIGQubSA9IFwicVwiIGluIGQgPyBkLnEgOiAwO1xuXG4gICAgICAvLyBDb252ZXJ0IGRheS1vZi13ZWVrIGFuZCB3ZWVrLW9mLXllYXIgdG8gZGF5LW9mLXllYXIuXG4gICAgICBpZiAoXCJWXCIgaW4gZCkge1xuICAgICAgICBpZiAoZC5WIDwgMSB8fCBkLlYgPiA1MykgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSAxO1xuICAgICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICAgIHdlZWsgPSB1dGNEYXRlKG5ld0RhdGUoZC55LCAwLCAxKSksIGRheSA9IHdlZWsuZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgd2VlayA9IGRheSA+IDQgfHwgZGF5ID09PSAwID8gdXRjTW9uZGF5LmNlaWwod2VlaykgOiB1dGNNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHV0Y0RheS5vZmZzZXQod2VlaywgKGQuViAtIDEpICogNyk7XG4gICAgICAgICAgZC55ID0gd2Vlay5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgICAgIGQubSA9IHdlZWsuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICBkLmQgPSB3ZWVrLmdldFVUQ0RhdGUoKSArIChkLncgKyA2KSAlIDc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2VlayA9IGxvY2FsRGF0ZShuZXdEYXRlKGQueSwgMCwgMSkpLCBkYXkgPSB3ZWVrLmdldERheSgpO1xuICAgICAgICAgIHdlZWsgPSBkYXkgPiA0IHx8IGRheSA9PT0gMCA/IHRpbWVNb25kYXkuY2VpbCh3ZWVrKSA6IHRpbWVNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHRpbWVEYXkub2Zmc2V0KHdlZWssIChkLlYgLSAxKSAqIDcpO1xuICAgICAgICAgIGQueSA9IHdlZWsuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICBkLm0gPSB3ZWVrLmdldE1vbnRoKCk7XG4gICAgICAgICAgZC5kID0gd2Vlay5nZXREYXRlKCkgKyAoZC53ICsgNikgJSA3O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFwiV1wiIGluIGQgfHwgXCJVXCIgaW4gZCkge1xuICAgICAgICBpZiAoIShcIndcIiBpbiBkKSkgZC53ID0gXCJ1XCIgaW4gZCA/IGQudSAlIDcgOiBcIldcIiBpbiBkID8gMSA6IDA7XG4gICAgICAgIGRheSA9IFwiWlwiIGluIGQgPyB1dGNEYXRlKG5ld0RhdGUoZC55LCAwLCAxKSkuZ2V0VVRDRGF5KCkgOiBsb2NhbERhdGUobmV3RGF0ZShkLnksIDAsIDEpKS5nZXREYXkoKTtcbiAgICAgICAgZC5tID0gMDtcbiAgICAgICAgZC5kID0gXCJXXCIgaW4gZCA/IChkLncgKyA2KSAlIDcgKyBkLlcgKiA3IC0gKGRheSArIDUpICUgNyA6IGQudyArIGQuVSAqIDcgLSAoZGF5ICsgNikgJSA3O1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBhIHRpbWUgem9uZSBpcyBzcGVjaWZpZWQsIGFsbCBmaWVsZHMgYXJlIGludGVycHJldGVkIGFzIFVUQyBhbmQgdGhlblxuICAgICAgLy8gb2Zmc2V0IGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIHRpbWUgem9uZS5cbiAgICAgIGlmIChcIlpcIiBpbiBkKSB7XG4gICAgICAgIGQuSCArPSBkLlogLyAxMDAgfCAwO1xuICAgICAgICBkLk0gKz0gZC5aICUgMTAwO1xuICAgICAgICByZXR1cm4gdXRjRGF0ZShkKTtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlLCBhbGwgZmllbGRzIGFyZSBpbiBsb2NhbCB0aW1lLlxuICAgICAgcmV0dXJuIGxvY2FsRGF0ZShkKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcsIGopIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICBtID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgYyxcbiAgICAgICAgcGFyc2U7XG5cbiAgICB3aGlsZSAoaSA8IG4pIHtcbiAgICAgIGlmIChqID49IG0pIHJldHVybiAtMTtcbiAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckNvZGVBdChpKyspO1xuICAgICAgaWYgKGMgPT09IDM3KSB7XG4gICAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckF0KGkrKyk7XG4gICAgICAgIHBhcnNlID0gcGFyc2VzW2MgaW4gcGFkcyA/IHNwZWNpZmllci5jaGFyQXQoaSsrKSA6IGNdO1xuICAgICAgICBpZiAoIXBhcnNlIHx8ICgoaiA9IHBhcnNlKGQsIHN0cmluZywgaikpIDwgMCkpIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPSBzdHJpbmcuY2hhckNvZGVBdChqKyspKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gajtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUGVyaW9kKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gcGVyaW9kUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQucCA9IHBlcmlvZExvb2t1cC5nZXQoblswXS50b0xvd2VyQ2FzZSgpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTaG9ydFdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBzaG9ydFdlZWtkYXlSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC53ID0gc2hvcnRXZWVrZGF5TG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSB3ZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHdlZWtkYXlMb29rdXAuZ2V0KG5bMF0udG9Mb3dlckNhc2UoKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0TW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gc2hvcnRNb250aExvb2t1cC5nZXQoblswXS50b0xvd2VyQ2FzZSgpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQubSA9IG1vbnRoTG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZVRpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfdGltZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0RGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldE1vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UGVyaW9kKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldEhvdXJzKCkgPj0gMTIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFF1YXJ0ZXIoZCkge1xuICAgIHJldHVybiAxICsgfn4oZC5nZXRNb250aCgpIC8gMyk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1BlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRVVENIb3VycygpID49IDEyKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENRdWFydGVyKGQpIHtcbiAgICByZXR1cm4gMSArIH5+KGQuZ2V0VVRDTW9udGgoKSAvIDMpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIGYgPSBuZXdGb3JtYXQoc3BlY2lmaWVyICs9IFwiXCIsIGZvcm1hdHMpO1xuICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIGY7XG4gICAgfSxcbiAgICBwYXJzZTogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgcCA9IG5ld1BhcnNlKHNwZWNpZmllciArPSBcIlwiLCBmYWxzZSk7XG4gICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gcDtcbiAgICB9LFxuICAgIHV0Y0Zvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgdXRjRm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHV0Y1BhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIHRydWUpO1xuICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICB9O1xufVxuXG52YXIgcGFkcyA9IHtcIi1cIjogXCJcIiwgXCJfXCI6IFwiIFwiLCBcIjBcIjogXCIwXCJ9LFxuICAgIG51bWJlclJlID0gL15cXHMqXFxkKy8sIC8vIG5vdGU6IGlnbm9yZXMgbmV4dCBkaXJlY3RpdmVcbiAgICBwZXJjZW50UmUgPSAvXiUvLFxuICAgIHJlcXVvdGVSZSA9IC9bXFxcXF4kKis/fFtcXF0oKS57fV0vZztcblxuZnVuY3Rpb24gcGFkKHZhbHVlLCBmaWxsLCB3aWR0aCkge1xuICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/IFwiLVwiIDogXCJcIixcbiAgICAgIHN0cmluZyA9IChzaWduID8gLXZhbHVlIDogdmFsdWUpICsgXCJcIixcbiAgICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHJldHVybiBzaWduICsgKGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSArIHN0cmluZyA6IHN0cmluZyk7XG59XG5cbmZ1bmN0aW9uIHJlcXVvdGUocykge1xuICByZXR1cm4gcy5yZXBsYWNlKHJlcXVvdGVSZSwgXCJcXFxcJCZcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFJlKG5hbWVzKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKHJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TG9va3VwKG5hbWVzKSB7XG4gIHJldHVybiBuZXcgTWFwKG5hbWVzLm1hcCgobmFtZSwgaSkgPT4gW25hbWUudG9Mb3dlckNhc2UoKSwgaV0pKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQudyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLnUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5VID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVySVNPKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuViA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlcgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUZ1bGxZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA0KSk7XG4gIHJldHVybiBuID8gKGQueSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSArICgrblswXSA+IDY4ID8gMTkwMCA6IDIwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWm9uZShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSAvXihaKXwoWystXVxcZFxcZCkoPzo6PyhcXGRcXGQpKT8vLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuWiA9IG5bMV0gPyAwIDogLShuWzJdICsgKG5bM10gfHwgXCIwMFwiKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VRdWFydGVyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQucSA9IG5bMF0gKiAzIC0gMywgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1vbnRoTnVtYmVyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQubSA9IG5bMF0gLSAxLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF5T2ZNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZURheU9mWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICByZXR1cm4gbiA/IChkLm0gPSAwLCBkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUhvdXIyNChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLkggPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pbnV0ZXMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5NID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VTZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuUyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWlsbGlzZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gIHJldHVybiBuID8gKGQuTCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWljcm9zZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuTCA9IE1hdGguZmxvb3IoblswXSAvIDEwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTGl0ZXJhbFBlcmNlbnQoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gcGVyY2VudFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gaSArIG5bMF0ubGVuZ3RoIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gIHJldHVybiBuID8gKGQuUSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICByZXR1cm4gbiA/IChkLnMgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXlPZk1vbnRoKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldERhdGUoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhvdXIyNChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRIb3VycygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0SG91cjEyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERheU9mWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoMSArIHRpbWVEYXkuY291bnQodGltZVllYXIoZCksIGQpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFNlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgcmV0dXJuIGRheSA9PT0gMCA/IDcgOiBkYXk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHRpbWVTdW5kYXkuY291bnQodGltZVllYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGRJU08oZCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgcmV0dXJuIChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdGltZVRodXJzZGF5KGQpIDogdGltZVRodXJzZGF5LmNlaWwoZCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJJU08oZCwgcCkge1xuICBkID0gZElTTyhkKTtcbiAgcmV0dXJuIHBhZCh0aW1lVGh1cnNkYXkuY291bnQodGltZVllYXIoZCksIGQpICsgKHRpbWVZZWFyKGQpLmdldERheSgpID09PSA0KSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXkoZCkge1xuICByZXR1cm4gZC5nZXREYXkoKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodGltZU1vbmRheS5jb3VudCh0aW1lWWVhcihkKSAtIDEsIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0WWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0WWVhcklTTyhkLCBwKSB7XG4gIGQgPSBkSVNPKGQpO1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEZ1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEZ1bGxZZWFySVNPKGQsIHApIHtcbiAgdmFyIGRheSA9IGQuZ2V0RGF5KCk7XG4gIGQgPSAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IHRpbWVUaHVyc2RheShkKSA6IHRpbWVUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0Wm9uZShkKSB7XG4gIHZhciB6ID0gZC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICByZXR1cm4gKHogPiAwID8gXCItXCIgOiAoeiAqPSAtMSwgXCIrXCIpKVxuICAgICAgKyBwYWQoeiAvIDYwIHwgMCwgXCIwXCIsIDIpXG4gICAgICArIHBhZCh6ICUgNjAsIFwiMFwiLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENEYXRlKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMjQoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0hvdXIxMihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENEYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKDEgKyB1dGNEYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWxsaXNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWNyb3NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApICsgXCIwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTW9udGhOdW1iZXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTW9udGgoKSArIDEsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaW51dGVzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01pbnV0ZXMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDU2Vjb25kcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheShkKSB7XG4gIHZhciBkb3cgPSBkLmdldFVUQ0RheSgpO1xuICByZXR1cm4gZG93ID09PSAwID8gNyA6IGRvdztcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodXRjU3VuZGF5LmNvdW50KHV0Y1llYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIFVUQ2RJU08oZCkge1xuICB2YXIgZGF5ID0gZC5nZXRVVENEYXkoKTtcbiAgcmV0dXJuIChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdXRjVGh1cnNkYXkoZCkgOiB1dGNUaHVyc2RheS5jZWlsKGQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVySVNPKGQsIHApIHtcbiAgZCA9IFVUQ2RJU08oZCk7XG4gIHJldHVybiBwYWQodXRjVGh1cnNkYXkuY291bnQodXRjWWVhcihkKSwgZCkgKyAodXRjWWVhcihkKS5nZXRVVENEYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0VVRDRGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y01vbmRheS5jb3VudCh1dGNZZWFyKGQpIC0gMSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENZZWFySVNPKGQsIHApIHtcbiAgZCA9IFVUQ2RJU08oZCk7XG4gIHJldHVybiBwYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRnVsbFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRnVsbFllYXJJU08oZCwgcCkge1xuICB2YXIgZGF5ID0gZC5nZXRVVENEYXkoKTtcbiAgZCA9IChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdXRjVGh1cnNkYXkoZCkgOiB1dGNUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDWm9uZSgpIHtcbiAgcmV0dXJuIFwiKzAwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TGl0ZXJhbFBlcmNlbnQoKSB7XG4gIHJldHVybiBcIiVcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5peFRpbWVzdGFtcChkKSB7XG4gIHJldHVybiArZDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMoZCkge1xuICByZXR1cm4gTWF0aC5mbG9vcigrZCAvIDEwMDApO1xufVxuIiwiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGUuanNcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgdGltZUZvcm1hdDtcbmV4cG9ydCB2YXIgdGltZVBhcnNlO1xuZXhwb3J0IHZhciB1dGNGb3JtYXQ7XG5leHBvcnQgdmFyIHV0Y1BhcnNlO1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGF0ZVRpbWU6IFwiJXgsICVYXCIsXG4gIGRhdGU6IFwiJS1tLyUtZC8lWVwiLFxuICB0aW1lOiBcIiUtSTolTTolUyAlcFwiLFxuICBwZXJpb2RzOiBbXCJBTVwiLCBcIlBNXCJdLFxuICBkYXlzOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXSxcbiAgc2hvcnREYXlzOiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXG4gIG1vbnRoczogW1wiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIl0sXG4gIHNob3J0TW9udGhzOiBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICB0aW1lRm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgdGltZVBhcnNlID0gbG9jYWxlLnBhcnNlO1xuICB1dGNGb3JtYXQgPSBsb2NhbGUudXRjRm9ybWF0O1xuICB1dGNQYXJzZSA9IGxvY2FsZS51dGNQYXJzZTtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImltcG9ydCB7dGltZVllYXIsIHRpbWVNb250aCwgdGltZVdlZWssIHRpbWVEYXksIHRpbWVIb3VyLCB0aW1lTWludXRlLCB0aW1lU2Vjb25kLCB0aW1lVGlja3MsIHRpbWVUaWNrSW50ZXJ2YWx9IGZyb20gXCJkMy10aW1lXCI7XG5pbXBvcnQge3RpbWVGb3JtYXR9IGZyb20gXCJkMy10aW1lLWZvcm1hdFwiO1xuaW1wb3J0IGNvbnRpbnVvdXMsIHtjb3B5fSBmcm9tIFwiLi9jb250aW51b3VzLmpzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuaW1wb3J0IG5pY2UgZnJvbSBcIi4vbmljZS5qc1wiO1xuXG5mdW5jdGlvbiBkYXRlKHQpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKHQpO1xufVxuXG5mdW5jdGlvbiBudW1iZXIodCkge1xuICByZXR1cm4gdCBpbnN0YW5jZW9mIERhdGUgPyArdCA6ICtuZXcgRGF0ZSgrdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxlbmRhcih0aWNrcywgdGlja0ludGVydmFsLCB5ZWFyLCBtb250aCwgd2VlaywgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgZm9ybWF0KSB7XG4gIHZhciBzY2FsZSA9IGNvbnRpbnVvdXMoKSxcbiAgICAgIGludmVydCA9IHNjYWxlLmludmVydCxcbiAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICB2YXIgZm9ybWF0TWlsbGlzZWNvbmQgPSBmb3JtYXQoXCIuJUxcIiksXG4gICAgICBmb3JtYXRTZWNvbmQgPSBmb3JtYXQoXCI6JVNcIiksXG4gICAgICBmb3JtYXRNaW51dGUgPSBmb3JtYXQoXCIlSTolTVwiKSxcbiAgICAgIGZvcm1hdEhvdXIgPSBmb3JtYXQoXCIlSSAlcFwiKSxcbiAgICAgIGZvcm1hdERheSA9IGZvcm1hdChcIiVhICVkXCIpLFxuICAgICAgZm9ybWF0V2VlayA9IGZvcm1hdChcIiViICVkXCIpLFxuICAgICAgZm9ybWF0TW9udGggPSBmb3JtYXQoXCIlQlwiKSxcbiAgICAgIGZvcm1hdFllYXIgPSBmb3JtYXQoXCIlWVwiKTtcblxuICBmdW5jdGlvbiB0aWNrRm9ybWF0KGRhdGUpIHtcbiAgICByZXR1cm4gKHNlY29uZChkYXRlKSA8IGRhdGUgPyBmb3JtYXRNaWxsaXNlY29uZFxuICAgICAgICA6IG1pbnV0ZShkYXRlKSA8IGRhdGUgPyBmb3JtYXRTZWNvbmRcbiAgICAgICAgOiBob3VyKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdE1pbnV0ZVxuICAgICAgICA6IGRheShkYXRlKSA8IGRhdGUgPyBmb3JtYXRIb3VyXG4gICAgICAgIDogbW9udGgoZGF0ZSkgPCBkYXRlID8gKHdlZWsoZGF0ZSkgPCBkYXRlID8gZm9ybWF0RGF5IDogZm9ybWF0V2VlaylcbiAgICAgICAgOiB5ZWFyKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdE1vbnRoXG4gICAgICAgIDogZm9ybWF0WWVhcikoZGF0ZSk7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGludmVydCh5KSk7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gZG9tYWluKEFycmF5LmZyb20oXywgbnVtYmVyKSkgOiBkb21haW4oKS5tYXAoZGF0ZSk7XG4gIH07XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihpbnRlcnZhbCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIHRpY2tzKGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgaW50ZXJ2YWwgPT0gbnVsbCA/IDEwIDogaW50ZXJ2YWwpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgcmV0dXJuIHNwZWNpZmllciA9PSBudWxsID8gdGlja0Zvcm1hdCA6IGZvcm1hdChzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihpbnRlcnZhbCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgaWYgKCFpbnRlcnZhbCB8fCB0eXBlb2YgaW50ZXJ2YWwucmFuZ2UgIT09IFwiZnVuY3Rpb25cIikgaW50ZXJ2YWwgPSB0aWNrSW50ZXJ2YWwoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBpbnRlcnZhbCA9PSBudWxsID8gMTAgOiBpbnRlcnZhbCk7XG4gICAgcmV0dXJuIGludGVydmFsID8gZG9tYWluKG5pY2UoZCwgaW50ZXJ2YWwpKSA6IHNjYWxlO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgY2FsZW5kYXIodGlja3MsIHRpY2tJbnRlcnZhbCwgeWVhciwgbW9udGgsIHdlZWssIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIGZvcm1hdCkpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGltZSgpIHtcbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShjYWxlbmRhcih0aW1lVGlja3MsIHRpbWVUaWNrSW50ZXJ2YWwsIHRpbWVZZWFyLCB0aW1lTW9udGgsIHRpbWVXZWVrLCB0aW1lRGF5LCB0aW1lSG91ciwgdGltZU1pbnV0ZSwgdGltZVNlY29uZCwgdGltZUZvcm1hdCkuZG9tYWluKFtuZXcgRGF0ZSgyMDAwLCAwLCAxKSwgbmV3IERhdGUoMjAwMCwgMCwgMildKSwgYXJndW1lbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5pY2UoZG9tYWluLCBpbnRlcnZhbCkge1xuICBkb21haW4gPSBkb21haW4uc2xpY2UoKTtcblxuICB2YXIgaTAgPSAwLFxuICAgICAgaTEgPSBkb21haW4ubGVuZ3RoIC0gMSxcbiAgICAgIHgwID0gZG9tYWluW2kwXSxcbiAgICAgIHgxID0gZG9tYWluW2kxXSxcbiAgICAgIHQ7XG5cbiAgaWYgKHgxIDwgeDApIHtcbiAgICB0ID0gaTAsIGkwID0gaTEsIGkxID0gdDtcbiAgICB0ID0geDAsIHgwID0geDEsIHgxID0gdDtcbiAgfVxuXG4gIGRvbWFpbltpMF0gPSBpbnRlcnZhbC5mbG9vcih4MCk7XG4gIGRvbWFpbltpMV0gPSBpbnRlcnZhbC5jZWlsKHgxKTtcbiAgcmV0dXJuIGRvbWFpbjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbnN0YW50KCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IHZhciBhYnMgPSBNYXRoLmFicztcbmV4cG9ydCB2YXIgYXRhbjIgPSBNYXRoLmF0YW4yO1xuZXhwb3J0IHZhciBjb3MgPSBNYXRoLmNvcztcbmV4cG9ydCB2YXIgbWF4ID0gTWF0aC5tYXg7XG5leHBvcnQgdmFyIG1pbiA9IE1hdGgubWluO1xuZXhwb3J0IHZhciBzaW4gPSBNYXRoLnNpbjtcbmV4cG9ydCB2YXIgc3FydCA9IE1hdGguc3FydDtcblxuZXhwb3J0IHZhciBlcHNpbG9uID0gMWUtMTI7XG5leHBvcnQgdmFyIHBpID0gTWF0aC5QSTtcbmV4cG9ydCB2YXIgaGFsZlBpID0gcGkgLyAyO1xuZXhwb3J0IHZhciB0YXUgPSAyICogcGk7XG5cbmV4cG9ydCBmdW5jdGlvbiBhY29zKHgpIHtcbiAgcmV0dXJuIHggPiAxID8gMCA6IHggPCAtMSA/IHBpIDogTWF0aC5hY29zKHgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNpbih4KSB7XG4gIHJldHVybiB4ID49IDEgPyBoYWxmUGkgOiB4IDw9IC0xID8gLWhhbGZQaSA6IE1hdGguYXNpbih4KTtcbn1cbiIsImltcG9ydCB7IE1vbWVudCB9IGZyb20gXCJtb21lbnRcIjtcclxuXHJcbmV4cG9ydCBlbnVtIFNlYXJjaFR5cGUge1xyXG4gICAgVGFnLFxyXG4gICAgRnJvbnRtYXR0ZXIsXHJcbiAgICBXaWtpLFxyXG4gICAgVGV4dCxcclxuICAgIGR2RmllbGQsXHJcbiAgICBUYWJsZSxcclxuICAgIEZpbGVNZXRhLFxyXG4gICAgVGFzayxcclxuICAgIFRhc2tEb25lLFxyXG4gICAgVGFza05vdERvbmUsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIEdyYXBoVHlwZSB7XHJcbiAgICBMaW5lLFxyXG4gICAgQmFyLFxyXG4gICAgUGllLFxyXG4gICAgUmFkYXIsXHJcbiAgICBTdW1tYXJ5LFxyXG4gICAgVGFibGUsXHJcbiAgICBNb250aCxcclxuICAgIEhlYXRtYXAsXHJcbiAgICBCdWxsZXQsXHJcbiAgICBVbmtub3duLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBWYWx1ZVR5cGUge1xyXG4gICAgTnVtYmVyLFxyXG4gICAgSW50LFxyXG4gICAgRGF0ZSxcclxuICAgIFRpbWUsXHJcbiAgICBEYXRlVGltZSxcclxuICAgIFN0cmluZyxcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERhdGFQb2ludCB7XHJcbiAgICBkYXRlOiBNb21lbnQ7XHJcbiAgICB2YWx1ZTogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGU6IE1vbWVudCwgdmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuZGF0ZSA9IGRhdGU7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUXVlcnkge1xyXG4gICAgcHJpdmF0ZSB0eXBlOiBTZWFyY2hUeXBlIHwgbnVsbDtcclxuICAgIHByaXZhdGUgdGFyZ2V0OiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHBhcmVudFRhcmdldDogc3RyaW5nIHwgbnVsbDtcclxuICAgIHByaXZhdGUgc2VwYXJhdG9yOiBzdHJpbmc7IC8vIG11bHRpcGxlIHZhbHVlIHNlcGFyYXRvclxyXG4gICAgcHJpdmF0ZSBpZDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBhY2Nlc3NvcjogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBhY2Nlc3NvcjE6IG51bWJlcjtcclxuICAgIHByaXZhdGUgYWNjZXNzb3IyOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIG51bVRhcmdldHM6IG51bWJlcjtcclxuXHJcbiAgICB2YWx1ZVR5cGU6IFZhbHVlVHlwZTtcclxuICAgIHVzZWRBc1hEYXRhc2V0OiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGlkOiBudW1iZXIsIHNlYXJjaFR5cGU6IFNlYXJjaFR5cGUsIHNlYXJjaFRhcmdldDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy50eXBlID0gc2VhcmNoVHlwZTtcclxuICAgICAgICB0aGlzLnRhcmdldCA9IHNlYXJjaFRhcmdldDtcclxuICAgICAgICB0aGlzLnNlcGFyYXRvciA9IFwiL1wiO1xyXG4gICAgICAgIHRoaXMuaWQgPSBpZDtcclxuICAgICAgICB0aGlzLmFjY2Vzc29yID0gLTE7XHJcbiAgICAgICAgdGhpcy5hY2Nlc3NvcjEgPSAtMTtcclxuICAgICAgICB0aGlzLmFjY2Vzc29yMiA9IC0xO1xyXG4gICAgICAgIHRoaXMudmFsdWVUeXBlID0gVmFsdWVUeXBlLk51bWJlcjtcclxuICAgICAgICB0aGlzLnVzZWRBc1hEYXRhc2V0ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5udW1UYXJnZXRzID0gMDtcclxuXHJcbiAgICAgICAgaWYgKHNlYXJjaFR5cGUgPT09IFNlYXJjaFR5cGUuVGFibGUpIHtcclxuICAgICAgICAgICAgLy8gc2VhcmNoVGFyZ2V0IC0tPiB7e2ZpbGVQYXRofX1be3t0YWJsZX19XVt7e2NvbHVtbn19XVxyXG4gICAgICAgICAgICBsZXQgc3RyUmVnZXggPVxyXG4gICAgICAgICAgICAgICAgXCJcXFxcWyg/PGFjY2Vzc29yPlswLTldKylcXFxcXVxcXFxbKD88YWNjZXNzb3IxPlswLTldKylcXFxcXShcXFxcWyg/PGFjY2Vzc29yMj5bMC05XSspXFxcXF0pP1wiO1xyXG4gICAgICAgICAgICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHN0clJlZ2V4LCBcImdtXCIpO1xyXG4gICAgICAgICAgICBsZXQgbWF0Y2g7XHJcbiAgICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSByZWdleC5leGVjKHNlYXJjaFRhcmdldCkpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1hdGNoLmdyb3Vwcy5hY2Nlc3NvciAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhY2Nlc3NvciA9IHBhcnNlRmxvYXQobWF0Y2guZ3JvdXBzLmFjY2Vzc29yKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKGFjY2Vzc29yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1hdGNoLmdyb3Vwcy5hY2Nlc3NvcjEgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhY2Nlc3NvcjEgPSBwYXJzZUZsb2F0KG1hdGNoLmdyb3Vwcy5hY2Nlc3NvcjEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE51bWJlci5pc051bWJlcihhY2Nlc3NvcjEpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFjY2Vzc29yMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBtYXRjaC5ncm91cHMuYWNjZXNzb3IyICE9PVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc29yMiA9IHBhcnNlRmxvYXQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaC5ncm91cHMuYWNjZXNzb3IyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjY2Vzc29yID0gYWNjZXNzb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY2Nlc3NvcjEgPSBhY2Nlc3NvcjE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE51bWJlci5pc051bWJlcihhY2Nlc3NvcjIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWNjZXNzb3IyID0gYWNjZXNzb3IyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudFRhcmdldCA9IHNlYXJjaFRhcmdldC5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBzdHJSZWdleCA9IFwiXFxcXFsoPzxhY2Nlc3Nvcj5bMC05XSspXFxcXF1cIjtcclxuICAgICAgICAgICAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChzdHJSZWdleCwgXCJnbVwiKTtcclxuICAgICAgICAgICAgbGV0IG1hdGNoO1xyXG4gICAgICAgICAgICB3aGlsZSAoKG1hdGNoID0gcmVnZXguZXhlYyhzZWFyY2hUYXJnZXQpKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtYXRjaC5ncm91cHMuYWNjZXNzb3IgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYWNjZXNzb3IgPSBwYXJzZUZsb2F0KG1hdGNoLmdyb3Vwcy5hY2Nlc3Nvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE51bWJlci5pc051bWJlcihhY2Nlc3NvcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY2Nlc3NvciA9IGFjY2Vzc29yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudFRhcmdldCA9IHNlYXJjaFRhcmdldC5yZXBsYWNlKHJlZ2V4LCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGVxdWFsVG8ob3RoZXI6IFF1ZXJ5KTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gb3RoZXIudHlwZSAmJiB0aGlzLnRhcmdldCA9PT0gb3RoZXIudGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0VGFyZ2V0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRhcmdldDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0UGFyZW50VGFyZ2V0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudFRhcmdldDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0SWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEFjY2Vzc29yKGluZGV4ID0gMCkge1xyXG4gICAgICAgIHN3aXRjaCAoaW5kZXgpIHtcclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWNjZXNzb3I7XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFjY2Vzc29yMTtcclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWNjZXNzb3IyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFNlcGFyYXRvcihzZXA6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuc2VwYXJhdG9yID0gc2VwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRTZXBhcmF0b3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VwYXJhdG9yO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGROdW1UYXJnZXRzKG51bTogbnVtYmVyID0gMSkge1xyXG4gICAgICAgIHRoaXMubnVtVGFyZ2V0cyA9IHRoaXMubnVtVGFyZ2V0cyArIG51bTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0TnVtVGFyZ2V0cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5udW1UYXJnZXRzO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFF1ZXJ5VmFsdWVQYWlyIHtcclxuICAgIHF1ZXJ5OiBRdWVyeTtcclxuICAgIHZhbHVlOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBEYXRhc2V0IGltcGxlbWVudHMgSXRlcmFibGVJdGVyYXRvcjxEYXRhUG9pbnQ+IHtcclxuICAgIC8vIEFycmF5IG9mIERhdGFQb2ludHNcclxuICAgIHByaXZhdGUgbmFtZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBxdWVyeTogUXVlcnk7XHJcbiAgICBwcml2YXRlIHZhbHVlczogbnVtYmVyW107XHJcbiAgICBwcml2YXRlIHBhcmVudDogRGF0YXNldHM7XHJcbiAgICBwcml2YXRlIGlkOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHlNaW46IG51bWJlcjtcclxuICAgIHByaXZhdGUgeU1heDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBzdGFydERhdGU6IE1vbWVudDtcclxuICAgIHByaXZhdGUgZW5kRGF0ZTogTW9tZW50O1xyXG4gICAgcHJpdmF0ZSBudW1UYXJnZXRzOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIGxpbmVJbmZvOiBMaW5lSW5mbztcclxuICAgIHByaXZhdGUgYmFySW5mbzogQmFySW5mbztcclxuXHJcbiAgICBwcml2YXRlIGlzVG1wRGF0YXNldDogYm9vbGVhbjtcclxuXHJcbiAgICB2YWx1ZVR5cGU6IFZhbHVlVHlwZTtcclxuXHJcbiAgICBwcml2YXRlIGN1cnJlbnRJbmRleCA9IDA7IC8vIEl0ZXJhYmxlSXRlcmF0b3JcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQ6IERhdGFzZXRzLCBxdWVyeTogUXVlcnkpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBcInVudGl0bGVkXCI7XHJcbiAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xyXG4gICAgICAgIHRoaXMudmFsdWVzID0gW107XHJcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICAgICAgdGhpcy5pZCA9IC0xO1xyXG4gICAgICAgIHRoaXMueU1pbiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy55TWF4ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnN0YXJ0RGF0ZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5lbmREYXRlID0gbnVsbDtcclxuICAgICAgICB0aGlzLm51bVRhcmdldHMgPSAwO1xyXG4gICAgICAgIHRoaXMubGluZUluZm8gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuYmFySW5mbyA9IG51bGw7XHJcblxyXG4gICAgICAgIHRoaXMuaXNUbXBEYXRhc2V0ID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMudmFsdWVUeXBlID0gcXVlcnk/LnZhbHVlVHlwZTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaW5kID0gMDsgaW5kIDwgcGFyZW50LmdldERhdGVzKCkubGVuZ3RoOyBpbmQrKykge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlcy5wdXNoKG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xvbmVUb1RtcERhdGFzZXQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzVG1wRGF0YXNldCkge1xyXG4gICAgICAgICAgICBsZXQgdG1wRGF0YXNldCA9IG5ldyBEYXRhc2V0KHRoaXMucGFyZW50LCBudWxsKTtcclxuICAgICAgICAgICAgdG1wRGF0YXNldC5uYW1lID0gXCJ0bXBcIjtcclxuICAgICAgICAgICAgdG1wRGF0YXNldC52YWx1ZXMgPSBbLi4udGhpcy52YWx1ZXNdO1xyXG4gICAgICAgICAgICB0bXBEYXRhc2V0LnlNaW4gPSB0aGlzLnlNaW47XHJcbiAgICAgICAgICAgIHRtcERhdGFzZXQueU1heCA9IHRoaXMueU1heDtcclxuICAgICAgICAgICAgdG1wRGF0YXNldC5zdGFydERhdGUgPSB0aGlzLnN0YXJ0RGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgICAgICB0bXBEYXRhc2V0LmVuZERhdGUgPSB0aGlzLmVuZERhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgdG1wRGF0YXNldC5udW1UYXJnZXRzID0gdGhpcy5udW1UYXJnZXRzO1xyXG4gICAgICAgICAgICB0bXBEYXRhc2V0LmlzVG1wRGF0YXNldCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRtcERhdGFzZXQudmFsdWVUeXBlID0gdGhpcy52YWx1ZVR5cGU7XHJcbiAgICAgICAgICAgIHJldHVybiB0bXBEYXRhc2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpczsgLy8gYWxyZWFkeSB0bXAgZGF0YXNldFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXROYW1lKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldE5hbWUobmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0SWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldElkKGlkOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZE51bVRhcmdldHMobnVtOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLm51bVRhcmdldHMgPSB0aGlzLm51bVRhcmdldHMgKyBudW07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldE51bVRhcmdldHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubnVtVGFyZ2V0cztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0VmFsdWUoZGF0ZTogTW9tZW50LCBkYXlTaGlmdDogbnVtYmVyID0gMCkge1xyXG4gICAgICAgIGxldCBpbmQgPSB0aGlzLnBhcmVudC5nZXRJbmRleE9mRGF0ZShkYXRlKSArIE1hdGguZmxvb3IoZGF5U2hpZnQpO1xyXG4gICAgICAgIGlmIChpbmQgPj0gMCAmJiBpbmQgPCB0aGlzLnZhbHVlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzW2luZF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRWYWx1ZShkYXRlOiBNb21lbnQsIHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgaW5kID0gdGhpcy5wYXJlbnQuZ2V0SW5kZXhPZkRhdGUoZGF0ZSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coaW5kKTtcclxuXHJcbiAgICAgICAgaWYgKGluZCA+PSAwICYmIGluZCA8IHRoaXMudmFsdWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAvLyBTZXQgdmFsdWVcclxuICAgICAgICAgICAgdGhpcy52YWx1ZXNbaW5kXSA9IHZhbHVlO1xyXG5cclxuICAgICAgICAgICAgLy8gVXBkYXRlIHlNaW4gYW5kIHlNYXhcclxuICAgICAgICAgICAgaWYgKHRoaXMueU1pbiA9PT0gbnVsbCB8fCB2YWx1ZSA8IHRoaXMueU1pbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy55TWluID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMueU1heCA9PT0gbnVsbCB8fCB2YWx1ZSA+IHRoaXMueU1heCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy55TWF4ID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBzdGFydERhdGUgYW5kIGVuZERhdGVcclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhcnREYXRlID09PSBudWxsIHx8IGRhdGUgPCB0aGlzLnN0YXJ0RGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydERhdGUgPSBkYXRlLmNsb25lKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuZW5kRGF0ZSA9PT0gbnVsbCB8fCBkYXRlID4gdGhpcy5lbmREYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVuZERhdGUgPSBkYXRlLmNsb25lKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlY2FsY3VsYXRlTWluTWF4KCkge1xyXG4gICAgICAgIHRoaXMueU1pbiA9IE1hdGgubWluKC4uLnRoaXMudmFsdWVzKTtcclxuICAgICAgICB0aGlzLnlNYXggPSBNYXRoLm1heCguLi50aGlzLnZhbHVlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFlNaW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMueU1pbjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0WU1heCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy55TWF4O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRTdGFydERhdGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnREYXRlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRFbmREYXRlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVuZERhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNoaWZ0KHNoaWZ0QW1vdW50OiBudW1iZXIpIHtcclxuICAgICAgICBmb3IgKGxldCBpbmQgPSAwOyBpbmQgPCB0aGlzLnZhbHVlcy5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlc1tpbmRdICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlc1tpbmRdID0gdGhpcy52YWx1ZXNbaW5kXSArIHNoaWZ0QW1vdW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMueU1pbiA9IHRoaXMueU1pbiArIHNoaWZ0QW1vdW50O1xyXG4gICAgICAgIHRoaXMueU1heCA9IHRoaXMueU1heCArIHNoaWZ0QW1vdW50O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRQZW5hbHR5KHBlbmFsdHk6IG51bWJlcikge1xyXG4gICAgICAgIGZvciAobGV0IGluZCA9IDA7IGluZCA8IHRoaXMudmFsdWVzLmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudmFsdWVzW2luZF0gPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzW2luZF0gPSBwZW5hbHR5O1xyXG4gICAgICAgICAgICAgICAgaWYgKHBlbmFsdHkgPCB0aGlzLnlNaW4pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnlNaW4gPSBwZW5hbHR5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHBlbmFsdHkgPiB0aGlzLnlNYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnlNYXggPSBwZW5hbHR5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRRdWVyeSgpOiBRdWVyeSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucXVlcnk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFjY3VtdWxhdGVWYWx1ZXMoKSB7XHJcbiAgICAgICAgbGV0IGFjY3VtVmFsdWUgPSAwLjA7XHJcbiAgICAgICAgZm9yIChsZXQgaW5kID0gMDsgaW5kIDwgdGhpcy52YWx1ZXMubGVuZ3RoOyBpbmQrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy52YWx1ZXNbaW5kXSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgYWNjdW1WYWx1ZSArPSB0aGlzLnZhbHVlc1tpbmRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVzW2luZF0gPSBhY2N1bVZhbHVlO1xyXG4gICAgICAgICAgICBpZiAoYWNjdW1WYWx1ZSA8IHRoaXMueU1pbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy55TWluID0gYWNjdW1WYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYWNjdW1WYWx1ZSA+IHRoaXMueU1heCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy55TWF4ID0gYWNjdW1WYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0VmFsdWVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0TGVuZ3RoKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlcy5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldExlbmd0aE5vdE51bGwoKSB7XHJcbiAgICAgICAgbGV0IGNvdW50Tm90TnVsbCA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaW5kID0gMDsgaW5kIDwgdGhpcy52YWx1ZXMubGVuZ3RoOyBpbmQrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy52YWx1ZXNbaW5kXSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY291bnROb3ROdWxsKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvdW50Tm90TnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBuZXh0KCk6IEl0ZXJhdG9yUmVzdWx0PERhdGFQb2ludD4ge1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRJbmRleCA8IHRoaXMudmFsdWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBsZXQgaW5kID0gdGhpcy5jdXJyZW50SW5kZXgrKztcclxuICAgICAgICAgICAgbGV0IGRhdGFQb2ludCA9IG5ldyBEYXRhUG9pbnQoXHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5nZXREYXRlcygpW2luZF0sXHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlc1tpbmRdXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBkb25lOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhUG9pbnQsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50SW5kZXggPSAwO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgZG9uZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBbU3ltYm9sLml0ZXJhdG9yXSgpOiBJdGVyYWJsZUl0ZXJhdG9yPERhdGFQb2ludD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRGF0YXNldHMgaW1wbGVtZW50cyBJdGVyYWJsZUl0ZXJhdG9yPERhdGFzZXQ+IHtcclxuICAgIC8vIEl0ZXJhYmxlIG9mIERhdGFzZXRcclxuICAgIHByaXZhdGUgZGF0ZXM6IE1vbWVudFtdO1xyXG4gICAgcHJpdmF0ZSBkYXRhc2V0czogRGF0YXNldFtdO1xyXG5cclxuICAgIHByaXZhdGUgY3VycmVudEluZGV4ID0gMDsgLy8gSXRlcmFibGVJdGVyYXRvclxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHN0YXJ0RGF0ZTogTW9tZW50LCBlbmREYXRlOiBNb21lbnQpIHtcclxuICAgICAgICB0aGlzLmRhdGVzID0gW107XHJcbiAgICAgICAgdGhpcy5kYXRhc2V0cyA9IFtdO1xyXG5cclxuICAgICAgICBsZXQgY0RhdGEgPSBzdGFydERhdGUuY3JlYXRpb25EYXRhKCk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coY0RhdGEpO1xyXG4gICAgICAgIGNvbnN0IGRhdGVGb3JtYXQgPSBjRGF0YS5mb3JtYXQudG9TdHJpbmcoKTtcclxuICAgICAgICBmb3IgKFxyXG4gICAgICAgICAgICBsZXQgY3VyRGF0ZSA9IHN0YXJ0RGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgICAgICBjdXJEYXRlIDw9IGVuZERhdGU7XHJcbiAgICAgICAgICAgIGN1ckRhdGUuYWRkKDEsIFwiZGF5c1wiKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBsZXQgbmV3RGF0ZSA9IHdpbmRvdy5tb21lbnQoXHJcbiAgICAgICAgICAgICAgICBjdXJEYXRlLmZvcm1hdChkYXRlRm9ybWF0KSxcclxuICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQsXHJcbiAgICAgICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0ZXMucHVzaChuZXdEYXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5kYXRlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZURhdGFzZXQocXVlcnk6IFF1ZXJ5LCByZW5kZXJJbmZvOiBSZW5kZXJJbmZvKSB7XHJcbiAgICAgICAgbGV0IGRhdGFzZXQgPSBuZXcgRGF0YXNldCh0aGlzLCBxdWVyeSk7XHJcbiAgICAgICAgZGF0YXNldC5zZXRJZChxdWVyeS5nZXRJZCgpKTtcclxuICAgICAgICBpZiAocmVuZGVySW5mbykge1xyXG4gICAgICAgICAgICBkYXRhc2V0LnNldE5hbWUocmVuZGVySW5mby5kYXRhc2V0TmFtZVtxdWVyeS5nZXRJZCgpXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmRhdGFzZXRzLnB1c2goZGF0YXNldCk7XHJcblxyXG4gICAgICAgIHJldHVybiBkYXRhc2V0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRJbmRleE9mRGF0ZShkYXRlOiBNb21lbnQpIHtcclxuICAgICAgICBsZXQgY0RhdGEgPSBkYXRlLmNyZWF0aW9uRGF0YSgpO1xyXG4gICAgICAgIGNvbnN0IGRhdGVGb3JtYXQgPSBjRGF0YS5mb3JtYXQudG9TdHJpbmcoKTtcclxuICAgICAgICBmb3IgKGxldCBpbmQgPSAwOyBpbmQgPCB0aGlzLmRhdGVzLmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRlc1tpbmRdLmZvcm1hdChkYXRlRm9ybWF0KSA9PT0gZGF0ZS5mb3JtYXQoZGF0ZUZvcm1hdClcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5kO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RGF0YXNldEJ5UXVlcnkocXVlcnk6IFF1ZXJ5KSB7XHJcbiAgICAgICAgZm9yIChsZXQgZGF0YXNldCBvZiB0aGlzLmRhdGFzZXRzKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhc2V0LmdldFF1ZXJ5KCkuZXF1YWxUbyhxdWVyeSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhc2V0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXREYXRhc2V0QnlJZChpZDogbnVtYmVyKSB7XHJcbiAgICAgICAgZm9yIChsZXQgZGF0YXNldCBvZiB0aGlzLmRhdGFzZXRzKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhc2V0LmdldElkKCkgPT09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YXNldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFhEYXRhc2V0SWRzKCkge1xyXG4gICAgICAgIGxldCBpZHM6IEFycmF5PG51bWJlcj4gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBkYXRhc2V0IG9mIHRoaXMuZGF0YXNldHMpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGFzZXQuZ2V0UXVlcnkoKS51c2VkQXNYRGF0YXNldCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGlkID0gZGF0YXNldC5nZXRRdWVyeSgpLmdldElkKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlkcy5pbmNsdWRlcyhpZCkgJiYgaWQgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWRzLnB1c2goaWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpZHM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldERhdGVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGVzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXROYW1lcygpIHtcclxuICAgICAgICBsZXQgbmFtZXMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBkYXRhc2V0IG9mIHRoaXMuZGF0YXNldHMpIHtcclxuICAgICAgICAgICAgbmFtZXMucHVzaChkYXRhc2V0LmdldE5hbWUoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuYW1lcztcclxuICAgIH1cclxuXHJcbiAgICBuZXh0KCk6IEl0ZXJhdG9yUmVzdWx0PERhdGFzZXQ+IHtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50SW5kZXggPCB0aGlzLmRhdGFzZXRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgZG9uZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5kYXRhc2V0c1t0aGlzLmN1cnJlbnRJbmRleCsrXSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRJbmRleCA9IDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBkb25lOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIFtTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhYmxlSXRlcmF0b3I8RGF0YXNldD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUmVuZGVySW5mbyB7XHJcbiAgICAvLyBJbnB1dFxyXG4gICAgcXVlcmllczogUXVlcnlbXTtcclxuICAgIHhEYXRhc2V0OiBudW1iZXJbXTtcclxuICAgIGZvbGRlcjogc3RyaW5nO1xyXG4gICAgZGF0ZUZvcm1hdDogc3RyaW5nO1xyXG4gICAgZGF0ZUZvcm1hdFByZWZpeDogc3RyaW5nO1xyXG4gICAgZGF0ZUZvcm1hdFN1ZmZpeDogc3RyaW5nO1xyXG4gICAgc3RhcnREYXRlOiBNb21lbnQgfCBudWxsO1xyXG4gICAgZW5kRGF0ZTogTW9tZW50IHwgbnVsbDtcclxuICAgIGRhdGFzZXROYW1lOiBzdHJpbmdbXTtcclxuICAgIGNvbnN0VmFsdWU6IG51bWJlcltdO1xyXG4gICAgaWdub3JlQXR0YWNoZWRWYWx1ZTogYm9vbGVhbltdO1xyXG4gICAgaWdub3JlWmVyb1ZhbHVlOiBib29sZWFuW107XHJcbiAgICBhY2N1bTogYm9vbGVhbltdO1xyXG4gICAgcGVuYWx0eTogbnVtYmVyW107XHJcbiAgICB2YWx1ZVNoaWZ0OiBudW1iZXJbXTtcclxuICAgIHZhbHVlVHlwZTogc3RyaW5nW107IC8vIG51bWJlci9mbG9hdCwgaW50LCBzdHJpbmcsIGJvb2xlYW4sIGRhdGUsIHRpbWUsIGRhdGV0aW1lXHJcblxyXG4gICAgZGF0YUFyZWFTaXplOiBTaXplO1xyXG4gICAgbWFyZ2luOiBNYXJnaW47XHJcbiAgICB0b29sdGlwU2l6ZTogU2l6ZTtcclxuXHJcbiAgICBmaXhlZFNjYWxlOiBudW1iZXI7XHJcbiAgICBmaXRQYW5lbFdpZHRoOiBib29sZWFuO1xyXG5cclxuICAgIG91dHB1dDogYW55W107XHJcbiAgICBsaW5lOiBMaW5lSW5mb1tdO1xyXG4gICAgYmFyOiBCYXJJbmZvW107XHJcbiAgICBwaWU6IFBpZUluZm9bXTtcclxuICAgIHN1bW1hcnk6IFN1bW1hcnlJbmZvW107XHJcbiAgICBtb250aDogTW9udGhJbmZvW107XHJcbiAgICBoZWF0bWFwOiBIZWF0bWFwSW5mb1tdO1xyXG4gICAgYnVsbGV0OiBCdWxsZXRJbmZvW107XHJcbiAgICBjdXN0b21EYXRhc2V0OiBDdXN0b21EYXRhc2V0SW5mb1tdO1xyXG5cclxuICAgIHB1YmxpYyBkYXRhc2V0czogRGF0YXNldHMgfCBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHF1ZXJpZXM6IFF1ZXJ5W10pIHtcclxuICAgICAgICB0aGlzLnF1ZXJpZXMgPSBxdWVyaWVzO1xyXG4gICAgICAgIHRoaXMueERhdGFzZXQgPSBbXTsgLy8gdXNlIGZpbGUgbmFtZVxyXG4gICAgICAgIHRoaXMuZm9sZGVyID0gXCIvXCI7XHJcbiAgICAgICAgdGhpcy5kYXRlRm9ybWF0ID0gXCJZWVlZLU1NLUREXCI7XHJcbiAgICAgICAgdGhpcy5kYXRlRm9ybWF0UHJlZml4ID0gXCJcIjtcclxuICAgICAgICB0aGlzLmRhdGVGb3JtYXRTdWZmaXggPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuc3RhcnREYXRlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmVuZERhdGUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZGF0YXNldE5hbWUgPSBbXTsgLy8gdW50aXRsZWRcclxuICAgICAgICB0aGlzLmNvbnN0VmFsdWUgPSBbMS4wXTtcclxuICAgICAgICB0aGlzLmlnbm9yZUF0dGFjaGVkVmFsdWUgPSBbXTsgLy8gZmFsc2VcclxuICAgICAgICB0aGlzLmlnbm9yZVplcm9WYWx1ZSA9IFtdOyAvLyBmYWxzZVxyXG4gICAgICAgIHRoaXMuYWNjdW0gPSBbXTsgLy8gZmFsc2UsIGFjY3VtIHZhbHVlcyBzdGFydCBmcm9tIHplcm8gb3ZlciBkYXlzXHJcbiAgICAgICAgdGhpcy5wZW5hbHR5ID0gW107IC8vIG51bGwsIHVzZSB0aGlzIHZhbHVlIGluc3RlYWQgb2YgbnVsbCB2YWx1ZVxyXG4gICAgICAgIHRoaXMudmFsdWVTaGlmdCA9IFtdO1xyXG4gICAgICAgIHRoaXMudmFsdWVUeXBlID0gW107XHJcblxyXG4gICAgICAgIHRoaXMuZGF0YUFyZWFTaXplID0gbmV3IFNpemUoMzAwLCAzMDApO1xyXG4gICAgICAgIHRoaXMubWFyZ2luID0gbmV3IE1hcmdpbigxMCwgMTAsIDEwLCAxMCk7IC8vIHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdFxyXG4gICAgICAgIHRoaXMudG9vbHRpcFNpemUgPSBuZXcgU2l6ZSg5MCwgNDUpO1xyXG5cclxuICAgICAgICB0aGlzLmZpeGVkU2NhbGUgPSAxLjA7XHJcbiAgICAgICAgdGhpcy5maXRQYW5lbFdpZHRoID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMub3V0cHV0ID0gW107XHJcbiAgICAgICAgdGhpcy5saW5lID0gW107XHJcbiAgICAgICAgdGhpcy5iYXIgPSBbXTtcclxuICAgICAgICB0aGlzLnBpZSA9IFtdO1xyXG4gICAgICAgIHRoaXMuc3VtbWFyeSA9IFtdO1xyXG4gICAgICAgIHRoaXMubW9udGggPSBbXTtcclxuICAgICAgICB0aGlzLmhlYXRtYXAgPSBbXTtcclxuICAgICAgICB0aGlzLmJ1bGxldCA9IFtdO1xyXG4gICAgICAgIHRoaXMuY3VzdG9tRGF0YXNldCA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLmRhdGFzZXRzID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0UXVlcnlCeUlkKGlkOiBudW1iZXIpIHtcclxuICAgICAgICBmb3IgKGxldCBxdWVyeSBvZiB0aGlzLnF1ZXJpZXMpIHtcclxuICAgICAgICAgICAgaWYgKHF1ZXJ5LmdldElkKCkgPT09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDdXN0b21EYXRhc2V0SW5mbyB7XHJcbiAgICBpZDogbnVtYmVyO1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgeERhdGE6IHN0cmluZ1tdO1xyXG4gICAgeURhdGE6IHN0cmluZ1tdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuaWQgPSAtMTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMueERhdGEgPSBbXTtcclxuICAgICAgICB0aGlzLnlEYXRhID0gW107XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUdyYXBoIHtcclxuICAgIEdldEdyYXBoVHlwZSgpOiBHcmFwaFR5cGU7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUxlZ2VuZCB7XHJcbiAgICBzaG93TGVnZW5kOiBib29sZWFuO1xyXG4gICAgbGVnZW5kUG9zaXRpb246IHN0cmluZztcclxuICAgIGxlZ2VuZE9yaWVudGF0aW9uOiBzdHJpbmc7XHJcbiAgICBsZWdlbmRCZ0NvbG9yOiBzdHJpbmc7XHJcbiAgICBsZWdlbmRCb3JkZXJDb2xvcjogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ29tbW9uQ2hhcnRJbmZvIGltcGxlbWVudHMgSUdyYXBoLCBJTGVnZW5kIHtcclxuICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICB4QXhpc0xhYmVsOiBzdHJpbmc7XHJcbiAgICB4QXhpc0NvbG9yOiBzdHJpbmc7XHJcbiAgICB4QXhpc0xhYmVsQ29sb3I6IHN0cmluZztcclxuICAgIHlBeGlzTGFiZWw6IHN0cmluZ1tdO1xyXG4gICAgeUF4aXNDb2xvcjogc3RyaW5nW107XHJcbiAgICB5QXhpc0xhYmVsQ29sb3I6IHN0cmluZ1tdO1xyXG4gICAgeUF4aXNVbml0OiBzdHJpbmdbXTtcclxuICAgIHlNaW46IG51bWJlcltdO1xyXG4gICAgeU1heDogbnVtYmVyW107XHJcbiAgICByZXZlcnNlWUF4aXM6IGJvb2xlYW5bXTtcclxuICAgIGFsbG93SW5zcGVjdERhdGE6IGJvb2xlYW47XHJcblxyXG4gICAgLy8gSUxlZ2VuZFxyXG4gICAgc2hvd0xlZ2VuZDogYm9vbGVhbjtcclxuICAgIGxlZ2VuZFBvc2l0aW9uOiBzdHJpbmc7XHJcbiAgICBsZWdlbmRPcmllbnRhdGlvbjogc3RyaW5nO1xyXG4gICAgbGVnZW5kQmdDb2xvcjogc3RyaW5nO1xyXG4gICAgbGVnZW5kQm9yZGVyQ29sb3I6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnRpdGxlID0gXCJcIjtcclxuICAgICAgICB0aGlzLnhBeGlzTGFiZWwgPSBcIkRhdGVcIjtcclxuICAgICAgICB0aGlzLnhBeGlzQ29sb3IgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMueEF4aXNMYWJlbENvbG9yID0gXCJcIjtcclxuICAgICAgICB0aGlzLnlBeGlzTGFiZWwgPSBbXTsgLy8gXCJWYWx1ZVwiLCAyIGVsZW1lbnRzXHJcbiAgICAgICAgdGhpcy55QXhpc0NvbG9yID0gW107IC8vIFwiXCIsIDIgZWxlbWVudHNcclxuICAgICAgICB0aGlzLnlBeGlzTGFiZWxDb2xvciA9IFtdOyAvLyBcIlwiLCAyIGVsZW1lbnRzXHJcbiAgICAgICAgdGhpcy55QXhpc1VuaXQgPSBbXTsgLy8gXCJcIiwgMiBlbGVtZW50c1xyXG4gICAgICAgIHRoaXMueU1pbiA9IFtdOyAvLyBudWxsLCAyIGVsZW1lbnRzXHJcbiAgICAgICAgdGhpcy55TWF4ID0gW107IC8vIG51bGwsIDIgZWxlbWVudHNcclxuICAgICAgICB0aGlzLnJldmVyc2VZQXhpcyA9IFtdOyAvLyBmYWxzZSwgMiBlbGVtZW50c1xyXG4gICAgICAgIHRoaXMuYWxsb3dJbnNwZWN0RGF0YSA9IHRydWU7XHJcblxyXG4gICAgICAgIC8vIElMZWdlbmRcclxuICAgICAgICB0aGlzLnNob3dMZWdlbmQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmxlZ2VuZFBvc2l0aW9uID0gXCJcIjsgLy8gdG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0XHJcbiAgICAgICAgdGhpcy5sZWdlbmRPcmllbnRhdGlvbiA9IFwiXCI7IC8vIGhvcml6b250YWwsIHZlcnRpY2FsXHJcbiAgICAgICAgdGhpcy5sZWdlbmRCZ0NvbG9yID0gXCJcIjtcclxuICAgICAgICB0aGlzLmxlZ2VuZEJvcmRlckNvbG9yID0gXCJcIjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgR2V0R3JhcGhUeXBlKCkge1xyXG4gICAgICAgIHJldHVybiBHcmFwaFR5cGUuVW5rbm93bjtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExpbmVJbmZvIGV4dGVuZHMgQ29tbW9uQ2hhcnRJbmZvIHtcclxuICAgIGxpbmVDb2xvcjogc3RyaW5nW107XHJcbiAgICBsaW5lV2lkdGg6IG51bWJlcltdO1xyXG4gICAgc2hvd0xpbmU6IGJvb2xlYW5bXTtcclxuICAgIHNob3dQb2ludDogYm9vbGVhbltdO1xyXG4gICAgcG9pbnRDb2xvcjogc3RyaW5nW107XHJcbiAgICBwb2ludEJvcmRlckNvbG9yOiBzdHJpbmdbXTtcclxuICAgIHBvaW50Qm9yZGVyV2lkdGg6IG51bWJlcltdO1xyXG4gICAgcG9pbnRTaXplOiBudW1iZXJbXTtcclxuICAgIGZpbGxHYXA6IGJvb2xlYW5bXTtcclxuICAgIHlBeGlzTG9jYXRpb246IHN0cmluZ1tdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5saW5lQ29sb3IgPSBbXTsgLy8gXCJcIlxyXG4gICAgICAgIHRoaXMubGluZVdpZHRoID0gW107IC8vIDEuNVxyXG4gICAgICAgIHRoaXMuc2hvd0xpbmUgPSBbXTsgLy8gdHJ1ZVxyXG4gICAgICAgIHRoaXMuc2hvd1BvaW50ID0gW107IC8vIHRydWVcclxuICAgICAgICB0aGlzLnBvaW50Q29sb3IgPSBbXTsgLy8gIzY5YjNhMlxyXG4gICAgICAgIHRoaXMucG9pbnRCb3JkZXJDb2xvciA9IFtdO1xyXG4gICAgICAgIHRoaXMucG9pbnRCb3JkZXJXaWR0aCA9IFtdOyAvLyAwLjBcclxuICAgICAgICB0aGlzLnBvaW50U2l6ZSA9IFtdOyAvLyAzLjBcclxuICAgICAgICB0aGlzLmZpbGxHYXAgPSBbXTsgLy8gZmFsc2VcclxuICAgICAgICB0aGlzLnlBeGlzTG9jYXRpb24gPSBbXTsgLy8gbGVmdCwgZm9yIGVhY2ggdGFyZ2V0XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEdldEdyYXBoVHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gR3JhcGhUeXBlLkxpbmU7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCYXJJbmZvIGV4dGVuZHMgQ29tbW9uQ2hhcnRJbmZvIHtcclxuICAgIGJhckNvbG9yOiBzdHJpbmdbXTtcclxuICAgIHlBeGlzTG9jYXRpb246IHN0cmluZ1tdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5iYXJDb2xvciA9IFtdOyAvLyAjNjliM2EyXHJcbiAgICAgICAgdGhpcy55QXhpc0xvY2F0aW9uID0gW107IC8vIGxlZnQsIGZvciBlYWNoIHRhcmdldFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBHZXRHcmFwaFR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIEdyYXBoVHlwZS5CYXI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQaWVJbmZvIGltcGxlbWVudHMgSUdyYXBoLCBJTGVnZW5kIHtcclxuICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICBkYXRhOiBzdHJpbmdbXTtcclxuICAgIGRhdGFDb2xvcjogc3RyaW5nW107XHJcbiAgICBkYXRhTmFtZTogc3RyaW5nW107XHJcbiAgICBsYWJlbDogc3RyaW5nW107XHJcbiAgICBoaWRlTGFiZWxMZXNzVGhhbjogbnVtYmVyO1xyXG4gICAgc2hvd0V4dExhYmVsT25seUlmTm9MYWJlbDogYm9vbGVhbjtcclxuICAgIGV4dExhYmVsOiBzdHJpbmdbXTtcclxuXHJcbiAgICByYXRpb0lubmVyUmFkaXVzOiBudW1iZXI7XHJcblxyXG4gICAgLy8gSUxlZ2VuZFxyXG4gICAgc2hvd0xlZ2VuZDogYm9vbGVhbjtcclxuICAgIGxlZ2VuZFBvc2l0aW9uOiBzdHJpbmc7XHJcbiAgICBsZWdlbmRPcmllbnRhdGlvbjogc3RyaW5nO1xyXG4gICAgbGVnZW5kQmdDb2xvcjogc3RyaW5nO1xyXG4gICAgbGVnZW5kQm9yZGVyQ29sb3I6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnRpdGxlID0gXCJcIjtcclxuICAgICAgICB0aGlzLmRhdGEgPSBbXTtcclxuICAgICAgICB0aGlzLmRhdGFDb2xvciA9IFtdO1xyXG4gICAgICAgIHRoaXMuZGF0YU5hbWUgPSBbXTtcclxuICAgICAgICB0aGlzLmxhYmVsID0gW107XHJcbiAgICAgICAgdGhpcy5oaWRlTGFiZWxMZXNzVGhhbiA9IDAuMDM7XHJcbiAgICAgICAgdGhpcy5leHRMYWJlbCA9IFtdO1xyXG4gICAgICAgIHRoaXMuc2hvd0V4dExhYmVsT25seUlmTm9MYWJlbCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucmF0aW9Jbm5lclJhZGl1cyA9IDAuMDtcclxuXHJcbiAgICAgICAgLy8gSUxlZ2VuZFxyXG4gICAgICAgIHRoaXMuc2hvd0xlZ2VuZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubGVnZW5kUG9zaXRpb24gPSBcIlwiOyAvLyB0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHRcclxuICAgICAgICB0aGlzLmxlZ2VuZE9yaWVudGF0aW9uID0gXCJcIjsgLy8gaG9yaXpvbnRhbCwgdmVydGljYWxcclxuICAgICAgICB0aGlzLmxlZ2VuZEJnQ29sb3IgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMubGVnZW5kQm9yZGVyQ29sb3IgPSBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBHZXRHcmFwaFR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIEdyYXBoVHlwZS5QaWU7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTdW1tYXJ5SW5mbyBpbXBsZW1lbnRzIElHcmFwaCB7XHJcbiAgICB0ZW1wbGF0ZTogc3RyaW5nO1xyXG4gICAgc3R5bGU6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlID0gXCJcIjtcclxuICAgICAgICB0aGlzLnN0eWxlID0gXCJcIjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgR2V0R3JhcGhUeXBlKCkge1xyXG4gICAgICAgIHJldHVybiBHcmFwaFR5cGUuU3VtbWFyeTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE1vbnRoSW5mbyBpbXBsZW1lbnRzIElHcmFwaCB7XHJcbiAgICBtb2RlOiBzdHJpbmc7XHJcbiAgICBkYXRhc2V0OiBudW1iZXJbXTtcclxuICAgIHN0YXJ0V2Vla09uOiBzdHJpbmc7XHJcbiAgICB0aHJlc2hvbGQ6IG51bWJlcltdO1xyXG4gICAgeU1pbjogbnVtYmVyW107XHJcbiAgICB5TWF4OiBudW1iZXJbXTtcclxuICAgIHNob3dDaXJjbGU6IGJvb2xlYW47XHJcbiAgICBjb2xvcjogc3RyaW5nO1xyXG4gICAgZGltTm90SW5Nb250aDogYm9vbGVhbjtcclxuICAgIHNob3dTdHJlYWs6IGJvb2xlYW47XHJcbiAgICBzaG93VG9kYXlSaW5nOiBib29sZWFuO1xyXG4gICAgc2hvd1NlbGVjdGVkVmFsdWU6IGJvb2xlYW47XHJcbiAgICBzaG93U2VsZWN0ZWRSaW5nOiBib29sZWFuO1xyXG4gICAgY2lyY2xlQ29sb3I6IHN0cmluZztcclxuICAgIGNpcmNsZUNvbG9yQnlWYWx1ZTogYm9vbGVhbjtcclxuICAgIGhlYWRlclllYXJDb2xvcjogc3RyaW5nO1xyXG4gICAgaGVhZGVyTW9udGhDb2xvcjogc3RyaW5nO1xyXG4gICAgZGl2aWRpbmdMaW5lQ29sb3I6IHN0cmluZztcclxuICAgIHRvZGF5UmluZ0NvbG9yOiBzdHJpbmc7XHJcbiAgICBzZWxlY3RlZFJpbmdDb2xvcjogc3RyaW5nO1xyXG4gICAgaW5pdE1vbnRoOiBzdHJpbmc7IC8vIFlZWVktTU1cclxuXHJcbiAgICBzZWxlY3RlZERhdGU6IHN0cmluZztcclxuICAgIHNlbGVjdGVkRGF0YXNldDogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMubW9kZSA9IFwiY2lyY2xlXCI7IC8vIGNpcmNsZSwgc3ltYm9sXHJcbiAgICAgICAgdGhpcy5kYXRhc2V0ID0gW107XHJcbiAgICAgICAgdGhpcy5zdGFydFdlZWtPbiA9IFwiU3VuXCI7XHJcbiAgICAgICAgdGhpcy50aHJlc2hvbGQgPSBbXTsgLy8gaWYgdmFsdWUgPiB0aHJlc2hvbGQsIHdpbGwgc2hvdyBkb3RcclxuICAgICAgICB0aGlzLnlNaW4gPSBbXTtcclxuICAgICAgICB0aGlzLnlNYXggPSBbXTtcclxuICAgICAgICB0aGlzLnNob3dDaXJjbGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuY29sb3IgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZGltTm90SW5Nb250aCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zaG93U3RyZWFrID0gdHJ1ZTsgLy8gYSBzdHJlYWsgY29ubmVjdHMgbmVpZ2JvciBkb3RzXHJcbiAgICAgICAgdGhpcy5zaG93VG9kYXlSaW5nID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNob3dTZWxlY3RlZFZhbHVlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNob3dTZWxlY3RlZFJpbmcgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuY2lyY2xlQ29sb3IgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY2lyY2xlQ29sb3JCeVZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5oZWFkZXJZZWFyQ29sb3IgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaGVhZGVyTW9udGhDb2xvciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5kaXZpZGluZ0xpbmVDb2xvciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy50b2RheVJpbmdDb2xvciA9IFwiXCI7IC8vIHdoaXRlXHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZFJpbmdDb2xvciA9IFwiZmlyZWJyaWNrXCI7XHJcbiAgICAgICAgdGhpcy5pbml0TW9udGggPSBcIlwiO1xyXG5cclxuICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZSA9IFwiXCI7IC8vIHNlbGVjdGVkIGRhdGVcclxuICAgICAgICB0aGlzLnNlbGVjdGVkRGF0YXNldCA9IG51bGw7IC8vIHNlbGVjdGVkIGluZGV4IG9mIGRhdGFzZXRcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgR2V0R3JhcGhUeXBlKCkge1xyXG4gICAgICAgIHJldHVybiBHcmFwaFR5cGUuTW9udGg7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBIZWF0bWFwSW5mbyBpbXBsZW1lbnRzIElHcmFwaCB7XHJcbiAgICBkYXRhc2V0OiBzdHJpbmc7XHJcbiAgICBzdGFydFdlZWtPbjogc3RyaW5nO1xyXG4gICAgb3JpZW50YXRpb246IHN0cmluZztcclxuICAgIHlNaW46IG51bWJlcjtcclxuICAgIHlNYXg6IG51bWJlcjtcclxuICAgIGNvbG9yOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhc2V0ID0gXCIwXCI7XHJcbiAgICAgICAgdGhpcy5zdGFydFdlZWtPbiA9IFwiU3VuXCI7XHJcbiAgICAgICAgdGhpcy5vcmllbnRhdGlvbiA9IFwidmVydGljYWxcIjtcclxuICAgICAgICB0aGlzLnlNaW4gPSBudWxsO1xyXG4gICAgICAgIHRoaXMueU1heCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jb2xvciA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEdldEdyYXBoVHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gR3JhcGhUeXBlLkhlYXRtYXA7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCdWxsZXRJbmZvIGltcGxlbWVudHMgSUdyYXBoIHtcclxuICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICBkYXRhc2V0OiBzdHJpbmc7XHJcbiAgICBvcmllbnRhdGlvbjogc3RyaW5nO1xyXG4gICAgdmFsdWU6IHN0cmluZztcclxuICAgIHZhbHVlVW5pdDogc3RyaW5nO1xyXG4gICAgdmFsdWVDb2xvcjogc3RyaW5nO1xyXG4gICAgcmFuZ2U6IG51bWJlcltdO1xyXG4gICAgcmFuZ2VDb2xvcjogc3RyaW5nW107XHJcbiAgICBzaG93TWFya2VyOiBib29sZWFuO1xyXG4gICAgbWFya2VyVmFsdWU6IG51bWJlcjtcclxuICAgIG1hcmtlckNvbG9yOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5kYXRhc2V0ID0gXCIwXCI7IC8vIGRhdGFzZXQgaWQgb3IgbmFtZVxyXG4gICAgICAgIHRoaXMub3JpZW50YXRpb24gPSBcImhvcml6b250YWxcIjsgLy8gb3IgdmVydGljYWxcclxuICAgICAgICB0aGlzLnZhbHVlID0gXCJcIjsgLy8gQ2FuIHBvc3Nlc3MgdGVtcGxhdGUgdmFyaWFsYmVcclxuICAgICAgICB0aGlzLnZhbHVlVW5pdCA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy52YWx1ZUNvbG9yID0gXCIjNjliM2EyXCI7XHJcbiAgICAgICAgdGhpcy5yYW5nZSA9IFtdO1xyXG4gICAgICAgIHRoaXMucmFuZ2VDb2xvciA9IFtdO1xyXG4gICAgICAgIHRoaXMuc2hvd01hcmtlciA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubWFya2VyVmFsdWUgPSAwO1xyXG4gICAgICAgIHRoaXMubWFya2VyQ29sb3IgPSBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBHZXRHcmFwaFR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIEdyYXBoVHlwZS5CdWxsZXQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTaXplIHtcclxuICAgIHdpZHRoOiBudW1iZXI7XHJcbiAgICBoZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih3OiBudW1iZXIsIGg6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB3O1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE1hcmdpbiB7XHJcbiAgICB0b3A6IG51bWJlcjtcclxuICAgIHJpZ2h0OiBudW1iZXI7XHJcbiAgICBib3R0b206IG51bWJlcjtcclxuICAgIGxlZnQ6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih0b3A6IG51bWJlciwgcmlnaHQ6IG51bWJlciwgYm90dG9tOiBudW1iZXIsIGxlZnQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMudG9wID0gdG9wO1xyXG4gICAgICAgIHRoaXMucmlnaHQgPSByaWdodDtcclxuICAgICAgICB0aGlzLmJvdHRvbSA9IGJvdHRvbTtcclxuICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVHJhbnNmb3JtIHtcclxuICAgIHRyYW5zbGF0ZVg6IG51bWJlcjtcclxuICAgIHRyYW5zbGF0ZVk6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih0cmFuc2Zvcm06IGFueSkge1xyXG4gICAgICAgIHRoaXMudHJhbnNsYXRlWCA9IDA7XHJcbiAgICAgICAgdGhpcy50cmFuc2xhdGVZID0gMDtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0cmFuc2Zvcm0gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbGV0IGdyb3VwcyA9IHRyYW5zZm9ybS5tYXRjaChcclxuICAgICAgICAgICAgICAgIC90cmFuc2xhdGVcXChcXHMqKD88eD5bXFxkXFwuXFwvLV0rKVxccyosXFxzKig/PHk+W1xcZFxcLlxcLy1dKylcXHMqXFwpL1xyXG4gICAgICAgICAgICApLmdyb3VwcztcclxuICAgICAgICAgICAgaWYgKGdyb3Vwcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2xhdGVYID0gcGFyc2VGbG9hdChncm91cHMueCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZVkgPSBwYXJzZUZsb2F0KGdyb3Vwcy55KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgQ2hhcnRFbGVtZW50cyA9IHtcclxuICAgIFtrZXk6IHN0cmluZ106IGFueTtcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBUYWJsZURhdGEge1xyXG4gICAgZmlsZVBhdGg6IHN0cmluZztcclxuICAgIHRhYmxlSW5kZXg6IG51bWJlcjtcclxuICAgIHhEYXRhc2V0OiBRdWVyeSB8IG51bGw7XHJcbiAgICB5RGF0YXNldHM6IEFycmF5PFF1ZXJ5PjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihmaWxlUGF0aDogc3RyaW5nLCB0YWJsZUluZGV4OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmZpbGVQYXRoID0gZmlsZVBhdGg7XHJcbiAgICAgICAgdGhpcy50YWJsZUluZGV4ID0gdGFibGVJbmRleDtcclxuICAgICAgICB0aGlzLnhEYXRhc2V0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnlEYXRhc2V0cyA9IFtdOyAvLyBhcnJheSBvZiBxdWVyeVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBYVmFsdWVNYXAgPSBNYXA8bnVtYmVyLCBzdHJpbmc+O1xyXG5leHBvcnQgdHlwZSBEYXRhTWFwID0gTWFwPHN0cmluZywgQXJyYXk8UXVlcnlWYWx1ZVBhaXI+PjtcclxuIiwiaW1wb3J0IHtwYXRofSBmcm9tIFwiZDMtcGF0aFwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQge2FicywgYWNvcywgYXNpbiwgYXRhbjIsIGNvcywgZXBzaWxvbiwgaGFsZlBpLCBtYXgsIG1pbiwgcGksIHNpbiwgc3FydCwgdGF1fSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIGFyY0lubmVyUmFkaXVzKGQpIHtcbiAgcmV0dXJuIGQuaW5uZXJSYWRpdXM7XG59XG5cbmZ1bmN0aW9uIGFyY091dGVyUmFkaXVzKGQpIHtcbiAgcmV0dXJuIGQub3V0ZXJSYWRpdXM7XG59XG5cbmZ1bmN0aW9uIGFyY1N0YXJ0QW5nbGUoZCkge1xuICByZXR1cm4gZC5zdGFydEFuZ2xlO1xufVxuXG5mdW5jdGlvbiBhcmNFbmRBbmdsZShkKSB7XG4gIHJldHVybiBkLmVuZEFuZ2xlO1xufVxuXG5mdW5jdGlvbiBhcmNQYWRBbmdsZShkKSB7XG4gIHJldHVybiBkICYmIGQucGFkQW5nbGU7IC8vIE5vdGU6IG9wdGlvbmFsIVxufVxuXG5mdW5jdGlvbiBpbnRlcnNlY3QoeDAsIHkwLCB4MSwgeTEsIHgyLCB5MiwgeDMsIHkzKSB7XG4gIHZhciB4MTAgPSB4MSAtIHgwLCB5MTAgPSB5MSAtIHkwLFxuICAgICAgeDMyID0geDMgLSB4MiwgeTMyID0geTMgLSB5MixcbiAgICAgIHQgPSB5MzIgKiB4MTAgLSB4MzIgKiB5MTA7XG4gIGlmICh0ICogdCA8IGVwc2lsb24pIHJldHVybjtcbiAgdCA9ICh4MzIgKiAoeTAgLSB5MikgLSB5MzIgKiAoeDAgLSB4MikpIC8gdDtcbiAgcmV0dXJuIFt4MCArIHQgKiB4MTAsIHkwICsgdCAqIHkxMF07XG59XG5cbi8vIENvbXB1dGUgcGVycGVuZGljdWxhciBvZmZzZXQgbGluZSBvZiBsZW5ndGggcmMuXG4vLyBodHRwOi8vbWF0aHdvcmxkLndvbGZyYW0uY29tL0NpcmNsZS1MaW5lSW50ZXJzZWN0aW9uLmh0bWxcbmZ1bmN0aW9uIGNvcm5lclRhbmdlbnRzKHgwLCB5MCwgeDEsIHkxLCByMSwgcmMsIGN3KSB7XG4gIHZhciB4MDEgPSB4MCAtIHgxLFxuICAgICAgeTAxID0geTAgLSB5MSxcbiAgICAgIGxvID0gKGN3ID8gcmMgOiAtcmMpIC8gc3FydCh4MDEgKiB4MDEgKyB5MDEgKiB5MDEpLFxuICAgICAgb3ggPSBsbyAqIHkwMSxcbiAgICAgIG95ID0gLWxvICogeDAxLFxuICAgICAgeDExID0geDAgKyBveCxcbiAgICAgIHkxMSA9IHkwICsgb3ksXG4gICAgICB4MTAgPSB4MSArIG94LFxuICAgICAgeTEwID0geTEgKyBveSxcbiAgICAgIHgwMCA9ICh4MTEgKyB4MTApIC8gMixcbiAgICAgIHkwMCA9ICh5MTEgKyB5MTApIC8gMixcbiAgICAgIGR4ID0geDEwIC0geDExLFxuICAgICAgZHkgPSB5MTAgLSB5MTEsXG4gICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5LFxuICAgICAgciA9IHIxIC0gcmMsXG4gICAgICBEID0geDExICogeTEwIC0geDEwICogeTExLFxuICAgICAgZCA9IChkeSA8IDAgPyAtMSA6IDEpICogc3FydChtYXgoMCwgciAqIHIgKiBkMiAtIEQgKiBEKSksXG4gICAgICBjeDAgPSAoRCAqIGR5IC0gZHggKiBkKSAvIGQyLFxuICAgICAgY3kwID0gKC1EICogZHggLSBkeSAqIGQpIC8gZDIsXG4gICAgICBjeDEgPSAoRCAqIGR5ICsgZHggKiBkKSAvIGQyLFxuICAgICAgY3kxID0gKC1EICogZHggKyBkeSAqIGQpIC8gZDIsXG4gICAgICBkeDAgPSBjeDAgLSB4MDAsXG4gICAgICBkeTAgPSBjeTAgLSB5MDAsXG4gICAgICBkeDEgPSBjeDEgLSB4MDAsXG4gICAgICBkeTEgPSBjeTEgLSB5MDA7XG5cbiAgLy8gUGljayB0aGUgY2xvc2VyIG9mIHRoZSB0d28gaW50ZXJzZWN0aW9uIHBvaW50cy5cbiAgLy8gVE9ETyBJcyB0aGVyZSBhIGZhc3RlciB3YXkgdG8gZGV0ZXJtaW5lIHdoaWNoIGludGVyc2VjdGlvbiB0byB1c2U/XG4gIGlmIChkeDAgKiBkeDAgKyBkeTAgKiBkeTAgPiBkeDEgKiBkeDEgKyBkeTEgKiBkeTEpIGN4MCA9IGN4MSwgY3kwID0gY3kxO1xuXG4gIHJldHVybiB7XG4gICAgY3g6IGN4MCxcbiAgICBjeTogY3kwLFxuICAgIHgwMTogLW94LFxuICAgIHkwMTogLW95LFxuICAgIHgxMTogY3gwICogKHIxIC8gciAtIDEpLFxuICAgIHkxMTogY3kwICogKHIxIC8gciAtIDEpXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgaW5uZXJSYWRpdXMgPSBhcmNJbm5lclJhZGl1cyxcbiAgICAgIG91dGVyUmFkaXVzID0gYXJjT3V0ZXJSYWRpdXMsXG4gICAgICBjb3JuZXJSYWRpdXMgPSBjb25zdGFudCgwKSxcbiAgICAgIHBhZFJhZGl1cyA9IG51bGwsXG4gICAgICBzdGFydEFuZ2xlID0gYXJjU3RhcnRBbmdsZSxcbiAgICAgIGVuZEFuZ2xlID0gYXJjRW5kQW5nbGUsXG4gICAgICBwYWRBbmdsZSA9IGFyY1BhZEFuZ2xlLFxuICAgICAgY29udGV4dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gYXJjKCkge1xuICAgIHZhciBidWZmZXIsXG4gICAgICAgIHIsXG4gICAgICAgIHIwID0gK2lubmVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHIxID0gK291dGVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIGEwID0gc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gaGFsZlBpLFxuICAgICAgICBhMSA9IGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLSBoYWxmUGksXG4gICAgICAgIGRhID0gYWJzKGExIC0gYTApLFxuICAgICAgICBjdyA9IGExID4gYTA7XG5cbiAgICBpZiAoIWNvbnRleHQpIGNvbnRleHQgPSBidWZmZXIgPSBwYXRoKCk7XG5cbiAgICAvLyBFbnN1cmUgdGhhdCB0aGUgb3V0ZXIgcmFkaXVzIGlzIGFsd2F5cyBsYXJnZXIgdGhhbiB0aGUgaW5uZXIgcmFkaXVzLlxuICAgIGlmIChyMSA8IHIwKSByID0gcjEsIHIxID0gcjAsIHIwID0gcjtcblxuICAgIC8vIElzIGl0IGEgcG9pbnQ/XG4gICAgaWYgKCEocjEgPiBlcHNpbG9uKSkgY29udGV4dC5tb3ZlVG8oMCwgMCk7XG5cbiAgICAvLyBPciBpcyBpdCBhIGNpcmNsZSBvciBhbm51bHVzP1xuICAgIGVsc2UgaWYgKGRhID4gdGF1IC0gZXBzaWxvbikge1xuICAgICAgY29udGV4dC5tb3ZlVG8ocjEgKiBjb3MoYTApLCByMSAqIHNpbihhMCkpO1xuICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjEsIGEwLCBhMSwgIWN3KTtcbiAgICAgIGlmIChyMCA+IGVwc2lsb24pIHtcbiAgICAgICAgY29udGV4dC5tb3ZlVG8ocjAgKiBjb3MoYTEpLCByMCAqIHNpbihhMSkpO1xuICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMCwgYTEsIGEwLCBjdyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gT3IgaXMgaXQgYSBjaXJjdWxhciBvciBhbm51bGFyIHNlY3Rvcj9cbiAgICBlbHNlIHtcbiAgICAgIHZhciBhMDEgPSBhMCxcbiAgICAgICAgICBhMTEgPSBhMSxcbiAgICAgICAgICBhMDAgPSBhMCxcbiAgICAgICAgICBhMTAgPSBhMSxcbiAgICAgICAgICBkYTAgPSBkYSxcbiAgICAgICAgICBkYTEgPSBkYSxcbiAgICAgICAgICBhcCA9IHBhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLyAyLFxuICAgICAgICAgIHJwID0gKGFwID4gZXBzaWxvbikgJiYgKHBhZFJhZGl1cyA/ICtwYWRSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHNxcnQocjAgKiByMCArIHIxICogcjEpKSxcbiAgICAgICAgICByYyA9IG1pbihhYnMocjEgLSByMCkgLyAyLCArY29ybmVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLFxuICAgICAgICAgIHJjMCA9IHJjLFxuICAgICAgICAgIHJjMSA9IHJjLFxuICAgICAgICAgIHQwLFxuICAgICAgICAgIHQxO1xuXG4gICAgICAvLyBBcHBseSBwYWRkaW5nPyBOb3RlIHRoYXQgc2luY2UgcjEg4omlIHIwLCBkYTEg4omlIGRhMC5cbiAgICAgIGlmIChycCA+IGVwc2lsb24pIHtcbiAgICAgICAgdmFyIHAwID0gYXNpbihycCAvIHIwICogc2luKGFwKSksXG4gICAgICAgICAgICBwMSA9IGFzaW4ocnAgLyByMSAqIHNpbihhcCkpO1xuICAgICAgICBpZiAoKGRhMCAtPSBwMCAqIDIpID4gZXBzaWxvbikgcDAgKj0gKGN3ID8gMSA6IC0xKSwgYTAwICs9IHAwLCBhMTAgLT0gcDA7XG4gICAgICAgIGVsc2UgZGEwID0gMCwgYTAwID0gYTEwID0gKGEwICsgYTEpIC8gMjtcbiAgICAgICAgaWYgKChkYTEgLT0gcDEgKiAyKSA+IGVwc2lsb24pIHAxICo9IChjdyA/IDEgOiAtMSksIGEwMSArPSBwMSwgYTExIC09IHAxO1xuICAgICAgICBlbHNlIGRhMSA9IDAsIGEwMSA9IGExMSA9IChhMCArIGExKSAvIDI7XG4gICAgICB9XG5cbiAgICAgIHZhciB4MDEgPSByMSAqIGNvcyhhMDEpLFxuICAgICAgICAgIHkwMSA9IHIxICogc2luKGEwMSksXG4gICAgICAgICAgeDEwID0gcjAgKiBjb3MoYTEwKSxcbiAgICAgICAgICB5MTAgPSByMCAqIHNpbihhMTApO1xuXG4gICAgICAvLyBBcHBseSByb3VuZGVkIGNvcm5lcnM/XG4gICAgICBpZiAocmMgPiBlcHNpbG9uKSB7XG4gICAgICAgIHZhciB4MTEgPSByMSAqIGNvcyhhMTEpLFxuICAgICAgICAgICAgeTExID0gcjEgKiBzaW4oYTExKSxcbiAgICAgICAgICAgIHgwMCA9IHIwICogY29zKGEwMCksXG4gICAgICAgICAgICB5MDAgPSByMCAqIHNpbihhMDApLFxuICAgICAgICAgICAgb2M7XG5cbiAgICAgICAgLy8gUmVzdHJpY3QgdGhlIGNvcm5lciByYWRpdXMgYWNjb3JkaW5nIHRvIHRoZSBzZWN0b3IgYW5nbGUuXG4gICAgICAgIGlmIChkYSA8IHBpICYmIChvYyA9IGludGVyc2VjdCh4MDEsIHkwMSwgeDAwLCB5MDAsIHgxMSwgeTExLCB4MTAsIHkxMCkpKSB7XG4gICAgICAgICAgdmFyIGF4ID0geDAxIC0gb2NbMF0sXG4gICAgICAgICAgICAgIGF5ID0geTAxIC0gb2NbMV0sXG4gICAgICAgICAgICAgIGJ4ID0geDExIC0gb2NbMF0sXG4gICAgICAgICAgICAgIGJ5ID0geTExIC0gb2NbMV0sXG4gICAgICAgICAgICAgIGtjID0gMSAvIHNpbihhY29zKChheCAqIGJ4ICsgYXkgKiBieSkgLyAoc3FydChheCAqIGF4ICsgYXkgKiBheSkgKiBzcXJ0KGJ4ICogYnggKyBieSAqIGJ5KSkpIC8gMiksXG4gICAgICAgICAgICAgIGxjID0gc3FydChvY1swXSAqIG9jWzBdICsgb2NbMV0gKiBvY1sxXSk7XG4gICAgICAgICAgcmMwID0gbWluKHJjLCAocjAgLSBsYykgLyAoa2MgLSAxKSk7XG4gICAgICAgICAgcmMxID0gbWluKHJjLCAocjEgLSBsYykgLyAoa2MgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSXMgdGhlIHNlY3RvciBjb2xsYXBzZWQgdG8gYSBsaW5lP1xuICAgICAgaWYgKCEoZGExID4gZXBzaWxvbikpIGNvbnRleHQubW92ZVRvKHgwMSwgeTAxKTtcblxuICAgICAgLy8gRG9lcyB0aGUgc2VjdG9y4oCZcyBvdXRlciByaW5nIGhhdmUgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgZWxzZSBpZiAocmMxID4gZXBzaWxvbikge1xuICAgICAgICB0MCA9IGNvcm5lclRhbmdlbnRzKHgwMCwgeTAwLCB4MDEsIHkwMSwgcjEsIHJjMSwgY3cpO1xuICAgICAgICB0MSA9IGNvcm5lclRhbmdlbnRzKHgxMSwgeTExLCB4MTAsIHkxMCwgcjEsIHJjMSwgY3cpO1xuXG4gICAgICAgIGNvbnRleHQubW92ZVRvKHQwLmN4ICsgdDAueDAxLCB0MC5jeSArIHQwLnkwMSk7XG5cbiAgICAgICAgLy8gSGF2ZSB0aGUgY29ybmVycyBtZXJnZWQ/XG4gICAgICAgIGlmIChyYzEgPCByYykgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzEsIGF0YW4yKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgZHJhdyB0aGUgdHdvIGNvcm5lcnMgYW5kIHRoZSByaW5nLlxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMSwgYXRhbjIodDAueTAxLCB0MC54MDEpLCBhdGFuMih0MC55MTEsIHQwLngxMSksICFjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjEsIGF0YW4yKHQwLmN5ICsgdDAueTExLCB0MC5jeCArIHQwLngxMSksIGF0YW4yKHQxLmN5ICsgdDEueTExLCB0MS5jeCArIHQxLngxMSksICFjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmModDEuY3gsIHQxLmN5LCByYzEsIGF0YW4yKHQxLnkxMSwgdDEueDExKSwgYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE9yIGlzIHRoZSBvdXRlciByaW5nIGp1c3QgYSBjaXJjdWxhciBhcmM/XG4gICAgICBlbHNlIGNvbnRleHQubW92ZVRvKHgwMSwgeTAxKSwgY29udGV4dC5hcmMoMCwgMCwgcjEsIGEwMSwgYTExLCAhY3cpO1xuXG4gICAgICAvLyBJcyB0aGVyZSBubyBpbm5lciByaW5nLCBhbmQgaXTigJlzIGEgY2lyY3VsYXIgc2VjdG9yP1xuICAgICAgLy8gT3IgcGVyaGFwcyBpdOKAmXMgYW4gYW5udWxhciBzZWN0b3IgY29sbGFwc2VkIGR1ZSB0byBwYWRkaW5nP1xuICAgICAgaWYgKCEocjAgPiBlcHNpbG9uKSB8fCAhKGRhMCA+IGVwc2lsb24pKSBjb250ZXh0LmxpbmVUbyh4MTAsIHkxMCk7XG5cbiAgICAgIC8vIERvZXMgdGhlIHNlY3RvcuKAmXMgaW5uZXIgcmluZyAob3IgcG9pbnQpIGhhdmUgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgZWxzZSBpZiAocmMwID4gZXBzaWxvbikge1xuICAgICAgICB0MCA9IGNvcm5lclRhbmdlbnRzKHgxMCwgeTEwLCB4MTEsIHkxMSwgcjAsIC1yYzAsIGN3KTtcbiAgICAgICAgdDEgPSBjb3JuZXJUYW5nZW50cyh4MDEsIHkwMSwgeDAwLCB5MDAsIHIwLCAtcmMwLCBjdyk7XG5cbiAgICAgICAgY29udGV4dC5saW5lVG8odDAuY3ggKyB0MC54MDEsIHQwLmN5ICsgdDAueTAxKTtcblxuICAgICAgICAvLyBIYXZlIHRoZSBjb3JuZXJzIG1lcmdlZD9cbiAgICAgICAgaWYgKHJjMCA8IHJjKSBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMCwgYXRhbjIodDAueTAxLCB0MC54MDEpLCBhdGFuMih0MS55MDEsIHQxLngwMSksICFjdyk7XG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBkcmF3IHRoZSB0d28gY29ybmVycyBhbmQgdGhlIHJpbmcuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMwLCBhdGFuMih0MC55MDEsIHQwLngwMSksIGF0YW4yKHQwLnkxMSwgdDAueDExKSwgIWN3KTtcbiAgICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMCwgYXRhbjIodDAuY3kgKyB0MC55MTEsIHQwLmN4ICsgdDAueDExKSwgYXRhbjIodDEuY3kgKyB0MS55MTEsIHQxLmN4ICsgdDEueDExKSwgY3cpO1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQxLmN4LCB0MS5jeSwgcmMwLCBhdGFuMih0MS55MTEsIHQxLngxMSksIGF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBPciBpcyB0aGUgaW5uZXIgcmluZyBqdXN0IGEgY2lyY3VsYXIgYXJjP1xuICAgICAgZWxzZSBjb250ZXh0LmFyYygwLCAwLCByMCwgYTEwLCBhMDAsIGN3KTtcbiAgICB9XG5cbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBhcmMuY2VudHJvaWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgciA9ICgraW5uZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtvdXRlclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIsXG4gICAgICAgIGEgPSAoK3N0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIgLSBwaSAvIDI7XG4gICAgcmV0dXJuIFtjb3MoYSkgKiByLCBzaW4oYSkgKiByXTtcbiAgfTtcblxuICBhcmMuaW5uZXJSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW5uZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IGlubmVyUmFkaXVzO1xuICB9O1xuXG4gIGFyYy5vdXRlclJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChvdXRlclJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogb3V0ZXJSYWRpdXM7XG4gIH07XG5cbiAgYXJjLmNvcm5lclJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb3JuZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IGNvcm5lclJhZGl1cztcbiAgfTtcblxuICBhcmMucGFkUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZFJhZGl1cyA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IHBhZFJhZGl1cztcbiAgfTtcblxuICBhcmMuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdGFydEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBzdGFydEFuZ2xlO1xuICB9O1xuXG4gIGFyYy5lbmRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChlbmRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogZW5kQW5nbGU7XG4gIH07XG5cbiAgYXJjLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBwYWRBbmdsZTtcbiAgfTtcblxuICBhcmMuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICgoY29udGV4dCA9IF8gPT0gbnVsbCA/IG51bGwgOiBfKSwgYXJjKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGFyYztcbn1cbiIsImV4cG9ydCB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSBcIm9iamVjdFwiICYmIFwibGVuZ3RoXCIgaW4geFxuICAgID8geCAvLyBBcnJheSwgVHlwZWRBcnJheSwgTm9kZUxpc3QsIGFycmF5LWxpa2VcbiAgICA6IEFycmF5LmZyb20oeCk7IC8vIE1hcCwgU2V0LCBpdGVyYWJsZSwgc3RyaW5nLCBvciBhbnl0aGluZyBlbHNlXG59XG4iLCJmdW5jdGlvbiBMaW5lYXIoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTGluZWFyLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTGluZWFyKGNvbnRleHQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHgocCkge1xuICByZXR1cm4gcFswXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHkocCkge1xuICByZXR1cm4gcFsxXTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGIgPCBhID8gLTEgOiBiID4gYSA/IDEgOiBiID49IGEgPyAwIDogTmFOO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZCkge1xuICByZXR1cm4gZDtcbn1cbiIsImltcG9ydCB7IFJlbmRlckluZm8sIFNpemUsIFRyYW5zZm9ybSB9IGZyb20gXCIuL2RhdGFcIjtcclxuaW1wb3J0IHsgVEZpbGUsIFRGb2xkZXIsIG5vcm1hbGl6ZVBhdGggfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgVmFsdWVUeXBlIH0gZnJvbSBcIi4vZGF0YVwiO1xyXG5pbXBvcnQgKiBhcyBkMyBmcm9tIFwiZDNcIjtcclxuaW1wb3J0IHsgTW9tZW50IH0gZnJvbSBcIm1vbWVudFwiO1xyXG5cclxuLy8gZGF0ZSBhbmQgdGltZVxyXG5jb25zdCB0aW1lRm9ybWF0ID0gW1xyXG4gICAgXCJISDptbVwiLFxyXG4gICAgXCJISDptXCIsXHJcbiAgICBcIkg6bW1cIixcclxuICAgIFwiSDptXCIsXHJcbiAgICBcImhoOm1tIEFcIixcclxuICAgIFwiaGg6bW0gYVwiLFxyXG4gICAgXCJoaDptIEFcIixcclxuICAgIFwiaGg6bSBhXCIsXHJcbiAgICBcImg6bW0gQVwiLFxyXG4gICAgXCJoOm1tIGFcIixcclxuICAgIFwiaDptIEFcIixcclxuICAgIFwiaDptIGFcIixcclxuXTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdHJUb0RhdGUoc3RyRGF0ZTogc3RyaW5nLCBkYXRlRm9ybWF0OiBzdHJpbmcpOiBNb21lbnQge1xyXG4gICAgbGV0IGZvcm1hdDogYW55ID0gZGF0ZUZvcm1hdDtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgICAgc3RyRGF0ZS5sZW5ndGggPiA0ICYmXHJcbiAgICAgICAgc3RyRGF0ZS5zdGFydHNXaXRoKFwiW1tcIikgJiZcclxuICAgICAgICBzdHJEYXRlLmVuZHNXaXRoKFwiXV1cIilcclxuICAgICkge1xyXG4gICAgICAgIHN0ckRhdGUgPSBzdHJEYXRlLnN1YnN0cmluZygyLCBzdHJEYXRlLmxlbmd0aCAtIDIpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkYXRlRm9ybWF0LnRvTG93ZXJDYXNlKCkgPT09IFwiaXNvLTg2MDFcIikge1xyXG4gICAgICAgIGZvcm1hdCA9IHdpbmRvdy5tb21lbnQuSVNPXzg2MDE7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGRhdGUgPSB3aW5kb3cubW9tZW50KHN0ckRhdGUsIGZvcm1hdCwgdHJ1ZSk7XHJcblxyXG4gICAgLy8gc3RpcCB0aW1lXHJcbiAgICBkYXRlID0gZGF0ZS5zdGFydE9mKFwiZGF5XCIpO1xyXG5cclxuICAgIHJldHVybiBkYXRlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVsRGF0ZVN0cmluZ1RvRGF0ZShcclxuICAgIHJlbERhdGVTdHJpbmc6IHN0cmluZyxcclxuICAgIGRhdGVGb3JtYXQ6IHN0cmluZ1xyXG4pOiBNb21lbnQge1xyXG4gICAgbGV0IGRhdGUgPSBudWxsO1xyXG4gICAgY29uc3QgcmVsRGF0ZVJlZ2V4ID0gL14oPzx2YWx1ZT5bXFwtXFwrXT9bMC05XSspKD88dW5pdD5bZHdteV0pJC87XHJcbiAgICBpZiAocmVsRGF0ZVJlZ2V4LnRlc3QocmVsRGF0ZVN0cmluZykpIHtcclxuICAgICAgICBsZXQgbWF0Y2ggPSByZWxEYXRlUmVnZXguZXhlYyhyZWxEYXRlU3RyaW5nKTtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHR5cGVvZiBtYXRjaC5ncm91cHMgIT09IFwidW5kZWZpbmVkXCIgJiZcclxuICAgICAgICAgICAgdHlwZW9mIG1hdGNoLmdyb3Vwcy52YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgbWF0Y2guZ3JvdXBzLnVuaXQgIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlID0gcGFyc2VGbG9hdChtYXRjaC5ncm91cHMudmFsdWUpO1xyXG4gICAgICAgICAgICBsZXQgdW5pdCA9IG1hdGNoLmdyb3Vwcy51bml0O1xyXG4gICAgICAgICAgICBkYXRlID0gZ2V0RGF0ZVRvZGF5KGRhdGVGb3JtYXQpO1xyXG4gICAgICAgICAgICBpZiAodW5pdCA9PT0gXCJkXCIpIHtcclxuICAgICAgICAgICAgICAgIGRhdGUgPSBkYXRlLmFkZCh2YWx1ZSwgXCJkYXlzXCIpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHVuaXQgPT09IFwid1wiKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRlID0gZGF0ZS5hZGQodmFsdWUsIFwid2Vla3NcIik7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodW5pdCA9PT0gXCJtXCIpIHtcclxuICAgICAgICAgICAgICAgIGRhdGUgPSBkYXRlLmFkZCh2YWx1ZSwgXCJtb250aHNcIik7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodW5pdCA9PT0gXCJ5XCIpIHtcclxuICAgICAgICAgICAgICAgIGRhdGUgPSBkYXRlLmFkZCh2YWx1ZSwgXCJ5ZWFyc1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoZGF0ZSAmJiBkYXRlLmlzVmFsaWQoKSkge1xyXG4gICAgICAgIHJldHVybiBkYXRlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGF0ZVRvU3RyKGRhdGU6IE1vbWVudCwgZGF0ZUZvcm1hdDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGlmICh0eXBlb2YgZGF0ZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCBkYXRlID09PSBudWxsKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICBpZiAoZGF0ZUZvcm1hdC50b0xvd2VyQ2FzZSgpID09PSBcImlzby04NjAxXCIpIHtcclxuICAgICAgICByZXR1cm4gZGF0ZS5mb3JtYXQoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBkYXRlLmZvcm1hdChkYXRlRm9ybWF0KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldERhdGVGcm9tVW5peFRpbWUoXHJcbiAgICB1bml4VGltZTogbnVtYmVyLFxyXG4gICAgZGF0ZUZvcm1hdDogc3RyaW5nXHJcbik6IE1vbWVudCB7XHJcbiAgICBsZXQgZGF0ZSA9IHdpbmRvdy5tb21lbnQodW5peFRpbWUpO1xyXG4gICAgbGV0IHN0ckRhdGUgPSBkYXRlVG9TdHIoZGF0ZSwgZGF0ZUZvcm1hdCk7XHJcbiAgICByZXR1cm4gc3RyVG9EYXRlKHN0ckRhdGUsIGRhdGVGb3JtYXQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF0ZVRvZGF5KGRhdGVGb3JtYXQ6IHN0cmluZykge1xyXG4gICAgbGV0IHRvZGF5ID0gd2luZG93Lm1vbWVudCgpO1xyXG4gICAgbGV0IHN0clRvZGF5ID0gZGF0ZVRvU3RyKHRvZGF5LCBkYXRlRm9ybWF0KTtcclxuICAgIHJldHVybiBzdHJUb0RhdGUoc3RyVG9kYXksIGRhdGVGb3JtYXQpO1xyXG59XHJcblxyXG4vLyBodHRwOi8vanNmaWRkbGUubmV0L2Fsbml0YWsvaEVzeXMvXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWVwVmFsdWUob2JqOiBhbnksIHN0cjogc3RyaW5nKSB7XHJcbiAgICBzdHIgPSBzdHIucmVwbGFjZSgvXlxcLi8sIFwiXCIpO1xyXG4gICAgdmFyIGEgPSBzdHIuc3BsaXQoXCIuXCIpO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBhLmxlbmd0aDsgaSA8IG47ICsraSkge1xyXG4gICAgICAgIHZhciBrID0gYVtpXTtcclxuICAgICAgICBpZiAoayBpbiBvYmopIHtcclxuICAgICAgICAgICAgb2JqID0gb2JqW2tdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG4vLyBTdHJpbmcgaGVscGVyc1xyXG5leHBvcnQgZnVuY3Rpb24gdHJpbUJ5Q2hhcihzdHI6IHN0cmluZywgY2hhcjogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBhcnIgPSBBcnJheS5mcm9tKHN0cik7XHJcbiAgICBjb25zdCBmaXJzdCA9IGFyci5maW5kSW5kZXgoKGMpID0+IGMgIT09IGNoYXIpO1xyXG4gICAgY29uc3QgbGFzdCA9IGFyci5yZXZlcnNlKCkuZmluZEluZGV4KChjKSA9PiBjICE9PSBjaGFyKTtcclxuICAgIHJldHVybiBmaXJzdCA9PT0gLTEgJiYgbGFzdCA9PT0gLTFcclxuICAgICAgICA/IHN0clxyXG4gICAgICAgIDogc3RyLnN1YnN0cmluZyhmaXJzdCwgc3RyLmxlbmd0aCAtIGxhc3QpO1xyXG59XHJcblxyXG4vLyBQYXJzaW5nXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUZsb2F0RnJvbUFueSh0b1BhcnNlOiBhbnkpIHtcclxuICAgIGxldCB2YWx1ZSA9IG51bGw7XHJcbiAgICBsZXQgdmFsdWVUeXBlID0gVmFsdWVUeXBlLk51bWJlcjtcclxuICAgIGlmICh0eXBlb2YgdG9QYXJzZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIC8vIHRpbWUgdmFsdWVcclxuICAgICAgICBpZiAodG9QYXJzZS5pbmNsdWRlcyhcIjpcIikpIHtcclxuICAgICAgICAgICAgbGV0IG5lZ2F0aXZlVmFsdWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHRvUGFyc2Uuc3RhcnRzV2l0aChcIi1cIikpIHtcclxuICAgICAgICAgICAgICAgIG5lZ2F0aXZlVmFsdWUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdG9QYXJzZSA9IHRvUGFyc2Uuc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCB0aW1lVmFsdWUgPSB3aW5kb3cubW9tZW50KHRvUGFyc2UsIHRpbWVGb3JtYXQsIHRydWUpO1xyXG4gICAgICAgICAgICBpZiAodGltZVZhbHVlLmlzVmFsaWQoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aW1lVmFsdWUuZGlmZihcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubW9tZW50KFwiMDA6MDBcIiwgXCJISDptbVwiLCB0cnVlKSxcclxuICAgICAgICAgICAgICAgICAgICBcInNlY29uZHNcIlxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGlmIChuZWdhdGl2ZVZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAtMSAqIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFsdWVUeXBlID0gVmFsdWVUeXBlLlRpbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHBhcnNlRmxvYXQodG9QYXJzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdG9QYXJzZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgIHZhbHVlID0gdG9QYXJzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geyB0eXBlOiB2YWx1ZVR5cGUsIHZhbHVlOiB2YWx1ZSB9O1xyXG59XHJcblxyXG4vLyBDaGFydCBoZWxwZXJzXHJcbmV4cG9ydCBmdW5jdGlvbiBtZWFzdXJlVGV4dFNpemUoXHJcbiAgICB0ZXh0OiBzdHJpbmcsXHJcbiAgICBzdHlsZUNsYXNzOiBzdHJpbmcgPSBcIlwiLFxyXG4gICAgcm90YXRlOiBzdHJpbmcgPSBcIlwiXHJcbik6IFNpemUge1xyXG4gICAgdmFyIGNvbnRhaW5lciA9IGQzLnNlbGVjdChcImJvZHlcIikuYXBwZW5kKFwic3ZnXCIpO1xyXG4gICAgbGV0IHRleHRCbG9jayA9IGNvbnRhaW5lclxyXG4gICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgICAgLnRleHQodGV4dClcclxuICAgICAgICAuYXR0cihcInhcIiwgLTk5OTk5KVxyXG4gICAgICAgIC5hdHRyKFwieVwiLCAtOTk5OTkpO1xyXG4gICAgaWYgKHN0eWxlQ2xhc3MpIHtcclxuICAgICAgICB0ZXh0QmxvY2suYXR0cihcImNsYXNzXCIsIHN0eWxlQ2xhc3MpO1xyXG4gICAgfVxyXG4gICAgaWYgKHJvdGF0ZSkge1xyXG4gICAgICAgIHRleHRCbG9jay5hdHRyKFwidHJhbnNmb3JtXCIsIFwicm90YXRlKFwiICsgcm90YXRlICsgXCIpXCIpO1xyXG4gICAgfVxyXG4gICAgdmFyIHNpemUgPSBjb250YWluZXIubm9kZSgpLmdldEJCb3goKTtcclxuICAgIGNvbnRhaW5lci5yZW1vdmUoKTtcclxuICAgIHJldHVybiB7IHdpZHRoOiBzaXplLndpZHRoLCBoZWlnaHQ6IHNpemUuaGVpZ2h0IH07XHJcbn1cclxuXHJcbi8vIGRvbVxyXG5leHBvcnQgZnVuY3Rpb24gZXhwYW5kQXJlYShhcmVhOiBhbnksIGFkZFc6IG51bWJlciwgYWRkSDogbnVtYmVyKSB7XHJcbiAgICBsZXQgb3JpV2lkdGggPSBwYXJzZUZsb2F0KGFyZWEuYXR0cihcIndpZHRoXCIpKSB8IDA7XHJcbiAgICBsZXQgb3JpSGVpZ2h0ID0gcGFyc2VGbG9hdChhcmVhLmF0dHIoXCJoZWlnaHRcIikpIHwgMDtcclxuICAgIGxldCBuZXdXaWR0aCA9IG9yaVdpZHRoICsgYWRkVztcclxuICAgIGxldCBuZXdIZWlnaHQgPSBvcmlIZWlnaHQgKyBhZGRIO1xyXG4gICAgYXJlYS5hdHRyKFwid2lkdGhcIiwgbmV3V2lkdGgpO1xyXG4gICAgYXJlYS5hdHRyKFwiaGVpZ2h0XCIsIG5ld0hlaWdodCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtb3ZlQXJlYShhcmVhOiBhbnksIHNoaWZ0WDogbnVtYmVyLCBzaGlmdFk6IG51bWJlcikge1xyXG4gICAgbGV0IHRyYW5zID0gbmV3IFRyYW5zZm9ybShhcmVhLmF0dHIoXCJ0cmFuc2Zvcm1cIikpO1xyXG4gICAgYXJlYS5hdHRyKFxyXG4gICAgICAgIFwidHJhbnNmb3JtXCIsXHJcbiAgICAgICAgXCJ0cmFuc2xhdGUoXCIgK1xyXG4gICAgICAgICAgICAodHJhbnMudHJhbnNsYXRlWCArIHNoaWZ0WCkgK1xyXG4gICAgICAgICAgICBcIixcIiArXHJcbiAgICAgICAgICAgICh0cmFucy50cmFuc2xhdGVZICsgc2hpZnRZKSArXHJcbiAgICAgICAgICAgIFwiKVwiXHJcbiAgICApO1xyXG59XHJcblxyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5mdW5jdGlvbiBjbGVhblRleHQodGV4dDogc3RyaW5nKSB7XHJcbiAgICAvLyBUaGFua3MgdG8gdG9yYW50aW5lXHJcbiAgICAvLyBjb2RlIHNuaXBwZXQgZnJvbSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS90b3JhbnRpbmUvYWY2MzljYmEzYzMyNzYyNTc2ZDY0YzM0ZWZmYWY2MTRcclxuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyheXFxcXHNcXCopfChcXFxcc1xcKiQpL2dpLCBcIlwiKTsgLy8gcmVtb3ZlIHRoZSBzdGFydCBhbmQgZW5kIHNwYWNlcyBvZiB0aGUgZ2l2ZW4gc3RyaW5nXHJcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXFsgXFxdezIsfS9naSwgXCIgXCIpOyAvLyByZWR1Y2UgbXVsdGlwbGUgc3BhY2VzIHRvIGEgc2luZ2xlIHNwYWNlXHJcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXFxcbiAvLCBcIlxcXFxuXCIpOyAvLyBleGNsdWRlIGEgbmV3IGxpbmUgd2l0aCBhIHN0YXJ0IHNwYWNpbmdcclxuICAgIHJldHVybiB0ZXh0O1xyXG59XHJcblxyXG4vLyBUaGFua3MgdG8gbHVrZWxlcHBhbiBmb3IgcGx1Z2luICdiZXR0ZXItd29yZC1jb3VudCdcclxuLy8gQ29kZSBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9sdWtlbGVwcGFuL2JldHRlci13b3JkLWNvdW50L2Jsb2IvbWFzdGVyL3NyYy9zdGF0cy50c1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0V29yZENvdW50KHRleHQ6IHN0cmluZykge1xyXG4gICAgdGV4dCA9IGNsZWFuVGV4dCh0ZXh0KTtcclxuXHJcbiAgICAvLyBUaGFua3MgdG8gbGlhbWNhbmVcclxuICAgIHZhciBzcGFjZURlbGltaXRlZENoYXJzID1cclxuICAgICAgICAvQS1aYS16XFx1MDBBQVxcdTAwQjVcXHUwMEJBXFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkMxXFx1MDJDNi1cXHUwMkQxXFx1MDJFMC1cXHUwMkU0XFx1MDJFQ1xcdTAyRUVcXHUwMzcwLVxcdTAzNzRcXHUwMzc2XFx1MDM3N1xcdTAzN0EtXFx1MDM3RFxcdTAzN0ZcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEUtXFx1MDNBMVxcdTAzQTMtXFx1MDNGNVxcdTAzRjctXFx1MDQ4MVxcdTA0OEEtXFx1MDUyRlxcdTA1MzEtXFx1MDU1NlxcdTA1NTlcXHUwNTYxLVxcdTA1ODdcXHUwNUQwLVxcdTA1RUFcXHUwNUYwLVxcdTA1RjJcXHUwNjIwLVxcdTA2NEFcXHUwNjZFXFx1MDY2RlxcdTA2NzEtXFx1MDZEM1xcdTA2RDVcXHUwNkU1XFx1MDZFNlxcdTA2RUVcXHUwNkVGXFx1MDZGQS1cXHUwNkZDXFx1MDZGRlxcdTA3MTBcXHUwNzEyLVxcdTA3MkZcXHUwNzRELVxcdTA3QTVcXHUwN0IxXFx1MDdDQS1cXHUwN0VBXFx1MDdGNFxcdTA3RjVcXHUwN0ZBXFx1MDgwMC1cXHUwODE1XFx1MDgxQVxcdTA4MjRcXHUwODI4XFx1MDg0MC1cXHUwODU4XFx1MDhBMC1cXHUwOEI0XFx1MDkwNC1cXHUwOTM5XFx1MDkzRFxcdTA5NTBcXHUwOTU4LVxcdTA5NjFcXHUwOTcxLVxcdTA5ODBcXHUwOTg1LVxcdTA5OENcXHUwOThGXFx1MDk5MFxcdTA5OTMtXFx1MDlBOFxcdTA5QUEtXFx1MDlCMFxcdTA5QjJcXHUwOUI2LVxcdTA5QjlcXHUwOUJEXFx1MDlDRVxcdTA5RENcXHUwOUREXFx1MDlERi1cXHUwOUUxXFx1MDlGMFxcdTA5RjFcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBNTktXFx1MEE1Q1xcdTBBNUVcXHUwQTcyLVxcdTBBNzRcXHUwQTg1LVxcdTBBOERcXHUwQThGLVxcdTBBOTFcXHUwQTkzLVxcdTBBQThcXHUwQUFBLVxcdTBBQjBcXHUwQUIyXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkRcXHUwQUQwXFx1MEFFMFxcdTBBRTFcXHUwQUY5XFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0RcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2MVxcdTBCNzFcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCRDBcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzlcXHUwQzNEXFx1MEM1OC1cXHUwQzVBXFx1MEM2MFxcdTBDNjFcXHUwQzg1LVxcdTBDOENcXHUwQzhFLVxcdTBDOTBcXHUwQzkyLVxcdTBDQThcXHUwQ0FBLVxcdTBDQjNcXHUwQ0I1LVxcdTBDQjlcXHUwQ0JEXFx1MENERVxcdTBDRTBcXHUwQ0UxXFx1MENGMVxcdTBDRjJcXHUwRDA1LVxcdTBEMENcXHUwRDBFLVxcdTBEMTBcXHUwRDEyLVxcdTBEM0FcXHUwRDNEXFx1MEQ0RVxcdTBENUYtXFx1MEQ2MVxcdTBEN0EtXFx1MEQ3RlxcdTBEODUtXFx1MEQ5NlxcdTBEOUEtXFx1MERCMVxcdTBEQjMtXFx1MERCQlxcdTBEQkRcXHUwREMwLVxcdTBEQzZcXHUwRTAxLVxcdTBFMzBcXHUwRTMyXFx1MEUzM1xcdTBFNDAtXFx1MEU0NlxcdTBFODFcXHUwRTgyXFx1MEU4NFxcdTBFODdcXHUwRTg4XFx1MEU4QVxcdTBFOERcXHUwRTk0LVxcdTBFOTdcXHUwRTk5LVxcdTBFOUZcXHUwRUExLVxcdTBFQTNcXHUwRUE1XFx1MEVBN1xcdTBFQUFcXHUwRUFCXFx1MEVBRC1cXHUwRUIwXFx1MEVCMlxcdTBFQjNcXHUwRUJEXFx1MEVDMC1cXHUwRUM0XFx1MEVDNlxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjQwLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjg4LVxcdTBGOENcXHUxMDAwLVxcdTEwMkFcXHUxMDNGXFx1MTA1MC1cXHUxMDU1XFx1MTA1QS1cXHUxMDVEXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2RS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4RVxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGQy1cXHUxMjQ4XFx1MTI0QS1cXHUxMjREXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNUEtXFx1MTI1RFxcdTEyNjAtXFx1MTI4OFxcdTEyOEEtXFx1MTI4RFxcdTEyOTAtXFx1MTJCMFxcdTEyQjItXFx1MTJCNVxcdTEyQjgtXFx1MTJCRVxcdTEyQzBcXHUxMkMyLVxcdTEyQzVcXHUxMkM4LVxcdTEyRDZcXHUxMkQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNUFcXHUxMzgwLVxcdTEzOEZcXHUxM0EwLVxcdTEzRjVcXHUxM0Y4LVxcdTEzRkRcXHUxNDAxLVxcdTE2NkNcXHUxNjZGLVxcdTE2N0ZcXHUxNjgxLVxcdTE2OUFcXHUxNkEwLVxcdTE2RUFcXHUxNkYxLVxcdTE2RjhcXHUxNzAwLVxcdTE3MENcXHUxNzBFLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NkNcXHUxNzZFLVxcdTE3NzBcXHUxNzgwLVxcdTE3QjNcXHUxN0Q3XFx1MTdEQ1xcdTE4MjAtXFx1MTg3N1xcdTE4ODAtXFx1MThBOFxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTUwLVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUIwLVxcdTE5QzlcXHUxQTAwLVxcdTFBMTZcXHUxQTIwLVxcdTFBNTRcXHUxQUE3XFx1MUIwNS1cXHUxQjMzXFx1MUI0NS1cXHUxQjRCXFx1MUI4My1cXHUxQkEwXFx1MUJBRVxcdTFCQUZcXHUxQkJBLVxcdTFCRTVcXHUxQzAwLVxcdTFDMjNcXHUxQzRELVxcdTFDNEZcXHUxQzVBLVxcdTFDN0RcXHUxQ0U5LVxcdTFDRUNcXHUxQ0VFLVxcdTFDRjFcXHUxQ0Y1XFx1MUNGNlxcdTFEMDAtXFx1MURCRlxcdTFFMDAtXFx1MUYxNVxcdTFGMTgtXFx1MUYxRFxcdTFGMjAtXFx1MUY0NVxcdTFGNDgtXFx1MUY0RFxcdTFGNTAtXFx1MUY1N1xcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUYtXFx1MUY3RFxcdTFGODAtXFx1MUZCNFxcdTFGQjYtXFx1MUZCQ1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2LVxcdTFGQ0NcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2LVxcdTFGREJcXHUxRkUwLVxcdTFGRUNcXHUxRkYyLVxcdTFGRjRcXHUxRkY2LVxcdTFGRkNcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTIxMDJcXHUyMTA3XFx1MjEwQS1cXHUyMTEzXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMkYtXFx1MjEzOVxcdTIxM0MtXFx1MjEzRlxcdTIxNDUtXFx1MjE0OVxcdTIxNEVcXHUyMTgzXFx1MjE4NFxcdTJDMDAtXFx1MkMyRVxcdTJDMzAtXFx1MkM1RVxcdTJDNjAtXFx1MkNFNFxcdTJDRUItXFx1MkNFRVxcdTJDRjJcXHUyQ0YzXFx1MkQwMC1cXHUyRDI1XFx1MkQyN1xcdTJEMkRcXHUyRDMwLVxcdTJENjdcXHUyRDZGXFx1MkQ4MC1cXHUyRDk2XFx1MkRBMC1cXHUyREE2XFx1MkRBOC1cXHUyREFFXFx1MkRCMC1cXHUyREI2XFx1MkRCOC1cXHUyREJFXFx1MkRDMC1cXHUyREM2XFx1MkRDOC1cXHUyRENFXFx1MkREMC1cXHUyREQ2XFx1MkREOC1cXHUyRERFXFx1MkUyRlxcdTMwMDVcXHUzMDA2XFx1MzAzMS1cXHUzMDM1XFx1MzAzQlxcdTMwM0NcXHUzMTA1LVxcdTMxMkRcXHUzMTMxLVxcdTMxOEVcXHUzMUEwLVxcdTMxQkFcXHUzMUYwLVxcdTMxRkZcXHUzNDAwLVxcdTREQjVcXHVBMDAwLVxcdUE0OENcXHVBNEQwLVxcdUE0RkRcXHVBNTAwLVxcdUE2MENcXHVBNjEwLVxcdUE2MUZcXHVBNjJBXFx1QTYyQlxcdUE2NDAtXFx1QTY2RVxcdUE2N0YtXFx1QTY5RFxcdUE2QTAtXFx1QTZFNVxcdUE3MTctXFx1QTcxRlxcdUE3MjItXFx1QTc4OFxcdUE3OEItXFx1QTdBRFxcdUE3QjAtXFx1QTdCN1xcdUE3RjctXFx1QTgwMVxcdUE4MDMtXFx1QTgwNVxcdUE4MDctXFx1QTgwQVxcdUE4MEMtXFx1QTgyMlxcdUE4NDAtXFx1QTg3M1xcdUE4ODItXFx1QThCM1xcdUE4RjItXFx1QThGN1xcdUE4RkJcXHVBOEZEXFx1QTkwQS1cXHVBOTI1XFx1QTkzMC1cXHVBOTQ2XFx1QTk2MC1cXHVBOTdDXFx1QTk4NC1cXHVBOUIyXFx1QTlDRlxcdUE5RTAtXFx1QTlFNFxcdUE5RTYtXFx1QTlFRlxcdUE5RkEtXFx1QTlGRVxcdUFBMDAtXFx1QUEyOFxcdUFBNDAtXFx1QUE0MlxcdUFBNDQtXFx1QUE0QlxcdUFBNjAtXFx1QUE3NlxcdUFBN0FcXHVBQTdFLVxcdUFBQUZcXHVBQUIxXFx1QUFCNVxcdUFBQjZcXHVBQUI5LVxcdUFBQkRcXHVBQUMwXFx1QUFDMlxcdUFBREItXFx1QUFERFxcdUFBRTAtXFx1QUFFQVxcdUFBRjItXFx1QUFGNFxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRVxcdUFCMzAtXFx1QUI1QVxcdUFCNUMtXFx1QUI2NVxcdUFCNzAtXFx1QUJFMlxcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUY5MDAtXFx1RkE2RFxcdUZBNzAtXFx1RkFEOVxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZCMURcXHVGQjFGLVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFNzAtXFx1RkU3NFxcdUZFNzYtXFx1RkVGQ1xcdUZGMjEtXFx1RkYzQVxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQy9cclxuICAgICAgICAgICAgLnNvdXJjZTtcclxuICAgIHZhciBub25TcGFjZURlbGltaXRlZFdvcmRzID1cclxuICAgICAgICAvW1xcdTMwNDEtXFx1MzA5NlxcdTMwOUQtXFx1MzA5RlxcdTMwQTEtXFx1MzBGQVxcdTMwRkMtXFx1MzBGRlxcdTRFMDAtXFx1OUZENV17MX0vXHJcbiAgICAgICAgICAgIC5zb3VyY2U7XHJcbiAgICB2YXIgcGF0dGVybiA9IG5ldyBSZWdFeHAoXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBcIig/OlswLTldKyg/Oig/Oix8XFxcXC4pWzAtOV0rKSp8W1xcXFwtXCIgKyBzcGFjZURlbGltaXRlZENoYXJzICsgXCJdKStcIixcclxuICAgICAgICAgICAgbm9uU3BhY2VEZWxpbWl0ZWRXb3JkcyxcclxuICAgICAgICBdLmpvaW4oXCJ8XCIpLFxyXG4gICAgICAgIFwiZ1wiXHJcbiAgICApO1xyXG4gICAgcmV0dXJuICh0ZXh0Lm1hdGNoKHBhdHRlcm4pIHx8IFtdKS5sZW5ndGg7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGFyYWN0ZXJDb3VudCh0ZXh0OiBzdHJpbmcpIHtcclxuICAgIHJldHVybiB0ZXh0Lmxlbmd0aDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlbnRlbmNlQ291bnQodGV4dDogc3RyaW5nKSB7XHJcbiAgICB0ZXh0ID0gY2xlYW5UZXh0KHRleHQpO1xyXG5cclxuICAgIC8vIFRoYW5rcyB0byBFeHRyYWN0IEhpZ2hsaWdodHMgcGx1Z2luIGFuZCBBbmdlbHVzRG9taW5pXHJcbiAgICAvLyBBbHNvIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU1NTM0MTBcclxuICAgIHZhciBzZW50ZW5jZXMgPVxyXG4gICAgICAgICh0ZXh0IHx8IFwiXCIpLm1hdGNoKFxyXG4gICAgICAgICAgICAvW14u44CCIe+8gT/vvJ9cXHNdW14u44CCIe+8gT/vvJ9dKig/OlsuIT9dKD8hWyfigJjigJlcIuKAnOKAneOAjOOAjeOAjuOAj10/XFxzfCQpW14u44CCIe+8gT/vvJ9dKikqWy7jgIIh77yBP++8n10/WyfigJlcIuKAneOAjeOAj10/KD89XFxzfHwkKS9nbVxyXG4gICAgICAgICkgfHwgW107XHJcbiAgICB2YXIgc2VudGVuY2VzTGVuZ3RoID0gc2VudGVuY2VzLmxlbmd0aDtcclxuICAgIHJldHVybiBzZW50ZW5jZXNMZW5ndGg7XHJcbn1cclxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuIiwiLy8gICAgIEphdmFTY3JpcHQgRXhwcmVzc2lvbiBQYXJzZXIgKEpTRVApIDAuNC4wXG4vLyAgICAgSlNFUCBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuLy8gICAgIGh0dHBzOi8vZXJpY3NtZWtlbnMuZ2l0aHViLmlvL2pzZXAvXG5cbi8qZ2xvYmFsIG1vZHVsZTogdHJ1ZSwgZXhwb3J0czogdHJ1ZSwgY29uc29sZTogdHJ1ZSAqL1xuKGZ1bmN0aW9uIChyb290KSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0Ly8gTm9kZSBUeXBlc1xuXHQvLyAtLS0tLS0tLS0tXG5cblx0Ly8gVGhpcyBpcyB0aGUgZnVsbCBzZXQgb2YgdHlwZXMgdGhhdCBhbnkgSlNFUCBub2RlIGNhbiBiZS5cblx0Ly8gU3RvcmUgdGhlbSBoZXJlIHRvIHNhdmUgc3BhY2Ugd2hlbiBtaW5pZmllZFxuXHR2YXIgQ09NUE9VTkQgPSAnQ29tcG91bmQnLFxuXHRcdElERU5USUZJRVIgPSAnSWRlbnRpZmllcicsXG5cdFx0TUVNQkVSX0VYUCA9ICdNZW1iZXJFeHByZXNzaW9uJyxcblx0XHRMSVRFUkFMID0gJ0xpdGVyYWwnLFxuXHRcdFRISVNfRVhQID0gJ1RoaXNFeHByZXNzaW9uJyxcblx0XHRDQUxMX0VYUCA9ICdDYWxsRXhwcmVzc2lvbicsXG5cdFx0VU5BUllfRVhQID0gJ1VuYXJ5RXhwcmVzc2lvbicsXG5cdFx0QklOQVJZX0VYUCA9ICdCaW5hcnlFeHByZXNzaW9uJyxcblx0XHRMT0dJQ0FMX0VYUCA9ICdMb2dpY2FsRXhwcmVzc2lvbicsXG5cdFx0Q09ORElUSU9OQUxfRVhQID0gJ0NvbmRpdGlvbmFsRXhwcmVzc2lvbicsXG5cdFx0QVJSQVlfRVhQID0gJ0FycmF5RXhwcmVzc2lvbicsXG5cblx0XHRQRVJJT0RfQ09ERSA9IDQ2LCAvLyAnLidcblx0XHRDT01NQV9DT0RFICA9IDQ0LCAvLyAnLCdcblx0XHRTUVVPVEVfQ09ERSA9IDM5LCAvLyBzaW5nbGUgcXVvdGVcblx0XHREUVVPVEVfQ09ERSA9IDM0LCAvLyBkb3VibGUgcXVvdGVzXG5cdFx0T1BBUkVOX0NPREUgPSA0MCwgLy8gKFxuXHRcdENQQVJFTl9DT0RFID0gNDEsIC8vIClcblx0XHRPQlJBQ0tfQ09ERSA9IDkxLCAvLyBbXG5cdFx0Q0JSQUNLX0NPREUgPSA5MywgLy8gXVxuXHRcdFFVTUFSS19DT0RFID0gNjMsIC8vID9cblx0XHRTRU1DT0xfQ09ERSA9IDU5LCAvLyA7XG5cdFx0Q09MT05fQ09ERSAgPSA1OCwgLy8gOlxuXG5cdFx0dGhyb3dFcnJvciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIGluZGV4KSB7XG5cdFx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSArICcgYXQgY2hhcmFjdGVyICcgKyBpbmRleCk7XG5cdFx0XHRlcnJvci5pbmRleCA9IGluZGV4O1xuXHRcdFx0ZXJyb3IuZGVzY3JpcHRpb24gPSBtZXNzYWdlO1xuXHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0fSxcblxuXHQvLyBPcGVyYXRpb25zXG5cdC8vIC0tLS0tLS0tLS1cblxuXHQvLyBTZXQgYHRgIHRvIGB0cnVlYCB0byBzYXZlIHNwYWNlICh3aGVuIG1pbmlmaWVkLCBub3QgZ3ppcHBlZClcblx0XHR0ID0gdHJ1ZSxcblx0Ly8gVXNlIGEgcXVpY2tseS1hY2Nlc3NpYmxlIG1hcCB0byBzdG9yZSBhbGwgb2YgdGhlIHVuYXJ5IG9wZXJhdG9yc1xuXHQvLyBWYWx1ZXMgYXJlIHNldCB0byBgdHJ1ZWAgKGl0IHJlYWxseSBkb2Vzbid0IG1hdHRlcilcblx0XHR1bmFyeV9vcHMgPSB7Jy0nOiB0LCAnISc6IHQsICd+JzogdCwgJysnOiB0fSxcblx0Ly8gQWxzbyB1c2UgYSBtYXAgZm9yIHRoZSBiaW5hcnkgb3BlcmF0aW9ucyBidXQgc2V0IHRoZWlyIHZhbHVlcyB0byB0aGVpclxuXHQvLyBiaW5hcnkgcHJlY2VkZW5jZSBmb3IgcXVpY2sgcmVmZXJlbmNlOlxuXHQvLyBzZWUgW09yZGVyIG9mIG9wZXJhdGlvbnNdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvT3JkZXJfb2Zfb3BlcmF0aW9ucyNQcm9ncmFtbWluZ19sYW5ndWFnZSlcblx0XHRiaW5hcnlfb3BzID0ge1xuXHRcdFx0J3x8JzogMSwgJyYmJzogMiwgJ3wnOiAzLCAgJ14nOiA0LCAgJyYnOiA1LFxuXHRcdFx0Jz09JzogNiwgJyE9JzogNiwgJz09PSc6IDYsICchPT0nOiA2LFxuXHRcdFx0JzwnOiA3LCAgJz4nOiA3LCAgJzw9JzogNywgICc+PSc6IDcsXG5cdFx0XHQnPDwnOjgsICAnPj4nOiA4LCAnPj4+JzogOCxcblx0XHRcdCcrJzogOSwgJy0nOiA5LFxuXHRcdFx0JyonOiAxMCwgJy8nOiAxMCwgJyUnOiAxMFxuXHRcdH0sXG5cdC8vIEFkZGl0aW9uYWwgdmFsaWQgaWRlbnRpZmllciBjaGFycywgYXBhcnQgZnJvbSBhLXosIEEtWiBhbmQgMC05IChleGNlcHQgb24gdGhlIHN0YXJ0aW5nIGNoYXIpXG5cdFx0YWRkaXRpb25hbF9pZGVudGlmaWVyX2NoYXJzID0geyckJzogdCwgJ18nOiB0fSxcblx0Ly8gR2V0IHJldHVybiB0aGUgbG9uZ2VzdCBrZXkgbGVuZ3RoIG9mIGFueSBvYmplY3Rcblx0XHRnZXRNYXhLZXlMZW4gPSBmdW5jdGlvbihvYmopIHtcblx0XHRcdHZhciBtYXhfbGVuID0gMCwgbGVuO1xuXHRcdFx0Zm9yKHZhciBrZXkgaW4gb2JqKSB7XG5cdFx0XHRcdGlmKChsZW4gPSBrZXkubGVuZ3RoKSA+IG1heF9sZW4gJiYgb2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdFx0XHRtYXhfbGVuID0gbGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF4X2xlbjtcblx0XHR9LFxuXHRcdG1heF91bm9wX2xlbiA9IGdldE1heEtleUxlbih1bmFyeV9vcHMpLFxuXHRcdG1heF9iaW5vcF9sZW4gPSBnZXRNYXhLZXlMZW4oYmluYXJ5X29wcyksXG5cdC8vIExpdGVyYWxzXG5cdC8vIC0tLS0tLS0tLS1cblx0Ly8gU3RvcmUgdGhlIHZhbHVlcyB0byByZXR1cm4gZm9yIHRoZSB2YXJpb3VzIGxpdGVyYWxzIHdlIG1heSBlbmNvdW50ZXJcblx0XHRsaXRlcmFscyA9IHtcblx0XHRcdCd0cnVlJzogdHJ1ZSxcblx0XHRcdCdmYWxzZSc6IGZhbHNlLFxuXHRcdFx0J251bGwnOiBudWxsXG5cdFx0fSxcblx0Ly8gRXhjZXB0IGZvciBgdGhpc2AsIHdoaWNoIGlzIHNwZWNpYWwuIFRoaXMgY291bGQgYmUgY2hhbmdlZCB0byBzb21ldGhpbmcgbGlrZSBgJ3NlbGYnYCBhcyB3ZWxsXG5cdFx0dGhpc19zdHIgPSAndGhpcycsXG5cdC8vIFJldHVybnMgdGhlIHByZWNlZGVuY2Ugb2YgYSBiaW5hcnkgb3BlcmF0b3Igb3IgYDBgIGlmIGl0IGlzbid0IGEgYmluYXJ5IG9wZXJhdG9yXG5cdFx0YmluYXJ5UHJlY2VkZW5jZSA9IGZ1bmN0aW9uKG9wX3ZhbCkge1xuXHRcdFx0cmV0dXJuIGJpbmFyeV9vcHNbb3BfdmFsXSB8fCAwO1xuXHRcdH0sXG5cdC8vIFV0aWxpdHkgZnVuY3Rpb24gKGdldHMgY2FsbGVkIGZyb20gbXVsdGlwbGUgcGxhY2VzKVxuXHQvLyBBbHNvIG5vdGUgdGhhdCBgYSAmJiBiYCBhbmQgYGEgfHwgYmAgYXJlICpsb2dpY2FsKiBleHByZXNzaW9ucywgbm90IGJpbmFyeSBleHByZXNzaW9uc1xuXHRcdGNyZWF0ZUJpbmFyeUV4cHJlc3Npb24gPSBmdW5jdGlvbiAob3BlcmF0b3IsIGxlZnQsIHJpZ2h0KSB7XG5cdFx0XHR2YXIgdHlwZSA9IChvcGVyYXRvciA9PT0gJ3x8JyB8fCBvcGVyYXRvciA9PT0gJyYmJykgPyBMT0dJQ0FMX0VYUCA6IEJJTkFSWV9FWFA7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcGVyYXRvcjogb3BlcmF0b3IsXG5cdFx0XHRcdGxlZnQ6IGxlZnQsXG5cdFx0XHRcdHJpZ2h0OiByaWdodFxuXHRcdFx0fTtcblx0XHR9LFxuXHRcdC8vIGBjaGAgaXMgYSBjaGFyYWN0ZXIgY29kZSBpbiB0aGUgbmV4dCB0aHJlZSBmdW5jdGlvbnNcblx0XHRpc0RlY2ltYWxEaWdpdCA9IGZ1bmN0aW9uKGNoKSB7XG5cdFx0XHRyZXR1cm4gKGNoID49IDQ4ICYmIGNoIDw9IDU3KTsgLy8gMC4uLjlcblx0XHR9LFxuXHRcdGlzSWRlbnRpZmllclN0YXJ0ID0gZnVuY3Rpb24oY2gpIHtcblx0XHRcdHJldHVybiAgKGNoID49IDY1ICYmIGNoIDw9IDkwKSB8fCAvLyBBLi4uWlxuXHRcdFx0XHRcdChjaCA+PSA5NyAmJiBjaCA8PSAxMjIpIHx8IC8vIGEuLi56XG5cdFx0XHRcdFx0KGNoID49IDEyOCAmJiAhYmluYXJ5X29wc1tTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKV0pIHx8IC8vIGFueSBub24tQVNDSUkgdGhhdCBpcyBub3QgYW4gb3BlcmF0b3Jcblx0XHRcdFx0XHQoYWRkaXRpb25hbF9pZGVudGlmaWVyX2NoYXJzLmhhc093blByb3BlcnR5KFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpKSk7IC8vIGFkZGl0aW9uYWwgY2hhcmFjdGVyc1xuXHRcdH0sXG5cdFx0aXNJZGVudGlmaWVyUGFydCA9IGZ1bmN0aW9uKGNoKSB7XG5cdFx0XHRyZXR1cm4gXHQoY2ggPj0gNjUgJiYgY2ggPD0gOTApIHx8IC8vIEEuLi5aXG5cdFx0XHRcdFx0KGNoID49IDk3ICYmIGNoIDw9IDEyMikgfHwgLy8gYS4uLnpcblx0XHRcdFx0XHQoY2ggPj0gNDggJiYgY2ggPD0gNTcpIHx8IC8vIDAuLi45XG5cdFx0XHRcdFx0KGNoID49IDEyOCAmJiAhYmluYXJ5X29wc1tTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKV0pfHwgLy8gYW55IG5vbi1BU0NJSSB0aGF0IGlzIG5vdCBhbiBvcGVyYXRvclxuXHRcdFx0XHRcdChhZGRpdGlvbmFsX2lkZW50aWZpZXJfY2hhcnMuaGFzT3duUHJvcGVydHkoU3RyaW5nLmZyb21DaGFyQ29kZShjaCkpKTsgLy8gYWRkaXRpb25hbCBjaGFyYWN0ZXJzXG5cdFx0fSxcblxuXHRcdC8vIFBhcnNpbmdcblx0XHQvLyAtLS0tLS0tXG5cdFx0Ly8gYGV4cHJgIGlzIGEgc3RyaW5nIHdpdGggdGhlIHBhc3NlZCBpbiBleHByZXNzaW9uXG5cdFx0anNlcCA9IGZ1bmN0aW9uKGV4cHIpIHtcblx0XHRcdC8vIGBpbmRleGAgc3RvcmVzIHRoZSBjaGFyYWN0ZXIgbnVtYmVyIHdlIGFyZSBjdXJyZW50bHkgYXQgd2hpbGUgYGxlbmd0aGAgaXMgYSBjb25zdGFudFxuXHRcdFx0Ly8gQWxsIG9mIHRoZSBnb2JibGVzIGJlbG93IHdpbGwgbW9kaWZ5IGBpbmRleGAgYXMgd2UgbW92ZSBhbG9uZ1xuXHRcdFx0dmFyIGluZGV4ID0gMCxcblx0XHRcdFx0Y2hhckF0RnVuYyA9IGV4cHIuY2hhckF0LFxuXHRcdFx0XHRjaGFyQ29kZUF0RnVuYyA9IGV4cHIuY2hhckNvZGVBdCxcblx0XHRcdFx0ZXhwckkgPSBmdW5jdGlvbihpKSB7IHJldHVybiBjaGFyQXRGdW5jLmNhbGwoZXhwciwgaSk7IH0sXG5cdFx0XHRcdGV4cHJJQ29kZSA9IGZ1bmN0aW9uKGkpIHsgcmV0dXJuIGNoYXJDb2RlQXRGdW5jLmNhbGwoZXhwciwgaSk7IH0sXG5cdFx0XHRcdGxlbmd0aCA9IGV4cHIubGVuZ3RoLFxuXG5cdFx0XHRcdC8vIFB1c2ggYGluZGV4YCB1cCB0byB0aGUgbmV4dCBub24tc3BhY2UgY2hhcmFjdGVyXG5cdFx0XHRcdGdvYmJsZVNwYWNlcyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHZhciBjaCA9IGV4cHJJQ29kZShpbmRleCk7XG5cdFx0XHRcdFx0Ly8gc3BhY2Ugb3IgdGFiXG5cdFx0XHRcdFx0d2hpbGUoY2ggPT09IDMyIHx8IGNoID09PSA5IHx8IGNoID09PSAxMCB8fCBjaCA9PT0gMTMpIHtcblx0XHRcdFx0XHRcdGNoID0gZXhwcklDb2RlKCsraW5kZXgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBUaGUgbWFpbiBwYXJzaW5nIGZ1bmN0aW9uLiBNdWNoIG9mIHRoaXMgY29kZSBpcyBkZWRpY2F0ZWQgdG8gdGVybmFyeSBleHByZXNzaW9uc1xuXHRcdFx0XHRnb2JibGVFeHByZXNzaW9uID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIHRlc3QgPSBnb2JibGVCaW5hcnlFeHByZXNzaW9uKCksXG5cdFx0XHRcdFx0XHRjb25zZXF1ZW50LCBhbHRlcm5hdGU7XG5cdFx0XHRcdFx0Z29iYmxlU3BhY2VzKCk7XG5cblx0XHRcdFx0XHRpZihleHBySUNvZGUoaW5kZXgpID09PSBRVU1BUktfQ09ERSkge1xuXHRcdFx0XHRcdFx0Ly8gVGVybmFyeSBleHByZXNzaW9uOiB0ZXN0ID8gY29uc2VxdWVudCA6IGFsdGVybmF0ZVxuXHRcdFx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0XHRcdGNvbnNlcXVlbnQgPSBnb2JibGVFeHByZXNzaW9uKCk7XG5cdFx0XHRcdFx0XHRpZighY29uc2VxdWVudCkge1xuXHRcdFx0XHRcdFx0XHR0aHJvd0Vycm9yKCdFeHBlY3RlZCBleHByZXNzaW9uJywgaW5kZXgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Z29iYmxlU3BhY2VzKCk7XG5cdFx0XHRcdFx0XHRpZihleHBySUNvZGUoaW5kZXgpID09PSBDT0xPTl9DT0RFKSB7XG5cdFx0XHRcdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdFx0XHRcdGFsdGVybmF0ZSA9IGdvYmJsZUV4cHJlc3Npb24oKTtcblx0XHRcdFx0XHRcdFx0aWYoIWFsdGVybmF0ZSkge1xuXHRcdFx0XHRcdFx0XHRcdHRocm93RXJyb3IoJ0V4cGVjdGVkIGV4cHJlc3Npb24nLCBpbmRleCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiBDT05ESVRJT05BTF9FWFAsXG5cdFx0XHRcdFx0XHRcdFx0dGVzdDogdGVzdCxcblx0XHRcdFx0XHRcdFx0XHRjb25zZXF1ZW50OiBjb25zZXF1ZW50LFxuXHRcdFx0XHRcdFx0XHRcdGFsdGVybmF0ZTogYWx0ZXJuYXRlXG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0aHJvd0Vycm9yKCdFeHBlY3RlZCA6JywgaW5kZXgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGVzdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU2VhcmNoIGZvciB0aGUgb3BlcmF0aW9uIHBvcnRpb24gb2YgdGhlIHN0cmluZyAoZS5nLiBgK2AsIGA9PT1gKVxuXHRcdFx0XHQvLyBTdGFydCBieSB0YWtpbmcgdGhlIGxvbmdlc3QgcG9zc2libGUgYmluYXJ5IG9wZXJhdGlvbnMgKDMgY2hhcmFjdGVyczogYD09PWAsIGAhPT1gLCBgPj4+YClcblx0XHRcdFx0Ly8gYW5kIG1vdmUgZG93biBmcm9tIDMgdG8gMiB0byAxIGNoYXJhY3RlciB1bnRpbCBhIG1hdGNoaW5nIGJpbmFyeSBvcGVyYXRpb24gaXMgZm91bmRcblx0XHRcdFx0Ly8gdGhlbiwgcmV0dXJuIHRoYXQgYmluYXJ5IG9wZXJhdGlvblxuXHRcdFx0XHRnb2JibGVCaW5hcnlPcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGdvYmJsZVNwYWNlcygpO1xuXHRcdFx0XHRcdHZhciBiaW9wLCB0b19jaGVjayA9IGV4cHIuc3Vic3RyKGluZGV4LCBtYXhfYmlub3BfbGVuKSwgdGNfbGVuID0gdG9fY2hlY2subGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlKHRjX2xlbiA+IDApIHtcblx0XHRcdFx0XHRcdC8vIERvbid0IGFjY2VwdCBhIGJpbmFyeSBvcCB3aGVuIGl0IGlzIGFuIGlkZW50aWZpZXIuXG5cdFx0XHRcdFx0XHQvLyBCaW5hcnkgb3BzIHRoYXQgc3RhcnQgd2l0aCBhIGlkZW50aWZpZXItdmFsaWQgY2hhcmFjdGVyIG11c3QgYmUgZm9sbG93ZWRcblx0XHRcdFx0XHRcdC8vIGJ5IGEgbm9uIGlkZW50aWZpZXItcGFydCB2YWxpZCBjaGFyYWN0ZXJcblx0XHRcdFx0XHRcdGlmKGJpbmFyeV9vcHMuaGFzT3duUHJvcGVydHkodG9fY2hlY2spICYmIChcblx0XHRcdFx0XHRcdFx0IWlzSWRlbnRpZmllclN0YXJ0KGV4cHJJQ29kZShpbmRleCkpIHx8XG5cdFx0XHRcdFx0XHRcdChpbmRleCt0b19jaGVjay5sZW5ndGg8IGV4cHIubGVuZ3RoICYmICFpc0lkZW50aWZpZXJQYXJ0KGV4cHJJQ29kZShpbmRleCt0b19jaGVjay5sZW5ndGgpKSlcblx0XHRcdFx0XHRcdCkpIHtcblx0XHRcdFx0XHRcdFx0aW5kZXggKz0gdGNfbGVuO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdG9fY2hlY2s7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0b19jaGVjayA9IHRvX2NoZWNrLnN1YnN0cigwLCAtLXRjX2xlbik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBUaGlzIGZ1bmN0aW9uIGlzIHJlc3BvbnNpYmxlIGZvciBnb2JibGluZyBhbiBpbmRpdmlkdWFsIGV4cHJlc3Npb24sXG5cdFx0XHRcdC8vIGUuZy4gYDFgLCBgMSsyYCwgYGErKGIqMiktTWF0aC5zcXJ0KDIpYFxuXHRcdFx0XHRnb2JibGVCaW5hcnlFeHByZXNzaW9uID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIGNoX2ksIG5vZGUsIGJpb3AsIHByZWMsIHN0YWNrLCBiaW9wX2luZm8sIGxlZnQsIHJpZ2h0LCBpLCBjdXJfYmlvcDtcblxuXHRcdFx0XHRcdC8vIEZpcnN0LCB0cnkgdG8gZ2V0IHRoZSBsZWZ0bW9zdCB0aGluZ1xuXHRcdFx0XHRcdC8vIFRoZW4sIGNoZWNrIHRvIHNlZSBpZiB0aGVyZSdzIGEgYmluYXJ5IG9wZXJhdG9yIG9wZXJhdGluZyBvbiB0aGF0IGxlZnRtb3N0IHRoaW5nXG5cdFx0XHRcdFx0bGVmdCA9IGdvYmJsZVRva2VuKCk7XG5cdFx0XHRcdFx0YmlvcCA9IGdvYmJsZUJpbmFyeU9wKCk7XG5cblx0XHRcdFx0XHQvLyBJZiB0aGVyZSB3YXNuJ3QgYSBiaW5hcnkgb3BlcmF0b3IsIGp1c3QgcmV0dXJuIHRoZSBsZWZ0bW9zdCBub2RlXG5cdFx0XHRcdFx0aWYoIWJpb3ApIHtcblx0XHRcdFx0XHRcdHJldHVybiBsZWZ0O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgd2UgbmVlZCB0byBzdGFydCBhIHN0YWNrIHRvIHByb3Blcmx5IHBsYWNlIHRoZSBiaW5hcnkgb3BlcmF0aW9ucyBpbiB0aGVpclxuXHRcdFx0XHRcdC8vIHByZWNlZGVuY2Ugc3RydWN0dXJlXG5cdFx0XHRcdFx0YmlvcF9pbmZvID0geyB2YWx1ZTogYmlvcCwgcHJlYzogYmluYXJ5UHJlY2VkZW5jZShiaW9wKX07XG5cblx0XHRcdFx0XHRyaWdodCA9IGdvYmJsZVRva2VuKCk7XG5cdFx0XHRcdFx0aWYoIXJpZ2h0KSB7XG5cdFx0XHRcdFx0XHR0aHJvd0Vycm9yKFwiRXhwZWN0ZWQgZXhwcmVzc2lvbiBhZnRlciBcIiArIGJpb3AsIGluZGV4KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c3RhY2sgPSBbbGVmdCwgYmlvcF9pbmZvLCByaWdodF07XG5cblx0XHRcdFx0XHQvLyBQcm9wZXJseSBkZWFsIHdpdGggcHJlY2VkZW5jZSB1c2luZyBbcmVjdXJzaXZlIGRlc2NlbnRdKGh0dHA6Ly93d3cuZW5nci5tdW4uY2EvfnRoZW8vTWlzYy9leHBfcGFyc2luZy5odG0pXG5cdFx0XHRcdFx0d2hpbGUoKGJpb3AgPSBnb2JibGVCaW5hcnlPcCgpKSkge1xuXHRcdFx0XHRcdFx0cHJlYyA9IGJpbmFyeVByZWNlZGVuY2UoYmlvcCk7XG5cblx0XHRcdFx0XHRcdGlmKHByZWMgPT09IDApIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRiaW9wX2luZm8gPSB7IHZhbHVlOiBiaW9wLCBwcmVjOiBwcmVjIH07XG5cblx0XHRcdFx0XHRcdGN1cl9iaW9wID0gYmlvcDtcblx0XHRcdFx0XHRcdC8vIFJlZHVjZTogbWFrZSBhIGJpbmFyeSBleHByZXNzaW9uIGZyb20gdGhlIHRocmVlIHRvcG1vc3QgZW50cmllcy5cblx0XHRcdFx0XHRcdHdoaWxlICgoc3RhY2subGVuZ3RoID4gMikgJiYgKHByZWMgPD0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMl0ucHJlYykpIHtcblx0XHRcdFx0XHRcdFx0cmlnaHQgPSBzdGFjay5wb3AoKTtcblx0XHRcdFx0XHRcdFx0YmlvcCA9IHN0YWNrLnBvcCgpLnZhbHVlO1xuXHRcdFx0XHRcdFx0XHRsZWZ0ID0gc3RhY2sucG9wKCk7XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBjcmVhdGVCaW5hcnlFeHByZXNzaW9uKGJpb3AsIGxlZnQsIHJpZ2h0KTtcblx0XHRcdFx0XHRcdFx0c3RhY2sucHVzaChub2RlKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0bm9kZSA9IGdvYmJsZVRva2VuKCk7XG5cdFx0XHRcdFx0XHRpZighbm9kZSkge1xuXHRcdFx0XHRcdFx0XHR0aHJvd0Vycm9yKFwiRXhwZWN0ZWQgZXhwcmVzc2lvbiBhZnRlciBcIiArIGN1cl9iaW9wLCBpbmRleCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRzdGFjay5wdXNoKGJpb3BfaW5mbywgbm9kZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aSA9IHN0YWNrLmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0bm9kZSA9IHN0YWNrW2ldO1xuXHRcdFx0XHRcdHdoaWxlKGkgPiAxKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gY3JlYXRlQmluYXJ5RXhwcmVzc2lvbihzdGFja1tpIC0gMV0udmFsdWUsIHN0YWNrW2kgLSAyXSwgbm9kZSk7XG5cdFx0XHRcdFx0XHRpIC09IDI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBub2RlO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEFuIGluZGl2aWR1YWwgcGFydCBvZiBhIGJpbmFyeSBleHByZXNzaW9uOlxuXHRcdFx0XHQvLyBlLmcuIGBmb28uYmFyKGJheilgLCBgMWAsIGBcImFiY1wiYCwgYChhICUgMilgIChiZWNhdXNlIGl0J3MgaW4gcGFyZW50aGVzaXMpXG5cdFx0XHRcdGdvYmJsZVRva2VuID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIGNoLCB0b19jaGVjaywgdGNfbGVuLCBub2RlO1xuXG5cdFx0XHRcdFx0Z29iYmxlU3BhY2VzKCk7XG5cdFx0XHRcdFx0Y2ggPSBleHBySUNvZGUoaW5kZXgpO1xuXG5cdFx0XHRcdFx0aWYoaXNEZWNpbWFsRGlnaXQoY2gpIHx8IGNoID09PSBQRVJJT0RfQ09ERSkge1xuXHRcdFx0XHRcdFx0Ly8gQ2hhciBjb2RlIDQ2IGlzIGEgZG90IGAuYCB3aGljaCBjYW4gc3RhcnQgb2ZmIGEgbnVtZXJpYyBsaXRlcmFsXG5cdFx0XHRcdFx0XHRyZXR1cm4gZ29iYmxlTnVtZXJpY0xpdGVyYWwoKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZihjaCA9PT0gU1FVT1RFX0NPREUgfHwgY2ggPT09IERRVU9URV9DT0RFKSB7XG5cdFx0XHRcdFx0XHQvLyBTaW5nbGUgb3IgZG91YmxlIHF1b3Rlc1xuXHRcdFx0XHRcdFx0bm9kZSA9IGdvYmJsZVN0cmluZ0xpdGVyYWwoKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGNoID09PSBPQlJBQ0tfQ09ERSkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGdvYmJsZUFycmF5KCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRvX2NoZWNrID0gZXhwci5zdWJzdHIoaW5kZXgsIG1heF91bm9wX2xlbik7XG5cdFx0XHRcdFx0XHR0Y19sZW4gPSB0b19jaGVjay5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSh0Y19sZW4gPiAwKSB7XG5cdFx0XHRcdFx0XHQvLyBEb24ndCBhY2NlcHQgYW4gdW5hcnkgb3Agd2hlbiBpdCBpcyBhbiBpZGVudGlmaWVyLlxuXHRcdFx0XHRcdFx0Ly8gVW5hcnkgb3BzIHRoYXQgc3RhcnQgd2l0aCBhIGlkZW50aWZpZXItdmFsaWQgY2hhcmFjdGVyIG11c3QgYmUgZm9sbG93ZWRcblx0XHRcdFx0XHRcdC8vIGJ5IGEgbm9uIGlkZW50aWZpZXItcGFydCB2YWxpZCBjaGFyYWN0ZXJcblx0XHRcdFx0XHRcdFx0aWYodW5hcnlfb3BzLmhhc093blByb3BlcnR5KHRvX2NoZWNrKSAmJiAoXG5cdFx0XHRcdFx0XHRcdFx0IWlzSWRlbnRpZmllclN0YXJ0KGV4cHJJQ29kZShpbmRleCkpIHx8XG5cdFx0XHRcdFx0XHRcdFx0KGluZGV4K3RvX2NoZWNrLmxlbmd0aCA8IGV4cHIubGVuZ3RoICYmICFpc0lkZW50aWZpZXJQYXJ0KGV4cHJJQ29kZShpbmRleCt0b19jaGVjay5sZW5ndGgpKSlcblx0XHRcdFx0XHRcdFx0KSkge1xuXHRcdFx0XHRcdFx0XHRcdGluZGV4ICs9IHRjX2xlbjtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogVU5BUllfRVhQLFxuXHRcdFx0XHRcdFx0XHRcdFx0b3BlcmF0b3I6IHRvX2NoZWNrLFxuXHRcdFx0XHRcdFx0XHRcdFx0YXJndW1lbnQ6IGdvYmJsZVRva2VuKCksXG5cdFx0XHRcdFx0XHRcdFx0XHRwcmVmaXg6IHRydWVcblx0XHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHRvX2NoZWNrID0gdG9fY2hlY2suc3Vic3RyKDAsIC0tdGNfbGVuKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKGlzSWRlbnRpZmllclN0YXJ0KGNoKSkge1xuXHRcdFx0XHRcdFx0XHRub2RlID0gZ29iYmxlSWRlbnRpZmllcigpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChjaCA9PT0gT1BBUkVOX0NPREUpIHsgLy8gb3BlbiBwYXJlbnRoZXNpc1xuXHRcdFx0XHRcdFx0XHRub2RlID0gZ29iYmxlR3JvdXAoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIW5vZGUpIHtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRnb2JibGVTcGFjZXMoKTtcblxuXHRcdFx0XHRcdGNoID0gZXhwcklDb2RlKGluZGV4KTtcblxuXHRcdFx0XHRcdC8vIEdvYmJsZSBwcm9wZXJ0aWVzIG9mIG9mIGlkZW50aWZpZXJzL3N0cmluZ3MvYXJyYXlzL2dyb3Vwcy5cblx0XHRcdFx0XHQvLyBlLmcuIGBmb29gLCBgYmFyLmJhemAsIGBmb29bJ2JhciddLmJhemBcblx0XHRcdFx0XHQvLyBJdCBhbHNvIGdvYmJsZXMgZnVuY3Rpb24gY2FsbHM6XG5cdFx0XHRcdFx0Ly8gZS5nLiBgTWF0aC5hY29zKG9iai5hbmdsZSlgXG5cblx0XHRcdFx0XHR3aGlsZShjaCA9PT0gUEVSSU9EX0NPREUgfHwgY2ggPT09IE9CUkFDS19DT0RFIHx8IGNoID09PSBPUEFSRU5fQ09ERSkge1xuXHRcdFx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0XHRcdGlmKGNoID09PSBQRVJJT0RfQ09ERSkge1xuXHRcdFx0XHRcdFx0XHRnb2JibGVTcGFjZXMoKTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiBNRU1CRVJfRVhQLFxuXHRcdFx0XHRcdFx0XHRcdGNvbXB1dGVkOiBmYWxzZSxcblx0XHRcdFx0XHRcdFx0XHRvYmplY3Q6IG5vZGUsXG5cdFx0XHRcdFx0XHRcdFx0cHJvcGVydHk6IGdvYmJsZUlkZW50aWZpZXIoKVxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmKGNoID09PSBPQlJBQ0tfQ09ERSkge1xuXHRcdFx0XHRcdFx0XHRub2RlID0ge1xuXHRcdFx0XHRcdFx0XHRcdHR5cGU6IE1FTUJFUl9FWFAsXG5cdFx0XHRcdFx0XHRcdFx0Y29tcHV0ZWQ6IHRydWUsXG5cdFx0XHRcdFx0XHRcdFx0b2JqZWN0OiBub2RlLFxuXHRcdFx0XHRcdFx0XHRcdHByb3BlcnR5OiBnb2JibGVFeHByZXNzaW9uKClcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdFx0Z29iYmxlU3BhY2VzKCk7XG5cdFx0XHRcdFx0XHRcdGNoID0gZXhwcklDb2RlKGluZGV4KTtcblx0XHRcdFx0XHRcdFx0aWYoY2ggIT09IENCUkFDS19DT0RFKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhyb3dFcnJvcignVW5jbG9zZWQgWycsIGluZGV4KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmKGNoID09PSBPUEFSRU5fQ09ERSkge1xuXHRcdFx0XHRcdFx0XHQvLyBBIGZ1bmN0aW9uIGNhbGwgaXMgYmVpbmcgbWFkZTsgZ29iYmxlIGFsbCB0aGUgYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdG5vZGUgPSB7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogQ0FMTF9FWFAsXG5cdFx0XHRcdFx0XHRcdFx0J2FyZ3VtZW50cyc6IGdvYmJsZUFyZ3VtZW50cyhDUEFSRU5fQ09ERSksXG5cdFx0XHRcdFx0XHRcdFx0Y2FsbGVlOiBub2RlXG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRnb2JibGVTcGFjZXMoKTtcblx0XHRcdFx0XHRcdGNoID0gZXhwcklDb2RlKGluZGV4KTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gbm9kZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gUGFyc2Ugc2ltcGxlIG51bWVyaWMgbGl0ZXJhbHM6IGAxMmAsIGAzLjRgLCBgLjVgLiBEbyB0aGlzIGJ5IHVzaW5nIGEgc3RyaW5nIHRvXG5cdFx0XHRcdC8vIGtlZXAgdHJhY2sgb2YgZXZlcnl0aGluZyBpbiB0aGUgbnVtZXJpYyBsaXRlcmFsIGFuZCB0aGVuIGNhbGxpbmcgYHBhcnNlRmxvYXRgIG9uIHRoYXQgc3RyaW5nXG5cdFx0XHRcdGdvYmJsZU51bWVyaWNMaXRlcmFsID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIG51bWJlciA9ICcnLCBjaCwgY2hDb2RlO1xuXHRcdFx0XHRcdHdoaWxlKGlzRGVjaW1hbERpZ2l0KGV4cHJJQ29kZShpbmRleCkpKSB7XG5cdFx0XHRcdFx0XHRudW1iZXIgKz0gZXhwckkoaW5kZXgrKyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYoZXhwcklDb2RlKGluZGV4KSA9PT0gUEVSSU9EX0NPREUpIHsgLy8gY2FuIHN0YXJ0IHdpdGggYSBkZWNpbWFsIG1hcmtlclxuXHRcdFx0XHRcdFx0bnVtYmVyICs9IGV4cHJJKGluZGV4KyspO1xuXG5cdFx0XHRcdFx0XHR3aGlsZShpc0RlY2ltYWxEaWdpdChleHBySUNvZGUoaW5kZXgpKSkge1xuXHRcdFx0XHRcdFx0XHRudW1iZXIgKz0gZXhwckkoaW5kZXgrKyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y2ggPSBleHBySShpbmRleCk7XG5cdFx0XHRcdFx0aWYoY2ggPT09ICdlJyB8fCBjaCA9PT0gJ0UnKSB7IC8vIGV4cG9uZW50IG1hcmtlclxuXHRcdFx0XHRcdFx0bnVtYmVyICs9IGV4cHJJKGluZGV4KyspO1xuXHRcdFx0XHRcdFx0Y2ggPSBleHBySShpbmRleCk7XG5cdFx0XHRcdFx0XHRpZihjaCA9PT0gJysnIHx8IGNoID09PSAnLScpIHsgLy8gZXhwb25lbnQgc2lnblxuXHRcdFx0XHRcdFx0XHRudW1iZXIgKz0gZXhwckkoaW5kZXgrKyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR3aGlsZShpc0RlY2ltYWxEaWdpdChleHBySUNvZGUoaW5kZXgpKSkgeyAvL2V4cG9uZW50IGl0c2VsZlxuXHRcdFx0XHRcdFx0XHRudW1iZXIgKz0gZXhwckkoaW5kZXgrKyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZighaXNEZWNpbWFsRGlnaXQoZXhwcklDb2RlKGluZGV4LTEpKSApIHtcblx0XHRcdFx0XHRcdFx0dGhyb3dFcnJvcignRXhwZWN0ZWQgZXhwb25lbnQgKCcgKyBudW1iZXIgKyBleHBySShpbmRleCkgKyAnKScsIGluZGV4KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblxuXHRcdFx0XHRcdGNoQ29kZSA9IGV4cHJJQ29kZShpbmRleCk7XG5cdFx0XHRcdFx0Ly8gQ2hlY2sgdG8gbWFrZSBzdXJlIHRoaXMgaXNuJ3QgYSB2YXJpYWJsZSBuYW1lIHRoYXQgc3RhcnQgd2l0aCBhIG51bWJlciAoMTIzYWJjKVxuXHRcdFx0XHRcdGlmKGlzSWRlbnRpZmllclN0YXJ0KGNoQ29kZSkpIHtcblx0XHRcdFx0XHRcdHRocm93RXJyb3IoJ1ZhcmlhYmxlIG5hbWVzIGNhbm5vdCBzdGFydCB3aXRoIGEgbnVtYmVyICgnICtcblx0XHRcdFx0XHRcdFx0XHRcdG51bWJlciArIGV4cHJJKGluZGV4KSArICcpJywgaW5kZXgpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZihjaENvZGUgPT09IFBFUklPRF9DT0RFKSB7XG5cdFx0XHRcdFx0XHR0aHJvd0Vycm9yKCdVbmV4cGVjdGVkIHBlcmlvZCcsIGluZGV4KTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0dHlwZTogTElURVJBTCxcblx0XHRcdFx0XHRcdHZhbHVlOiBwYXJzZUZsb2F0KG51bWJlciksXG5cdFx0XHRcdFx0XHRyYXc6IG51bWJlclxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUGFyc2VzIGEgc3RyaW5nIGxpdGVyYWwsIHN0YXJpbmcgd2l0aCBzaW5nbGUgb3IgZG91YmxlIHF1b3RlcyB3aXRoIGJhc2ljIHN1cHBvcnQgZm9yIGVzY2FwZSBjb2Rlc1xuXHRcdFx0XHQvLyBlLmcuIGBcImhlbGxvIHdvcmxkXCJgLCBgJ3RoaXMgaXNcXG5KU0VQJ2Bcblx0XHRcdFx0Z29iYmxlU3RyaW5nTGl0ZXJhbCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHZhciBzdHIgPSAnJywgcXVvdGUgPSBleHBySShpbmRleCsrKSwgY2xvc2VkID0gZmFsc2UsIGNoO1xuXG5cdFx0XHRcdFx0d2hpbGUoaW5kZXggPCBsZW5ndGgpIHtcblx0XHRcdFx0XHRcdGNoID0gZXhwckkoaW5kZXgrKyk7XG5cdFx0XHRcdFx0XHRpZihjaCA9PT0gcXVvdGUpIHtcblx0XHRcdFx0XHRcdFx0Y2xvc2VkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYoY2ggPT09ICdcXFxcJykge1xuXHRcdFx0XHRcdFx0XHQvLyBDaGVjayBmb3IgYWxsIG9mIHRoZSBjb21tb24gZXNjYXBlIGNvZGVzXG5cdFx0XHRcdFx0XHRcdGNoID0gZXhwckkoaW5kZXgrKyk7XG5cdFx0XHRcdFx0XHRcdHN3aXRjaChjaCkge1xuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJ24nOiBzdHIgKz0gJ1xcbic7IGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJ3InOiBzdHIgKz0gJ1xccic7IGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJ3QnOiBzdHIgKz0gJ1xcdCc7IGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJ2InOiBzdHIgKz0gJ1xcYic7IGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJ2YnOiBzdHIgKz0gJ1xcZic7IGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJ3YnOiBzdHIgKz0gJ1xceDBCJzsgYnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdCA6IHN0ciArPSBjaDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0c3RyICs9IGNoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmKCFjbG9zZWQpIHtcblx0XHRcdFx0XHRcdHRocm93RXJyb3IoJ1VuY2xvc2VkIHF1b3RlIGFmdGVyIFwiJytzdHIrJ1wiJywgaW5kZXgpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0eXBlOiBMSVRFUkFMLFxuXHRcdFx0XHRcdFx0dmFsdWU6IHN0cixcblx0XHRcdFx0XHRcdHJhdzogcXVvdGUgKyBzdHIgKyBxdW90ZVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR29iYmxlcyBvbmx5IGlkZW50aWZpZXJzXG5cdFx0XHRcdC8vIGUuZy46IGBmb29gLCBgX3ZhbHVlYCwgYCR4MWBcblx0XHRcdFx0Ly8gQWxzbywgdGhpcyBmdW5jdGlvbiBjaGVja3MgaWYgdGhhdCBpZGVudGlmaWVyIGlzIGEgbGl0ZXJhbDpcblx0XHRcdFx0Ly8gKGUuZy4gYHRydWVgLCBgZmFsc2VgLCBgbnVsbGApIG9yIGB0aGlzYFxuXHRcdFx0XHRnb2JibGVJZGVudGlmaWVyID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIGNoID0gZXhwcklDb2RlKGluZGV4KSwgc3RhcnQgPSBpbmRleCwgaWRlbnRpZmllcjtcblxuXHRcdFx0XHRcdGlmKGlzSWRlbnRpZmllclN0YXJ0KGNoKSkge1xuXHRcdFx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGhyb3dFcnJvcignVW5leHBlY3RlZCAnICsgZXhwckkoaW5kZXgpLCBpbmRleCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0d2hpbGUoaW5kZXggPCBsZW5ndGgpIHtcblx0XHRcdFx0XHRcdGNoID0gZXhwcklDb2RlKGluZGV4KTtcblx0XHRcdFx0XHRcdGlmKGlzSWRlbnRpZmllclBhcnQoY2gpKSB7XG5cdFx0XHRcdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWRlbnRpZmllciA9IGV4cHIuc2xpY2Uoc3RhcnQsIGluZGV4KTtcblxuXHRcdFx0XHRcdGlmKGxpdGVyYWxzLmhhc093blByb3BlcnR5KGlkZW50aWZpZXIpKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHR0eXBlOiBMSVRFUkFMLFxuXHRcdFx0XHRcdFx0XHR2YWx1ZTogbGl0ZXJhbHNbaWRlbnRpZmllcl0sXG5cdFx0XHRcdFx0XHRcdHJhdzogaWRlbnRpZmllclxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9IGVsc2UgaWYoaWRlbnRpZmllciA9PT0gdGhpc19zdHIpIHtcblx0XHRcdFx0XHRcdHJldHVybiB7IHR5cGU6IFRISVNfRVhQIH07XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdHR5cGU6IElERU5USUZJRVIsXG5cdFx0XHRcdFx0XHRcdG5hbWU6IGlkZW50aWZpZXJcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdvYmJsZXMgYSBsaXN0IG9mIGFyZ3VtZW50cyB3aXRoaW4gdGhlIGNvbnRleHQgb2YgYSBmdW5jdGlvbiBjYWxsXG5cdFx0XHRcdC8vIG9yIGFycmF5IGxpdGVyYWwuIFRoaXMgZnVuY3Rpb24gYWxzbyBhc3N1bWVzIHRoYXQgdGhlIG9wZW5pbmcgY2hhcmFjdGVyXG5cdFx0XHRcdC8vIGAoYCBvciBgW2AgaGFzIGFscmVhZHkgYmVlbiBnb2JibGVkLCBhbmQgZ29iYmxlcyBleHByZXNzaW9ucyBhbmQgY29tbWFzXG5cdFx0XHRcdC8vIHVudGlsIHRoZSB0ZXJtaW5hdG9yIGNoYXJhY3RlciBgKWAgb3IgYF1gIGlzIGVuY291bnRlcmVkLlxuXHRcdFx0XHQvLyBlLmcuIGBmb28oYmFyLCBiYXopYCwgYG15X2Z1bmMoKWAsIG9yIGBbYmFyLCBiYXpdYFxuXHRcdFx0XHRnb2JibGVBcmd1bWVudHMgPSBmdW5jdGlvbih0ZXJtaW5hdGlvbikge1xuXHRcdFx0XHRcdHZhciBjaF9pLCBhcmdzID0gW10sIG5vZGUsIGNsb3NlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdHZhciBzZXBhcmF0b3JfY291bnQgPSAwO1xuXHRcdFx0XHRcdHdoaWxlKGluZGV4IDwgbGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRnb2JibGVTcGFjZXMoKTtcblx0XHRcdFx0XHRcdGNoX2kgPSBleHBySUNvZGUoaW5kZXgpO1xuXHRcdFx0XHRcdFx0aWYoY2hfaSA9PT0gdGVybWluYXRpb24pIHsgLy8gZG9uZSBwYXJzaW5nXG5cdFx0XHRcdFx0XHRcdGNsb3NlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdFx0XHRcdGlmKHRlcm1pbmF0aW9uID09PSBDUEFSRU5fQ09ERSAmJiBzZXBhcmF0b3JfY291bnQgJiYgc2VwYXJhdG9yX2NvdW50ID49IGFyZ3MubGVuZ3RoKXtcblx0XHRcdFx0XHRcdFx0XHR0aHJvd0Vycm9yKCdVbmV4cGVjdGVkIHRva2VuICcgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKHRlcm1pbmF0aW9uKSwgaW5kZXgpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChjaF9pID09PSBDT01NQV9DT0RFKSB7IC8vIGJldHdlZW4gZXhwcmVzc2lvbnNcblx0XHRcdFx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0XHRcdFx0c2VwYXJhdG9yX2NvdW50Kys7XG5cdFx0XHRcdFx0XHRcdGlmKHNlcGFyYXRvcl9jb3VudCAhPT0gYXJncy5sZW5ndGgpIHsgLy8gbWlzc2luZyBhcmd1bWVudFxuXHRcdFx0XHRcdFx0XHRcdGlmKHRlcm1pbmF0aW9uID09PSBDUEFSRU5fQ09ERSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dGhyb3dFcnJvcignVW5leHBlY3RlZCB0b2tlbiAsJywgaW5kZXgpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRlbHNlIGlmKHRlcm1pbmF0aW9uID09PSBDQlJBQ0tfQ09ERSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Zm9yKHZhciBhcmcgPSBhcmdzLmxlbmd0aDsgYXJnPCBzZXBhcmF0b3JfY291bnQ7IGFyZysrKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MucHVzaChudWxsKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBnb2JibGVFeHByZXNzaW9uKCk7XG5cdFx0XHRcdFx0XHRcdGlmKCFub2RlIHx8IG5vZGUudHlwZSA9PT0gQ09NUE9VTkQpIHtcblx0XHRcdFx0XHRcdFx0XHR0aHJvd0Vycm9yKCdFeHBlY3RlZCBjb21tYScsIGluZGV4KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRhcmdzLnB1c2gobm9kZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICghY2xvc2VkKSB7XG5cdFx0XHRcdFx0XHR0aHJvd0Vycm9yKCdFeHBlY3RlZCAnICsgU3RyaW5nLmZyb21DaGFyQ29kZSh0ZXJtaW5hdGlvbiksIGluZGV4KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIGFyZ3M7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmVzcG9uc2libGUgZm9yIHBhcnNpbmcgYSBncm91cCBvZiB0aGluZ3Mgd2l0aGluIHBhcmVudGhlc2VzIGAoKWBcblx0XHRcdFx0Ly8gVGhpcyBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgaXQgbmVlZHMgdG8gZ29iYmxlIHRoZSBvcGVuaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdC8vIGFuZCB0aGVuIHRyaWVzIHRvIGdvYmJsZSBldmVyeXRoaW5nIHdpdGhpbiB0aGF0IHBhcmVudGhlc2lzLCBhc3N1bWluZ1xuXHRcdFx0XHQvLyB0aGF0IHRoZSBuZXh0IHRoaW5nIGl0IHNob3VsZCBzZWUgaXMgdGhlIGNsb3NlIHBhcmVudGhlc2lzLiBJZiBub3QsXG5cdFx0XHRcdC8vIHRoZW4gdGhlIGV4cHJlc3Npb24gcHJvYmFibHkgZG9lc24ndCBoYXZlIGEgYClgXG5cdFx0XHRcdGdvYmJsZUdyb3VwID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0XHR2YXIgbm9kZSA9IGdvYmJsZUV4cHJlc3Npb24oKTtcblx0XHRcdFx0XHRnb2JibGVTcGFjZXMoKTtcblx0XHRcdFx0XHRpZihleHBySUNvZGUoaW5kZXgpID09PSBDUEFSRU5fQ09ERSkge1xuXHRcdFx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0XHRcdHJldHVybiBub2RlO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0aHJvd0Vycm9yKCdVbmNsb3NlZCAoJywgaW5kZXgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSZXNwb25zaWJsZSBmb3IgcGFyc2luZyBBcnJheSBsaXRlcmFscyBgWzEsIDIsIDNdYFxuXHRcdFx0XHQvLyBUaGlzIGZ1bmN0aW9uIGFzc3VtZXMgdGhhdCBpdCBuZWVkcyB0byBnb2JibGUgdGhlIG9wZW5pbmcgYnJhY2tldFxuXHRcdFx0XHQvLyBhbmQgdGhlbiB0cmllcyB0byBnb2JibGUgdGhlIGV4cHJlc3Npb25zIGFzIGFyZ3VtZW50cy5cblx0XHRcdFx0Z29iYmxlQXJyYXkgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0eXBlOiBBUlJBWV9FWFAsXG5cdFx0XHRcdFx0XHRlbGVtZW50czogZ29iYmxlQXJndW1lbnRzKENCUkFDS19DT0RFKVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0bm9kZXMgPSBbXSwgY2hfaSwgbm9kZTtcblxuXHRcdFx0d2hpbGUoaW5kZXggPCBsZW5ndGgpIHtcblx0XHRcdFx0Y2hfaSA9IGV4cHJJQ29kZShpbmRleCk7XG5cblx0XHRcdFx0Ly8gRXhwcmVzc2lvbnMgY2FuIGJlIHNlcGFyYXRlZCBieSBzZW1pY29sb25zLCBjb21tYXMsIG9yIGp1c3QgaW5mZXJyZWQgd2l0aG91dCBhbnlcblx0XHRcdFx0Ly8gc2VwYXJhdG9yc1xuXHRcdFx0XHRpZihjaF9pID09PSBTRU1DT0xfQ09ERSB8fCBjaF9pID09PSBDT01NQV9DT0RFKSB7XG5cdFx0XHRcdFx0aW5kZXgrKzsgLy8gaWdub3JlIHNlcGFyYXRvcnNcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBUcnkgdG8gZ29iYmxlIGVhY2ggZXhwcmVzc2lvbiBpbmRpdmlkdWFsbHlcblx0XHRcdFx0XHRpZigobm9kZSA9IGdvYmJsZUV4cHJlc3Npb24oKSkpIHtcblx0XHRcdFx0XHRcdG5vZGVzLnB1c2gobm9kZSk7XG5cdFx0XHRcdFx0Ly8gSWYgd2Ugd2VyZW4ndCBhYmxlIHRvIGZpbmQgYSBiaW5hcnkgZXhwcmVzc2lvbiBhbmQgYXJlIG91dCBvZiByb29tLCB0aGVuXG5cdFx0XHRcdFx0Ly8gdGhlIGV4cHJlc3Npb24gcGFzc2VkIGluIHByb2JhYmx5IGhhcyB0b28gbXVjaFxuXHRcdFx0XHRcdH0gZWxzZSBpZihpbmRleCA8IGxlbmd0aCkge1xuXHRcdFx0XHRcdFx0dGhyb3dFcnJvcignVW5leHBlY3RlZCBcIicgKyBleHBySShpbmRleCkgKyAnXCInLCBpbmRleCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoZXJlJ3Mgb25seSBvbmUgZXhwcmVzc2lvbiBqdXN0IHRyeSByZXR1cm5pbmcgdGhlIGV4cHJlc3Npb25cblx0XHRcdGlmKG5vZGVzLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0XHRyZXR1cm4gbm9kZXNbMF07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHR5cGU6IENPTVBPVU5ELFxuXHRcdFx0XHRcdGJvZHk6IG5vZGVzXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fTtcblxuXHQvLyBUbyBiZSBmaWxsZWQgaW4gYnkgdGhlIHRlbXBsYXRlXG5cdGpzZXAudmVyc2lvbiA9ICcwLjQuMCc7XG5cdGpzZXAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuICdKYXZhU2NyaXB0IEV4cHJlc3Npb24gUGFyc2VyIChKU0VQKSB2JyArIGpzZXAudmVyc2lvbjsgfTtcblxuXHQvKipcblx0ICogQG1ldGhvZCBqc2VwLmFkZFVuYXJ5T3Bcblx0ICogQHBhcmFtIHtzdHJpbmd9IG9wX25hbWUgVGhlIG5hbWUgb2YgdGhlIHVuYXJ5IG9wIHRvIGFkZFxuXHQgKiBAcmV0dXJuIGpzZXBcblx0ICovXG5cdGpzZXAuYWRkVW5hcnlPcCA9IGZ1bmN0aW9uKG9wX25hbWUpIHtcblx0XHRtYXhfdW5vcF9sZW4gPSBNYXRoLm1heChvcF9uYW1lLmxlbmd0aCwgbWF4X3Vub3BfbGVuKTtcblx0XHR1bmFyeV9vcHNbb3BfbmFtZV0gPSB0OyByZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogQG1ldGhvZCBqc2VwLmFkZEJpbmFyeU9wXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBvcF9uYW1lIFRoZSBuYW1lIG9mIHRoZSBiaW5hcnkgb3AgdG8gYWRkXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBwcmVjZWRlbmNlIFRoZSBwcmVjZWRlbmNlIG9mIHRoZSBiaW5hcnkgb3AgKGNhbiBiZSBhIGZsb2F0KVxuXHQgKiBAcmV0dXJuIGpzZXBcblx0ICovXG5cdGpzZXAuYWRkQmluYXJ5T3AgPSBmdW5jdGlvbihvcF9uYW1lLCBwcmVjZWRlbmNlKSB7XG5cdFx0bWF4X2Jpbm9wX2xlbiA9IE1hdGgubWF4KG9wX25hbWUubGVuZ3RoLCBtYXhfYmlub3BfbGVuKTtcblx0XHRiaW5hcnlfb3BzW29wX25hbWVdID0gcHJlY2VkZW5jZTtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogQG1ldGhvZCBqc2VwLmFkZElkZW50aWZpZXJDaGFyXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBjaGFyIFRoZSBhZGRpdGlvbmFsIGNoYXJhY3RlciB0byB0cmVhdCBhcyBhIHZhbGlkIHBhcnQgb2YgYW4gaWRlbnRpZmllclxuXHQgKiBAcmV0dXJuIGpzZXBcblx0ICovXG5cdGpzZXAuYWRkSWRlbnRpZmllckNoYXIgPSBmdW5jdGlvbihjaGFyKSB7XG5cdFx0YWRkaXRpb25hbF9pZGVudGlmaWVyX2NoYXJzW2NoYXJdID0gdDsgcmV0dXJuIHRoaXM7XG5cdH07XG5cblx0LyoqXG5cdCAqIEBtZXRob2QganNlcC5hZGRMaXRlcmFsXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBsaXRlcmFsX25hbWUgVGhlIG5hbWUgb2YgdGhlIGxpdGVyYWwgdG8gYWRkXG5cdCAqIEBwYXJhbSB7Kn0gbGl0ZXJhbF92YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGxpdGVyYWxcblx0ICogQHJldHVybiBqc2VwXG5cdCAqL1xuXHRqc2VwLmFkZExpdGVyYWwgPSBmdW5jdGlvbihsaXRlcmFsX25hbWUsIGxpdGVyYWxfdmFsdWUpIHtcblx0XHRsaXRlcmFsc1tsaXRlcmFsX25hbWVdID0gbGl0ZXJhbF92YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogQG1ldGhvZCBqc2VwLnJlbW92ZVVuYXJ5T3Bcblx0ICogQHBhcmFtIHtzdHJpbmd9IG9wX25hbWUgVGhlIG5hbWUgb2YgdGhlIHVuYXJ5IG9wIHRvIHJlbW92ZVxuXHQgKiBAcmV0dXJuIGpzZXBcblx0ICovXG5cdGpzZXAucmVtb3ZlVW5hcnlPcCA9IGZ1bmN0aW9uKG9wX25hbWUpIHtcblx0XHRkZWxldGUgdW5hcnlfb3BzW29wX25hbWVdO1xuXHRcdGlmKG9wX25hbWUubGVuZ3RoID09PSBtYXhfdW5vcF9sZW4pIHtcblx0XHRcdG1heF91bm9wX2xlbiA9IGdldE1heEtleUxlbih1bmFyeV9vcHMpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogQG1ldGhvZCBqc2VwLnJlbW92ZUFsbFVuYXJ5T3BzXG5cdCAqIEByZXR1cm4ganNlcFxuXHQgKi9cblx0anNlcC5yZW1vdmVBbGxVbmFyeU9wcyA9IGZ1bmN0aW9uKCkge1xuXHRcdHVuYXJ5X29wcyA9IHt9O1xuXHRcdG1heF91bm9wX2xlbiA9IDA7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogQG1ldGhvZCBqc2VwLnJlbW92ZUlkZW50aWZpZXJDaGFyXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBjaGFyIFRoZSBhZGRpdGlvbmFsIGNoYXJhY3RlciB0byBzdG9wIHRyZWF0aW5nIGFzIGEgdmFsaWQgcGFydCBvZiBhbiBpZGVudGlmaWVyXG5cdCAqIEByZXR1cm4ganNlcFxuXHQgKi9cblx0anNlcC5yZW1vdmVJZGVudGlmaWVyQ2hhciA9IGZ1bmN0aW9uKGNoYXIpIHtcblx0XHRkZWxldGUgYWRkaXRpb25hbF9pZGVudGlmaWVyX2NoYXJzW2NoYXJdO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cblx0LyoqXG5cdCAqIEBtZXRob2QganNlcC5yZW1vdmVCaW5hcnlPcFxuXHQgKiBAcGFyYW0ge3N0cmluZ30gb3BfbmFtZSBUaGUgbmFtZSBvZiB0aGUgYmluYXJ5IG9wIHRvIHJlbW92ZVxuXHQgKiBAcmV0dXJuIGpzZXBcblx0ICovXG5cdGpzZXAucmVtb3ZlQmluYXJ5T3AgPSBmdW5jdGlvbihvcF9uYW1lKSB7XG5cdFx0ZGVsZXRlIGJpbmFyeV9vcHNbb3BfbmFtZV07XG5cdFx0aWYob3BfbmFtZS5sZW5ndGggPT09IG1heF9iaW5vcF9sZW4pIHtcblx0XHRcdG1heF9iaW5vcF9sZW4gPSBnZXRNYXhLZXlMZW4oYmluYXJ5X29wcyk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAbWV0aG9kIGpzZXAucmVtb3ZlQWxsQmluYXJ5T3BzXG5cdCAqIEByZXR1cm4ganNlcFxuXHQgKi9cblx0anNlcC5yZW1vdmVBbGxCaW5hcnlPcHMgPSBmdW5jdGlvbigpIHtcblx0XHRiaW5hcnlfb3BzID0ge307XG5cdFx0bWF4X2Jpbm9wX2xlbiA9IDA7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogQG1ldGhvZCBqc2VwLnJlbW92ZUxpdGVyYWxcblx0ICogQHBhcmFtIHtzdHJpbmd9IGxpdGVyYWxfbmFtZSBUaGUgbmFtZSBvZiB0aGUgbGl0ZXJhbCB0byByZW1vdmVcblx0ICogQHJldHVybiBqc2VwXG5cdCAqL1xuXHRqc2VwLnJlbW92ZUxpdGVyYWwgPSBmdW5jdGlvbihsaXRlcmFsX25hbWUpIHtcblx0XHRkZWxldGUgbGl0ZXJhbHNbbGl0ZXJhbF9uYW1lXTtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogQG1ldGhvZCBqc2VwLnJlbW92ZUFsbExpdGVyYWxzXG5cdCAqIEByZXR1cm4ganNlcFxuXHQgKi9cblx0anNlcC5yZW1vdmVBbGxMaXRlcmFscyA9IGZ1bmN0aW9uKCkge1xuXHRcdGxpdGVyYWxzID0ge307XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvLyBJbiBkZXNrdG9wIGVudmlyb25tZW50cywgaGF2ZSBhIHdheSB0byByZXN0b3JlIHRoZSBvbGQgdmFsdWUgZm9yIGBqc2VwYFxuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0dmFyIG9sZF9qc2VwID0gcm9vdC5qc2VwO1xuXHRcdC8vIFRoZSBzdGFyIG9mIHRoZSBzaG93ISBJdCdzIGEgZnVuY3Rpb24hXG5cdFx0cm9vdC5qc2VwID0ganNlcDtcblx0XHQvLyBBbmQgYSBjb3VydGVvdXMgZnVuY3Rpb24gd2lsbGluZyB0byBtb3ZlIG91dCBvZiB0aGUgd2F5IGZvciBvdGhlciBzaW1pbGFybHktbmFtZWQgb2JqZWN0cyFcblx0XHRqc2VwLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmKHJvb3QuanNlcCA9PT0ganNlcCkge1xuXHRcdFx0XHRyb290LmpzZXAgPSBvbGRfanNlcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBqc2VwO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0Ly8gSW4gTm9kZS5KUyBlbnZpcm9ubWVudHNcblx0XHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRcdGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGpzZXA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGV4cG9ydHMucGFyc2UgPSBqc2VwO1xuXHRcdH1cblx0fVxufSh0aGlzKSk7XG4iLCIvKiBnbG9iYWwgd2luZG93LCBleHBvcnRzLCBkZWZpbmUgKi9cblxuIWZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0J1xuXG4gICAgdmFyIHJlID0ge1xuICAgICAgICBub3Rfc3RyaW5nOiAvW15zXS8sXG4gICAgICAgIG5vdF9ib29sOiAvW150XS8sXG4gICAgICAgIG5vdF90eXBlOiAvW15UXS8sXG4gICAgICAgIG5vdF9wcmltaXRpdmU6IC9bXnZdLyxcbiAgICAgICAgbnVtYmVyOiAvW2RpZWZnXS8sXG4gICAgICAgIG51bWVyaWNfYXJnOiAvW2JjZGllZmd1eFhdLyxcbiAgICAgICAganNvbjogL1tqXS8sXG4gICAgICAgIG5vdF9qc29uOiAvW15qXS8sXG4gICAgICAgIHRleHQ6IC9eW15cXHgyNV0rLyxcbiAgICAgICAgbW9kdWxvOiAvXlxceDI1ezJ9LyxcbiAgICAgICAgcGxhY2Vob2xkZXI6IC9eXFx4MjUoPzooWzEtOV1cXGQqKVxcJHxcXCgoW14pXSspXFwpKT8oXFwrKT8oMHwnW14kXSk/KC0pPyhcXGQrKT8oPzpcXC4oXFxkKykpPyhbYi1naWpvc3RUdXZ4WF0pLyxcbiAgICAgICAga2V5OiAvXihbYS16X11bYS16X1xcZF0qKS9pLFxuICAgICAgICBrZXlfYWNjZXNzOiAvXlxcLihbYS16X11bYS16X1xcZF0qKS9pLFxuICAgICAgICBpbmRleF9hY2Nlc3M6IC9eXFxbKFxcZCspXFxdLyxcbiAgICAgICAgc2lnbjogL15bKy1dL1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNwcmludGYoa2V5KSB7XG4gICAgICAgIC8vIGBhcmd1bWVudHNgIGlzIG5vdCBhbiBhcnJheSwgYnV0IHNob3VsZCBiZSBmaW5lIGZvciB0aGlzIGNhbGxcbiAgICAgICAgcmV0dXJuIHNwcmludGZfZm9ybWF0KHNwcmludGZfcGFyc2Uoa2V5KSwgYXJndW1lbnRzKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZzcHJpbnRmKGZtdCwgYXJndikge1xuICAgICAgICByZXR1cm4gc3ByaW50Zi5hcHBseShudWxsLCBbZm10XS5jb25jYXQoYXJndiB8fCBbXSkpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3ByaW50Zl9mb3JtYXQocGFyc2VfdHJlZSwgYXJndikge1xuICAgICAgICB2YXIgY3Vyc29yID0gMSwgdHJlZV9sZW5ndGggPSBwYXJzZV90cmVlLmxlbmd0aCwgYXJnLCBvdXRwdXQgPSAnJywgaSwgaywgcGgsIHBhZCwgcGFkX2NoYXJhY3RlciwgcGFkX2xlbmd0aCwgaXNfcG9zaXRpdmUsIHNpZ25cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRyZWVfbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyc2VfdHJlZVtpXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gcGFyc2VfdHJlZVtpXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBhcnNlX3RyZWVbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgcGggPSBwYXJzZV90cmVlW2ldIC8vIGNvbnZlbmllbmNlIHB1cnBvc2VzIG9ubHlcbiAgICAgICAgICAgICAgICBpZiAocGgua2V5cykgeyAvLyBrZXl3b3JkIGFyZ3VtZW50XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3ZbY3Vyc29yXVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgcGgua2V5cy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZyA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Ioc3ByaW50ZignW3NwcmludGZdIENhbm5vdCBhY2Nlc3MgcHJvcGVydHkgXCIlc1wiIG9mIHVuZGVmaW5lZCB2YWx1ZSBcIiVzXCInLCBwaC5rZXlzW2tdLCBwaC5rZXlzW2stMV0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnW3BoLmtleXNba11dXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocGgucGFyYW1fbm8pIHsgLy8gcG9zaXRpb25hbCBhcmd1bWVudCAoZXhwbGljaXQpXG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3ZbcGgucGFyYW1fbm9dXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgeyAvLyBwb3NpdGlvbmFsIGFyZ3VtZW50IChpbXBsaWNpdClcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndltjdXJzb3IrK11cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmUubm90X3R5cGUudGVzdChwaC50eXBlKSAmJiByZS5ub3RfcHJpbWl0aXZlLnRlc3QocGgudHlwZSkgJiYgYXJnIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnKClcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmUubnVtZXJpY19hcmcudGVzdChwaC50eXBlKSAmJiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgJiYgaXNOYU4oYXJnKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzcHJpbnRmKCdbc3ByaW50Zl0gZXhwZWN0aW5nIG51bWJlciBidXQgZm91bmQgJVQnLCBhcmcpKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZS5udW1iZXIudGVzdChwaC50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBpc19wb3NpdGl2ZSA9IGFyZyA+PSAwXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChwaC50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2InOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gcGFyc2VJbnQoYXJnLCAxMCkudG9TdHJpbmcoMilcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChhcmcsIDEwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdpJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IHBhcnNlSW50KGFyZywgMTApXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdqJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IEpTT04uc3RyaW5naWZ5KGFyZywgbnVsbCwgcGgud2lkdGggPyBwYXJzZUludChwaC53aWR0aCkgOiAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBwaC5wcmVjaXNpb24gPyBwYXJzZUZsb2F0KGFyZykudG9FeHBvbmVudGlhbChwaC5wcmVjaXNpb24pIDogcGFyc2VGbG9hdChhcmcpLnRvRXhwb25lbnRpYWwoKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZic6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBwaC5wcmVjaXNpb24gPyBwYXJzZUZsb2F0KGFyZykudG9GaXhlZChwaC5wcmVjaXNpb24pIDogcGFyc2VGbG9hdChhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdnJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IHBoLnByZWNpc2lvbiA/IFN0cmluZyhOdW1iZXIoYXJnLnRvUHJlY2lzaW9uKHBoLnByZWNpc2lvbikpKSA6IHBhcnNlRmxvYXQoYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSAocGFyc2VJbnQoYXJnLCAxMCkgPj4+IDApLnRvU3RyaW5nKDgpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IFN0cmluZyhhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSAocGgucHJlY2lzaW9uID8gYXJnLnN1YnN0cmluZygwLCBwaC5wcmVjaXNpb24pIDogYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBTdHJpbmcoISFhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSAocGgucHJlY2lzaW9uID8gYXJnLnN1YnN0cmluZygwLCBwaC5wcmVjaXNpb24pIDogYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnVCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnKS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gKHBoLnByZWNpc2lvbiA/IGFyZy5zdWJzdHJpbmcoMCwgcGgucHJlY2lzaW9uKSA6IGFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gcGFyc2VJbnQoYXJnLCAxMCkgPj4+IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3YnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnZhbHVlT2YoKVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gKHBoLnByZWNpc2lvbiA/IGFyZy5zdWJzdHJpbmcoMCwgcGgucHJlY2lzaW9uKSA6IGFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3gnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gKHBhcnNlSW50KGFyZywgMTApID4+PiAwKS50b1N0cmluZygxNilcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1gnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gKHBhcnNlSW50KGFyZywgMTApID4+PiAwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlLmpzb24udGVzdChwaC50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgKz0gYXJnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmUubnVtYmVyLnRlc3QocGgudHlwZSkgJiYgKCFpc19wb3NpdGl2ZSB8fCBwaC5zaWduKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbiA9IGlzX3Bvc2l0aXZlID8gJysnIDogJy0nXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcudG9TdHJpbmcoKS5yZXBsYWNlKHJlLnNpZ24sICcnKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbiA9ICcnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcGFkX2NoYXJhY3RlciA9IHBoLnBhZF9jaGFyID8gcGgucGFkX2NoYXIgPT09ICcwJyA/ICcwJyA6IHBoLnBhZF9jaGFyLmNoYXJBdCgxKSA6ICcgJ1xuICAgICAgICAgICAgICAgICAgICBwYWRfbGVuZ3RoID0gcGgud2lkdGggLSAoc2lnbiArIGFyZykubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgIHBhZCA9IHBoLndpZHRoID8gKHBhZF9sZW5ndGggPiAwID8gcGFkX2NoYXJhY3Rlci5yZXBlYXQocGFkX2xlbmd0aCkgOiAnJykgOiAnJ1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgKz0gcGguYWxpZ24gPyBzaWduICsgYXJnICsgcGFkIDogKHBhZF9jaGFyYWN0ZXIgPT09ICcwJyA/IHNpZ24gKyBwYWQgKyBhcmcgOiBwYWQgKyBzaWduICsgYXJnKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0XG4gICAgfVxuXG4gICAgdmFyIHNwcmludGZfY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpXG5cbiAgICBmdW5jdGlvbiBzcHJpbnRmX3BhcnNlKGZtdCkge1xuICAgICAgICBpZiAoc3ByaW50Zl9jYWNoZVtmbXRdKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ByaW50Zl9jYWNoZVtmbXRdXG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX2ZtdCA9IGZtdCwgbWF0Y2gsIHBhcnNlX3RyZWUgPSBbXSwgYXJnX25hbWVzID0gMFxuICAgICAgICB3aGlsZSAoX2ZtdCkge1xuICAgICAgICAgICAgaWYgKChtYXRjaCA9IHJlLnRleHQuZXhlYyhfZm10KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXJzZV90cmVlLnB1c2gobWF0Y2hbMF0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgobWF0Y2ggPSByZS5tb2R1bG8uZXhlYyhfZm10KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXJzZV90cmVlLnB1c2goJyUnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKG1hdGNoID0gcmUucGxhY2Vob2xkZXIuZXhlYyhfZm10KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hbMl0pIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnX25hbWVzIHw9IDFcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpZWxkX2xpc3QgPSBbXSwgcmVwbGFjZW1lbnRfZmllbGQgPSBtYXRjaFsyXSwgZmllbGRfbWF0Y2ggPSBbXVxuICAgICAgICAgICAgICAgICAgICBpZiAoKGZpZWxkX21hdGNoID0gcmUua2V5LmV4ZWMocmVwbGFjZW1lbnRfZmllbGQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfbGlzdC5wdXNoKGZpZWxkX21hdGNoWzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChyZXBsYWNlbWVudF9maWVsZCA9IHJlcGxhY2VtZW50X2ZpZWxkLnN1YnN0cmluZyhmaWVsZF9tYXRjaFswXS5sZW5ndGgpKSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGZpZWxkX21hdGNoID0gcmUua2V5X2FjY2Vzcy5leGVjKHJlcGxhY2VtZW50X2ZpZWxkKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfbGlzdC5wdXNoKGZpZWxkX21hdGNoWzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgoZmllbGRfbWF0Y2ggPSByZS5pbmRleF9hY2Nlc3MuZXhlYyhyZXBsYWNlbWVudF9maWVsZCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkX2xpc3QucHVzaChmaWVsZF9tYXRjaFsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignW3NwcmludGZdIGZhaWxlZCB0byBwYXJzZSBuYW1lZCBhcmd1bWVudCBrZXknKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignW3NwcmludGZdIGZhaWxlZCB0byBwYXJzZSBuYW1lZCBhcmd1bWVudCBrZXknKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoWzJdID0gZmllbGRfbGlzdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnX25hbWVzIHw9IDJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFyZ19uYW1lcyA9PT0gMykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tzcHJpbnRmXSBtaXhpbmcgcG9zaXRpb25hbCBhbmQgbmFtZWQgcGxhY2Vob2xkZXJzIGlzIG5vdCAoeWV0KSBzdXBwb3J0ZWQnKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHBhcnNlX3RyZWUucHVzaChcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IG1hdGNoWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1fbm86ICAgIG1hdGNoWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAga2V5czogICAgICAgIG1hdGNoWzJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbjogICAgICAgIG1hdGNoWzNdLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkX2NoYXI6ICAgIG1hdGNoWzRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ246ICAgICAgIG1hdGNoWzVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICAgICAgIG1hdGNoWzZdLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJlY2lzaW9uOiAgIG1hdGNoWzddLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogICAgICAgIG1hdGNoWzhdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ1tzcHJpbnRmXSB1bmV4cGVjdGVkIHBsYWNlaG9sZGVyJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9mbXQgPSBfZm10LnN1YnN0cmluZyhtYXRjaFswXS5sZW5ndGgpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNwcmludGZfY2FjaGVbZm10XSA9IHBhcnNlX3RyZWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBleHBvcnQgdG8gZWl0aGVyIGJyb3dzZXIgb3Igbm9kZS5qc1xuICAgICAqL1xuICAgIC8qIGVzbGludC1kaXNhYmxlIHF1b3RlLXByb3BzICovXG4gICAgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBleHBvcnRzWydzcHJpbnRmJ10gPSBzcHJpbnRmXG4gICAgICAgIGV4cG9ydHNbJ3ZzcHJpbnRmJ10gPSB2c3ByaW50ZlxuICAgIH1cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2luZG93WydzcHJpbnRmJ10gPSBzcHJpbnRmXG4gICAgICAgIHdpbmRvd1sndnNwcmludGYnXSA9IHZzcHJpbnRmXG5cbiAgICAgICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lWydhbWQnXSkge1xuICAgICAgICAgICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICdzcHJpbnRmJzogc3ByaW50ZixcbiAgICAgICAgICAgICAgICAgICAgJ3ZzcHJpbnRmJzogdnNwcmludGZcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qIGVzbGludC1lbmFibGUgcXVvdGUtcHJvcHMgKi9cbn0oKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuIiwiaW1wb3J0IHsgUmVuZGVySW5mbywgRGF0YXNldCB9IGZyb20gXCIuL2RhdGFcIjtcclxuaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XHJcbmltcG9ydCB7IGlzTW9tZW50LCBNb21lbnQgfSBmcm9tIFwibW9tZW50XCI7XHJcbmltcG9ydCAqIGFzIGhlbHBlciBmcm9tIFwiLi9oZWxwZXJcIjtcclxuaW1wb3J0IGpzZXAgZnJvbSBcImpzZXBcIjtcclxuaW1wb3J0IHsgc3ByaW50ZiB9IGZyb20gXCJzcHJpbnRmLWpzXCI7XHJcblxyXG4vLyBGdW5jdGlvbiBhY2NlcHQgZGF0YXNldElkIGFzIGZpcnN0IGFyZ3VtZW50XHJcbnR5cGUgRm5EYXRhc2V0VG9WYWx1ZSA9IChcclxuICAgIGRhdGFzZXQ6IERhdGFzZXQsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvXHJcbikgPT4gbnVtYmVyIHwgTW9tZW50IHwgc3RyaW5nO1xyXG50eXBlIEZuRGF0YXNldFRvRGF0YXNldCA9IChcclxuICAgIGRhdGFzZXQ6IERhdGFzZXQsXHJcbiAgICBhcmdzOiBBcnJheTxudW1iZXIgfCBEYXRhc2V0PixcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm9cclxuKSA9PiBEYXRhc2V0IHwgc3RyaW5nO1xyXG50eXBlIEZuVW5pcnlPcCA9IChcclxuICAgIHU6IG51bWJlciB8IE1vbWVudCB8IERhdGFzZXRcclxuKSA9PiBudW1iZXIgfCBNb21lbnQgfCBEYXRhc2V0IHwgc3RyaW5nO1xyXG50eXBlIEZuQmluYXJ5T3AgPSAoXHJcbiAgICBsOiBudW1iZXIgfCBNb21lbnQgfCBEYXRhc2V0LFxyXG4gICAgcjogbnVtYmVyIHwgTW9tZW50IHwgRGF0YXNldFxyXG4pID0+IG51bWJlciB8IE1vbWVudCB8IERhdGFzZXQgfCBzdHJpbmc7XHJcblxyXG5pbnRlcmZhY2UgRm5NYXBEYXRhc2V0VG9WYWx1ZSB7XHJcbiAgICBba2V5OiBzdHJpbmddOiBGbkRhdGFzZXRUb1ZhbHVlO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgRm5NYXBEYXRhc2V0VG9EYXRhc2V0IHtcclxuICAgIFtrZXk6IHN0cmluZ106IEZuRGF0YXNldFRvRGF0YXNldDtcclxufVxyXG5cclxuaW50ZXJmYWNlIEZuTWFwQmluYXJ5T3Age1xyXG4gICAgW2tleTogc3RyaW5nXTogRm5CaW5hcnlPcDtcclxufVxyXG5cclxuaW50ZXJmYWNlIEZuTWFwVW5pcnlPcCB7XHJcbiAgICBba2V5OiBzdHJpbmddOiBGblVuaXJ5T3A7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrRGl2aXNvcihkaXZpc29yOiBhbnkpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiY2hlY2tpbmcgZGl2aW9yXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBkaXZpc29yID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgaWYgKGRpdmlzb3IgPT09IDApIHJldHVybiBmYWxzZTtcclxuICAgIH0gZWxzZSBpZiAoZGl2aXNvciBpbnN0YW5jZW9mIERhdGFzZXQpIHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIGRpdmlzb3IuZ2V0VmFsdWVzKCkuc29tZShmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHYgPT09IDA7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tCaW5hcnlPcGVyYW50VHlwZShsZWZ0OiBhbnksIHJpZ2h0OiBhbnkpIHtcclxuICAgIGlmICh0eXBlb2YgbGVmdCA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGxlZnQ7XHJcbiAgICBpZiAodHlwZW9mIHJpZ2h0ID09PSBcInN0cmluZ1wiKSByZXR1cm4gcmlnaHQ7XHJcbiAgICBpZiAoXHJcbiAgICAgICAgdHlwZW9mIGxlZnQgIT09IFwibnVtYmVyXCIgJiZcclxuICAgICAgICAhd2luZG93Lm1vbWVudC5pc01vbWVudChsZWZ0KSAmJlxyXG4gICAgICAgICEobGVmdCBpbnN0YW5jZW9mIERhdGFzZXQpXHJcbiAgICApIHtcclxuICAgICAgICByZXR1cm4gXCJFcnJvcjogaW52YWxpZCBvcGVyYW50IHR5cGVcIjtcclxuICAgIH1cclxuICAgIGlmIChcclxuICAgICAgICB0eXBlb2YgcmlnaHQgIT09IFwibnVtYmVyXCIgJiZcclxuICAgICAgICAhd2luZG93Lm1vbWVudC5pc01vbWVudChyaWdodCkgJiZcclxuICAgICAgICAhKHJpZ2h0IGluc3RhbmNlb2YgRGF0YXNldClcclxuICAgICkge1xyXG4gICAgICAgIHJldHVybiBcIkVycm9yOiBpbnZhbGlkZSBvcGVyYW50IHR5cGVcIjtcclxuICAgIH1cclxuICAgIHJldHVybiBcIlwiO1xyXG59XHJcblxyXG5jb25zdCBmbk1hcERhdGFzZXRUb1ZhbHVlOiBGbk1hcERhdGFzZXRUb1ZhbHVlID0ge1xyXG4gICAgLy8gbWluIHZhbHVlIG9mIGEgZGF0YXNldFxyXG4gICAgbWluOiBmdW5jdGlvbiAoZGF0YXNldCwgcmVuZGVySW5mbykge1xyXG4gICAgICAgIC8vIHJldHVybiBudW1iZXJcclxuICAgICAgICByZXR1cm4gZDMubWluKGRhdGFzZXQuZ2V0VmFsdWVzKCkpO1xyXG4gICAgfSxcclxuICAgIC8vIHRoZSBsYXRlc3QgZGF0ZSB3aXRoIG1pbiB2YWx1ZVxyXG4gICAgbWluRGF0ZTogZnVuY3Rpb24gKGRhdGFzZXQsIHJlbmRlckluZm8pIHtcclxuICAgICAgICAvLyByZXR1cm4gTW9tZW50XHJcbiAgICAgICAgbGV0IG1pbiA9IGQzLm1pbihkYXRhc2V0LmdldFZhbHVlcygpKTtcclxuICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKG1pbikpIHtcclxuICAgICAgICAgICAgbGV0IGFycmF5RGF0YXNldCA9IEFycmF5LmZyb20oZGF0YXNldCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGRhdGFQb2ludCBvZiBhcnJheURhdGFzZXQucmV2ZXJzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YVBvaW50LnZhbHVlICE9PSBudWxsICYmIGRhdGFQb2ludC52YWx1ZSA9PT0gbWluKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFQb2ludC5kYXRlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBcIkVycm9yOiBtaW4gbm90IGZvdW5kXCI7XHJcbiAgICB9LFxyXG4gICAgLy8gbWF4IHZhbHVlIG9mIGEgZGF0YXNldFxyXG4gICAgbWF4OiBmdW5jdGlvbiAoZGF0YXNldCwgcmVuZGVySW5mbykge1xyXG4gICAgICAgIC8vIHJldHVybiBudW1iZXJcclxuICAgICAgICByZXR1cm4gZDMubWF4KGRhdGFzZXQuZ2V0VmFsdWVzKCkpO1xyXG4gICAgfSxcclxuICAgIC8vIHRoZSBsYXRlc3QgZGF0ZSB3aXRoIG1heCB2YWx1ZVxyXG4gICAgbWF4RGF0ZTogZnVuY3Rpb24gKGRhdGFzZXQsIHJlbmRlckluZm8pIHtcclxuICAgICAgICAvLyByZXR1cm4gTW9tZW50XHJcbiAgICAgICAgbGV0IG1heCA9IGQzLm1heChkYXRhc2V0LmdldFZhbHVlcygpKTtcclxuICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKG1heCkpIHtcclxuICAgICAgICAgICAgbGV0IGFycmF5RGF0YXNldCA9IEFycmF5LmZyb20oZGF0YXNldCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGRhdGFQb2ludCBvZiBhcnJheURhdGFzZXQucmV2ZXJzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YVBvaW50LnZhbHVlICE9PSBudWxsICYmIGRhdGFQb2ludC52YWx1ZSA9PT0gbWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFQb2ludC5kYXRlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBcIkVycm9yOiBtYXggbm90IGZvdW5kXCI7XHJcbiAgICB9LFxyXG4gICAgLy8gc3RhcnQgZGF0ZSBvZiBhIGRhdGFzZXRcclxuICAgIC8vIGlmIGRhdGFzZXRJZCBub3QgZm91bmQsIHJldHVybiBvdmVyYWxsIHN0YXJ0RGF0ZVxyXG4gICAgc3RhcnREYXRlOiBmdW5jdGlvbiAoZGF0YXNldCwgcmVuZGVySW5mbykge1xyXG4gICAgICAgIC8vIHJldHVybiBNb21lbnRcclxuICAgICAgICBpZiAoZGF0YXNldCkge1xyXG4gICAgICAgICAgICBsZXQgc3RhcnREYXRlID0gZGF0YXNldC5nZXRTdGFydERhdGUoKTtcclxuICAgICAgICAgICAgaWYgKHN0YXJ0RGF0ZSAmJiBzdGFydERhdGUuaXNWYWxpZCgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhcnREYXRlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZW5kZXJJbmZvLnN0YXJ0RGF0ZTtcclxuICAgIH0sXHJcbiAgICAvLyBlbmQgZGF0ZSBvZiBhIGRhdGFzZXRcclxuICAgIC8vIGlmIGRhdGFzZXRJZCBub3QgZm91bmQsIHJldHVybiBvdmVyYWxsIGVuZERhdGVcclxuICAgIGVuZERhdGU6IGZ1bmN0aW9uIChkYXRhc2V0LCByZW5kZXJJbmZvKSB7XHJcbiAgICAgICAgLy8gcmV0dXJuIE1vbWVudFxyXG4gICAgICAgIGlmIChkYXRhc2V0KSB7XHJcbiAgICAgICAgICAgIGxldCBlbmREYXRlID0gZGF0YXNldC5nZXRFbmREYXRlKCk7XHJcbiAgICAgICAgICAgIGlmIChlbmREYXRlICYmIGVuZERhdGUuaXNWYWxpZCgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZW5kRGF0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVuZGVySW5mby5lbmREYXRlO1xyXG4gICAgfSxcclxuICAgIC8vIHN1bSBvZiBhbGwgdmFsdWVzIGluIGEgZGF0YXNldFxyXG4gICAgc3VtOiBmdW5jdGlvbiAoZGF0YXNldCwgcmVuZGVySW5mbykge1xyXG4gICAgICAgIC8vIHJldHVybiBudW1iZXJcclxuICAgICAgICByZXR1cm4gZDMuc3VtKGRhdGFzZXQuZ2V0VmFsdWVzKCkpO1xyXG4gICAgfSxcclxuICAgIGNvdW50OiBmdW5jdGlvbiAoZGF0YXNldCwgcmVuZGVySW5mbykge1xyXG4gICAgICAgIHJldHVybiBcIkVycm9yOiBkZXByZWNhdGVkIGZ1bmN0aW9uICdjb3VudCdcIjtcclxuICAgIH0sXHJcbiAgICAvLyBudW1iZXIgb2Ygb2NjdXJyZW5jZXMgb2YgYSB0YXJnZXQgaW4gYSBkYXRhc2V0XHJcbiAgICBudW1UYXJnZXRzOiBmdW5jdGlvbiAoZGF0YXNldCwgcmVuZGVySW5mbykge1xyXG4gICAgICAgIC8vIHJldHVybiBudW1iZXJcclxuICAgICAgICByZXR1cm4gZGF0YXNldC5nZXROdW1UYXJnZXRzKCk7XHJcbiAgICB9LFxyXG4gICAgZGF5czogZnVuY3Rpb24gKGRhdGFzZXQsIHJlbmRlckluZm8pIHtcclxuICAgICAgICByZXR1cm4gXCJFcnJvcjogZGVwcmVjYXRlZCBmdW5jdGlvbiAnZGF5cydcIjtcclxuICAgIH0sXHJcbiAgICBudW1EYXlzOiBmdW5jdGlvbiAoZGF0YXNldCwgcmVuZGVySW5mbykge1xyXG4gICAgICAgIC8vIHJldHVybiBudW1iZXJcclxuICAgICAgICByZXR1cm4gZGF0YXNldC5nZXRMZW5ndGgoKTtcclxuICAgIH0sXHJcbiAgICBudW1EYXlzSGF2aW5nRGF0YTogZnVuY3Rpb24gKGRhdGFzZXQsIHJlbmRlckluZm8pIHtcclxuICAgICAgICAvLyByZXR1cm4gbnVtYmVyXHJcbiAgICAgICAgcmV0dXJuIGRhdGFzZXQuZ2V0TGVuZ3RoTm90TnVsbCgpO1xyXG4gICAgfSxcclxuICAgIG1heFN0cmVhazogZnVuY3Rpb24gKGRhdGFzZXQsIHJlbmRlckluZm8pIHtcclxuICAgICAgICAvLyByZXR1cm4gbnVtYmVyXHJcbiAgICAgICAgbGV0IHN0cmVhayA9IDA7XHJcbiAgICAgICAgbGV0IG1heFN0cmVhayA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgZGF0YVBvaW50IG9mIGRhdGFzZXQpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGFQb2ludC52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgc3RyZWFrKys7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdHJlYWsgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzdHJlYWsgPj0gbWF4U3RyZWFrKSB7XHJcbiAgICAgICAgICAgICAgICBtYXhTdHJlYWsgPSBzdHJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1heFN0cmVhaztcclxuICAgIH0sXHJcbiAgICBtYXhTdHJlYWtTdGFydDogZnVuY3Rpb24gKGRhdGFzZXQsIHJlbmRlckluZm8pIHtcclxuICAgICAgICAvLyByZXR1cm4gTW9tZW50XHJcbiAgICAgICAgbGV0IHN0cmVhayA9IDA7XHJcbiAgICAgICAgbGV0IG1heFN0cmVhayA9IDA7XHJcbiAgICAgICAgbGV0IHN0cmVha1N0YXJ0OiBNb21lbnQgPSBudWxsO1xyXG4gICAgICAgIGxldCBtYXhTdHJlYWtTdGFydDogTW9tZW50ID0gbnVsbDtcclxuICAgICAgICBpZiAoZGF0YXNldCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBkYXRhUG9pbnQgb2YgZGF0YXNldCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGFQb2ludC52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHJlYWsgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFrU3RhcnQgPSBkYXRhUG9pbnQuZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFrKys7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmVhayA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RyZWFrID49IG1heFN0cmVhaykge1xyXG4gICAgICAgICAgICAgICAgICAgIG1heFN0cmVhayA9IHN0cmVhaztcclxuICAgICAgICAgICAgICAgICAgICBtYXhTdHJlYWtTdGFydCA9IHN0cmVha1N0YXJ0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtYXhTdHJlYWtTdGFydDtcclxuICAgIH0sXHJcbiAgICBtYXhTdHJlYWtFbmQ6IGZ1bmN0aW9uIChkYXRhc2V0LCByZW5kZXJJbmZvKSB7XHJcbiAgICAgICAgLy8gcmV0dXJuIE1vbWVudFxyXG4gICAgICAgIGxldCBzdHJlYWsgPSAwO1xyXG4gICAgICAgIGxldCBtYXhTdHJlYWsgPSAwO1xyXG4gICAgICAgIGxldCBzdHJlYWtFbmQ6IE1vbWVudCA9IG51bGw7XHJcbiAgICAgICAgbGV0IG1heFN0cmVha0VuZDogTW9tZW50ID0gbnVsbDtcclxuICAgICAgICBpZiAoZGF0YXNldCkge1xyXG4gICAgICAgICAgICBsZXQgYXJyYXlEYXRhc2V0ID0gQXJyYXkuZnJvbShkYXRhc2V0KTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaW5kID0gMDsgaW5kIDwgYXJyYXlEYXRhc2V0Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBwb2ludCA9IGFycmF5RGF0YXNldFtpbmRdO1xyXG4gICAgICAgICAgICAgICAgbGV0IG5leHRQb2ludCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kIDwgYXJyYXlEYXRhc2V0Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0UG9pbnQgPSBhcnJheURhdGFzZXRbaW5kICsgMV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJlYWsrKztcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFBvaW50Py52YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJlYWtFbmQgPSBwb2ludC5kYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFrID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzdHJlYWsgPj0gbWF4U3RyZWFrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc3RyZWFrKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhtYXhTdHJlYWspO1xyXG4gICAgICAgICAgICAgICAgICAgIG1heFN0cmVhayA9IHN0cmVhaztcclxuICAgICAgICAgICAgICAgICAgICBtYXhTdHJlYWtFbmQgPSBzdHJlYWtFbmQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1heFN0cmVha0VuZDtcclxuICAgIH0sXHJcbiAgICBtYXhCcmVha3M6IGZ1bmN0aW9uIChkYXRhc2V0LCByZW5kZXJJbmZvKSB7XHJcbiAgICAgICAgLy8gcmV0dXJuIG51bWJlclxyXG4gICAgICAgIGxldCBicmVha3MgPSAwO1xyXG4gICAgICAgIGxldCBtYXhCcmVha3MgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGRhdGFQb2ludCBvZiBkYXRhc2V0KSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhUG9pbnQudmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrcysrO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnJlYWtzID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYnJlYWtzID4gbWF4QnJlYWtzKSB7XHJcbiAgICAgICAgICAgICAgICBtYXhCcmVha3MgPSBicmVha3M7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1heEJyZWFrcztcclxuICAgIH0sXHJcbiAgICBtYXhCcmVha3NTdGFydDogZnVuY3Rpb24gKGRhdGFzZXQsIHJlbmRlckluZm8pIHtcclxuICAgICAgICAvLyByZXR1cm4gTW9tZW50XHJcbiAgICAgICAgbGV0IGJyZWFrcyA9IDA7XHJcbiAgICAgICAgbGV0IG1heEJyZWFrcyA9IDA7XHJcbiAgICAgICAgbGV0IGJyZWFrc1N0YXJ0OiBNb21lbnQgPSBudWxsO1xyXG4gICAgICAgIGxldCBtYXhCcmVha3NTdGFydDogTW9tZW50ID0gbnVsbDtcclxuICAgICAgICBpZiAoZGF0YXNldCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBkYXRhUG9pbnQgb2YgZGF0YXNldCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGFQb2ludC52YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChicmVha3MgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtzU3RhcnQgPSBkYXRhUG9pbnQuZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtzKys7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrcyA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYnJlYWtzID49IG1heEJyZWFrcykge1xyXG4gICAgICAgICAgICAgICAgICAgIG1heEJyZWFrcyA9IGJyZWFrcztcclxuICAgICAgICAgICAgICAgICAgICBtYXhCcmVha3NTdGFydCA9IGJyZWFrc1N0YXJ0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtYXhCcmVha3NTdGFydDtcclxuICAgIH0sXHJcbiAgICBtYXhCcmVha3NFbmQ6IGZ1bmN0aW9uIChkYXRhc2V0LCByZW5kZXJJbmZvKSB7XHJcbiAgICAgICAgLy8gcmV0dXJuIE1vbWVudFxyXG4gICAgICAgIGxldCBicmVha3MgPSAwO1xyXG4gICAgICAgIGxldCBtYXhCcmVha3MgPSAwO1xyXG4gICAgICAgIGxldCBicmVha3NFbmQ6IE1vbWVudCA9IG51bGw7XHJcbiAgICAgICAgbGV0IG1heEJyZWFrc0VuZDogTW9tZW50ID0gbnVsbDtcclxuICAgICAgICBpZiAoZGF0YXNldCkge1xyXG4gICAgICAgICAgICBsZXQgYXJyYXlEYXRhc2V0ID0gQXJyYXkuZnJvbShkYXRhc2V0KTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaW5kID0gMDsgaW5kIDwgYXJyYXlEYXRhc2V0Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBwb2ludCA9IGFycmF5RGF0YXNldFtpbmRdO1xyXG4gICAgICAgICAgICAgICAgbGV0IG5leHRQb2ludCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kIDwgYXJyYXlEYXRhc2V0Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0UG9pbnQgPSBhcnJheURhdGFzZXRbaW5kICsgMV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQudmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVha3MrKztcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFBvaW50Py52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha3NFbmQgPSBwb2ludC5kYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtzID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChicmVha3MgPj0gbWF4QnJlYWtzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4QnJlYWtzID0gYnJlYWtzO1xyXG4gICAgICAgICAgICAgICAgICAgIG1heEJyZWFrc0VuZCA9IGJyZWFrc0VuZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWF4QnJlYWtzRW5kO1xyXG4gICAgfSxcclxuICAgIGxhc3RTdHJlYWs6IGZ1bmN0aW9uIChkYXRhc2V0LCByZW5kZXJJbmZvKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiRXJyb3I6IGRlcHJlY2F0ZWQgZnVuY3Rpb24gJ2xhc3RTdHJlYWsnXCI7XHJcbiAgICB9LFxyXG4gICAgY3VycmVudFN0cmVhazogZnVuY3Rpb24gKGRhdGFzZXQsIHJlbmRlckluZm8pIHtcclxuICAgICAgICAvLyByZXR1cm4gbnVtYmVyXHJcbiAgICAgICAgbGV0IGN1cnJlbnRTdHJlYWsgPSAwO1xyXG4gICAgICAgIGlmIChkYXRhc2V0KSB7XHJcbiAgICAgICAgICAgIGxldCBhcnJheURhdGFzZXQgPSBBcnJheS5mcm9tKGRhdGFzZXQpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmQgPSBhcnJheURhdGFzZXQubGVuZ3RoIC0gMTsgaW5kID49IDA7IGluZC0tKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcG9pbnQgPSBhcnJheURhdGFzZXRbaW5kXTtcclxuICAgICAgICAgICAgICAgIGlmIChwb2ludC52YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3RyZWFrKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRTdHJlYWs7XHJcbiAgICB9LFxyXG4gICAgY3VycmVudFN0cmVha1N0YXJ0OiBmdW5jdGlvbiAoZGF0YXNldCwgcmVuZGVySW5mbykge1xyXG4gICAgICAgIC8vIHJldHVybiBNb21lbnRcclxuICAgICAgICBsZXQgY3VycmVudFN0cmVhayA9IDA7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRTdHJlYWtTdGFydDogTW9tZW50ID0gbnVsbDtcclxuICAgICAgICBpZiAoZGF0YXNldCkge1xyXG4gICAgICAgICAgICBsZXQgYXJyYXlEYXRhc2V0ID0gQXJyYXkuZnJvbShkYXRhc2V0KTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaW5kID0gYXJyYXlEYXRhc2V0Lmxlbmd0aCAtIDE7IGluZCA+PSAwOyBpbmQtLSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHBvaW50ID0gYXJyYXlEYXRhc2V0W2luZF07XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kIDwgYXJyYXlEYXRhc2V0Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3RyZWFrU3RhcnQgPSBhcnJheURhdGFzZXRbaW5kICsgMV0uZGF0ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChwb2ludC52YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3RyZWFrKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjdXJyZW50U3RyZWFrU3RhcnQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiRXJyb3I6IGFic2Vuc2VcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRTdHJlYWtTdGFydDtcclxuICAgIH0sXHJcbiAgICBjdXJyZW50U3RyZWFrRW5kOiBmdW5jdGlvbiAoZGF0YXNldCwgcmVuZGVySW5mbykge1xyXG4gICAgICAgIC8vIHJldHVybiBNb21lbnRcclxuICAgICAgICBsZXQgY3VycmVudFN0cmVhayA9IDA7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRTdHJlYWtFbmQ6IE1vbWVudCA9IG51bGw7XHJcbiAgICAgICAgaWYgKGRhdGFzZXQpIHtcclxuICAgICAgICAgICAgbGV0IGFycmF5RGF0YXNldCA9IEFycmF5LmZyb20oZGF0YXNldCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZCA9IGFycmF5RGF0YXNldC5sZW5ndGggLSAxOyBpbmQgPj0gMDsgaW5kLS0pIHtcclxuICAgICAgICAgICAgICAgIGxldCBwb2ludCA9IGFycmF5RGF0YXNldFtpbmRdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBvaW50LnZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50U3RyZWFrID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdHJlYWtFbmQgPSBwb2ludC5kYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3RyZWFrKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjdXJyZW50U3RyZWFrRW5kID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkVycm9yOiBhYnNlbnNlXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjdXJyZW50U3RyZWFrRW5kO1xyXG4gICAgfSxcclxuICAgIGN1cnJlbnRCcmVha3M6IGZ1bmN0aW9uIChkYXRhc2V0LCByZW5kZXJJbmZvKSB7XHJcbiAgICAgICAgLy8gcmV0dXJuIG51bWJlclxyXG4gICAgICAgIGxldCBjdXJyZW50QnJlYWtzID0gMDtcclxuICAgICAgICBpZiAoZGF0YXNldCkge1xyXG4gICAgICAgICAgICBsZXQgYXJyYXlEYXRhc2V0ID0gQXJyYXkuZnJvbShkYXRhc2V0KTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaW5kID0gYXJyYXlEYXRhc2V0Lmxlbmd0aCAtIDE7IGluZCA+PSAwOyBpbmQtLSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHBvaW50ID0gYXJyYXlEYXRhc2V0W2luZF07XHJcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQudmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50QnJlYWtzKys7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjdXJyZW50QnJlYWtzO1xyXG4gICAgfSxcclxuICAgIGN1cnJlbnRCcmVha3NTdGFydDogZnVuY3Rpb24gKGRhdGFzZXQsIHJlbmRlckluZm8pIHtcclxuICAgICAgICAvLyByZXR1cm4gTW9tZW50XHJcbiAgICAgICAgbGV0IGN1cnJlbnRCcmVha3MgPSAwO1xyXG4gICAgICAgIGxldCBjdXJyZW50QnJlYWtzU3RhcnQ6IE1vbWVudCA9IG51bGw7XHJcbiAgICAgICAgaWYgKGRhdGFzZXQpIHtcclxuICAgICAgICAgICAgbGV0IGFycmF5RGF0YXNldCA9IEFycmF5LmZyb20oZGF0YXNldCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZCA9IGFycmF5RGF0YXNldC5sZW5ndGggLSAxOyBpbmQgPj0gMDsgaW5kLS0pIHtcclxuICAgICAgICAgICAgICAgIGxldCBwb2ludCA9IGFycmF5RGF0YXNldFtpbmRdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZCA8IGFycmF5RGF0YXNldC5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEJyZWFrc1N0YXJ0ID0gYXJyYXlEYXRhc2V0W2luZCArIDFdLmRhdGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQudmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50QnJlYWtzKys7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY3VycmVudEJyZWFrc1N0YXJ0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkVycm9yOiBhYnNlbnNlXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjdXJyZW50QnJlYWtzU3RhcnQ7XHJcbiAgICB9LFxyXG4gICAgY3VycmVudEJyZWFrc0VuZDogZnVuY3Rpb24gKGRhdGFzZXQsIHJlbmRlckluZm8pIHtcclxuICAgICAgICAvLyByZXR1cm4gTW9tZW50XHJcbiAgICAgICAgbGV0IGN1cnJlbnRCcmVha3MgPSAwO1xyXG4gICAgICAgIGxldCBjdXJyZW50QnJlYWtzRW5kOiBNb21lbnQgPSBudWxsO1xyXG4gICAgICAgIGlmIChkYXRhc2V0KSB7XHJcbiAgICAgICAgICAgIGxldCBhcnJheURhdGFzZXQgPSBBcnJheS5mcm9tKGRhdGFzZXQpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmQgPSBhcnJheURhdGFzZXQubGVuZ3RoIC0gMTsgaW5kID49IDA7IGluZC0tKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcG9pbnQgPSBhcnJheURhdGFzZXRbaW5kXTtcclxuICAgICAgICAgICAgICAgIGlmIChwb2ludC52YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50QnJlYWtzID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRCcmVha3NFbmQgPSBwb2ludC5kYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50QnJlYWtzKys7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY3VycmVudEJyZWFrc0VuZCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJFcnJvcjogYWJzZW5zZVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY3VycmVudEJyZWFrc0VuZDtcclxuICAgIH0sXHJcbiAgICBhdmVyYWdlOiBmdW5jdGlvbiAoZGF0YXNldCwgcmVuZGVySW5mbykge1xyXG4gICAgICAgIC8vIHJldHVybiBudW1iZXJcclxuICAgICAgICBsZXQgY291bnROb3ROdWxsID0gZGF0YXNldC5nZXRMZW5ndGhOb3ROdWxsKCk7XHJcbiAgICAgICAgaWYgKCFjaGVja0Rpdmlzb3IoY291bnROb3ROdWxsKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJFcnJvcjogZGl2aWRlIGJ5IHplcm8gaW4gZXhwcmVzc2lvblwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgc3VtID0gZDMuc3VtKGRhdGFzZXQuZ2V0VmFsdWVzKCkpO1xyXG4gICAgICAgIHJldHVybiBzdW0gLyBjb3VudE5vdE51bGw7XHJcbiAgICB9LFxyXG4gICAgbWVkaWFuOiBmdW5jdGlvbiAoZGF0YXNldCwgcmVuZGVySW5mbykge1xyXG4gICAgICAgIC8vIHJldHVybiBudW1iZXJcclxuICAgICAgICByZXR1cm4gZDMubWVkaWFuKGRhdGFzZXQuZ2V0VmFsdWVzKCkpO1xyXG4gICAgfSxcclxuICAgIHZhcmlhbmNlOiBmdW5jdGlvbiAoZGF0YXNldCwgcmVuZGVySW5mbykge1xyXG4gICAgICAgIC8vIHJldHVybiBudW1iZXJcclxuICAgICAgICByZXR1cm4gZDMudmFyaWFuY2UoZGF0YXNldC5nZXRWYWx1ZXMoKSk7XHJcbiAgICB9LFxyXG59O1xyXG5cclxuY29uc3QgZm5NYXBVbmlyeU9wOiBGbk1hcFVuaXJ5T3AgPSB7XHJcbiAgICBcIi1cIjogZnVuY3Rpb24gKHUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xICogdTtcclxuICAgICAgICB9IGVsc2UgaWYgKHUgaW5zdGFuY2VvZiBEYXRhc2V0KSB7XHJcbiAgICAgICAgICAgIGxldCB0bXBEYXRhc2V0ID0gdS5jbG9uZVRvVG1wRGF0YXNldCgpO1xyXG4gICAgICAgICAgICB0bXBEYXRhc2V0LmdldFZhbHVlcygpLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpbmRleCwgYXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcnJheVtpbmRleF0gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRleF0gPSAtMSAqIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdG1wRGF0YXNldC5yZWNhbGN1bGF0ZU1pbk1heCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdG1wRGF0YXNldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFwiRXJyb3I6IHVua25vd24gb3BlcmF0aW9uIGZvciAnLSdcIjtcclxuICAgIH0sXHJcbiAgICBcIitcIjogZnVuY3Rpb24gKHUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHU7XHJcbiAgICAgICAgfSBlbHNlIGlmICh1IGluc3RhbmNlb2YgRGF0YXNldCkge1xyXG4gICAgICAgICAgICBsZXQgdG1wRGF0YXNldCA9IHUuY2xvbmVUb1RtcERhdGFzZXQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRtcERhdGFzZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBcIkVycm9yOiB1bmtub3duIG9wZXJhdGlvbiBmb3IgJysnXCI7XHJcbiAgICB9LFxyXG59O1xyXG5cclxuY29uc3QgZm5NYXBCaW5hcnlPcDogRm5NYXBCaW5hcnlPcCA9IHtcclxuICAgIFwiK1wiOiBmdW5jdGlvbiAobCwgcikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgbCA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgciA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAvLyByZXR1cm4gbnVtYmVyXHJcbiAgICAgICAgICAgIHJldHVybiBsICsgcjtcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsID09PSBcIm51bWJlclwiICYmIHIgaW5zdGFuY2VvZiBEYXRhc2V0KSB7XHJcbiAgICAgICAgICAgIC8vIHJldHVybiBEYXRhc2V0XHJcbiAgICAgICAgICAgIGxldCB0bXBEYXRhc2V0ID0gci5jbG9uZVRvVG1wRGF0YXNldCgpO1xyXG4gICAgICAgICAgICB0bXBEYXRhc2V0LmdldFZhbHVlcygpLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpbmRleCwgYXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcnJheVtpbmRleF0gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRleF0gPSBsICsgdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycmF5W2luZGV4XSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0bXBEYXRhc2V0LnJlY2FsY3VsYXRlTWluTWF4KCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0bXBEYXRhc2V0O1xyXG4gICAgICAgIH0gZWxzZSBpZiAobCBpbnN0YW5jZW9mIERhdGFzZXQgJiYgdHlwZW9mIHIgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgLy8gcmV0dXJuIERhdGFzZXRcclxuICAgICAgICAgICAgbGV0IHRtcERhdGFzZXQgPSBsLmNsb25lVG9UbXBEYXRhc2V0KCk7XHJcbiAgICAgICAgICAgIHRtcERhdGFzZXQuZ2V0VmFsdWVzKCkuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBhcnJheSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFycmF5W2luZGV4XSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycmF5W2luZGV4XSA9IHZhbHVlICsgcjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kZXhdID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRtcERhdGFzZXQucmVjYWxjdWxhdGVNaW5NYXgoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRtcERhdGFzZXQ7XHJcbiAgICAgICAgfSBlbHNlIGlmIChsIGluc3RhbmNlb2YgRGF0YXNldCAmJiByIGluc3RhbmNlb2YgRGF0YXNldCkge1xyXG4gICAgICAgICAgICAvLyByZXR1cm4gRGF0YXNldFxyXG4gICAgICAgICAgICBsZXQgdG1wRGF0YXNldCA9IGwuY2xvbmVUb1RtcERhdGFzZXQoKTtcclxuICAgICAgICAgICAgdG1wRGF0YXNldC5nZXRWYWx1ZXMoKS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIGFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXJyYXlbaW5kZXhdICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kZXhdID0gdmFsdWUgKyByLmdldFZhbHVlcygpW2luZGV4XTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kZXhdID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRtcERhdGFzZXQucmVjYWxjdWxhdGVNaW5NYXgoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRtcERhdGFzZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBcIkVycm9yOiB1bmtub3duIG9wZXJhdGlvbiBmb3IgJysnXCI7XHJcbiAgICB9LFxyXG4gICAgXCItXCI6IGZ1bmN0aW9uIChsLCByKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBsID09PSBcIm51bWJlclwiICYmIHR5cGVvZiByID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIC8vIHJldHVybiBudW1iZXJcclxuICAgICAgICAgICAgcmV0dXJuIGwgLSByO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGwgPT09IFwibnVtYmVyXCIgJiYgciBpbnN0YW5jZW9mIERhdGFzZXQpIHtcclxuICAgICAgICAgICAgLy8gcmV0dXJuIERhdGFzZXRcclxuICAgICAgICAgICAgbGV0IHRtcERhdGFzZXQgPSByLmNsb25lVG9UbXBEYXRhc2V0KCk7XHJcbiAgICAgICAgICAgIHRtcERhdGFzZXQuZ2V0VmFsdWVzKCkuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBhcnJheSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFycmF5W2luZGV4XSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycmF5W2luZGV4XSA9IGwgLSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kZXhdID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRtcERhdGFzZXQucmVjYWxjdWxhdGVNaW5NYXgoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRtcERhdGFzZXQ7XHJcbiAgICAgICAgfSBlbHNlIGlmIChsIGluc3RhbmNlb2YgRGF0YXNldCAmJiB0eXBlb2YgciA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAvLyByZXR1cm4gRGF0YXNldFxyXG4gICAgICAgICAgICBsZXQgdG1wRGF0YXNldCA9IGwuY2xvbmVUb1RtcERhdGFzZXQoKTtcclxuICAgICAgICAgICAgdG1wRGF0YXNldC5nZXRWYWx1ZXMoKS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIGFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXJyYXlbaW5kZXhdICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kZXhdID0gdmFsdWUgLSByO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRleF0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRtcERhdGFzZXQ7XHJcbiAgICAgICAgfSBlbHNlIGlmIChsIGluc3RhbmNlb2YgRGF0YXNldCAmJiByIGluc3RhbmNlb2YgRGF0YXNldCkge1xyXG4gICAgICAgICAgICAvLyByZXR1cm4gRGF0YXNldFxyXG4gICAgICAgICAgICBsZXQgdG1wRGF0YXNldCA9IGwuY2xvbmVUb1RtcERhdGFzZXQoKTtcclxuICAgICAgICAgICAgdG1wRGF0YXNldC5nZXRWYWx1ZXMoKS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIGFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXJyYXlbaW5kZXhdICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kZXhdID0gdmFsdWUgLSByLmdldFZhbHVlcygpW2luZGV4XTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kZXhdID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRtcERhdGFzZXQucmVjYWxjdWxhdGVNaW5NYXgoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRtcERhdGFzZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBcIkVycm9yOiB1bmtub3duIG9wZXJhdGlvbiBmb3IgJy0nXCI7XHJcbiAgICB9LFxyXG4gICAgXCIqXCI6IGZ1bmN0aW9uIChsLCByKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBsID09PSBcIm51bWJlclwiICYmIHR5cGVvZiByID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIC8vIHJldHVybiBudW1iZXJcclxuICAgICAgICAgICAgcmV0dXJuIGwgKiByO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGwgPT09IFwibnVtYmVyXCIgJiYgciBpbnN0YW5jZW9mIERhdGFzZXQpIHtcclxuICAgICAgICAgICAgLy8gcmV0dXJuIERhdGFzZXRcclxuICAgICAgICAgICAgbGV0IHRtcERhdGFzZXQgPSByLmNsb25lVG9UbXBEYXRhc2V0KCk7XHJcbiAgICAgICAgICAgIHRtcERhdGFzZXQuZ2V0VmFsdWVzKCkuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBhcnJheSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFycmF5W2luZGV4XSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycmF5W2luZGV4XSA9IGwgKiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kZXhdID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRtcERhdGFzZXQucmVjYWxjdWxhdGVNaW5NYXgoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRtcERhdGFzZXQ7XHJcbiAgICAgICAgfSBlbHNlIGlmIChsIGluc3RhbmNlb2YgRGF0YXNldCAmJiB0eXBlb2YgciA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAvLyByZXR1cm4gRGF0YXNldFxyXG4gICAgICAgICAgICBsZXQgdG1wRGF0YXNldCA9IGwuY2xvbmVUb1RtcERhdGFzZXQoKTtcclxuICAgICAgICAgICAgdG1wRGF0YXNldC5nZXRWYWx1ZXMoKS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIGFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXJyYXlbaW5kZXhdICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kZXhdID0gdmFsdWUgKiByO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRleF0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdG1wRGF0YXNldC5yZWNhbGN1bGF0ZU1pbk1heCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdG1wRGF0YXNldDtcclxuICAgICAgICB9IGVsc2UgaWYgKGwgaW5zdGFuY2VvZiBEYXRhc2V0ICYmIHIgaW5zdGFuY2VvZiBEYXRhc2V0KSB7XHJcbiAgICAgICAgICAgIC8vIHJldHVybiBEYXRhc2V0XHJcbiAgICAgICAgICAgIGxldCB0bXBEYXRhc2V0ID0gbC5jbG9uZVRvVG1wRGF0YXNldCgpO1xyXG4gICAgICAgICAgICB0bXBEYXRhc2V0LmdldFZhbHVlcygpLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpbmRleCwgYXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcnJheVtpbmRleF0gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRleF0gPSB2YWx1ZSAqIHIuZ2V0VmFsdWVzKClbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRleF0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdG1wRGF0YXNldC5yZWNhbGN1bGF0ZU1pbk1heCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdG1wRGF0YXNldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFwiRXJyb3I6IHVua25vd24gb3BlcmF0aW9uIGZvciAnKidcIjtcclxuICAgIH0sXHJcbiAgICBcIi9cIjogZnVuY3Rpb24gKGwsIHIpIHtcclxuICAgICAgICBpZiAoIWNoZWNrRGl2aXNvcihyKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJFcnJvcjogZGl2aWRlIGJ5IHplcm8gaW4gZXhwcmVzc2lvblwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIGwgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIHIgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgLy8gcmV0dXJuIG51bWJlclxyXG4gICAgICAgICAgICByZXR1cm4gbCAvIHI7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbCA9PT0gXCJudW1iZXJcIiAmJiByIGluc3RhbmNlb2YgRGF0YXNldCkge1xyXG4gICAgICAgICAgICAvLyByZXR1cm4gRGF0YXNldFxyXG4gICAgICAgICAgICBsZXQgdG1wRGF0YXNldCA9IHIuY2xvbmVUb1RtcERhdGFzZXQoKTtcclxuICAgICAgICAgICAgdG1wRGF0YXNldC5nZXRWYWx1ZXMoKS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIGFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXJyYXlbaW5kZXhdICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kZXhdID0gbCAvIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRleF0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdG1wRGF0YXNldC5yZWNhbGN1bGF0ZU1pbk1heCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdG1wRGF0YXNldDtcclxuICAgICAgICB9IGVsc2UgaWYgKGwgaW5zdGFuY2VvZiBEYXRhc2V0ICYmIHR5cGVvZiByID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIC8vIHJldHVybiBEYXRhc2V0XHJcbiAgICAgICAgICAgIGxldCB0bXBEYXRhc2V0ID0gbC5jbG9uZVRvVG1wRGF0YXNldCgpO1xyXG4gICAgICAgICAgICB0bXBEYXRhc2V0LmdldFZhbHVlcygpLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpbmRleCwgYXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcnJheVtpbmRleF0gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRleF0gPSB2YWx1ZSAvIHI7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycmF5W2luZGV4XSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0bXBEYXRhc2V0LnJlY2FsY3VsYXRlTWluTWF4KCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0bXBEYXRhc2V0O1xyXG4gICAgICAgIH0gZWxzZSBpZiAobCBpbnN0YW5jZW9mIERhdGFzZXQgJiYgciBpbnN0YW5jZW9mIERhdGFzZXQpIHtcclxuICAgICAgICAgICAgLy8gcmV0dXJuIERhdGFzZXRcclxuICAgICAgICAgICAgbGV0IHRtcERhdGFzZXQgPSBsLmNsb25lVG9UbXBEYXRhc2V0KCk7XHJcbiAgICAgICAgICAgIHRtcERhdGFzZXQuZ2V0VmFsdWVzKCkuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBhcnJheSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFycmF5W2luZGV4XSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycmF5W2luZGV4XSA9IHZhbHVlIC8gci5nZXRWYWx1ZXMoKVtpbmRleF07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycmF5W2luZGV4XSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0bXBEYXRhc2V0LnJlY2FsY3VsYXRlTWluTWF4KCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0bXBEYXRhc2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gXCJFcnJvcjogdW5rbm93biBvcGVyYXRpb24gZm9yICcvJ1wiO1xyXG4gICAgfSxcclxuICAgIFwiJVwiOiBmdW5jdGlvbiAobCwgcikge1xyXG4gICAgICAgIGlmICghY2hlY2tEaXZpc29yKHIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkVycm9yOiBkaXZpZGUgYnkgemVybyBpbiBleHByZXNzaW9uXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgbCA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgciA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAvLyByZXR1cm4gbnVtYmVyXHJcbiAgICAgICAgICAgIHJldHVybiBsICUgcjtcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsID09PSBcIm51bWJlclwiICYmIHIgaW5zdGFuY2VvZiBEYXRhc2V0KSB7XHJcbiAgICAgICAgICAgIC8vIHJldHVybiBEYXRhc2V0XHJcbiAgICAgICAgICAgIGxldCB0bXBEYXRhc2V0ID0gci5jbG9uZVRvVG1wRGF0YXNldCgpO1xyXG4gICAgICAgICAgICB0bXBEYXRhc2V0LmdldFZhbHVlcygpLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpbmRleCwgYXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcnJheVtpbmRleF0gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRleF0gPSBsICUgdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycmF5W2luZGV4XSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0bXBEYXRhc2V0LnJlY2FsY3VsYXRlTWluTWF4KCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0bXBEYXRhc2V0O1xyXG4gICAgICAgIH0gZWxzZSBpZiAobCBpbnN0YW5jZW9mIERhdGFzZXQgJiYgdHlwZW9mIHIgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgLy8gcmV0dXJuIERhdGFzZXRcclxuICAgICAgICAgICAgbGV0IHRtcERhdGFzZXQgPSBsLmNsb25lVG9UbXBEYXRhc2V0KCk7XHJcbiAgICAgICAgICAgIHRtcERhdGFzZXQuZ2V0VmFsdWVzKCkuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBhcnJheSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFycmF5W2luZGV4XSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycmF5W2luZGV4XSA9IHZhbHVlICUgcjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kZXhdID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRtcERhdGFzZXQucmVjYWxjdWxhdGVNaW5NYXgoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRtcERhdGFzZXQ7XHJcbiAgICAgICAgfSBlbHNlIGlmIChsIGluc3RhbmNlb2YgRGF0YXNldCAmJiByIGluc3RhbmNlb2YgRGF0YXNldCkge1xyXG4gICAgICAgICAgICAvLyByZXR1cm4gRGF0YXNldFxyXG4gICAgICAgICAgICBsZXQgdG1wRGF0YXNldCA9IGwuY2xvbmVUb1RtcERhdGFzZXQoKTtcclxuICAgICAgICAgICAgdG1wRGF0YXNldC5nZXRWYWx1ZXMoKS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIGFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXJyYXlbaW5kZXhdICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kZXhdID0gdmFsdWUgJSByLmdldFZhbHVlcygpW2luZGV4XTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kZXhdID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRtcERhdGFzZXQucmVjYWxjdWxhdGVNaW5NYXgoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRtcERhdGFzZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBcIkVycm9yOiB1bmtub3duIG9wZXJhdGlvbiBmb3IgJyUnXCI7XHJcbiAgICB9LFxyXG59O1xyXG5cclxuY29uc3QgZm5NYXBEYXRhc2V0VG9EYXRhc2V0OiBGbk1hcERhdGFzZXRUb0RhdGFzZXQgPSB7XHJcbiAgICAvLyBtaW4gdmFsdWUgb2YgYSBkYXRhc2V0XHJcbiAgICBub3JtYWxpemU6IGZ1bmN0aW9uIChkYXRhc2V0LCBhcmdzLCByZW5kZXJJbmZvKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJub3JtYWxpemVcIik7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coZGF0YXNldCk7XHJcbiAgICAgICAgbGV0IHlNaW4gPSBkYXRhc2V0LmdldFlNaW4oKTtcclxuICAgICAgICBsZXQgeU1heCA9IGRhdGFzZXQuZ2V0WU1heCgpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGB5TWluL3lNYXg6ICR7eU1pbn0vJHt5TWF4fWApO1xyXG4gICAgICAgIGlmICh5TWluICE9PSBudWxsICYmIHlNYXggIT09IG51bGwgJiYgeU1heCA+IHlNaW4pIHtcclxuICAgICAgICAgICAgbGV0IG5vcm1hbGl6ZWQgPSBkYXRhc2V0LmNsb25lVG9UbXBEYXRhc2V0KCk7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWQuZ2V0VmFsdWVzKCkuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBhcnJheSkge1xyXG4gICAgICAgICAgICAgICAgYXJyYXlbaW5kZXhdID0gKHZhbHVlIC0geU1pbikgLyAoeU1heCAtIHlNaW4pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbm9ybWFsaXplZC5yZWNhbGN1bGF0ZU1pbk1heCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gbm9ybWFsaXplZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFwiRXJyb3I6IGludmFsaWQgZGF0YSByYW5nZSBmb3IgZnVuY3Rpb24gJ25vcm1hbGl6ZSdcIjtcclxuICAgIH0sXHJcbiAgICBzZXRNaXNzaW5nVmFsdWVzOiBmdW5jdGlvbiAoZGF0YXNldCwgYXJncywgcmVuZGVySW5mbykge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwic2V0TWlzc2luZ1ZhbHVlc1wiKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhkYXRhc2V0KTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhhcmdzKTtcclxuICAgICAgICBpZiAoYXJncyAmJiBhcmdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgbGV0IG1pc3NpbmdWYWx1ZSA9IGFyZ3NbMF07XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG1pc3NpbmdWYWx1ZSk7XHJcbiAgICAgICAgICAgIGxldCBuZXdEYXRhc2V0ID0gZGF0YXNldC5jbG9uZVRvVG1wRGF0YXNldCgpO1xyXG4gICAgICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKG1pc3NpbmdWYWx1ZSkgJiYgIU51bWJlci5pc05hTihtaXNzaW5nVmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdEYXRhc2V0LmdldFZhbHVlcygpLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpbmRleCwgYXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kZXhdID0gbWlzc2luZ1ZhbHVlIGFzIG51bWJlcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIG5ld0RhdGFzZXQucmVjYWxjdWxhdGVNaW5NYXgoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXdEYXRhc2V0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBcIkVycm9yOiBpbnZhbGlkIGFyZ3VtZW50cyBmb3IgZnVuY3Rpb24gJ3NldE1pc3NpbmdWYWx1ZXMnXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBcIkVycm9yOiBpbnZhbGlkIGFyZ3VtZW50cyBmb3IgZnVuY3Rpb24gJ3NldE1pc3NpbmdWYWx1ZXNcIjtcclxuICAgIH0sXHJcbn07XHJcblxyXG5mdW5jdGlvbiBnZXREYXRhc2V0QnlJZChkYXRhc2V0SWQ6IG51bWJlciwgcmVuZGVySW5mbzogUmVuZGVySW5mbykge1xyXG4gICAgcmV0dXJuIHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoZGF0YXNldElkKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZXZhbHVhdGVBcnJheShhcnI6IGFueSwgcmVuZGVySW5mbzogUmVuZGVySW5mbykge1xyXG4gICAgcmV0dXJuIGFyci5tYXAoZnVuY3Rpb24gKGV4cHI6IGpzZXAuRXhwcmVzc2lvbikge1xyXG4gICAgICAgIHJldHVybiBldmFsdWF0ZShleHByLCByZW5kZXJJbmZvKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBldmFsdWF0ZShleHByOiBqc2VwLkV4cHJlc3Npb24sIHJlbmRlckluZm86IFJlbmRlckluZm8pOiBhbnkge1xyXG4gICAgLy8gY29uc29sZS5sb2coZXhwcik7XHJcblxyXG4gICAgc3dpdGNoIChleHByLnR5cGUpIHtcclxuICAgICAgICBjYXNlIFwiTGl0ZXJhbFwiOlxyXG4gICAgICAgICAgICBsZXQgbGl0ZXJhbEV4cHIgPSBleHByIGFzIGpzZXAuTGl0ZXJhbDtcclxuICAgICAgICAgICAgcmV0dXJuIGxpdGVyYWxFeHByLnZhbHVlOyAvLyBzdHJpbmcsIG51bWJlciwgYm9vbGVhblxyXG5cclxuICAgICAgICBjYXNlIFwiSWRlbnRpZmllclwiOlxyXG4gICAgICAgICAgICBsZXQgaWRlbnRpZmllckV4cHIgPSBleHByIGFzIGpzZXAuSWRlbnRpZmllcjtcclxuICAgICAgICAgICAgbGV0IGlkZW50aWZpZXJOYW1lID0gaWRlbnRpZmllckV4cHIubmFtZTtcclxuICAgICAgICAgICAgaWYgKGlkZW50aWZpZXJOYW1lIGluIGZuTWFwRGF0YXNldFRvVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBgRXJyb3I6IGRlcHJlY2F0ZWQgdGVtcGxhdGUgdmFyaWFibGUgJyR7aWRlbnRpZmllck5hbWV9JywgdXNlICcke2lkZW50aWZpZXJOYW1lfSgpJyBpbnN0ZWFkYDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpZGVudGlmaWVyTmFtZSBpbiBmbk1hcERhdGFzZXRUb0RhdGFzZXQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBgRXJyb3I6IGRlcHJlY2F0ZWQgdGVtcGxhdGUgdmFyaWFibGUgJyR7aWRlbnRpZmllck5hbWV9JywgdXNlICcke2lkZW50aWZpZXJOYW1lfSgpJyBpbnN0ZWFkYDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYEVycm9yOiB1bmtub3duIGZ1bmN0aW9uIG5hbWUgJyR7aWRlbnRpZmllck5hbWV9J2A7XHJcblxyXG4gICAgICAgIGNhc2UgXCJVbmFyeUV4cHJlc3Npb25cIjpcclxuICAgICAgICAgICAgbGV0IHVuaXJ5RXhwciA9IGV4cHIgYXMganNlcC5VbmFyeUV4cHJlc3Npb247XHJcbiAgICAgICAgICAgIGxldCByZXRVbmlyeUFyZyA9IGV2YWx1YXRlKHVuaXJ5RXhwci5hcmd1bWVudCwgcmVuZGVySW5mbyk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmV0VW5pcnlBcmcgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXRVbmlyeUFyZztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZm5NYXBVbmlyeU9wW3VuaXJ5RXhwci5vcGVyYXRvcl0ocmV0VW5pcnlBcmcpO1xyXG5cclxuICAgICAgICBjYXNlIFwiQmluYXJ5RXhwcmVzc2lvblwiOlxyXG4gICAgICAgICAgICBsZXQgYmluYXJ5RXhwciA9IGV4cHIgYXMganNlcC5CaW5hcnlFeHByZXNzaW9uO1xyXG4gICAgICAgICAgICBsZXQgbGVmdFZhbHVlID0gZXZhbHVhdGUoYmluYXJ5RXhwci5sZWZ0LCByZW5kZXJJbmZvKTtcclxuICAgICAgICAgICAgbGV0IHJpZ2h0VmFsdWUgPSBldmFsdWF0ZShiaW5hcnlFeHByLnJpZ2h0LCByZW5kZXJJbmZvKTtcclxuICAgICAgICAgICAgbGV0IHJldENoZWNrID0gY2hlY2tCaW5hcnlPcGVyYW50VHlwZShsZWZ0VmFsdWUsIHJpZ2h0VmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHJldENoZWNrID09PSBcInN0cmluZ1wiICYmIHJldENoZWNrLnN0YXJ0c1dpdGgoXCJFcnJvcjpcIikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXRDaGVjaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZm5NYXBCaW5hcnlPcFtiaW5hcnlFeHByLm9wZXJhdG9yXShsZWZ0VmFsdWUsIHJpZ2h0VmFsdWUpO1xyXG5cclxuICAgICAgICBjYXNlIFwiQ2FsbEV4cHJlc3Npb25cIjpcclxuICAgICAgICAgICAgbGV0IGNhbGxFeHByID0gZXhwciBhcyBqc2VwLkNhbGxFeHByZXNzaW9uO1xyXG5cclxuICAgICAgICAgICAgbGV0IGNhbGxlZUlkZW50aWZpZXIgPSBjYWxsRXhwci5jYWxsZWUgYXMganNlcC5JZGVudGlmaWVyO1xyXG4gICAgICAgICAgICBsZXQgZm5OYW1lID0gY2FsbGVlSWRlbnRpZmllci5uYW1lO1xyXG4gICAgICAgICAgICBsZXQgYXJncyA9IGNhbGxFeHByLmFyZ3VtZW50cztcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZm5OYW1lKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYXJncyk7XHJcbiAgICAgICAgICAgIGxldCBldmFsdWF0ZWRBcmdzID0gZXZhbHVhdGVBcnJheShhcmdzLCByZW5kZXJJbmZvKTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBldmFsdWF0ZWRBcmdzID09PSBcInN0cmluZ1wiKSByZXR1cm4gZXZhbHVhdGVkQXJncztcclxuXHJcbiAgICAgICAgICAgIC8vIGZ1bmN0aW9uIGRhdGFzZXQgYWNjZXB0IG9ubHkgb25lIGFyZyBpbiBudW1iZXJcclxuICAgICAgICAgICAgaWYgKGZuTmFtZSA9PT0gXCJkYXRhc2V0XCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChldmFsdWF0ZWRBcmdzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhcmcgPSBldmFsdWF0ZWRBcmdzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnID09PSBcInN0cmluZ1wiKSByZXR1cm4gYXJnO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnICE9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkVycm9yOiBmdW5jdGlvbiAnZGF0YXNldCcgb25seSBhY2NlcHRzIGlkIGluIG51bWJlclwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YXNldCA9IGdldERhdGFzZXRCeUlkKGFyZywgcmVuZGVySW5mbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgRXJyb3I6IG5vIGRhdGFzZXQgZm91bmQgZm9yIGlkICcke2FyZ30nYDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFzZXQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gZm5EYXRhc2V0IGFjY2VwdCBvbmx5IG9uZSBhcmcgaW4gbnVtYmVyIG9yIERhdGFzZXRcclxuICAgICAgICAgICAgZWxzZSBpZiAoZm5OYW1lIGluIGZuTWFwRGF0YXNldFRvVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChldmFsdWF0ZWRBcmdzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFVzZSBmaXJzdCBub24tWCBkYXRhc2V0XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGFzZXQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGRzIG9mIHJlbmRlckluZm8uZGF0YXNldHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhc2V0ICYmICFkcy5nZXRRdWVyeSgpLnVzZWRBc1hEYXRhc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhc2V0ID0gZHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBicmVha3MgaGVyZSwgdGhlIGluZGV4IG9mIERhdGFzZXRzIG5vdCByZXNldD8/P1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZGF0YXNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYE5vIGF2YWlsYWJsZSBkYXRhc2V0IGZvdW5kIGZvciBmdW5jdGlvbiAke2ZuTmFtZX1gO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm5NYXBEYXRhc2V0VG9WYWx1ZVtmbk5hbWVdKGRhdGFzZXQsIHJlbmRlckluZm8pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGV2YWx1YXRlZEFyZ3MubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFyZyA9IGV2YWx1YXRlZEFyZ3NbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmcgPT09IFwic3RyaW5nXCIpIHJldHVybiBhcmc7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIERhdGFzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZuTWFwRGF0YXNldFRvVmFsdWVbZm5OYW1lXShhcmcsIHJlbmRlckluZm8pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgRXJyb3I6IGZ1bmN0aW9uICcke2ZuTmFtZX0nIG9ubHkgYWNjZXB0cyBEYXRhc2V0YDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYEVycm9yOiBUb28gbWFueSBhcmd1bWVudHMgZm9yIGZ1bmN0aW9uICR7Zm5OYW1lfWA7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm5OYW1lIGluIGZuTWFwRGF0YXNldFRvRGF0YXNldCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2YWx1YXRlZEFyZ3MubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBldmFsdWF0ZWRBcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZhbHVhdGVkQXJnc1swXTsgLy8gZXJyb3IgbWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmFsdWF0ZWRBcmdzWzBdIGluc3RhbmNlb2YgRGF0YXNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YXNldCA9IGV2YWx1YXRlZEFyZ3NbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmbk1hcERhdGFzZXRUb0RhdGFzZXRbZm5OYW1lXShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFzZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySW5mb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgRXJyb3I6IGZ1bmN0aW9uICR7Zm5OYW1lfSBvbmx5IGFjY2VwdCBEYXRhc2V0YDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2YWx1YXRlZEFyZ3MubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXZhbHVhdGVkQXJnc1swXSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZhbHVhdGVkQXJnc1swXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2YWx1YXRlZEFyZ3NbMF0gaW5zdGFuY2VvZiBEYXRhc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhc2V0ID0gZXZhbHVhdGVkQXJnc1swXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZuTWFwRGF0YXNldFRvRGF0YXNldFtmbk5hbWVdKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXNldCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2YWx1YXRlZEFyZ3MuZmlsdGVyKGZ1bmN0aW9uIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYW55LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyOiBhbnlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmRleCA+IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckluZm9cclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYEVycm9yOiBmdW5jdGlvbiAke2ZuTmFtZX0gb25seSBhY2NlcHQgRGF0YXNldGA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGBFcnJvcjogVG9vIG1hbnkgYXJndW1lbnRzIGZvciBmdW5jdGlvbiAke2ZuTmFtZX1gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBgRXJyb3I6IHVua25vd24gZnVuY3Rpb24gbmFtZSAnJHtmbk5hbWV9J2A7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gXCJFcnJvcjogdW5rbm93biBleHByZXNzaW9uXCI7XHJcbn1cclxuXHJcbmludGVyZmFjZSBFeHByUmVzb2x2ZWQge1xyXG4gICAgc291cmNlOiBzdHJpbmc7XHJcbiAgICB2YWx1ZTogbnVtYmVyIHwgTW9tZW50O1xyXG4gICAgZm9ybWF0OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8vIEdldCBhIGxpc3Qgb2YgcmVzb2x2ZWQgcmVzdWx0IGNvbnRhaW5pbmcgc291cmNlLCB2YWx1ZSwgYW5kIGZvcm1hdFxyXG5mdW5jdGlvbiByZXNvbHZlKFxyXG4gICAgdGV4dDogc3RyaW5nLFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mb1xyXG4pOiBBcnJheTxFeHByUmVzb2x2ZWQ+IHwgc3RyaW5nIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKHRleHQpO1xyXG5cclxuICAgIGxldCBleHByTWFwOiBBcnJheTxFeHByUmVzb2x2ZWQ+ID0gW107XHJcblxyXG4gICAgLy8ge3soPzxleHByPltcXHcrXFwtKlxcLzAtOVxccygpXFxbXFxdJS5dKykoOjooPzxmb3JtYXQ+W1xcdytcXC0qXFwvMC05XFxzKClcXFtcXF0lLjpdKykpP319XHJcbiAgICBsZXQgc3RyRXhwclJlZ2V4ID1cclxuICAgICAgICBcInt7KD88ZXhwcj5bXFxcXHcrXFxcXC0qXFxcXC8wLTlcXFxccygpXFxcXFtcXFxcXSUuLF0rKSg6Oig/PGZvcm1hdD5bXFxcXHcrXFxcXC0qXFxcXC8wLTlcXFxccygpXFxcXFtcXFxcXSUuOl0rKSk/fX1cIjtcclxuICAgIGxldCBleHByUmVnZXggPSBuZXcgUmVnRXhwKHN0ckV4cHJSZWdleCwgXCJnbVwiKTtcclxuICAgIGxldCBtYXRjaDtcclxuICAgIHdoaWxlICgobWF0Y2ggPSBleHByUmVnZXguZXhlYyh0ZXh0KSkpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhtYXRjaCk7XHJcbiAgICAgICAgbGV0IGZ1bGxtYXRjaCA9IG1hdGNoWzBdO1xyXG4gICAgICAgIGlmIChleHByTWFwLnNvbWUoKGUpID0+IGUuc291cmNlID09PSBmdWxsbWF0Y2gpKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBtYXRjaC5ncm91cHMgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtYXRjaC5ncm91cHMuZXhwciAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgbGV0IGV4cHIgPSBtYXRjaC5ncm91cHMuZXhwcjtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgYXN0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXN0ID0ganNlcChleHByKTtcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkVycm9yOlwiICsgZXJyLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWFzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkVycm9yOiBmYWlsZWQgdG8gcGFyc2UgZXhwcmVzc2lvblwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYXN0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGV2YWx1YXRlKGFzdCwgcmVuZGVySW5mbyk7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlOyAvLyBlcnJvciBtZXNzYWdlXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tb21lbnQuaXNNb21lbnQodmFsdWUpXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZm9ybWF0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1hdGNoLmdyb3Vwcy5mb3JtYXQgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0ID0gbWF0Y2guZ3JvdXBzLmZvcm1hdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGV4cHJNYXAucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogZnVsbG1hdGNoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDogZm9ybWF0LFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBleHByTWFwO1xyXG59XHJcblxyXG4vLyBSZXNvbHZlIHRoZSB0ZW1wbGF0ZSBleHByZXNzaW9uIGluIHN0cmluZyBhbmQgcmV0dXJuIGEgcmVzb2x2ZWQgc3RyaW5nXHJcbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlVGVtcGxhdGUoXHJcbiAgICB0ZW1wbGF0ZTogc3RyaW5nLFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mb1xyXG4pOiBzdHJpbmcge1xyXG4gICAgbGV0IHJldFJlc29sdmUgPSByZXNvbHZlKHRlbXBsYXRlLCByZW5kZXJJbmZvKTtcclxuICAgIGlmICh0eXBlb2YgcmV0UmVzb2x2ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRSZXNvbHZlOyAvLyBlcnJvciBtZXNzYWdlXHJcbiAgICB9XHJcbiAgICBsZXQgZXhwck1hcCA9IHJldFJlc29sdmUgYXMgQXJyYXk8RXhwclJlc29sdmVkPjtcclxuXHJcbiAgICBmb3IgKGxldCBleHByUmVzb2x2ZWQgb2YgZXhwck1hcCkge1xyXG4gICAgICAgIGxldCB2YWx1ZSA9IGV4cHJSZXNvbHZlZC52YWx1ZTtcclxuICAgICAgICBsZXQgZm9ybWF0ID0gZXhwclJlc29sdmVkLmZvcm1hdDtcclxuICAgICAgICBsZXQgc3RyVmFsdWUgPSBcIlwiO1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgaWYgKGZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgc3RyVmFsdWUgPSBzcHJpbnRmKFwiJVwiICsgZm9ybWF0LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdHJWYWx1ZSA9IHZhbHVlLnRvRml4ZWQoMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5tb21lbnQuaXNNb21lbnQodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIGlmIChmb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIHN0clZhbHVlID0gaGVscGVyLmRhdGVUb1N0cih2YWx1ZSwgZm9ybWF0KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN0clZhbHVlID0gaGVscGVyLmRhdGVUb1N0cih2YWx1ZSwgcmVuZGVySW5mby5kYXRlRm9ybWF0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHN0clZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZUFsbChleHByUmVzb2x2ZWQuc291cmNlLCBzdHJWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0ZW1wbGF0ZTtcclxufVxyXG5cclxuLy8gUmVzb2x2ZSB0aGUgdGVtcGxhdGUgZXhwcmVzc2lvbiBpbiBzdHJpbmcgYW5kIHJldHVybiBhIG51bWJlciBvciBkYXRlXHJcbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlVmFsdWUoXHJcbiAgICB0ZXh0OiBzdHJpbmcsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvXHJcbik6IG51bWJlciB8IE1vbWVudCB8IHN0cmluZyB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyh0ZW1wbGF0ZSk7XHJcbiAgICB0ZXh0ID0gdGV4dC50cmltKCk7XHJcblxyXG4gICAgLy8gaW5wdXQgaXMgcHVyZSBudW1iZXJcclxuICAgIGlmICgvXihbXFwtXT9bMC05XStbXFwuXVswLTldK3xbXFwtXT9bMC05XSspJC8udGVzdCh0ZXh0KSkge1xyXG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHRleHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHRlbXBsYXRlXHJcbiAgICBsZXQgcmV0UmVzb2x2ZSA9IHJlc29sdmUodGV4dCwgcmVuZGVySW5mbyk7XHJcbiAgICBpZiAodHlwZW9mIHJldFJlc29sdmUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0UmVzb2x2ZTsgLy8gZXJyb3IgbWVzc2FnZVxyXG4gICAgfVxyXG4gICAgbGV0IGV4cHJNYXAgPSByZXRSZXNvbHZlIGFzIEFycmF5PEV4cHJSZXNvbHZlZD47XHJcblxyXG4gICAgaWYgKGV4cHJNYXAubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHJldHVybiBleHByTWFwWzBdLnZhbHVlOyAvLyBvbmx5IGZpcnN0IHZhbHVlIHdpbGwgYmUgcmV0dXJuXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFwiRXJyb3I6IGZhaWxlZCB0byByZXNvbHZlIHZhbHVlc1wiO1xyXG59XHJcbiIsImltcG9ydCBxdWFudGlsZSBmcm9tIFwiLi9xdWFudGlsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgcmV0dXJuIHF1YW50aWxlKHZhbHVlcywgMC41LCB2YWx1ZW9mKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZhcmlhbmNlKHZhbHVlcywgdmFsdWVvZikge1xuICBsZXQgY291bnQgPSAwO1xuICBsZXQgZGVsdGE7XG4gIGxldCBtZWFuID0gMDtcbiAgbGV0IHN1bSA9IDA7XG4gIGlmICh2YWx1ZW9mID09PSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmICh2YWx1ZSA9ICt2YWx1ZSkgPj0gdmFsdWUpIHtcbiAgICAgICAgZGVsdGEgPSB2YWx1ZSAtIG1lYW47XG4gICAgICAgIG1lYW4gKz0gZGVsdGEgLyArK2NvdW50O1xuICAgICAgICBzdW0gKz0gZGVsdGEgKiAodmFsdWUgLSBtZWFuKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZSwgKytpbmRleCwgdmFsdWVzKSkgIT0gbnVsbCAmJiAodmFsdWUgPSArdmFsdWUpID49IHZhbHVlKSB7XG4gICAgICAgIGRlbHRhID0gdmFsdWUgLSBtZWFuO1xuICAgICAgICBtZWFuICs9IGRlbHRhIC8gKytjb3VudDtcbiAgICAgICAgc3VtICs9IGRlbHRhICogKHZhbHVlIC0gbWVhbik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChjb3VudCA+IDEpIHJldHVybiBzdW0gLyAoY291bnQgLSAxKTtcbn1cbiIsImltcG9ydCB7IE1vbWVudCB9IGZyb20gXCJtb21lbnRcIjtcclxuaW1wb3J0IHtcclxuICAgIERhdGFzZXRzLFxyXG4gICAgRGF0YVBvaW50LFxyXG4gICAgUmVuZGVySW5mbyxcclxuICAgIFBpZUluZm8sXHJcbiAgICBNb250aEluZm8sXHJcbiAgICBEYXRhc2V0LFxyXG4gICAgU2l6ZSxcclxuICAgIFRyYW5zZm9ybSxcclxuICAgIENoYXJ0RWxlbWVudHMsXHJcbiAgICBHcmFwaFR5cGUsXHJcbiAgICBWYWx1ZVR5cGUsXHJcbn0gZnJvbSBcIi4vZGF0YVwiO1xyXG5pbXBvcnQgKiBhcyBoZWxwZXIgZnJvbSBcIi4vaGVscGVyXCI7XHJcbmltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiO1xyXG5pbXBvcnQgKiBhcyBleHByIGZyb20gXCIuL2V4cHJcIjtcclxuaW1wb3J0IHsgcGllIH0gZnJvbSBcImQzXCI7XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVBcmVhcyhcclxuICAgIGNoYXJ0RWxlbWVudHM6IENoYXJ0RWxlbWVudHMsXHJcbiAgICBjYW52YXM6IEhUTUxFbGVtZW50LFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIHBpZUluZm86IFBpZUluZm9cclxuKTogQ2hhcnRFbGVtZW50cyB7XHJcbiAgICAvLyBjbGVhbiBhcmVhc1xyXG4gICAgZDMuc2VsZWN0KGNhbnZhcykuc2VsZWN0KFwiI3N2Z1wiKS5yZW1vdmUoKTtcclxuICAgIHZhciBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGNoYXJ0RWxlbWVudHMpO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIC8vIGQzLnNlbGVjdChjaGFydEVsZW1lbnRzW3Byb3BzW2ldXSkucmVtb3ZlKCk7XHJcbiAgICAgICAgZGVsZXRlIGNoYXJ0RWxlbWVudHNbcHJvcHNbaV1dO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coY2hhcnRFbGVtZW50cyk7XHJcblxyXG4gICAgLy8gd2hvbGUgYXJlYSBmb3IgcGxvdHRpbmcsIGluY2x1ZGVzIG1hcmdpbnNcclxuICAgIGxldCBzdmcgPSBkM1xyXG4gICAgICAgIC5zZWxlY3QoY2FudmFzKVxyXG4gICAgICAgIC5hcHBlbmQoXCJzdmdcIilcclxuICAgICAgICAuYXR0cihcImlkXCIsIFwic3ZnXCIpXHJcbiAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgIFwid2lkdGhcIixcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4ubGVmdCArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLm1hcmdpbi5yaWdodFxyXG4gICAgICAgIClcclxuICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgXCJoZWlnaHRcIixcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0ICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLnRvcCArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLm1hcmdpbi5ib3R0b21cclxuICAgICAgICApO1xyXG4gICAgY2hhcnRFbGVtZW50c1tcInN2Z1wiXSA9IHN2ZztcclxuXHJcbiAgICAvLyBncmFwaEFyZWEsIGluY2x1ZGVzIGNoYXJ0QXJlYSwgdGl0bGUsIGxlZ2VuZFxyXG4gICAgbGV0IGdyYXBoQXJlYSA9IHN2Z1xyXG4gICAgICAgIC5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcImdyYXBoQXJlYVwiKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcInRyYW5zZm9ybVwiLFxyXG4gICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLm1hcmdpbi5sZWZ0ICtcclxuICAgICAgICAgICAgICAgIFwiLFwiICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLnRvcCArXHJcbiAgICAgICAgICAgICAgICBcIilcIlxyXG4gICAgICAgIClcclxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoICsgcmVuZGVySW5mby5tYXJnaW4ucmlnaHQpXHJcbiAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgIFwiaGVpZ2h0XCIsXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCArIHJlbmRlckluZm8ubWFyZ2luLmJvdHRvbVxyXG4gICAgICAgICk7XHJcbiAgICBjaGFydEVsZW1lbnRzW1wiZ3JhcGhBcmVhXCJdID0gZ3JhcGhBcmVhO1xyXG5cclxuICAgIC8vIGRhdGFBcmVhLCB1bmRlciBncmFwaEFyZWEsIGluY2x1ZGVzIHBvaW50cywgbGluZXMsIHhBeGlzLCB5QXhpc1xyXG4gICAgbGV0IGRhdGFBcmVhID0gZ3JhcGhBcmVhXHJcbiAgICAgICAgLmFwcGVuZChcImdcIilcclxuICAgICAgICAuYXR0cihcImlkXCIsIFwiZGF0YUFyZWFcIilcclxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoKVxyXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCk7XHJcbiAgICBjaGFydEVsZW1lbnRzW1wiZGF0YUFyZWFcIl0gPSBkYXRhQXJlYTtcclxuXHJcbiAgICByZXR1cm4gY2hhcnRFbGVtZW50cztcclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyVGl0bGUoXHJcbiAgICBjYW52YXM6IEhUTUxFbGVtZW50LFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBwaWVJbmZvOiBQaWVJbmZvXHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJUaXRsZVwiKTtcclxuICAgIC8vIHVuZGVyIGdyYXBoQXJlYVxyXG5cclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhcGllSW5mbykgcmV0dXJuO1xyXG5cclxuICAgIGlmICghcGllSW5mby50aXRsZSkgcmV0dXJuO1xyXG4gICAgbGV0IHRpdGxlU2l6ZSA9IGhlbHBlci5tZWFzdXJlVGV4dFNpemUocGllSW5mby50aXRsZSwgXCJ0cmFja2VyLXRpdGxlXCIpO1xyXG5cclxuICAgIC8vIEFwcGVuZCB0aXRsZVxyXG4gICAgbGV0IHRpdGxlID0gY2hhcnRFbGVtZW50cy5ncmFwaEFyZWFcclxuICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgIC50ZXh0KHBpZUluZm8udGl0bGUpIC8vIHBpdm90IGF0IGNlbnRlclxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJ0aXRsZVwiKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcInRyYW5zZm9ybVwiLFxyXG4gICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCAvIDIuMCArXHJcbiAgICAgICAgICAgICAgICBcIixcIiArXHJcbiAgICAgICAgICAgICAgICB0aXRsZVNpemUuaGVpZ2h0IC8gMi4wICtcclxuICAgICAgICAgICAgICAgIFwiKVwiXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHRpdGxlU2l6ZS5oZWlnaHQpIC8vIGZvciBsYXRlciB1c2VcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci10aXRsZVwiKTtcclxuICAgIGNoYXJ0RWxlbWVudHNbXCJ0aXRsZVwiXSA9IHRpdGxlO1xyXG5cclxuICAgIC8vIEV4cGFuZCBwYXJlbnQgYXJlYXNcclxuICAgIGhlbHBlci5leHBhbmRBcmVhKGNoYXJ0RWxlbWVudHMuc3ZnLCAwLCB0aXRsZVNpemUuaGVpZ2h0KTtcclxuICAgIGhlbHBlci5leHBhbmRBcmVhKGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhLCAwLCB0aXRsZVNpemUuaGVpZ2h0KTtcclxuXHJcbiAgICAvLyBNb3ZlIHNpYmxpbmcgYXJlYXNcclxuICAgIGhlbHBlci5tb3ZlQXJlYShjaGFydEVsZW1lbnRzLmRhdGFBcmVhLCAwLCB0aXRsZVNpemUuaGVpZ2h0KTtcclxuXHJcbiAgICByZXR1cm47XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckxlZ2VuZChcclxuICAgIGNhbnZhczogSFRNTEVsZW1lbnQsXHJcbiAgICBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzLFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIHBpZUluZm86IFBpZUluZm9cclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInJlbmRlckxlZ2VuZFwiKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHBpSW5mby5sZWdlbmRQb3NpdGlvbik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhwaUluZm8ubGVnZW5kT3JpZW50YXRpb24pO1xyXG5cclxuICAgIC8vIEdldCBjaGFydCBlbGVtZW50c1xyXG4gICAgbGV0IHN2ZyA9IGNoYXJ0RWxlbWVudHMuc3ZnO1xyXG4gICAgbGV0IGdyYXBoQXJlYSA9IGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhO1xyXG4gICAgbGV0IGRhdGFBcmVhID0gY2hhcnRFbGVtZW50cy5kYXRhQXJlYTtcclxuICAgIGxldCB0aXRsZSA9IGNoYXJ0RWxlbWVudHMudGl0bGU7XHJcblxyXG4gICAgLy8gR2V0IGVsZW1lbnQgd2lkdGggYW5kIGhlaWdodFxyXG4gICAgbGV0IHRpdGxlSGVpZ2h0ID0gMC4wO1xyXG4gICAgaWYgKHRpdGxlKSB7XHJcbiAgICAgICAgdGl0bGVIZWlnaHQgPSBwYXJzZUZsb2F0KHRpdGxlLmF0dHIoXCJoZWlnaHRcIikpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEdldCBuYW1lcyBhbmQgdGhlaXIgZGltZW5zaW9uXHJcbiAgICBsZXQgbmFtZXMgPSBwaWVJbmZvLmRhdGFOYW1lO1xyXG4gICAgbGV0IG5hbWVTaXplcyA9IG5hbWVzLm1hcChmdW5jdGlvbiAobikge1xyXG4gICAgICAgIHJldHVybiBoZWxwZXIubWVhc3VyZVRleHRTaXplKG4sIFwidHJhY2tlci1sZWdlbmQtbGFiZWxcIik7XHJcbiAgICB9KTtcclxuICAgIGxldCBpbmRNYXhOYW1lID0gMDtcclxuICAgIGxldCBtYXhOYW1lV2lkdGggPSAwLjA7XHJcbiAgICBmb3IgKGxldCBpbmQgPSAwOyBpbmQgPCBuYW1lcy5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgaWYgKG5hbWVTaXplc1tpbmRdLndpZHRoID4gbWF4TmFtZVdpZHRoKSB7XHJcbiAgICAgICAgICAgIG1heE5hbWVXaWR0aCA9IG5hbWVTaXplc1tpbmRdLndpZHRoO1xyXG4gICAgICAgICAgICBpbmRNYXhOYW1lID0gaW5kO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGxldCBtYXhOYW1lID0gbmFtZXNbaW5kTWF4TmFtZV07XHJcbiAgICBsZXQgY2hhcmFjdGVyV2lkdGggPSBtYXhOYW1lV2lkdGggLyBtYXhOYW1lLmxlbmd0aDtcclxuICAgIGxldCBuYW1lSGVpZ2h0ID0gbmFtZVNpemVzW2luZE1heE5hbWVdLmhlaWdodDtcclxuICAgIGxldCBudW1OYW1lcyA9IG5hbWVzLmxlbmd0aDtcclxuXHJcbiAgICBsZXQgeFNwYWNpbmcgPSAyICogY2hhcmFjdGVyV2lkdGg7XHJcbiAgICBsZXQgeVNwYWNpbmcgPSBuYW1lSGVpZ2h0O1xyXG4gICAgbGV0IG1hcmtlcldpZHRoID0gMiAqIGNoYXJhY3RlcldpZHRoO1xyXG5cclxuICAgIC8vIEdldCBsZWdlbmQgd2lkdGggYW5kIGhlaWdodFxyXG4gICAgbGV0IGxlZ2VuZFdpZHRoID0gMDtcclxuICAgIGxldCBsZWdlbmRIZWlnaHQgPSAwO1xyXG4gICAgaWYgKHBpZUluZm8ubGVnZW5kT3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIikge1xyXG4gICAgICAgIGxlZ2VuZFdpZHRoID0geFNwYWNpbmcgKiAzICsgbWFya2VyV2lkdGggKyBtYXhOYW1lV2lkdGg7XHJcbiAgICAgICAgbGVnZW5kSGVpZ2h0ID0gKG51bU5hbWVzICsgMSkgKiB5U3BhY2luZztcclxuICAgIH0gZWxzZSBpZiAocGllSW5mby5sZWdlbmRPcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIpIHtcclxuICAgICAgICBsZWdlbmRXaWR0aCA9XHJcbiAgICAgICAgICAgICgyICogeFNwYWNpbmcgKyBtYXJrZXJXaWR0aCkgKiBudW1OYW1lcyArXHJcbiAgICAgICAgICAgIHhTcGFjaW5nICtcclxuICAgICAgICAgICAgZDMuc3VtKG5hbWVTaXplcywgZnVuY3Rpb24gKHMsIGkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzLndpZHRoO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICBsZWdlbmRIZWlnaHQgPSB5U3BhY2luZyArIG5hbWVIZWlnaHQ7XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcclxuICAgIC8vICAgICBgbWF4TmFtZTogJHttYXhOYW1lfSwgY2hhcmFjdGVyV2lkdGg6ICR7Y2hhcmFjdGVyV2lkdGh9LCBtYXhOYW1lV2lkdGg6ICR7bWF4TmFtZVdpZHRofWBcclxuICAgIC8vICk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhgeFNwYWNpbmc6JHt4U3BhY2luZ30sIG51bU5hbWVzOiAke251bU5hbWVzfSwgbWFya2VyV2lkdGg6ICR7bWFya2VyV2lkdGh9YCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhgbGVnZW5kV2lkdGg6ICR7bGVnZW5kV2lkdGh9LCBsZWdlbmRIZWlnaHQ6ICR7bGVnZW5kSGVpZ2h0fWApO1xyXG5cclxuICAgIC8vIENhbGN1YWx0ZSBsZW5nZW5kWCBhbmQgbGVnZW5kWVxyXG4gICAgbGV0IGxlZ2VuZFggPSAwLjA7IC8vIHJlbGF0aXZlIHRvIGdyYXBoQXJlYVxyXG4gICAgbGV0IGxlZ2VuZFkgPSAwLjA7XHJcbiAgICBpZiAocGllSW5mby5sZWdlbmRQb3NpdGlvbiA9PT0gXCJ0b3BcIikge1xyXG4gICAgICAgIC8vIGJlbG93IHRpdGxlXHJcbiAgICAgICAgbGVnZW5kWCA9IHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoIC8gMi4wIC0gbGVnZW5kV2lkdGggLyAyLjA7XHJcbiAgICAgICAgbGVnZW5kWSA9IHRpdGxlSGVpZ2h0O1xyXG4gICAgICAgIC8vIEV4cGFuZCBzdmdcclxuICAgICAgICBoZWxwZXIuZXhwYW5kQXJlYShzdmcsIDAsIGxlZ2VuZEhlaWdodCArIHlTcGFjaW5nKTtcclxuICAgICAgICAvLyBNb3ZlIGRhdGFBcmVhIGRvd25cclxuICAgICAgICBoZWxwZXIubW92ZUFyZWEoZGF0YUFyZWEsIDAsIGxlZ2VuZEhlaWdodCArIHlTcGFjaW5nKTtcclxuICAgIH0gZWxzZSBpZiAocGllSW5mby5sZWdlbmRQb3NpdGlvbiA9PT0gXCJib3R0b21cIikge1xyXG4gICAgICAgIC8vIGJlbGxvdyB4LWF4aXMgbGFiZWxcclxuICAgICAgICBsZWdlbmRYID0gcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggLyAyLjAgLSBsZWdlbmRXaWR0aCAvIDIuMDtcclxuICAgICAgICBsZWdlbmRZID0gdGl0bGVIZWlnaHQgKyByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQgKyB5U3BhY2luZztcclxuICAgICAgICAvLyBFeHBhbmQgc3ZnXHJcbiAgICAgICAgaGVscGVyLmV4cGFuZEFyZWEoc3ZnLCAwLCBsZWdlbmRIZWlnaHQgKyB5U3BhY2luZyk7XHJcbiAgICB9IGVsc2UgaWYgKHBpZUluZm8ubGVnZW5kUG9zaXRpb24gPT09IFwibGVmdFwiKSB7XHJcbiAgICAgICAgbGVnZW5kWCA9IDA7XHJcbiAgICAgICAgbGVnZW5kWSA9XHJcbiAgICAgICAgICAgIHRpdGxlSGVpZ2h0ICtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0IC8gMi4wIC1cclxuICAgICAgICAgICAgbGVnZW5kSGVpZ2h0IC8gMi4wO1xyXG4gICAgICAgIC8vIEV4cGFuZCBzdmdcclxuICAgICAgICBoZWxwZXIuZXhwYW5kQXJlYShzdmcsIGxlZ2VuZFdpZHRoICsgeFNwYWNpbmcsIDApO1xyXG4gICAgICAgIC8vIE1vdmUgZGF0YUFyZWEgcmlnaHRcclxuICAgICAgICBoZWxwZXIubW92ZUFyZWEoZGF0YUFyZWEsIGxlZ2VuZFdpZHRoICsgeFNwYWNpbmcsIDApO1xyXG4gICAgfSBlbHNlIGlmIChwaWVJbmZvLmxlZ2VuZFBvc2l0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICBsZWdlbmRYID0gcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggKyB4U3BhY2luZztcclxuICAgICAgICBsZWdlbmRZID1cclxuICAgICAgICAgICAgdGl0bGVIZWlnaHQgK1xyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQgLyAyLjAgLVxyXG4gICAgICAgICAgICBsZWdlbmRIZWlnaHQgLyAyLjA7XHJcbiAgICAgICAgLy8gRXhwYW5kIHN2Z1xyXG4gICAgICAgIGhlbHBlci5leHBhbmRBcmVhKHN2ZywgbGVnZW5kV2lkdGggKyB4U3BhY2luZywgMCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKGBsZWdlbmRYOiAke2xlZ2VuZFh9LCBsZWdlbmRZOiAke2xlZ2VuZFl9YCk7XHJcblxyXG4gICAgbGV0IGxlZ2VuZCA9IGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhXHJcbiAgICAgICAgLmFwcGVuZChcImdcIilcclxuICAgICAgICAuYXR0cihcImlkXCIsIFwibGVnZW5kXCIpXHJcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBsZWdlbmRYICsgXCIsXCIgKyBsZWdlbmRZICsgXCIpXCIpO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2xlZ2VuZFg6ICVkLCBsZWdlbmRZOiAlZCcsIGxlZ2VuZFgsIGxlZ2VuZFkpO1xyXG5cclxuICAgIGxldCBsZWdlbmRCZyA9IGxlZ2VuZFxyXG4gICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItbGVnZW5kXCIpXHJcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBsZWdlbmRXaWR0aClcclxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBsZWdlbmRIZWlnaHQpO1xyXG4gICAgaWYgKHBpZUluZm8ubGVnZW5kQmdDb2xvcikge1xyXG4gICAgICAgIGxlZ2VuZEJnLnN0eWxlKFwiZmlsbFwiLCBwaWVJbmZvLmxlZ2VuZEJnQ29sb3IpO1xyXG4gICAgfVxyXG4gICAgaWYgKHBpZUluZm8ubGVnZW5kQm9yZGVyQ29sb3IpIHtcclxuICAgICAgICBsZWdlbmRCZy5zdHlsZShcInN0cm9rZVwiLCBwaWVJbmZvLmxlZ2VuZEJvcmRlckNvbG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbWFya2VyUmFkaXVzID0gNS4wO1xyXG4gICAgbGV0IGZpcnN0TWFya2VyWCA9IHhTcGFjaW5nO1xyXG4gICAgbGV0IGZpcnN0TWFya2VyWSA9IG5hbWVIZWlnaHQ7XHJcbiAgICBsZXQgZmlyc3RMYWJlbFggPSBmaXJzdE1hcmtlclggKyB4U3BhY2luZyArIG1hcmtlcldpZHRoOyAvLyB4U3BhY2luZyArIDIgKiB4U3BhaW5nXHJcbiAgICBsZXQgZmlyc3RMYWJlbFkgPSBmaXJzdE1hcmtlclk7XHJcblxyXG4gICAgaWYgKHBpZUluZm8ubGVnZW5kT3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIikge1xyXG4gICAgICAgIC8vIHBvaW50c1xyXG4gICAgICAgIGxlZ2VuZFxyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwibWFya2Vyc1wiKVxyXG4gICAgICAgICAgICAuZGF0YShuYW1lcylcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZChcImNpcmNsZVwiKVxyXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsIGZpcnN0TWFya2VyWCArIG1hcmtlcldpZHRoIC8gMi4wKVxyXG4gICAgICAgICAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0TWFya2VyWSArIGkgKiB5U3BhY2luZztcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJyXCIsIGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hcmtlclJhZGl1cztcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwaWVJbmZvLmRhdGFDb2xvcltpXTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIG5hbWVzXHJcbiAgICAgICAgbGV0IG5hbWVMYWJlbHMgPSBsZWdlbmRcclxuICAgICAgICAgICAgLnNlbGVjdEFsbChcImxhYmVsc1wiKVxyXG4gICAgICAgICAgICAuZGF0YShuYW1lcylcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGZpcnN0TGFiZWxYKVxyXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlyc3RMYWJlbFkgKyBpICogeVNwYWNpbmc7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hbWU7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdHlsZShcImFsaWdubWVudC1iYXNlbGluZVwiLCBcIm1pZGRsZVwiKVxyXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1sZWdlbmQtbGFiZWxcIik7XHJcblxyXG4gICAgICAgIG5hbWVMYWJlbHMuc3R5bGUoXCJmaWxsXCIsIGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gcGllSW5mby5kYXRhQ29sb3JbaV07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKHBpZUluZm8ubGVnZW5kT3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiKSB7XHJcbiAgICAgICAgbGV0IGN1cnJSZW5kZXJQb3NYID0gMC4wO1xyXG4gICAgICAgIGxldCBjdXJyUmVuZGVyUG9zWDIgPSAwLjA7XHJcblxyXG4gICAgICAgIC8vIHBvaW50c1xyXG4gICAgICAgIGN1cnJSZW5kZXJQb3NYID0gMC4wO1xyXG4gICAgICAgIGxlZ2VuZFxyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwibWFya2Vyc1wiKVxyXG4gICAgICAgICAgICAuZGF0YShuYW1lcylcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZChcImNpcmNsZVwiKVxyXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsIGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyUmVuZGVyUG9zWCA9IGZpcnN0TWFya2VyWCArIG1hcmtlcldpZHRoIC8gMi4wO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyUmVuZGVyUG9zWCArPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lU2l6ZXNbaV0ud2lkdGggKyB4U3BhY2luZyArIG1hcmtlcldpZHRoICsgeFNwYWNpbmc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VyclJlbmRlclBvc1g7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgZmlyc3RNYXJrZXJZKVxyXG4gICAgICAgICAgICAuYXR0cihcInJcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFya2VyUmFkaXVzO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBpZUluZm8uZGF0YUNvbG9yW2ldO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gbmFtZXNcclxuICAgICAgICBjdXJyUmVuZGVyUG9zWCA9IDAuMDtcclxuICAgICAgICBsZXQgbmFtZUxhYmVscyA9IGxlZ2VuZFxyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwibGFiZWxzXCIpXHJcbiAgICAgICAgICAgIC5kYXRhKG5hbWVzKVxyXG4gICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJSZW5kZXJQb3NYID0gZmlyc3RMYWJlbFg7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJSZW5kZXJQb3NYICs9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVTaXplc1tpXS53aWR0aCArIHhTcGFjaW5nICsgbWFya2VyV2lkdGggKyB4U3BhY2luZztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyUmVuZGVyUG9zWDtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGZpcnN0TGFiZWxZKVxyXG4gICAgICAgICAgICAudGV4dChmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuYW1lO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJhbGlnbm1lbnQtYmFzZWxpbmVcIiwgXCJtaWRkbGVcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItbGVnZW5kLWxhYmVsXCIpO1xyXG5cclxuICAgICAgICBuYW1lTGFiZWxzLnN0eWxlKFwiZmlsbFwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBpZUluZm8uZGF0YUNvbG9yW2ldO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJQaWUoXHJcbiAgICBjYW52YXM6IEhUTUxFbGVtZW50LFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBwaWVJbmZvOiBQaWVJbmZvXHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJQaWVcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvKTtcclxuICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIlwiO1xyXG5cclxuICAgIGxldCByYWRpdXMgPSByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCAqIDAuNTtcclxuICAgIGxldCBvdXR0ZXJSYWRpdXMgPSByYWRpdXMgKiAwLjc7XHJcbiAgICBsZXQgaW5uZXJSYWRpdXMgPSBvdXR0ZXJSYWRpdXMgKiBwaWVJbmZvLnJhdGlvSW5uZXJSYWRpdXM7XHJcblxyXG4gICAgLy8gdmFsdWVzXHJcbiAgICBsZXQgdmFsdWVzOiBBcnJheTxudW1iZXI+ID0gW107XHJcbiAgICBmb3IgKGxldCBzdHJFeHByIG9mIHBpZUluZm8uZGF0YSkge1xyXG4gICAgICAgIGxldCByZXRWYWx1ZSA9IGV4cHIucmVzb2x2ZVZhbHVlKHN0ckV4cHIsIHJlbmRlckluZm8pO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0VmFsdWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gcmV0VmFsdWU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHJldFZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKHJldFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoZXJyb3JNZXNzYWdlICE9PSBcIlwiKSB7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKHZhbHVlcyk7XHJcblxyXG4gICAgLy8gbGFiZWxzXHJcbiAgICBsZXQgbGFiZWxzOiBBcnJheTxzdHJpbmc+ID0gW107XHJcbiAgICBmb3IgKGxldCBzdHJFeHByIG9mIHBpZUluZm8ubGFiZWwpIHtcclxuICAgICAgICBsZXQgcmV0TGFiZWwgPSBleHByLnJlc29sdmVUZW1wbGF0ZShzdHJFeHByLCByZW5kZXJJbmZvKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXRMYWJlbCk7XHJcbiAgICAgICAgaWYgKHJldExhYmVsLnN0YXJ0c1dpdGgoXCJFcnJvclwiKSkge1xyXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSByZXRMYWJlbDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxhYmVscy5wdXNoKHJldExhYmVsKTtcclxuICAgIH1cclxuICAgIGlmIChlcnJvck1lc3NhZ2UgIT09IFwiXCIpIHtcclxuICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2cobGFiZWxzKTtcclxuXHJcbiAgICAvLyBoaWRlTGFiZWxMZXNzVGhhblxyXG4gICAgbGV0IGhpZGVMYWJlbExlc3NUaGFuID0gcGllSW5mby5oaWRlTGFiZWxMZXNzVGhhbjtcclxuXHJcbiAgICAvLyBsYWJlbCBzaXplc1xyXG4gICAgbGV0IGxhYmVsU2l6ZXMgPSBsYWJlbHMubWFwKGZ1bmN0aW9uIChuKSB7XHJcbiAgICAgICAgcmV0dXJuIGhlbHBlci5tZWFzdXJlVGV4dFNpemUobiwgXCJ0cmFja2VyLXRpY2stbGFiZWxcIik7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBleHRMYWJlbFxyXG4gICAgbGV0IGV4dExhYmVsczogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG4gICAgZm9yIChsZXQgc3RyRXhwciBvZiBwaWVJbmZvLmV4dExhYmVsKSB7XHJcbiAgICAgICAgbGV0IHJldEV4dExhYmVsID0gZXhwci5yZXNvbHZlVGVtcGxhdGUoc3RyRXhwciwgcmVuZGVySW5mbyk7XHJcbiAgICAgICAgaWYgKHJldEV4dExhYmVsLnN0YXJ0c1dpdGgoXCJFcnJvclwiKSkge1xyXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSByZXRFeHRMYWJlbDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGV4dExhYmVscy5wdXNoKHJldEV4dExhYmVsKTtcclxuICAgIH1cclxuICAgIGlmIChlcnJvck1lc3NhZ2UgIT09IFwiXCIpIHtcclxuICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coZXh0TGFiZWxzKTtcclxuXHJcbiAgICAvLyBleHRMYWJlbCBzaXplc1xyXG4gICAgbGV0IGV4dExhYmVsU2l6ZXMgPSBsYWJlbHMubWFwKGZ1bmN0aW9uIChuKSB7XHJcbiAgICAgICAgcmV0dXJuIGhlbHBlci5tZWFzdXJlVGV4dFNpemUobiwgXCJ0cmFja2VyLXRpY2stbGFiZWxcIik7XHJcbiAgICB9KTtcclxuXHJcbiAgICBsZXQgc2hvd0V4dExhYmVsT25seUlmTm9MYWJlbCA9IHBpZUluZm8uc2hvd0V4dExhYmVsT25seUlmTm9MYWJlbDtcclxuXHJcbiAgICAvLyBzY2FsZVxyXG4gICAgbGV0IGNvbG9yU2NhbGUgPSBkMy5zY2FsZU9yZGluYWwoKS5yYW5nZShwaWVJbmZvLmRhdGFDb2xvcik7XHJcblxyXG4gICAgbGV0IHNlY3RvcnNHcm91cCA9IGNoYXJ0RWxlbWVudHMuZGF0YUFyZWEuYXBwZW5kKFwiZ1wiKTtcclxuICAgIHNlY3RvcnNHcm91cC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBsZXQgc3RyVHJhbnNsYXRlID1cclxuICAgICAgICAgICAgXCJ0cmFuc2xhdGUoXCIgK1xyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCAqIDAuNSArXHJcbiAgICAgICAgICAgIFwiLFwiICtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0ICogMC41ICtcclxuICAgICAgICAgICAgXCIpXCI7XHJcblxyXG4gICAgICAgIHJldHVybiBzdHJUcmFuc2xhdGU7XHJcbiAgICB9KTtcclxuXHJcbiAgICBsZXQgcGllID0gZDMucGllKCk7XHJcbiAgICBsZXQgcGllVmFsdWVzID0gcGllKHZhbHVlcyk7XHJcblxyXG4gICAgbGV0IHNlY3RvcnMgPSBzZWN0b3JzR3JvdXBcclxuICAgICAgICAuc2VsZWN0QWxsKFwic2VjdG9yXCIpXHJcbiAgICAgICAgLmRhdGEocGllVmFsdWVzKVxyXG4gICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgLmFwcGVuZChcImdcIilcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwic2VjdG9yXCIpO1xyXG5cclxuICAgIGxldCBhcmMgPSBkMy5hcmMoKS5pbm5lclJhZGl1cyhpbm5lclJhZGl1cykub3V0ZXJSYWRpdXMob3V0dGVyUmFkaXVzKTtcclxuXHJcbiAgICB2YXIgaGlkZGVuQXJjID0gZDNcclxuICAgICAgICAuYXJjKClcclxuICAgICAgICAuaW5uZXJSYWRpdXMocmFkaXVzICogMC45KVxyXG4gICAgICAgIC5vdXRlclJhZGl1cyhyYWRpdXMgKiAwLjkpO1xyXG5cclxuICAgIGxldCBzZWN0b3JQYXRocyA9IHNlY3RvcnNcclxuICAgICAgICAuYXBwZW5kKFwicGF0aFwiKVxyXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBmdW5jdGlvbiAoZDogYW55LCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbG9yU2NhbGUoaS50b1N0cmluZygpKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5hdHRyKFwiZFwiLCBhcmMpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGlzTGFiZWxIaWRkZW4oYXJjT2JqOiBhbnkpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhgc3RhcnQvZW5kOiAke2FyY09iai5zdGFydEFuZ2xlfS8ke2FyY09iai5lbmRBbmdsZX1gKTtcclxuICAgICAgICBsZXQgZnJhY3Rpb24gPSAoYXJjT2JqLmVuZEFuZ2xlIC0gYXJjT2JqLnN0YXJ0QW5nbGUpIC8gKDIuMCAqIE1hdGguUEkpO1xyXG4gICAgICAgIGlmIChmcmFjdGlvbiA8IGhpZGVMYWJlbExlc3NUaGFuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbGFiZWwgZWxlbWVudHNcclxuICAgIGxldCBsYWJlbEVsZW1lbnRzID0gc2VjdG9yc0dyb3VwXHJcbiAgICAgICAgLnNlbGVjdEFsbChcImxhYmVsXCIpXHJcbiAgICAgICAgLmRhdGEocGllKHZhbHVlcykpXHJcbiAgICAgICAgLmVudGVyKClcclxuICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgIC50ZXh0KGZ1bmN0aW9uIChhcmNPYmo6IGFueSwgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGlmIChpc0xhYmVsSGlkZGVuKGFyY09iaikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBsYWJlbHNbaV07XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAoZDogYW55KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArXHJcbiAgICAgICAgICAgICAgICBhcmMuY2VudHJvaWQoZClbMF0gK1xyXG4gICAgICAgICAgICAgICAgXCIsXCIgK1xyXG4gICAgICAgICAgICAgICAgYXJjLmNlbnRyb2lkKGQpWzFdICtcclxuICAgICAgICAgICAgICAgIFwiKVwiXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLXRpY2stbGFiZWxcIik7XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0TWlkQW5nbGUoYXJjT2JqOiBhbnkpIHtcclxuICAgICAgICByZXR1cm4gYXJjT2JqLnN0YXJ0QW5nbGUgKyAoYXJjT2JqLmVuZEFuZ2xlIC0gYXJjT2JqLnN0YXJ0QW5nbGUpIC8gMjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBleHRlcm5hbCBsYWJlbCBlbGVtZW50c1xyXG4gICAgbGV0IGV4dExhYmVsRWxlbWVudHMgPSBzZWN0b3JzR3JvdXBcclxuICAgICAgICAuc2VsZWN0QWxsKFwiZXh0TGFiZWxcIilcclxuICAgICAgICAuZGF0YShwaWVWYWx1ZXMpXHJcbiAgICAgICAgLmVudGVyKClcclxuICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgIC50ZXh0KGZ1bmN0aW9uIChhcmNPYmo6IGFueSwgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGlmIChzaG93RXh0TGFiZWxPbmx5SWZOb0xhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobGFiZWxzW2ldID09PSBcIlwiIHx8IGlzTGFiZWxIaWRkZW4oYXJjT2JqKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBleHRMYWJlbHNbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBleHRMYWJlbHNbaV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uIChhcmNPYmo6IGFueSwgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGxldCBwb3NMYWJlbCA9IGhpZGRlbkFyYy5jZW50cm9pZChhcmNPYmopO1xyXG4gICAgICAgICAgICBsZXQgbWlkQW5nbGUgPSBnZXRNaWRBbmdsZShhcmNPYmopO1xyXG5cclxuICAgICAgICAgICAgcG9zTGFiZWxbMF0gPVxyXG4gICAgICAgICAgICAgICAgKHJhZGl1cyAqIDAuOTkgLSBleHRMYWJlbFNpemVzW2ldLndpZHRoKSAqXHJcbiAgICAgICAgICAgICAgICAobWlkQW5nbGUgPCBNYXRoLlBJID8gMSA6IC0xKTtcclxuICAgICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgcG9zTGFiZWxbMF0gKyBcIixcIiArIHBvc0xhYmVsWzFdICsgXCIpXCI7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBmdW5jdGlvbiAoYXJjT2JqOiBhbnkpIHtcclxuICAgICAgICAgICAgbGV0IG1pZEFuZ2xlID0gZ2V0TWlkQW5nbGUoYXJjT2JqKTtcclxuICAgICAgICAgICAgcmV0dXJuIG1pZEFuZ2xlIDwgTWF0aC5QSSA/IFwic3RhcnRcIiA6IFwiZW5kXCI7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci10aWNrLWxhYmVsXCIpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGdldFBvaW50c0ZvckNvbm5lY3Rpb25MaW5lcyhhcmNPYmo6IGFueSwgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGxhYmVsV2lkdGggPSBsYWJlbFNpemVzW2ldLndpZHRoO1xyXG4gICAgICAgIGxldCBleHRMYWJlbFdpZHRoID0gZXh0TGFiZWxTaXplc1tpXS53aWR0aDtcclxuICAgICAgICBsZXQgbGFiZWxIaWRkZW4gPSBpc0xhYmVsSGlkZGVuKGFyY09iaik7XHJcbiAgICAgICAgbGV0IG1pZEFuZ2xlID0gZ2V0TWlkQW5nbGUoYXJjT2JqKTtcclxuXHJcbiAgICAgICAgbGV0IHBvc0xhYmVsID0gYXJjLmNlbnRyb2lkKGFyY09iaik7IC8vIGxpbmUgaW5zZXJ0aW9uIGluIHRoZSBzbGljZVxyXG4gICAgICAgIGxldCBwb3NNaWRkbGUgPSBoaWRkZW5BcmMuY2VudHJvaWQoYXJjT2JqKTsgLy8gbGluZSBicmVhazogd2UgdXNlIHRoZSBvdGhlciBhcmMgZ2VuZXJhdG9yIHRoYXQgaGFzIGJlZW4gYnVpbHQgb25seSBmb3IgdGhhdFxyXG4gICAgICAgIGxldCBwb3NFeHRMYWJlbCA9IGhpZGRlbkFyYy5jZW50cm9pZChhcmNPYmopOyAvLyBMYWJlbCBwb3NpdGlvbiA9IGFsbW9zdCB0aGUgc2FtZSBhcyBwb3NCXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobGFiZWxzW2ldKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhgbGFiZWwvbWlkZGxlL2V4dExhYmVsOiAke3Bvc0xhYmVsfS8ke3Bvc01pZGRsZX0vJHtwb3NFeHRMYWJlbH1gKTtcclxuXHJcbiAgICAgICAgbGV0IGRpc3RNaWRkbGVUb0xhYmVsID0gTWF0aC5zcXJ0KFxyXG4gICAgICAgICAgICAocG9zTWlkZGxlWzBdIC0gcG9zTGFiZWxbMF0pICoqIDIgK1xyXG4gICAgICAgICAgICAgICAgKHBvc01pZGRsZVsxXSAtIHBvc0xhYmVsWzFdKSAqKiAyXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgaWYgKGxhYmVsc1tpXSAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAvLyBzaGlmdCBwb3NMYWJlbCwgdG93YXJkIHRoZSBtaWRkbGUgcG9pbnRcclxuICAgICAgICAgICAgcG9zTGFiZWxbMF0gPVxyXG4gICAgICAgICAgICAgICAgcG9zTGFiZWxbMF0gK1xyXG4gICAgICAgICAgICAgICAgKChwb3NNaWRkbGVbMF0gLSBwb3NMYWJlbFswXSkgKiBsYWJlbFdpZHRoKSAvIGRpc3RNaWRkbGVUb0xhYmVsO1xyXG4gICAgICAgICAgICBwb3NMYWJlbFsxXSA9XHJcbiAgICAgICAgICAgICAgICBwb3NMYWJlbFsxXSArXHJcbiAgICAgICAgICAgICAgICAoKHBvc01pZGRsZVsxXSAtIHBvc0xhYmVsWzFdKSAqIGxhYmVsV2lkdGgpIC8gZGlzdE1pZGRsZVRvTGFiZWw7XHJcblxyXG4gICAgICAgICAgICAvLyBzaGlmdCBwb3NFeHRMYWJlbFxyXG4gICAgICAgICAgICBwb3NFeHRMYWJlbFswXSA9XHJcbiAgICAgICAgICAgICAgICAocmFkaXVzICogMC45OSAtIGV4dExhYmVsV2lkdGggLSAzKSAqXHJcbiAgICAgICAgICAgICAgICAobWlkQW5nbGUgPCBNYXRoLlBJID8gMSA6IC0xKTsgLy8gbXVsdGlwbHkgYnkgMSBvciAtMSB0byBwdXQgaXQgb24gdGhlIHJpZ2h0IG9yIG9uIHRoZSBsZWZ0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkaXN0TWlkZGxlVG9MYWJlbCA9IE1hdGguc3FydChcclxuICAgICAgICAgICAgKHBvc01pZGRsZVswXSAtIHBvc0xhYmVsWzBdKSAqKiAyICtcclxuICAgICAgICAgICAgICAgIChwb3NNaWRkbGVbMV0gLSBwb3NMYWJlbFsxXSkgKiogMlxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGxldCBkaXN0RXh0TGFiZWxUb0xhYmVsID0gTWF0aC5zcXJ0KFxyXG4gICAgICAgICAgICAocG9zRXh0TGFiZWxbMF0gLSBwb3NMYWJlbFswXSkgKiogMiArXHJcbiAgICAgICAgICAgICAgICAocG9zRXh0TGFiZWxbMV0gLSBwb3NMYWJlbFsxXSkgKiogMlxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGlmIChkaXN0TWlkZGxlVG9MYWJlbCA+IGRpc3RFeHRMYWJlbFRvTGFiZWwpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJ0d28gcG9pbnRzXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gW3Bvc0xhYmVsLCBwb3NFeHRMYWJlbF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbcG9zTGFiZWwsIHBvc01pZGRsZSwgcG9zRXh0TGFiZWxdO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFkZCBsaW5lcyBiZXR3ZWVuIHNlY3RvcnMgYW5kIGV4dGVybmFsIGxhYmVsc1xyXG4gICAgbGV0IGxpbmVzID0gc2VjdG9yc0dyb3VwXHJcbiAgICAgICAgLnNlbGVjdEFsbChcImxpbmVcIilcclxuICAgICAgICAuZGF0YShwaWVWYWx1ZXMpXHJcbiAgICAgICAgLmVudGVyKClcclxuICAgICAgICAuYXBwZW5kKFwicG9seWxpbmVcIilcclxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImJsYWNrXCIpXHJcbiAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBcIm5vbmVcIilcclxuICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAxKVxyXG4gICAgICAgIC5hdHRyKFwicG9pbnRzXCIsIGZ1bmN0aW9uIChhcmNPYmo6IGFueSwgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGlmIChzaG93RXh0TGFiZWxPbmx5SWZOb0xhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobGFiZWxzW2ldID09PSBcIlwiIHx8IGlzTGFiZWxIaWRkZW4oYXJjT2JqKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChleHRMYWJlbHNbaV0gIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldFBvaW50c0ZvckNvbm5lY3Rpb25MaW5lcyhhcmNPYmosIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChleHRMYWJlbHNbaV0gIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0UG9pbnRzRm9yQ29ubmVjdGlvbkxpbmVzKGFyY09iaiwgaSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLWF4aXNcIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJQaWVDaGFydChcclxuICAgIGNhbnZhczogSFRNTEVsZW1lbnQsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgcGllSW5mbzogUGllSW5mb1xyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVyUGllQ2hhcnRcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvKTtcclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhcGllSW5mbykgcmV0dXJuO1xyXG5cclxuICAgIC8vIHJldHVybiBcIlVuZGVyIGNvbnN0cnVjdGlvblwiO1xyXG5cclxuICAgIGxldCBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzID0ge307XHJcbiAgICBjaGFydEVsZW1lbnRzID0gY3JlYXRlQXJlYXMoY2hhcnRFbGVtZW50cywgY2FudmFzLCByZW5kZXJJbmZvLCBwaWVJbmZvKTtcclxuXHJcbiAgICByZW5kZXJUaXRsZShjYW52YXMsIGNoYXJ0RWxlbWVudHMsIHJlbmRlckluZm8sIHBpZUluZm8pO1xyXG5cclxuICAgIHJlbmRlclBpZShjYW52YXMsIGNoYXJ0RWxlbWVudHMsIHJlbmRlckluZm8sIHBpZUluZm8pO1xyXG5cclxuICAgIGlmIChwaWVJbmZvLnNob3dMZWdlbmQpIHtcclxuICAgICAgICByZW5kZXJMZWdlbmQoY2FudmFzLCBjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvLCBwaWVJbmZvKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgYXJyYXkgZnJvbSBcIi4vYXJyYXkuanNcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IGRlc2NlbmRpbmcgZnJvbSBcIi4vZGVzY2VuZGluZy5qc1wiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5LmpzXCI7XG5pbXBvcnQge3RhdX0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHZhbHVlID0gaWRlbnRpdHksXG4gICAgICBzb3J0VmFsdWVzID0gZGVzY2VuZGluZyxcbiAgICAgIHNvcnQgPSBudWxsLFxuICAgICAgc3RhcnRBbmdsZSA9IGNvbnN0YW50KDApLFxuICAgICAgZW5kQW5nbGUgPSBjb25zdGFudCh0YXUpLFxuICAgICAgcGFkQW5nbGUgPSBjb25zdGFudCgwKTtcblxuICBmdW5jdGlvbiBwaWUoZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0gKGRhdGEgPSBhcnJheShkYXRhKSkubGVuZ3RoLFxuICAgICAgICBqLFxuICAgICAgICBrLFxuICAgICAgICBzdW0gPSAwLFxuICAgICAgICBpbmRleCA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYXJjcyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYTAgPSArc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICBkYSA9IE1hdGgubWluKHRhdSwgTWF0aC5tYXgoLXRhdSwgZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGEwKSksXG4gICAgICAgIGExLFxuICAgICAgICBwID0gTWF0aC5taW4oTWF0aC5hYnMoZGEpIC8gbiwgcGFkQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSksXG4gICAgICAgIHBhID0gcCAqIChkYSA8IDAgPyAtMSA6IDEpLFxuICAgICAgICB2O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKCh2ID0gYXJjc1tpbmRleFtpXSA9IGldID0gK3ZhbHVlKGRhdGFbaV0sIGksIGRhdGEpKSA+IDApIHtcbiAgICAgICAgc3VtICs9IHY7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gT3B0aW9uYWxseSBzb3J0IHRoZSBhcmNzIGJ5IHByZXZpb3VzbHktY29tcHV0ZWQgdmFsdWVzIG9yIGJ5IGRhdGEuXG4gICAgaWYgKHNvcnRWYWx1ZXMgIT0gbnVsbCkgaW5kZXguc29ydChmdW5jdGlvbihpLCBqKSB7IHJldHVybiBzb3J0VmFsdWVzKGFyY3NbaV0sIGFyY3Nbal0pOyB9KTtcbiAgICBlbHNlIGlmIChzb3J0ICE9IG51bGwpIGluZGV4LnNvcnQoZnVuY3Rpb24oaSwgaikgeyByZXR1cm4gc29ydChkYXRhW2ldLCBkYXRhW2pdKTsgfSk7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBhcmNzISBUaGV5IGFyZSBzdG9yZWQgaW4gdGhlIG9yaWdpbmFsIGRhdGEncyBvcmRlci5cbiAgICBmb3IgKGkgPSAwLCBrID0gc3VtID8gKGRhIC0gbiAqIHBhKSAvIHN1bSA6IDA7IGkgPCBuOyArK2ksIGEwID0gYTEpIHtcbiAgICAgIGogPSBpbmRleFtpXSwgdiA9IGFyY3Nbal0sIGExID0gYTAgKyAodiA+IDAgPyB2ICogayA6IDApICsgcGEsIGFyY3Nbal0gPSB7XG4gICAgICAgIGRhdGE6IGRhdGFbal0sXG4gICAgICAgIGluZGV4OiBpLFxuICAgICAgICB2YWx1ZTogdixcbiAgICAgICAgc3RhcnRBbmdsZTogYTAsXG4gICAgICAgIGVuZEFuZ2xlOiBhMSxcbiAgICAgICAgcGFkQW5nbGU6IHBcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFyY3M7XG4gIH1cblxuICBwaWUudmFsdWUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmFsdWUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgcGllKSA6IHZhbHVlO1xuICB9O1xuXG4gIHBpZS5zb3J0VmFsdWVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvcnRWYWx1ZXMgPSBfLCBzb3J0ID0gbnVsbCwgcGllKSA6IHNvcnRWYWx1ZXM7XG4gIH07XG5cbiAgcGllLnNvcnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydCA9IF8sIHNvcnRWYWx1ZXMgPSBudWxsLCBwaWUpIDogc29ydDtcbiAgfTtcblxuICBwaWUuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdGFydEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHBpZSkgOiBzdGFydEFuZ2xlO1xuICB9O1xuXG4gIHBpZS5lbmRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChlbmRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBwaWUpIDogZW5kQW5nbGU7XG4gIH07XG5cbiAgcGllLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHBpZSkgOiBwYWRBbmdsZTtcbiAgfTtcblxuICByZXR1cm4gcGllO1xufVxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XHJcbmltcG9ydCB7IFJlbmRlckluZm8sIFN1bW1hcnlJbmZvIH0gZnJvbSBcIi4vZGF0YVwiO1xyXG5pbXBvcnQgKiBhcyBleHByIGZyb20gXCIuL2V4cHJcIjtcclxuXHJcbmZ1bmN0aW9uIGNoZWNrU3VtbWFyeVRlbXBsYXRlVmFsaWQoc3VtbWFyeVRlbXBsYXRlOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyU3VtbWFyeShcclxuICAgIGNhbnZhczogSFRNTEVsZW1lbnQsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgc3VtbWFyeUluZm86IFN1bW1hcnlJbmZvXHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJTdW1tYXJ5XCIpO1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mbyk7XHJcbiAgICBpZiAoIXJlbmRlckluZm8gfHwgIXN1bW1hcnlJbmZvKSByZXR1cm47XHJcblxyXG4gICAgbGV0IG91dHB1dFN1bW1hcnkgPSBcIlwiO1xyXG4gICAgaWYgKGNoZWNrU3VtbWFyeVRlbXBsYXRlVmFsaWQoc3VtbWFyeUluZm8udGVtcGxhdGUpKSB7XHJcbiAgICAgICAgb3V0cHV0U3VtbWFyeSA9IHN1bW1hcnlJbmZvLnRlbXBsYXRlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gXCJJbnZhbGlkIHN1bW1hcnkgdGVtcGxhdGVcIjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcmV0UmVzb2x2ZWRUZW1wbGF0ZSA9IGV4cHIucmVzb2x2ZVRlbXBsYXRlKG91dHB1dFN1bW1hcnksIHJlbmRlckluZm8pO1xyXG4gICAgLy8gY29uc29sZS5sb2cocmV0UmVzb2x2ZWRUZW1wbGF0ZSk7XHJcbiAgICBpZiAocmV0UmVzb2x2ZWRUZW1wbGF0ZS5zdGFydHNXaXRoKFwiRXJyb3I6XCIpKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldFJlc29sdmVkVGVtcGxhdGU7XHJcbiAgICB9XHJcbiAgICBvdXRwdXRTdW1tYXJ5ID0gcmV0UmVzb2x2ZWRUZW1wbGF0ZTtcclxuXHJcbiAgICBpZiAob3V0cHV0U3VtbWFyeSAhPT0gXCJcIikge1xyXG4gICAgICAgIGxldCB0ZXh0QmxvY2sgPSBkMy5zZWxlY3QoY2FudmFzKS5hcHBlbmQoXCJkaXZcIik7XHJcbiAgICAgICAgaWYgKG91dHB1dFN1bW1hcnkuaW5jbHVkZXMoXCJcXG5cIikpIHtcclxuICAgICAgICAgICAgbGV0IG91dHB1dExpbmVzID0gb3V0cHV0U3VtbWFyeS5zcGxpdChcIlxcblwiKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgb3V0cHV0TGluZSBvZiBvdXRwdXRMaW5lcykge1xyXG4gICAgICAgICAgICAgICAgdGV4dEJsb2NrLmFwcGVuZChcImRpdlwiKS50ZXh0KG91dHB1dExpbmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGV4dEJsb2NrLnRleHQob3V0cHV0U3VtbWFyeSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc3VtbWFyeUluZm8uc3R5bGUgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgdGV4dEJsb2NrLmF0dHIoXCJzdHlsZVwiLCBzdW1tYXJ5SW5mby5zdHlsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IE1vbWVudCB9IGZyb20gXCJtb21lbnRcIjtcclxuaW1wb3J0IHtcclxuICAgIERhdGFzZXRzLFxyXG4gICAgRGF0YVBvaW50LFxyXG4gICAgUmVuZGVySW5mbyxcclxuICAgIE1vbnRoSW5mbyxcclxuICAgIERhdGFzZXQsXHJcbiAgICBTaXplLFxyXG4gICAgVHJhbnNmb3JtLFxyXG4gICAgQ2hhcnRFbGVtZW50cyxcclxuICAgIEdyYXBoVHlwZSxcclxuICAgIFZhbHVlVHlwZSxcclxufSBmcm9tIFwiLi9kYXRhXCI7XHJcbmltcG9ydCAqIGFzIGhlbHBlciBmcm9tIFwiLi9oZWxwZXJcIjtcclxuaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XHJcblxyXG5sZXQgbG9nVG9Db25zb2xlID0gZmFsc2U7XHJcbmxldCByYXRpb0NlbGxUb1RleHQgPSAyLjg7XHJcbmxldCByYXRpb0RvdFRvVGV4dCA9IDEuODtcclxuXHJcbmludGVyZmFjZSBEYXlJbmZvIHtcclxuICAgIGRhdGU6IHN0cmluZztcclxuICAgIHZhbHVlOiBudW1iZXI7XHJcbiAgICBzY2FsZWRWYWx1ZTogbnVtYmVyO1xyXG4gICAgZGF5SW5Nb250aDogbnVtYmVyO1xyXG4gICAgaXNJblRoaXNNb250aDogYm9vbGVhbjtcclxuICAgIGlzT3V0T2ZEYXRhUmFuZ2U6IGJvb2xlYW47XHJcbiAgICByb3c6IG51bWJlcjtcclxuICAgIGNvbDogbnVtYmVyO1xyXG4gICAgc2hvd0NpcmNsZTogYm9vbGVhbjtcclxuICAgIHN0cmVha0luOiBib29sZWFuO1xyXG4gICAgc3RyZWFrT3V0OiBib29sZWFuO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0b05leHREYXRhc2V0KHJlbmRlckluZm86IFJlbmRlckluZm8sIG1vbnRoSW5mbzogTW9udGhJbmZvKTogYm9vbGVhbiB7XHJcbiAgICBsZXQgZGF0YXNldElkcyA9IG1vbnRoSW5mby5kYXRhc2V0O1xyXG4gICAgaWYgKGRhdGFzZXRJZHMubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7IC8vIGZhbHNlIGlmIHNlbGVjdGVkIGRhdGFzZXQgbm90IGNoYW5nZWRcclxuXHJcbiAgICBsZXQgZGF0YXNldCA9IG51bGw7XHJcbiAgICBpZiAobW9udGhJbmZvLnNlbGVjdGVkRGF0YXNldCA9PT0gbnVsbCkge1xyXG4gICAgICAgIGZvciAobGV0IGRhdGFzZXRJZCBvZiBkYXRhc2V0SWRzKSB7XHJcbiAgICAgICAgICAgIGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgICAgIGlmIChkYXRhc2V0ICYmICFkYXRhc2V0LmdldFF1ZXJ5KCkudXNlZEFzWERhdGFzZXQpIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGF0YXNldCkge1xyXG4gICAgICAgICAgICBtb250aEluZm8uc2VsZWN0ZWREYXRhc2V0ID0gZGF0YXNldC5nZXRJZCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gdHJ1ZSBpZiBzZWxlY3RlYyBkYXRhc2V0IGNoYW5nZWRcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxldCBjdXJEYXRhc2V0SWQgPSBtb250aEluZm8uc2VsZWN0ZWREYXRhc2V0O1xyXG4gICAgICAgIGxldCBjdXJJbmRleCA9IGRhdGFzZXRJZHMuZmluZEluZGV4KChpZCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gaWQgPT09IGN1ckRhdGFzZXRJZDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoY3VySW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICBpZiAoY3VySW5kZXggPT09IG1vbnRoSW5mby5kYXRhc2V0Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgIC8vIHNlYXJjaCBmcm9tIHN0YXJ0XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBkYXRhc2V0SWQgb2YgZGF0YXNldElkcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFzZXQgJiYgIWRhdGFzZXQuZ2V0UXVlcnkoKS51c2VkQXNYRGF0YXNldCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YXNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoSW5mby5zZWxlY3RlZERhdGFzZXQgPSBkYXRhc2V0LmdldElkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIHRydWUgaWYgc2VsZWN0ZWMgZGF0YXNldCBjaGFuZ2VkXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGN1ckluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGF0YXNldElkID0gZGF0YXNldElkc1tjdXJJbmRleF07XHJcbiAgICAgICAgICAgICAgICBkYXRhc2V0ID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXREYXRhc2V0QnlJZChkYXRhc2V0SWQpO1xyXG4gICAgICAgICAgICAgICAgbW9udGhJbmZvLnNlbGVjdGVkRGF0YXNldCA9IGRhdGFzZXRJZDtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhc2V0ICYmICFkYXRhc2V0LmdldFF1ZXJ5KCkudXNlZEFzWERhdGFzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9OZXh0RGF0YXNldChyZW5kZXJJbmZvLCBtb250aEluZm8pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlQXJlYXMoXHJcbiAgICBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzLFxyXG4gICAgY2FudmFzOiBIVE1MRWxlbWVudCxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBtb250aEluZm86IE1vbnRoSW5mb1xyXG4pOiBDaGFydEVsZW1lbnRzIHtcclxuICAgIC8vIGNsZWFuIGFyZWFzXHJcbiAgICBkMy5zZWxlY3QoY2FudmFzKS5zZWxlY3QoXCIjc3ZnXCIpLnJlbW92ZSgpO1xyXG4gICAgdmFyIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY2hhcnRFbGVtZW50cyk7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgLy8gZDMuc2VsZWN0KGNoYXJ0RWxlbWVudHNbcHJvcHNbaV1dKS5yZW1vdmUoKTtcclxuICAgICAgICBkZWxldGUgY2hhcnRFbGVtZW50c1twcm9wc1tpXV07XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhjaGFydEVsZW1lbnRzKTtcclxuXHJcbiAgICAvLyB3aG9sZSBhcmVhIGZvciBwbG90dGluZywgaW5jbHVkZXMgbWFyZ2luc1xyXG4gICAgbGV0IHN2ZyA9IGQzXHJcbiAgICAgICAgLnNlbGVjdChjYW52YXMpXHJcbiAgICAgICAgLmFwcGVuZChcInN2Z1wiKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJzdmdcIilcclxuICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgXCJ3aWR0aFwiLFxyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLm1hcmdpbi5sZWZ0ICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLnJpZ2h0XHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcImhlaWdodFwiLFxyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4udG9wICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLmJvdHRvbVxyXG4gICAgICAgICk7XHJcbiAgICBjaGFydEVsZW1lbnRzW1wic3ZnXCJdID0gc3ZnO1xyXG5cclxuICAgIC8vIGdyYXBoQXJlYSwgaW5jbHVkZXMgY2hhcnRBcmVhLCB0aXRsZSwgbGVnZW5kXHJcbiAgICBsZXQgZ3JhcGhBcmVhID0gc3ZnXHJcbiAgICAgICAgLmFwcGVuZChcImdcIilcclxuICAgICAgICAuYXR0cihcImlkXCIsIFwiZ3JhcGhBcmVhXCIpXHJcbiAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgIFwidHJhbnNmb3JtXCIsXHJcbiAgICAgICAgICAgIFwidHJhbnNsYXRlKFwiICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLmxlZnQgK1xyXG4gICAgICAgICAgICAgICAgXCIsXCIgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4udG9wICtcclxuICAgICAgICAgICAgICAgIFwiKVwiXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggKyByZW5kZXJJbmZvLm1hcmdpbi5yaWdodClcclxuICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgXCJoZWlnaHRcIixcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0ICsgcmVuZGVySW5mby5tYXJnaW4uYm90dG9tXHJcbiAgICAgICAgKTtcclxuICAgIGNoYXJ0RWxlbWVudHNbXCJncmFwaEFyZWFcIl0gPSBncmFwaEFyZWE7XHJcblxyXG4gICAgLy8gZGF0YUFyZWEsIHVuZGVyIGdyYXBoQXJlYSwgaW5jbHVkZXMgcG9pbnRzLCBsaW5lcywgeEF4aXMsIHlBeGlzXHJcbiAgICBsZXQgZGF0YUFyZWEgPSBncmFwaEFyZWFcclxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJkYXRhQXJlYVwiKVxyXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGgpXHJcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0KTtcclxuICAgIGNoYXJ0RWxlbWVudHNbXCJkYXRhQXJlYVwiXSA9IGRhdGFBcmVhO1xyXG5cclxuICAgIHJldHVybiBjaGFydEVsZW1lbnRzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjbGVhclNlbGVjdGlvbihjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzLCBtb250aEluZm86IE1vbnRoSW5mbykge1xyXG4gICAgbGV0IGNpcmNsZXMgPSBjaGFydEVsZW1lbnRzLnN2Zy5zZWxlY3RBbGwoXCJjaXJjbGVcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhjaXJjbGVzKTtcclxuICAgIGZvciAobGV0IGNpcmNsZSBvZiBjaXJjbGVzKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coY2lyY2xlKTtcclxuICAgICAgICBsZXQgaWQgPSBkMy5zZWxlY3QoY2lyY2xlKS5hdHRyKFwiaWRcIik7XHJcbiAgICAgICAgaWYgKGlkICYmIGlkLnN0YXJ0c1dpdGgoXCJ0cmFja2VyLXNlbGVjdGVkLWNpcmNsZS1cIikpIHtcclxuICAgICAgICAgICAgZDMuc2VsZWN0KGNpcmNsZSkuc3R5bGUoXCJzdHJva2VcIiwgXCJub25lXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBtb250aEluZm8uc2VsZWN0ZWREYXRlID0gXCJcIjtcclxuXHJcbiAgICBjaGFydEVsZW1lbnRzLm1vbml0b3IudGV4dChcIlwiKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyTW9udGhIZWFkZXIoXHJcbiAgICBjYW52YXM6IEhUTUxFbGVtZW50LFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBtb250aEluZm86IE1vbnRoSW5mbyxcclxuICAgIGN1ck1vbnRoRGF0ZTogTW9tZW50XHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJNb250aEhlYWRlclwiKVxyXG5cclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhbW9udGhJbmZvKSByZXR1cm47XHJcblxyXG4gICAgbGV0IGN1ckRhdGFzZXRJZCA9IG1vbnRoSW5mby5zZWxlY3RlZERhdGFzZXQ7XHJcbiAgICBpZiAoY3VyRGF0YXNldElkID09PSBudWxsKSByZXR1cm47XHJcbiAgICBsZXQgZGF0YXNldCA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoY3VyRGF0YXNldElkKTtcclxuICAgIGlmICghZGF0YXNldCkgcmV0dXJuO1xyXG4gICAgbGV0IGRhdGFzZXROYW1lID0gZGF0YXNldC5nZXROYW1lKCk7XHJcblxyXG4gICAgbGV0IGN1ck1vbnRoID0gY3VyTW9udGhEYXRlLm1vbnRoKCk7IC8vIDB+MTFcclxuICAgIGxldCBjdXJEYXlzSW5Nb250aCA9IGN1ck1vbnRoRGF0ZS5kYXlzSW5Nb250aCgpOyAvLyAyOH4zMVxyXG4gICAgbGV0IGN1clllYXIgPSBjdXJNb250aERhdGUueWVhcigpO1xyXG5cclxuICAgIGxldCBtYXhEYXlUZXh0U2l6ZSA9IGhlbHBlci5tZWFzdXJlVGV4dFNpemUoXCIzMFwiLCBcInRyYWNrZXItYXhpcy1sYWJlbFwiKTtcclxuICAgIGxldCBjZWxsU2l6ZSA9XHJcbiAgICAgICAgTWF0aC5tYXgobWF4RGF5VGV4dFNpemUud2lkdGgsIG1heERheVRleHRTaXplLmhlaWdodCkgKiByYXRpb0NlbGxUb1RleHQ7XHJcbiAgICBsZXQgZG90UmFkaXVzID0gKChjZWxsU2l6ZSAvIHJhdGlvQ2VsbFRvVGV4dCkgKiByYXRpb0RvdFRvVGV4dCkgLyAyLjA7XHJcblxyXG4gICAgbGV0IGhlYWRlclllYXJUZXh0ID0gY3VyTW9udGhEYXRlLmZvcm1hdChcIllZWVlcIik7XHJcbiAgICBsZXQgaGVhZGVyTW9udGhUZXh0ID0gY3VyTW9udGhEYXRlLmZvcm1hdChcIk1NTVwiKTtcclxuICAgIGxldCBoZWFkZXJZZWFyU2l6ZSA9IGhlbHBlci5tZWFzdXJlVGV4dFNpemUoXHJcbiAgICAgICAgaGVhZGVyWWVhclRleHQsXHJcbiAgICAgICAgXCJ0cmFja2VyLW1vbnRoLWhlYWRlci15ZWFyXCJcclxuICAgICk7XHJcbiAgICBsZXQgaGVhZGVyTW9udGhTaXplID0gaGVscGVyLm1lYXN1cmVUZXh0U2l6ZShcclxuICAgICAgICBoZWFkZXJNb250aFRleHQsXHJcbiAgICAgICAgXCJ0cmFja2VyLW1vbnRoLWhlYWRlci1tb250aFwiXHJcbiAgICApO1xyXG5cclxuICAgIGxldCBoZWFkZXJIZWlnaHQgPSAwO1xyXG4gICAgbGV0IHlTcGFjaW5nID0gODtcclxuXHJcbiAgICAvLyBBcHBlbmQgaGVhZGVyIGdyb3VwXHJcbiAgICBsZXQgaGVhZGVyR3JvdXAgPSBjaGFydEVsZW1lbnRzLmdyYXBoQXJlYS5hcHBlbmQoXCJnXCIpO1xyXG5cclxuICAgIC8vIGhhZWRlciBtb250aFxyXG4gICAgbGV0IGhlYWRlck1vbnRoQ29sb3IgPSBudWxsO1xyXG4gICAgaWYgKG1vbnRoSW5mby5oZWFkZXJNb250aENvbG9yKSB7XHJcbiAgICAgICAgaGVhZGVyTW9udGhDb2xvciA9IG1vbnRoSW5mby5oZWFkZXJNb250aENvbG9yO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAobW9udGhJbmZvLmNvbG9yKSB7XHJcbiAgICAgICAgICAgIGhlYWRlck1vbnRoQ29sb3IgPSBtb250aEluZm8uY29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbGV0IGhlYWRlck1vbnRoID0gaGVhZGVyR3JvdXBcclxuICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgIC50ZXh0KGhlYWRlck1vbnRoVGV4dCkgLy8gcGl2b3QgYXQgY2VudGVyXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcInRpdGxlTW9udGhcIilcclxuICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgXCJ0cmFuc2Zvcm1cIixcclxuICAgICAgICAgICAgXCJ0cmFuc2xhdGUoXCIgKyBjZWxsU2l6ZSAvIDQuMCArIFwiLFwiICsgaGVhZGVyTW9udGhTaXplLmhlaWdodCArIFwiKVwiXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLW1vbnRoLWhlYWRlci1tb250aFwiKVxyXG4gICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcImRlZmF1bHRcIilcclxuICAgICAgICAub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZXZlbnQ6IGFueSkge1xyXG4gICAgICAgICAgICBjbGVhclNlbGVjdGlvbihjaGFydEVsZW1lbnRzLCBtb250aEluZm8pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIGlmIChoZWFkZXJNb250aENvbG9yKSB7XHJcbiAgICAgICAgaGVhZGVyTW9udGguc3R5bGUoXCJmaWxsXCIsIGhlYWRlck1vbnRoQ29sb3IpO1xyXG4gICAgfVxyXG4gICAgaGVhZGVySGVpZ2h0ICs9IGhlYWRlck1vbnRoU2l6ZS5oZWlnaHQ7XHJcblxyXG4gICAgLy8gaGVhZGVyIHllYXJcclxuICAgIGxldCBoZWFkZXJZZWFyQ29sb3IgPSBudWxsO1xyXG4gICAgaWYgKG1vbnRoSW5mby5oZWFkZXJZZWFyQ29sb3IpIHtcclxuICAgICAgICBoZWFkZXJZZWFyQ29sb3IgPSBtb250aEluZm8uaGVhZGVyWWVhckNvbG9yO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAobW9udGhJbmZvLmNvbG9yKSB7XHJcbiAgICAgICAgICAgIGhlYWRlclllYXJDb2xvciA9IG1vbnRoSW5mby5jb2xvcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBsZXQgaGVhZGVyWWVhciA9IGhlYWRlckdyb3VwXHJcbiAgICAgICAgLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAudGV4dChoZWFkZXJZZWFyVGV4dCkgLy8gcGl2b3QgYXQgY2VudGVyXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcInRpdGxlWWVhclwiKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcInRyYW5zZm9ybVwiLFxyXG4gICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArXHJcbiAgICAgICAgICAgICAgICBjZWxsU2l6ZSAvIDQuMCArXHJcbiAgICAgICAgICAgICAgICBcIixcIiArXHJcbiAgICAgICAgICAgICAgICAoaGVhZGVySGVpZ2h0ICsgaGVhZGVyWWVhclNpemUuaGVpZ2h0KSArXHJcbiAgICAgICAgICAgICAgICBcIilcIlxyXG4gICAgICAgIClcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1tb250aC1oZWFkZXIteWVhclwiKVxyXG4gICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcImRlZmF1bHRcIilcclxuICAgICAgICAuYXR0cihcImZvbnQtd2VpZ2h0XCIsIFwiYm9sZFwiKVxyXG4gICAgICAgIC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChldmVudDogYW55KSB7XHJcbiAgICAgICAgICAgIGNsZWFyU2VsZWN0aW9uKGNoYXJ0RWxlbWVudHMsIG1vbnRoSW5mbyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgaWYgKGhlYWRlclllYXJDb2xvcikge1xyXG4gICAgICAgIGhlYWRlclllYXIuc3R5bGUoXCJmaWxsXCIsIGhlYWRlclllYXJDb2xvcik7XHJcbiAgICB9XHJcblxyXG4gICAgaGVhZGVySGVpZ2h0ICs9IGhlYWRlclllYXJTaXplLmhlaWdodDtcclxuXHJcbiAgICAvLyBkYXRhc2V0IHJvdGF0b3JcclxuICAgIGxldCBkYXRhc2V0TmFtZVNpemUgPSBoZWxwZXIubWVhc3VyZVRleHRTaXplKFxyXG4gICAgICAgIGRhdGFzZXROYW1lLFxyXG4gICAgICAgIFwidHJhY2tlci1tb250aC10aXRsZS1yb3RhdG9yXCJcclxuICAgICk7XHJcbiAgICBsZXQgZGF0YXNldFJvdGF0b3IgPSBoZWFkZXJHcm91cFxyXG4gICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgICAgLnRleHQoZGF0YXNldE5hbWUpXHJcbiAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgIFwidHJhbnNmb3JtXCIsXHJcbiAgICAgICAgICAgIFwidHJhbnNsYXRlKFwiICsgMy41ICogY2VsbFNpemUgKyBcIixcIiArIGRhdGFzZXROYW1lU2l6ZS5oZWlnaHQgKyBcIilcIlxyXG4gICAgICAgIClcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1tb250aC10aXRsZS1yb3RhdG9yXCIpXHJcbiAgICAgICAgLnN0eWxlKFwiY3Vyc29yXCIsIFwicG9pbnRlclwiKVxyXG4gICAgICAgIC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChldmVudDogYW55KSB7XHJcbiAgICAgICAgICAgIC8vIHNob3cgbmV4dCB0YXJnZXRcclxuICAgICAgICAgICAgaWYgKHRvTmV4dERhdGFzZXQocmVuZGVySW5mbywgbW9udGhJbmZvKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gY2xlYXIgY2lyY2xlc1xyXG4gICAgICAgICAgICAgICAgY2xlYXJTZWxlY3Rpb24oY2hhcnRFbGVtZW50cywgbW9udGhJbmZvKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZWZyZXNoKFxyXG4gICAgICAgICAgICAgICAgICAgIGNhbnZhcyxcclxuICAgICAgICAgICAgICAgICAgICBjaGFydEVsZW1lbnRzLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckluZm8sXHJcbiAgICAgICAgICAgICAgICAgICAgbW9udGhJbmZvLFxyXG4gICAgICAgICAgICAgICAgICAgIGN1ck1vbnRoRGF0ZVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgY2hhcnRFbGVtZW50c1tcInJvdGF0b3JcIl0gPSBkYXRhc2V0Um90YXRvcjtcclxuXHJcbiAgICAvLyB2YWx1ZSBtb25pdG9yXHJcbiAgICBsZXQgbW9uaXRvclRleHRTaXplID0gaGVscGVyLm1lYXN1cmVUZXh0U2l6ZShcclxuICAgICAgICBcIjAuMDAwMFwiLFxyXG4gICAgICAgIFwidHJhY2tlci1tb250aC10aXRsZS1tb25pdG9yXCJcclxuICAgICk7XHJcbiAgICBsZXQgbW9uaXRvciA9IGhlYWRlckdyb3VwXHJcbiAgICAgICAgLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAudGV4dChcIlwiKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJtb25pdG9yXCIpXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItbW9udGgtdGl0bGUtbW9uaXRvclwiKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcInRyYW5zZm9ybVwiLFxyXG4gICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArXHJcbiAgICAgICAgICAgICAgICAzLjUgKiBjZWxsU2l6ZSArXHJcbiAgICAgICAgICAgICAgICBcIixcIiArXHJcbiAgICAgICAgICAgICAgICAoZGF0YXNldE5hbWVTaXplLmhlaWdodCArIG1vbml0b3JUZXh0U2l6ZS5oZWlnaHQpICtcclxuICAgICAgICAgICAgICAgIFwiKVwiXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcInBvaW50ZXJcIilcclxuICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIG1vbnRoSW5mby5zZWxlY3RlZFJpbmdDb2xvcik7XHJcbiAgICBjaGFydEVsZW1lbnRzW1wibW9uaXRvclwiXSA9IG1vbml0b3I7XHJcblxyXG4gICAgLy8gYXJyb3cgbGVmdFxyXG4gICAgbGV0IGFycm93U2l6ZSA9IGhlbHBlci5tZWFzdXJlVGV4dFNpemUoXCI8XCIsIFwidHJhY2tlci1tb250aC10aXRsZS1hcnJvd1wiKTtcclxuICAgIGxldCBhcnJvd0xlZnQgPSBoZWFkZXJHcm91cFxyXG4gICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgICAgLnRleHQoXCI8XCIpIC8vIHBpdm90IGF0IGNlbnRlclxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJhcnJvd0xlZnRcIilcclxuICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgXCJ0cmFuc2Zvcm1cIixcclxuICAgICAgICAgICAgXCJ0cmFuc2xhdGUoXCIgK1xyXG4gICAgICAgICAgICAgICAgNS41ICogY2VsbFNpemUgK1xyXG4gICAgICAgICAgICAgICAgXCIsXCIgK1xyXG4gICAgICAgICAgICAgICAgKGhlYWRlckhlaWdodCAvIDIgKyBhcnJvd1NpemUuaGVpZ2h0IC8gMikgK1xyXG4gICAgICAgICAgICAgICAgXCIpXCJcclxuICAgICAgICApXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItbW9udGgtdGl0bGUtYXJyb3dcIilcclxuICAgICAgICAub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZXZlbnQ6IGFueSkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImxlZnQgYXJyb3cgY2xpY2tlZFwiKTtcclxuICAgICAgICAgICAgY2xlYXJTZWxlY3Rpb24oY2hhcnRFbGVtZW50cywgbW9udGhJbmZvKTtcclxuICAgICAgICAgICAgbW9udGhJbmZvLnNlbGVjdGVkRGF0ZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIGxldCBwcmV2TW9udGhEYXRlID0gY3VyTW9udGhEYXRlLmNsb25lKCkuYWRkKC0xLCBcIm1vbnRoXCIpO1xyXG4gICAgICAgICAgICByZWZyZXNoKFxyXG4gICAgICAgICAgICAgICAgY2FudmFzLFxyXG4gICAgICAgICAgICAgICAgY2hhcnRFbGVtZW50cyxcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8sXHJcbiAgICAgICAgICAgICAgICBtb250aEluZm8sXHJcbiAgICAgICAgICAgICAgICBwcmV2TW9udGhEYXRlXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3R5bGUoXCJjdXJzb3JcIiwgXCJwb2ludGVyXCIpO1xyXG5cclxuICAgIC8vIGFycm93IHJpZ2h0XHJcbiAgICBsZXQgYXJyb3dSaWdodCA9IGhlYWRlckdyb3VwXHJcbiAgICAgICAgLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAudGV4dChcIj5cIikgLy8gcGl2b3QgYXQgY2VudGVyXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcImFycm93TGVmdFwiKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcInRyYW5zZm9ybVwiLFxyXG4gICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArXHJcbiAgICAgICAgICAgICAgICA2LjUgKiBjZWxsU2l6ZSArXHJcbiAgICAgICAgICAgICAgICBcIixcIiArXHJcbiAgICAgICAgICAgICAgICAoaGVhZGVySGVpZ2h0IC8gMiArIGFycm93U2l6ZS5oZWlnaHQgLyAyKSArXHJcbiAgICAgICAgICAgICAgICBcIilcIlxyXG4gICAgICAgIClcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1tb250aC10aXRsZS1hcnJvd1wiKVxyXG4gICAgICAgIC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChldmVudDogYW55KSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwicmlnaHQgYXJyb3cgY2xpY2tlZFwiKTtcclxuICAgICAgICAgICAgY2xlYXJTZWxlY3Rpb24oY2hhcnRFbGVtZW50cywgbW9udGhJbmZvKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBuZXh0TW9udGhEYXRlID0gY3VyTW9udGhEYXRlLmNsb25lKCkuYWRkKDEsIFwibW9udGhcIik7XHJcbiAgICAgICAgICAgIHJlZnJlc2goXHJcbiAgICAgICAgICAgICAgICBjYW52YXMsXHJcbiAgICAgICAgICAgICAgICBjaGFydEVsZW1lbnRzLFxyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mbyxcclxuICAgICAgICAgICAgICAgIG1vbnRoSW5mbyxcclxuICAgICAgICAgICAgICAgIG5leHRNb250aERhdGVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcInBvaW50ZXJcIik7XHJcblxyXG4gICAgLy8gYXJyb3cgdG9kYXlcclxuICAgIGxldCBhcnJvd1RvZGF5ID0gaGVhZGVyR3JvdXBcclxuICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgIC50ZXh0KFwi4pemXCIpIC8vIHBpdm90IGF0IGNlbnRlclxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJhcnJvd1RvZGF5XCIpXHJcbiAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgIFwidHJhbnNmb3JtXCIsXHJcbiAgICAgICAgICAgIFwidHJhbnNsYXRlKFwiICtcclxuICAgICAgICAgICAgICAgIDYgKiBjZWxsU2l6ZSArXHJcbiAgICAgICAgICAgICAgICBcIixcIiArXHJcbiAgICAgICAgICAgICAgICAoaGVhZGVySGVpZ2h0IC8gMiArIGFycm93U2l6ZS5oZWlnaHQgLyAyKSArXHJcbiAgICAgICAgICAgICAgICBcIilcIlxyXG4gICAgICAgIClcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1tb250aC10aXRsZS1hcnJvd1wiKVxyXG4gICAgICAgIC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChldmVudDogYW55KSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwidG9kYXkgYXJyb3cgY2xpY2tlZFwiKTtcclxuICAgICAgICAgICAgY2xlYXJTZWxlY3Rpb24oY2hhcnRFbGVtZW50cywgbW9udGhJbmZvKTtcclxuXHJcbiAgICAgICAgICAgIGxldCB0b2RheURhdGUgPSBoZWxwZXIuZ2V0RGF0ZVRvZGF5KHJlbmRlckluZm8uZGF0ZUZvcm1hdCk7XHJcbiAgICAgICAgICAgIHJlZnJlc2goY2FudmFzLCBjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvLCBtb250aEluZm8sIHRvZGF5RGF0ZSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3R5bGUoXCJjdXJzb3JcIiwgXCJwb2ludGVyXCIpO1xyXG5cclxuICAgIGhlYWRlckhlaWdodCArPSB5U3BhY2luZztcclxuXHJcbiAgICAvLyB3ZWVrIGRheSBuYW1lc1xyXG4gICAgbGV0IHdlZWtkYXlOYW1lcyA9IFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXTtcclxuICAgIGlmIChtb250aEluZm8uc3RhcnRXZWVrT24udG9Mb3dlckNhc2UoKSA9PT0gXCJtb25cIikge1xyXG4gICAgICAgIHdlZWtkYXlOYW1lcy5wdXNoKHdlZWtkYXlOYW1lcy5zaGlmdCgpKTtcclxuICAgIH1cclxuICAgIGxldCB3ZWVrZGF5TmFtZVNpemUgPSBoZWxwZXIubWVhc3VyZVRleHRTaXplKFxyXG4gICAgICAgIHdlZWtkYXlOYW1lc1swXSxcclxuICAgICAgICBcInRyYWNrZXItbW9udGgtd2Vla2RheVwiXHJcbiAgICApO1xyXG4gICAgbGV0IHdlZWtEYXlzID0gY2hhcnRFbGVtZW50cy5ncmFwaEFyZWFcclxuICAgICAgICAuc2VsZWN0QWxsKFwid2Vla0RheXNcIilcclxuICAgICAgICAuZGF0YSh3ZWVrZGF5TmFtZXMpXHJcbiAgICAgICAgLmVudGVyKClcclxuICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgIC50ZXh0KGZ1bmN0aW9uIChuOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG47XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAobjogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgbGV0IHN0clRyYW5zbGF0ZSA9XHJcbiAgICAgICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArXHJcbiAgICAgICAgICAgICAgICAoaSArIDAuNSkgKiBjZWxsU2l6ZSArXHJcbiAgICAgICAgICAgICAgICBcIixcIiArXHJcbiAgICAgICAgICAgICAgICAoaGVhZGVySGVpZ2h0ICsgd2Vla2RheU5hbWVTaXplLmhlaWdodCkgK1xyXG4gICAgICAgICAgICAgICAgXCIpXCI7XHJcbiAgICAgICAgICAgIHJldHVybiBzdHJUcmFuc2xhdGU7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1tb250aC13ZWVrZGF5XCIpXHJcbiAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxyXG4gICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcImRlZmF1bHRcIilcclxuICAgICAgICAub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZXZlbnQ6IGFueSkge1xyXG4gICAgICAgICAgICBjbGVhclNlbGVjdGlvbihjaGFydEVsZW1lbnRzLCBtb250aEluZm8pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgaGVhZGVySGVpZ2h0ICs9IHdlZWtkYXlOYW1lU2l6ZS5oZWlnaHQgKyB5U3BhY2luZztcclxuXHJcbiAgICAvLyBkaXZpZGluZyBsaW5lXHJcbiAgICBsZXQgZGl2aWRpbmdMaW5lSGVpZ2h0ID0gMTtcclxuICAgIGxldCBkaXZpZGluZ0xpbmVDb2xvciA9IG51bGw7XHJcbiAgICBpZiAobW9udGhJbmZvLmRpdmlkaW5nTGluZUNvbG9yKSB7XHJcbiAgICAgICAgZGl2aWRpbmdMaW5lQ29sb3IgPSBtb250aEluZm8uZGl2aWRpbmdMaW5lQ29sb3I7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChtb250aEluZm8uY29sb3IpIHtcclxuICAgICAgICAgICAgZGl2aWRpbmdMaW5lQ29sb3IgPSBtb250aEluZm8uY29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbGV0IGRpdmlkaW5nTGluZSA9IGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhXHJcbiAgICAgICAgLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAuYXR0cihcInhcIiwgMClcclxuICAgICAgICAuYXR0cihcInlcIiwgaGVhZGVySGVpZ2h0KVxyXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgNi41ICogY2VsbFNpemUgKyB3ZWVrZGF5TmFtZVNpemUud2lkdGgpXHJcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZGl2aWRpbmdMaW5lSGVpZ2h0KVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLW1vbnRoLWRpdmlkaW5nLWxpbmVcIik7XHJcblxyXG4gICAgaWYgKGRpdmlkaW5nTGluZUNvbG9yKSB7XHJcbiAgICAgICAgZGl2aWRpbmdMaW5lLnN0eWxlKFwiZmlsbFwiLCBkaXZpZGluZ0xpbmVDb2xvcik7XHJcbiAgICB9XHJcbiAgICBoZWFkZXJIZWlnaHQgKz0gZGl2aWRpbmdMaW5lSGVpZ2h0O1xyXG5cclxuICAgIGhlYWRlckdyb3VwLmF0dHIoXCJoZWlnaHRcIiwgaGVhZGVySGVpZ2h0KTtcclxuICAgIGNoYXJ0RWxlbWVudHNbXCJoZWFkZXJcIl0gPSBoZWFkZXJHcm91cDtcclxuXHJcbiAgICAvLyBNb3ZlIHNpYmxpbmcgYXJlYXNcclxuICAgIGhlbHBlci5tb3ZlQXJlYShjaGFydEVsZW1lbnRzLmRhdGFBcmVhLCAwLCBoZWFkZXJIZWlnaHQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJNb250aERheXMoXHJcbiAgICBjYW52YXM6IEhUTUxFbGVtZW50LFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBtb250aEluZm86IE1vbnRoSW5mbyxcclxuICAgIGN1ck1vbnRoRGF0ZTogTW9tZW50XHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJNb250aERheXNcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvKTtcclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhbW9udGhJbmZvKSByZXR1cm47XHJcblxyXG4gICAgbGV0IGN1ckRhdGFzZXRJZCA9IG1vbnRoSW5mby5zZWxlY3RlZERhdGFzZXQ7XHJcbiAgICBpZiAoY3VyRGF0YXNldElkID09PSBudWxsKSByZXR1cm47XHJcbiAgICBsZXQgZGF0YXNldCA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoY3VyRGF0YXNldElkKTtcclxuICAgIGlmICghZGF0YXNldCkgcmV0dXJuO1xyXG5cclxuICAgIGxldCBjdXJEYXRhc2V0SW5kZXggPSBtb250aEluZm8uZGF0YXNldC5maW5kSW5kZXgoKGlkKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGlkID09PSBjdXJEYXRhc2V0SWQ7XHJcbiAgICB9KTtcclxuICAgIGxldCB0aHJlc2hvbGQgPSBtb250aEluZm8udGhyZXNob2xkW2N1ckRhdGFzZXRJbmRleF07XHJcblxyXG4gICAgbGV0IGN1ck1vbnRoID0gY3VyTW9udGhEYXRlLm1vbnRoKCk7IC8vIDB+MTFcclxuICAgIGxldCBjdXJEYXlzSW5Nb250aCA9IGN1ck1vbnRoRGF0ZS5kYXlzSW5Nb250aCgpOyAvLyAyOH4zMVxyXG5cclxuICAgIGxldCBtYXhEYXlUZXh0U2l6ZSA9IGhlbHBlci5tZWFzdXJlVGV4dFNpemUoXCIzMFwiLCBcInRyYWNrZXItYXhpcy1sYWJlbFwiKTtcclxuICAgIGxldCBjZWxsU2l6ZSA9XHJcbiAgICAgICAgTWF0aC5tYXgobWF4RGF5VGV4dFNpemUud2lkdGgsIG1heERheVRleHRTaXplLmhlaWdodCkgKiByYXRpb0NlbGxUb1RleHQ7XHJcbiAgICBsZXQgZG90UmFkaXVzID0gKChjZWxsU2l6ZSAvIHJhdGlvQ2VsbFRvVGV4dCkgKiByYXRpb0RvdFRvVGV4dCkgLyAyLjA7XHJcbiAgICBsZXQgc3RyZWFrV2lkdGggPSAoY2VsbFNpemUgLSBkb3RSYWRpdXMgKiAyLjApIC8gMi4wO1xyXG4gICAgbGV0IHN0cmVha0hlaWdodCA9IDM7XHJcblxyXG4gICAgLy8gR2V0IG1pbiBhbmQgbWF4XHJcbiAgICBsZXQgeU1pbiA9IGQzLm1pbihkYXRhc2V0LmdldFZhbHVlcygpKTtcclxuICAgIGlmIChtb250aEluZm8ueU1pbltjdXJEYXRhc2V0SW5kZXhdICE9PSBudWxsKSB7XHJcbiAgICAgICAgeU1pbiA9IG1vbnRoSW5mby55TWluW2N1ckRhdGFzZXRJbmRleF07XHJcbiAgICB9XHJcbiAgICBsZXQgeU1heCA9IGQzLm1heChkYXRhc2V0LmdldFZhbHVlcygpKTtcclxuICAgIGlmIChtb250aEluZm8ueU1heFtjdXJEYXRhc2V0SW5kZXhdICE9PSBudWxsKSB7XHJcbiAgICAgICAgeU1heCA9IG1vbnRoSW5mby55TWF4W2N1ckRhdGFzZXRJbmRleF07XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhgeU1pbjoke3lNaW59LCB5TWF4OiR7eU1heH1gKTtcclxuICAgIGxldCBhbGxvd1NjYWxlZFZhbHVlID0gdHJ1ZTtcclxuICAgIGlmICh5TWF4ID09PSBudWxsIHx8IHlNaW4gPT09IG51bGwgfHwgeU1heCA8PSB5TWluKSB7XHJcbiAgICAgICAgLy8gc2NhbGVkVmFsdWUgY2FuIG5vdCBiZSBjYWxjdWxhdGVkLCBkbyBub3QgdXNlIGdyYWRpZW50IGNvbG9yXHJcbiAgICAgICAgYWxsb3dTY2FsZWRWYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwic2NhbGVkVmFsdWUgbm90IGFsbG93ZWRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RhcnQgYW5kIGVuZFxyXG4gICAgY29uc3QgbW9udGhTdGFydERhdGUgPSBjdXJNb250aERhdGUuY2xvbmUoKS5zdGFydE9mKFwibW9udGhcIik7XHJcbiAgICBsZXQgc3RhcnREYXRlID0gbW9udGhTdGFydERhdGVcclxuICAgICAgICAuY2xvbmUoKVxyXG4gICAgICAgIC5zdWJ0cmFjdChtb250aFN0YXJ0RGF0ZS5kYXkoKSwgXCJkYXlzXCIpO1xyXG4gICAgaWYgKG1vbnRoSW5mby5zdGFydFdlZWtPbi50b0xvd2VyQ2FzZSgpID09PSBcIm1vblwiKSB7XHJcbiAgICAgICAgc3RhcnREYXRlID0gc3RhcnREYXRlLmFkZCgxLCBcImRheXNcIik7XHJcbiAgICB9XHJcbiAgICBjb25zdCBtb250aEVuZERhdGUgPSBjdXJNb250aERhdGUuY2xvbmUoKS5lbmRPZihcIm1vbnRoXCIpO1xyXG4gICAgbGV0IGVuZERhdGUgPSBtb250aEVuZERhdGUuY2xvbmUoKS5hZGQoNyAtIG1vbnRoRW5kRGF0ZS5kYXkoKSAtIDEsIFwiZGF5c1wiKTtcclxuICAgIGlmIChtb250aEluZm8uc3RhcnRXZWVrT24udG9Mb3dlckNhc2UoKSA9PT0gXCJtb25cIikge1xyXG4gICAgICAgIGVuZERhdGUgPSBlbmREYXRlLmFkZCgxLCBcImRheXNcIik7XHJcbiAgICB9XHJcbiAgICBjb25zdCBkYXRhU3RhcnREYXRlID0gZGF0YXNldC5nZXRTdGFydERhdGUoKTtcclxuICAgIGNvbnN0IGRhdGFFbmREYXRlID0gZGF0YXNldC5nZXRFbmREYXRlKCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhtb250aFN0YXJ0RGF0ZS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHN0YXJ0RGF0ZS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpKTtcclxuXHJcbiAgICAvLyBQcmVwYXJlIGRhdGEgZm9yIGdyYXBoXHJcbiAgICBsZXQgZGF5c0luTW9udGhWaWV3OiBBcnJheTxEYXlJbmZvPiA9IFtdO1xyXG4gICAgbGV0IGluZENvbCA9IDA7XHJcbiAgICBsZXQgaW5kUm93ID0gMDtcclxuICAgIGxldCBpbmQgPSAwO1xyXG4gICAgZm9yIChcclxuICAgICAgICBsZXQgY3VyRGF0ZSA9IHN0YXJ0RGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgIGN1ckRhdGUgPD0gZW5kRGF0ZTtcclxuICAgICAgICBjdXJEYXRlLmFkZCgxLCBcImRheXNcIilcclxuICAgICkge1xyXG4gICAgICAgIGlmIChtb250aEluZm8uc3RhcnRXZWVrT24udG9Mb3dlckNhc2UoKSA9PT0gXCJtb25cIikge1xyXG4gICAgICAgICAgICBpbmRDb2wgPSBjdXJEYXRlLmRheSgpIC0gMTtcclxuICAgICAgICAgICAgaWYgKGluZENvbCA8IDApIHtcclxuICAgICAgICAgICAgICAgIGluZENvbCA9IDY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5kUm93ID0gTWF0aC5mbG9vcihpbmQgLyA3KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpbmRDb2wgPSBjdXJEYXRlLmRheSgpOyAvLyAwfjZcclxuICAgICAgICAgICAgaW5kUm93ID0gTWF0aC5mbG9vcihpbmQgLyA3KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGlzIHRoaXMgZGF5IGluIHRoaXMgbW9udGhcclxuICAgICAgICBsZXQgaXNJblRoaXNNb250aCA9IHRydWU7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBjdXJEYXRlLmRpZmYobW9udGhTdGFydERhdGUpIDwgMCB8fFxyXG4gICAgICAgICAgICBjdXJEYXRlLmRpZmYobW9udGhFbmREYXRlKSA+IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgaXNJblRoaXNNb250aCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpcyB0aGlzIGRheSBvdXQgb2YgZGF0YSByYW5nZVxyXG4gICAgICAgIGxldCBpc091dE9mRGF0YVJhbmdlID0gdHJ1ZTtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIGRhdGFTdGFydERhdGUgJiZcclxuICAgICAgICAgICAgZGF0YUVuZERhdGUgJiZcclxuICAgICAgICAgICAgY3VyRGF0ZS5kaWZmKGRhdGFTdGFydERhdGUpID49IDAgJiZcclxuICAgICAgICAgICAgY3VyRGF0ZS5kaWZmKGRhdGFFbmREYXRlKSA8PSAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlzT3V0T2ZEYXRhUmFuZ2UgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGN1clZhbHVlXHJcbiAgICAgICAgbGV0IGN1clZhbHVlID0gZGF0YXNldC5nZXRWYWx1ZShjdXJEYXRlKTtcclxuXHJcbiAgICAgICAgLy8gc2hvd0NpcmNsZVxyXG4gICAgICAgIGxldCBzaG93Q2lyY2xlID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKCFtb250aEluZm8uY2lyY2xlQ29sb3JCeVZhbHVlKSB7XHJcbiAgICAgICAgICAgIC8vIHNob3duIG9yIG5vdCBzaG93blxyXG4gICAgICAgICAgICBpZiAoY3VyVmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJWYWx1ZSA+IHRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3dDaXJjbGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCFhbGxvd1NjYWxlZFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VyVmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VyVmFsdWUgPiB0aHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NpcmNsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2hvd0NpcmNsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHNjYWxlZFZhbHVlXHJcbiAgICAgICAgbGV0IHNjYWxlZFZhbHVlID0gbnVsbDtcclxuICAgICAgICBpZiAobW9udGhJbmZvLmNpcmNsZUNvbG9yQnlWYWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoYWxsb3dTY2FsZWRWYWx1ZSAmJiBjdXJWYWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgc2NhbGVkVmFsdWUgPSAoY3VyVmFsdWUgLSB5TWluKSAvICh5TWF4IC0geU1pbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coeU1pbik7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coeU1heCk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coc2NhbGVkVmFsdWUpO1xyXG5cclxuICAgICAgICAvLyBpZiAoY3VyRGF0ZS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpID09PSBcIjIwMjEtMTEtMDJcIikge1xyXG4gICAgICAgIC8vICAgICBsb2dUb0NvbnNvbGUgPSB0cnVlO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgLy8gc3RyZWFrSW4gYW5kIHN0cmVha091dFxyXG4gICAgICAgIGxldCBuZXh0VmFsdWUgPSBkYXRhc2V0LmdldFZhbHVlKGN1ckRhdGUsIDEpO1xyXG4gICAgICAgIGxldCBwcmV2VmFsdWUgPSBkYXRhc2V0LmdldFZhbHVlKGN1ckRhdGUsIC0xKTtcclxuICAgICAgICBsZXQgc3RyZWFrSW4gPSBmYWxzZTtcclxuICAgICAgICBpZiAoY3VyVmFsdWUgIT09IG51bGwgJiYgY3VyVmFsdWUgPiB0aHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgaWYgKHByZXZWYWx1ZSAhPT0gbnVsbCAmJiBwcmV2VmFsdWUgPiB0aHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgIHN0cmVha0luID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgc3RyZWFrT3V0ID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKGN1clZhbHVlICE9PSBudWxsICYmIGN1clZhbHVlID4gdGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgIGlmIChuZXh0VmFsdWUgIT09IG51bGwgJiYgbmV4dFZhbHVlID4gdGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgICAgICBzdHJlYWtPdXQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGlmIChsb2dUb0NvbnNvbGUpIHtcclxuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coYHByZVZhbHVlOiAke3ByZXZWYWx1ZX0sIGN1clZhbHVlOiAke2N1clZhbHVlfSwgbmV4dFZhbHVlOiAke25leHRWYWx1ZX1gKTtcclxuICAgICAgICAvLyAgICAgY29uc29sZS5sb2cobW9udGhJbmZvLnRocmVzaG9sZCk7XHJcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKGBzdHJlYWtJbjogJHtzdHJlYWtJbn0sIHN0cmVha091dDogJHtzdHJlYWtPdXR9YCk7XHJcbiAgICAgICAgLy8gICAgIGxvZ1RvQ29uc29sZSA9IGZhbHNlO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgZGF5c0luTW9udGhWaWV3LnB1c2goe1xyXG4gICAgICAgICAgICBkYXRlOiBoZWxwZXIuZGF0ZVRvU3RyKGN1ckRhdGUsIHJlbmRlckluZm8uZGF0ZUZvcm1hdCksXHJcbiAgICAgICAgICAgIHZhbHVlOiBjdXJWYWx1ZSxcclxuICAgICAgICAgICAgc2NhbGVkVmFsdWU6IHNjYWxlZFZhbHVlLFxyXG4gICAgICAgICAgICBkYXlJbk1vbnRoOiBjdXJEYXRlLmRhdGUoKSxcclxuICAgICAgICAgICAgaXNJblRoaXNNb250aDogaXNJblRoaXNNb250aCxcclxuICAgICAgICAgICAgaXNPdXRPZkRhdGFSYW5nZTogaXNPdXRPZkRhdGFSYW5nZSxcclxuICAgICAgICAgICAgcm93OiBpbmRSb3csXHJcbiAgICAgICAgICAgIGNvbDogaW5kQ29sLFxyXG4gICAgICAgICAgICBzaG93Q2lyY2xlOiBzaG93Q2lyY2xlLFxyXG4gICAgICAgICAgICBzdHJlYWtJbjogc3RyZWFrSW4sXHJcbiAgICAgICAgICAgIHN0cmVha091dDogc3RyZWFrT3V0LFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpbmQrKztcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKGRheXNJbk1vbnRoVmlldyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhkYXlzSW5Nb250aFZpZXcuZmlsdGVyKGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIGQuc3RyZWFrSW47XHJcbiAgICAvLyB9KSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhkYXlzSW5Nb250aFZpZXcuZmlsdGVyKGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIGQuc3RyZWFrT3V0O1xyXG4gICAgLy8gfSkpO1xyXG5cclxuICAgIC8vIHNjYWxlXHJcbiAgICBsZXQgdG90YWxEYXlCbG9ja1dpZHRoID0gKGluZENvbCArIDEpICogY2VsbFNpemU7XHJcbiAgICBsZXQgdG90YWxCbG9ja0hlaWdodCA9IChpbmRSb3cgKyAxKSAqIGNlbGxTaXplO1xyXG4gICAgbGV0IHNjYWxlID0gZDNcclxuICAgICAgICAuc2NhbGVMaW5lYXIoKVxyXG4gICAgICAgIC5kb21haW4oWy0wLjUsIDYuNV0pXHJcbiAgICAgICAgLnJhbmdlKFswLCB0b3RhbERheUJsb2NrV2lkdGhdKTtcclxuXHJcbiAgICAvLyBzdHJlYWsgbGluZXNcclxuICAgIGlmIChtb250aEluZm8uc2hvd1N0cmVhaykge1xyXG4gICAgICAgIGxldCBzdHJlYWtDb2xvciA9IFwiIzY5YjNhMlwiO1xyXG4gICAgICAgIGlmIChtb250aEluZm8uY2lyY2xlQ29sb3IpIHtcclxuICAgICAgICAgICAgc3RyZWFrQ29sb3IgPSBtb250aEluZm8uY2lyY2xlQ29sb3I7XHJcbiAgICAgICAgfSBlbHNlIGlmIChtb250aEluZm8uY29sb3IpIHtcclxuICAgICAgICAgICAgc3RyZWFrQ29sb3IgPSBtb250aEluZm8uY29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHN0cmVha0NvbG9yKTtcclxuXHJcbiAgICAgICAgY2hhcnRFbGVtZW50cy5kYXRhQXJlYVxyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwic3RyZWFrSW5cIilcclxuICAgICAgICAgICAgLmRhdGEoXHJcbiAgICAgICAgICAgICAgICBkYXlzSW5Nb250aFZpZXcuZmlsdGVyKGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuc3RyZWFrSW47XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXHJcbiAgICAgICAgICAgIC8vIC5hdHRyKFwiaWRcIiwgZnVuY3Rpb24oZDogRGF5SW5mbykge1xyXG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIFwiaW5cIiArIGQuZGF0ZS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpO1xyXG4gICAgICAgICAgICAvLyB9KVxyXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgICAgIGxldCB4ID0gc2NhbGUoZC5jb2wpIC0gZG90UmFkaXVzIC0gc3RyZWFrV2lkdGg7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geDtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NhbGUoZC5yb3cpIC0gc3RyZWFrSGVpZ2h0IC8gMi4wO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHN0cmVha1dpZHRoKVxyXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBzdHJlYWtIZWlnaHQpXHJcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgICAgIGlmIChkLnNob3dDaXJjbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW1vbnRoSW5mby5jaXJjbGVDb2xvckJ5VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmVha0NvbG9yO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZC5zY2FsZWRWYWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDMuaW50ZXJwb2xhdGVMYWIoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIndoaXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYWtDb2xvclxyXG4gICAgICAgICAgICAgICAgICAgICAgICApKGQuc2NhbGVkVmFsdWUgKiAwLjggKyAwLjIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJlYWtDb2xvcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJub25lXCI7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICBkLmlzT3V0T2ZEYXRhUmFuZ2UgfHxcclxuICAgICAgICAgICAgICAgICAgICAobW9udGhJbmZvLmRpbU5vdEluTW9udGggJiYgIWQuaXNJblRoaXNNb250aClcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwLjI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMS4wO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY2hhcnRFbGVtZW50cy5kYXRhQXJlYVxyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwic3RyZWFrT3V0XCIpXHJcbiAgICAgICAgICAgIC5kYXRhKFxyXG4gICAgICAgICAgICAgICAgZGF5c0luTW9udGhWaWV3LmZpbHRlcihmdW5jdGlvbiAoZDogRGF5SW5mbykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnN0cmVha091dDtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAgICAgLy8gLmF0dHIoXCJpZFwiLCBmdW5jdGlvbihkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gXCJvdXRcIiArIGQuZGF0ZS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpO1xyXG4gICAgICAgICAgICAvLyB9KVxyXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgICAgIGxldCB4ID0gc2NhbGUoZC5jb2wpICsgZG90UmFkaXVzO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbiAoZDogRGF5SW5mbykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjYWxlKGQucm93KSAtIHN0cmVha0hlaWdodCAvIDIuMDtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzdHJlYWtXaWR0aClcclxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgc3RyZWFrSGVpZ2h0KVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZC5zaG93Q2lyY2xlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtb250aEluZm8uY2lyY2xlQ29sb3JCeVZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJlYWtDb2xvcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQuc2NhbGVkVmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQzLmludGVycG9sYXRlTGFiKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ3aGl0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFrQ29sb3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgKShkLnNjYWxlZFZhbHVlICogMC44ICsgMC4yKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyZWFrQ29sb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwibm9uZVwiO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgZC5pc091dE9mRGF0YVJhbmdlIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKG1vbnRoSW5mby5kaW1Ob3RJbk1vbnRoICYmICFkLmlzSW5UaGlzTW9udGgpXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMC4yO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDEuMDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY2lyY2xlc1xyXG4gICAgbGV0IGNpcmNsZUNvbG9yID0gXCIjNjliM2EyXCI7XHJcbiAgICBpZiAobW9udGhJbmZvLmNpcmNsZUNvbG9yKSB7XHJcbiAgICAgICAgY2lyY2xlQ29sb3IgPSBtb250aEluZm8uY2lyY2xlQ29sb3I7XHJcbiAgICB9IGVsc2UgaWYgKG1vbnRoSW5mby5jb2xvcikge1xyXG4gICAgICAgIGNpcmNsZUNvbG9yID0gbW9udGhJbmZvLmNvbG9yO1xyXG4gICAgfVxyXG4gICAgaWYgKG1vbnRoSW5mby5zaG93Q2lyY2xlKSB7XHJcbiAgICAgICAgbGV0IGRvdHMgPSBjaGFydEVsZW1lbnRzLmRhdGFBcmVhXHJcbiAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJkb3RcIilcclxuICAgICAgICAgICAgLmRhdGEoZGF5c0luTW9udGhWaWV3KVxyXG4gICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAuYXBwZW5kKFwiY2lyY2xlXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiclwiLCBkb3RSYWRpdXMpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzY2FsZShkLmNvbCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzY2FsZShkLnJvdyk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgICAgIGlmIChkLnNob3dDaXJjbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW1vbnRoSW5mby5jaXJjbGVDb2xvckJ5VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNpcmNsZUNvbG9yO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZC5zY2FsZWRWYWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2NhbGVkQ29sb3IgPSBkMy5pbnRlcnBvbGF0ZUxhYihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwid2hpdGVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpcmNsZUNvbG9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkoZC5zY2FsZWRWYWx1ZSAqIDAuOCArIDAuMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGQuc2NhbGVkVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhzY2FsZWRDb2xvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzY2FsZWRDb2xvcjtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2lyY2xlQ29sb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwibm9uZVwiO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgZC5pc091dE9mRGF0YVJhbmdlIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKG1vbnRoSW5mby5kaW1Ob3RJbk1vbnRoICYmICFkLmlzSW5UaGlzTW9udGgpXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMC4yO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDEuMDtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0eWxlKFwiY3Vyc29yXCIsIFwiZGVmYXVsdFwiKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyB0b2RheSByaW5nc1xyXG4gICAgbGV0IHRvZGF5ID0gaGVscGVyLmRhdGVUb1N0cih3aW5kb3cubW9tZW50KCksIHJlbmRlckluZm8uZGF0ZUZvcm1hdCk7XHJcbiAgICBpZiAobW9udGhJbmZvLnNob3dUb2RheVJpbmcpIHtcclxuICAgICAgICBsZXQgdG9kYXlSaW5ncyA9IGNoYXJ0RWxlbWVudHMuZGF0YUFyZWFcclxuICAgICAgICAgICAgLnNlbGVjdEFsbChcInRvZGF5UmluZ1wiKVxyXG4gICAgICAgICAgICAuZGF0YShcclxuICAgICAgICAgICAgICAgIGRheXNJbk1vbnRoVmlldy5maWx0ZXIoZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5kYXRlID09PSB0b2RheTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZChcImNpcmNsZVwiKVxyXG4gICAgICAgICAgICAuYXR0cihcInJcIiwgZG90UmFkaXVzICogMC45KVxyXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NhbGUoZC5jb2wpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NhbGUoZC5yb3cpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1tb250aC10b2RheS1jaXJjbGVcIikgLy8gc3Ryb2tlIG5vdCB3b3Jrcz8/XHJcbiAgICAgICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcImRlZmF1bHRcIik7XHJcblxyXG4gICAgICAgIGlmIChtb250aEluZm8udG9kYXlSaW5nQ29sb3IgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgdG9kYXlSaW5ncy5zdHlsZShcInN0cm9rZVwiLCBtb250aEluZm8udG9kYXlSaW5nQ29sb3IpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRvZGF5UmluZ3Muc3R5bGUoXCJzdHJva2VcIiwgXCJ3aGl0ZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc2VsZWN0ZWQgcmluZ3NcclxuICAgIGlmIChtb250aEluZm8uc2hvd1NlbGVjdGVkUmluZykge1xyXG4gICAgICAgIGxldCBzZWxlY3RlZFJpbmdzID0gY2hhcnRFbGVtZW50cy5kYXRhQXJlYVxyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwic2VsZWN0ZWRSaW5nXCIpXHJcbiAgICAgICAgICAgIC5kYXRhKGRheXNJbk1vbnRoVmlldylcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZChcImNpcmNsZVwiKVxyXG4gICAgICAgICAgICAuYXR0cihcInJcIiwgZG90UmFkaXVzKVxyXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NhbGUoZC5jb2wpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NhbGUoZC5yb3cpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcImlkXCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJ0cmFja2VyLXNlbGVjdGVkLWNpcmNsZS1cIiArIGQuZGF0ZTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItbW9udGgtc2VsZWN0ZWQtY2lyY2xlXCIpIC8vIHN0cm9rZSBub3Qgd29ya3M/P1xyXG4gICAgICAgICAgICAuc3R5bGUoXCJjdXJzb3JcIiwgXCJkZWZhdWx0XCIpXHJcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcIm5vbmVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbGFiZWxzXHJcbiAgICBsZXQgZGF5TGFiYWxzID0gY2hhcnRFbGVtZW50cy5kYXRhQXJlYVxyXG4gICAgICAgIC5zZWxlY3RBbGwoXCJkYXlMYWJlbFwiKVxyXG4gICAgICAgIC5kYXRhKGRheXNJbk1vbnRoVmlldylcclxuICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgICAgLnRleHQoZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGQuZGF5SW5Nb250aC50b1N0cmluZygpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgbGV0IHN0clRyYW5zbGF0ZSA9XHJcbiAgICAgICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArXHJcbiAgICAgICAgICAgICAgICBzY2FsZShkLmNvbCkgK1xyXG4gICAgICAgICAgICAgICAgXCIsXCIgK1xyXG4gICAgICAgICAgICAgICAgKHNjYWxlKGQucm93KSArIG1heERheVRleHRTaXplLmhlaWdodCAvIDQpICtcclxuICAgICAgICAgICAgICAgIFwiKVwiO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHN0clRyYW5zbGF0ZTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdHlsZShcImZpbGwtb3BhY2l0eVwiLCBmdW5jdGlvbiAoZDogRGF5SW5mbykge1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICBkLmlzT3V0T2ZEYXRhUmFuZ2UgfHxcclxuICAgICAgICAgICAgICAgIChtb250aEluZm8uZGltTm90SW5Nb250aCAmJiAhZC5pc0luVGhpc01vbnRoKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwLjI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIDEuMDtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5hdHRyKFwiZGF0ZVwiLCBmdW5jdGlvbiAoZDogRGF5SW5mbykge1xyXG4gICAgICAgICAgICByZXR1cm4gZC5kYXRlO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmF0dHIoXCJ2YWx1ZVwiLCBmdW5jdGlvbiAoZDogRGF5SW5mbykge1xyXG4gICAgICAgICAgICByZXR1cm4gZC52YWx1ZTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5hdHRyKFwidmFsdWVUeXBlXCIsIGZ1bmN0aW9uIChkOiBEYXlJbmZvKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBWYWx1ZVR5cGVbZGF0YXNldC52YWx1ZVR5cGVdO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItYXhpcy1sYWJlbFwiKVxyXG4gICAgICAgIC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChldmVudDogYW55KSB7XHJcbiAgICAgICAgICAgIC8vIGNsZWFyIGNpcmNsZXNcclxuICAgICAgICAgICAgY2xlYXJTZWxlY3Rpb24oY2hhcnRFbGVtZW50cywgbW9udGhJbmZvKTtcclxuICAgICAgICAgICAgLy8gc2hvdyBuZXcgc2VsZWN0ZWQgY2lyY2xlXHJcbiAgICAgICAgICAgIGxldCBkYXRlID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoXCJkYXRlXCIpO1xyXG4gICAgICAgICAgICBtb250aEluZm8uc2VsZWN0ZWREYXRlID0gZGF0ZTtcclxuICAgICAgICAgICAgaWYgKG1vbnRoSW5mby5zaG93U2VsZWN0ZWRSaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBjaGFydEVsZW1lbnRzLmRhdGFBcmVhXHJcbiAgICAgICAgICAgICAgICAgICAgLnNlbGVjdChcIiN0cmFja2VyLXNlbGVjdGVkLWNpcmNsZS1cIiArIGRhdGUpXHJcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIG1vbnRoSW5mby5zZWxlY3RlZFJpbmdDb2xvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gc2hvdyB2YWx1ZSBvbiBtb25pdG9yXHJcbiAgICAgICAgICAgIGlmIChtb250aEluZm8uc2hvd1NlbGVjdGVkVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzdHJWYWx1ZSA9IGQzLnNlbGVjdCh0aGlzKS5hdHRyKFwidmFsdWVcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWVUeXBlID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoXCJ2YWx1ZVR5cGVcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWVUZXh0ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZVR5cGUgPT09IFwiVGltZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRheVN0YXJ0ID0gd2luZG93Lm1vbWVudChcIjAwOjAwXCIsIFwiSEg6bW1cIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRpY2tUaW1lID0gZGF5U3RhcnQuYWRkKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KHN0clZhbHVlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWNvbmRzXCJcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlVGV4dCA9IHRpY2tUaW1lLmZvcm1hdChcIkhIOm1tXCIpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVRleHQgPSBzdHJWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNoYXJ0RWxlbWVudHMubW9uaXRvci50ZXh0KHZhbHVlVGV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcInBvaW50ZXJcIik7XHJcblxyXG4gICAgLy8gRXhwYW5kIGFyZWFzXHJcbiAgICBsZXQgc3ZnV2lkdGggPSBwYXJzZUZsb2F0KGNoYXJ0RWxlbWVudHMuc3ZnLmF0dHIoXCJ3aWR0aFwiKSk7XHJcbiAgICBsZXQgc3ZnSGVpZ2h0ID0gcGFyc2VGbG9hdChjaGFydEVsZW1lbnRzLnN2Zy5hdHRyKFwiaGVpZ2h0XCIpKTtcclxuICAgIGxldCBncmFwaEFyZWFXaWR0aCA9IHBhcnNlRmxvYXQoY2hhcnRFbGVtZW50cy5ncmFwaEFyZWEuYXR0cihcIndpZHRoXCIpKTtcclxuICAgIGxldCBncmFwaEFyZWFIZWlnaHQgPSBwYXJzZUZsb2F0KGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhLmF0dHIoXCJoZWlnaHRcIikpO1xyXG4gICAgbGV0IHRvdGFsSGVpZ2h0ID1cclxuICAgICAgICA3ICogY2VsbFNpemUgKyBwYXJzZUZsb2F0KGNoYXJ0RWxlbWVudHMuaGVhZGVyLmF0dHIoXCJoZWlnaHRcIikpO1xyXG4gICAgbGV0IHRvdGFsV2lkdGggPSA3ICogY2VsbFNpemU7XHJcbiAgICBpZiAodG90YWxIZWlnaHQgPiBzdmdIZWlnaHQpIHtcclxuICAgICAgICBoZWxwZXIuZXhwYW5kQXJlYShjaGFydEVsZW1lbnRzLnN2ZywgMCwgdG90YWxIZWlnaHQgLSBzdmdIZWlnaHQpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRvdGFsV2lkdGggPiBzdmdXaWR0aCkge1xyXG4gICAgICAgIGhlbHBlci5leHBhbmRBcmVhKGNoYXJ0RWxlbWVudHMuc3ZnLCB0b3RhbFdpZHRoIC0gc3ZnV2lkdGgsIDApO1xyXG4gICAgfVxyXG4gICAgaWYgKHRvdGFsSGVpZ2h0ID4gZ3JhcGhBcmVhSGVpZ2h0KSB7XHJcbiAgICAgICAgaGVscGVyLmV4cGFuZEFyZWEoXHJcbiAgICAgICAgICAgIGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhLFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICB0b3RhbEhlaWdodCAtIGdyYXBoQXJlYUhlaWdodFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbiAgICBpZiAodG90YWxXaWR0aCA+IGdyYXBoQXJlYVdpZHRoKSB7XHJcbiAgICAgICAgaGVscGVyLmV4cGFuZEFyZWEoY2hhcnRFbGVtZW50cy5zdmcsIHRvdGFsV2lkdGggLSBncmFwaEFyZWFXaWR0aCwgMCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlZnJlc2goXHJcbiAgICBjYW52YXM6IEhUTUxFbGVtZW50LFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBtb250aEluZm86IE1vbnRoSW5mbyxcclxuICAgIGN1ck1vbnRoRGF0ZTogTW9tZW50XHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZWZyZXNoXCIpO1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mbyk7XHJcbiAgICBpZiAoIXJlbmRlckluZm8gfHwgIXJlbmRlck1vbnRoKSByZXR1cm47XHJcblxyXG4gICAgY2hhcnRFbGVtZW50cyA9IGNyZWF0ZUFyZWFzKGNoYXJ0RWxlbWVudHMsIGNhbnZhcywgcmVuZGVySW5mbywgbW9udGhJbmZvKTtcclxuXHJcbiAgICAvLyByZW5kZXJcclxuICAgIHJlbmRlck1vbnRoSGVhZGVyKFxyXG4gICAgICAgIGNhbnZhcyxcclxuICAgICAgICBjaGFydEVsZW1lbnRzLFxyXG4gICAgICAgIHJlbmRlckluZm8sXHJcbiAgICAgICAgbW9udGhJbmZvLFxyXG4gICAgICAgIGN1ck1vbnRoRGF0ZVxyXG4gICAgKTtcclxuXHJcbiAgICByZW5kZXJNb250aERheXMoY2FudmFzLCBjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvLCBtb250aEluZm8sIGN1ck1vbnRoRGF0ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJNb250aChcclxuICAgIGNhbnZhczogSFRNTEVsZW1lbnQsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgbW9udGhJbmZvOiBNb250aEluZm9cclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInJlbmRlck1vbnRoXCIpO1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mbyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhtb250aEluZm8pO1xyXG4gICAgaWYgKCFyZW5kZXJJbmZvIHx8ICFyZW5kZXJNb250aCkgcmV0dXJuO1xyXG5cclxuICAgIC8vIGRhdGFzZXRcclxuICAgIGxldCBkYXRhc2V0SWRzID0gbW9udGhJbmZvLmRhdGFzZXQ7XHJcbiAgICBsZXQgbnVtQXZhaWxhYmxlRGF0YXNldCA9IDA7XHJcbiAgICBmb3IgKGxldCBkYXRhc2V0IG9mIHJlbmRlckluZm8uZGF0YXNldHMpIHtcclxuICAgICAgICBpZiAoIWRhdGFzZXQuZ2V0UXVlcnkoKS51c2VkQXNYRGF0YXNldCkge1xyXG4gICAgICAgICAgICBudW1BdmFpbGFibGVEYXRhc2V0Kys7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKG51bUF2YWlsYWJsZURhdGFzZXQgPT09IDApIHtcclxuICAgICAgICByZXR1cm4gXCJObyBhdmFpbGFibGUgZGF0YXNldCBmb3VuZFwiO1xyXG4gICAgfVxyXG4gICAgdG9OZXh0RGF0YXNldChyZW5kZXJJbmZvLCBtb250aEluZm8pO1xyXG4gICAgaWYgKG1vbnRoSW5mby5zZWxlY3RlZERhdGFzZXQgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gXCJObyBhdmFpbGFibGUgZGF0YXNldCBmb3VuZFwiO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzID0ge307XHJcbiAgICBjaGFydEVsZW1lbnRzID0gY3JlYXRlQXJlYXMoY2hhcnRFbGVtZW50cywgY2FudmFzLCByZW5kZXJJbmZvLCBtb250aEluZm8pO1xyXG5cclxuICAgIGxldCBtb250aERhdGU6IE1vbWVudCA9IG51bGw7XHJcbiAgICBpZiAobW9udGhJbmZvLmluaXRNb250aCkge1xyXG4gICAgICAgIGxldCBpbml0TW9udGggPSB3aW5kb3cubW9tZW50KG1vbnRoSW5mby5pbml0TW9udGgsIFwiWVlZWS1NTVwiLCB0cnVlKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhpbml0TW9udGgpO1xyXG4gICAgICAgIGlmIChpbml0TW9udGguaXNWYWxpZCgpKSB7XHJcbiAgICAgICAgICAgIG1vbnRoRGF0ZSA9IGluaXRNb250aDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJJbnZhbGlkIGluaXRNb250aFwiO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGV0IHRvZGF5ID0gd2luZG93Lm1vbWVudCgpO1xyXG4gICAgICAgIG1vbnRoRGF0ZSA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0ZXMoKS5sYXN0KCk7XHJcbiAgICB9XHJcbiAgICBpZiAoIW1vbnRoRGF0ZSkgcmV0dXJuO1xyXG5cclxuICAgIHJlbmRlck1vbnRoSGVhZGVyKGNhbnZhcywgY2hhcnRFbGVtZW50cywgcmVuZGVySW5mbywgbW9udGhJbmZvLCBtb250aERhdGUpO1xyXG5cclxuICAgIHJlbmRlck1vbnRoRGF5cyhjYW52YXMsIGNoYXJ0RWxlbWVudHMsIHJlbmRlckluZm8sIG1vbnRoSW5mbywgbW9udGhEYXRlKTtcclxufVxyXG4iLCJpbXBvcnQgeyBNb21lbnQgfSBmcm9tIFwibW9tZW50XCI7XHJcbmltcG9ydCB7XHJcbiAgICBEYXRhc2V0cyxcclxuICAgIERhdGFQb2ludCxcclxuICAgIFJlbmRlckluZm8sXHJcbiAgICBNb250aEluZm8sXHJcbiAgICBIZWF0bWFwSW5mbyxcclxuICAgIERhdGFzZXQsXHJcbiAgICBTaXplLFxyXG4gICAgVHJhbnNmb3JtLFxyXG4gICAgQ2hhcnRFbGVtZW50cyxcclxuICAgIEdyYXBoVHlwZSxcclxuICAgIFZhbHVlVHlwZSxcclxufSBmcm9tIFwiLi9kYXRhXCI7XHJcbmltcG9ydCAqIGFzIGhlbHBlciBmcm9tIFwiLi9oZWxwZXJcIjtcclxuaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XHJcblxyXG5pbnRlcmZhY2UgRGF5SW5mbyB7XHJcbiAgICBkYXRlOiBzdHJpbmc7XHJcbiAgICB2YWx1ZTogbnVtYmVyO1xyXG4gICAgc2NhbGVkVmFsdWU6IG51bWJlcjtcclxuICAgIHJvdzogbnVtYmVyO1xyXG4gICAgY29sOiBudW1iZXI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUFyZWFzKFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIGNhbnZhczogSFRNTEVsZW1lbnQsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgaGVhdG1hcEluZm86IEhlYXRtYXBJbmZvXHJcbik6IENoYXJ0RWxlbWVudHMge1xyXG4gICAgLy8gY2xlYW4gYXJlYXNcclxuICAgIGQzLnNlbGVjdChjYW52YXMpLnNlbGVjdChcIiNzdmdcIikucmVtb3ZlKCk7XHJcbiAgICB2YXIgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjaGFydEVsZW1lbnRzKTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAvLyBkMy5zZWxlY3QoY2hhcnRFbGVtZW50c1twcm9wc1tpXV0pLnJlbW92ZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBjaGFydEVsZW1lbnRzW3Byb3BzW2ldXTtcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKGNoYXJ0RWxlbWVudHMpO1xyXG5cclxuICAgIC8vIHdob2xlIGFyZWEgZm9yIHBsb3R0aW5nLCBpbmNsdWRlcyBtYXJnaW5zXHJcbiAgICBsZXQgc3ZnID0gZDNcclxuICAgICAgICAuc2VsZWN0KGNhbnZhcylcclxuICAgICAgICAuYXBwZW5kKFwic3ZnXCIpXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcInN2Z1wiKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcIndpZHRoXCIsXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLmxlZnQgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4ucmlnaHRcclxuICAgICAgICApXHJcbiAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgIFwiaGVpZ2h0XCIsXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLm1hcmdpbi50b3AgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4uYm90dG9tXHJcbiAgICAgICAgKTtcclxuICAgIGNoYXJ0RWxlbWVudHNbXCJzdmdcIl0gPSBzdmc7XHJcblxyXG4gICAgLy8gZ3JhcGhBcmVhLCBpbmNsdWRlcyBjaGFydEFyZWEsIHRpdGxlLCBsZWdlbmRcclxuICAgIGxldCBncmFwaEFyZWEgPSBzdmdcclxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJncmFwaEFyZWFcIilcclxuICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgXCJ0cmFuc2Zvcm1cIixcclxuICAgICAgICAgICAgXCJ0cmFuc2xhdGUoXCIgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4ubGVmdCArXHJcbiAgICAgICAgICAgICAgICBcIixcIiArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLm1hcmdpbi50b3AgK1xyXG4gICAgICAgICAgICAgICAgXCIpXCJcclxuICAgICAgICApXHJcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCArIHJlbmRlckluZm8ubWFyZ2luLnJpZ2h0KVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcImhlaWdodFwiLFxyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQgKyByZW5kZXJJbmZvLm1hcmdpbi5ib3R0b21cclxuICAgICAgICApO1xyXG4gICAgY2hhcnRFbGVtZW50c1tcImdyYXBoQXJlYVwiXSA9IGdyYXBoQXJlYTtcclxuXHJcbiAgICAvLyBkYXRhQXJlYSwgdW5kZXIgZ3JhcGhBcmVhLCBpbmNsdWRlcyBwb2ludHMsIGxpbmVzLCB4QXhpcywgeUF4aXNcclxuICAgIGxldCBkYXRhQXJlYSA9IGdyYXBoQXJlYVxyXG4gICAgICAgIC5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcImRhdGFBcmVhXCIpXHJcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aClcclxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQpO1xyXG4gICAgY2hhcnRFbGVtZW50c1tcImRhdGFBcmVhXCJdID0gZGF0YUFyZWE7XHJcblxyXG4gICAgcmV0dXJuIGNoYXJ0RWxlbWVudHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckhlYXRtYXBIZWFkZXIoXHJcbiAgICBjYW52YXM6IEhUTUxFbGVtZW50LFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBoZWF0bWFwSW5mbzogSGVhdG1hcEluZm8sXHJcbiAgICBkYXRhc2V0OiBEYXRhc2V0XHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJNb250aEhlYWRlclwiKVxyXG5cclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhaGVhdG1hcEluZm8pIHJldHVybjtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckhlYXRtYXBEYXlzKFxyXG4gICAgY2FudmFzOiBIVE1MRWxlbWVudCxcclxuICAgIGNoYXJ0RWxlbWVudHM6IENoYXJ0RWxlbWVudHMsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgaGVhdG1hcEluZm86IEhlYXRtYXBJbmZvLFxyXG4gICAgZGF0YXNldDogRGF0YXNldCxcclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInJlbmRlckhlYXRtYXBEYXlzXCIpO1xyXG5cclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhaGVhdG1hcEluZm8pIHJldHVybjtcclxuXHJcbiAgICBsZXQgY2VsbFNpemUgPSAyMDtcclxuICAgIGxldCBkb3RSYWRpdXMgPSBjZWxsU2l6ZSAvIDIuMCAqIDAuNjtcclxuXHJcbiAgICAvLyBHZXQgbWluIGFuZCBtYXgsIG51bGwgdmFsdWVzIHdpbGwgYmUgdHJlYXRlZCBhcyB6ZXJvIGhlcmVcclxuICAgIGxldCB5TWluID0gZDMubWluKGRhdGFzZXQuZ2V0VmFsdWVzKCkpO1xyXG4gICAgaWYgKGhlYXRtYXBJbmZvLnlNaW4gIT09IG51bGwpIHtcclxuICAgICAgICB5TWluID0gaGVhdG1hcEluZm8ueU1pbjtcclxuICAgIH1cclxuICAgIGxldCB5TWF4ID0gZDMubWF4KGRhdGFzZXQuZ2V0VmFsdWVzKCkpO1xyXG4gICAgaWYgKGhlYXRtYXBJbmZvLnlNYXggIT09IG51bGwpIHtcclxuICAgICAgICB5TWF4ID0gaGVhdG1hcEluZm8ueU1heDtcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKGB5TWluOiR7eU1pbn0sIHlNYXg6JHt5TWF4fWApO1xyXG5cclxuICAgIC8vIFByZXBhcmUgZGF0YSBmb3IgZ3JhcGhcclxuICAgIGxldCBkYXlzSW5IZWF0bWFwVmlldzogQXJyYXk8RGF5SW5mbz4gPSBbXTtcclxuICAgIGNvbnN0IGRhdGFTdGFydERhdGUgPSBkYXRhc2V0LmdldFN0YXJ0RGF0ZSgpLmNsb25lKCk7XHJcbiAgICBsZXQgc3RhcnREYXRlID0gZGF0YVN0YXJ0RGF0ZVxyXG4gICAgICAgIC5jbG9uZSgpXHJcbiAgICAgICAgLnN1YnRyYWN0KGRhdGFTdGFydERhdGUuZGF5KCksIFwiZGF5c1wiKTtcclxuICAgIGlmIChoZWF0bWFwSW5mby5zdGFydFdlZWtPbi50b0xvd2VyQ2FzZSgpID09PSBcIm1vblwiKSB7XHJcbiAgICAgICAgc3RhcnREYXRlID0gc3RhcnREYXRlLmFkZCgxLCBcImRheXNcIik7XHJcbiAgICB9XHJcbiAgICBjb25zdCBkYXRhRW5kRGF0ZSA9IGRhdGFzZXQuZ2V0RW5kRGF0ZSgpLmNsb25lKCk7XHJcbiAgICBsZXQgZW5kRGF0ZSA9IGRhdGFFbmREYXRlLmNsb25lKCkuYWRkKDcgLSBkYXRhRW5kRGF0ZS5kYXkoKSAtIDEsIFwiZGF5c1wiKTtcclxuICAgIGlmIChoZWF0bWFwSW5mby5zdGFydFdlZWtPbi50b0xvd2VyQ2FzZSgpID09PSBcIm1vblwiKSB7XHJcbiAgICAgICAgZW5kRGF0ZSA9IGVuZERhdGUuYWRkKDEsIFwiZGF5c1wiKTtcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKHN0YXJ0RGF0ZS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGVuZERhdGUuZm9ybWF0KFwiWVlZWS1NTS1ERFwiKSk7XHJcblxyXG4gICAgbGV0IGluZENvbCA9IDA7XHJcbiAgICBsZXQgaW5kUm93ID0gMDtcclxuICAgIGxldCBpbmQgPSAwO1xyXG4gICAgZm9yIChcclxuICAgICAgICBsZXQgY3VyRGF0ZSA9IHN0YXJ0RGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgIGN1ckRhdGUgPD0gZW5kRGF0ZTtcclxuICAgICAgICBjdXJEYXRlLmFkZCgxLCBcImRheXNcIilcclxuICAgICkge1xyXG4gICAgICAgIGlmIChoZWF0bWFwSW5mby5zdGFydFdlZWtPbi50b0xvd2VyQ2FzZSgpID09PSBcIm1vblwiKSB7XHJcbiAgICAgICAgICAgIGluZENvbCA9IGN1ckRhdGUuZGF5KCkgLSAxO1xyXG4gICAgICAgICAgICBpZiAoaW5kQ29sIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgaW5kQ29sID0gNjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbmRSb3cgPSBNYXRoLmZsb29yKGluZCAvIDcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGluZENvbCA9IGN1ckRhdGUuZGF5KCk7IC8vIDB+NlxyXG4gICAgICAgICAgICBpbmRSb3cgPSBNYXRoLmZsb29yKGluZCAvIDcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY3VyVmFsdWUgYW5kIHNjYWxlZFZhbHVlXHJcbiAgICAgICAgbGV0IGN1clZhbHVlID0gZGF0YXNldC5nZXRWYWx1ZShjdXJEYXRlKTtcclxuICAgICAgICBsZXQgc2NhbGVkVmFsdWUgPSAwO1xyXG4gICAgICAgIGlmIChOdW1iZXIuaXNOdW1iZXIoeU1heCkgJiYgTnVtYmVyLmlzTnVtYmVyKHlNaW4pICYmIHlNYXggLSB5TWluID4gMCkge1xyXG4gICAgICAgICAgICBzY2FsZWRWYWx1ZSA9IChjdXJWYWx1ZSAtIHlNaW4pIC8gKHlNYXggLSB5TWluKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRheXNJbkhlYXRtYXBWaWV3LnB1c2goe1xyXG4gICAgICAgICAgICBkYXRlOiBoZWxwZXIuZGF0ZVRvU3RyKGN1ckRhdGUsIHJlbmRlckluZm8uZGF0ZUZvcm1hdCksXHJcbiAgICAgICAgICAgIHZhbHVlOiBjdXJWYWx1ZSxcclxuICAgICAgICAgICAgc2NhbGVkVmFsdWU6IHNjYWxlZFZhbHVlLFxyXG4gICAgICAgICAgICByb3c6IGluZFJvdyxcclxuICAgICAgICAgICAgY29sOiBpbmRDb2wsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGluZCsrO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coZGF5c0luSGVhdG1hcFZpZXcpO1xyXG5cclxuICAgIC8vIHNjYWxlXHJcbiAgICBsZXQgdG90YWxEYXlCbG9ja1dpZHRoID0gKGluZENvbCArIDEpICogY2VsbFNpemU7XHJcbiAgICBsZXQgdG90YWxCbG9ja0hlaWdodCA9IChpbmRSb3cgKyAxKSAqIGNlbGxTaXplO1xyXG4gICAgbGV0IHNjYWxlID0gZDNcclxuICAgICAgICAuc2NhbGVMaW5lYXIoKVxyXG4gICAgICAgIC5kb21haW4oWy0wLjUsIDYuNV0pXHJcbiAgICAgICAgLnJhbmdlKFswLCB0b3RhbERheUJsb2NrV2lkdGhdKTtcclxuXHJcbiAgICAvLyBjaXJjbGVzXHJcbiAgICBsZXQgaGVhdG1hcENvbG9yID0gXCIjNjliM2EyXCI7XHJcbiAgICBpZiAoaGVhdG1hcEluZm8uY29sb3IpIHtcclxuICAgICAgICBoZWF0bWFwQ29sb3IgPSBoZWF0bWFwSW5mby5jb2xvcjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBkYXlzLCBzaG93biBhcyBkb3RzIG9yIHNxdWFyZXNcclxuICAgIGxldCBkYXlzID0gY2hhcnRFbGVtZW50cy5kYXRhQXJlYVxyXG4gICAgICAgIC5zZWxlY3RBbGwoXCJkb3RcIilcclxuICAgICAgICAuZGF0YShkYXlzSW5IZWF0bWFwVmlldylcclxuICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcclxuICAgICAgICAuYXR0cihcInJcIiwgZG90UmFkaXVzKVxyXG4gICAgICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNjYWxlKGQuY29sKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNjYWxlKGQucm93KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24gKGQ6IERheUluZm8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGQzLmludGVycG9sYXRlTGFiKFxyXG4gICAgICAgICAgICAgICAgICAgIFwid2hpdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBoZWF0bWFwQ29sb3JcclxuICAgICAgICAgICAgICAgICkoZC5zY2FsZWRWYWx1ZSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3R5bGUoXCJjdXJzb3JcIiwgXCJkZWZhdWx0XCIpO1xyXG5cclxuICAgIC8vIEV4cGFuZCBhcmVhc1xyXG4gICAgbGV0IHN2Z1dpZHRoID0gcGFyc2VGbG9hdChjaGFydEVsZW1lbnRzLnN2Zy5hdHRyKFwid2lkdGhcIikpO1xyXG4gICAgbGV0IHN2Z0hlaWdodCA9IHBhcnNlRmxvYXQoY2hhcnRFbGVtZW50cy5zdmcuYXR0cihcImhlaWdodFwiKSk7XHJcbiAgICBsZXQgZ3JhcGhBcmVhV2lkdGggPSBwYXJzZUZsb2F0KGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhLmF0dHIoXCJ3aWR0aFwiKSk7XHJcbiAgICBsZXQgZ3JhcGhBcmVhSGVpZ2h0ID0gcGFyc2VGbG9hdChjaGFydEVsZW1lbnRzLmdyYXBoQXJlYS5hdHRyKFwiaGVpZ2h0XCIpKTtcclxuICAgIGxldCB0b3RhbEhlaWdodCA9XHJcbiAgICAgICAgKGluZFJvdyArIDIpICogY2VsbFNpemU7Ly8gKyBwYXJzZUZsb2F0KGNoYXJ0RWxlbWVudHMuaGVhZGVyLmF0dHIoXCJoZWlnaHRcIikpO1xyXG4gICAgbGV0IHRvdGFsV2lkdGggPSAoaW5kQ29sICsgMSkgKiBjZWxsU2l6ZTtcclxuICAgIGlmICh0b3RhbEhlaWdodCA+IHN2Z0hlaWdodCkge1xyXG4gICAgICAgIGhlbHBlci5leHBhbmRBcmVhKGNoYXJ0RWxlbWVudHMuc3ZnLCAwLCB0b3RhbEhlaWdodCAtIHN2Z0hlaWdodCk7XHJcbiAgICB9XHJcbiAgICBpZiAodG90YWxXaWR0aCA+IHN2Z1dpZHRoKSB7XHJcbiAgICAgICAgaGVscGVyLmV4cGFuZEFyZWEoY2hhcnRFbGVtZW50cy5zdmcsIHRvdGFsV2lkdGggLSBzdmdXaWR0aCwgMCk7XHJcbiAgICB9XHJcbiAgICBpZiAodG90YWxIZWlnaHQgPiBncmFwaEFyZWFIZWlnaHQpIHtcclxuICAgICAgICBoZWxwZXIuZXhwYW5kQXJlYShcclxuICAgICAgICAgICAgY2hhcnRFbGVtZW50cy5ncmFwaEFyZWEsXHJcbiAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgIHRvdGFsSGVpZ2h0IC0gZ3JhcGhBcmVhSGVpZ2h0XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICAgIGlmICh0b3RhbFdpZHRoID4gZ3JhcGhBcmVhV2lkdGgpIHtcclxuICAgICAgICBoZWxwZXIuZXhwYW5kQXJlYShjaGFydEVsZW1lbnRzLnN2ZywgdG90YWxXaWR0aCAtIGdyYXBoQXJlYVdpZHRoLCAwKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlckhlYXRtYXAoXHJcbiAgICBjYW52YXM6IEhUTUxFbGVtZW50LFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGhlYXRtYXBJbmZvOiBIZWF0bWFwSW5mb1xyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVySGVhdG1hcFwiKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8pO1xyXG4gICAgaWYgKCFyZW5kZXJJbmZvIHx8ICFyZW5kZXJIZWF0bWFwKSByZXR1cm47XHJcblxyXG4gICAgcmV0dXJuIFwiVW5kZXIgY29uc3RydWN0aW9uXCI7XHJcblxyXG4gICAgbGV0IGNoYXJ0RWxlbWVudHM6IENoYXJ0RWxlbWVudHMgPSB7fTtcclxuICAgIGNoYXJ0RWxlbWVudHMgPSBjcmVhdGVBcmVhcyhjaGFydEVsZW1lbnRzLCBjYW52YXMsIHJlbmRlckluZm8sIGhlYXRtYXBJbmZvKTtcclxuXHJcbiAgICBsZXQgdG9kYXkgPSB3aW5kb3cubW9tZW50KCk7XHJcbiAgICBsZXQgbGFzdERhdGFNb250aERhdGUgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGVzKCkubGFzdCgpO1xyXG5cclxuICAgIGxldCBkYXRhc2V0SWQgPSBwYXJzZUZsb2F0KGhlYXRtYXBJbmZvLmRhdGFzZXQpO1xyXG4gICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcblxyXG4gICAgcmVuZGVySGVhdG1hcEhlYWRlcihcclxuICAgICAgICBjYW52YXMsXHJcbiAgICAgICAgY2hhcnRFbGVtZW50cyxcclxuICAgICAgICByZW5kZXJJbmZvLFxyXG4gICAgICAgIGhlYXRtYXBJbmZvLFxyXG4gICAgICAgIGRhdGFzZXRcclxuICAgICk7XHJcblxyXG4gICAgcmVuZGVySGVhdG1hcERheXMoXHJcbiAgICAgICAgY2FudmFzLFxyXG4gICAgICAgIGNoYXJ0RWxlbWVudHMsXHJcbiAgICAgICAgcmVuZGVySW5mbyxcclxuICAgICAgICBoZWF0bWFwSW5mbyxcclxuICAgICAgICBkYXRhc2V0XHJcbiAgICApO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgICBEYXRhc2V0cyxcclxuICAgIERhdGFQb2ludCxcclxuICAgIFJlbmRlckluZm8sXHJcbiAgICBCdWxsZXRJbmZvLFxyXG4gICAgRGF0YXNldCxcclxuICAgIFNpemUsXHJcbiAgICBUcmFuc2Zvcm0sXHJcbiAgICBDaGFydEVsZW1lbnRzLFxyXG4gICAgR3JhcGhUeXBlLFxyXG4gICAgVmFsdWVUeXBlLFxyXG59IGZyb20gXCIuL2RhdGFcIjtcclxuaW1wb3J0ICogYXMgaGVscGVyIGZyb20gXCIuL2hlbHBlclwiO1xyXG5pbXBvcnQgKiBhcyBkMyBmcm9tIFwiZDNcIjtcclxuaW1wb3J0ICogYXMgZXhwciBmcm9tIFwiLi9leHByXCI7XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVBcmVhcyhcclxuICAgIGNhbnZhczogSFRNTEVsZW1lbnQsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgYnVsbGV0SW5mbzogQnVsbGV0SW5mb1xyXG4pOiBDaGFydEVsZW1lbnRzIHtcclxuICAgIGxldCBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzID0ge307XHJcbiAgICAvLyB3aG9sZSBhcmVhIGZvciBwbG90dGluZywgaW5jbHVkZXMgbWFyZ2luc1xyXG5cclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhYnVsbGV0SW5mbykgcmV0dXJuO1xyXG5cclxuICAgIGxldCBzdmcgPSBkM1xyXG4gICAgICAgIC5zZWxlY3QoY2FudmFzKVxyXG4gICAgICAgIC5hcHBlbmQoXCJzdmdcIilcclxuICAgICAgICAuYXR0cihcImlkXCIsIFwic3ZnXCIpXHJcbiAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgIFwid2lkdGhcIixcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4ubGVmdCArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLm1hcmdpbi5yaWdodFxyXG4gICAgICAgIClcclxuICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgXCJoZWlnaHRcIixcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0ICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLnRvcCArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLm1hcmdpbi5ib3R0b21cclxuICAgICAgICApO1xyXG4gICAgY2hhcnRFbGVtZW50c1tcInN2Z1wiXSA9IHN2ZztcclxuXHJcbiAgICAvLyBncmFwaEFyZWEsIGluY2x1ZGVzIGNoYXJ0QXJlYSwgdGl0bGUsIGxlZ2VuZFxyXG4gICAgbGV0IGdyYXBoQXJlYSA9IHN2Z1xyXG4gICAgICAgIC5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcImdyYXBoQXJlYVwiKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcInRyYW5zZm9ybVwiLFxyXG4gICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLm1hcmdpbi5sZWZ0ICtcclxuICAgICAgICAgICAgICAgIFwiLFwiICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLnRvcCArXHJcbiAgICAgICAgICAgICAgICBcIilcIlxyXG4gICAgICAgIClcclxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoICsgcmVuZGVySW5mby5tYXJnaW4ucmlnaHQpXHJcbiAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgIFwiaGVpZ2h0XCIsXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCArIHJlbmRlckluZm8ubWFyZ2luLmJvdHRvbVxyXG4gICAgICAgICk7XHJcbiAgICBjaGFydEVsZW1lbnRzW1wiZ3JhcGhBcmVhXCJdID0gZ3JhcGhBcmVhO1xyXG5cclxuICAgIC8vIGRhdGFBcmVhLCB1bmRlciBncmFwaEFyZWEsIGluY2x1ZGVzIHBvaW50cywgbGluZXMsIHhBeGlzLCB5QXhpc1xyXG4gICAgbGV0IGRhdGFBcmVhID0gZ3JhcGhBcmVhXHJcbiAgICAgICAgLmFwcGVuZChcImdcIilcclxuICAgICAgICAuYXR0cihcImlkXCIsIFwiZGF0YUFyZWFcIilcclxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoKVxyXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCk7XHJcbiAgICBjaGFydEVsZW1lbnRzW1wiZGF0YUFyZWFcIl0gPSBkYXRhQXJlYTtcclxuXHJcbiAgICByZXR1cm4gY2hhcnRFbGVtZW50cztcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0Q2hhcnRTY2FsZShcclxuICAgIF9jYW52YXM6IEhUTUxFbGVtZW50LFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm9cclxuKSB7XHJcbiAgICBsZXQgY2FudmFzID0gZDMuc2VsZWN0KF9jYW52YXMpO1xyXG4gICAgbGV0IHN2ZyA9IGNoYXJ0RWxlbWVudHMuc3ZnO1xyXG4gICAgbGV0IHN2Z1dpZHRoID0gcGFyc2VGbG9hdChzdmcuYXR0cihcIndpZHRoXCIpKTtcclxuICAgIGxldCBzdmdIZWlnaHQgPSBwYXJzZUZsb2F0KHN2Zy5hdHRyKFwiaGVpZ2h0XCIpKTtcclxuICAgIHN2Zy5hdHRyKFwid2lkdGhcIiwgbnVsbClcclxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBudWxsKVxyXG4gICAgICAgIC5hdHRyKFwidmlld0JveFwiLCBgMCAwICR7c3ZnV2lkdGh9ICR7c3ZnSGVpZ2h0fWApXHJcbiAgICAgICAgLmF0dHIoXCJwcmVzZXJ2ZUFzcGVjdFJhdGlvXCIsIFwieE1pZFlNaWQgbWVldFwiKTtcclxuXHJcbiAgICBpZiAocmVuZGVySW5mby5maXRQYW5lbFdpZHRoKSB7XHJcbiAgICAgICAgY2FudmFzLnN0eWxlKFwid2lkdGhcIiwgXCIxMDAlXCIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjYW52YXMuc3R5bGUoXHJcbiAgICAgICAgICAgIFwid2lkdGhcIixcclxuICAgICAgICAgICAgKHN2Z1dpZHRoICogcmVuZGVySW5mby5maXhlZFNjYWxlKS50b1N0cmluZygpICsgXCJweFwiXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjYW52YXMuc3R5bGUoXHJcbiAgICAgICAgICAgIFwiaGVpZ2h0XCIsXHJcbiAgICAgICAgICAgIChzdmdIZWlnaHQgKiByZW5kZXJJbmZvLmZpeGVkU2NhbGUpLnRvU3RyaW5nKCkgKyBcInB4XCJcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJUaXRsZShcclxuICAgIGNoYXJ0RWxlbWVudHM6IENoYXJ0RWxlbWVudHMsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgYnVsbGV0SW5mbzogQnVsbGV0SW5mb1xyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVyVGl0bGVcIik7XHJcbiAgICAvLyB1bmRlciBncmFwaEFyZWFcclxuXHJcbiAgICBpZiAoIXJlbmRlckluZm8gfHwgIWJ1bGxldEluZm8pIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBzcGFjaW5nID0gNjsgLy8gc3BhY2luZyBiZXR3ZWVuIHRpdGxlIGFuZCBkYXRhQXJlYVxyXG5cclxuICAgIGlmIChidWxsZXRJbmZvLnRpdGxlKSB7XHJcbiAgICAgICAgbGV0IHRpdGxlU2l6ZSA9IGhlbHBlci5tZWFzdXJlVGV4dFNpemUoXHJcbiAgICAgICAgICAgIGJ1bGxldEluZm8udGl0bGUsXHJcbiAgICAgICAgICAgIFwidHJhY2tlci10aXRsZS1zbWFsbFwiXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgaWYgKGJ1bGxldEluZm8ub3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiKSB7XHJcbiAgICAgICAgICAgIGxldCB0aXRsZSA9IGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgICAgICAgICAgLnRleHQoYnVsbGV0SW5mby50aXRsZSkgLy8gcGl2b3QgYXQgY2VudGVyXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImlkXCIsIFwidGl0bGVcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCB0aXRsZVNpemUud2lkdGggLyAyLjApXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0IC8gMi4wKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgdGl0bGVTaXplLmhlaWdodCkgLy8gZm9yIGxhdGVyIHVzZVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItdGl0bGUtc21hbGxcIik7XHJcbiAgICAgICAgICAgIGNoYXJ0RWxlbWVudHNbXCJ0aXRsZVwiXSA9IHRpdGxlO1xyXG5cclxuICAgICAgICAgICAgLy8gRXhwYW5kIHBhcmVudCBhcmVhc1xyXG4gICAgICAgICAgICBoZWxwZXIuZXhwYW5kQXJlYShjaGFydEVsZW1lbnRzLnN2ZywgdGl0bGVTaXplLndpZHRoICsgc3BhY2luZywgMCk7XHJcbiAgICAgICAgICAgIGhlbHBlci5leHBhbmRBcmVhKFxyXG4gICAgICAgICAgICAgICAgY2hhcnRFbGVtZW50cy5ncmFwaEFyZWEsXHJcbiAgICAgICAgICAgICAgICB0aXRsZVNpemUud2lkdGggKyBzcGFjaW5nLFxyXG4gICAgICAgICAgICAgICAgMFxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgLy8gTW92ZSBzaWJsaW5nIGFyZWFzXHJcbiAgICAgICAgICAgIGhlbHBlci5tb3ZlQXJlYShcclxuICAgICAgICAgICAgICAgIGNoYXJ0RWxlbWVudHMuZGF0YUFyZWEsXHJcbiAgICAgICAgICAgICAgICB0aXRsZVNpemUud2lkdGggKyBzcGFjaW5nLFxyXG4gICAgICAgICAgICAgICAgMFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYnVsbGV0SW5mby5vcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XHJcbiAgICAgICAgICAgIC8vIGlmIGxhYmVsIHdpZHRoID4gZGF0YUFyZWEgd2lkdGhcclxuICAgICAgICAgICAgbGV0IHhNaWRkbGUgPSByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCAvIDIuMDtcclxuICAgICAgICAgICAgaWYgKHRpdGxlU2l6ZS53aWR0aCA+IHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImV4cGFuZCBhcmVhIGZvciB2ZXJ0aWNhbCB0aXRsZVwiKTtcclxuICAgICAgICAgICAgICAgIGhlbHBlci5leHBhbmRBcmVhKFxyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0RWxlbWVudHMuc3ZnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlU2l6ZS53aWR0aCAtIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgIDBcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBoZWxwZXIuZXhwYW5kQXJlYShcclxuICAgICAgICAgICAgICAgICAgICBjaGFydEVsZW1lbnRzLmdyYXBoQXJlYSxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZVNpemUud2lkdGggLSByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAwXHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgIGhlbHBlci5tb3ZlQXJlYShcclxuICAgICAgICAgICAgICAgICAgICBjaGFydEVsZW1lbnRzLmRhdGFBcmVhLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlU2l6ZS53aWR0aCAvIDIuMCAtIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoIC8gMi4wLFxyXG4gICAgICAgICAgICAgICAgICAgIDBcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB4TWlkZGxlID0gdGl0bGVTaXplLndpZHRoIC8gMi4wO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgYXhpc1dpZHRoID0gcGFyc2VGbG9hdChjaGFydEVsZW1lbnRzLmF4aXMuYXR0cihcIndpZHRoXCIpKTtcclxuXHJcbiAgICAgICAgICAgIGxldCB0aXRsZSA9IGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgICAgICAgICAgLnRleHQoYnVsbGV0SW5mby50aXRsZSkgLy8gcGl2b3QgYXQgY2VudGVyXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImlkXCIsIFwidGl0bGVcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCB4TWlkZGxlICsgYXhpc1dpZHRoKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIHRpdGxlU2l6ZS5oZWlnaHQgLyAyLjApXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCB0aXRsZVNpemUuaGVpZ2h0KSAvLyBmb3IgbGF0ZXIgdXNlXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci10aXRsZS1zbWFsbFwiKTtcclxuICAgICAgICAgICAgY2hhcnRFbGVtZW50c1tcInRpdGxlXCJdID0gdGl0bGU7XHJcblxyXG4gICAgICAgICAgICAvLyBFeHBhbmQgcGFyZW50IGFyZWFzXHJcbiAgICAgICAgICAgIGhlbHBlci5leHBhbmRBcmVhKGNoYXJ0RWxlbWVudHMuc3ZnLCAwLCB0aXRsZVNpemUuaGVpZ2h0ICsgc3BhY2luZyk7XHJcbiAgICAgICAgICAgIGhlbHBlci5leHBhbmRBcmVhKFxyXG4gICAgICAgICAgICAgICAgY2hhcnRFbGVtZW50cy5ncmFwaEFyZWEsXHJcbiAgICAgICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAgICAgdGl0bGVTaXplLmhlaWdodCArIHNwYWNpbmdcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIE1vdmUgc2libGluZyBhcmVhc1xyXG4gICAgICAgICAgICBoZWxwZXIubW92ZUFyZWEoXHJcbiAgICAgICAgICAgICAgICBjaGFydEVsZW1lbnRzLmRhdGFBcmVhLFxyXG4gICAgICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgICAgIHRpdGxlU2l6ZS5oZWlnaHQgKyBzcGFjaW5nXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChidWxsZXRJbmZvLnZhbHVlVW5pdCkge1xyXG4gICAgICAgIGxldCB1bml0U2l6ZSA9IGhlbHBlci5tZWFzdXJlVGV4dFNpemUoXHJcbiAgICAgICAgICAgIGJ1bGxldEluZm8udmFsdWVVbml0LFxyXG4gICAgICAgICAgICBcInRyYWNrZXItdGljay1sYWJlbFwiXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgaWYgKGJ1bGxldEluZm8ub3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiKSB7XHJcbiAgICAgICAgICAgIGxldCB1bml0ID0gY2hhcnRFbGVtZW50cy5kYXRhQXJlYVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAgICAgICAgIC50ZXh0KGJ1bGxldEluZm8udmFsdWVVbml0KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBcInVuaXRcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCAtMSAqICh1bml0U2l6ZS53aWR0aCArIHNwYWNpbmcpKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCArIHNwYWNpbmcpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCB1bml0U2l6ZS5oZWlnaHQpIC8vIGZvciBsYXRlciB1c2VcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLXRpY2stbGFiZWxcIik7IC8vIHBpdm90IGF0IGNvcmRlclxyXG4gICAgICAgICAgICBjaGFydEVsZW1lbnRzW1widW5pdFwiXSA9IHVuaXQ7XHJcbiAgICAgICAgfSBlbHNlIGlmIChidWxsZXRJbmZvLm9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIpIHtcclxuICAgICAgICAgICAgbGV0IHVuaXQgPSBjaGFydEVsZW1lbnRzLmRhdGFBcmVhXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgICAgICAgICAgLnRleHQoYnVsbGV0SW5mby52YWx1ZVVuaXQpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImlkXCIsIFwidW5pdFwiKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ4XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggLyAyIC0gdW5pdFNpemUud2lkdGggLyAyXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgLSh1bml0U2l6ZS5oZWlnaHQgLyAyLjAgKyBzcGFjaW5nKSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHVuaXRTaXplLmhlaWdodCkgLy8gZm9yIGxhdGVyIHVzZVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItdGljay1sYWJlbFwiKTsgLy8gcGl2b3QgYXQgY29yZGVyXHJcbiAgICAgICAgICAgIGNoYXJ0RWxlbWVudHNbXCJ1bml0XCJdID0gdW5pdDtcclxuXHJcbiAgICAgICAgICAgIC8vIEV4cGFuZCBwYXJlbnQgYXJlYXNcclxuICAgICAgICAgICAgaGVscGVyLmV4cGFuZEFyZWEoY2hhcnRFbGVtZW50cy5zdmcsIDAsIHVuaXRTaXplLmhlaWdodCArIHNwYWNpbmcpO1xyXG4gICAgICAgICAgICBoZWxwZXIuZXhwYW5kQXJlYShcclxuICAgICAgICAgICAgICAgIGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhLFxyXG4gICAgICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgICAgIHVuaXRTaXplLmhlaWdodCArIHNwYWNpbmdcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIE1vdmUgZGF0YUFyZWEgZG93blxyXG4gICAgICAgICAgICBoZWxwZXIubW92ZUFyZWEoXHJcbiAgICAgICAgICAgICAgICBjaGFydEVsZW1lbnRzLmRhdGFBcmVhLFxyXG4gICAgICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgICAgIHVuaXRTaXplLmhlaWdodCArIHNwYWNpbmdcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIFJlbmRlciB0aWNrcywgdGljayBsYWJlbHNcclxuZnVuY3Rpb24gcmVuZGVyQXhpcyhcclxuICAgIGNoYXJ0RWxlbWVudHM6IENoYXJ0RWxlbWVudHMsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgYnVsbGV0SW5mbzogQnVsbGV0SW5mbyxcclxuICAgIGRhdGFzZXQ6IERhdGFzZXRcclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInJlbmRlckF4aXNcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhjaGFydEVsZW1lbnRzKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGRhdGFzZXQpO1xyXG5cclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhYnVsbGV0SW5mbykgcmV0dXJuO1xyXG5cclxuICAgIGxldCByYW5nZSA9IGJ1bGxldEluZm8ucmFuZ2U7XHJcbiAgICBsZXQgbGFzdFJhbmdlID0gcmFuZ2VbcmFuZ2UubGVuZ3RoIC0gMV07XHJcbiAgICBsZXQgZG9tYWluID0gWzAsIGxhc3RSYW5nZV07XHJcblxyXG4gICAgbGV0IHRpY2tMZW5ndGggPSA2O1xyXG4gICAgbGV0IHZhbHVlVW5pdCA9IGJ1bGxldEluZm8udmFsdWVVbml0O1xyXG4gICAgbGV0IHRpY2tGb3JtYXRGbjogYW55ID0gZnVuY3Rpb24gKHZhbHVlOiBhbnkpIHtcclxuICAgICAgICBpZiAodmFsdWVVbml0ICYmIHZhbHVlVW5pdC5lbmRzV2l0aChcIiVcIikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGQzLnRpY2tGb3JtYXQoMCwgbGFzdFJhbmdlLCA3KSh2YWx1ZSkgKyBcIiAlXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkMy50aWNrRm9ybWF0KDAsIGxhc3RSYW5nZSwgNykodmFsdWUpO1xyXG4gICAgfTtcclxuICAgIGxldCBtYXhUaWNrTGFiZWwgPSB0aWNrRm9ybWF0Rm4obGFzdFJhbmdlKTtcclxuICAgIGxldCBtYXhUaWNrTGFiZWxTaXplID0gaGVscGVyLm1lYXN1cmVUZXh0U2l6ZShcclxuICAgICAgICBtYXhUaWNrTGFiZWwsXHJcbiAgICAgICAgXCJ0cmFja2VyLXRpY2stbGFiZWxcIlxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoYnVsbGV0SW5mby5vcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIpIHtcclxuICAgICAgICBsZXQgc2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpO1xyXG4gICAgICAgIHNjYWxlLmRvbWFpbihkb21haW4pLnJhbmdlKFswLCByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aF0pO1xyXG4gICAgICAgIGNoYXJ0RWxlbWVudHNbXCJzY2FsZVwiXSA9IHNjYWxlO1xyXG5cclxuICAgICAgICBsZXQgYXhpc0dlbiA9IGQzLmF4aXNCb3R0b20oc2NhbGUpO1xyXG4gICAgICAgIGF4aXNHZW4udGlja0Zvcm1hdCh0aWNrRm9ybWF0Rm4pO1xyXG4gICAgICAgIGxldCBheGlzID0gY2hhcnRFbGVtZW50cy5kYXRhQXJlYVxyXG4gICAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgICAgICAuYXR0cihcImlkXCIsIFwiYXhpc1wiKVxyXG4gICAgICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgICAgIFwidHJhbnNmb3JtXCIsXHJcbiAgICAgICAgICAgICAgICBcInRyYW5zbGF0ZSgwLFwiICsgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0ICsgXCIpXCJcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAuY2FsbChheGlzR2VuKVxyXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1heGlzXCIpO1xyXG4gICAgICAgIGNoYXJ0RWxlbWVudHNbXCJheGlzXCJdID0gYXhpcztcclxuXHJcbiAgICAgICAgbGV0IGF4aXNMaW5lID0gYXhpcy5zZWxlY3RBbGwoXCJwYXRoXCIpLnN0eWxlKFwic3Ryb2tlXCIsIFwibm9uZVwiKTtcclxuXHJcbiAgICAgICAgbGV0IGF4aXNUaWNrcyA9IGF4aXMuc2VsZWN0QWxsKFwibGluZVwiKTtcclxuXHJcbiAgICAgICAgbGV0IGF4aXNUaWNrTGFiZWxzID0gYXhpc1xyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwidGV4dFwiKVxyXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci10aWNrLWxhYmVsXCIpO1xyXG5cclxuICAgICAgICBheGlzLmF0dHIoXHJcbiAgICAgICAgICAgIFwid2lkdGhcIixcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggKyBtYXhUaWNrTGFiZWxTaXplLndpZHRoXHJcbiAgICAgICAgKTtcclxuICAgICAgICBheGlzLmF0dHIoXCJoZWlnaHRcIiwgdGlja0xlbmd0aCArIG1heFRpY2tMYWJlbFNpemUuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgLy8gRXhwYW5kIGFyZWFzXHJcbiAgICAgICAgaGVscGVyLmV4cGFuZEFyZWEoXHJcbiAgICAgICAgICAgIGNoYXJ0RWxlbWVudHMuc3ZnLFxyXG4gICAgICAgICAgICArbWF4VGlja0xhYmVsU2l6ZS53aWR0aCxcclxuICAgICAgICAgICAgdGlja0xlbmd0aCArIG1heFRpY2tMYWJlbFNpemUuaGVpZ2h0XHJcbiAgICAgICAgKTtcclxuICAgICAgICBoZWxwZXIuZXhwYW5kQXJlYShcclxuICAgICAgICAgICAgY2hhcnRFbGVtZW50cy5ncmFwaEFyZWEsXHJcbiAgICAgICAgICAgICttYXhUaWNrTGFiZWxTaXplLndpZHRoLFxyXG4gICAgICAgICAgICB0aWNrTGVuZ3RoICsgbWF4VGlja0xhYmVsU2l6ZS5oZWlnaHRcclxuICAgICAgICApO1xyXG4gICAgfSBlbHNlIGlmIChidWxsZXRJbmZvLm9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIpIHtcclxuICAgICAgICBsZXQgc2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpO1xyXG4gICAgICAgIHNjYWxlLmRvbWFpbihkb21haW4pLnJhbmdlKFtyZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQsIDBdKTtcclxuICAgICAgICBjaGFydEVsZW1lbnRzW1wic2NhbGVcIl0gPSBzY2FsZTtcclxuXHJcbiAgICAgICAgbGV0IGF4aXNHZW4gPSBkMy5heGlzTGVmdChzY2FsZSk7XHJcbiAgICAgICAgYXhpc0dlbi50aWNrRm9ybWF0KHRpY2tGb3JtYXRGbik7XHJcbiAgICAgICAgbGV0IGF4aXMgPSBjaGFydEVsZW1lbnRzLmRhdGFBcmVhXHJcbiAgICAgICAgICAgIC5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgXCJheGlzXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAwKVxyXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgMClcclxuICAgICAgICAgICAgLmNhbGwoYXhpc0dlbilcclxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItYXhpc1wiKTtcclxuICAgICAgICBjaGFydEVsZW1lbnRzW1wiYXhpc1wiXSA9IGF4aXM7XHJcblxyXG4gICAgICAgIGxldCBheGlzTGluZSA9IGF4aXMuc2VsZWN0QWxsKFwicGF0aFwiKS5zdHlsZShcInN0cm9rZVwiLCBcIm5vbmVcIik7XHJcblxyXG4gICAgICAgIGxldCBheGlzVGlja3MgPSBheGlzLnNlbGVjdEFsbChcImxpbmVcIik7XHJcblxyXG4gICAgICAgIGxldCBheGlzVGlja0xhYmVscyA9IGF4aXNcclxuICAgICAgICAgICAgLnNlbGVjdEFsbChcInRleHRcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItdGljay1sYWJlbFwiKTtcclxuXHJcbiAgICAgICAgYXhpcy5hdHRyKFwid2lkdGhcIiwgdGlja0xlbmd0aCArIG1heFRpY2tMYWJlbFNpemUud2lkdGgpO1xyXG4gICAgICAgIGF4aXMuYXR0cihcImhlaWdodFwiLCByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCk7XHJcblxyXG4gICAgICAgIC8vIEV4cGFuZCBhcmVhc1xyXG4gICAgICAgIGhlbHBlci5leHBhbmRBcmVhKFxyXG4gICAgICAgICAgICBjaGFydEVsZW1lbnRzLnN2ZyxcclxuICAgICAgICAgICAgdGlja0xlbmd0aCArIG1heFRpY2tMYWJlbFNpemUud2lkdGgsXHJcbiAgICAgICAgICAgIDBcclxuICAgICAgICApO1xyXG4gICAgICAgIGhlbHBlci5leHBhbmRBcmVhKFxyXG4gICAgICAgICAgICBjaGFydEVsZW1lbnRzLmdyYXBoQXJlYSxcclxuICAgICAgICAgICAgdGlja0xlbmd0aCArIG1heFRpY2tMYWJlbFNpemUud2lkdGgsXHJcbiAgICAgICAgICAgIDBcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBoZWxwZXIubW92ZUFyZWEoXHJcbiAgICAgICAgICAgIGNoYXJ0RWxlbWVudHMuZGF0YUFyZWEsXHJcbiAgICAgICAgICAgIHRpY2tMZW5ndGggKyBtYXhUaWNrTGFiZWxTaXplLndpZHRoLFxyXG4gICAgICAgICAgICAwXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gUmVuZGVyIHF1YW50aXRhdGl2ZSByYW5nZSwgcG9vci9hdmVyYWdlL2dvb2QvLi4uXHJcbmZ1bmN0aW9uIHJlbmRlckJhY2tQYW5lbChcclxuICAgIGNoYXJ0RWxlbWVudHM6IENoYXJ0RWxlbWVudHMsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgYnVsbGV0SW5mbzogQnVsbGV0SW5mbyxcclxuICAgIGRhdGFzZXQ6IERhdGFzZXRcclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInJlbmRlckJhY2tQYW5lbFwiKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGRhdGFzZXQpO1xyXG5cclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhYnVsbGV0SW5mbykgcmV0dXJuO1xyXG5cclxuICAgIGxldCBzY2FsZSA9IGNoYXJ0RWxlbWVudHMuc2NhbGU7XHJcblxyXG4gICAgLy8gUHJlcGFyZSBkYXRhXHJcbiAgICBsZXQgcmFuZ2UgPSBidWxsZXRJbmZvLnJhbmdlO1xyXG4gICAgbGV0IHJhbmdlQ29sb3IgPSBidWxsZXRJbmZvLnJhbmdlQ29sb3I7XHJcbiAgICBsZXQgZGF0YSA9IFtdO1xyXG4gICAgbGV0IGxhc3RCb3VuZCA9IDA7XHJcbiAgICBmb3IgKGxldCBpbmQgPSAwOyBpbmQgPCByYW5nZS5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgZGF0YS5wdXNoKHtcclxuICAgICAgICAgICAgc3RhcnQ6IGxhc3RCb3VuZCxcclxuICAgICAgICAgICAgZW5kOiByYW5nZVtpbmRdLFxyXG4gICAgICAgICAgICBjb2xvcjogcmFuZ2VDb2xvcltpbmRdLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxhc3RCb3VuZCA9IHJhbmdlW2luZF07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGJ1bGxldEluZm8ub3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiKSB7XHJcbiAgICAgICAgbGV0IHBhbmVsID0gY2hhcnRFbGVtZW50cy5kYXRhQXJlYVxyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwiYmFja1BhbmVsXCIpXHJcbiAgICAgICAgICAgIC5kYXRhKGRhdGEpXHJcbiAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbiAoZDogYW55LCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKHNjYWxlKGQuc3RhcnQpKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uIChkOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGZ1bmN0aW9uIChkOiBhbnksIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChzY2FsZShkLmVuZCAtIGQuc3RhcnQpKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0KVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIGZ1bmN0aW9uIChkOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkLmNvbG9yO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH0gZWxzZSBpZiAoYnVsbGV0SW5mby5vcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XHJcbiAgICAgICAgbGV0IHBhbmVsID0gY2hhcnRFbGVtZW50cy5kYXRhQXJlYVxyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwiYmFja1BhbmVsXCIpXHJcbiAgICAgICAgICAgIC5kYXRhKGRhdGEpXHJcbiAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbiAoZDogYW55LCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24gKGQ6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3Ioc2NhbGUoZC5lbmQpKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aClcclxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24gKGQ6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQgLVxyXG4gICAgICAgICAgICAgICAgICAgIE1hdGguZmxvb3Ioc2NhbGUoZC5lbmQgLSBkLnN0YXJ0KSlcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24gKGQ6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQuY29sb3I7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBSZW5kZXIgYmFyIGZvciBhY3R1YWwgdmFsdWVcclxuZnVuY3Rpb24gcmVuZGVyQmFyKFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBidWxsZXRJbmZvOiBCdWxsZXRJbmZvLFxyXG4gICAgZGF0YXNldDogRGF0YXNldFxyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVyQmFyXCIpO1xyXG4gICAgLy8gY29uc29sZS5sb2coZGF0YXNldCk7XHJcbiAgICBsZXQgZXJyb3JNZXNzYWdlID0gXCJcIjtcclxuXHJcbiAgICBpZiAoIXJlbmRlckluZm8gfHwgIWJ1bGxldEluZm8pIHJldHVybjtcclxuXHJcbiAgICBsZXQgcmV0QWN0dWFsVmFsdWUgPSBleHByLnJlc29sdmVWYWx1ZShidWxsZXRJbmZvLnZhbHVlLCByZW5kZXJJbmZvKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJldEFjdHVhbFZhbHVlKTtcclxuICAgIGlmICh0eXBlb2YgcmV0QWN0dWFsVmFsdWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0QWN0dWFsVmFsdWU7XHJcbiAgICB9XHJcbiAgICBsZXQgYWN0dWFsVmFsdWUgPSByZXRBY3R1YWxWYWx1ZTtcclxuICAgIGlmIChOdW1iZXIuaXNOYU4oYWN0dWFsVmFsdWUpKSB7XHJcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0IHZhbHVlOiBcIiArIHJldEFjdHVhbFZhbHVlO1xyXG4gICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICB9XHJcbiAgICBsZXQgdmFsdWVDb2xvciA9IGJ1bGxldEluZm8udmFsdWVDb2xvcjtcclxuXHJcbiAgICBsZXQgc2NhbGUgPSBjaGFydEVsZW1lbnRzLnNjYWxlO1xyXG5cclxuICAgIGlmIChidWxsZXRJbmZvLm9yaWVudGF0aW9uID09PSBcImhvcml6b250YWxcIikge1xyXG4gICAgICAgIGxldCBiYXJXaWR0aCA9IHJlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCAvIDM7XHJcbiAgICAgICAgbGV0IGJhciA9IGNoYXJ0RWxlbWVudHMuZGF0YUFyZWFcclxuICAgICAgICAgICAgLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHNjYWxlKDApKVxyXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgYmFyV2lkdGgpXHJcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgTWF0aC5mbG9vcihzY2FsZShhY3R1YWxWYWx1ZSkpKVxyXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBiYXJXaWR0aClcclxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCB2YWx1ZUNvbG9yKTtcclxuICAgIH0gZWxzZSBpZiAoYnVsbGV0SW5mby5vcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XHJcbiAgICAgICAgbGV0IGJhcldpZHRoID0gcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggLyAzO1xyXG4gICAgICAgIGxldCBiYXIgPSBjaGFydEVsZW1lbnRzLmRhdGFBcmVhXHJcbiAgICAgICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCBiYXJXaWR0aClcclxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIE1hdGguZmxvb3Ioc2NhbGUoYWN0dWFsVmFsdWUpKSlcclxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBiYXJXaWR0aClcclxuICAgICAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgICAgICBcImhlaWdodFwiLFxyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0IC0gTWF0aC5mbG9vcihzY2FsZShhY3R1YWxWYWx1ZSkpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCB2YWx1ZUNvbG9yKTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gUmVuZGVyIG1hcmsgbGluZSBmb3IgdGFyZ2V0IHZhbHVlXHJcbmZ1bmN0aW9uIHJlbmRlck1hcmsoXHJcbiAgICBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzLFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGJ1bGxldEluZm86IEJ1bGxldEluZm8sXHJcbiAgICBkYXRhc2V0OiBEYXRhc2V0XHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJNYXJrXCIpO1xyXG4gICAgLy8gY29uc29sZS5sb2coZGF0YXNldCk7XHJcblxyXG4gICAgaWYgKCFyZW5kZXJJbmZvIHx8ICFidWxsZXRJbmZvKSByZXR1cm47XHJcblxyXG4gICAgbGV0IHNob3dNYXJrZXIgPSBidWxsZXRJbmZvLnNob3dNYXJrZXI7XHJcbiAgICBpZiAoIXNob3dNYXJrZXIpIHJldHVybjtcclxuXHJcbiAgICBsZXQgbWFya2VyVmFsdWUgPSBidWxsZXRJbmZvLm1hcmtlclZhbHVlO1xyXG4gICAgbGV0IG1hcmtlckNvbG9yID0gYnVsbGV0SW5mby5tYXJrZXJDb2xvcjtcclxuXHJcbiAgICBsZXQgc2NhbGUgPSBjaGFydEVsZW1lbnRzLnNjYWxlO1xyXG5cclxuICAgIGlmIChidWxsZXRJbmZvLm9yaWVudGF0aW9uID09PSBcImhvcml6b250YWxcIikge1xyXG4gICAgICAgIGxldCBtYXJrZXJMZW5ndGggPSAocmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0ICogMikgLyAzO1xyXG4gICAgICAgIGxldCBtYXJrZXIgPSBjaGFydEVsZW1lbnRzLmRhdGFBcmVhXHJcbiAgICAgICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCBzY2FsZShtYXJrZXJWYWx1ZSkgLSAxLjUpXHJcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBtYXJrZXJMZW5ndGggLyA0KVxyXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIDMpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIG1hcmtlckxlbmd0aClcclxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBtYXJrZXJDb2xvcik7XHJcbiAgICB9IGVsc2UgaWYgKGJ1bGxldEluZm8ub3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIikge1xyXG4gICAgICAgIGxldCBtYXJrZXJMZW5ndGggPSAocmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggKiAyKSAvIDM7XHJcbiAgICAgICAgbGV0IG1hcmtlciA9IGNoYXJ0RWxlbWVudHMuZGF0YUFyZWFcclxuICAgICAgICAgICAgLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIG1hcmtlckxlbmd0aCAvIDQpXHJcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBzY2FsZShtYXJrZXJWYWx1ZSkgLSAxLjUpXHJcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgbWFya2VyTGVuZ3RoKVxyXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCAzKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIG1hcmtlckNvbG9yKTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gQnVsbGV0IGdyYXBoIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0J1bGxldF9ncmFwaFxyXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyQnVsbGV0KFxyXG4gICAgY2FudmFzOiBIVE1MRWxlbWVudCxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBidWxsZXRJbmZvOiBCdWxsZXRJbmZvXHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJCdWxsZXRcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvKTtcclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhYnVsbGV0SW5mbykgcmV0dXJuO1xyXG5cclxuICAgIGxldCBkYXRhc2V0SWQgPSBwYXJzZUZsb2F0KGJ1bGxldEluZm8uZGF0YXNldCk7XHJcbiAgICBsZXQgZGF0YXNldCA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoZGF0YXNldElkKTtcclxuXHJcbiAgICAvLyBTZXQgaW5pdGlhbCBkYXRhQXJlYSBzaXplXHJcbiAgICBpZiAoYnVsbGV0SW5mby5vcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIpIHtcclxuICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZSA9IHsgd2lkdGg6IDI1MCwgaGVpZ2h0OiAyNCB9O1xyXG4gICAgfSBlbHNlIGlmIChidWxsZXRJbmZvLm9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIpIHtcclxuICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZSA9IHsgd2lkdGg6IDI0LCBoZWlnaHQ6IDI1MCB9O1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBjaGFydEVsZW1lbnRzID0gY3JlYXRlQXJlYXMoY2FudmFzLCByZW5kZXJJbmZvLCBidWxsZXRJbmZvKTtcclxuXHJcbiAgICBsZXQgcmV0UmVuZGVyQXhpcyA9IHJlbmRlckF4aXMoXHJcbiAgICAgICAgY2hhcnRFbGVtZW50cyxcclxuICAgICAgICByZW5kZXJJbmZvLFxyXG4gICAgICAgIGJ1bGxldEluZm8sXHJcbiAgICAgICAgZGF0YXNldFxyXG4gICAgKTtcclxuICAgIGlmICh0eXBlb2YgcmV0UmVuZGVyQXhpcyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRSZW5kZXJBeGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlclRpdGxlKGNoYXJ0RWxlbWVudHMsIHJlbmRlckluZm8sIGJ1bGxldEluZm8pO1xyXG5cclxuICAgIHJlbmRlckJhY2tQYW5lbChjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvLCBidWxsZXRJbmZvLCBkYXRhc2V0KTtcclxuXHJcbiAgICBsZXQgcmV0UmVuZGVyQmFyID0gcmVuZGVyQmFyKFxyXG4gICAgICAgIGNoYXJ0RWxlbWVudHMsXHJcbiAgICAgICAgcmVuZGVySW5mbyxcclxuICAgICAgICBidWxsZXRJbmZvLFxyXG4gICAgICAgIGRhdGFzZXRcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldFJlbmRlckJhciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRSZW5kZXJCYXI7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyTWFyayhjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvLCBidWxsZXRJbmZvLCBkYXRhc2V0KTtcclxuXHJcbiAgICBzZXRDaGFydFNjYWxlKGNhbnZhcywgY2hhcnRFbGVtZW50cywgcmVuZGVySW5mbyk7XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XHJcbmltcG9ydCB7IE1vbWVudCB9IGZyb20gXCJtb21lbnRcIjtcclxuaW1wb3J0IHtcclxuICAgIERhdGFzZXRzLFxyXG4gICAgRGF0YVBvaW50LFxyXG4gICAgUmVuZGVySW5mbyxcclxuICAgIERhdGFzZXQsXHJcbiAgICBTaXplLFxyXG4gICAgVHJhbnNmb3JtLFxyXG4gICAgQ2hhcnRFbGVtZW50cyxcclxuICAgIEdyYXBoVHlwZSxcclxuICAgIFZhbHVlVHlwZSxcclxuICAgIENvbW1vbkNoYXJ0SW5mbyxcclxuICAgIExpbmVJbmZvLFxyXG4gICAgQmFySW5mbyxcclxuICAgIFBpZUluZm8sXHJcbiAgICBTdW1tYXJ5SW5mbyxcclxuICAgIEJ1bGxldEluZm8sXHJcbiAgICBNb250aEluZm8sXHJcbiAgICBIZWF0bWFwSW5mbyxcclxufSBmcm9tIFwiLi9kYXRhXCI7XHJcbmltcG9ydCAqIGFzIHBpZSBmcm9tIFwiLi9waWVcIjtcclxuaW1wb3J0ICogYXMgc3VtbWFyeSBmcm9tIFwiLi9zdW1tYXJ5XCI7XHJcbmltcG9ydCAqIGFzIG1vbnRoIGZyb20gXCIuL21vbnRoXCI7XHJcbmltcG9ydCAqIGFzIGhlYXRtYXAgZnJvbSBcIi4vaGVhdG1hcFwiO1xyXG5pbXBvcnQgKiBhcyBidWxsZXQgZnJvbSBcIi4vYnVsbGV0XCI7XHJcbmltcG9ydCAqIGFzIGhlbHBlciBmcm9tIFwiLi9oZWxwZXJcIjtcclxuXHJcbmZ1bmN0aW9uIGdldFhUaWNrSW50ZXJ2YWwoZGF0YXNldHM6IERhdGFzZXRzKSB7XHJcbiAgICBsZXQgdGlja0ludGVydmFsO1xyXG4gICAgbGV0IGRheXMgPSBkYXRhc2V0cy5nZXREYXRlcygpLmxlbmd0aDtcclxuXHJcbiAgICBpZiAoZGF5cyA8PSAxNSkge1xyXG4gICAgICAgIC8vIG51bWJlciBvZiB0aWNrczogMC0xNVxyXG4gICAgICAgIHRpY2tJbnRlcnZhbCA9IGQzLnRpbWVEYXk7XHJcbiAgICB9IGVsc2UgaWYgKGRheXMgPD0gNCAqIDE1KSB7XHJcbiAgICAgICAgLy8gbnVtYmVyIG9mIHRpY2tzOiA0LTE1XHJcbiAgICAgICAgdGlja0ludGVydmFsID0gZDMudGltZURheS5ldmVyeSg0KTtcclxuICAgIH0gZWxzZSBpZiAoZGF5cyA8PSA3ICogMTUpIHtcclxuICAgICAgICAvLyBudW1iZXIgb2YgdGlja3M6IDgtMTVcclxuICAgICAgICB0aWNrSW50ZXJ2YWwgPSBkMy50aW1lV2VlaztcclxuICAgIH0gZWxzZSBpZiAoZGF5cyA8PSAxNSAqIDMwKSB7XHJcbiAgICAgICAgLy8gbnVtYmVyIG9mIHRpY2tzOiA0LTE1XHJcbiAgICAgICAgdGlja0ludGVydmFsID0gZDMudGltZU1vbnRoO1xyXG4gICAgfSBlbHNlIGlmIChkYXlzIDw9IDE1ICogNjApIHtcclxuICAgICAgICAvLyBudW1iZXIgb2YgdGlja3M6IDgtMTVcclxuICAgICAgICB0aWNrSW50ZXJ2YWwgPSBkMy50aW1lTW9udGguZXZlcnkoMik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRpY2tJbnRlcnZhbCA9IGQzLnRpbWVZZWFyO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aWNrSW50ZXJ2YWw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFhUaWNrRm9ybWF0KGRhdGFzZXRzOiBEYXRhc2V0cykge1xyXG4gICAgbGV0IHRpY2tGb3JtYXQ7XHJcbiAgICBsZXQgZGF5cyA9IGRhdGFzZXRzLmdldERhdGVzKCkubGVuZ3RoO1xyXG5cclxuICAgIGlmIChkYXlzIDw9IDE1KSB7XHJcbiAgICAgICAgLy8gbnVtYmVyIG9mIHRpY2tzOiAwLTE1XHJcbiAgICAgICAgdGlja0Zvcm1hdCA9IGQzLnRpbWVGb3JtYXQoXCIleS0lbS0lZFwiKTtcclxuICAgIH0gZWxzZSBpZiAoZGF5cyA8PSA0ICogMTUpIHtcclxuICAgICAgICAvLyBudW1iZXIgb2YgdGlja3M6IDQtMTVcclxuICAgICAgICB0aWNrRm9ybWF0ID0gZDMudGltZUZvcm1hdChcIiV5LSVtLSVkXCIpO1xyXG4gICAgfSBlbHNlIGlmIChkYXlzIDw9IDcgKiAxNSkge1xyXG4gICAgICAgIC8vIG51bWJlciBvZiB0aWNrczogOC0xNVxyXG4gICAgICAgIHRpY2tGb3JtYXQgPSBkMy50aW1lRm9ybWF0KFwiJXktJW0tJWRcIik7XHJcbiAgICB9IGVsc2UgaWYgKGRheXMgPD0gMTUgKiAzMCkge1xyXG4gICAgICAgIC8vIG51bWJlciBvZiB0aWNrczogNC0xNVxyXG4gICAgICAgIHRpY2tGb3JtYXQgPSBkMy50aW1lRm9ybWF0KFwiJXkgJWJcIik7XHJcbiAgICB9IGVsc2UgaWYgKGRheXMgPD0gMTUgKiA2MCkge1xyXG4gICAgICAgIC8vIG51bWJlciBvZiB0aWNrczogOC0xNVxyXG4gICAgICAgIHRpY2tGb3JtYXQgPSBkMy50aW1lRm9ybWF0KFwiJXkgJWJcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRpY2tGb3JtYXQgPSBkMy50aW1lRm9ybWF0KFwiJVlcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRpY2tGb3JtYXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFlUaWNrVmFsdWVzKHlMb3dlcjogbnVtYmVyLCB5VXBwZXI6IG51bWJlcikge1xyXG4gICAgLy8gY3VycmVudGx5IHVzZWQgZm9yIHRpbWUgdmFsdWUgdGljayBvbmx5LCB2YWx1ZSBpbiBzZWNvbmRzXHJcbiAgICBjb25zdCBhYnNFeHRlbnQgPSBNYXRoLmFicyh5VXBwZXIgLSB5TG93ZXIpO1xyXG4gICAgbGV0IHRpY2tWYWx1ZXMgPSBbXTtcclxuICAgIGlmIChhYnNFeHRlbnQgPiA1ICogNjAgKiA2MCkge1xyXG4gICAgICAgIC8vIGV4dGVudCBvdmVyIHRoYW4gNSBob3Vyc1xyXG4gICAgICAgIC8vIHRpY2sgb24gdGhlIGhvdXJcclxuICAgICAgICB5TG93ZXIgPSBNYXRoLmZsb29yKHlMb3dlciAvIDM2MDApICogMzYwMDtcclxuICAgICAgICB5VXBwZXIgPSBNYXRoLmNlaWwoeVVwcGVyIC8gMzYwMCkgKiAzNjAwO1xyXG5cclxuICAgICAgICB0aWNrVmFsdWVzID0gZDMucmFuZ2UoeUxvd2VyLCB5VXBwZXIsIDM2MDApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyB0aWNrIG9uIHRoZSBoYWxmIGhvdXJcclxuICAgICAgICB5TG93ZXIgPSBNYXRoLmZsb29yKHlMb3dlciAvIDE4MDApICogMTgwMDtcclxuICAgICAgICB5VXBwZXIgPSBNYXRoLmNlaWwoeVVwcGVyIC8gMTgwMCkgKiAxODAwO1xyXG5cclxuICAgICAgICB0aWNrVmFsdWVzID0gZDMucmFuZ2UoeUxvd2VyLCB5VXBwZXIsIDE4MDApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aWNrVmFsdWVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRZVGlja0Zvcm1hdCh5TG93ZXI6IG51bWJlciwgeVVwcGVyOiBudW1iZXIsIHNraXA6IGJvb2xlYW4gPSB0cnVlKSB7XHJcbiAgICAvLyBjdXJyZW50bHkgdXNlZCBmb3IgdGltZSB2YWx1ZSB0aWNrIG9ubHlcclxuICAgIC8vIHJldHVybiBhIGZ1bmN0aW9uIGNvbnZlcnQgdmFsdWUgdG8gdGltZSBzdHJpbmdcclxuICAgIGZ1bmN0aW9uIHRpY2tGb3JtYXQodmFsdWU6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgYWJzRXh0ZW50ID0gTWF0aC5hYnMoeVVwcGVyIC0geUxvd2VyKTtcclxuICAgICAgICBsZXQgZGF5U3RhcnQgPSB3aW5kb3cubW9tZW50KFwiMDA6MDBcIiwgXCJISDptbVwiLCB0cnVlKTtcclxuICAgICAgICBsZXQgdGlja1RpbWUgPSBkYXlTdGFydC5hZGQodmFsdWUsIFwic2Vjb25kc1wiKTtcclxuICAgICAgICBsZXQgZm9ybWF0ID0gdGlja1RpbWUuZm9ybWF0KFwiSEg6bW1cIik7XHJcbiAgICAgICAgaWYgKHNraXAgJiYgYWJzRXh0ZW50ID4gMTIgKiA2MCAqIDYwKSB7XHJcbiAgICAgICAgICAgIGxldCBkZXZIb3VyID0gKHZhbHVlIC0geUxvd2VyKSAvIDM2MDA7XHJcbiAgICAgICAgICAgIGxldCBpbnRlcmxlYXZlID0gZGV2SG91ciAlIDI7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA8PSB5TG93ZXIpIHtcclxuICAgICAgICAgICAgICAgIGZvcm1hdCA9IFwiXCI7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPj0geVVwcGVyKSB7XHJcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSBcIlwiO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGludGVybGVhdmUgPiAxLjApIHtcclxuICAgICAgICAgICAgICAgIGZvcm1hdCA9IHRpY2tUaW1lLmZvcm1hdChcIkhIOm1tXCIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gXCJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZvcm1hdDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGlja0Zvcm1hdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihjYW52YXM6IEhUTUxFbGVtZW50LCByZW5kZXJJbmZvOiBSZW5kZXJJbmZvKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInJlbmRlclwiKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uZGF0YXNldHMpO1xyXG5cclxuICAgIC8vIERhdGEgcHJlcHJvY2Vzc2luZ1xyXG4gICAgZm9yIChsZXQgZGF0YXNldCBvZiByZW5kZXJJbmZvLmRhdGFzZXRzKSB7XHJcbiAgICAgICAgaWYgKGRhdGFzZXQuZ2V0UXVlcnkoKS51c2VkQXNYRGF0YXNldCkgY29udGludWU7XHJcbiAgICAgICAgLy8gdmFsdWVTaGlmdFxyXG4gICAgICAgIGlmIChyZW5kZXJJbmZvLnZhbHVlU2hpZnRbZGF0YXNldC5nZXRJZCgpXSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBkYXRhc2V0LnNoaWZ0KHJlbmRlckluZm8udmFsdWVTaGlmdFtkYXRhc2V0LmdldElkKCldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcGVuYWx0eVxyXG4gICAgICAgIGlmIChyZW5kZXJJbmZvLnBlbmFsdHlbZGF0YXNldC5nZXRJZCgpXSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBkYXRhc2V0LnNldFBlbmFsdHkocmVuZGVySW5mby5wZW5hbHR5W2RhdGFzZXQuZ2V0SWQoKV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBhY2N1bVxyXG4gICAgICAgIGlmIChyZW5kZXJJbmZvLmFjY3VtW2RhdGFzZXQuZ2V0SWQoKV0pIHtcclxuICAgICAgICAgICAgZGF0YXNldC5hY2N1bXVsYXRlVmFsdWVzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGxpbmVJbmZvIG9mIHJlbmRlckluZm8ubGluZSkge1xyXG4gICAgICAgIGxldCByZXQgPSByZW5kZXJMaW5lQ2hhcnQoY2FudmFzLCByZW5kZXJJbmZvLCBsaW5lSW5mbyk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBiYXJJbmZvIG9mIHJlbmRlckluZm8uYmFyKSB7XHJcbiAgICAgICAgbGV0IHJldCA9IHJlbmRlckJhckNoYXJ0KGNhbnZhcywgcmVuZGVySW5mbywgYmFySW5mbyk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBwaWVJbmZvIG9mIHJlbmRlckluZm8ucGllKSB7XHJcbiAgICAgICAgbGV0IHJldCA9IHBpZS5yZW5kZXJQaWVDaGFydChjYW52YXMsIHJlbmRlckluZm8sIHBpZUluZm8pO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgc3VtbWFyeUluZm8gb2YgcmVuZGVySW5mby5zdW1tYXJ5KSB7XHJcbiAgICAgICAgbGV0IHJldCA9IHN1bW1hcnkucmVuZGVyU3VtbWFyeShjYW52YXMsIHJlbmRlckluZm8sIHN1bW1hcnlJbmZvKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAobGV0IGJ1bGxldEluZm8gb2YgcmVuZGVySW5mby5idWxsZXQpIHtcclxuICAgICAgICBsZXQgcmV0ID0gYnVsbGV0LnJlbmRlckJ1bGxldChjYW52YXMsIHJlbmRlckluZm8sIGJ1bGxldEluZm8pO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgbW9udGhJbmZvIG9mIHJlbmRlckluZm8ubW9udGgpIHtcclxuICAgICAgICBsZXQgcmV0ID0gbW9udGgucmVuZGVyTW9udGgoY2FudmFzLCByZW5kZXJJbmZvLCBtb250aEluZm8pO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaGVhdG1hcEluZm8gb2YgcmVuZGVySW5mby5oZWF0bWFwKSB7XHJcbiAgICAgICAgbGV0IHJldCA9IGhlYXRtYXAucmVuZGVySGVhdG1hcChjYW52YXMsIHJlbmRlckluZm8sIGhlYXRtYXBJbmZvKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyWEF4aXMoXHJcbiAgICBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzLFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGNoYXJ0SW5mbzogQ29tbW9uQ2hhcnRJbmZvXHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJYQXhpc1wiKTtcclxuXHJcbiAgICBpZiAoIXJlbmRlckluZm8gfHwgIWNoYXJ0SW5mbykgcmV0dXJuO1xyXG5cclxuICAgIGxldCBkYXRhc2V0cyA9IHJlbmRlckluZm8uZGF0YXNldHM7XHJcbiAgICBsZXQgeERvbWFpbiA9IGQzLmV4dGVudChkYXRhc2V0cy5nZXREYXRlcygpKTtcclxuICAgIGxldCB4U2NhbGUgPSBkM1xyXG4gICAgICAgIC5zY2FsZVRpbWUoKVxyXG4gICAgICAgIC5kb21haW4oeERvbWFpbilcclxuICAgICAgICAucmFuZ2UoWzAsIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoXSk7XHJcbiAgICBjaGFydEVsZW1lbnRzW1wieFNjYWxlXCJdID0geFNjYWxlO1xyXG5cclxuICAgIGxldCB0aWNrSW50ZXJ2YWwgPSBnZXRYVGlja0ludGVydmFsKGRhdGFzZXRzKTtcclxuICAgIGxldCB0aWNrRm9ybWF0ID0gZ2V0WFRpY2tGb3JtYXQoZGF0YXNldHMpO1xyXG5cclxuICAgIGxldCB4QXhpc0dlbiA9IGQzXHJcbiAgICAgICAgLmF4aXNCb3R0b20oeFNjYWxlKVxyXG4gICAgICAgIC50aWNrcyh0aWNrSW50ZXJ2YWwpXHJcbiAgICAgICAgLnRpY2tGb3JtYXQodGlja0Zvcm1hdCk7XHJcbiAgICBsZXQgeEF4aXMgPSBjaGFydEVsZW1lbnRzLmRhdGFBcmVhIC8vIGF4aXMgaW5jbHVkZXMgdGlja3NcclxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJ4QXhpc1wiKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcInRyYW5zZm9ybVwiLFxyXG4gICAgICAgICAgICBcInRyYW5zbGF0ZSgwLFwiICsgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0ICsgXCIpXCJcclxuICAgICAgICApIC8vIHJlbGF0aXZlIHRvIGdyYXBoQXJlYVxyXG4gICAgICAgIC5jYWxsKHhBeGlzR2VuKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLWF4aXNcIik7XHJcbiAgICBpZiAoY2hhcnRJbmZvLnhBeGlzQ29sb3IpIHtcclxuICAgICAgICB4QXhpcy5zdHlsZShcInN0cm9rZVwiLCBjaGFydEluZm8ueEF4aXNDb2xvcik7XHJcbiAgICB9XHJcbiAgICBjaGFydEVsZW1lbnRzW1wieEF4aXNcIl0gPSB4QXhpcztcclxuXHJcbiAgICBsZXQgdGV4dFNpemUgPSBoZWxwZXIubWVhc3VyZVRleHRTaXplKFwiOTktOTktOTlcIik7XHJcblxyXG4gICAgbGV0IHhBeGlzVGlja0xhYmVscyA9IHhBeGlzXHJcbiAgICAgICAgLnNlbGVjdEFsbChcInRleHRcIilcclxuICAgICAgICAuYXR0cihcInhcIiwgLTEgKiB0ZXh0U2l6ZS5oZWlnaHQgKiBNYXRoLmNvcygoNjUgLyAxODApICogTWF0aC5QSSkpXHJcbiAgICAgICAgLmF0dHIoXCJ5XCIsIDApXHJcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoLTY1KVwiKVxyXG4gICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwiZW5kXCIpXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItdGljay1sYWJlbFwiKTtcclxuICAgIGlmIChjaGFydEluZm8ueEF4aXNDb2xvcikge1xyXG4gICAgICAgIHhBeGlzVGlja0xhYmVscy5zdHlsZShcImZpbGxcIiwgY2hhcnRJbmZvLnhBeGlzQ29sb3IpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB0aWNrTGVuZ3RoID0gNjtcclxuICAgIGxldCB0aWNrTGFiZWxIZWlnaHQgPSB0ZXh0U2l6ZS53aWR0aCAqIE1hdGguc2luKCg2NSAvIDE4MCkgKiBNYXRoLlBJKTtcclxuICAgIGxldCB4QXhpc0xhYmVsID0geEF4aXNcclxuICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgIC50ZXh0KGNoYXJ0SW5mby54QXhpc0xhYmVsKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcInRyYW5zZm9ybVwiLFxyXG4gICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCAvIDIgK1xyXG4gICAgICAgICAgICAgICAgXCIsXCIgK1xyXG4gICAgICAgICAgICAgICAgKHRpY2tMZW5ndGggKyB0aWNrTGFiZWxIZWlnaHQpICtcclxuICAgICAgICAgICAgICAgIFwiKVwiXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLWF4aXMtbGFiZWxcIik7XHJcbiAgICBpZiAoY2hhcnRJbmZvLnhBeGlzTGFiZWxDb2xvcikge1xyXG4gICAgICAgIHhBeGlzTGFiZWwuc3R5bGUoXCJmaWxsXCIsIGNoYXJ0SW5mby54QXhpc0xhYmVsQ29sb3IpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHhBeGlzIGhlaWdodFxyXG4gICAgeEF4aXMuYXR0cihcImhlaWdodFwiLCB0aWNrTGVuZ3RoICsgdGlja0xhYmVsSGVpZ2h0KTtcclxuXHJcbiAgICAvLyBFeHBhbmQgYXJlYXNcclxuICAgIGhlbHBlci5leHBhbmRBcmVhKGNoYXJ0RWxlbWVudHMuc3ZnLCAwLCB0aWNrTGVuZ3RoICsgdGlja0xhYmVsSGVpZ2h0KTtcclxuICAgIGhlbHBlci5leHBhbmRBcmVhKGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhLCAwLCB0aWNrTGVuZ3RoICsgdGlja0xhYmVsSGVpZ2h0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyWUF4aXMoXHJcbiAgICBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzLFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGNoYXJ0SW5mbzogQ29tbW9uQ2hhcnRJbmZvLFxyXG4gICAgeUF4aXNMb2NhdGlvbjogc3RyaW5nLFxyXG4gICAgZGF0YXNldElkczogQXJyYXk8bnVtYmVyPlxyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVyWUF4aXNcIilcclxuICAgIC8vIGNvbnNvbGUubG9nKGRhdGFzZXRzKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8pO1xyXG4gICAgLy8gY29uc29sZS5sb2coZGF0YXNldElkcyk7XHJcblxyXG4gICAgaWYgKCFyZW5kZXJJbmZvIHx8ICFjaGFydEluZm8pIHJldHVybjtcclxuXHJcbiAgICBsZXQgZGF0YXNldHMgPSByZW5kZXJJbmZvLmRhdGFzZXRzO1xyXG4gICAgaWYgKGRhdGFzZXRJZHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh5QXhpc0xvY2F0aW9uICE9PSBcImxlZnRcIiAmJiB5QXhpc0xvY2F0aW9uICE9PSBcInJpZ2h0XCIpIHJldHVybjtcclxuXHJcbiAgICBsZXQgeU1pbk9mRGF0YXNldHMgPSBudWxsO1xyXG4gICAgbGV0IHlNYXhPZkRhdGFzZXRzID0gbnVsbDtcclxuICAgIGxldCB0bXBWYWx1ZUlzVGltZSA9IG51bGw7XHJcbiAgICBsZXQgdmFsdWVJc1RpbWUgPSBmYWxzZTtcclxuICAgIGZvciAobGV0IGRhdGFzZXRJZCBvZiBkYXRhc2V0SWRzKSB7XHJcbiAgICAgICAgbGV0IGRhdGFzZXQgPSBkYXRhc2V0cy5nZXREYXRhc2V0QnlJZChkYXRhc2V0SWQpO1xyXG4gICAgICAgIGlmIChkYXRhc2V0LmdldFF1ZXJ5KCkudXNlZEFzWERhdGFzZXQpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICBpZiAoeU1pbk9mRGF0YXNldHMgPT09IG51bGwgfHwgZGF0YXNldC5nZXRZTWluKCkgPCB5TWluT2ZEYXRhc2V0cykge1xyXG4gICAgICAgICAgICB5TWluT2ZEYXRhc2V0cyA9IGRhdGFzZXQuZ2V0WU1pbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoeU1heE9mRGF0YXNldHMgPT09IG51bGwgfHwgZGF0YXNldC5nZXRZTWF4KCkgPiB5TWF4T2ZEYXRhc2V0cykge1xyXG4gICAgICAgICAgICB5TWF4T2ZEYXRhc2V0cyA9IGRhdGFzZXQuZ2V0WU1heCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTmVlZCBhbGwgZGF0YXNldHMgaGF2ZSBzYW1lIHNldHRpbmdzIGZvciB0aW1lIHZhbHVlXHJcbiAgICAgICAgdmFsdWVJc1RpbWUgPSBkYXRhc2V0LnZhbHVlVHlwZSA9PT0gVmFsdWVUeXBlLlRpbWU7XHJcbiAgICAgICAgaWYgKHRtcFZhbHVlSXNUaW1lID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRtcFZhbHVlSXNUaW1lID0gdmFsdWVJc1RpbWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlSXNUaW1lICE9PSB0bXBWYWx1ZUlzVGltZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiTm90IGFsbCB2YWx1ZXMgaW4gdGltZSBmb3JtYXRcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKHlNaW5PZkRhdGFzZXRzKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHlNYXhPZkRhdGFzZXRzKTtcclxuXHJcbiAgICBsZXQgeU1pbiA9IG51bGw7XHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICB5TWluID0gY2hhcnRJbmZvLnlNaW5bMF07XHJcbiAgICB9IGVsc2UgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwicmlnaHRcIikge1xyXG4gICAgICAgIHlNaW4gPSBjaGFydEluZm8ueU1pblsxXTtcclxuICAgIH1cclxuICAgIGxldCB5TWluQXNzaWduZWQgPSBmYWxzZTtcclxuICAgIGlmICh0eXBlb2YgeU1pbiAhPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgIHlNaW4gPSB5TWluT2ZEYXRhc2V0cztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgeU1pbkFzc2lnbmVkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgeU1heCA9IG51bGw7XHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICB5TWF4ID0gY2hhcnRJbmZvLnlNYXhbMF07XHJcbiAgICB9IGVsc2UgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwicmlnaHRcIikge1xyXG4gICAgICAgIHlNYXggPSBjaGFydEluZm8ueU1heFsxXTtcclxuICAgIH1cclxuICAgIGxldCB5TWF4QXNzaWduZWQgPSBmYWxzZTtcclxuICAgIGlmICh0eXBlb2YgeU1heCAhPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgIHlNYXggPSB5TWF4T2ZEYXRhc2V0cztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgeU1heEFzc2lnbmVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmICh5TWF4IDwgeU1pbikge1xyXG4gICAgICAgIGxldCB5VG1wID0geU1pbjtcclxuICAgICAgICB5TWluID0geU1heDtcclxuICAgICAgICB5TWF4ID0geVRtcDtcclxuICAgICAgICBsZXQgeVRtcEFzc2lnbmVkID0geU1pbkFzc2lnbmVkO1xyXG4gICAgICAgIHlNaW5Bc3NpZ25lZCA9IHlNYXhBc3NpZ25lZDtcclxuICAgICAgICB5TWF4QXNzaWduZWQgPSB5VG1wQXNzaWduZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHlFeHRlbnQgPSB5TWF4IC0geU1pbjtcclxuXHJcbiAgICBsZXQgeVNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKTtcclxuICAgIGxldCB5TG93ZXIsIHlVcHBlcjtcclxuICAgIGlmICh5TWluQXNzaWduZWQpIHtcclxuICAgICAgICB5TG93ZXIgPSB5TWluO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB5TG93ZXIgPSB5TWluIC0geUV4dGVudCAqIDAuMjtcclxuICAgIH1cclxuICAgIGlmICh5TWF4QXNzaWduZWQpIHtcclxuICAgICAgICB5VXBwZXIgPSB5TWF4O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB5VXBwZXIgPSB5TWF4ICsgeUV4dGVudCAqIDAuMjtcclxuICAgIH1cclxuICAgIC8vIGlmIGl0IGlzIGJhciBjaGFydCwgemVybyBtdXN0IGJlIGNvbnRhaW5lZCBpbiB0aGUgcmFuZ2VcclxuICAgIGlmIChjaGFydEluZm8uR2V0R3JhcGhUeXBlKCkgPT09IEdyYXBoVHlwZS5CYXIpIHtcclxuICAgICAgICBpZiAoeVVwcGVyIDwgMC4wKSB7XHJcbiAgICAgICAgICAgIHlVcHBlciA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh5TG93ZXIgPiAwLjApIHtcclxuICAgICAgICAgICAgeUxvd2VyID0gMC4wO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGxldCBkb21haW4gPSBbeUxvd2VyLCB5VXBwZXJdO1xyXG4gICAgaWYgKFxyXG4gICAgICAgICh5QXhpc0xvY2F0aW9uID09PSBcImxlZnRcIiAmJiBjaGFydEluZm8ucmV2ZXJzZVlBeGlzWzBdKSB8fFxyXG4gICAgICAgICh5QXhpc0xvY2F0aW9uID09PSBcInJpZ2h0XCIgJiYgY2hhcnRJbmZvLnJldmVyc2VZQXhpc1sxXSlcclxuICAgICkge1xyXG4gICAgICAgIGRvbWFpbiA9IFt5VXBwZXIsIHlMb3dlcl07XHJcbiAgICB9XHJcbiAgICB5U2NhbGUuZG9tYWluKGRvbWFpbikucmFuZ2UoW3JlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCwgMF0pO1xyXG5cclxuICAgIGlmICh5QXhpc0xvY2F0aW9uID09PSBcImxlZnRcIikge1xyXG4gICAgICAgIGNoYXJ0RWxlbWVudHNbXCJsZWZ0WVNjYWxlXCJdID0geVNjYWxlO1xyXG4gICAgfSBlbHNlIGlmICh5QXhpc0xvY2F0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICBjaGFydEVsZW1lbnRzW1wicmlnaHRZU2NhbGVcIl0gPSB5U2NhbGU7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHlBeGlzQ29sb3IgPSBcIlwiO1xyXG4gICAgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwibGVmdFwiKSB7XHJcbiAgICAgICAgeUF4aXNDb2xvciA9IGNoYXJ0SW5mby55QXhpc0NvbG9yWzBdO1xyXG4gICAgfSBlbHNlIGlmICh5QXhpc0xvY2F0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICB5QXhpc0NvbG9yID0gY2hhcnRJbmZvLnlBeGlzQ29sb3JbMV07XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHlBeGlzTGFiZWxDb2xvciA9IFwiXCI7XHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICB5QXhpc0xhYmVsQ29sb3IgPSBjaGFydEluZm8ueUF4aXNMYWJlbENvbG9yWzBdO1xyXG4gICAgfSBlbHNlIGlmICh5QXhpc0xvY2F0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICB5QXhpc0xhYmVsQ29sb3IgPSBjaGFydEluZm8ueUF4aXNMYWJlbENvbG9yWzFdO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB5QXhpc0xhYmVsVGV4dCA9IFwiXCI7XHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICB5QXhpc0xhYmVsVGV4dCA9IGNoYXJ0SW5mby55QXhpc0xhYmVsWzBdO1xyXG4gICAgfSBlbHNlIGlmICh5QXhpc0xvY2F0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICB5QXhpc0xhYmVsVGV4dCA9IGNoYXJ0SW5mby55QXhpc0xhYmVsWzFdO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB5QXhpc1VuaXRUZXh0ID0gXCJcIjtcclxuICAgIGlmICh5QXhpc0xvY2F0aW9uID09PSBcImxlZnRcIikge1xyXG4gICAgICAgIHlBeGlzVW5pdFRleHQgPSBjaGFydEluZm8ueUF4aXNVbml0WzBdO1xyXG4gICAgfSBlbHNlIGlmICh5QXhpc0xvY2F0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICB5QXhpc1VuaXRUZXh0ID0gY2hhcnRJbmZvLnlBeGlzVW5pdFsxXTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgeUF4aXNHZW47XHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICB5QXhpc0dlbiA9IGQzLmF4aXNMZWZ0KHlTY2FsZSk7XHJcbiAgICB9IGVsc2UgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwicmlnaHRcIikge1xyXG4gICAgICAgIHlBeGlzR2VuID0gZDMuYXhpc1JpZ2h0KHlTY2FsZSk7XHJcbiAgICB9XHJcbiAgICBpZiAoeUF4aXNHZW4gJiYgdmFsdWVJc1RpbWUpIHtcclxuICAgICAgICBsZXQgdGlja0Zvcm1hdCA9IGdldFlUaWNrRm9ybWF0KHlMb3dlciwgeVVwcGVyKTtcclxuICAgICAgICBsZXQgdGlja1ZhbHVlcyA9IGdldFlUaWNrVmFsdWVzKHlMb3dlciwgeVVwcGVyKTtcclxuICAgICAgICB5QXhpc0dlbi50aWNrVmFsdWVzKHRpY2tWYWx1ZXMpLnRpY2tGb3JtYXQodGlja0Zvcm1hdCk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHlBeGlzID0gY2hhcnRFbGVtZW50cy5kYXRhQXJlYVxyXG4gICAgICAgIC5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcInlBeGlzXCIpXHJcbiAgICAgICAgLmNhbGwoeUF4aXNHZW4pXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItYXhpc1wiKTtcclxuICAgIGlmICh5QXhpc0xvY2F0aW9uID09IFwicmlnaHRcIikge1xyXG4gICAgICAgIHlBeGlzLmF0dHIoXHJcbiAgICAgICAgICAgIFwidHJhbnNmb3JtXCIsXHJcbiAgICAgICAgICAgIFwidHJhbnNsYXRlKFwiICsgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggKyBcIiAsMClcIlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICBjaGFydEVsZW1lbnRzW1wibGVmdFlBeGlzXCJdID0geUF4aXM7XHJcbiAgICB9IGVsc2UgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwicmlnaHRcIikge1xyXG4gICAgICAgIGNoYXJ0RWxlbWVudHNbXCJyaWdodFlBeGlzXCJdID0geUF4aXM7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHlBeGlzTGluZSA9IHlBeGlzLnNlbGVjdEFsbChcInBhdGhcIik7XHJcbiAgICBpZiAoeUF4aXNDb2xvcikge1xyXG4gICAgICAgIHlBeGlzTGluZS5zdHlsZShcInN0cm9rZVwiLCB5QXhpc0NvbG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgeUF4aXNUaWNrcyA9IHlBeGlzLnNlbGVjdEFsbChcImxpbmVcIik7XHJcbiAgICBpZiAoeUF4aXNDb2xvcikge1xyXG4gICAgICAgIHlBeGlzVGlja3Muc3R5bGUoXCJzdHJva2VcIiwgeUF4aXNDb2xvcik7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHlBeGlzVGlja0xhYmVscyA9IHlBeGlzXHJcbiAgICAgICAgLnNlbGVjdEFsbChcInRleHRcIilcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci10aWNrLWxhYmVsXCIpO1xyXG4gICAgaWYgKHlBeGlzQ29sb3IpIHtcclxuICAgICAgICB5QXhpc1RpY2tMYWJlbHMuc3R5bGUoXCJmaWxsXCIsIHlBeGlzQ29sb3IpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEdldCBtYXggdGljayBsYWJlbCB3aWR0aFxyXG4gICAgbGV0IHlUaWNrRm9ybWF0ID0gZDMudGlja0Zvcm1hdCh5TG93ZXIsIHlVcHBlciwgMTApO1xyXG4gICAgaWYgKHZhbHVlSXNUaW1lKSB7XHJcbiAgICAgICAgeVRpY2tGb3JtYXQgPSBnZXRZVGlja0Zvcm1hdCh5TG93ZXIsIHlVcHBlciwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgbGV0IHlMb3dlckxhYmVsU2l6ZSA9IGhlbHBlci5tZWFzdXJlVGV4dFNpemUoXHJcbiAgICAgICAgeVRpY2tGb3JtYXQoeUxvd2VyKSxcclxuICAgICAgICBcInRyYWNrZXItYXhpcy1sYWJlbFwiXHJcbiAgICApO1xyXG4gICAgbGV0IHlVcHBlckxhYmVsU2l6ZSA9IGhlbHBlci5tZWFzdXJlVGV4dFNpemUoXHJcbiAgICAgICAgeVRpY2tGb3JtYXQoeVVwcGVyKSxcclxuICAgICAgICBcInRyYWNrZXItYXhpcy1sYWJlbFwiXHJcbiAgICApO1xyXG4gICAgbGV0IG1heFRpY2tMYWJlbFdpZHRoID0gTWF0aC5tYXgoXHJcbiAgICAgICAgeUxvd2VyTGFiZWxTaXplLndpZHRoLFxyXG4gICAgICAgIHlVcHBlckxhYmVsU2l6ZS53aWR0aFxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoeUF4aXNVbml0VGV4dCAhPT0gXCJcIikge1xyXG4gICAgICAgIHlBeGlzTGFiZWxUZXh0ICs9IFwiIChcIiArIHlBeGlzVW5pdFRleHQgKyBcIilcIjtcclxuICAgIH1cclxuICAgIGxldCB5VGlja0xlbmd0aCA9IDY7XHJcbiAgICBsZXQgeUF4aXNMYWJlbFNpemUgPSBoZWxwZXIubWVhc3VyZVRleHRTaXplKHlBeGlzTGFiZWxUZXh0KTtcclxuICAgIGxldCB5QXhpc0xhYmVsID0geUF4aXNcclxuICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgIC50ZXh0KHlBeGlzTGFiZWxUZXh0KVxyXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwicm90YXRlKC05MClcIilcclxuICAgICAgICAuYXR0cihcInhcIiwgKC0xICogcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0KSAvIDIuMClcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1heGlzLWxhYmVsXCIpO1xyXG4gICAgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwibGVmdFwiKSB7XHJcbiAgICAgICAgeUF4aXNMYWJlbC5hdHRyKFxyXG4gICAgICAgICAgICBcInlcIixcclxuICAgICAgICAgICAgLXlUaWNrTGVuZ3RoIC0gbWF4VGlja0xhYmVsV2lkdGggLSB5QXhpc0xhYmVsU2l6ZS5oZWlnaHQgLyAyLjBcclxuICAgICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB5QXhpc0xhYmVsLmF0dHIoXHJcbiAgICAgICAgICAgIFwieVwiLFxyXG4gICAgICAgICAgICAreVRpY2tMZW5ndGggKyBtYXhUaWNrTGFiZWxXaWR0aCArIHlBeGlzTGFiZWxTaXplLmhlaWdodFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbiAgICBpZiAoeUF4aXNMYWJlbENvbG9yKSB7XHJcbiAgICAgICAgeUF4aXNMYWJlbC5zdHlsZShcImZpbGxcIiwgeUF4aXNMYWJlbENvbG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgeUF4aXNXaWR0aCA9IHlBeGlzTGFiZWxTaXplLmhlaWdodCArIG1heFRpY2tMYWJlbFdpZHRoICsgeVRpY2tMZW5ndGg7XHJcbiAgICB5QXhpcy5hdHRyKFwid2lkdGhcIiwgeUF4aXNXaWR0aCk7XHJcblxyXG4gICAgLy8gRXhwYW5kIGFyZWFzXHJcbiAgICBoZWxwZXIuZXhwYW5kQXJlYShjaGFydEVsZW1lbnRzLnN2ZywgeUF4aXNXaWR0aCwgMCk7XHJcbiAgICBoZWxwZXIuZXhwYW5kQXJlYShjaGFydEVsZW1lbnRzLmdyYXBoQXJlYSwgeUF4aXNXaWR0aCwgMCk7XHJcblxyXG4gICAgLy8gTW92ZSBhcmVhc1xyXG4gICAgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwibGVmdFwiKSB7XHJcbiAgICAgICAgLy8gTW92ZSBkYXRhQXJlYVxyXG4gICAgICAgIGhlbHBlci5tb3ZlQXJlYShjaGFydEVsZW1lbnRzLmRhdGFBcmVhLCB5QXhpc1dpZHRoLCAwKTtcclxuXHJcbiAgICAgICAgLy8gTW92ZSB0aXRsZVxyXG4gICAgICAgIGlmIChjaGFydEVsZW1lbnRzLnRpdGxlKSB7XHJcbiAgICAgICAgICAgIGhlbHBlci5tb3ZlQXJlYShjaGFydEVsZW1lbnRzLnRpdGxlLCB5QXhpc1dpZHRoLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckxpbmUoXHJcbiAgICBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzLFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGxpbmVJbmZvOiBMaW5lSW5mbyxcclxuICAgIGRhdGFzZXQ6IERhdGFzZXQsXHJcbiAgICB5QXhpc0xvY2F0aW9uOiBzdHJpbmdcclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhkYXRhc2V0KTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8pO1xyXG5cclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhbGluZUluZm8pIHJldHVybjtcclxuXHJcbiAgICBsZXQgeVNjYWxlOiBhbnkgPSBudWxsO1xyXG4gICAgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwibGVmdFwiKSB7XHJcbiAgICAgICAgeVNjYWxlID0gY2hhcnRFbGVtZW50cy5sZWZ0WVNjYWxlO1xyXG4gICAgfSBlbHNlIGlmICh5QXhpc0xvY2F0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICB5U2NhbGUgPSBjaGFydEVsZW1lbnRzLnJpZ2h0WVNjYWxlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChsaW5lSW5mby5zaG93TGluZVtkYXRhc2V0LmdldElkKCldKSB7XHJcbiAgICAgICAgbGV0IGxpbmVHZW4gPSBkM1xyXG4gICAgICAgICAgICAubGluZTxEYXRhUG9pbnQ+KClcclxuICAgICAgICAgICAgLmRlZmluZWQoZnVuY3Rpb24gKHA6IERhdGFQb2ludCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHAudmFsdWUgIT09IG51bGw7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC54KGZ1bmN0aW9uIChwOiBEYXRhUG9pbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjaGFydEVsZW1lbnRzLnhTY2FsZShwLmRhdGUpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAueShmdW5jdGlvbiAocDogRGF0YVBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geVNjYWxlKHAudmFsdWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbGV0IGxpbmUgPSBjaGFydEVsZW1lbnRzLmRhdGFBcmVhXHJcbiAgICAgICAgICAgIC5hcHBlbmQoXCJwYXRoXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLWxpbmVcIilcclxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIGxpbmVJbmZvLmxpbmVXaWR0aFtkYXRhc2V0LmdldElkKCldKTtcclxuXHJcbiAgICAgICAgaWYgKGxpbmVJbmZvLmZpbGxHYXBbZGF0YXNldC5nZXRJZCgpXSkge1xyXG4gICAgICAgICAgICBsaW5lLmRhdHVtKFxyXG4gICAgICAgICAgICAgICAgQXJyYXkuZnJvbShkYXRhc2V0KS5maWx0ZXIoZnVuY3Rpb24gKHApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcC52YWx1ZSAhPT0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICkuYXR0cihcImRcIiwgbGluZUdlbiBhcyBhbnkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxpbmUuZGF0dW0oZGF0YXNldCkuYXR0cihcImRcIiwgbGluZUdlbiBhcyBhbnkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGxpbmVJbmZvLmxpbmVDb2xvcltkYXRhc2V0LmdldElkKCldKSB7XHJcbiAgICAgICAgICAgIGxpbmUuc3R5bGUoXCJzdHJva2VcIiwgbGluZUluZm8ubGluZUNvbG9yW2RhdGFzZXQuZ2V0SWQoKV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyUG9pbnRzKFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBsaW5lSW5mbzogTGluZUluZm8sXHJcbiAgICBkYXRhc2V0OiBEYXRhc2V0LFxyXG4gICAgeUF4aXNMb2NhdGlvbjogc3RyaW5nXHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2cobGluZUluZm8pO1xyXG4gICAgLy8gY29uc29sZS5sb2coZGF0YXNldCk7XHJcblxyXG4gICAgaWYgKCFyZW5kZXJJbmZvIHx8ICFsaW5lSW5mbykgcmV0dXJuO1xyXG5cclxuICAgIGxldCB5U2NhbGU6IGFueSA9IG51bGw7XHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICB5U2NhbGUgPSBjaGFydEVsZW1lbnRzLmxlZnRZU2NhbGU7XHJcbiAgICB9IGVsc2UgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwicmlnaHRcIikge1xyXG4gICAgICAgIHlTY2FsZSA9IGNoYXJ0RWxlbWVudHMucmlnaHRZU2NhbGU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGxpbmVJbmZvLnNob3dQb2ludFtkYXRhc2V0LmdldElkKCldKSB7XHJcbiAgICAgICAgbGV0IGRvdHMgPSBjaGFydEVsZW1lbnRzLmRhdGFBcmVhXHJcbiAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJkb3RcIilcclxuICAgICAgICAgICAgLmRhdGEoXHJcbiAgICAgICAgICAgICAgICBBcnJheS5mcm9tKGRhdGFzZXQpLmZpbHRlcihmdW5jdGlvbiAocDogRGF0YVBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAudmFsdWUgIT09IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJyXCIsIGxpbmVJbmZvLnBvaW50U2l6ZVtkYXRhc2V0LmdldElkKCldKVxyXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsIGZ1bmN0aW9uIChwOiBEYXRhUG9pbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjaGFydEVsZW1lbnRzLnhTY2FsZShwLmRhdGUpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uIChwOiBEYXRhUG9pbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB5U2NhbGUocC52YWx1ZSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hdHRyKFwiZGF0ZVwiLCBmdW5jdGlvbiAocDogRGF0YVBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZDMudGltZUZvcm1hdChcIiV5LSVtLSVkXCIpKHAuZGF0ZSBhcyBhbnkpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcInZhbHVlXCIsIGZ1bmN0aW9uIChwOiBEYXRhUG9pbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIocC52YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAudmFsdWUudG9GaXhlZCgwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAudmFsdWUudG9GaXhlZCgyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJ2YWx1ZVR5cGVcIiwgVmFsdWVUeXBlW2RhdGFzZXQudmFsdWVUeXBlXSlcclxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItZG90XCIpO1xyXG4gICAgICAgIGlmIChsaW5lSW5mby5wb2ludENvbG9yW2RhdGFzZXQuZ2V0SWQoKV0pIHtcclxuICAgICAgICAgICAgZG90cy5zdHlsZShcImZpbGxcIiwgbGluZUluZm8ucG9pbnRDb2xvcltkYXRhc2V0LmdldElkKCldKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIGxpbmVJbmZvLnBvaW50Qm9yZGVyQ29sb3JbZGF0YXNldC5nZXRJZCgpXSAmJlxyXG4gICAgICAgICAgICAgICAgbGluZUluZm8ucG9pbnRCb3JkZXJXaWR0aFtkYXRhc2V0LmdldElkKCldID4gMC4wXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgZG90cy5zdHlsZShcclxuICAgICAgICAgICAgICAgICAgICBcInN0cm9rZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVJbmZvLnBvaW50Qm9yZGVyQ29sb3JbZGF0YXNldC5nZXRJZCgpXVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGRvdHMuc3R5bGUoXHJcbiAgICAgICAgICAgICAgICAgICAgXCJzdHJva2Utd2lkdGhcIixcclxuICAgICAgICAgICAgICAgICAgICBsaW5lSW5mby5wb2ludEJvcmRlcldpZHRoW2RhdGFzZXQuZ2V0SWQoKV1cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChsaW5lSW5mby5hbGxvd0luc3BlY3REYXRhKSB7XHJcbiAgICAgICAgICAgIGxldCB0b29sdGlwID0gY2hhcnRFbGVtZW50cy5zdmcuYXBwZW5kKFwiZ1wiKS5zdHlsZShcIm9wYWNpdHlcIiwgMCk7XHJcbiAgICAgICAgICAgIGxldCB0b29sdGlwQmcgPSB0b29sdGlwXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwicmVjdFwiKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCByZW5kZXJJbmZvLnRvb2x0aXBTaXplLndpZHRoKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgcmVuZGVySW5mby50b29sdGlwU2l6ZS5oZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci10b29sdGlwXCIpO1xyXG4gICAgICAgICAgICBsZXQgdG9vbHRpcExhYmVsID0gdG9vbHRpcFxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgcmVuZGVySW5mby50b29sdGlwU2l6ZS53aWR0aClcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHJlbmRlckluZm8udG9vbHRpcFNpemUuaGVpZ2h0KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItdG9vbHRpcC1sYWJlbFwiKTtcclxuICAgICAgICAgICAgbGV0IHRvb2x0aXBMYWJlbERhdGUgPSB0b29sdGlwTGFiZWxcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJ0c3BhblwiKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDQpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgKHJlbmRlckluZm8udG9vbHRpcFNpemUuaGVpZ2h0IC8gNSkgKiAyKTtcclxuICAgICAgICAgICAgbGV0IHRvb2x0aXBMYWJlbFZhbHVlID0gdG9vbHRpcExhYmVsXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwidHNwYW5cIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCA0KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIChyZW5kZXJJbmZvLnRvb2x0aXBTaXplLmhlaWdodCAvIDUpICogNCk7XHJcblxyXG4gICAgICAgICAgICBkb3RzLm9uKFwibW91c2VlbnRlclwiLCBmdW5jdGlvbiAoZXZlbnQ6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgLy8gRGF0ZVxyXG4gICAgICAgICAgICAgICAgdG9vbHRpcExhYmVsRGF0ZS50ZXh0KFwiZGF0ZTpcIiArIGQzLnNlbGVjdCh0aGlzKS5hdHRyKFwiZGF0ZVwiKSk7XHJcbiAgICAgICAgICAgICAgICAvLyBWYWx1ZVxyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlVHlwZSA9IGQzLnNlbGVjdCh0aGlzKS5hdHRyKFwidmFsdWVUeXBlXCIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHN0clZhbHVlID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoXCJ2YWx1ZVwiKTtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZVR5cGUgPT09IFwiVGltZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRheVN0YXJ0ID0gd2luZG93Lm1vbWVudChcIjAwOjAwXCIsIFwiSEg6bW1cIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRpY2tUaW1lID0gZGF5U3RhcnQuYWRkKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KHN0clZhbHVlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWNvbmRzXCJcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkYXRlVmFsdWUgPSB0aWNrVGltZS5mb3JtYXQoXCJISDptbVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0b29sdGlwTGFiZWxWYWx1ZS50ZXh0KFwidmFsdWU6XCIgKyBkYXRlVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0b29sdGlwTGFiZWxWYWx1ZS50ZXh0KFwidmFsdWU6XCIgKyBzdHJWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgW3gsIHldID0gZDMucG9pbnRlcihldmVudCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoeCA8IHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoIC8gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXAuYXR0cihcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0cmFuc2Zvcm1cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0cmFuc2xhdGUoXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHggKyByZW5kZXJJbmZvLnRvb2x0aXBTaXplLndpZHRoICogMS4zKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIixcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoeSAtIHJlbmRlckluZm8udG9vbHRpcFNpemUuaGVpZ2h0ICogMS4wKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIilcIlxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXAuYXR0cihcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0cmFuc2Zvcm1cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0cmFuc2xhdGUoXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHggLSByZW5kZXJJbmZvLnRvb2x0aXBTaXplLndpZHRoICogMC4wKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIixcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoeSAtIHJlbmRlckluZm8udG9vbHRpcFNpemUuaGVpZ2h0ICogMS4wKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIilcIlxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdG9vbHRpcC50cmFuc2l0aW9uKCkuZHVyYXRpb24oMjAwKS5zdHlsZShcIm9wYWNpdHlcIiwgMSk7XHJcbiAgICAgICAgICAgIH0pLm9uKFwibW91c2VsZWF2ZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0b29sdGlwLnRyYW5zaXRpb24oKS5kdXJhdGlvbig1MDApLnN0eWxlKFwib3BhY2l0eVwiLCAwKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJCYXIoXHJcbiAgICBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzLFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGJhckluZm86IEJhckluZm8sXHJcbiAgICBkYXRhc2V0OiBEYXRhc2V0LFxyXG4gICAgeUF4aXNMb2NhdGlvbjogc3RyaW5nLFxyXG4gICAgY3VyckJhclNldDogbnVtYmVyLFxyXG4gICAgdG90YWxOdW1PZkJhclNldHM6IG51bWJlclxyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKGRhdGFzZXQpO1xyXG4gICAgLy8gY29uc29sZS5sb2coYmFySW5mbyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcIiVkLyVkXCIsIGN1cnJCYXJTZXQsIHRvdGFsTnVtT2ZCYXJTZXRzKTtcclxuXHJcbiAgICBpZiAoIXJlbmRlckluZm8gfHwgIWJhckluZm8pIHJldHVybjtcclxuXHJcbiAgICBsZXQgYmFyR2FwID0gMTtcclxuICAgIGxldCBiYXJTZXRXaWR0aCA9IHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoIC8gZGF0YXNldC5nZXRMZW5ndGgoKTtcclxuICAgIGxldCBiYXJXaWR0aCA9IGJhclNldFdpZHRoO1xyXG4gICAgaWYgKGJhclNldFdpZHRoIC0gYmFyR2FwID4gMCkge1xyXG4gICAgICAgIGJhcldpZHRoID0gYmFyU2V0V2lkdGggLSBiYXJHYXA7XHJcbiAgICB9XHJcbiAgICBiYXJXaWR0aCA9IGJhcldpZHRoIC8gdG90YWxOdW1PZkJhclNldHM7XHJcblxyXG4gICAgbGV0IHBvcnRpb25MZWZ0ID0gKGN1cnJCYXJTZXQgKyAxKSAvIHRvdGFsTnVtT2ZCYXJTZXRzO1xyXG5cclxuICAgIGxldCB5U2NhbGU6IGFueSA9IG51bGw7XHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICB5U2NhbGUgPSBjaGFydEVsZW1lbnRzLmxlZnRZU2NhbGU7XHJcbiAgICB9IGVsc2UgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwicmlnaHRcIikge1xyXG4gICAgICAgIHlTY2FsZSA9IGNoYXJ0RWxlbWVudHMucmlnaHRZU2NhbGU7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGJhcnMgPSBjaGFydEVsZW1lbnRzLmRhdGFBcmVhXHJcbiAgICAgICAgLnNlbGVjdEFsbChcImJhclwiKVxyXG4gICAgICAgIC5kYXRhKFxyXG4gICAgICAgICAgICBBcnJheS5mcm9tKGRhdGFzZXQpLmZpbHRlcihmdW5jdGlvbiAocDogRGF0YVBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcC52YWx1ZSAhPT0gbnVsbDtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApXHJcbiAgICAgICAgLmVudGVyKClcclxuICAgICAgICAuYXBwZW5kKFwicmVjdFwiKVxyXG4gICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbiAocDogRGF0YVBvaW50LCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGxldCBwb3J0aW9uVmlzaWJsZSA9IGN1cnJCYXJTZXQgKyAxIC0gdG90YWxOdW1PZkJhclNldHMgLyAyLjA7XHJcbiAgICAgICAgICAgICAgICBpZiAocG9ydGlvblZpc2libGUgPCAxLjApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFydEVsZW1lbnRzLnhTY2FsZShwLmRhdGUpIC1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFyU2V0V2lkdGggLyAyLjAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyQmFyU2V0ICogYmFyV2lkdGggK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3J0aW9uVmlzaWJsZSAqIGJhcldpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgY2hhcnRFbGVtZW50cy54U2NhbGUocC5kYXRlKSAtXHJcbiAgICAgICAgICAgICAgICBiYXJTZXRXaWR0aCAvIDIuMCArXHJcbiAgICAgICAgICAgICAgICBjdXJyQmFyU2V0ICogYmFyV2lkdGhcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbiAocDogRGF0YVBvaW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB5U2NhbGUoTWF0aC5tYXgocC52YWx1ZSwgMCkpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBmdW5jdGlvbiAocDogRGF0YVBvaW50LCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGxldCBwb3J0aW9uVmlzaWJsZSA9IGN1cnJCYXJTZXQgKyAxIC0gdG90YWxOdW1PZkJhclNldHMgLyAyLjA7XHJcbiAgICAgICAgICAgICAgICBpZiAocG9ydGlvblZpc2libGUgPCAwLjApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMC4wO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwb3J0aW9uVmlzaWJsZSA8IDEuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiYXJXaWR0aCAqIHBvcnRpb25WaXNpYmxlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJhcldpZHRoO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IGRhdGFzZXQuZ2V0TGVuZ3RoKCkgLSAxKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcG9ydGlvblZpc2libGUgPVxyXG4gICAgICAgICAgICAgICAgICAgIDEuMCAtIChjdXJyQmFyU2V0ICsgMSAtIHRvdGFsTnVtT2ZCYXJTZXRzIC8gMi4wKTtcclxuICAgICAgICAgICAgICAgIGlmIChwb3J0aW9uVmlzaWJsZSA8IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwLjA7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBvcnRpb25WaXNpYmxlIDwgMS4wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJhcldpZHRoICogcG9ydGlvblZpc2libGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYmFyV2lkdGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGJhcldpZHRoO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24gKHA6IERhdGFQb2ludCkge1xyXG4gICAgICAgICAgICBpZiAocC52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKHlTY2FsZShwLnZhbHVlKSAtIHlTY2FsZSgwKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLWJhclwiKTtcclxuXHJcbiAgICBpZiAoYmFySW5mby5iYXJDb2xvcltkYXRhc2V0LmdldElkKCldKSB7XHJcbiAgICAgICAgYmFycy5zdHlsZShcImZpbGxcIiwgYmFySW5mby5iYXJDb2xvcltkYXRhc2V0LmdldElkKCldKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyTGVnZW5kKFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBjaGFydEluZm86IENvbW1vbkNoYXJ0SW5mb1xyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKGNoYXJ0SW5mby5sZWdlbmRQb3NpdGlvbik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhjaGFydEluZm8ubGVnZW5kT3JpZW50YXRpb24pO1xyXG5cclxuICAgIC8vIEdldCBjaGFydCBlbGVtZW50c1xyXG4gICAgbGV0IHN2ZyA9IGNoYXJ0RWxlbWVudHMuc3ZnO1xyXG4gICAgbGV0IGdyYXBoQXJlYSA9IGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhO1xyXG4gICAgbGV0IGRhdGFBcmVhID0gY2hhcnRFbGVtZW50cy5kYXRhQXJlYTtcclxuICAgIGxldCB0aXRsZSA9IGNoYXJ0RWxlbWVudHMudGl0bGU7XHJcbiAgICBsZXQgeEF4aXMgPSBjaGFydEVsZW1lbnRzLnhBeGlzO1xyXG4gICAgbGV0IGxlZnRZQXhpcyA9IGNoYXJ0RWxlbWVudHMubGVmdFlBeGlzO1xyXG4gICAgbGV0IHJpZ2h0WUF4aXMgPSBjaGFydEVsZW1lbnRzLnJpZ2h0WUF4aXM7XHJcblxyXG4gICAgLy8gR2V0IGVsZW1lbnQgd2lkdGggYW5kIGhlaWdodFxyXG4gICAgbGV0IHRpdGxlSGVpZ2h0ID0gMC4wO1xyXG4gICAgaWYgKHRpdGxlKSB7XHJcbiAgICAgICAgdGl0bGVIZWlnaHQgPSBwYXJzZUZsb2F0KHRpdGxlLmF0dHIoXCJoZWlnaHRcIikpO1xyXG4gICAgfVxyXG4gICAgbGV0IHhBeGlzSGVpZ2h0ID0gcGFyc2VGbG9hdCh4QXhpcy5hdHRyKFwiaGVpZ2h0XCIpKTtcclxuICAgIGxldCBsZWZ0WUF4aXNXaWR0aCA9IDAuMDtcclxuICAgIGlmIChsZWZ0WUF4aXMpIHtcclxuICAgICAgICBsZWZ0WUF4aXNXaWR0aCA9IHBhcnNlRmxvYXQobGVmdFlBeGlzLmF0dHIoXCJ3aWR0aFwiKSk7XHJcbiAgICB9XHJcbiAgICBsZXQgcmlnaHRZQXhpc1dpZHRoID0gMC4wO1xyXG4gICAgaWYgKHJpZ2h0WUF4aXMpIHtcclxuICAgICAgICByaWdodFlBeGlzV2lkdGggPSBwYXJzZUZsb2F0KHJpZ2h0WUF4aXMuYXR0cihcIndpZHRoXCIpKTtcclxuICAgIH1cclxuICAgIC8vIEdldCBkYXRhc2V0c1xyXG4gICAgbGV0IGRhdGFzZXRzID0gcmVuZGVySW5mby5kYXRhc2V0cztcclxuICAgIGxldCB4RGF0YXNldElkcyA9IGRhdGFzZXRzLmdldFhEYXRhc2V0SWRzKCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyh4RGF0YXNldElkcyk7XHJcblxyXG4gICAgLy8gR2V0IG5hbWVzIGFuZCB0aGVpciBkaW1lbnNpb25cclxuICAgIGxldCBuYW1lcyA9IGRhdGFzZXRzLmdldE5hbWVzKCk7IC8vIHhEYXRhc2V0IG5hbWUgaW5jbHVkZWRcclxuICAgIGxldCBuYW1lU2l6ZXMgPSBuYW1lcy5tYXAoZnVuY3Rpb24gKG4pIHtcclxuICAgICAgICByZXR1cm4gaGVscGVyLm1lYXN1cmVUZXh0U2l6ZShuLCBcInRyYWNrZXItbGVnZW5kLWxhYmVsXCIpO1xyXG4gICAgfSk7XHJcbiAgICBsZXQgaW5kTWF4TmFtZSA9IDA7XHJcbiAgICBsZXQgbWF4TmFtZVdpZHRoID0gMC4wO1xyXG4gICAgZm9yIChsZXQgaW5kID0gMDsgaW5kIDwgbmFtZXMubGVuZ3RoOyBpbmQrKykge1xyXG4gICAgICAgIGlmICh4RGF0YXNldElkcy5pbmNsdWRlcyhpbmQpKSBjb250aW51ZTtcclxuICAgICAgICBpZiAobmFtZVNpemVzW2luZF0ud2lkdGggPiBtYXhOYW1lV2lkdGgpIHtcclxuICAgICAgICAgICAgbWF4TmFtZVdpZHRoID0gbmFtZVNpemVzW2luZF0ud2lkdGg7XHJcbiAgICAgICAgICAgIGluZE1heE5hbWUgPSBpbmQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbGV0IG1heE5hbWUgPSBuYW1lc1tpbmRNYXhOYW1lXTtcclxuICAgIGxldCBjaGFyYWN0ZXJXaWR0aCA9IG1heE5hbWVXaWR0aCAvIG1heE5hbWUubGVuZ3RoO1xyXG4gICAgbGV0IG5hbWVIZWlnaHQgPSBuYW1lU2l6ZXNbaW5kTWF4TmFtZV0uaGVpZ2h0O1xyXG4gICAgbGV0IG51bU5hbWVzID0gbmFtZXMubGVuZ3RoIC0geERhdGFzZXRJZHMubGVuZ3RoO1xyXG5cclxuICAgIGxldCB4U3BhY2luZyA9IDIgKiBjaGFyYWN0ZXJXaWR0aDtcclxuICAgIGxldCB5U3BhY2luZyA9IG5hbWVIZWlnaHQ7XHJcbiAgICBsZXQgbWFya2VyV2lkdGggPSAyICogY2hhcmFjdGVyV2lkdGg7XHJcblxyXG4gICAgLy8gR2V0IGxlZ2VuZCB3aWR0aCBhbmQgaGVpZ2h0XHJcbiAgICBsZXQgbGVnZW5kV2lkdGggPSAwO1xyXG4gICAgbGV0IGxlZ2VuZEhlaWdodCA9IDA7XHJcbiAgICBpZiAoY2hhcnRJbmZvLmxlZ2VuZE9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIpIHtcclxuICAgICAgICBsZWdlbmRXaWR0aCA9IHhTcGFjaW5nICogMyArIG1hcmtlcldpZHRoICsgbWF4TmFtZVdpZHRoO1xyXG4gICAgICAgIGxlZ2VuZEhlaWdodCA9IChudW1OYW1lcyArIDEpICogeVNwYWNpbmc7XHJcbiAgICB9IGVsc2UgaWYgKGNoYXJ0SW5mby5sZWdlbmRPcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIpIHtcclxuICAgICAgICBsZWdlbmRXaWR0aCA9XHJcbiAgICAgICAgICAgICgyICogeFNwYWNpbmcgKyBtYXJrZXJXaWR0aCkgKiBudW1OYW1lcyArXHJcbiAgICAgICAgICAgIHhTcGFjaW5nICtcclxuICAgICAgICAgICAgZDMuc3VtKG5hbWVTaXplcywgZnVuY3Rpb24gKHMsIGkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh4RGF0YXNldElkcy5pbmNsdWRlcyhpKSkgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcy53aWR0aDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgbGVnZW5kSGVpZ2h0ID0geVNwYWNpbmcgKyBuYW1lSGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coXHJcbiAgICAvLyAgICAgYG1heE5hbWU6ICR7bWF4TmFtZX0sIGNoYXJhY3RlcldpZHRoOiAke2NoYXJhY3RlcldpZHRofSwgbWF4TmFtZVdpZHRoOiAke21heE5hbWVXaWR0aH1gXHJcbiAgICAvLyApO1xyXG4gICAgLy8gY29uc29sZS5sb2coYHhTcGFjaW5nOiR7eFNwYWNpbmd9LCBudW1OYW1lczogJHtudW1OYW1lc30sIG1hcmtlcldpZHRoOiAke21hcmtlcldpZHRofWApO1xyXG4gICAgLy8gY29uc29sZS5sb2coYGxlZ2VuZFdpZHRoOiAke2xlZ2VuZFdpZHRofSwgbGVnZW5kSGVpZ2h0OiAke2xlZ2VuZEhlaWdodH1gKTtcclxuXHJcbiAgICAvLyBDYWxjdWFsdGUgbGVuZ2VuZFggYW5kIGxlZ2VuZFlcclxuICAgIGxldCBsZWdlbmRYID0gMC4wOyAvLyByZWxhdGl2ZSB0byBncmFwaEFyZWFcclxuICAgIGxldCBsZWdlbmRZID0gMC4wO1xyXG4gICAgaWYgKGNoYXJ0SW5mby5sZWdlbmRQb3NpdGlvbiA9PT0gXCJ0b3BcIikge1xyXG4gICAgICAgIC8vIGJlbG93IHRpdGxlXHJcbiAgICAgICAgbGVnZW5kWCA9XHJcbiAgICAgICAgICAgIGxlZnRZQXhpc1dpZHRoICtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggLyAyLjAgLVxyXG4gICAgICAgICAgICBsZWdlbmRXaWR0aCAvIDIuMDtcclxuICAgICAgICBsZWdlbmRZID0gdGl0bGVIZWlnaHQ7XHJcbiAgICAgICAgLy8gRXhwYW5kIHN2Z1xyXG4gICAgICAgIGhlbHBlci5leHBhbmRBcmVhKHN2ZywgMCwgbGVnZW5kSGVpZ2h0ICsgeVNwYWNpbmcpO1xyXG4gICAgICAgIC8vIE1vdmUgZGF0YUFyZWEgZG93blxyXG4gICAgICAgIGhlbHBlci5tb3ZlQXJlYShkYXRhQXJlYSwgMCwgbGVnZW5kSGVpZ2h0ICsgeVNwYWNpbmcpO1xyXG4gICAgfSBlbHNlIGlmIChjaGFydEluZm8ubGVnZW5kUG9zaXRpb24gPT09IFwiYm90dG9tXCIpIHtcclxuICAgICAgICAvLyBiZWxsb3cgeC1heGlzIGxhYmVsXHJcbiAgICAgICAgbGVnZW5kWCA9XHJcbiAgICAgICAgICAgIGxlZnRZQXhpc1dpZHRoICtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggLyAyLjAgLVxyXG4gICAgICAgICAgICBsZWdlbmRXaWR0aCAvIDIuMDtcclxuICAgICAgICBsZWdlbmRZID1cclxuICAgICAgICAgICAgdGl0bGVIZWlnaHQgK1xyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQgK1xyXG4gICAgICAgICAgICB4QXhpc0hlaWdodCArXHJcbiAgICAgICAgICAgIHlTcGFjaW5nO1xyXG4gICAgICAgIC8vIEV4cGFuZCBzdmdcclxuICAgICAgICBoZWxwZXIuZXhwYW5kQXJlYShzdmcsIDAsIGxlZ2VuZEhlaWdodCArIHlTcGFjaW5nKTtcclxuICAgIH0gZWxzZSBpZiAoY2hhcnRJbmZvLmxlZ2VuZFBvc2l0aW9uID09PSBcImxlZnRcIikge1xyXG4gICAgICAgIGxlZ2VuZFggPSAwO1xyXG4gICAgICAgIGxlZ2VuZFkgPVxyXG4gICAgICAgICAgICB0aXRsZUhlaWdodCArXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCAvIDIuMCAtXHJcbiAgICAgICAgICAgIGxlZ2VuZEhlaWdodCAvIDIuMDtcclxuICAgICAgICAvLyBFeHBhbmQgc3ZnXHJcbiAgICAgICAgaGVscGVyLmV4cGFuZEFyZWEoc3ZnLCBsZWdlbmRXaWR0aCArIHhTcGFjaW5nLCAwKTtcclxuICAgICAgICAvLyBNb3ZlIGRhdGFBcmVhIHJpZ2h0XHJcbiAgICAgICAgaGVscGVyLm1vdmVBcmVhKGRhdGFBcmVhLCBsZWdlbmRXaWR0aCArIHhTcGFjaW5nLCAwKTtcclxuICAgIH0gZWxzZSBpZiAoY2hhcnRJbmZvLmxlZ2VuZFBvc2l0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICBsZWdlbmRYID1cclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggK1xyXG4gICAgICAgICAgICBsZWZ0WUF4aXNXaWR0aCArXHJcbiAgICAgICAgICAgIHJpZ2h0WUF4aXNXaWR0aCArXHJcbiAgICAgICAgICAgIHhTcGFjaW5nO1xyXG4gICAgICAgIGxlZ2VuZFkgPVxyXG4gICAgICAgICAgICB0aXRsZUhlaWdodCArXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCAvIDIuMCAtXHJcbiAgICAgICAgICAgIGxlZ2VuZEhlaWdodCAvIDIuMDtcclxuICAgICAgICAvLyBFeHBhbmQgc3ZnXHJcbiAgICAgICAgaGVscGVyLmV4cGFuZEFyZWEoc3ZnLCBsZWdlbmRXaWR0aCArIHhTcGFjaW5nLCAwKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coYGxlZ2VuZFg6ICR7bGVnZW5kWH0sIGxlZ2VuZFk6ICR7bGVnZW5kWX1gKTtcclxuXHJcbiAgICBsZXQgbGVnZW5kID0gY2hhcnRFbGVtZW50cy5ncmFwaEFyZWFcclxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJsZWdlbmRcIilcclxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIGxlZ2VuZFggKyBcIixcIiArIGxlZ2VuZFkgKyBcIilcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnbGVnZW5kWDogJWQsIGxlZ2VuZFk6ICVkJywgbGVnZW5kWCwgbGVnZW5kWSk7XHJcblxyXG4gICAgbGV0IGxlZ2VuZEJnID0gbGVnZW5kXHJcbiAgICAgICAgLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1sZWdlbmRcIilcclxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIGxlZ2VuZFdpZHRoKVxyXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGxlZ2VuZEhlaWdodCk7XHJcbiAgICBpZiAoY2hhcnRJbmZvLmxlZ2VuZEJnQ29sb3IpIHtcclxuICAgICAgICBsZWdlbmRCZy5zdHlsZShcImZpbGxcIiwgY2hhcnRJbmZvLmxlZ2VuZEJnQ29sb3IpO1xyXG4gICAgfVxyXG4gICAgaWYgKGNoYXJ0SW5mby5sZWdlbmRCb3JkZXJDb2xvcikge1xyXG4gICAgICAgIGxlZ2VuZEJnLnN0eWxlKFwic3Ryb2tlXCIsIGNoYXJ0SW5mby5sZWdlbmRCb3JkZXJDb2xvcik7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGZpcnN0TWFya2VyWCA9IHhTcGFjaW5nO1xyXG4gICAgbGV0IGZpcnN0TWFya2VyWSA9IG5hbWVIZWlnaHQ7XHJcbiAgICBsZXQgZmlyc3RMYWJlbFggPSBmaXJzdE1hcmtlclggKyB4U3BhY2luZyArIG1hcmtlcldpZHRoOyAvLyB4U3BhY2luZyArIDIgKiB4U3BhaW5nXHJcbiAgICBsZXQgZmlyc3RMYWJlbFkgPSBmaXJzdE1hcmtlclk7XHJcblxyXG4gICAgaWYgKGNoYXJ0SW5mby5sZWdlbmRPcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XHJcbiAgICAgICAgaWYgKGNoYXJ0SW5mby5HZXRHcmFwaFR5cGUoKSA9PT0gR3JhcGhUeXBlLkxpbmUpIHtcclxuICAgICAgICAgICAgLy8gbGluZXNcclxuICAgICAgICAgICAgbGVnZW5kXHJcbiAgICAgICAgICAgICAgICAuc2VsZWN0QWxsKFwibWFya2Vyc1wiKVxyXG4gICAgICAgICAgICAgICAgLmRhdGEobmFtZXMpXHJcbiAgICAgICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcImxpbmVcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgZmlyc3RNYXJrZXJYKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCBmaXJzdE1hcmtlclggKyBtYXJrZXJXaWR0aClcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG51bUVsZW1zRXhjbHVkZWQgPSB4RGF0YXNldElkcy5maWx0ZXIoKGlkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpZCA8IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSBpIC0gbnVtRWxlbXNFeGNsdWRlZDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlyc3RNYXJrZXJZICsgaSAqIHlTcGFjaW5nO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG51bUVsZW1zRXhjbHVkZWQgPSB4RGF0YXNldElkcy5maWx0ZXIoKGlkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpZCA8IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSBpIC0gbnVtRWxlbXNFeGNsdWRlZDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlyc3RNYXJrZXJZICsgaSAqIHlTcGFjaW5nO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeERhdGFzZXRJZHMuaW5jbHVkZXMoaSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGNoYXJ0SW5mbyBhcyBMaW5lSW5mbykubGluZUNvbG9yW2ldO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBwb2ludHNcclxuICAgICAgICAgICAgbGVnZW5kXHJcbiAgICAgICAgICAgICAgICAuc2VsZWN0QWxsKFwibWFya2Vyc1wiKVxyXG4gICAgICAgICAgICAgICAgLmRhdGEobmFtZXMpXHJcbiAgICAgICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcImNpcmNsZVwiKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCBmaXJzdE1hcmtlclggKyBtYXJrZXJXaWR0aCAvIDIuMClcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG51bUVsZW1zRXhjbHVkZWQgPSB4RGF0YXNldElkcy5maWx0ZXIoKGlkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpZCA8IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSBpIC0gbnVtRWxlbXNFeGNsdWRlZDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlyc3RNYXJrZXJZICsgaSAqIHlTcGFjaW5nO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiclwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeERhdGFzZXRJZHMuaW5jbHVkZXMoaSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKGNoYXJ0SW5mbyBhcyBMaW5lSW5mbykuc2hvd1BvaW50W2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoY2hhcnRJbmZvIGFzIExpbmVJbmZvKS5wb2ludFNpemVbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwLjA7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeERhdGFzZXRJZHMuaW5jbHVkZXMoaSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGNoYXJ0SW5mbyBhcyBMaW5lSW5mbykucG9pbnRDb2xvcltpXTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY2hhcnRJbmZvLkdldEdyYXBoVHlwZSgpID09PSBHcmFwaFR5cGUuQmFyKSB7XHJcbiAgICAgICAgICAgIC8vIGJhcnNcclxuICAgICAgICAgICAgbGVnZW5kXHJcbiAgICAgICAgICAgICAgICAuc2VsZWN0QWxsKFwibWFya2Vyc1wiKVxyXG4gICAgICAgICAgICAgICAgLmRhdGEobmFtZXMpXHJcbiAgICAgICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCBmaXJzdE1hcmtlclgpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG51bUVsZW1zRXhjbHVkZWQgPSB4RGF0YXNldElkcy5maWx0ZXIoKGlkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpZCA8IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSBpIC0gbnVtRWxlbXNFeGNsdWRlZDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlyc3RNYXJrZXJZICsgaSAqIHlTcGFjaW5nIC0gbmFtZUhlaWdodCAvIDIuMDtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIG1hcmtlcldpZHRoKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgbmFtZUhlaWdodClcclxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhEYXRhc2V0SWRzLmluY2x1ZGVzKGkpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjaGFydEluZm8gYXMgQmFySW5mbykuYmFyQ29sb3JbaV07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIG5hbWVzXHJcbiAgICAgICAgbGV0IG5hbWVMYWJlbHMgPSBsZWdlbmRcclxuICAgICAgICAgICAgLnNlbGVjdEFsbChcImxhYmVsc1wiKVxyXG4gICAgICAgICAgICAuZGF0YShuYW1lcylcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGZpcnN0TGFiZWxYKVxyXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbnVtRWxlbXNFeGNsdWRlZCA9IHhEYXRhc2V0SWRzLmZpbHRlcigoaWQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWQgPCBpO1xyXG4gICAgICAgICAgICAgICAgfSkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgaSA9IGkgLSBudW1FbGVtc0V4Y2x1ZGVkO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0TGFiZWxZICsgaSAqIHlTcGFjaW5nO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGV4dChmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh4RGF0YXNldElkcy5pbmNsdWRlcyhpKSkgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmFtZTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0eWxlKFwiYWxpZ25tZW50LWJhc2VsaW5lXCIsIFwibWlkZGxlXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLWxlZ2VuZC1sYWJlbFwiKTtcclxuXHJcbiAgICAgICAgaWYgKGNoYXJ0SW5mby5HZXRHcmFwaFR5cGUoKSA9PT0gR3JhcGhUeXBlLkxpbmUpIHtcclxuICAgICAgICAgICAgbmFtZUxhYmVscy5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeERhdGFzZXRJZHMuaW5jbHVkZXMoaSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoY2hhcnRJbmZvIGFzIExpbmVJbmZvKS5saW5lQ29sb3JbaV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY2hhcnRJbmZvLkdldEdyYXBoVHlwZSgpID09PSBHcmFwaFR5cGUuQmFyKSB7XHJcbiAgICAgICAgICAgIG5hbWVMYWJlbHMuc3R5bGUoXCJmaWxsXCIsIGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHhEYXRhc2V0SWRzLmluY2x1ZGVzKGkpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGNoYXJ0SW5mbyBhcyBCYXJJbmZvKS5iYXJDb2xvcltpXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChjaGFydEluZm8ubGVnZW5kT3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiKSB7XHJcbiAgICAgICAgbGV0IGN1cnJSZW5kZXJQb3NYID0gMC4wO1xyXG4gICAgICAgIGxldCBjdXJyUmVuZGVyUG9zWDIgPSAwLjA7XHJcbiAgICAgICAgaWYgKGNoYXJ0SW5mby5HZXRHcmFwaFR5cGUoKSA9PT0gR3JhcGhUeXBlLkxpbmUpIHtcclxuICAgICAgICAgICAgLy8gbGluZXNcclxuICAgICAgICAgICAgbGVnZW5kXHJcbiAgICAgICAgICAgICAgICAuc2VsZWN0QWxsKFwibWFya2Vyc1wiKVxyXG4gICAgICAgICAgICAgICAgLmRhdGEobmFtZXMpXHJcbiAgICAgICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcImxpbmVcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG51bUVsZW1zRXhjbHVkZWQgPSB4RGF0YXNldElkcy5maWx0ZXIoKGlkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpZCA8IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSBpIC0gbnVtRWxlbXNFeGNsdWRlZDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyUmVuZGVyUG9zWCA9IGZpcnN0TWFya2VyWDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyUmVuZGVyUG9zWCArPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVNpemVzW2ldLndpZHRoICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhTcGFjaW5nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcldpZHRoICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhTcGFjaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VyclJlbmRlclBvc1g7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbnVtRWxlbXNFeGNsdWRlZCA9IHhEYXRhc2V0SWRzLmZpbHRlcigoaWQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkIDwgaTtcclxuICAgICAgICAgICAgICAgICAgICB9KS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IGkgLSBudW1FbGVtc0V4Y2x1ZGVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJSZW5kZXJQb3NYMiA9IGZpcnN0TWFya2VyWCArIG1hcmtlcldpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJSZW5kZXJQb3NYMiArPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVNpemVzW2ldLndpZHRoICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhTcGFjaW5nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcldpZHRoICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhTcGFjaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VyclJlbmRlclBvc1gyO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgZmlyc3RNYXJrZXJZKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCBmaXJzdE1hcmtlclkpXHJcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJzdHJva2VcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhEYXRhc2V0SWRzLmluY2x1ZGVzKGkpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjaGFydEluZm8gYXMgTGluZUluZm8pLmxpbmVDb2xvcltpXTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gcG9pbnRzXHJcbiAgICAgICAgICAgIGN1cnJSZW5kZXJQb3NYID0gMC4wO1xyXG4gICAgICAgICAgICBsZWdlbmRcclxuICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJtYXJrZXJzXCIpXHJcbiAgICAgICAgICAgICAgICAuZGF0YShuYW1lcylcclxuICAgICAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwiY2lyY2xlXCIpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImN4XCIsIGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBudW1FbGVtc0V4Y2x1ZGVkID0geERhdGFzZXRJZHMuZmlsdGVyKChpZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWQgPCBpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBpID0gaSAtIG51bUVsZW1zRXhjbHVkZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyclJlbmRlclBvc1ggPSBmaXJzdE1hcmtlclggKyBtYXJrZXJXaWR0aCAvIDIuMDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyUmVuZGVyUG9zWCArPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVNpemVzW2ldLndpZHRoICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhTcGFjaW5nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcldpZHRoICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhTcGFjaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VyclJlbmRlclBvc1g7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCBmaXJzdE1hcmtlclkpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInJcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhEYXRhc2V0SWRzLmluY2x1ZGVzKGkpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChjaGFydEluZm8gYXMgTGluZUluZm8pLnNob3dQb2ludFtpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGNoYXJ0SW5mbyBhcyBMaW5lSW5mbykucG9pbnRTaXplW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMC4wO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhEYXRhc2V0SWRzLmluY2x1ZGVzKGkpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjaGFydEluZm8gYXMgTGluZUluZm8pLnBvaW50Q29sb3JbaV07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKGNoYXJ0SW5mby5HZXRHcmFwaFR5cGUoKSA9PT0gR3JhcGhUeXBlLkJhcikge1xyXG4gICAgICAgICAgICAvLyBiYXJzXHJcbiAgICAgICAgICAgIGN1cnJSZW5kZXJQb3NYID0gMC4wO1xyXG4gICAgICAgICAgICBsZWdlbmRcclxuICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJtYXJrZXJzXCIpXHJcbiAgICAgICAgICAgICAgICAuZGF0YShcclxuICAgICAgICAgICAgICAgICAgICBuYW1lcy5maWx0ZXIoKG4sIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICF4RGF0YXNldElkcy5pbmNsdWRlcyhpKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG51bUVsZW1zRXhjbHVkZWQgPSB4RGF0YXNldElkcy5maWx0ZXIoKGlkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpZCA8IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSBpIC0gbnVtRWxlbXNFeGNsdWRlZDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyUmVuZGVyUG9zWCA9IGZpcnN0TWFya2VyWDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyUmVuZGVyUG9zWCArPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVNpemVzW2ldLndpZHRoICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhTcGFjaW5nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcldpZHRoICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhTcGFjaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VyclJlbmRlclBvc1g7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGZpcnN0TWFya2VyWSAtIG5hbWVIZWlnaHQgLyAyLjApXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIG1hcmtlcldpZHRoKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgbmFtZUhlaWdodClcclxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhEYXRhc2V0SWRzLmluY2x1ZGVzKGkpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjaGFydEluZm8gYXMgQmFySW5mbykuYmFyQ29sb3JbaV07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIG5hbWVzXHJcbiAgICAgICAgY3VyclJlbmRlclBvc1ggPSAwLjA7XHJcbiAgICAgICAgbGV0IG5hbWVMYWJlbHMgPSBsZWdlbmRcclxuICAgICAgICAgICAgLnNlbGVjdEFsbChcImxhYmVsc1wiKVxyXG4gICAgICAgICAgICAuZGF0YShuYW1lcylcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgbGV0IG51bUVsZW1zRXhjbHVkZWQgPSB4RGF0YXNldElkcy5maWx0ZXIoKGlkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkIDwgaTtcclxuICAgICAgICAgICAgICAgIH0pLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGkgPSBpIC0gbnVtRWxlbXNFeGNsdWRlZDtcclxuICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VyclJlbmRlclBvc1ggPSBmaXJzdExhYmVsWDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VyclJlbmRlclBvc1ggKz1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVNpemVzW2ldLndpZHRoICsgeFNwYWNpbmcgKyBtYXJrZXJXaWR0aCArIHhTcGFjaW5nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJSZW5kZXJQb3NYO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgZmlyc3RMYWJlbFkpXHJcbiAgICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHhEYXRhc2V0SWRzLmluY2x1ZGVzKGkpKSByZXR1cm4gXCJcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuYW1lO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJhbGlnbm1lbnQtYmFzZWxpbmVcIiwgXCJtaWRkbGVcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItbGVnZW5kLWxhYmVsXCIpO1xyXG5cclxuICAgICAgICBpZiAoY2hhcnRJbmZvLkdldEdyYXBoVHlwZSgpID09PSBHcmFwaFR5cGUuTGluZSkge1xyXG4gICAgICAgICAgICBuYW1lTGFiZWxzLnN0eWxlKFwiZmlsbFwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh4RGF0YXNldElkcy5pbmNsdWRlcyhpKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChjaGFydEluZm8gYXMgTGluZUluZm8pLmxpbmVDb2xvcltpXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChjaGFydEluZm8uR2V0R3JhcGhUeXBlKCkgPT09IEdyYXBoVHlwZS5CYXIpIHtcclxuICAgICAgICAgICAgbmFtZUxhYmVscy5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeERhdGFzZXRJZHMuaW5jbHVkZXMoaSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoY2hhcnRJbmZvIGFzIEJhckluZm8pLmJhckNvbG9yW2ldO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlclRpdGxlKFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBjaGFydEluZm86IENvbW1vbkNoYXJ0SW5mb1xyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVyVGl0bGVcIilcclxuICAgIC8vIHVuZGVyIGdyYXBoQXJlYVxyXG5cclxuICAgIGlmICghcmVuZGVySW5mbyB8fCAhY2hhcnRJbmZvKSByZXR1cm47XHJcblxyXG4gICAgaWYgKCFjaGFydEluZm8udGl0bGUpIHJldHVybjtcclxuICAgIGxldCB0aXRsZVNpemUgPSBoZWxwZXIubWVhc3VyZVRleHRTaXplKGNoYXJ0SW5mby50aXRsZSwgXCJ0cmFja2VyLXRpdGxlXCIpO1xyXG5cclxuICAgIC8vIEFwcGVuZCB0aXRsZVxyXG4gICAgbGV0IHRpdGxlID0gY2hhcnRFbGVtZW50cy5ncmFwaEFyZWFcclxuICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgIC50ZXh0KGNoYXJ0SW5mby50aXRsZSkgLy8gcGl2b3QgYXQgY2VudGVyXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcInRpdGxlXCIpXHJcbiAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgIFwidHJhbnNmb3JtXCIsXHJcbiAgICAgICAgICAgIFwidHJhbnNsYXRlKFwiICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoIC8gMi4wICtcclxuICAgICAgICAgICAgICAgIFwiLFwiICtcclxuICAgICAgICAgICAgICAgIHRpdGxlU2l6ZS5oZWlnaHQgLyAyLjAgK1xyXG4gICAgICAgICAgICAgICAgXCIpXCJcclxuICAgICAgICApXHJcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgdGl0bGVTaXplLmhlaWdodCkgLy8gZm9yIGxhdGVyIHVzZVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLXRpdGxlXCIpO1xyXG4gICAgY2hhcnRFbGVtZW50c1tcInRpdGxlXCJdID0gdGl0bGU7XHJcblxyXG4gICAgLy8gRXhwYW5kIHBhcmVudCBhcmVhc1xyXG4gICAgaGVscGVyLmV4cGFuZEFyZWEoY2hhcnRFbGVtZW50cy5zdmcsIDAsIHRpdGxlU2l6ZS5oZWlnaHQpO1xyXG4gICAgaGVscGVyLmV4cGFuZEFyZWEoY2hhcnRFbGVtZW50cy5ncmFwaEFyZWEsIDAsIHRpdGxlU2l6ZS5oZWlnaHQpO1xyXG5cclxuICAgIC8vIE1vdmUgc2libGluZyBhcmVhc1xyXG4gICAgaGVscGVyLm1vdmVBcmVhKGNoYXJ0RWxlbWVudHMuZGF0YUFyZWEsIDAsIHRpdGxlU2l6ZS5oZWlnaHQpO1xyXG5cclxuICAgIHJldHVybjtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0Q2hhcnRTY2FsZShcclxuICAgIF9jYW52YXM6IEhUTUxFbGVtZW50LFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm9cclxuKSB7XHJcbiAgICBsZXQgY2FudmFzID0gZDMuc2VsZWN0KF9jYW52YXMpO1xyXG4gICAgbGV0IHN2ZyA9IGNoYXJ0RWxlbWVudHMuc3ZnO1xyXG4gICAgbGV0IHN2Z1dpZHRoID0gcGFyc2VGbG9hdChzdmcuYXR0cihcIndpZHRoXCIpKTtcclxuICAgIGxldCBzdmdIZWlnaHQgPSBwYXJzZUZsb2F0KHN2Zy5hdHRyKFwiaGVpZ2h0XCIpKTtcclxuICAgIHN2Zy5hdHRyKFwid2lkdGhcIiwgbnVsbClcclxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBudWxsKVxyXG4gICAgICAgIC5hdHRyKFwidmlld0JveFwiLCBgMCAwICR7c3ZnV2lkdGh9ICR7c3ZnSGVpZ2h0fWApXHJcbiAgICAgICAgLmF0dHIoXCJwcmVzZXJ2ZUFzcGVjdFJhdGlvXCIsIFwieE1pZFlNaWQgbWVldFwiKTtcclxuXHJcbiAgICBpZiAocmVuZGVySW5mby5maXRQYW5lbFdpZHRoKSB7XHJcbiAgICAgICAgY2FudmFzLnN0eWxlKFwid2lkdGhcIiwgXCIxMDAlXCIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjYW52YXMuc3R5bGUoXHJcbiAgICAgICAgICAgIFwid2lkdGhcIixcclxuICAgICAgICAgICAgKHN2Z1dpZHRoICogcmVuZGVySW5mby5maXhlZFNjYWxlKS50b1N0cmluZygpICsgXCJweFwiXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjYW52YXMuc3R5bGUoXHJcbiAgICAgICAgICAgIFwiaGVpZ2h0XCIsXHJcbiAgICAgICAgICAgIChzdmdIZWlnaHQgKiByZW5kZXJJbmZvLmZpeGVkU2NhbGUpLnRvU3RyaW5nKCkgKyBcInB4XCJcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVBcmVhcyhcclxuICAgIGNhbnZhczogSFRNTEVsZW1lbnQsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvXHJcbik6IENoYXJ0RWxlbWVudHMge1xyXG4gICAgbGV0IGNoYXJ0RWxlbWVudHM6IENoYXJ0RWxlbWVudHMgPSB7fTtcclxuICAgIC8vIHdob2xlIGFyZWEgZm9yIHBsb3R0aW5nLCBpbmNsdWRlcyBtYXJnaW5zXHJcbiAgICBsZXQgc3ZnID0gZDNcclxuICAgICAgICAuc2VsZWN0KGNhbnZhcylcclxuICAgICAgICAuYXBwZW5kKFwic3ZnXCIpXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcInN2Z1wiKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcIndpZHRoXCIsXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLmxlZnQgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4ucmlnaHRcclxuICAgICAgICApXHJcbiAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgIFwiaGVpZ2h0XCIsXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLm1hcmdpbi50b3AgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4uYm90dG9tXHJcbiAgICAgICAgKTtcclxuICAgIGNoYXJ0RWxlbWVudHNbXCJzdmdcIl0gPSBzdmc7XHJcblxyXG4gICAgLy8gZ3JhcGhBcmVhLCBpbmNsdWRlcyBjaGFydEFyZWEsIHRpdGxlLCBsZWdlbmRcclxuICAgIGxldCBncmFwaEFyZWEgPSBzdmdcclxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJncmFwaEFyZWFcIilcclxuICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgXCJ0cmFuc2Zvcm1cIixcclxuICAgICAgICAgICAgXCJ0cmFuc2xhdGUoXCIgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4ubGVmdCArXHJcbiAgICAgICAgICAgICAgICBcIixcIiArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLm1hcmdpbi50b3AgK1xyXG4gICAgICAgICAgICAgICAgXCIpXCJcclxuICAgICAgICApXHJcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCArIHJlbmRlckluZm8ubWFyZ2luLnJpZ2h0KVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcImhlaWdodFwiLFxyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQgKyByZW5kZXJJbmZvLm1hcmdpbi5ib3R0b21cclxuICAgICAgICApO1xyXG4gICAgY2hhcnRFbGVtZW50c1tcImdyYXBoQXJlYVwiXSA9IGdyYXBoQXJlYTtcclxuXHJcbiAgICAvLyBkYXRhQXJlYSwgdW5kZXIgZ3JhcGhBcmVhLCBpbmNsdWRlcyBwb2ludHMsIGxpbmVzLCB4QXhpcywgeUF4aXNcclxuICAgIGxldCBkYXRhQXJlYSA9IGdyYXBoQXJlYVxyXG4gICAgICAgIC5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcImRhdGFBcmVhXCIpXHJcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aClcclxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQpO1xyXG4gICAgY2hhcnRFbGVtZW50c1tcImRhdGFBcmVhXCJdID0gZGF0YUFyZWE7XHJcblxyXG4gICAgcmV0dXJuIGNoYXJ0RWxlbWVudHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckxpbmVDaGFydChcclxuICAgIGNhbnZhczogSFRNTEVsZW1lbnQsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgbGluZUluZm86IExpbmVJbmZvXHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJMaW5lQ2hhcnRcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvKTtcclxuXHJcbiAgICBpZiAoIXJlbmRlckluZm8gfHwgIWxpbmVJbmZvKSByZXR1cm47XHJcblxyXG4gICAgbGV0IGNoYXJ0RWxlbWVudHMgPSBjcmVhdGVBcmVhcyhjYW52YXMsIHJlbmRlckluZm8pO1xyXG5cclxuICAgIHJlbmRlclRpdGxlKGNoYXJ0RWxlbWVudHMsIHJlbmRlckluZm8sIGxpbmVJbmZvKTtcclxuXHJcbiAgICByZW5kZXJYQXhpcyhjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvLCBsaW5lSW5mbyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhjaGFydEVsZW1lbnRzLnhBeGlzKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGNoYXJ0RWxlbWVudHMueFNjYWxlKTtcclxuXHJcbiAgICBsZXQgZGF0YXNldE9uTGVmdFlBeGlzID0gW107XHJcbiAgICBsZXQgZGF0YXNldE9uUmlnaHRZQXhpcyA9IFtdO1xyXG4gICAgbGV0IHhEYXRhc2V0SWRzID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXRYRGF0YXNldElkcygpO1xyXG4gICAgZm9yIChsZXQgaW5kID0gMDsgaW5kIDwgbGluZUluZm8ueUF4aXNMb2NhdGlvbi5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgaWYgKHhEYXRhc2V0SWRzLmluY2x1ZGVzKGluZCkpIGNvbnRpbnVlO1xyXG4gICAgICAgIGxldCB5QXhpc0xvY2F0aW9uID0gbGluZUluZm8ueUF4aXNMb2NhdGlvbltpbmRdO1xyXG4gICAgICAgIGlmICh5QXhpc0xvY2F0aW9uLnRvTG93ZXJDYXNlKCkgPT09IFwibGVmdFwiKSB7XHJcbiAgICAgICAgICAgIGRhdGFzZXRPbkxlZnRZQXhpcy5wdXNoKGluZCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh5QXhpc0xvY2F0aW9uLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IFwicmlnaHRcIikge1xyXG4gICAgICAgICAgICBkYXRhc2V0T25SaWdodFlBeGlzLnB1c2goaW5kKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHJldFJlbmRlckxlZnRZQXhpcyA9IHJlbmRlcllBeGlzKFxyXG4gICAgICAgIGNoYXJ0RWxlbWVudHMsXHJcbiAgICAgICAgcmVuZGVySW5mbyxcclxuICAgICAgICBsaW5lSW5mbyxcclxuICAgICAgICBcImxlZnRcIixcclxuICAgICAgICBkYXRhc2V0T25MZWZ0WUF4aXNcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldFJlbmRlckxlZnRZQXhpcyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRSZW5kZXJMZWZ0WUF4aXM7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNoYXJ0RWxlbWVudHMubGVmdFlBeGlzICYmIGNoYXJ0RWxlbWVudHMubGVmdFlTY2FsZSkge1xyXG4gICAgICAgIGZvciAobGV0IGRhdGFzZXRJZCBvZiBkYXRhc2V0T25MZWZ0WUF4aXMpIHtcclxuICAgICAgICAgICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgICAgIGlmIChkYXRhc2V0LmdldFF1ZXJ5KCkudXNlZEFzWERhdGFzZXQpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgcmVuZGVyTGluZShjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvLCBsaW5lSW5mbywgZGF0YXNldCwgXCJsZWZ0XCIpO1xyXG5cclxuICAgICAgICAgICAgcmVuZGVyUG9pbnRzKGNoYXJ0RWxlbWVudHMsIHJlbmRlckluZm8sIGxpbmVJbmZvLCBkYXRhc2V0LCBcImxlZnRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxldCByZXRSZW5kZXJSaWdodFlBeGlzID0gcmVuZGVyWUF4aXMoXHJcbiAgICAgICAgY2hhcnRFbGVtZW50cyxcclxuICAgICAgICByZW5kZXJJbmZvLFxyXG4gICAgICAgIGxpbmVJbmZvLFxyXG4gICAgICAgIFwicmlnaHRcIixcclxuICAgICAgICBkYXRhc2V0T25SaWdodFlBeGlzXHJcbiAgICApO1xyXG4gICAgaWYgKHR5cGVvZiByZXRSZW5kZXJSaWdodFlBeGlzID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldFJlbmRlclJpZ2h0WUF4aXM7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNoYXJ0RWxlbWVudHMucmlnaHRZQXhpcyAmJiBjaGFydEVsZW1lbnRzLnJpZ2h0WVNjYWxlKSB7XHJcbiAgICAgICAgZm9yIChsZXQgZGF0YXNldElkIG9mIGRhdGFzZXRPblJpZ2h0WUF4aXMpIHtcclxuICAgICAgICAgICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgICAgIGlmIChkYXRhc2V0LmdldFF1ZXJ5KCkudXNlZEFzWERhdGFzZXQpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgcmVuZGVyTGluZShjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvLCBsaW5lSW5mbywgZGF0YXNldCwgXCJyaWdodFwiKTtcclxuXHJcbiAgICAgICAgICAgIHJlbmRlclBvaW50cyhjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvLCBsaW5lSW5mbywgZGF0YXNldCwgXCJyaWdodFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGxpbmVJbmZvLnNob3dMZWdlbmQpIHtcclxuICAgICAgICByZW5kZXJMZWdlbmQoY2hhcnRFbGVtZW50cywgcmVuZGVySW5mbywgbGluZUluZm8pO1xyXG4gICAgfVxyXG5cclxuICAgIHNldENoYXJ0U2NhbGUoY2FudmFzLCBjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyQmFyQ2hhcnQoXHJcbiAgICBjYW52YXM6IEhUTUxFbGVtZW50LFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGJhckluZm86IEJhckluZm9cclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInJlbmRlckJhckNoYXJ0XCIpO1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mbyk7XHJcbiAgICBpZiAoIXJlbmRlckluZm8gfHwgIWJhckluZm8pIHJldHVybjtcclxuXHJcbiAgICBsZXQgY2hhcnRFbGVtZW50cyA9IGNyZWF0ZUFyZWFzKGNhbnZhcywgcmVuZGVySW5mbyk7XHJcblxyXG4gICAgcmVuZGVyVGl0bGUoY2hhcnRFbGVtZW50cywgcmVuZGVySW5mbywgYmFySW5mbyk7XHJcblxyXG4gICAgcmVuZGVyWEF4aXMoY2hhcnRFbGVtZW50cywgcmVuZGVySW5mbywgYmFySW5mbyk7XHJcblxyXG4gICAgbGV0IGRhdGFzZXRPbkxlZnRZQXhpcyA9IFtdO1xyXG4gICAgbGV0IGRhdGFzZXRPblJpZ2h0WUF4aXMgPSBbXTtcclxuICAgIGxldCB4RGF0YXNldElkcyA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0WERhdGFzZXRJZHMoKTtcclxuICAgIGZvciAobGV0IGluZCA9IDA7IGluZCA8IGJhckluZm8ueUF4aXNMb2NhdGlvbi5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgaWYgKHhEYXRhc2V0SWRzLmluY2x1ZGVzKGluZCkpIGNvbnRpbnVlO1xyXG4gICAgICAgIGxldCB5QXhpc0xvY2F0aW9uID0gYmFySW5mby55QXhpc0xvY2F0aW9uW2luZF07XHJcbiAgICAgICAgaWYgKHlBeGlzTG9jYXRpb24udG9Mb3dlckNhc2UoKSA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICAgICAgZGF0YXNldE9uTGVmdFlBeGlzLnB1c2goaW5kKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHlBeGlzTG9jYXRpb24udG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gXCJyaWdodFwiKSB7XHJcbiAgICAgICAgICAgIC8vIHJpZ2h0XHJcbiAgICAgICAgICAgIGRhdGFzZXRPblJpZ2h0WUF4aXMucHVzaChpbmQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgcmV0UmVuZGVyTGVmdFlBeGlzID0gcmVuZGVyWUF4aXMoXHJcbiAgICAgICAgY2hhcnRFbGVtZW50cyxcclxuICAgICAgICByZW5kZXJJbmZvLFxyXG4gICAgICAgIGJhckluZm8sXHJcbiAgICAgICAgXCJsZWZ0XCIsXHJcbiAgICAgICAgZGF0YXNldE9uTGVmdFlBeGlzXHJcbiAgICApO1xyXG4gICAgaWYgKHR5cGVvZiByZXRSZW5kZXJMZWZ0WUF4aXMgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0UmVuZGVyTGVmdFlBeGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB0b3RhbE51bU9mQmFyU2V0cyA9XHJcbiAgICAgICAgZGF0YXNldE9uTGVmdFlBeGlzLmxlbmd0aCArIGRhdGFzZXRPblJpZ2h0WUF4aXMubGVuZ3RoO1xyXG4gICAgbGV0IGN1cnJCYXJTZXQgPSAwO1xyXG5cclxuICAgIGlmIChjaGFydEVsZW1lbnRzLmxlZnRZQXhpcyAmJiBjaGFydEVsZW1lbnRzLmxlZnRZU2NhbGUpIHtcclxuICAgICAgICBmb3IgKGxldCBkYXRhc2V0SWQgb2YgZGF0YXNldE9uTGVmdFlBeGlzKSB7XHJcbiAgICAgICAgICAgIGxldCBkYXRhc2V0ID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXREYXRhc2V0QnlJZChkYXRhc2V0SWQpO1xyXG4gICAgICAgICAgICBpZiAoZGF0YXNldC5nZXRRdWVyeSgpLnVzZWRBc1hEYXRhc2V0KSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgIHJlbmRlckJhcihcclxuICAgICAgICAgICAgICAgIGNoYXJ0RWxlbWVudHMsXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLFxyXG4gICAgICAgICAgICAgICAgYmFySW5mbyxcclxuICAgICAgICAgICAgICAgIGRhdGFzZXQsXHJcbiAgICAgICAgICAgICAgICBcImxlZnRcIixcclxuICAgICAgICAgICAgICAgIGN1cnJCYXJTZXQsXHJcbiAgICAgICAgICAgICAgICB0b3RhbE51bU9mQmFyU2V0c1xyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgY3VyckJhclNldCsrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgcmV0UmVuZGVyUmlnaHRZQXhpcyA9IHJlbmRlcllBeGlzKFxyXG4gICAgICAgIGNoYXJ0RWxlbWVudHMsXHJcbiAgICAgICAgcmVuZGVySW5mbyxcclxuICAgICAgICBiYXJJbmZvLFxyXG4gICAgICAgIFwicmlnaHRcIixcclxuICAgICAgICBkYXRhc2V0T25SaWdodFlBeGlzXHJcbiAgICApO1xyXG4gICAgaWYgKHR5cGVvZiByZXRSZW5kZXJSaWdodFlBeGlzID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldFJlbmRlclJpZ2h0WUF4aXM7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNoYXJ0RWxlbWVudHMucmlnaHRZQXhpcyAmJiBjaGFydEVsZW1lbnRzLnJpZ2h0WVNjYWxlKSB7XHJcbiAgICAgICAgZm9yIChsZXQgZGF0YXNldElkIG9mIGRhdGFzZXRPblJpZ2h0WUF4aXMpIHtcclxuICAgICAgICAgICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgICAgIGlmIChkYXRhc2V0LmdldFF1ZXJ5KCkudXNlZEFzWERhdGFzZXQpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgcmVuZGVyQmFyKFxyXG4gICAgICAgICAgICAgICAgY2hhcnRFbGVtZW50cyxcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8sXHJcbiAgICAgICAgICAgICAgICBiYXJJbmZvLFxyXG4gICAgICAgICAgICAgICAgZGF0YXNldCxcclxuICAgICAgICAgICAgICAgIFwicmlnaHRcIixcclxuICAgICAgICAgICAgICAgIGN1cnJCYXJTZXQsXHJcbiAgICAgICAgICAgICAgICB0b3RhbE51bU9mQmFyU2V0c1xyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgY3VyckJhclNldCsrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoYmFySW5mby5zaG93TGVnZW5kKSB7XHJcbiAgICAgICAgcmVuZGVyTGVnZW5kKGNoYXJ0RWxlbWVudHMsIHJlbmRlckluZm8sIGJhckluZm8pO1xyXG4gICAgfVxyXG5cclxuICAgIHNldENoYXJ0U2NhbGUoY2FudmFzLCBjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlckVycm9yTWVzc2FnZShjYW52YXM6IEhUTUxFbGVtZW50LCBlcnJvck1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgLy8gUmVtb3ZlIGdyYXBoIG5vdCBjb21wbGV0ZWRcclxuICAgIGxldCBncmFwaCA9IGQzLnNlbGVjdChjYW52YXMpLnNlbGVjdChcIiNzdmdcIikucmVtb3ZlKCk7XHJcblxyXG4gICAgbGV0IHN2ZyA9IGQzXHJcbiAgICAgICAgLnNlbGVjdChjYW52YXMpXHJcbiAgICAgICAgLmFwcGVuZChcImRpdlwiKVxyXG4gICAgICAgIC50ZXh0KGVycm9yTWVzc2FnZSlcclxuICAgICAgICAuc3R5bGUoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFwid2hpdGVcIilcclxuICAgICAgICAuc3R5bGUoXCJtYXJnaW4tYm90dG9tXCIsIFwiMjBweFwiKVxyXG4gICAgICAgIC5zdHlsZShcInBhZGRpbmdcIiwgXCIxMHB4XCIpXHJcbiAgICAgICAgLnN0eWxlKFwiY29sb3JcIiwgXCJyZWRcIik7XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIGxldCBtaW47XG4gIGxldCBtYXg7XG4gIGlmICh2YWx1ZW9mID09PSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgaWYgKG1pbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHZhbHVlID49IHZhbHVlKSBtaW4gPSBtYXggPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobWluID4gdmFsdWUpIG1pbiA9IHZhbHVlO1xuICAgICAgICAgIGlmIChtYXggPCB2YWx1ZSkgbWF4ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZSwgKytpbmRleCwgdmFsdWVzKSkgIT0gbnVsbCkge1xuICAgICAgICBpZiAobWluID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAodmFsdWUgPj0gdmFsdWUpIG1pbiA9IG1heCA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChtaW4gPiB2YWx1ZSkgbWluID0gdmFsdWU7XG4gICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gW21pbiwgbWF4XTtcbn1cbiIsImltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcbmltcG9ydCBhcnJheSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgY3VydmVMaW5lYXIgZnJvbSBcIi4vY3VydmUvbGluZWFyLmpzXCI7XG5pbXBvcnQge3ggYXMgcG9pbnRYLCB5IGFzIHBvaW50WX0gZnJvbSBcIi4vcG9pbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgeSkge1xuICB2YXIgZGVmaW5lZCA9IGNvbnN0YW50KHRydWUpLFxuICAgICAgY29udGV4dCA9IG51bGwsXG4gICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgb3V0cHV0ID0gbnVsbDtcblxuICB4ID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiAoeCA9PT0gdW5kZWZpbmVkKSA/IHBvaW50WCA6IGNvbnN0YW50KHgpO1xuICB5ID0gdHlwZW9mIHkgPT09IFwiZnVuY3Rpb25cIiA/IHkgOiAoeSA9PT0gdW5kZWZpbmVkKSA/IHBvaW50WSA6IGNvbnN0YW50KHkpO1xuXG4gIGZ1bmN0aW9uIGxpbmUoZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0gKGRhdGEgPSBhcnJheShkYXRhKSkubGVuZ3RoLFxuICAgICAgICBkLFxuICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICBidWZmZXI7XG5cbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgIGlmICghKGkgPCBuICYmIGRlZmluZWQoZCA9IGRhdGFbaV0sIGksIGRhdGEpKSA9PT0gZGVmaW5lZDApIHtcbiAgICAgICAgaWYgKGRlZmluZWQwID0gIWRlZmluZWQwKSBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgIGVsc2Ugb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbmVkMCkgb3V0cHV0LnBvaW50KCt4KGQsIGksIGRhdGEpLCAreShkLCBpLCBkYXRhKSk7XG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGxpbmUueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGxpbmUpIDogeDtcbiAgfTtcblxuICBsaW5lLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5lKSA6IHk7XG4gIH07XG5cbiAgbGluZS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlZmluZWQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGxpbmUpIDogZGVmaW5lZDtcbiAgfTtcblxuICBsaW5lLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGN1cnZlID0gXywgY29udGV4dCAhPSBudWxsICYmIChvdXRwdXQgPSBjdXJ2ZShjb250ZXh0KSksIGxpbmUpIDogY3VydmU7XG4gIH07XG5cbiAgbGluZS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IGNvbnRleHQgPSBvdXRwdXQgPSBudWxsIDogb3V0cHV0ID0gY3VydmUoY29udGV4dCA9IF8pLCBsaW5lKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmU7XG59XG4iLCJpbXBvcnQgc291cmNlRXZlbnQgZnJvbSBcIi4vc291cmNlRXZlbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZXZlbnQsIG5vZGUpIHtcbiAgZXZlbnQgPSBzb3VyY2VFdmVudChldmVudCk7XG4gIGlmIChub2RlID09PSB1bmRlZmluZWQpIG5vZGUgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICBpZiAobm9kZSkge1xuICAgIHZhciBzdmcgPSBub2RlLm93bmVyU1ZHRWxlbWVudCB8fCBub2RlO1xuICAgIGlmIChzdmcuY3JlYXRlU1ZHUG9pbnQpIHtcbiAgICAgIHZhciBwb2ludCA9IHN2Zy5jcmVhdGVTVkdQb2ludCgpO1xuICAgICAgcG9pbnQueCA9IGV2ZW50LmNsaWVudFgsIHBvaW50LnkgPSBldmVudC5jbGllbnRZO1xuICAgICAgcG9pbnQgPSBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obm9kZS5nZXRTY3JlZW5DVE0oKS5pbnZlcnNlKCkpO1xuICAgICAgcmV0dXJuIFtwb2ludC54LCBwb2ludC55XTtcbiAgICB9XG4gICAgaWYgKG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KSB7XG4gICAgICB2YXIgcmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICByZXR1cm4gW2V2ZW50LmNsaWVudFggLSByZWN0LmxlZnQgLSBub2RlLmNsaWVudExlZnQsIGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcCAtIG5vZGUuY2xpZW50VG9wXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtldmVudC5wYWdlWCwgZXZlbnQucGFnZVldO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZXZlbnQpIHtcbiAgbGV0IHNvdXJjZUV2ZW50O1xuICB3aGlsZSAoc291cmNlRXZlbnQgPSBldmVudC5zb3VyY2VFdmVudCkgZXZlbnQgPSBzb3VyY2VFdmVudDtcbiAgcmV0dXJuIGV2ZW50O1xufVxuIiwiaW1wb3J0IFRyYWNrZXIgZnJvbSBcIi4vbWFpblwiO1xyXG5pbXBvcnQge1xyXG4gICAgU2VhcmNoVHlwZSxcclxuICAgIEJhckluZm8sXHJcbiAgICBDb21tb25DaGFydEluZm8sXHJcbiAgICBRdWVyeSxcclxuICAgIFJlbmRlckluZm8sXHJcbiAgICBTdW1tYXJ5SW5mbyxcclxuICAgIE1hcmdpbixcclxuICAgIEdyYXBoVHlwZSxcclxuICAgIExpbmVJbmZvLFxyXG4gICAgUGllSW5mbyxcclxuICAgIE1vbnRoSW5mbyxcclxuICAgIEhlYXRtYXBJbmZvLFxyXG4gICAgQnVsbGV0SW5mbyxcclxuICAgIERhdGFzZXQsXHJcbiAgICBDdXN0b21EYXRhc2V0SW5mbyxcclxufSBmcm9tIFwiLi9kYXRhXCI7XHJcbmltcG9ydCB7IFRGb2xkZXIsIG5vcm1hbGl6ZVBhdGggfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgcGFyc2VZYW1sIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCAqIGFzIGhlbHBlciBmcm9tIFwiLi9oZWxwZXJcIjtcclxuXHJcbmZ1bmN0aW9uIHN0clRvQm9vbChzdHI6IHN0cmluZyk6IGJvb2xlYW4gfCBudWxsIHtcclxuICAgIHN0ciA9IHN0ci50cmltKCkudG9Mb3dlckNhc2UoKTtcclxuICAgIHN3aXRjaCAoc3RyKSB7XHJcbiAgICAgICAgY2FzZSBcInRydWVcIjpcclxuICAgICAgICBjYXNlIFwiMVwiOlxyXG4gICAgICAgIGNhc2UgXCJvblwiOlxyXG4gICAgICAgIGNhc2UgXCJ5ZXNcIjpcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgY2FzZSBcImZhbHNlXCI6XHJcbiAgICAgICAgY2FzZSBcIjBcIjpcclxuICAgICAgICBjYXNlIFwib2ZmXCI6XHJcbiAgICAgICAgY2FzZSBcIm5vXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcblxyXG5mdW5jdGlvbiB2YWxpZGF0ZVNlYXJjaFR5cGUoc2VhcmNoVHlwZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoXHJcbiAgICAgICAgc2VhcmNoVHlwZS50b0xvd2VyQ2FzZSgpID09PSBcInRhZ1wiIHx8XHJcbiAgICAgICAgc2VhcmNoVHlwZS50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiB8fFxyXG4gICAgICAgIHNlYXJjaFR5cGUudG9Mb3dlckNhc2UoKSA9PT0gXCJmcm9udG1hdHRlclwiIHx8XHJcbiAgICAgICAgc2VhcmNoVHlwZS50b0xvd2VyQ2FzZSgpID09PSBcIndpa2lcIiB8fFxyXG4gICAgICAgIHNlYXJjaFR5cGUudG9Mb3dlckNhc2UoKSA9PT0gXCJkdmZpZWxkXCIgfHxcclxuICAgICAgICBzZWFyY2hUeXBlLnRvTG93ZXJDYXNlKCkgPT09IFwidGFibGVcIiB8fFxyXG4gICAgICAgIHNlYXJjaFR5cGUudG9Mb3dlckNhc2UoKSA9PT0gXCJmaWxlbWV0YVwiIHx8XHJcbiAgICAgICAgc2VhcmNoVHlwZS50b0xvd2VyQ2FzZSgpID09PSBcInRhc2tcIiB8fFxyXG4gICAgICAgIHNlYXJjaFR5cGUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0YXNrLmFsbFwiIHx8XHJcbiAgICAgICAgc2VhcmNoVHlwZS50b0xvd2VyQ2FzZSgpID09PSBcInRhc2suZG9uZVwiIHx8XHJcbiAgICAgICAgc2VhcmNoVHlwZS50b0xvd2VyQ2FzZSgpID09PSBcInRhc2subm90ZG9uZVwiXHJcbiAgICApIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuZnVuY3Rpb24gdmFsaWRhdGVZQXhpc0xvY2F0aW9uKGxvY2F0aW9uOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIGlmIChsb2NhdGlvbiA9PT0gXCJsZWZ0XCIgfHwgbG9jYXRpb24gPT09IFwicmlnaHRcIiB8fCBsb2NhdGlvbiA9PT0gXCJub25lXCIpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuZnVuY3Rpb24gdmFsaWRhdGVDb2xvcihjb2xvcjogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Qm9vbEFycmF5RnJvbUlucHV0KFxyXG4gICAgbmFtZTogc3RyaW5nLFxyXG4gICAgaW5wdXQ6IGFueSxcclxuICAgIG51bURhdGFzZXQ6IG51bWJlcixcclxuICAgIGRlZmF1bHRWYWx1ZTogYm9vbGVhbixcclxuICAgIGFsbG93Tm9WYWxpZFZhbHVlOiBib29sZWFuXHJcbik6IEFycmF5PGJvb2xlYW4+IHwgc3RyaW5nIHtcclxuICAgIGxldCBhcnJheTogQXJyYXk8Ym9vbGVhbj4gPSBbXTtcclxuICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIlwiO1xyXG4gICAgbGV0IG51bVZhbGlkVmFsdWUgPSAwO1xyXG5cclxuICAgIHdoaWxlIChudW1EYXRhc2V0ID4gYXJyYXkubGVuZ3RoKSB7XHJcbiAgICAgICAgYXJyYXkucHVzaChkZWZhdWx0VmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09IFwidW5kZWZpbmVkXCIgfHwgaW5wdXQgPT09IG51bGwpIHtcclxuICAgICAgICAvLyBhbGwgZGVmYXVsdFZhbHVlXHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJvYmplY3RcIiAmJiBpbnB1dCAhPT0gbnVsbCkge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xyXG4gICAgICAgICAgICBpZiAoaW5wdXQubGVuZ3RoID4gbnVtRGF0YXNldCkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJUb28gbWFueSBpbnB1dHMgZm9yIHBhcmFtZXRlciAnXCIgKyBuYW1lICsgXCInXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpbnB1dC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiRW1wdHkgYXJyYXkgbm90IGFsbG93ZCBmb3IgXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmQgPSAwOyBpbmQgPCBhcnJheS5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kIDwgaW5wdXQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnIgPSBpbnB1dFtpbmRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwcmV2ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2ID0gaW5wdXRbaW5kIC0gMV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGN1cnIgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyciA9IGN1cnIudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyciA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXYgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gcHJldjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dHMgZm9yIFwiICsgbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY3VyciA9PT0gXCJib29sZWFuXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGN1cnI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bVZhbGlkVmFsdWUrKztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgaW5wdXRzIGZvciBcIiArIG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRXhjZWVkcyB0aGUgbGVuZ3RoIG9mIGlucHV0LCB1c2UgcHJldiB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBsYXN0ID0gaW5wdXRbaW5wdXQubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bVZhbGlkVmFsdWUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBsYXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICBsZXQgc3BsaXR0ZWQgPSBpbnB1dC5zcGxpdChcIixcIik7XHJcbiAgICAgICAgaWYgKHNwbGl0dGVkLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgaWYgKHNwbGl0dGVkLmxlbmd0aCA+IG51bURhdGFzZXQpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiVG9vIG1hbnkgaW5wdXRzIGZvciBwYXJhbWV0ZXIgJ1wiICsgbmFtZSArIFwiJ1wiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmQgPSAwOyBpbmQgPCBhcnJheS5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kIDwgc3BsaXR0ZWQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnIgPSBzcGxpdHRlZFtpbmRdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcHJldiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldiA9IHN0clRvQm9vbChzcGxpdHRlZFtpbmQgLSAxXS50cmltKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VyciA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IHByZXY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJCb29sID0gc3RyVG9Cb29sKGN1cnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyckJvb2wgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBjdXJyQm9vbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bVZhbGlkVmFsdWUrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dHMgZm9yIFwiICsgbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBFeGNlZWRzIHRoZSBsZW5ndGggb2YgaW5wdXQsIHVzZSBwcmV2IHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhc3QgPSBzdHJUb0Jvb2woc3BsaXR0ZWRbc3BsaXR0ZWQubGVuZ3RoIC0gMV0udHJpbSgpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobnVtVmFsaWRWYWx1ZSA+IDAgJiYgbGFzdCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gbGFzdDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgLy8gYWxsIGRlZmF1bHRWYWx1ZVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IGlucHV0Qm9vbCA9IHN0clRvQm9vbChpbnB1dCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXRCb29sICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbMF0gPSBpbnB1dEJvb2w7XHJcbiAgICAgICAgICAgICAgICAgICAgbnVtVmFsaWRWYWx1ZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGluZCA9IDE7IGluZCA8IGFycmF5Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGlucHV0Qm9vbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dHMgZm9yIFwiICsgbmFtZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgIGFycmF5WzBdID0gaW5wdXQ7XHJcbiAgICAgICAgbnVtVmFsaWRWYWx1ZSsrO1xyXG4gICAgICAgIGZvciAobGV0IGluZCA9IDE7IGluZCA8IGFycmF5Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGlucHV0O1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0cyBmb3IgXCIgKyBuYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghYWxsb3dOb1ZhbGlkVmFsdWUgJiYgbnVtVmFsaWRWYWx1ZSA9PT0gMCkge1xyXG4gICAgICAgIGVycm9yTWVzc2FnZSA9IFwiTm8gdmFsaWQgaW5wdXQgZm9yIFwiICsgbmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZXJyb3JNZXNzYWdlICE9PSBcIlwiKSB7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYXJyYXk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldE51bWJlckFycmF5RnJvbUlucHV0KFxyXG4gICAgbmFtZTogc3RyaW5nLFxyXG4gICAgaW5wdXQ6IGFueSxcclxuICAgIG51bURhdGFzZXQ6IG51bWJlcixcclxuICAgIGRlZmF1bHRWYWx1ZTogbnVtYmVyLFxyXG4gICAgYWxsb3dOb1ZhbGlkVmFsdWU6IGJvb2xlYW5cclxuKTogQXJyYXk8bnVtYmVyPiB8IHN0cmluZyB7XHJcbiAgICBsZXQgYXJyYXk6IEFycmF5PG51bWJlcj4gPSBbXTtcclxuICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIlwiO1xyXG4gICAgbGV0IG51bVZhbGlkVmFsdWUgPSAwO1xyXG5cclxuICAgIHdoaWxlIChudW1EYXRhc2V0ID4gYXJyYXkubGVuZ3RoKSB7XHJcbiAgICAgICAgYXJyYXkucHVzaChkZWZhdWx0VmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09IFwidW5kZWZpbmVkXCIgfHwgaW5wdXQgPT09IG51bGwpIHtcclxuICAgICAgICAvLyBhbGwgZGVmYXVsdFZhbHVlXHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJvYmplY3RcIiAmJiBpbnB1dCAhPT0gbnVsbCkge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xyXG4gICAgICAgICAgICBpZiAoaW5wdXQubGVuZ3RoID4gbnVtRGF0YXNldCkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJUb28gbWFueSBpbnB1dHMgZm9yIHBhcmFtZXRlciAnXCIgKyBuYW1lICsgXCInXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpbnB1dC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiRW1wdHkgYXJyYXkgbm90IGFsbG93ZCBmb3IgXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmQgPSAwOyBpbmQgPCBhcnJheS5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kIDwgaW5wdXQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnIgPSBpbnB1dFtpbmRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwcmV2ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2ID0gaW5wdXRbaW5kIC0gMV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGN1cnIgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyciA9IGN1cnIudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyciA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXYgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gcHJldjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dHMgZm9yIFwiICsgbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY3VyciA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gY3VycjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtVmFsaWRWYWx1ZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dHMgZm9yIFwiICsgbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBFeGNlZWRzIHRoZSBsZW5ndGggb2YgaW5wdXQsIHVzZSBwcmV2IHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhc3QgPSBpbnB1dFtpbnB1dC5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobnVtVmFsaWRWYWx1ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGxhc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIGxldCBzcGxpdHRlZCA9IGlucHV0LnNwbGl0KFwiLFwiKTtcclxuICAgICAgICBpZiAoc3BsaXR0ZWQubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBpZiAoc3BsaXR0ZWQubGVuZ3RoID4gbnVtRGF0YXNldCkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJUb28gbWFueSBpbnB1dHMgZm9yIHBhcmFtZXRlciAnXCIgKyBuYW1lICsgXCInXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZCA9IDA7IGluZCA8IGFycmF5Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbmQgPCBzcGxpdHRlZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyciA9IHNwbGl0dGVkW2luZF0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwcmV2ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2ID0gaGVscGVyLnBhcnNlRmxvYXRGcm9tQW55KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BsaXR0ZWRbaW5kIC0gMV0udHJpbSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2ICE9PSBudWxsICYmIE51bWJlci5pc051bWJlcihwcmV2KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IHByZXY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJOdW0gPSBoZWxwZXIucGFyc2VGbG9hdEZyb21BbnkoY3VycikudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOdW1iZXIoY3Vyck51bSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBjdXJyTnVtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtVmFsaWRWYWx1ZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0cyBmb3IgXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEV4Y2VlZHMgdGhlIGxlbmd0aCBvZiBpbnB1dCwgdXNlIHByZXYgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdCA9IGhlbHBlci5wYXJzZUZsb2F0RnJvbUFueShcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3BsaXR0ZWRbaW5wdXQubGVuZ3RoIC0gMV0udHJpbSgpXHJcbiAgICAgICAgICAgICAgICAgICAgKS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobnVtVmFsaWRWYWx1ZSA+IDAgJiYgTnVtYmVyLmlzTnVtYmVyKGxhc3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBsYXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGlucHV0ID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhbGwgZGVmYXVsdFZhbHVlXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW5wdXROdW0gPSBoZWxwZXIucGFyc2VGbG9hdEZyb21BbnkoaW5wdXQpLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKE51bWJlci5pc051bWJlcihpbnB1dE51bSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcnJheVswXSA9IGlucHV0TnVtO1xyXG4gICAgICAgICAgICAgICAgICAgIG51bVZhbGlkVmFsdWUrKztcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpbmQgPSAxOyBpbmQgPCBhcnJheS5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBpbnB1dE51bTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dHMgZm9yIFwiICsgbmFtZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgaWYgKE51bWJlci5pc051bWJlcihpbnB1dCkpIHtcclxuICAgICAgICAgICAgYXJyYXlbMF0gPSBpbnB1dDtcclxuICAgICAgICAgICAgbnVtVmFsaWRWYWx1ZSsrO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmQgPSAxOyBpbmQgPCBhcnJheS5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gaW5wdXQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgaW5wdXRzIGZvciBcIiArIG5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgaW5wdXRzIGZvciBcIiArIG5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFhbGxvd05vVmFsaWRWYWx1ZSAmJiBudW1WYWxpZFZhbHVlID09PSAwKSB7XHJcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJObyB2YWxpZCBpbnB1dCBmb3IgXCIgKyBuYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChlcnJvck1lc3NhZ2UgIT09IFwiXCIpIHtcclxuICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhcnJheTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U3RyaW5nQXJyYXlGcm9tSW5wdXQoXHJcbiAgICBuYW1lOiBzdHJpbmcsXHJcbiAgICBpbnB1dDogYW55LFxyXG4gICAgbnVtRGF0YXNldDogbnVtYmVyLFxyXG4gICAgZGVmYXVsdFZhbHVlOiBzdHJpbmcsXHJcbiAgICB2YWxpZGF0b3I6IEZ1bmN0aW9uLFxyXG4gICAgYWxsb3dOb1ZhbGlkVmFsdWU6IGJvb2xlYW5cclxuKTogQXJyYXk8c3RyaW5nPiB8IHN0cmluZyB7XHJcbiAgICBsZXQgYXJyYXk6IEFycmF5PHN0cmluZz4gPSBbXTtcclxuICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIlwiO1xyXG4gICAgbGV0IG51bVZhbGlkVmFsdWUgPSAwO1xyXG5cclxuICAgIHdoaWxlIChudW1EYXRhc2V0ID4gYXJyYXkubGVuZ3RoKSB7XHJcbiAgICAgICAgYXJyYXkucHVzaChkZWZhdWx0VmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09IFwidW5kZWZpbmVkXCIgfHwgaW5wdXQgPT09IG51bGwpIHtcclxuICAgICAgICAvLyBhbGwgZGVmYXVsdFZhbHVlXHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJvYmplY3RcIiAmJiBpbnB1dCAhPT0gbnVsbCkge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xyXG4gICAgICAgICAgICBpZiAoaW5wdXQubGVuZ3RoID4gbnVtRGF0YXNldCkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJUb28gbWFueSBpbnB1dHMgZm9yIHBhcmFtZXRlciAnXCIgKyBuYW1lICsgXCInXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpbnB1dC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiRW1wdHkgYXJyYXkgbm90IGFsbG93ZCBmb3IgXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmQgPSAwOyBpbmQgPCBhcnJheS5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kIDwgaW5wdXQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnIgPSBpbnB1dFtpbmRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwcmV2ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2ID0gaW5wdXRbaW5kIC0gMV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGN1cnIgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyciA9IGN1cnIudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyciA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXYgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gcHJldjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRhdG9yKGN1cnIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBjdXJyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1WYWxpZFZhbHVlKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0cyBmb3IgXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBjdXJyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bVZhbGlkVmFsdWUrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dHMgZm9yIFwiICsgbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBFeGNlZWRzIHRoZSBsZW5ndGggb2YgaW5wdXQsIHVzZSBwcmV2IHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhc3QgPSBpbnB1dFtpbnB1dC5sZW5ndGggLSAxXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bVZhbGlkVmFsdWUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBsYXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICBsZXQgc3BsaXR0ZWQgPSBpbnB1dC5zcGxpdChcIixcIik7XHJcbiAgICAgICAgaWYgKHNwbGl0dGVkLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgaWYgKHNwbGl0dGVkLmxlbmd0aCA+IG51bURhdGFzZXQpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiVG9vIG1hbnkgaW5wdXRzIGZvciBwYXJhbWV0ZXIgJ1wiICsgbmFtZSArIFwiJ1wiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmQgPSAwOyBpbmQgPCBhcnJheS5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kIDwgc3BsaXR0ZWQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnIgPSBzcGxpdHRlZFtpbmRdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcHJldiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldiA9IHNwbGl0dGVkW2luZCAtIDFdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnIgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXYgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBwcmV2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0b3IoY3VycikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gY3VycjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1WYWxpZFZhbHVlKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dHMgZm9yIFwiICsgbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBjdXJyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtVmFsaWRWYWx1ZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBFeGNlZWRzIHRoZSBsZW5ndGggb2YgaW5wdXQsIHVzZSBwcmV2IHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhc3QgPSBzcGxpdHRlZFtzcGxpdHRlZC5sZW5ndGggLSAxXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bVZhbGlkVmFsdWUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBsYXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGlucHV0ID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhbGwgZGVmYXVsdFZhbHVlXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsaWRhdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRvcihpbnB1dCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbMF0gPSBpbnB1dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtVmFsaWRWYWx1ZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpbmQgPSAxOyBpbmQgPCBhcnJheS5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gaW5wdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgaW5wdXRzIGZvciBcIiArIG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhcnJheVswXSA9IGlucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgIG51bVZhbGlkVmFsdWUrKztcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpbmQgPSAxOyBpbmQgPCBhcnJheS5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBpbnB1dDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dHMgZm9yIFwiICsgbmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWFsbG93Tm9WYWxpZFZhbHVlICYmIG51bVZhbGlkVmFsdWUgPT09IDApIHtcclxuICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIk5vIHZhbGlkIGlucHV0IGZvciBcIiArIG5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGVycm9yTWVzc2FnZSAhPT0gXCJcIikge1xyXG4gICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFycmF5O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXROdW1iZXJBcnJheShuYW1lOiBzdHJpbmcsIGlucHV0OiBhbnkpOiBBcnJheTxudW1iZXI+IHwgc3RyaW5nIHtcclxuICAgIGxldCBudW1BcnJheTogQXJyYXk8bnVtYmVyPiA9IFtdO1xyXG5cclxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09IFwidW5kZWZpbmVkXCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBudW1BcnJheTtcclxuXHJcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGVsZW0gb2YgaW5wdXQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2ID0gcGFyc2VGbG9hdChlbGVtKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKHYpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bUFycmF5LnB1c2godik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IGBQYXJhbWV0ZXIgJyR7bmFtZX0nIGFjY2VwdHMgb25seSBudW1iZXJzYDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIGxldCBzcGxpdHRlZCA9IGlucHV0LnNwbGl0KFwiLFwiKTtcclxuICAgICAgICBpZiAoc3BsaXR0ZWQubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBwaWVjZSBvZiBzcGxpdHRlZCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHYgPSBwYXJzZUZsb2F0KHBpZWNlLnRyaW0oKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIU51bWJlci5pc05hTih2KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE51bWJlci5pc051bWJlcihOYU4pIC0tPiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgbnVtQXJyYXkucHVzaCh2KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IGBQYXJhbWV0ZXIgJyR7bmFtZX0nIGFjY2VwdHMgb25seSBudW1iZXJzYDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChpbnB1dCA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gYEVtcHR5ICR7bmFtZX0gaXMgbm90IGFsbG93ZWQuYDtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgdiA9IHBhcnNlRmxvYXQoaW5wdXQpO1xyXG4gICAgICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKHYpKSB7XHJcbiAgICAgICAgICAgICAgICBudW1BcnJheS5wdXNoKHYpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IGBQYXJhbWV0ZXIgJyR7bmFtZX0nIGFjY2VwdHMgb25seSBudW1iZXJzYDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgIG51bUFycmF5LnB1c2goaW5wdXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gYEludmFsaWQgJHtuYW1lfWA7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbnVtQXJyYXk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFN0cmluZ0FycmF5KG5hbWU6IHN0cmluZywgaW5wdXQ6IGFueSk6IEFycmF5PHN0cmluZz4gfCBzdHJpbmcge1xyXG4gICAgbGV0IHN0ckFycmF5OiBBcnJheTxzdHJpbmc+ID0gW107XHJcblxyXG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJ1bmRlZmluZWRcIiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIHN0ckFycmF5O1xyXG5cclxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgZWxlbSBvZiBpbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyQXJyYXkucHVzaChlbGVtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgbGV0IHNwbGl0dGVkID0gaW5wdXQuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHNwbGl0dGVkKTtcclxuICAgICAgICBpZiAoc3BsaXR0ZWQubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBwaWVjZSBvZiBzcGxpdHRlZCkge1xyXG4gICAgICAgICAgICAgICAgc3RyQXJyYXkucHVzaChwaWVjZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGlucHV0ID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBgRW1wdHkgJHtuYW1lfSBpcyBub3QgYWxsb3dlZC5gO1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN0ckFycmF5LnB1c2goaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IGBJbnZhbGlkICR7bmFtZX1gO1xyXG4gICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHN0ckFycmF5O1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZUNvbW1vbkNoYXJ0SW5mbyh5YW1sOiBhbnksIHJlbmRlckluZm86IENvbW1vbkNoYXJ0SW5mbykge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJwYXJzZUNvbW1vbkNoYXJ0SW5mb1wiKTtcclxuXHJcbiAgICAvLyBzaW5nbGUgdmFsdWUsIHVzZSBkZWZhdWx0IHZhbHVlIGlmIG5vIHZhbHVlIGZyb20gWUFNTFxyXG4gICAgaWYgKHlhbWwpIHtcclxuICAgICAgICAvLyB0aXRsZVxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbC50aXRsZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZW5kZXJJbmZvLnRpdGxlID0geWFtbC50aXRsZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHhBeGlzTGFiZWxcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWwueEF4aXNMYWJlbCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZW5kZXJJbmZvLnhBeGlzTGFiZWwgPSB5YW1sLnhBeGlzTGFiZWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB4QXhpc0NvbG9yXHJcbiAgICAgICAgaWYgKHR5cGVvZiB5YW1sLnhBeGlzQ29sb3IgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmVuZGVySW5mby54QXhpc0NvbG9yID0geWFtbC54QXhpc0NvbG9yO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8geEF4aXNMYWJlbENvbG9yXHJcbiAgICAgICAgaWYgKHR5cGVvZiB5YW1sLnhBeGlzTGFiZWxDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZW5kZXJJbmZvLnhBeGlzTGFiZWxDb2xvciA9IHlhbWwueEF4aXNMYWJlbENvbG9yO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gYWxsb3dJbnNwZWN0RGF0YVxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbC5hbGxvd0luc3BlY3REYXRhID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmFsbG93SW5zcGVjdERhdGEgPSB5YW1sLmFsbG93SW5zcGVjdERhdGE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzaG93TGVnZW5kXHJcbiAgICAgICAgaWYgKHR5cGVvZiB5YW1sLnNob3dMZWdlbmQgPT09IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uc2hvd0xlZ2VuZCA9IHlhbWwuc2hvd0xlZ2VuZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGxlZ2VuZFBvc2l0aW9uXHJcbiAgICAgICAgaWYgKHR5cGVvZiB5YW1sLmxlZ2VuZFBvc2l0aW9uID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJlbmRlckluZm8ubGVnZW5kUG9zaXRpb24gPSB5YW1sLmxlZ2VuZFBvc2l0aW9uO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlbmRlckluZm8ubGVnZW5kUG9zaXRpb24gPSBcImJvdHRvbVwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbGVnZW5kT3JpZW50XHJcbiAgICAgICAgaWYgKHR5cGVvZiB5YW1sLmxlZ2VuZE9yaWVudGF0aW9uID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJlbmRlckluZm8ubGVnZW5kT3JpZW50YXRpb24gPSB5YW1sLmxlZ2VuZE9yaWVudGF0aW9uO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubGVnZW5kUG9zaXRpb24gPT09IFwidG9wXCIgfHxcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubGVnZW5kUG9zaXRpb24gPT09IFwiYm90dG9tXCJcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmxlZ2VuZE9yaWVudGF0aW9uID0gXCJob3Jpem9udGFsXCI7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmxlZ2VuZFBvc2l0aW9uID09PSBcImxlZnRcIiB8fFxyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5sZWdlbmRQb3NpdGlvbiA9PT0gXCJyaWdodFwiXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5sZWdlbmRPcmllbnRhdGlvbiA9IFwidmVydGljYWxcIjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubGVnZW5kT3JpZW50YXRpb24gPSBcImhvcml6b250YWxcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLmxlZ2VuZFBvc2l0aW9uKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLmxlZ2VuZE9yaWVudGF0aW9uKTtcclxuXHJcbiAgICAgICAgLy8gbGVnZW5kQmdDb2xvclxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbC5sZWdlbmRCZ0NvbG9yID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJlbmRlckluZm8ubGVnZW5kQmdDb2xvciA9IHlhbWwubGVnZW5kQmdDb2xvcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGxlZ2VuZEJvcmRlckNvbG9yXHJcbiAgICAgICAgaWYgKHR5cGVvZiB5YW1sLmxlZ2VuZEJvcmRlckNvbG9yID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJlbmRlckluZm8ubGVnZW5kQm9yZGVyQ29sb3IgPSB5YW1sLmxlZ2VuZEJvcmRlckNvbG9yO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyB5QXhpc0xhYmVsXHJcbiAgICBsZXQgcmV0WUF4aXNMYWJlbCA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgIFwieUF4aXNMYWJlbFwiLFxyXG4gICAgICAgIHlhbWw/LnlBeGlzTGFiZWwsXHJcbiAgICAgICAgMixcclxuICAgICAgICBcIlZhbHVlXCIsXHJcbiAgICAgICAgbnVsbCxcclxuICAgICAgICB0cnVlXHJcbiAgICApO1xyXG4gICAgaWYgKHR5cGVvZiByZXRZQXhpc0xhYmVsID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldFlBeGlzTGFiZWw7IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgfVxyXG4gICAgaWYgKHJldFlBeGlzTGFiZWwubGVuZ3RoID4gMikge1xyXG4gICAgICAgIHJldHVybiBcInlBeGlzTGFiZWwgYWNjZXB0cyBub3QgbW9yZSB0aGFuIHR3byB2YWx1ZXMgZm9yIGxlZnQgYW5kIHJpZ2h0IHktYXhlc1wiO1xyXG4gICAgfVxyXG4gICAgcmVuZGVySW5mby55QXhpc0xhYmVsID0gcmV0WUF4aXNMYWJlbDtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8ueUF4aXNMYWJlbCk7XHJcblxyXG4gICAgLy8geUF4aXNDb2xvclxyXG4gICAgbGV0IHJldFlBeGlzQ29sb3IgPSBnZXRTdHJpbmdBcnJheUZyb21JbnB1dChcclxuICAgICAgICBcInlBeGlzQ29sb3JcIixcclxuICAgICAgICB5YW1sPy55QXhpc0NvbG9yLFxyXG4gICAgICAgIDIsXHJcbiAgICAgICAgXCJcIixcclxuICAgICAgICB2YWxpZGF0ZUNvbG9yLFxyXG4gICAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldFlBeGlzQ29sb3IgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0WUF4aXNDb2xvcjsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICB9XHJcbiAgICBpZiAocmV0WUF4aXNDb2xvci5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgcmV0dXJuIFwieUF4aXNDb2xvciBhY2NlcHRzIG5vdCBtb3JlIHRoYW4gdHdvIHZhbHVlcyBmb3IgbGVmdCBhbmQgcmlnaHQgeS1heGVzXCI7XHJcbiAgICB9XHJcbiAgICByZW5kZXJJbmZvLnlBeGlzQ29sb3IgPSByZXRZQXhpc0NvbG9yO1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby55QXhpc0NvbG9yKTtcclxuXHJcbiAgICAvLyB5QXhpc0xhYmVsQ29sb3JcclxuICAgIGxldCByZXRZQXhpc0xhYmVsQ29sb3IgPSBnZXRTdHJpbmdBcnJheUZyb21JbnB1dChcclxuICAgICAgICBcInlBeGlzTGFiZWxDb2xvclwiLFxyXG4gICAgICAgIHlhbWw/LnlBeGlzTGFiZWxDb2xvcixcclxuICAgICAgICAyLFxyXG4gICAgICAgIFwiXCIsXHJcbiAgICAgICAgdmFsaWRhdGVDb2xvcixcclxuICAgICAgICB0cnVlXHJcbiAgICApO1xyXG4gICAgaWYgKHR5cGVvZiByZXRZQXhpc0xhYmVsQ29sb3IgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0WUF4aXNMYWJlbENvbG9yOyAvLyBlcnJvck1lc3NhZ2VcclxuICAgIH1cclxuICAgIGlmIChyZXRZQXhpc0xhYmVsQ29sb3IubGVuZ3RoID4gMikge1xyXG4gICAgICAgIHJldHVybiBcInlBeGlzTGFiZWxDb2xvciBhY2NlcHRzIG5vdCBtb3JlIHRoYW4gdHdvIHZhbHVlcyBmb3IgbGVmdCBhbmQgcmlnaHQgeS1heGVzXCI7XHJcbiAgICB9XHJcbiAgICByZW5kZXJJbmZvLnlBeGlzTGFiZWxDb2xvciA9IHJldFlBeGlzTGFiZWxDb2xvcjtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8ueUF4aXNMYWJlbENvbG9yKTtcclxuXHJcbiAgICAvLyB5QXhpc1VuaXRcclxuICAgIGxldCByZXRZQXhpc1VuaXQgPSBnZXRTdHJpbmdBcnJheUZyb21JbnB1dChcclxuICAgICAgICBcInlBeGlzVW5pdFwiLFxyXG4gICAgICAgIHlhbWw/LnlBeGlzVW5pdCxcclxuICAgICAgICAyLFxyXG4gICAgICAgIFwiXCIsXHJcbiAgICAgICAgbnVsbCxcclxuICAgICAgICB0cnVlXHJcbiAgICApO1xyXG4gICAgaWYgKHR5cGVvZiByZXRZQXhpc1VuaXQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0WUF4aXNVbml0OyAvLyBlcnJvck1lc3NhZ2VcclxuICAgIH1cclxuICAgIGlmIChyZXRZQXhpc1VuaXQubGVuZ3RoID4gMikge1xyXG4gICAgICAgIHJldHVybiBcInlBeGlzVW5pdCBhY2NlcHRzIG5vdCBtb3JlIHRoYW4gdHdvIHZhbHVlcyBmb3IgbGVmdCBhbmQgcmlnaHQgeS1heGVzXCI7XHJcbiAgICB9XHJcbiAgICByZW5kZXJJbmZvLnlBeGlzVW5pdCA9IHJldFlBeGlzVW5pdDtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8ueUF4aXNVbml0KTtcclxuXHJcbiAgICAvLyB5TWluXHJcbiAgICBsZXQgcmV0WU1pbiA9IGdldE51bWJlckFycmF5RnJvbUlucHV0KFwieU1pblwiLCB5YW1sPy55TWluLCAyLCBudWxsLCB0cnVlKTtcclxuICAgIGlmICh0eXBlb2YgcmV0WU1pbiA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRZTWluOyAvLyBlcnJvck1lc3NhZ2VcclxuICAgIH1cclxuICAgIGlmIChyZXRZTWluLmxlbmd0aCA+IDIpIHtcclxuICAgICAgICByZXR1cm4gXCJ5TWluIGFjY2VwdHMgbm90IG1vcmUgdGhhbiB0d28gdmFsdWVzIGZvciBsZWZ0IGFuZCByaWdodCB5LWF4ZXNcIjtcclxuICAgIH1cclxuICAgIHJlbmRlckluZm8ueU1pbiA9IHJldFlNaW47XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLnlNaW4pO1xyXG5cclxuICAgIC8vIHlNYXhcclxuICAgIGxldCByZXRZTWF4ID0gZ2V0TnVtYmVyQXJyYXlGcm9tSW5wdXQoXCJ5TWF4XCIsIHlhbWw/LnlNYXgsIDIsIG51bGwsIHRydWUpO1xyXG4gICAgaWYgKHR5cGVvZiByZXRZTWF4ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldFlNYXg7IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgfVxyXG4gICAgaWYgKHJldFlNYXgubGVuZ3RoID4gMikge1xyXG4gICAgICAgIHJldHVybiBcInlNYXggYWNjZXB0cyBub3QgbW9yZSB0aGFuIHR3byB2YWx1ZXMgZm9yIGxlZnQgYW5kIHJpZ2h0IHktYXhlc1wiO1xyXG4gICAgfVxyXG4gICAgcmVuZGVySW5mby55TWF4ID0gcmV0WU1heDtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8ueU1heCk7XHJcblxyXG4gICAgLy8gcmV2ZXJzZVlBeGlzXHJcbiAgICBsZXQgcmV0UmV2ZXJzZVlBeGlzID0gZ2V0Qm9vbEFycmF5RnJvbUlucHV0KFxyXG4gICAgICAgIFwicmV2ZXJzZVlBeGlzXCIsXHJcbiAgICAgICAgeWFtbD8ucmV2ZXJzZVlBeGlzLFxyXG4gICAgICAgIDIsXHJcbiAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgdHJ1ZVxyXG4gICAgKTtcclxuICAgIGlmICh0eXBlb2YgcmV0UmV2ZXJzZVlBeGlzID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldFJldmVyc2VZQXhpczsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICB9XHJcbiAgICBpZiAocmV0UmV2ZXJzZVlBeGlzLmxlbmd0aCA+IDIpIHtcclxuICAgICAgICByZXR1cm4gXCJyZXZlcnNlWUF4aXMgYWNjZXB0cyBub3QgbW9yZSB0aGFuIHR3byB2YWx1ZXMgZm9yIGxlZnQgYW5kIHJpZ2h0IHktYXhlc1wiO1xyXG4gICAgfVxyXG4gICAgcmVuZGVySW5mby5yZXZlcnNlWUF4aXMgPSByZXRSZXZlcnNlWUF4aXM7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLnJldmVyc2VZQXhpcyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEF2YWlsYWJsZUtleXNPZkNsYXNzKG9iajogb2JqZWN0KTogc3RyaW5nW10ge1xyXG4gICAgbGV0IGtleXM6IHN0cmluZ1tdID0gW107XHJcbiAgICBpZiAob2JqICE9PSBudWxsKSB7XHJcbiAgICAgICAgY29uc3Qgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzKG9iaikgYXMgQXJyYXk8a2V5b2Ygc3RyaW5nPjtcclxuICAgICAgICBmb3IgKGxldCBrZXkgb2Ygb2JqZWN0S2V5cykge1xyXG4gICAgICAgICAgICBrZXlzLnB1c2goa2V5LnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBrZXlzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVuZGVySW5mb0Zyb21ZYW1sKFxyXG4gICAgeWFtbFRleHQ6IHN0cmluZyxcclxuICAgIHBsdWdpbjogVHJhY2tlclxyXG4pOiBSZW5kZXJJbmZvIHwgc3RyaW5nIHtcclxuICAgIGxldCB5YW1sO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB5YW1sID0gcGFyc2VZYW1sKHlhbWxUZXh0KTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIkVycm9yIHBhcnNpbmcgWUFNTFwiO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgIH1cclxuICAgIGlmICgheWFtbCkge1xyXG4gICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIkVycm9yIHBhcnNpbmcgWUFNTFwiO1xyXG4gICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyh5YW1sKTtcclxuICAgIGxldCBrZXlzRm91bmRJbllBTUwgPSBnZXRBdmFpbGFibGVLZXlzT2ZDbGFzcyh5YW1sKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGtleXNGb3VuZEluWUFNTCk7XHJcblxyXG4gICAgbGV0IGVycm9yTWVzc2FnZSA9IFwiXCI7XHJcblxyXG4gICAgLy8gU2VhcmNoIHRhcmdldFxyXG4gICAgaWYgKCFrZXlzRm91bmRJbllBTUwuaW5jbHVkZXMoXCJzZWFyY2hUYXJnZXRcIikpIHtcclxuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gXCJQYXJhbWV0ZXIgJ3NlYXJjaFRhcmdldCcgbm90IGZvdW5kIGluIFlBTUxcIjtcclxuICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgfVxyXG4gICAgbGV0IHNlYXJjaFRhcmdldDogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG4gICAgaWYgKHR5cGVvZiB5YW1sLnNlYXJjaFRhcmdldCA9PT0gXCJvYmplY3RcIiAmJiB5YW1sLnNlYXJjaFRhcmdldCAhPT0gbnVsbCkge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHlhbWwuc2VhcmNoVGFyZ2V0KSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCB0YXJnZXQgb2YgeWFtbC5zZWFyY2hUYXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldCAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hUYXJnZXQucHVzaCh0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiRW1wdHkgc2VhcmNoIHRhcmdldCBpcyBub3QgYWxsb3dlZC5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgeWFtbC5zZWFyY2hUYXJnZXQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICBsZXQgc3BsaXR0ZWQgPSB5YW1sLnNlYXJjaFRhcmdldC5zcGxpdChcIixcIik7XHJcbiAgICAgICAgaWYgKHNwbGl0dGVkLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgcGllY2Ugb2Ygc3BsaXR0ZWQpIHtcclxuICAgICAgICAgICAgICAgIHBpZWNlID0gcGllY2UudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZWNlICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoVGFyZ2V0LnB1c2gocGllY2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIkVtcHR5IHNlYXJjaCB0YXJnZXQgaXMgbm90IGFsbG93ZWQuXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHlhbWwuc2VhcmNoVGFyZ2V0ID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiRW1wdHkgc2VhcmNoIHRhcmdldCBpcyBub3QgYWxsb3dlZC5cIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzZWFyY2hUYXJnZXQucHVzaCh5YW1sLnNlYXJjaFRhcmdldCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgc2VhcmNoIHRhcmdldCAoc2VhcmNoVGFyZ2V0KVwiO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coc2VhcmNoVGFyZ2V0KTtcclxuXHJcbiAgICBpZiAoZXJyb3JNZXNzYWdlICE9PSBcIlwiKSB7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbnVtRGF0YXNldHMgPSBzZWFyY2hUYXJnZXQubGVuZ3RoO1xyXG5cclxuICAgIC8vIFNlYXJjaCB0eXBlXHJcbiAgICBpZiAoIWtleXNGb3VuZEluWUFNTC5pbmNsdWRlcyhcInNlYXJjaFR5cGVcIikpIHtcclxuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gXCJQYXJhbWV0ZXIgJ3NlYXJjaFR5cGUnIG5vdCBmb3VuZCBpbiBZQU1MXCI7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgIH1cclxuICAgIGxldCBzZWFyY2hUeXBlOiBBcnJheTxTZWFyY2hUeXBlPiA9IFtdO1xyXG4gICAgbGV0IHJldFNlYXJjaFR5cGUgPSBnZXRTdHJpbmdBcnJheUZyb21JbnB1dChcclxuICAgICAgICBcInNlYXJjaFR5cGVcIixcclxuICAgICAgICB5YW1sLnNlYXJjaFR5cGUsXHJcbiAgICAgICAgbnVtRGF0YXNldHMsXHJcbiAgICAgICAgXCJcIixcclxuICAgICAgICB2YWxpZGF0ZVNlYXJjaFR5cGUsXHJcbiAgICAgICAgZmFsc2VcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldFNlYXJjaFR5cGUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0U2VhcmNoVHlwZTsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBzdHJUeXBlIG9mIHJldFNlYXJjaFR5cGUpIHtcclxuICAgICAgICBzd2l0Y2ggKHN0clR5cGUudG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgICBjYXNlIFwidGFnXCI6XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hUeXBlLnB1c2goU2VhcmNoVHlwZS5UYWcpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJmcm9udG1hdHRlclwiOlxyXG4gICAgICAgICAgICAgICAgc2VhcmNoVHlwZS5wdXNoKFNlYXJjaFR5cGUuRnJvbnRtYXR0ZXIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ3aWtpXCI6XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hUeXBlLnB1c2goU2VhcmNoVHlwZS5XaWtpKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwidGV4dFwiOlxyXG4gICAgICAgICAgICAgICAgc2VhcmNoVHlwZS5wdXNoKFNlYXJjaFR5cGUuVGV4dCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImR2ZmllbGRcIjpcclxuICAgICAgICAgICAgICAgIHNlYXJjaFR5cGUucHVzaChTZWFyY2hUeXBlLmR2RmllbGQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ0YWJsZVwiOlxyXG4gICAgICAgICAgICAgICAgc2VhcmNoVHlwZS5wdXNoKFNlYXJjaFR5cGUuVGFibGUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJmaWxlbWV0YVwiOlxyXG4gICAgICAgICAgICAgICAgc2VhcmNoVHlwZS5wdXNoKFNlYXJjaFR5cGUuRmlsZU1ldGEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ0YXNrXCI6XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hUeXBlLnB1c2goU2VhcmNoVHlwZS5UYXNrKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwidGFzay5hbGxcIjpcclxuICAgICAgICAgICAgICAgIHNlYXJjaFR5cGUucHVzaChTZWFyY2hUeXBlLlRhc2spO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ0YXNrLmRvbmVcIjpcclxuICAgICAgICAgICAgICAgIHNlYXJjaFR5cGUucHVzaChTZWFyY2hUeXBlLlRhc2tEb25lKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwidGFzay5ub3Rkb25lXCI6XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hUeXBlLnB1c2goU2VhcmNoVHlwZS5UYXNrTm90RG9uZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBDdXJyZW50bHksIHdlIGRvbid0IGFsbG93IHR5cGUgJ3RhYmxlJyB1c2VkIHdpdGggb3RoZXIgdHlwZXNcclxuICAgIGlmIChcclxuICAgICAgICBzZWFyY2hUeXBlLmluY2x1ZGVzKFNlYXJjaFR5cGUuVGFibGUpICYmXHJcbiAgICAgICAgc2VhcmNoVHlwZS5maWx0ZXIoKHQpID0+IHQgIT09IFNlYXJjaFR5cGUuVGFibGUpLmxlbmd0aCA+IDBcclxuICAgICkge1xyXG4gICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPVxyXG4gICAgICAgICAgICBcInNlYXJjaFR5cGUgJ3RhYmxlJyBkb2VzdG4ndCB3b3JrIHdpdGggb3RoZXIgdHlwZXMgZm9yIG5vd1wiO1xyXG4gICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhzZWFyY2hUeXBlKTtcclxuXHJcbiAgICAvLyBzZXBhcmF0b3JcclxuICAgIGxldCBtdWx0aXBsZVZhbHVlU3BhcmF0b3I6IEFycmF5PHN0cmluZz4gPSBbXTtcclxuICAgIGxldCByZXRNdWx0aXBsZVZhbHVlU3BhcmF0b3IgPSBnZXRTdHJpbmdBcnJheUZyb21JbnB1dChcclxuICAgICAgICBcInNlcGFyYXRvclwiLFxyXG4gICAgICAgIHlhbWwuc2VwYXJhdG9yLFxyXG4gICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgIFwiL1wiLFxyXG4gICAgICAgIG51bGwsXHJcbiAgICAgICAgdHJ1ZVxyXG4gICAgKTtcclxuICAgIGlmICh0eXBlb2YgcmV0TXVsdGlwbGVWYWx1ZVNwYXJhdG9yID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldE11bHRpcGxlVmFsdWVTcGFyYXRvcjsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICB9XHJcbiAgICBtdWx0aXBsZVZhbHVlU3BhcmF0b3IgPSByZXRNdWx0aXBsZVZhbHVlU3BhcmF0b3IubWFwKChzZXApID0+IHtcclxuICAgICAgICBpZiAoc2VwID09PSBcImNvbW1hXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiLFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2VwO1xyXG4gICAgfSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhtdWx0aXBsZVZhbHVlU3BhcmF0b3IpO1xyXG5cclxuICAgIC8vIHhEYXRhc2V0XHJcbiAgICBsZXQgcmV0WERhdGFzZXQgPSBnZXROdW1iZXJBcnJheUZyb21JbnB1dChcclxuICAgICAgICBcInhEYXRhc2V0XCIsXHJcbiAgICAgICAgeWFtbC54RGF0YXNldCxcclxuICAgICAgICBudW1EYXRhc2V0cyxcclxuICAgICAgICAtMSxcclxuICAgICAgICB0cnVlXHJcbiAgICApO1xyXG4gICAgaWYgKHR5cGVvZiByZXRYRGF0YXNldCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRYRGF0YXNldDsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICB9XHJcbiAgICBsZXQgeERhdGFzZXQgPSByZXRYRGF0YXNldC5tYXAoKGQ6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIGlmIChkIDwgMCB8fCBkID49IG51bURhdGFzZXRzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICB9KTtcclxuICAgIC8vIGFzc2lnbiB0aGlzIHRvIHJlbmRlckluZm8gbGF0ZXJcclxuXHJcbiAgICAvLyBDcmVhdGUgcXVlcmllc1xyXG4gICAgbGV0IHF1ZXJpZXM6IEFycmF5PFF1ZXJ5PiA9IFtdO1xyXG4gICAgZm9yIChsZXQgaW5kID0gMDsgaW5kIDwgc2VhcmNoVGFyZ2V0Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICBsZXQgcXVlcnkgPSBuZXcgUXVlcnkoXHJcbiAgICAgICAgICAgIHF1ZXJpZXMubGVuZ3RoLFxyXG4gICAgICAgICAgICBzZWFyY2hUeXBlW2luZF0sXHJcbiAgICAgICAgICAgIHNlYXJjaFRhcmdldFtpbmRdXHJcbiAgICAgICAgKTtcclxuICAgICAgICBxdWVyeS5zZXRTZXBhcmF0b3IobXVsdGlwbGVWYWx1ZVNwYXJhdG9yW2luZF0pO1xyXG4gICAgICAgIGlmICh4RGF0YXNldC5pbmNsdWRlcyhpbmQpKSBxdWVyeS51c2VkQXNYRGF0YXNldCA9IHRydWU7XHJcbiAgICAgICAgcXVlcmllcy5wdXNoKHF1ZXJ5KTtcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKHF1ZXJpZXMpO1xyXG5cclxuICAgIC8vIENyZWF0ZSBncmFycGggaW5mb1xyXG4gICAgbGV0IHJlbmRlckluZm8gPSBuZXcgUmVuZGVySW5mbyhxdWVyaWVzKTtcclxuICAgIGxldCBrZXlzT2ZSZW5kZXJJbmZvID0gZ2V0QXZhaWxhYmxlS2V5c09mQ2xhc3MocmVuZGVySW5mbyk7XHJcbiAgICBsZXQgYWRkaXRpb25hbEFsbG93ZWRLZXlzID0gW1wic2VhcmNoVHlwZVwiLCBcInNlYXJjaFRhcmdldFwiLCBcInNlcGFyYXRvclwiXTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGtleXNPZlJlbmRlckluZm8pO1xyXG4gICAgbGV0IHlhbWxMaW5lS2V5cyA9IFtdO1xyXG4gICAgbGV0IHlhbWxCYXJLZXlzID0gW107XHJcbiAgICBsZXQgeWFtbFBpZUtleXMgPSBbXTtcclxuICAgIGxldCB5YW1sU3VtbWFyeUtleXMgPSBbXTtcclxuICAgIGxldCB5YW1sTW9udGhLZXlzID0gW107XHJcbiAgICBsZXQgeWFtbEhlYXRtYXBLZXlzID0gW107XHJcbiAgICBsZXQgeWFtbEJ1bGxldEtleXMgPSBbXTtcclxuICAgIGZvciAobGV0IGtleSBvZiBrZXlzRm91bmRJbllBTUwpIHtcclxuICAgICAgICBpZiAoL15saW5lWzAtOV0qJC8udGVzdChrZXkpKSB7XHJcbiAgICAgICAgICAgIHlhbWxMaW5lS2V5cy5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgIGFkZGl0aW9uYWxBbGxvd2VkS2V5cy5wdXNoKGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgvXmJhclswLTldKiQvLnRlc3Qoa2V5KSkge1xyXG4gICAgICAgICAgICB5YW1sQmFyS2V5cy5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgIGFkZGl0aW9uYWxBbGxvd2VkS2V5cy5wdXNoKGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgvXnBpZVswLTldKiQvLnRlc3Qoa2V5KSkge1xyXG4gICAgICAgICAgICB5YW1sUGllS2V5cy5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgIGFkZGl0aW9uYWxBbGxvd2VkS2V5cy5wdXNoKGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgvXnN1bW1hcnlbMC05XSokLy50ZXN0KGtleSkpIHtcclxuICAgICAgICAgICAgeWFtbFN1bW1hcnlLZXlzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgYWRkaXRpb25hbEFsbG93ZWRLZXlzLnB1c2goa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKC9eYnVsbGV0WzAtOV0qJC8udGVzdChrZXkpKSB7XHJcbiAgICAgICAgICAgIHlhbWxCdWxsZXRLZXlzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgYWRkaXRpb25hbEFsbG93ZWRLZXlzLnB1c2goa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKC9ebW9udGhbMC05XSokLy50ZXN0KGtleSkpIHtcclxuICAgICAgICAgICAgeWFtbE1vbnRoS2V5cy5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgIGFkZGl0aW9uYWxBbGxvd2VkS2V5cy5wdXNoKGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgvXmhlYXRtYXBbMC05XSokLy50ZXN0KGtleSkpIHtcclxuICAgICAgICAgICAgeWFtbEhlYXRtYXBLZXlzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgYWRkaXRpb25hbEFsbG93ZWRLZXlzLnB1c2goa2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBDdXN0b20gZGF0YXNldFxyXG4gICAgbGV0IHlhbWxDdXN0b21EYXRhc2V0S2V5cyA9IFtdO1xyXG4gICAgZm9yIChsZXQga2V5IG9mIGtleXNGb3VuZEluWUFNTCkge1xyXG4gICAgICAgIGlmICgvXmRhdGFzZXRbMC05XSokLy50ZXN0KGtleSkpIHtcclxuICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIGlkIG9mIGN1c3RvbSBkYXRhc2V0IGlzIG5vdCBkdXBsaWNhdGVkXHJcbiAgICAgICAgICAgIGxldCBjdXN0b21EYXRhc2V0SWQgPSAtMTtcclxuICAgICAgICAgICAgbGV0IHN0ckN1c3RvbURhdGFzZXRJZCA9IGtleS5yZXBsYWNlKFwiZGF0YXNldFwiLCBcIlwiKTtcclxuICAgICAgICAgICAgaWYgKHN0ckN1c3RvbURhdGFzZXRJZCA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgY3VzdG9tRGF0YXNldElkID0gMDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGN1c3RvbURhdGFzZXRJZCA9IHBhcnNlRmxvYXQoc3RyQ3VzdG9tRGF0YXNldElkKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgcXVlcmllcy5zb21lKChxKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHEuZ2V0SWQoKSA9PT0gY3VzdG9tRGF0YXNldElkO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIkR1cGxpY2F0ZWQgZGF0YXNldCBpZCBmb3Iga2V5ICdcIiArIGtleSArIFwiJ1wiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgeWFtbEN1c3RvbURhdGFzZXRLZXlzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgYWRkaXRpb25hbEFsbG93ZWRLZXlzLnB1c2goa2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhhZGRpdGlvbmFsQWxsb3dlZEtleXMpO1xyXG4gICAgZm9yIChsZXQga2V5IG9mIGtleXNGb3VuZEluWUFNTCkge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgIWtleXNPZlJlbmRlckluZm8uaW5jbHVkZXMoa2V5KSAmJlxyXG4gICAgICAgICAgICAhYWRkaXRpb25hbEFsbG93ZWRLZXlzLmluY2x1ZGVzKGtleSlcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCInXCIgKyBrZXkgKyBcIicgaXMgbm90IGFuIGF2YWlsYWJsZSBrZXlcIjtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHRvdGFsTnVtT3V0cHV0cyA9XHJcbiAgICAgICAgeWFtbExpbmVLZXlzLmxlbmd0aCArXHJcbiAgICAgICAgeWFtbEJhcktleXMubGVuZ3RoICtcclxuICAgICAgICB5YW1sUGllS2V5cy5sZW5ndGggK1xyXG4gICAgICAgIHlhbWxTdW1tYXJ5S2V5cy5sZW5ndGggK1xyXG4gICAgICAgIHlhbWxCdWxsZXRLZXlzLmxlbmd0aCArXHJcbiAgICAgICAgeWFtbE1vbnRoS2V5cy5sZW5ndGggK1xyXG4gICAgICAgIHlhbWxIZWF0bWFwS2V5cy5sZW5ndGg7XHJcbiAgICBpZiAodG90YWxOdW1PdXRwdXRzID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiTm8gb3V0cHV0IHBhcmFtZXRlciBwcm92aWRlZCwgcGxlYXNlIHBsYWNlIGxpbmUsIGJhciwgcGllLCBtb250aCwgYnVsbGV0LCBvciBzdW1tYXJ5LlwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJvb3QgZm9sZGVyIHRvIHNlYXJjaFxyXG4gICAgaWYgKHR5cGVvZiB5YW1sLmZvbGRlciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIGlmICh5YW1sLmZvbGRlciA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmZvbGRlciA9IHBsdWdpbi5zZXR0aW5ncy5mb2xkZXI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5mb2xkZXIgPSB5YW1sLmZvbGRlcjtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlbmRlckluZm8uZm9sZGVyID0gcGx1Z2luLnNldHRpbmdzLmZvbGRlcjtcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVySW5mbyBmb2xkZXI6IFwiICsgcmVuZGVySW5mby5mb2xkZXIpO1xyXG5cclxuICAgIGxldCBhYnN0cmFjdEZvbGRlciA9IHBsdWdpbi5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKFxyXG4gICAgICAgIG5vcm1hbGl6ZVBhdGgocmVuZGVySW5mby5mb2xkZXIpXHJcbiAgICApO1xyXG4gICAgaWYgKCFhYnN0cmFjdEZvbGRlciB8fCAhKGFic3RyYWN0Rm9sZGVyIGluc3RhbmNlb2YgVEZvbGRlcikpIHtcclxuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gXCJGb2xkZXIgJ1wiICsgcmVuZGVySW5mby5mb2xkZXIgKyBcIicgZG9lc24ndCBleGlzdFwiO1xyXG4gICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGF0ZSBmb3JtYXRcclxuICAgIGNvbnN0IGRhdGVGb3JtYXQgPSB5YW1sLmRhdGVGb3JtYXQ7XHJcbiAgICAvLz8/IG5vdCBzdXJlIHdoeSBJIG5lZWQgdGhpcyB0byBtYWtlIGl0IHdvcmtzLFxyXG4gICAgLy8gd2l0aG91dCB0aGF0LCB0aGUgYXNzaWduZWQgdGhlIHJlbmRlckluZm8uZGF0ZUZvcm1hdCB3aWxsIGJlY29tZSB1bmRlZmluZWRcclxuICAgIGlmICh0eXBlb2YgeWFtbC5kYXRlRm9ybWF0ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgaWYgKHlhbWwuZGF0ZUZvcm1hdCA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGVGb3JtYXQgPSBwbHVnaW4uc2V0dGluZ3MuZGF0ZUZvcm1hdDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGVGb3JtYXQgPSBkYXRlRm9ybWF0O1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVuZGVySW5mby5kYXRlRm9ybWF0ID0gcGx1Z2luLnNldHRpbmdzLmRhdGVGb3JtYXQ7XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInJlbmRlckluZm8gZGF0ZUZvcm1hdDogXCIgKyByZW5kZXJJbmZvLmRhdGVGb3JtYXQpO1xyXG5cclxuICAgIC8vIERhdGUgZm9ybWF0IHByZWZpeFxyXG4gICAgaWYgKHR5cGVvZiB5YW1sLmRhdGVGb3JtYXRQcmVmaXggPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZW5kZXJJbmZvLmRhdGVGb3JtYXRQcmVmaXggPSB5YW1sLmRhdGVGb3JtYXRQcmVmaXg7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGF0ZSBmcm9tYXQgc3VmZml4XHJcbiAgICBpZiAodHlwZW9mIHlhbWwuZGF0ZUZvcm1hdFN1ZmZpeCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJlbmRlckluZm8uZGF0ZUZvcm1hdFN1ZmZpeCA9IHlhbWwuZGF0ZUZvcm1hdFN1ZmZpeDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBzdGFydERhdGUsIGVuZERhdGVcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiUGFyc2luZyBzdGFydERhdGVcIik7XHJcbiAgICBpZiAodHlwZW9mIHlhbWwuc3RhcnREYXRlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgbGV0IHN0clN0YXJ0RGF0ZSA9IHlhbWwuc3RhcnREYXRlO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRlRm9ybWF0UHJlZml4ICYmXHJcbiAgICAgICAgICAgIHN0clN0YXJ0RGF0ZS5zdGFydHNXaXRoKHJlbmRlckluZm8uZGF0ZUZvcm1hdFByZWZpeClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgc3RyU3RhcnREYXRlID0gc3RyU3RhcnREYXRlLnNsaWNlKFxyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5kYXRlRm9ybWF0UHJlZml4Lmxlbmd0aFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0ZUZvcm1hdFN1ZmZpeCAmJlxyXG4gICAgICAgICAgICBzdHJTdGFydERhdGUuZW5kc1dpdGgocmVuZGVySW5mby5kYXRlRm9ybWF0U3VmZml4KVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBzdHJTdGFydERhdGUgPSBzdHJTdGFydERhdGUuc2xpY2UoXHJcbiAgICAgICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAgICAgc3RyU3RhcnREYXRlLmxlbmd0aCAtIHJlbmRlckluZm8uZGF0ZUZvcm1hdFN1ZmZpeC5sZW5ndGhcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBzdGFydERhdGUgPSBudWxsO1xyXG4gICAgICAgIGxldCBpc1N0YXJ0RGF0ZVZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgc3RhcnREYXRlID0gaGVscGVyLnJlbERhdGVTdHJpbmdUb0RhdGUoXHJcbiAgICAgICAgICAgIHN0clN0YXJ0RGF0ZSxcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRlRm9ybWF0XHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoc3RhcnREYXRlKSB7XHJcbiAgICAgICAgICAgIGlzU3RhcnREYXRlVmFsaWQgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN0YXJ0RGF0ZSA9IGhlbHBlci5zdHJUb0RhdGUoc3RyU3RhcnREYXRlLCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpO1xyXG4gICAgICAgICAgICBpZiAoc3RhcnREYXRlLmlzVmFsaWQoKSkge1xyXG4gICAgICAgICAgICAgICAgaXNTdGFydERhdGVWYWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghaXNTdGFydERhdGVWYWxpZCB8fCBzdGFydERhdGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9XHJcbiAgICAgICAgICAgICAgICBcIkludmFsaWQgc3RhcnREYXRlLCB0aGUgZm9ybWF0IG9mIHN0YXJ0RGF0ZSBtYXkgbm90IG1hdGNoIHlvdXIgZGF0ZUZvcm1hdCBcIiArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmRhdGVGb3JtYXQ7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlbmRlckluZm8uc3RhcnREYXRlID0gc3RhcnREYXRlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKFwiUGFyc2luZyBlbmREYXRlXCIpO1xyXG4gICAgaWYgKHR5cGVvZiB5YW1sLmVuZERhdGUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICBsZXQgc3RyRW5kRGF0ZSA9IHlhbWwuZW5kRGF0ZTtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0ZUZvcm1hdFByZWZpeCAmJlxyXG4gICAgICAgICAgICBzdHJFbmREYXRlLnN0YXJ0c1dpdGgocmVuZGVySW5mby5kYXRlRm9ybWF0UHJlZml4KVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBzdHJFbmREYXRlID0gc3RyRW5kRGF0ZS5zbGljZShyZW5kZXJJbmZvLmRhdGVGb3JtYXRQcmVmaXgubGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGVGb3JtYXRTdWZmaXggJiZcclxuICAgICAgICAgICAgc3RyRW5kRGF0ZS5lbmRzV2l0aChyZW5kZXJJbmZvLmRhdGVGb3JtYXRTdWZmaXgpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHN0ckVuZERhdGUgPSBzdHJFbmREYXRlLnNsaWNlKFxyXG4gICAgICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgICAgIHN0ckVuZERhdGUubGVuZ3RoIC0gcmVuZGVySW5mby5kYXRlRm9ybWF0U3VmZml4Lmxlbmd0aFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGVuZERhdGUgPSBudWxsO1xyXG4gICAgICAgIGxldCBpc0VuZERhdGVWYWxpZCA9IGZhbHNlO1xyXG4gICAgICAgIGVuZERhdGUgPSBoZWxwZXIucmVsRGF0ZVN0cmluZ1RvRGF0ZShzdHJFbmREYXRlLCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpO1xyXG4gICAgICAgIGlmIChlbmREYXRlKSB7XHJcbiAgICAgICAgICAgIGlzRW5kRGF0ZVZhbGlkID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBlbmREYXRlID0gaGVscGVyLnN0clRvRGF0ZShzdHJFbmREYXRlLCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpO1xyXG4gICAgICAgICAgICBpZiAoZW5kRGF0ZS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICAgICAgICAgIGlzRW5kRGF0ZVZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhlbmREYXRlKTtcclxuXHJcbiAgICAgICAgaWYgKCFpc0VuZERhdGVWYWxpZCB8fCBlbmREYXRlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPVxyXG4gICAgICAgICAgICAgICAgXCJJbnZhbGlkIGVuZERhdGUsIHRoZSBmb3JtYXQgb2YgZW5kRGF0ZSBtYXkgbm90IG1hdGNoIHlvdXIgZGF0ZUZvcm1hdCBcIiArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmRhdGVGb3JtYXQ7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlbmRlckluZm8uZW5kRGF0ZSA9IGVuZERhdGU7XHJcbiAgICB9XHJcbiAgICBpZiAoXHJcbiAgICAgICAgcmVuZGVySW5mby5zdGFydERhdGUgIT09IG51bGwgJiZcclxuICAgICAgICByZW5kZXJJbmZvLnN0YXJ0RGF0ZS5pc1ZhbGlkKCkgJiZcclxuICAgICAgICByZW5kZXJJbmZvLmVuZERhdGUgIT09IG51bGwgJiZcclxuICAgICAgICByZW5kZXJJbmZvLmVuZERhdGUuaXNWYWxpZCgpXHJcbiAgICApIHtcclxuICAgICAgICAvLyBNYWtlIHN1cmUgZW5kRGF0ZSA+IHN0YXJ0RGF0ZVxyXG4gICAgICAgIGlmIChyZW5kZXJJbmZvLmVuZERhdGUgPCByZW5kZXJJbmZvLnN0YXJ0RGF0ZSkge1xyXG4gICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID1cclxuICAgICAgICAgICAgICAgIFwiSW52YWxpZCBkYXRlIHJhbmdlIChzdGFydERhdGUgbGFyZ2VyIHRoYW4gZW5kRGF0ZSlcIjtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLnN0YXJ0RGF0ZSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLmVuZERhdGUpO1xyXG5cclxuICAgIC8vIHhEYXRhc2V0XHJcbiAgICByZW5kZXJJbmZvLnhEYXRhc2V0ID0geERhdGFzZXQ7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLnhEYXRhc2V0KTtcclxuXHJcbiAgICAvLyBEYXRhc2V0IG5hbWUgKG5lZWQgeERhdGFzZXQgdG8gc2V0IGRlZmF1bHQgbmFtZSlcclxuICAgIGxldCByZXREYXRhc2V0TmFtZSA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgIFwiZGF0YXNldE5hbWVcIixcclxuICAgICAgICB5YW1sLmRhdGFzZXROYW1lLFxyXG4gICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgIFwidW50aXRsZWRcIixcclxuICAgICAgICBudWxsLFxyXG4gICAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldERhdGFzZXROYW1lID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldERhdGFzZXROYW1lOyAvLyBlcnJvck1lc3NhZ2VcclxuICAgIH1cclxuICAgIC8vIHJlbmFtZSB1bnRpdGxlZFxyXG4gICAgbGV0IGluZFVudGl0bGVkID0gMDtcclxuICAgIGZvciAobGV0IGluZCA9IDA7IGluZCA8IHJldERhdGFzZXROYW1lLmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICBpZiAocmVuZGVySW5mby54RGF0YXNldC5pbmNsdWRlcyhpbmQpKSBjb250aW51ZTtcclxuICAgICAgICBpZiAocmV0RGF0YXNldE5hbWVbaW5kXSA9PT0gXCJ1bnRpdGxlZFwiKSB7XHJcbiAgICAgICAgICAgIHJldERhdGFzZXROYW1lW2luZF0gPSBcInVudGl0bGVkXCIgKyBpbmRVbnRpdGxlZC50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBpbmRVbnRpdGxlZCsrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIENoZWNrIGR1cGxpY2F0ZWQgbmFtZXNcclxuICAgIGlmIChuZXcgU2V0KHJldERhdGFzZXROYW1lKS5zaXplID09PSByZXREYXRhc2V0TmFtZS5sZW5ndGgpIHtcclxuICAgICAgICByZW5kZXJJbmZvLmRhdGFzZXROYW1lID0gcmV0RGF0YXNldE5hbWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIk5vdCBlbm91Z2ggZGF0YXNldCBuYW1lcyBvciBkdXBsaWNhdGVkIG5hbWVzXCI7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uZGF0YXNldE5hbWUpO1xyXG5cclxuICAgIC8vIGNvbnN0VmFsdWVcclxuICAgIGxldCByZXRDb25zdFZhbHVlID0gZ2V0TnVtYmVyQXJyYXlGcm9tSW5wdXQoXHJcbiAgICAgICAgXCJjb25zdFZhbHVlXCIsXHJcbiAgICAgICAgeWFtbC5jb25zdFZhbHVlLFxyXG4gICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgIDEuMCxcclxuICAgICAgICB0cnVlXHJcbiAgICApO1xyXG4gICAgaWYgKHR5cGVvZiByZXRDb25zdFZhbHVlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldENvbnN0VmFsdWU7IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgfVxyXG4gICAgcmVuZGVySW5mby5jb25zdFZhbHVlID0gcmV0Q29uc3RWYWx1ZTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uY29uc3RWYWx1ZSk7XHJcblxyXG4gICAgLy8gaWdub3JlQXR0YWNoZWRWYWx1ZVxyXG4gICAgbGV0IHJldElnbm9yZUF0dGFjaGVkVmFsdWUgPSBnZXRCb29sQXJyYXlGcm9tSW5wdXQoXHJcbiAgICAgICAgXCJpZ25vcmVBdHRhY2hlZFZhbHVlXCIsXHJcbiAgICAgICAgeWFtbC5pZ25vcmVBdHRhY2hlZFZhbHVlLFxyXG4gICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgIGZhbHNlLFxyXG4gICAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldElnbm9yZUF0dGFjaGVkVmFsdWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0SWdub3JlQXR0YWNoZWRWYWx1ZTtcclxuICAgIH1cclxuICAgIHJlbmRlckluZm8uaWdub3JlQXR0YWNoZWRWYWx1ZSA9IHJldElnbm9yZUF0dGFjaGVkVmFsdWU7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLmlnbm9yZUF0dGFjaGVkVmFsdWUpO1xyXG5cclxuICAgIC8vIGlnbm9yZVplcm9WYWx1ZVxyXG4gICAgbGV0IHJldElnbm9yZVplcm9WYWx1ZSA9IGdldEJvb2xBcnJheUZyb21JbnB1dChcclxuICAgICAgICBcImlnbm9yZVplcm9WYWx1ZVwiLFxyXG4gICAgICAgIHlhbWwuaWdub3JlWmVyb1ZhbHVlLFxyXG4gICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgIGZhbHNlLFxyXG4gICAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldElnbm9yZVplcm9WYWx1ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRJZ25vcmVaZXJvVmFsdWU7XHJcbiAgICB9XHJcbiAgICByZW5kZXJJbmZvLmlnbm9yZVplcm9WYWx1ZSA9IHJldElnbm9yZVplcm9WYWx1ZTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uaWdub3JlQXR0YWNoZWRWYWx1ZSk7XHJcblxyXG4gICAgLy8gYWNjdW1cclxuICAgIGxldCByZXRBY2N1bSA9IGdldEJvb2xBcnJheUZyb21JbnB1dChcclxuICAgICAgICBcImFjY3VtXCIsXHJcbiAgICAgICAgeWFtbC5hY2N1bSxcclxuICAgICAgICBudW1EYXRhc2V0cyxcclxuICAgICAgICBmYWxzZSxcclxuICAgICAgICB0cnVlXHJcbiAgICApO1xyXG4gICAgaWYgKHR5cGVvZiByZXRBY2N1bSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRBY2N1bTtcclxuICAgIH1cclxuICAgIHJlbmRlckluZm8uYWNjdW0gPSByZXRBY2N1bTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uYWNjdW0pO1xyXG5cclxuICAgIC8vIHBlbmFsdHlcclxuICAgIGxldCByZXRQZW5hbHR5ID0gZ2V0TnVtYmVyQXJyYXlGcm9tSW5wdXQoXHJcbiAgICAgICAgXCJwZW5hbHR5XCIsXHJcbiAgICAgICAgeWFtbC5wZW5hbHR5LFxyXG4gICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgIG51bGwsXHJcbiAgICAgICAgdHJ1ZVxyXG4gICAgKTtcclxuICAgIGlmICh0eXBlb2YgcmV0UGVuYWx0eSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRQZW5hbHR5O1xyXG4gICAgfVxyXG4gICAgcmVuZGVySW5mby5wZW5hbHR5ID0gcmV0UGVuYWx0eTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8ucGVuYWx0eSk7XHJcblxyXG4gICAgLy8gdmFsdWVTaGlmdFxyXG4gICAgbGV0IHJldFZhbHVlU2hpZnQgPSBnZXROdW1iZXJBcnJheUZyb21JbnB1dChcclxuICAgICAgICBcInZhbHVlU2hpZnRcIixcclxuICAgICAgICB5YW1sLnZhbHVlU2hpZnQsXHJcbiAgICAgICAgbnVtRGF0YXNldHMsXHJcbiAgICAgICAgMCxcclxuICAgICAgICB0cnVlXHJcbiAgICApO1xyXG4gICAgaWYgKHR5cGVvZiByZXRWYWx1ZVNoaWZ0ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldFZhbHVlU2hpZnQ7XHJcbiAgICB9XHJcbiAgICByZW5kZXJJbmZvLnZhbHVlU2hpZnQgPSByZXRWYWx1ZVNoaWZ0O1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby52YWx1ZVNoaWZ0KTtcclxuXHJcbiAgICAvLyBmaXhlZFNjYWxlXHJcbiAgICBpZiAodHlwZW9mIHlhbWwuZml4ZWRTY2FsZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgIHJlbmRlckluZm8uZml4ZWRTY2FsZSA9IHlhbWwuZml4ZWRTY2FsZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBmaXRQYW5lbFdpZHRoXHJcbiAgICBpZiAodHlwZW9mIHlhbWwuZml0UGFuZWxXaWR0aCA9PT0gXCJib29sZWFuXCIpIHtcclxuICAgICAgICByZW5kZXJJbmZvLmZpdFBhbmVsV2lkdGggPSB5YW1sLmZpdFBhbmVsV2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbWFyZ2luXHJcbiAgICBsZXQgcmV0TWFyZ2luID0gZ2V0TnVtYmVyQXJyYXlGcm9tSW5wdXQoXCJtYXJnaW5cIiwgeWFtbC5tYXJnaW4sIDQsIDEwLCB0cnVlKTtcclxuICAgIGlmICh0eXBlb2YgcmV0TWFyZ2luID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldE1hcmdpbjsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICB9XHJcbiAgICBpZiAocmV0TWFyZ2luLmxlbmd0aCA+IDQpIHtcclxuICAgICAgICByZXR1cm4gXCJtYXJnaW4gYWNjZXB0cyBub3QgbW9yZSB0aGFuIGZvdXIgdmFsdWVzIGZvciB0b3AsIHJpZ2h0LCBib3R0b20sIGFuZCBsZWZ0IG1hcmdpbnMuXCI7XHJcbiAgICB9XHJcbiAgICByZW5kZXJJbmZvLm1hcmdpbiA9IG5ldyBNYXJnaW4oXHJcbiAgICAgICAgcmV0TWFyZ2luWzBdLFxyXG4gICAgICAgIHJldE1hcmdpblsxXSxcclxuICAgICAgICByZXRNYXJnaW5bMl0sXHJcbiAgICAgICAgcmV0TWFyZ2luWzNdXHJcbiAgICApO1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby5tYXJnaW4pO1xyXG5cclxuICAgIC8vIGN1c3RvbURhdGFzZXQgcmVsYXRlZCBwYXJhbWV0ZXJzXHJcbiAgICBmb3IgKGxldCBkYXRhc2V0S2V5IG9mIHlhbWxDdXN0b21EYXRhc2V0S2V5cykge1xyXG4gICAgICAgIGxldCBjdXN0b21EYXRhc2V0ID0gbmV3IEN1c3RvbURhdGFzZXRJbmZvKCk7XHJcbiAgICAgICAgbGV0IHlhbWxDdXN0b21EYXRhc2V0ID0geWFtbFtkYXRhc2V0S2V5XTtcclxuXHJcbiAgICAgICAgbGV0IGtleXNPZkN1c3RvbURhdGFzZXRJbmZvID0gZ2V0QXZhaWxhYmxlS2V5c09mQ2xhc3MoY3VzdG9tRGF0YXNldCk7XHJcbiAgICAgICAgbGV0IGtleXNGb3VuZEluWUFNTCA9IGdldEF2YWlsYWJsZUtleXNPZkNsYXNzKHlhbWxDdXN0b21EYXRhc2V0KTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhrZXlzT2ZDdXN0b21EYXRhc2V0SW5mbyk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coa2V5c0ZvdW5kSW5ZQU1MKTtcclxuICAgICAgICBmb3IgKGxldCBrZXkgb2Yga2V5c0ZvdW5kSW5ZQU1MKSB7XHJcbiAgICAgICAgICAgIGlmICgha2V5c09mQ3VzdG9tRGF0YXNldEluZm8uaW5jbHVkZXMoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCInXCIgKyBrZXkgKyBcIicgaXMgbm90IGFuIGF2YWlsYWJsZSBrZXlcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGlkXHJcbiAgICAgICAgbGV0IGN1c3RvbURhdGFzZXRJZCA9IC0xO1xyXG4gICAgICAgIGxldCBzdHJDdXN0b21EYXRhc2V0SWQgPSBkYXRhc2V0S2V5LnJlcGxhY2UoXCJkYXRhc2V0XCIsIFwiXCIpO1xyXG4gICAgICAgIGlmIChzdHJDdXN0b21EYXRhc2V0SWQgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgY3VzdG9tRGF0YXNldElkID0gMDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjdXN0b21EYXRhc2V0SWQgPSBwYXJzZUZsb2F0KHN0ckN1c3RvbURhdGFzZXRJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGN1c3RvbURhdGFzZXQuaWQgPSBjdXN0b21EYXRhc2V0SWQ7XHJcblxyXG4gICAgICAgIC8vIG5hbWVcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxDdXN0b21EYXRhc2V0Py5uYW1lID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGN1c3RvbURhdGFzZXQubmFtZSA9IHlhbWxDdXN0b21EYXRhc2V0Lm5hbWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB4RGF0YVxyXG4gICAgICAgIGxldCByZXRYRGF0YSA9IGdldFN0cmluZ0FycmF5KFwieERhdGFcIiwgeWFtbEN1c3RvbURhdGFzZXQ/LnhEYXRhKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldFhEYXRhID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRYRGF0YTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY3VzdG9tRGF0YXNldC54RGF0YSA9IHJldFhEYXRhO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGN1c3RvbURhdGFzZXQueERhdGEpO1xyXG4gICAgICAgIGxldCBudW1YRGF0YSA9IGN1c3RvbURhdGFzZXQueERhdGEubGVuZ3RoO1xyXG5cclxuICAgICAgICAvLyB5RGF0YVxyXG4gICAgICAgIGxldCByZXRZRGF0YSA9IGdldFN0cmluZ0FycmF5KFwieURhdGFcIiwgeWFtbEN1c3RvbURhdGFzZXQ/LnlEYXRhKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldFlEYXRhID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRZRGF0YTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY3VzdG9tRGF0YXNldC55RGF0YSA9IHJldFlEYXRhO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGN1c3RvbURhdGFzZXQueURhdGEpO1xyXG4gICAgICAgIGlmIChjdXN0b21EYXRhc2V0LnlEYXRhLmxlbmd0aCAhPT0gbnVtWERhdGEpIHtcclxuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9XHJcbiAgICAgICAgICAgICAgICBcIk51bWJlciBvZiBlbGVtZW50cyBpbiB4RGF0YSBhbmQgeURhdGEgbm90IG1hdGNoZWRcIjtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlbmRlckluZm8uY3VzdG9tRGF0YXNldC5wdXNoKGN1c3RvbURhdGFzZXQpO1xyXG4gICAgfSAvLyBjdXN0b21EYXRhc2V0IHJlbGF0ZWQgcGFyYW1ldGVyc1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby5jdXN0b21EYXRhc2V0KTtcclxuXHJcbiAgICAvLyBsaW5lIHJlbGF0ZWQgcGFyYW1ldGVyc1xyXG4gICAgZm9yIChsZXQgbGluZUtleSBvZiB5YW1sTGluZUtleXMpIHtcclxuICAgICAgICBsZXQgbGluZSA9IG5ldyBMaW5lSW5mbygpO1xyXG4gICAgICAgIGxldCB5YW1sTGluZSA9IHlhbWxbbGluZUtleV07XHJcblxyXG4gICAgICAgIGxldCBrZXlzT2ZMaW5lSW5mbyA9IGdldEF2YWlsYWJsZUtleXNPZkNsYXNzKGxpbmUpO1xyXG4gICAgICAgIGxldCBrZXlzRm91bmRJbllBTUwgPSBnZXRBdmFpbGFibGVLZXlzT2ZDbGFzcyh5YW1sTGluZSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coa2V5c09mTGluZUluZm8pO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGtleXNGb3VuZEluWUFNTCk7XHJcbiAgICAgICAgZm9yIChsZXQga2V5IG9mIGtleXNGb3VuZEluWUFNTCkge1xyXG4gICAgICAgICAgICBpZiAoIWtleXNPZkxpbmVJbmZvLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiJ1wiICsga2V5ICsgXCInIGlzIG5vdCBhbiBhdmFpbGFibGUga2V5XCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgcmV0UGFyc2VDb21tb25DaGFydEluZm8gPSBwYXJzZUNvbW1vbkNoYXJ0SW5mbyh5YW1sTGluZSwgbGluZSk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXRQYXJzZUNvbW1vbkNoYXJ0SW5mbyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0UGFyc2VDb21tb25DaGFydEluZm87XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBsaW5lQ29sb3JcclxuICAgICAgICBsZXQgcmV0TGluZUNvbG9yID0gZ2V0U3RyaW5nQXJyYXlGcm9tSW5wdXQoXHJcbiAgICAgICAgICAgIFwibGluZUNvbG9yXCIsXHJcbiAgICAgICAgICAgIHlhbWxMaW5lPy5saW5lQ29sb3IsXHJcbiAgICAgICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgICAgICBcIlwiLFxyXG4gICAgICAgICAgICB2YWxpZGF0ZUNvbG9yLFxyXG4gICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldExpbmVDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0TGluZUNvbG9yOyAvLyBlcnJvck1lc3NhZ2VcclxuICAgICAgICB9XHJcbiAgICAgICAgbGluZS5saW5lQ29sb3IgPSByZXRMaW5lQ29sb3I7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobGluZS5saW5lQ29sb3IpO1xyXG5cclxuICAgICAgICAvLyBsaW5lV2lkdGhcclxuICAgICAgICBsZXQgcmV0TGluZVdpZHRoID0gZ2V0TnVtYmVyQXJyYXlGcm9tSW5wdXQoXHJcbiAgICAgICAgICAgIFwibGluZVdpZHRoXCIsXHJcbiAgICAgICAgICAgIHlhbWxMaW5lPy5saW5lV2lkdGgsXHJcbiAgICAgICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgICAgICAxLjUsXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0TGluZVdpZHRoID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRMaW5lV2lkdGg7IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgICAgIH1cclxuICAgICAgICBsaW5lLmxpbmVXaWR0aCA9IHJldExpbmVXaWR0aDtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhsaW5lLmxpbmVXaWR0aCk7XHJcblxyXG4gICAgICAgIC8vIHNob3dMaW5lXHJcbiAgICAgICAgbGV0IHJldFNob3dMaW5lID0gZ2V0Qm9vbEFycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcInNob3dMaW5lXCIsXHJcbiAgICAgICAgICAgIHlhbWxMaW5lPy5zaG93TGluZSxcclxuICAgICAgICAgICAgbnVtRGF0YXNldHMsXHJcbiAgICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0U2hvd0xpbmUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFNob3dMaW5lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsaW5lLnNob3dMaW5lID0gcmV0U2hvd0xpbmU7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobGluZS5zaG93TGluZSk7XHJcblxyXG4gICAgICAgIC8vIHNob3dQb2ludFxyXG4gICAgICAgIGxldCByZXRTaG93UG9pbnQgPSBnZXRCb29sQXJyYXlGcm9tSW5wdXQoXHJcbiAgICAgICAgICAgIFwic2hvd1BvaW50XCIsXHJcbiAgICAgICAgICAgIHlhbWxMaW5lPy5zaG93UG9pbnQsXHJcbiAgICAgICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgICAgICB0cnVlLFxyXG4gICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldFNob3dQb2ludCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0U2hvd1BvaW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBsaW5lLnNob3dQb2ludCA9IHJldFNob3dQb2ludDtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhsaW5lLnNob3dQb2ludCk7XHJcblxyXG4gICAgICAgIC8vIHBvaW50Q29sb3JcclxuICAgICAgICBsZXQgcmV0UG9pbnRDb2xvciA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcInBvaW50Q29sb3JcIixcclxuICAgICAgICAgICAgeWFtbExpbmU/LnBvaW50Q29sb3IsXHJcbiAgICAgICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgICAgICBcIiM2OWIzYTJcIixcclxuICAgICAgICAgICAgdmFsaWRhdGVDb2xvcixcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXRQb2ludENvbG9yID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRQb2ludENvbG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsaW5lLnBvaW50Q29sb3IgPSByZXRQb2ludENvbG9yO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGxpbmUucG9pbnRDb2xvcik7XHJcblxyXG4gICAgICAgIC8vIHBvaW50Qm9yZGVyQ29sb3JcclxuICAgICAgICBsZXQgcmV0UG9pbnRCb3JkZXJDb2xvciA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcInBvaW50Qm9yZGVyQ29sb3JcIixcclxuICAgICAgICAgICAgeWFtbExpbmU/LnBvaW50Qm9yZGVyQ29sb3IsXHJcbiAgICAgICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgICAgICBcIiM2OWIzYTJcIixcclxuICAgICAgICAgICAgdmFsaWRhdGVDb2xvcixcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXRQb2ludEJvcmRlckNvbG9yID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRQb2ludEJvcmRlckNvbG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsaW5lLnBvaW50Qm9yZGVyQ29sb3IgPSByZXRQb2ludEJvcmRlckNvbG9yO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGxpbmUucG9pbnRCb3JkZXJDb2xvcik7XHJcblxyXG4gICAgICAgIC8vIHBvaW50Qm9yZGVyV2lkdGhcclxuICAgICAgICBsZXQgcmV0UG9pbnRCb3JkZXJXaWR0aCA9IGdldE51bWJlckFycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcInBvaW50Qm9yZGVyV2lkdGhcIixcclxuICAgICAgICAgICAgeWFtbExpbmU/LnBvaW50Qm9yZGVyV2lkdGgsXHJcbiAgICAgICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgICAgICAwLjAsXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0UG9pbnRCb3JkZXJXaWR0aCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0UG9pbnRCb3JkZXJXaWR0aDsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpbmUucG9pbnRCb3JkZXJXaWR0aCA9IHJldFBvaW50Qm9yZGVyV2lkdGg7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobGluZS5wb2ludEJvcmRlcldpZHRoKTtcclxuXHJcbiAgICAgICAgLy8gcG9pbnRTaXplXHJcbiAgICAgICAgbGV0IHJldFBvaW50U2l6ZSA9IGdldE51bWJlckFycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcInBvaW50U2l6ZVwiLFxyXG4gICAgICAgICAgICB5YW1sTGluZT8ucG9pbnRTaXplLFxyXG4gICAgICAgICAgICBudW1EYXRhc2V0cyxcclxuICAgICAgICAgICAgMy4wLFxyXG4gICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldFBvaW50U2l6ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0UG9pbnRTaXplOyAvLyBlcnJvck1lc3NhZ2VcclxuICAgICAgICB9XHJcbiAgICAgICAgbGluZS5wb2ludFNpemUgPSByZXRQb2ludFNpemU7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobGluZS5wb2ludFNpemUpO1xyXG5cclxuICAgICAgICAvLyBmaWxsR2FwXHJcbiAgICAgICAgbGV0IHJldEZpbGxHYXAgPSBnZXRCb29sQXJyYXlGcm9tSW5wdXQoXHJcbiAgICAgICAgICAgIFwiZmlsbEdhcFwiLFxyXG4gICAgICAgICAgICB5YW1sTGluZT8uZmlsbEdhcCxcclxuICAgICAgICAgICAgbnVtRGF0YXNldHMsXHJcbiAgICAgICAgICAgIGZhbHNlLFxyXG4gICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldEZpbGxHYXAgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldEZpbGxHYXA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpbmUuZmlsbEdhcCA9IHJldEZpbGxHYXA7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobGluZS5maWxsR2FwKTtcclxuXHJcbiAgICAgICAgLy8geUF4aXNMb2NhdGlvblxyXG4gICAgICAgIGxldCByZXRZQXhpc0xvY2F0aW9uID0gZ2V0U3RyaW5nQXJyYXlGcm9tSW5wdXQoXHJcbiAgICAgICAgICAgIFwieUF4aXNMb2NhdGlvblwiLFxyXG4gICAgICAgICAgICB5YW1sTGluZT8ueUF4aXNMb2NhdGlvbixcclxuICAgICAgICAgICAgbnVtRGF0YXNldHMsXHJcbiAgICAgICAgICAgIFwibGVmdFwiLFxyXG4gICAgICAgICAgICB2YWxpZGF0ZVlBeGlzTG9jYXRpb24sXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0WUF4aXNMb2NhdGlvbiA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0WUF4aXNMb2NhdGlvbjsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpbmUueUF4aXNMb2NhdGlvbiA9IHJldFlBeGlzTG9jYXRpb247XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobGluZS55QXhpc0xvY2F0aW9uKTtcclxuXHJcbiAgICAgICAgcmVuZGVySW5mby5saW5lLnB1c2gobGluZSk7XHJcbiAgICB9IC8vIGxpbmUgcmVsYXRlZCBwYXJhbWV0ZXJzXHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLmxpbmUpO1xyXG5cclxuICAgIC8vIGJhciByZWxhdGVkIHBhcmFtZXRlcnNcclxuICAgIGZvciAobGV0IGJhcktleSBvZiB5YW1sQmFyS2V5cykge1xyXG4gICAgICAgIGxldCBiYXIgPSBuZXcgQmFySW5mbygpO1xyXG4gICAgICAgIGxldCB5YW1sQmFyID0geWFtbFtiYXJLZXldO1xyXG5cclxuICAgICAgICBsZXQga2V5c09mQmFySW5mbyA9IGdldEF2YWlsYWJsZUtleXNPZkNsYXNzKGJhcik7XHJcbiAgICAgICAgbGV0IGtleXNGb3VuZEluWUFNTCA9IGdldEF2YWlsYWJsZUtleXNPZkNsYXNzKHlhbWxCYXIpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGtleXNPZkJhckluZm8pO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGtleXNGb3VuZEluWUFNTCk7XHJcbiAgICAgICAgZm9yIChsZXQga2V5IG9mIGtleXNGb3VuZEluWUFNTCkge1xyXG4gICAgICAgICAgICBpZiAoIWtleXNPZkJhckluZm8uaW5jbHVkZXMoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCInXCIgKyBrZXkgKyBcIicgaXMgbm90IGFuIGF2YWlsYWJsZSBrZXlcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCByZXRQYXJzZUNvbW1vbkNoYXJ0SW5mbyA9IHBhcnNlQ29tbW9uQ2hhcnRJbmZvKHlhbWxCYXIsIGJhcik7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXRQYXJzZUNvbW1vbkNoYXJ0SW5mbyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0UGFyc2VDb21tb25DaGFydEluZm87XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBiYXJDb2xvclxyXG4gICAgICAgIGxldCByZXRCYXJDb2xvciA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcImJhckNvbG9yXCIsXHJcbiAgICAgICAgICAgIHlhbWxCYXI/LmJhckNvbG9yLFxyXG4gICAgICAgICAgICBudW1EYXRhc2V0cyxcclxuICAgICAgICAgICAgXCJcIixcclxuICAgICAgICAgICAgdmFsaWRhdGVDb2xvcixcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXRCYXJDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0QmFyQ29sb3I7IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgICAgIH1cclxuICAgICAgICBiYXIuYmFyQ29sb3IgPSByZXRCYXJDb2xvcjtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhiYXIuYmFyQ29sb3IpO1xyXG5cclxuICAgICAgICAvLyB5QXhpc0xvY2F0aW9uXHJcbiAgICAgICAgbGV0IHJldFlBeGlzTG9jYXRpb24gPSBnZXRTdHJpbmdBcnJheUZyb21JbnB1dChcclxuICAgICAgICAgICAgXCJ5QXhpc0xvY2F0aW9uXCIsXHJcbiAgICAgICAgICAgIHlhbWxCYXI/LnlBeGlzTG9jYXRpb24sXHJcbiAgICAgICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgICAgICBcImxlZnRcIixcclxuICAgICAgICAgICAgdmFsaWRhdGVZQXhpc0xvY2F0aW9uLFxyXG4gICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldFlBeGlzTG9jYXRpb24gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFlBeGlzTG9jYXRpb247IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgICAgIH1cclxuICAgICAgICBiYXIueUF4aXNMb2NhdGlvbiA9IHJldFlBeGlzTG9jYXRpb247XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYmFyLnlBeGlzTG9jYXRpb24pO1xyXG5cclxuICAgICAgICByZW5kZXJJbmZvLmJhci5wdXNoKGJhcik7XHJcbiAgICB9IC8vIGJhciByZWxhdGVkIHBhcmFtZXRlcnNcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uYmFyKTtcclxuXHJcbiAgICAvLyBwaWUgcmVsYXRlZCBwYXJhbWV0ZXJzXHJcbiAgICBmb3IgKGxldCBwaWVLZXkgb2YgeWFtbFBpZUtleXMpIHtcclxuICAgICAgICBsZXQgcGllID0gbmV3IFBpZUluZm8oKTtcclxuICAgICAgICBsZXQgeWFtbFBpZSA9IHlhbWxbcGllS2V5XTtcclxuXHJcbiAgICAgICAgbGV0IGtleXNPZlBpZUluZm8gPSBnZXRBdmFpbGFibGVLZXlzT2ZDbGFzcyhwaWUpO1xyXG4gICAgICAgIGxldCBrZXlzRm91bmRJbllBTUwgPSBnZXRBdmFpbGFibGVLZXlzT2ZDbGFzcyh5YW1sUGllKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhrZXlzT2ZQaWVJbmZvKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhrZXlzRm91bmRJbllBTUwpO1xyXG4gICAgICAgIGZvciAobGV0IGtleSBvZiBrZXlzRm91bmRJbllBTUwpIHtcclxuICAgICAgICAgICAgaWYgKCFrZXlzT2ZQaWVJbmZvLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiJ1wiICsga2V5ICsgXCInIGlzIG5vdCBhbiBhdmFpbGFibGUga2V5XCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0aXRsZVxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbFBpZT8udGl0bGUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcGllLnRpdGxlID0geWFtbFBpZS50aXRsZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocGllLnRpdGxlKTtcclxuXHJcbiAgICAgICAgLy8gZGF0YVxyXG4gICAgICAgIGxldCByZXREYXRhID0gZ2V0U3RyaW5nQXJyYXkoXCJkYXRhXCIsIHlhbWxQaWU/LmRhdGEpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0RGF0YSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0RGF0YTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcGllLmRhdGEgPSByZXREYXRhO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHBpZS5kYXRhKTtcclxuICAgICAgICBsZXQgbnVtRGF0YSA9IHBpZS5kYXRhLmxlbmd0aDtcclxuXHJcbiAgICAgICAgLy8gZGF0YUNvbG9yXHJcbiAgICAgICAgbGV0IHJldERhdGFDb2xvciA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcImRhdGFDb2xvclwiLFxyXG4gICAgICAgICAgICB5YW1sUGllPy5kYXRhQ29sb3IsXHJcbiAgICAgICAgICAgIG51bURhdGEsXHJcbiAgICAgICAgICAgIFwibm9uZVwiLFxyXG4gICAgICAgICAgICB2YWxpZGF0ZUNvbG9yLFxyXG4gICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldERhdGFDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0RGF0YUNvbG9yOyAvLyBlcnJvck1lc3NhZ2VcclxuICAgICAgICB9XHJcbiAgICAgICAgcGllLmRhdGFDb2xvciA9IHJldERhdGFDb2xvcjtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhwaWUuZGF0YUNvbG9yKTtcclxuXHJcbiAgICAgICAgLy8gZGF0YU5hbWVcclxuICAgICAgICBsZXQgcmV0RGF0YU5hbWUgPSBnZXRTdHJpbmdBcnJheUZyb21JbnB1dChcclxuICAgICAgICAgICAgXCJkYXRhTmFtZVwiLFxyXG4gICAgICAgICAgICB5YW1sUGllPy5kYXRhTmFtZSxcclxuICAgICAgICAgICAgbnVtRGF0YSxcclxuICAgICAgICAgICAgXCJcIixcclxuICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXREYXRhTmFtZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0RGF0YU5hbWU7IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgICAgIH1cclxuICAgICAgICBwaWUuZGF0YU5hbWUgPSByZXREYXRhTmFtZTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhwaWUuZGF0YU5hbWUpO1xyXG5cclxuICAgICAgICAvLyBsYWJlbFxyXG4gICAgICAgIGxldCByZXRMYWJlbCA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcImxhYmVsXCIsXHJcbiAgICAgICAgICAgIHlhbWxQaWU/LmxhYmVsLFxyXG4gICAgICAgICAgICBudW1EYXRhLFxyXG4gICAgICAgICAgICBcIlwiLFxyXG4gICAgICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldExhYmVsID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRMYWJlbDsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHBpZS5sYWJlbCA9IHJldExhYmVsO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHBpZS5sYWJlbCk7XHJcblxyXG4gICAgICAgIC8vIGhpZGVMYWJlbExlc3NUaGFuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB5YW1sUGllPy5oaWRlTGFiZWxMZXNzVGhhbiA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICBwaWUuaGlkZUxhYmVsTGVzc1RoYW4gPSB5YW1sUGllLmhpZGVMYWJlbExlc3NUaGFuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhwaWUuaGlkZUxhYmVsTGVzc1RoYW4pO1xyXG5cclxuICAgICAgICAvLyBleHRMYWJlbFxyXG4gICAgICAgIGxldCByZXRFeHRMYWJlbCA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcImV4dExhYmVsXCIsXHJcbiAgICAgICAgICAgIHlhbWxQaWU/LmV4dExhYmVsLFxyXG4gICAgICAgICAgICBudW1EYXRhLFxyXG4gICAgICAgICAgICBcIlwiLFxyXG4gICAgICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldEV4dExhYmVsID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRFeHRMYWJlbDsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHBpZS5leHRMYWJlbCA9IHJldEV4dExhYmVsO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHBpZS5leHRMYWJlbCk7XHJcblxyXG4gICAgICAgIC8vIHNob3dFeHRMYWJlbE9ubHlJZk5vTGFiZWxcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxQaWU/LnNob3dFeHRMYWJlbE9ubHlJZk5vTGFiZWwgPT09IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgICAgICAgIHBpZS5zaG93RXh0TGFiZWxPbmx5SWZOb0xhYmVsID0geWFtbFBpZS5zaG93RXh0TGFiZWxPbmx5SWZOb0xhYmVsO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhwaWUuc2hvd0V4dExhYmVsT25seUlmTm9MYWJlbCk7XHJcblxyXG4gICAgICAgIC8vIHJhdGlvSW5uZXJSYWRpdXNcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxQaWU/LnJhdGlvSW5uZXJSYWRpdXMgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgcGllLnJhdGlvSW5uZXJSYWRpdXMgPSB5YW1sUGllLnJhdGlvSW5uZXJSYWRpdXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHBpZS5yYXRpb0lubmVyUmFkaXVzKTtcclxuXHJcbiAgICAgICAgLy8gc2hvd0xlZ2VuZFxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbFBpZT8uc2hvd0xlZ2VuZCA9PT0gXCJib29sZWFuXCIpIHtcclxuICAgICAgICAgICAgcGllLnNob3dMZWdlbmQgPSB5YW1sUGllLnNob3dMZWdlbmQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBsZWdlbmRQb3NpdGlvblxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbFBpZT8ubGVnZW5kUG9zaXRpb24gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcGllLmxlZ2VuZFBvc2l0aW9uID0geWFtbFBpZS5sZWdlbmRQb3NpdGlvbjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBwaWUubGVnZW5kUG9zaXRpb24gPSBcInJpZ2h0XCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBsZWdlbmRPcmllbnRcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxQaWU/LmxlZ2VuZE9yaWVudGF0aW9uID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHBpZS5sZWdlbmRPcmllbnRhdGlvbiA9IHlhbWxQaWUubGVnZW5kT3JpZW50YXRpb247XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgcGllLmxlZ2VuZFBvc2l0aW9uID09PSBcInRvcFwiIHx8XHJcbiAgICAgICAgICAgICAgICBwaWUubGVnZW5kUG9zaXRpb24gPT09IFwiYm90dG9tXCJcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBwaWUubGVnZW5kT3JpZW50YXRpb24gPSBcImhvcml6b250YWxcIjtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICAgICAgICAgIHBpZS5sZWdlbmRQb3NpdGlvbiA9PT0gXCJsZWZ0XCIgfHxcclxuICAgICAgICAgICAgICAgIHBpZS5sZWdlbmRQb3NpdGlvbiA9PT0gXCJyaWdodFwiXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcGllLmxlZ2VuZE9yaWVudGF0aW9uID0gXCJ2ZXJ0aWNhbFwiO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcGllLmxlZ2VuZE9yaWVudGF0aW9uID0gXCJob3Jpem9udGFsXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocGllLmxlZ2VuZFBvc2l0aW9uKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhwaWUubGVnZW5kT3JpZW50YXRpb24pO1xyXG5cclxuICAgICAgICAvLyBsZWdlbmRCZ0NvbG9yXHJcbiAgICAgICAgaWYgKHR5cGVvZiB5YW1sUGllPy5sZWdlbmRCZ0NvbG9yID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHBpZS5sZWdlbmRCZ0NvbG9yID0geWFtbFBpZS5sZWdlbmRCZ0NvbG9yO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbGVnZW5kQm9yZGVyQ29sb3JcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxQaWU/LmxlZ2VuZEJvcmRlckNvbG9yID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHBpZS5sZWdlbmRCb3JkZXJDb2xvciA9IHlhbWxQaWUubGVnZW5kQm9yZGVyQ29sb3I7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZW5kZXJJbmZvLnBpZS5wdXNoKHBpZSk7XHJcbiAgICB9IC8vIHBpZSByZWxhdGVkIHBhcmFtZXRlcnNcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8ucGllKTtcclxuXHJcbiAgICAvLyBzdW1tYXJ5IHJlbGF0ZWQgcGFyYW1ldGVyc1xyXG4gICAgZm9yIChsZXQgc3VtbWFyeUtleSBvZiB5YW1sU3VtbWFyeUtleXMpIHtcclxuICAgICAgICBsZXQgc3VtbWFyeSA9IG5ldyBTdW1tYXJ5SW5mbygpO1xyXG4gICAgICAgIGxldCB5YW1sU3VtbWFyeSA9IHlhbWxbc3VtbWFyeUtleV07XHJcblxyXG4gICAgICAgIGxldCBrZXlzT2ZTdW1tYXJ5SW5mbyA9IGdldEF2YWlsYWJsZUtleXNPZkNsYXNzKHN1bW1hcnkpO1xyXG4gICAgICAgIGxldCBrZXlzRm91bmRJbllBTUwgPSBnZXRBdmFpbGFibGVLZXlzT2ZDbGFzcyh5YW1sU3VtbWFyeSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coa2V5c09mU3VtbWFyeUluZm8pO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGtleXNGb3VuZEluWUFNTCk7XHJcbiAgICAgICAgZm9yIChsZXQga2V5IG9mIGtleXNGb3VuZEluWUFNTCkge1xyXG4gICAgICAgICAgICBpZiAoIWtleXNPZlN1bW1hcnlJbmZvLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiJ1wiICsga2V5ICsgXCInIGlzIG5vdCBhbiBhdmFpbGFibGUga2V5XCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0ZW1wbGF0ZVxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbFN1bW1hcnk/LnRlbXBsYXRlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHN1bW1hcnkudGVtcGxhdGUgPSB5YW1sU3VtbWFyeS50ZW1wbGF0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiB5YW1sU3VtbWFyeT8uc3R5bGUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgc3VtbWFyeS5zdHlsZSA9IHlhbWxTdW1tYXJ5LnN0eWxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVuZGVySW5mby5zdW1tYXJ5LnB1c2goc3VtbWFyeSk7XHJcbiAgICB9IC8vIHN1bW1hcnkgcmVsYXRlZCBwYXJhbWV0ZXJzXHJcblxyXG4gICAgLy8gTW9udGggcmVsYXRlZCBwYXJhbWV0ZXJzXHJcbiAgICBmb3IgKGxldCBtb250aEtleSBvZiB5YW1sTW9udGhLZXlzKSB7XHJcbiAgICAgICAgbGV0IG1vbnRoID0gbmV3IE1vbnRoSW5mbygpO1xyXG4gICAgICAgIGxldCB5YW1sTW9udGggPSB5YW1sW21vbnRoS2V5XTtcclxuXHJcbiAgICAgICAgbGV0IGtleXNPZk1vbnRoSW5mbyA9IGdldEF2YWlsYWJsZUtleXNPZkNsYXNzKG1vbnRoKTtcclxuICAgICAgICBsZXQga2V5c0ZvdW5kSW5ZQU1MID0gZ2V0QXZhaWxhYmxlS2V5c09mQ2xhc3MoeWFtbE1vbnRoKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhrZXlzT2ZTdW1tYXJ5SW5mbyk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coa2V5c0ZvdW5kSW5ZQU1MKTtcclxuICAgICAgICBmb3IgKGxldCBrZXkgb2Yga2V5c0ZvdW5kSW5ZQU1MKSB7XHJcbiAgICAgICAgICAgIGlmICgha2V5c09mTW9udGhJbmZvLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiJ1wiICsga2V5ICsgXCInIGlzIG5vdCBhbiBhdmFpbGFibGUga2V5XCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBkYXRhc2V0XHJcbiAgICAgICAgbGV0IHJldERhdGFzZXQgPSBnZXROdW1iZXJBcnJheShcImRhdGFzZXRcIiwgeWFtbE1vbnRoPy5kYXRhc2V0KTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldERhdGFzZXQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldERhdGFzZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZXREYXRhc2V0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAvLyBpbnNlcnQgeSBkYXRhc2V0IGdpdmVuXHJcbiAgICAgICAgICAgIGZvciAobGV0IHEgb2YgcXVlcmllcykge1xyXG4gICAgICAgICAgICAgICAgcmV0RGF0YXNldC5wdXNoKHEuZ2V0SWQoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbW9udGguZGF0YXNldCA9IHJldERhdGFzZXQ7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobW9udGguZGF0YXNldCk7XHJcbiAgICAgICAgbGV0IG51bURhdGFzZXQgPSBtb250aC5kYXRhc2V0Lmxlbmd0aDtcclxuXHJcbiAgICAgICAgLy8gc3RhcnRXZWVrT25cclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxNb250aD8uc3RhcnRXZWVrT24gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbW9udGguc3RhcnRXZWVrT24gPSB5YW1sTW9udGguc3RhcnRXZWVrT247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLnN0YXJ0V2Vla09uKTtcclxuXHJcbiAgICAgICAgLy8gc2hvd0NpcmNsZVxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbE1vbnRoPy5zaG93Q2lyY2xlID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgICBtb250aC5zaG93Q2lyY2xlID0geWFtbE1vbnRoLnNob3dDaXJjbGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLnNob3dDaXJjbGUpO1xyXG5cclxuICAgICAgICAvLyB0aHJlc2hvbGRcclxuICAgICAgICBsZXQgcmV0VGhyZXNob2xkID0gZ2V0TnVtYmVyQXJyYXkoXCJ0aHJlc2hvbGRcIiwgeWFtbE1vbnRoPy50aHJlc2hvbGQpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0VGhyZXNob2xkID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRUaHJlc2hvbGQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1vbnRoLnRocmVzaG9sZCA9IHJldFRocmVzaG9sZDtcclxuICAgICAgICBpZiAobW9udGgudGhyZXNob2xkLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmREYXRhc2V0ID0gMDsgaW5kRGF0YXNldCA8IG51bURhdGFzZXQ7IGluZERhdGFzZXQrKykge1xyXG4gICAgICAgICAgICAgICAgbW9udGgudGhyZXNob2xkLnB1c2goMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG1vbnRoLnRocmVzaG9sZC5sZW5ndGggIT09IG1vbnRoLmRhdGFzZXQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLnRocmVzaG9sZCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLmRhdGFzZXQpO1xyXG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxyXG4gICAgICAgICAgICAgICAgXCJUaGUgbnVtYmVyIG9mIGlucHV0cyBvZiB0aHJlc2hvbGQgYW5kIGRhdGFzZXQgbm90IG1hdGNoZWRcIjtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobW9udGgudGhyZXNob2xkKTtcclxuXHJcbiAgICAgICAgLy8geU1pblxyXG4gICAgICAgIGxldCByZXRZTWluID0gZ2V0TnVtYmVyQXJyYXkoXCJ5TWluXCIsIHlhbWxNb250aD8ueU1pbik7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXRZTWluID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRZTWluO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtb250aC55TWluID0gcmV0WU1pbjtcclxuICAgICAgICBpZiAobW9udGgueU1pbi5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaW5kRGF0YXNldCA9IDA7IGluZERhdGFzZXQgPCBudW1EYXRhc2V0OyBpbmREYXRhc2V0KyspIHtcclxuICAgICAgICAgICAgICAgIG1vbnRoLnlNaW4ucHVzaChudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobW9udGgueU1pbi5sZW5ndGggIT09IG1vbnRoLmRhdGFzZXQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9XHJcbiAgICAgICAgICAgICAgICBcIlRoZSBudW1iZXIgb2YgaW5wdXRzIG9mIHlNaW4gYW5kIGRhdGFzZXQgbm90IG1hdGNoZWRcIjtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobW9udGgueU1pbik7XHJcblxyXG4gICAgICAgIC8vIHlNYXhcclxuICAgICAgICBsZXQgcmV0WU1heCA9IGdldE51bWJlckFycmF5KFwieU1heFwiLCB5YW1sTW9udGg/LnlNYXgpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0WU1heCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0WU1heDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbW9udGgueU1heCA9IHJldFlNYXg7XHJcbiAgICAgICAgaWYgKG1vbnRoLnlNYXgubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZERhdGFzZXQgPSAwOyBpbmREYXRhc2V0IDwgbnVtRGF0YXNldDsgaW5kRGF0YXNldCsrKSB7XHJcbiAgICAgICAgICAgICAgICBtb250aC55TWF4LnB1c2gobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG1vbnRoLnlNYXgubGVuZ3RoICE9PSBtb250aC5kYXRhc2V0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxyXG4gICAgICAgICAgICAgICAgXCJUaGUgbnVtYmVyIG9mIGlucHV0cyBvZiB5TWluIGFuZCBkYXRhc2V0IG5vdCBtYXRjaGVkXCI7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLnlNYXgpO1xyXG5cclxuICAgICAgICAvLyBjb2xvclxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbE1vbnRoPy5jb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBtb250aC5jb2xvciA9IHlhbWxNb250aC5jb2xvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobW9udGguY29sb3IpO1xyXG5cclxuICAgICAgICAvLyBkaW1Ob3RJbk1vbnRoXHJcbiAgICAgICAgaWYgKHR5cGVvZiB5YW1sTW9udGg/LmRpbU5vdEluTW9udGggPT09IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgICAgICAgIG1vbnRoLmRpbU5vdEluTW9udGggPSB5YW1sTW9udGguZGltTm90SW5Nb250aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobW9udGguZGltTm90SW5Nb250aCk7XHJcblxyXG4gICAgICAgIC8vIHNob3dTdHJlYWtcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxNb250aD8uc2hvd1N0cmVhayA9PT0gXCJib29sZWFuXCIpIHtcclxuICAgICAgICAgICAgbW9udGguc2hvd1N0cmVhayA9IHlhbWxNb250aC5zaG93U3RyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhtb250aC5zaG93U3RyZWFrKTtcclxuXHJcbiAgICAgICAgLy8gc2hvd1RvZGF5UmluZ1xyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbE1vbnRoPy5zaG93VG9kYXlSaW5nID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgICBtb250aC5zaG93VG9kYXlSaW5nID0geWFtbE1vbnRoLnNob3dUb2RheVJpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLnNob3dUb2RheVJpbmcpO1xyXG5cclxuICAgICAgICAvLyBzaG93U2VsZWN0ZWRWYWx1ZVxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbE1vbnRoPy5zaG93U2VsZWN0ZWRWYWx1ZSA9PT0gXCJib29sZWFuXCIpIHtcclxuICAgICAgICAgICAgbW9udGguc2hvd1NlbGVjdGVkVmFsdWUgPSB5YW1sTW9udGguc2hvd1NlbGVjdGVkVmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLnNob3dTZWxlY3RlZFZhbHVlKTtcclxuXHJcbiAgICAgICAgLy8gc2hvd1NlbGVjdGVkUmluZ1xyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbE1vbnRoPy5zaG93U2VsZWN0ZWRSaW5nID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgICBtb250aC5zaG93U2VsZWN0ZWRSaW5nID0geWFtbE1vbnRoLnNob3dTZWxlY3RlZFJpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLnNob3dTZWxlY3RlZFJpbmcpO1xyXG5cclxuICAgICAgICAvLyBjaXJjbGVDb2xvclxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbE1vbnRoPy5jaXJjbGVDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBtb250aC5jaXJjbGVDb2xvciA9IHlhbWxNb250aC5jaXJjbGVDb2xvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobW9udGguY2lyY2xlQ29sb3IpO1xyXG5cclxuICAgICAgICAvLyBjaXJjbGVDb2xvckJ5VmFsdWVcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxNb250aD8uY2lyY2xlQ29sb3JCeVZhbHVlID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgICBtb250aC5jaXJjbGVDb2xvckJ5VmFsdWUgPSB5YW1sTW9udGguY2lyY2xlQ29sb3JCeVZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhtb250aC5jaXJjbGVDb2xvckJ5VmFsdWUpO1xyXG5cclxuICAgICAgICAvLyBoZWFkZXJZZWFyQ29sb3JcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxNb250aD8uaGVhZGVyWWVhckNvbG9yID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG1vbnRoLmhlYWRlclllYXJDb2xvciA9IHlhbWxNb250aC5oZWFkZXJZZWFyQ29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLmhlYWRlclllYXJDb2xvcik7XHJcblxyXG4gICAgICAgIC8vIGhlYWRlck1vbnRoQ29sb3JcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxNb250aD8uaGVhZGVyTW9udGhDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBtb250aC5oZWFkZXJNb250aENvbG9yID0geWFtbE1vbnRoLmhlYWRlck1vbnRoQ29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLmhlYWRlck1vbnRoQ29sb3IpO1xyXG5cclxuICAgICAgICAvLyBkaXZpZGluZ0xpbmVDb2xvclxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbE1vbnRoPy5kaXZpZGluZ0xpbmVDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBtb250aC5kaXZpZGluZ0xpbmVDb2xvciA9IHlhbWxNb250aC5kaXZpZGluZ0xpbmVDb2xvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobW9udGguZGl2aWRpbmdMaW5lQ29sb3IpO1xyXG5cclxuICAgICAgICAvLyB0b2RheVJpbmdDb2xvclxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbE1vbnRoPy50b2RheVJpbmdDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBtb250aC50b2RheVJpbmdDb2xvciA9IHlhbWxNb250aC50b2RheVJpbmdDb2xvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobW9udGgudG9kYXlSaW5nQ29sb3IpO1xyXG5cclxuICAgICAgICAvLyBzZWxlY3RlZFJpbmdDb2xvclxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbE1vbnRoPy5zZWxlY3RlZFJpbmdDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBtb250aC5zZWxlY3RlZFJpbmdDb2xvciA9IHlhbWxNb250aC5zZWxlY3RlZFJpbmdDb2xvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobW9udGguc2VsZWN0ZWRSaW5nQ29sb3IpO1xyXG5cclxuICAgICAgICAvLyBpbml0TW9udGhcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxNb250aD8uaW5pdE1vbnRoID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG1vbnRoLmluaXRNb250aCA9IHlhbWxNb250aC5pbml0TW9udGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1vbnRoLmluaXRNb250aCk7XHJcblxyXG4gICAgICAgIHJlbmRlckluZm8ubW9udGgucHVzaChtb250aCk7XHJcbiAgICB9IC8vIE1vbnRoIHJlbGF0ZWQgcGFyYW1ldGVyc1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby5tb250aCk7XHJcblxyXG4gICAgLy8gSGVhdG1hcCByZWxhdGVkIHBhcmFtZXRlcnNcclxuICAgIGZvciAobGV0IGhlYXRtYXBLZXkgb2YgeWFtbEhlYXRtYXBLZXlzKSB7XHJcbiAgICAgICAgbGV0IGhlYXRtYXAgPSBuZXcgSGVhdG1hcEluZm8oKTtcclxuICAgICAgICBsZXQgeWFtbEhlYXRtYXAgPSB5YW1sW2hlYXRtYXBLZXldO1xyXG5cclxuICAgICAgICBsZXQga2V5c09mSGVhdG1hcEluZm8gPSBnZXRBdmFpbGFibGVLZXlzT2ZDbGFzcyhoZWF0bWFwKTtcclxuICAgICAgICBsZXQga2V5c0ZvdW5kSW5ZQU1MID0gZ2V0QXZhaWxhYmxlS2V5c09mQ2xhc3MoeWFtbEhlYXRtYXApO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGtleXNPZkhlYXRtYXBJbmZvKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhrZXlzRm91bmRJbllBTUwpO1xyXG4gICAgICAgIGZvciAobGV0IGtleSBvZiBrZXlzRm91bmRJbllBTUwpIHtcclxuICAgICAgICAgICAgaWYgKCFrZXlzT2ZIZWF0bWFwSW5mby5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIidcIiArIGtleSArIFwiJyBpcyBub3QgYW4gYXZhaWxhYmxlIGtleVwiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVuZGVySW5mby5oZWF0bWFwLnB1c2goaGVhdG1hcCk7XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLmhlYXRtYXApO1xyXG5cclxuICAgIC8vIEJ1bGxldCByZWxhdGVkIHBhcmFtZXRlcnNcclxuICAgIGZvciAobGV0IGJ1bGxldEtleSBvZiB5YW1sQnVsbGV0S2V5cykge1xyXG4gICAgICAgIGxldCBidWxsZXQgPSBuZXcgQnVsbGV0SW5mbygpO1xyXG4gICAgICAgIGxldCB5YW1sQnVsbGV0ID0geWFtbFtidWxsZXRLZXldO1xyXG5cclxuICAgICAgICBsZXQga2V5c09mQnVsbGV0SW5mbyA9IGdldEF2YWlsYWJsZUtleXNPZkNsYXNzKGJ1bGxldCk7XHJcbiAgICAgICAgbGV0IGtleXNGb3VuZEluWUFNTCA9IGdldEF2YWlsYWJsZUtleXNPZkNsYXNzKHlhbWxCdWxsZXQpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGtleXNPZlN1bW1hcnlJbmZvKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhrZXlzRm91bmRJbllBTUwpO1xyXG4gICAgICAgIGZvciAobGV0IGtleSBvZiBrZXlzRm91bmRJbllBTUwpIHtcclxuICAgICAgICAgICAgaWYgKCFrZXlzT2ZCdWxsZXRJbmZvLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiJ1wiICsga2V5ICsgXCInIGlzIG5vdCBhbiBhdmFpbGFibGUga2V5XCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0aXRsZVxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbEJ1bGxldD8udGl0bGUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgYnVsbGV0LnRpdGxlID0geWFtbEJ1bGxldC50aXRsZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnVsbGV0LnRpdGxlKTtcclxuXHJcbiAgICAgICAgLy8gZGF0YXNldFxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbEJ1bGxldD8uZGF0YXNldCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBidWxsZXQuZGF0YXNldCA9IHlhbWxCdWxsZXQuZGF0YXNldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnVsbGV0LmRhdGFzZXQpO1xyXG5cclxuICAgICAgICAvLyBvcmllbnRhdGlvblxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbEJ1bGxldD8ub3JpZW50YXRpb24gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgYnVsbGV0Lm9yaWVudGF0aW9uID0geWFtbEJ1bGxldC5vcmllbnRhdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnVsbGV0Lm9yaWVudGF0aW9uKTtcclxuXHJcbiAgICAgICAgLy8gcmFuZ2VcclxuICAgICAgICBsZXQgcmV0UmFuZ2UgPSBnZXROdW1iZXJBcnJheShcInJhbmdlXCIsIHlhbWxCdWxsZXQ/LnJhbmdlKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldFJhbmdlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRSYW5nZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHJhbmdlID0gcmV0UmFuZ2UgYXMgQXJyYXk8bnVtYmVyPjtcclxuICAgICAgICAvLyBDaGVjayB0aGUgdmFsdWUgaXMgbW9ub3RvbmljYWxseSBpbmNyZWFzaW5nXHJcbiAgICAgICAgLy8gQ2hlY2sgdGhlIHZhbHVlIGlzIG5vdCBuZWdhdGl2ZVxyXG4gICAgICAgIGlmIChyYW5nZS5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgaWYgKHJhbmdlWzBdIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJOZWdhdGl2ZSByYW5nZSB2YWx1ZSBpcyBub3QgYWxsb3dlZFwiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAocmFuZ2UubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBsZXQgbGFzdEJvdW5kID0gcmFuZ2VbMF07XHJcbiAgICAgICAgICAgIGlmIChsYXN0Qm91bmQgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIk5lZ2F0aXZlIHJhbmdlIHZhbHVlIGlzIG5vdCBhbGxvd2VkXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaW5kID0gMTsgaW5kIDwgcmFuZ2UubGVuZ3RoOyBpbmQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZVtpbmRdIDw9IGxhc3RCb3VuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJWYWx1ZXMgaW4gcGFyYW1ldGVyICdyYW5nZScgc2hvdWxkIGJlIG1vbm90b25pY2FsbHkgaW5jcmVhc2luZ1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiRW1wdHkgcmFuZ2UgaXMgbm90IGFsbG93ZWRcIjtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnVsbGV0LnJhbmdlID0gcmFuZ2U7XHJcbiAgICAgICAgbGV0IG51bVJhbmdlID0gcmFuZ2UubGVuZ3RoO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uYnVsbGV0LnJhbmdlKTtcclxuXHJcbiAgICAgICAgLy8gcmFuZ2UgY29sb3JcclxuICAgICAgICBsZXQgcmV0UmFuZ2VDb2xvciA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcInJhbmdlQ29sb3JcIixcclxuICAgICAgICAgICAgeWFtbEJ1bGxldD8ucmFuZ2VDb2xvcixcclxuICAgICAgICAgICAgbnVtUmFuZ2UsXHJcbiAgICAgICAgICAgIFwiXCIsXHJcbiAgICAgICAgICAgIHZhbGlkYXRlQ29sb3IsXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0UmFuZ2VDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0UmFuZ2VDb2xvcjsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJ1bGxldC5yYW5nZUNvbG9yID0gcmV0UmFuZ2VDb2xvcjtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidWxsZXQucmFuZ2VDb2xvcik7XHJcblxyXG4gICAgICAgIC8vIGFjdHVhbCB2YWx1ZSwgY2FuIHBvc3Nlc3MgdGVtcGxhdGUgdmFyaWFibGVcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxCdWxsZXQ/LnZhbHVlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGJ1bGxldC52YWx1ZSA9IHlhbWxCdWxsZXQudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB5YW1sQnVsbGV0Py52YWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICBidWxsZXQudmFsdWUgPSB5YW1sQnVsbGV0LnZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1bGxldC52YWx1ZSk7XHJcblxyXG4gICAgICAgIC8vIHZhbHVlIHVuaXRcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxCdWxsZXQ/LnZhbHVlVW5pdCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBidWxsZXQudmFsdWVVbml0ID0geWFtbEJ1bGxldC52YWx1ZVVuaXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1bGxldC52YWx1ZVVuaXQpO1xyXG5cclxuICAgICAgICAvLyB2YWx1ZSBjb2xvclxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbEJ1bGxldD8udmFsdWVDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBidWxsZXQudmFsdWVDb2xvciA9IHlhbWxCdWxsZXQudmFsdWVDb2xvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnVsbGV0LnZhbHVlQ29sb3IpO1xyXG5cclxuICAgICAgICAvLyBzaG93IG1hcmtcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWxCdWxsZXQ/LnNob3dNYXJrZXIgPT09IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgICAgICAgIGJ1bGxldC5zaG93TWFya2VyID0geWFtbEJ1bGxldC5zaG93TWFya2VyO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidWxsZXQuc2hvd01hcmspO1xyXG5cclxuICAgICAgICAvLyBtYXJrIHZhbHVlXHJcbiAgICAgICAgaWYgKHR5cGVvZiB5YW1sQnVsbGV0Py5tYXJrZXJWYWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICBidWxsZXQubWFya2VyVmFsdWUgPSB5YW1sQnVsbGV0Lm1hcmtlclZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidWxsZXQubWFya1ZhbHVlKTtcclxuXHJcbiAgICAgICAgLy8gbWFyayBjb2xvclxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbEJ1bGxldD8ubWFya2VyQ29sb3IgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgYnVsbGV0Lm1hcmtlckNvbG9yID0geWFtbEJ1bGxldC5tYXJrZXJDb2xvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnVsbGV0Lm1hcmtWYWx1ZSk7XHJcblxyXG4gICAgICAgIHJlbmRlckluZm8uYnVsbGV0LnB1c2goYnVsbGV0KTtcclxuICAgIH0gLy8gQnVsbGV0IHJlbGF0ZWQgcGFyYW1ldGVyc1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby5idWxsZXQpO1xyXG5cclxuICAgIHJldHVybiByZW5kZXJJbmZvO1xyXG59XHJcbiIsImltcG9ydCB7IENhY2hlZE1ldGFkYXRhLCBURmlsZSwgbm9ybWFsaXplUGF0aCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQge1xyXG4gICAgRGF0YU1hcCxcclxuICAgIFF1ZXJ5LFxyXG4gICAgUmVuZGVySW5mbyxcclxuICAgIFhWYWx1ZU1hcCxcclxuICAgIFF1ZXJ5VmFsdWVQYWlyLFxyXG4gICAgVGFibGVEYXRhLFxyXG4gICAgU2VhcmNoVHlwZSxcclxuICAgIFZhbHVlVHlwZSxcclxufSBmcm9tIFwiLi9kYXRhXCI7XHJcbmltcG9ydCAqIGFzIGhlbHBlciBmcm9tIFwiLi9oZWxwZXJcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRlRnJvbUZpbGVuYW1lKGZpbGU6IFRGaWxlLCByZW5kZXJJbmZvOiBSZW5kZXJJbmZvKSB7XHJcbiAgICBsZXQgZmlsZUJhc2VOYW1lID0gZmlsZS5iYXNlbmFtZTtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgICAgcmVuZGVySW5mby5kYXRlRm9ybWF0UHJlZml4ICYmXHJcbiAgICAgICAgZmlsZUJhc2VOYW1lLnN0YXJ0c1dpdGgocmVuZGVySW5mby5kYXRlRm9ybWF0UHJlZml4KVxyXG4gICAgKSB7XHJcbiAgICAgICAgZmlsZUJhc2VOYW1lID0gZmlsZUJhc2VOYW1lLnNsaWNlKHJlbmRlckluZm8uZGF0ZUZvcm1hdFByZWZpeC5sZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgaWYgKFxyXG4gICAgICAgIHJlbmRlckluZm8uZGF0ZUZvcm1hdFN1ZmZpeCAmJlxyXG4gICAgICAgIGZpbGVCYXNlTmFtZS5lbmRzV2l0aChyZW5kZXJJbmZvLmRhdGVGb3JtYXRTdWZmaXgpXHJcbiAgICApIHtcclxuICAgICAgICBmaWxlQmFzZU5hbWUgPSBmaWxlQmFzZU5hbWUuc2xpY2UoXHJcbiAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgIGZpbGVCYXNlTmFtZS5sZW5ndGggLSByZW5kZXJJbmZvLmRhdGVGb3JtYXRTdWZmaXgubGVuZ3RoXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKGZpbGVCYXNlTmFtZSk7XHJcblxyXG4gICAgbGV0IGZpbGVEYXRlID0gaGVscGVyLnN0clRvRGF0ZShmaWxlQmFzZU5hbWUsIHJlbmRlckluZm8uZGF0ZUZvcm1hdCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhmaWxlRGF0ZSk7XHJcblxyXG4gICAgcmV0dXJuIGZpbGVEYXRlO1xyXG59XHJcblxyXG4vLyBOb3Qgc3VwcG9ydCBtdWx0aXBsZSB0YXJnZXRzXHJcbi8vIE1heSBtZXJnZSB3aXRoIGNvbGxlY3REYXRhRnJvbUZyb250bWF0dGVyS2V5XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRlRnJvbUZyb250bWF0dGVyKFxyXG4gICAgZmlsZUNhY2hlOiBDYWNoZWRNZXRhZGF0YSxcclxuICAgIHF1ZXJ5OiBRdWVyeSxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm9cclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcImdldERhdGVGcm9tRnJvbnRtYXR0ZXJcIik7XHJcblxyXG4gICAgbGV0IGRhdGUgPSB3aW5kb3cubW9tZW50KFwiXCIpO1xyXG5cclxuICAgIGxldCBmcm9udE1hdHRlciA9IGZpbGVDYWNoZS5mcm9udG1hdHRlcjtcclxuICAgIGlmIChmcm9udE1hdHRlcikge1xyXG4gICAgICAgIGlmIChoZWxwZXIuZGVlcFZhbHVlKGZyb250TWF0dGVyLCBxdWVyeS5nZXRUYXJnZXQoKSkpIHtcclxuICAgICAgICAgICAgbGV0IHN0ckRhdGUgPSBoZWxwZXIuZGVlcFZhbHVlKGZyb250TWF0dGVyLCBxdWVyeS5nZXRUYXJnZXQoKSk7XHJcblxyXG4gICAgICAgICAgICBkYXRlID0gaGVscGVyLnN0clRvRGF0ZShzdHJEYXRlLCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhkYXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRhdGU7XHJcbn1cclxuXHJcbi8vIElubGluZSB0YWdzIG9ubHlcclxuLy8gTm90IHN1cHBvcnQgbXVsdGlwbGUgdGFyZ2V0c1xyXG4vLyBNYXkgbWVyZ2Ugd2l0aCBjb2xsZWN0RGF0YUZyb21JbmxpbmVUYWdcclxuZXhwb3J0IGZ1bmN0aW9uIGdldERhdGVGcm9tVGFnKFxyXG4gICAgY29udGVudDogc3RyaW5nLFxyXG4gICAgcXVlcnk6IFF1ZXJ5LFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mb1xyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiZ2V0RGF0ZUZyb21UYWdcIik7XHJcblxyXG4gICAgbGV0IGRhdGUgPSB3aW5kb3cubW9tZW50KFwiXCIpO1xyXG5cclxuICAgIGxldCB0YWdOYW1lID0gcXVlcnkuZ2V0VGFyZ2V0KCk7XHJcbiAgICBpZiAocXVlcnkuZ2V0UGFyZW50VGFyZ2V0KCkpIHtcclxuICAgICAgICB0YWdOYW1lID0gcXVlcnkuZ2V0UGFyZW50VGFyZ2V0KCk7IC8vIHVzZSBwYXJlbnQgdGFnIG5hbWUgZm9yIG11bHRpcGxlIHZhbHVlc1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2codGFnTmFtZSk7XHJcbiAgICBsZXQgc3RySGFzaHRhZ1JlZ2V4ID1cclxuICAgICAgICBcIihefFxcXFxzKSNcIiArXHJcbiAgICAgICAgdGFnTmFtZSArXHJcbiAgICAgICAgXCIoXFxcXC9bXFxcXHctXSspKig6KD88dmFsdWVzPltcXFxcZFxcXFwuXFxcXC8tXSopW2EtekEtWl0qKT8oW1xcXFwuISxcXFxcPzt+LV0qKT8oXFxcXHN8JClcIjtcclxuICAgIC8vIGNvbnNvbGUubG9nKHN0ckhhc2h0YWdSZWdleCk7XHJcbiAgICBsZXQgaGFzaFRhZ1JlZ2V4ID0gbmV3IFJlZ0V4cChzdHJIYXNodGFnUmVnZXgsIFwiZ21cIik7XHJcbiAgICBsZXQgbWF0Y2g7XHJcbiAgICB3aGlsZSAoKG1hdGNoID0gaGFzaFRhZ1JlZ2V4LmV4ZWMoY29udGVudCkpKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobWF0Y2gpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdHlwZW9mIG1hdGNoLmdyb3VwcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgbWF0Y2guZ3JvdXBzLnZhbHVlcyAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBsZXQgc3RyRGF0ZSA9IG1hdGNoLmdyb3Vwcy52YWx1ZXM7XHJcbiAgICAgICAgICAgIGRhdGUgPSBoZWxwZXIuc3RyVG9EYXRlKHN0ckRhdGUsIHJlbmRlckluZm8uZGF0ZUZvcm1hdCk7XHJcbiAgICAgICAgICAgIGlmIChkYXRlLmlzVmFsaWQoKSkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhkYXRlKTtcclxuICAgIHJldHVybiBkYXRlO1xyXG59XHJcblxyXG4vLyBOb3Qgc3VwcG9ydCBtdWx0aXBsZSB0YXJnZXRzXHJcbi8vIE1heSBtZXJnZSB3aXRoIGNvbGxsZWN0RGF0YUZyb21UZXh0XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRlRnJvbVRleHQoXHJcbiAgICBjb250ZW50OiBzdHJpbmcsXHJcbiAgICBxdWVyeTogUXVlcnksXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvXHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJnZXREYXRlRnJvbVRleHRcIik7XHJcblxyXG4gICAgbGV0IGRhdGUgPSB3aW5kb3cubW9tZW50KFwiXCIpO1xyXG5cclxuICAgIGxldCBzdHJUZXh0UmVnZXggPSBxdWVyeS5nZXRUYXJnZXQoKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHN0clRleHRSZWdleCk7XHJcbiAgICBsZXQgdGV4dFJlZ2V4ID0gbmV3IFJlZ0V4cChzdHJUZXh0UmVnZXgsIFwiZ21cIik7XHJcbiAgICBsZXQgbWF0Y2g7XHJcbiAgICB3aGlsZSAoKG1hdGNoID0gdGV4dFJlZ2V4LmV4ZWMoY29udGVudCkpKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobWF0Y2gpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdHlwZW9mIG1hdGNoLmdyb3VwcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgbWF0Y2guZ3JvdXBzLnZhbHVlICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGxldCBzdHJEYXRlID0gbWF0Y2guZ3JvdXBzLnZhbHVlLnRyaW0oKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc3RyRGF0ZSk7XHJcblxyXG4gICAgICAgICAgICBkYXRlID0gaGVscGVyLnN0clRvRGF0ZShzdHJEYXRlLCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpO1xyXG4gICAgICAgICAgICBpZiAoZGF0ZS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coZGF0ZSk7XHJcbiAgICByZXR1cm4gZGF0ZTtcclxufVxyXG5cclxuLy8gTm90IHN1cHBvcnQgbXVsdGlwbGUgdGFyZ2V0c1xyXG4vLyBNYXkgbWVyZ2Ugd2l0aCBjb2xsbGVjdERhdGFGcm9tRHZGaWVsZFxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF0ZUZyb21EdkZpZWxkKFxyXG4gICAgY29udGVudDogc3RyaW5nLFxyXG4gICAgcXVlcnk6IFF1ZXJ5LFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mb1xyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiZ2V0RGF0ZUZyb21EdkZpZWxkXCIpO1xyXG5cclxuICAgIGxldCBkYXRlID0gd2luZG93Lm1vbWVudChcIlwiKTtcclxuXHJcbiAgICBsZXQgZHZUYXJnZXQgPSBxdWVyeS5nZXRUYXJnZXQoKTtcclxuICAgIGlmIChxdWVyeS5nZXRQYXJlbnRUYXJnZXQoKSkge1xyXG4gICAgICAgIGR2VGFyZ2V0ID0gcXVlcnkuZ2V0UGFyZW50VGFyZ2V0KCk7IC8vIHVzZSBwYXJlbnQgdGFnIG5hbWUgZm9yIG11bHRpcGxlIHZhbHVlc1xyXG4gICAgfVxyXG4gICAgLy8gRGF0YXZpZXcgYXNrIHVzZXIgdG8gYWRkIGRhc2hlcyBmb3Igc3BhY2VzIGFzIHNlYXJjaCB0YXJnZXRcclxuICAgIC8vIFNvIGEgZGFzaCBtYXkgc3RhbmRzIGZvciBhIHJlYWwgZGFzaCBvciBhIHNwYWNlXHJcbiAgICBkdlRhcmdldCA9IGR2VGFyZ2V0LnJlcGxhY2UoXCItXCIsIFwiW1xcXFxzXFxcXC1dXCIpO1xyXG5cclxuICAgIC8vIFRlc3QgdGhpcyBpbiBSZWdleDEwMVxyXG4gICAgLy8gKF58XFxzKVxcKnswLDJ9ZHZUYXJnZXRcXCp7MCwyfSg6OlxccyooPzx2YWx1ZXM+W1xcZFxcLlxcL1xcLVxcdyxAO1xcc10qKSkoXFxzfCQpXHJcbiAgICBsZXQgc3RySGFzaHRhZ1JlZ2V4ID1cclxuICAgICAgICBcIihefFxcXFxzKVxcXFwqezAsMn1cIiArXHJcbiAgICAgICAgZHZUYXJnZXQgK1xyXG4gICAgICAgIFwiXFxcXCp7MCwyfSg6OlxcXFxzKig/PHZhbHVlcz5bXFxcXGRcXFxcLlxcXFwvXFxcXC1cXFxcdyxAO1xcXFxzXSopKShcXHI/XFxufFxccilcIjtcclxuICAgIC8vIGNvbnNvbGUubG9nKHN0ckhhc2h0YWdSZWdleCk7XHJcbiAgICBsZXQgaGFzaFRhZ1JlZ2V4ID0gbmV3IFJlZ0V4cChzdHJIYXNodGFnUmVnZXgsIFwiZ21cIik7XHJcbiAgICBsZXQgbWF0Y2g7XHJcbiAgICB3aGlsZSAoKG1hdGNoID0gaGFzaFRhZ1JlZ2V4LmV4ZWMoY29udGVudCkpKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobWF0Y2gpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdHlwZW9mIG1hdGNoLmdyb3VwcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgbWF0Y2guZ3JvdXBzLnZhbHVlcyAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBsZXQgc3RyRGF0ZSA9IG1hdGNoLmdyb3Vwcy52YWx1ZXMudHJpbSgpO1xyXG4gICAgICAgICAgICBkYXRlID0gaGVscGVyLnN0clRvRGF0ZShzdHJEYXRlLCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpO1xyXG4gICAgICAgICAgICBpZiAoZGF0ZS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coZGF0ZSk7XHJcbiAgICByZXR1cm4gZGF0ZTtcclxufVxyXG5cclxuLy8gTm90IHN1cHBvcnQgbXVsdGlwbGUgdGFyZ2V0c1xyXG4vLyBNYXkgbWVyZ2Ugd2l0aCBjb2xsbGVjdERhdGFGcm9tRmlsZU1ldGFcclxuZXhwb3J0IGZ1bmN0aW9uIGdldERhdGVGcm9tRmlsZU1ldGEoXHJcbiAgICBmaWxlOiBURmlsZSxcclxuICAgIHF1ZXJ5OiBRdWVyeSxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm9cclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcImdldERhdGVGcm9tRmlsZU1ldGFcIik7XHJcblxyXG4gICAgbGV0IGRhdGUgPSB3aW5kb3cubW9tZW50KFwiXCIpO1xyXG5cclxuICAgIGlmIChmaWxlICYmIGZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGZpbGUuc3RhdCk7XHJcblxyXG4gICAgICAgIGxldCB0YXJnZXQgPSBxdWVyeS5nZXRUYXJnZXQoKTtcclxuICAgICAgICBpZiAodGFyZ2V0ID09PSBcImNEYXRlXCIpIHtcclxuICAgICAgICAgICAgbGV0IGN0aW1lID0gZmlsZS5zdGF0LmN0aW1lO1xyXG4gICAgICAgICAgICBkYXRlID0gaGVscGVyLmdldERhdGVGcm9tVW5peFRpbWUoY3RpbWUsIHJlbmRlckluZm8uZGF0ZUZvcm1hdCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgPT09IFwibURhdGVcIikge1xyXG4gICAgICAgICAgICBsZXQgbXRpbWUgPSBmaWxlLnN0YXQubXRpbWU7XHJcbiAgICAgICAgICAgIGRhdGUgPSBoZWxwZXIuZ2V0RGF0ZUZyb21Vbml4VGltZShtdGltZSwgcmVuZGVySW5mby5kYXRlRm9ybWF0KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldCA9PT0gXCJzaXplXCIpIHtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coZGF0ZSk7XHJcbiAgICByZXR1cm4gZGF0ZTtcclxufVxyXG5cclxuLy8gTm90IHN1cHBvcnQgbXVsdGlwbGUgdGFyZ2V0c1xyXG4vLyBNYXkgbWVyZ2Ugd2l0aCBjb2xsbGVjdERhdGFGcm9tVGFza1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF0ZUZyb21UYXNrKFxyXG4gICAgY29udGVudDogc3RyaW5nLFxyXG4gICAgcXVlcnk6IFF1ZXJ5LFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mb1xyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiZ2V0RGF0ZUZyb21UYXNrXCIpO1xyXG5cclxuICAgIGxldCBkYXRlID0gd2luZG93Lm1vbWVudChcIlwiKTtcclxuICAgIGxldCBzZWFyY2hUeXBlID0gcXVlcnkuZ2V0VHlwZSgpO1xyXG4gICAgLy8gY29uc29sZS5sb2coc2VhcmNoVHlwZSk7XHJcblxyXG4gICAgbGV0IHN0clRleHRSZWdleCA9IHF1ZXJ5LmdldFRhcmdldCgpO1xyXG4gICAgaWYgKHNlYXJjaFR5cGUgPT09IFNlYXJjaFR5cGUuVGFzaykge1xyXG4gICAgICAgIHN0clRleHRSZWdleCA9IFwiXFxcXFtbXFxcXHN4XVxcXFxdXFxcXHNcIiArIHN0clRleHRSZWdleDtcclxuICAgIH0gZWxzZSBpZiAoc2VhcmNoVHlwZSA9PT0gU2VhcmNoVHlwZS5UYXNrRG9uZSkge1xyXG4gICAgICAgIHN0clRleHRSZWdleCA9IFwiXFxcXFt4XFxcXF1cXFxcc1wiICsgc3RyVGV4dFJlZ2V4O1xyXG4gICAgfSBlbHNlIGlmIChzZWFyY2hUeXBlID09PSBTZWFyY2hUeXBlLlRhc2tOb3REb25lKSB7XHJcbiAgICAgICAgc3RyVGV4dFJlZ2V4ID0gXCJcXFxcW1xcXFxzXFxcXF1cXFxcc1wiICsgc3RyVGV4dFJlZ2V4O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBzdHJUZXh0UmVnZXggPSBcIlxcXFxbW1xcXFxzeF1cXFxcXVxcXFxzXCIgKyBzdHJUZXh0UmVnZXg7XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhzdHJUZXh0UmVnZXgpO1xyXG5cclxuICAgIGxldCB0ZXh0UmVnZXggPSBuZXcgUmVnRXhwKHN0clRleHRSZWdleCwgXCJnbVwiKTtcclxuICAgIGxldCBtYXRjaDtcclxuICAgIHdoaWxlICgobWF0Y2ggPSB0ZXh0UmVnZXguZXhlYyhjb250ZW50KSkpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhtYXRjaCk7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICB0eXBlb2YgbWF0Y2guZ3JvdXBzICE9PSBcInVuZGVmaW5lZFwiICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiBtYXRjaC5ncm91cHMudmFsdWUgIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgbGV0IHN0ckRhdGUgPSBtYXRjaC5ncm91cHMudmFsdWUudHJpbSgpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhzdHJEYXRlKTtcclxuXHJcbiAgICAgICAgICAgIGRhdGUgPSBoZWxwZXIuc3RyVG9EYXRlKHN0ckRhdGUsIHJlbmRlckluZm8uZGF0ZUZvcm1hdCk7XHJcbiAgICAgICAgICAgIGlmIChkYXRlLmlzVmFsaWQoKSkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhkYXRlKTtcclxuICAgIHJldHVybiBkYXRlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkVG9EYXRhTWFwKFxyXG4gICAgZGF0YU1hcDogRGF0YU1hcCxcclxuICAgIGRhdGU6IHN0cmluZyxcclxuICAgIHF1ZXJ5OiBRdWVyeSxcclxuICAgIHZhbHVlOiBudW1iZXIgfCBudWxsXHJcbikge1xyXG4gICAgaWYgKCFkYXRhTWFwLmhhcyhkYXRlKSkge1xyXG4gICAgICAgIGxldCBxdWVyeVZhbHVlUGFpcnMgPSBuZXcgQXJyYXk8UXVlcnlWYWx1ZVBhaXI+KCk7XHJcbiAgICAgICAgcXVlcnlWYWx1ZVBhaXJzLnB1c2goeyBxdWVyeTogcXVlcnksIHZhbHVlOiB2YWx1ZSB9KTtcclxuICAgICAgICBkYXRhTWFwLnNldChkYXRlLCBxdWVyeVZhbHVlUGFpcnMpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBsZXQgdGFyZ2V0VmFsdWVQYWlycyA9IGRhdGFNYXAuZ2V0KGRhdGUpO1xyXG4gICAgICAgIHRhcmdldFZhbHVlUGFpcnMucHVzaCh7IHF1ZXJ5OiBxdWVyeSwgdmFsdWU6IHZhbHVlIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29sbGVjdERhdGFGcm9tRnJvbnRtYXR0ZXJUYWcoXHJcbiAgICBmaWxlQ2FjaGU6IENhY2hlZE1ldGFkYXRhLFxyXG4gICAgcXVlcnk6IFF1ZXJ5LFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGRhdGFNYXA6IERhdGFNYXAsXHJcbiAgICB4VmFsdWVNYXA6IFhWYWx1ZU1hcFxyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiY29sbGVjdERhdGFGcm9tRnJvbnRtYXR0ZXJUYWdcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhxdWVyeSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhkYXRhTWFwKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHhWYWx1ZU1hcCk7XHJcbiAgICBsZXQgZnJvbnRNYXR0ZXIgPSBmaWxlQ2FjaGUuZnJvbnRtYXR0ZXI7XHJcbiAgICBsZXQgZnJvbnRNYXR0ZXJUYWdzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgaWYgKGZyb250TWF0dGVyICYmIGZyb250TWF0dGVyLnRhZ3MpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhmcm9udE1hdHRlci50YWdzKTtcclxuICAgICAgICBsZXQgdGFnTWVhc3VyZSA9IDAuMDtcclxuICAgICAgICBsZXQgdGFnRXhpc3QgPSBmYWxzZTtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmcm9udE1hdHRlci50YWdzKSkge1xyXG4gICAgICAgICAgICBmcm9udE1hdHRlclRhZ3MgPSBmcm9udE1hdHRlclRhZ3MuY29uY2F0KGZyb250TWF0dGVyLnRhZ3MpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZyb250TWF0dGVyVGFncy5wdXNoKGZyb250TWF0dGVyLnRhZ3MpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgdGFnIG9mIGZyb250TWF0dGVyVGFncykge1xyXG4gICAgICAgICAgICBpZiAodGFnID09PSBxdWVyeS5nZXRUYXJnZXQoKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gc2ltcGxlIHRhZ1xyXG4gICAgICAgICAgICAgICAgdGFnTWVhc3VyZSA9IHRhZ01lYXN1cmUgKyByZW5kZXJJbmZvLmNvbnN0VmFsdWVbcXVlcnkuZ2V0SWQoKV07XHJcbiAgICAgICAgICAgICAgICB0YWdFeGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBxdWVyeS5hZGROdW1UYXJnZXRzKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGFnLnN0YXJ0c1dpdGgocXVlcnkuZ2V0VGFyZ2V0KCkgKyBcIi9cIikpIHtcclxuICAgICAgICAgICAgICAgIC8vIG5lc3RlZCB0YWdcclxuICAgICAgICAgICAgICAgIHRhZ01lYXN1cmUgPSB0YWdNZWFzdXJlICsgcmVuZGVySW5mby5jb25zdFZhbHVlW3F1ZXJ5LmdldElkKCldO1xyXG4gICAgICAgICAgICAgICAgdGFnRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcXVlcnkuYWRkTnVtVGFyZ2V0cygpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHZhbHVlZC10YWcgaW4gZnJvbnRtYXR0ZXIgaXMgbm90IHN1cHBvcnRlZFxyXG4gICAgICAgICAgICAvLyBiZWNhdXNlIHRoZSBcInRhZzp2YWx1ZVwiIGluIGZyb250bWF0dGVyIHdpbGwgYmUgY29uc2lkZXIgYXMgYSBuZXcgdGFnIGZvciBkaWZmZXJlbnQgdmFsdWVzXHJcblxyXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAodGFnRXhpc3QpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gdGFnTWVhc3VyZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgeFZhbHVlID0geFZhbHVlTWFwLmdldChyZW5kZXJJbmZvLnhEYXRhc2V0W3F1ZXJ5LmdldElkKCldKTtcclxuICAgICAgICAgICAgYWRkVG9EYXRhTWFwKGRhdGFNYXAsIHhWYWx1ZSwgcXVlcnksIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb2xsZWN0RGF0YUZyb21Gcm9udG1hdHRlcktleShcclxuICAgIGZpbGVDYWNoZTogQ2FjaGVkTWV0YWRhdGEsXHJcbiAgICBxdWVyeTogUXVlcnksXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgZGF0YU1hcDogRGF0YU1hcCxcclxuICAgIHhWYWx1ZU1hcDogWFZhbHVlTWFwXHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJjb2xsZWN0RGF0YUZyb21Gcm9udG1hdHRlcktleVwiKTtcclxuXHJcbiAgICBsZXQgZnJvbnRNYXR0ZXIgPSBmaWxlQ2FjaGUuZnJvbnRtYXR0ZXI7XHJcbiAgICBpZiAoZnJvbnRNYXR0ZXIpIHtcclxuICAgICAgICBpZiAoaGVscGVyLmRlZXBWYWx1ZShmcm9udE1hdHRlciwgcXVlcnkuZ2V0VGFyZ2V0KCkpKSB7XHJcbiAgICAgICAgICAgIGxldCB0b1BhcnNlID0gaGVscGVyLmRlZXBWYWx1ZShmcm9udE1hdHRlciwgcXVlcnkuZ2V0VGFyZ2V0KCkpO1xyXG4gICAgICAgICAgICBsZXQgcmV0UGFyc2UgPSBoZWxwZXIucGFyc2VGbG9hdEZyb21BbnkodG9QYXJzZSk7XHJcbiAgICAgICAgICAgIGlmIChyZXRQYXJzZS52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJldFBhcnNlLnR5cGUgPT09IFZhbHVlVHlwZS5UaW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcXVlcnkudmFsdWVUeXBlID0gVmFsdWVUeXBlLlRpbWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBxdWVyeS5hZGROdW1UYXJnZXRzKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgeFZhbHVlID0geFZhbHVlTWFwLmdldChyZW5kZXJJbmZvLnhEYXRhc2V0W3F1ZXJ5LmdldElkKCldKTtcclxuICAgICAgICAgICAgICAgIGFkZFRvRGF0YU1hcChkYXRhTWFwLCB4VmFsdWUsIHF1ZXJ5LCByZXRQYXJzZS52YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgICAgICBxdWVyeS5nZXRQYXJlbnRUYXJnZXQoKSAmJlxyXG4gICAgICAgICAgICBoZWxwZXIuZGVlcFZhbHVlKGZyb250TWF0dGVyLCBxdWVyeS5nZXRQYXJlbnRUYXJnZXQoKSlcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJtdWx0aXBsZSB2YWx1ZXNcIik7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHF1ZXJ5LmdldFRhcmdldCgpKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocXVlcnkuZ2V0UGFyZW50VGFyZ2V0KCkpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhxdWVyeS5nZXRTdWJJZCgpKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXHJcbiAgICAgICAgICAgIC8vICAgICBmcm9udE1hdHRlcltxdWVyeS5nZXRQYXJlbnRUYXJnZXQoKV1cclxuICAgICAgICAgICAgLy8gKTtcclxuICAgICAgICAgICAgbGV0IHRvUGFyc2UgPSBoZWxwZXIuZGVlcFZhbHVlKFxyXG4gICAgICAgICAgICAgICAgZnJvbnRNYXR0ZXIsXHJcbiAgICAgICAgICAgICAgICBxdWVyeS5nZXRQYXJlbnRUYXJnZXQoKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBsZXQgc3BsaXR0ZWQgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0b1BhcnNlKSkge1xyXG4gICAgICAgICAgICAgICAgc3BsaXR0ZWQgPSB0b1BhcnNlLm1hcCgocCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdG9QYXJzZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgc3BsaXR0ZWQgPSB0b1BhcnNlLnNwbGl0KHF1ZXJ5LmdldFNlcGFyYXRvcigpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICBzcGxpdHRlZCAmJlxyXG4gICAgICAgICAgICAgICAgc3BsaXR0ZWQubGVuZ3RoID4gcXVlcnkuZ2V0QWNjZXNzb3IoKSAmJlxyXG4gICAgICAgICAgICAgICAgcXVlcnkuZ2V0QWNjZXNzb3IoKSA+PSAwXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogaXQncyBub3QgZWZmaWNlbnQgdG8gcmV0cmlldmUgb25lIHZhbHVlIGF0IGEgdGltZSwgZW5oYW5jZSB0aGlzXHJcbiAgICAgICAgICAgICAgICBsZXQgc3BsaXR0ZWRQYXJ0ID0gc3BsaXR0ZWRbcXVlcnkuZ2V0QWNjZXNzb3IoKV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJldFBhcnNlID0gaGVscGVyLnBhcnNlRmxvYXRGcm9tQW55KHNwbGl0dGVkUGFydCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmV0UGFyc2UudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmV0UGFyc2UudHlwZSA9PT0gVmFsdWVUeXBlLlRpbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkudmFsdWVUeXBlID0gVmFsdWVUeXBlLlRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5LmFkZE51bVRhcmdldHMoKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgeFZhbHVlID0geFZhbHVlTWFwLmdldChcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySW5mby54RGF0YXNldFtxdWVyeS5nZXRJZCgpXVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkVG9EYXRhTWFwKGRhdGFNYXAsIHhWYWx1ZSwgcXVlcnksIHJldFBhcnNlLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbGxlY3REYXRhRnJvbVdpa2koXHJcbiAgICBmaWxlQ2FjaGU6IENhY2hlZE1ldGFkYXRhLFxyXG4gICAgcXVlcnk6IFF1ZXJ5LFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGRhdGFNYXA6IERhdGFNYXAsXHJcbiAgICB4VmFsdWVNYXA6IFhWYWx1ZU1hcFxyXG4pIHtcclxuICAgIGxldCBsaW5rcyA9IGZpbGVDYWNoZS5saW5rcztcclxuXHJcbiAgICBsZXQgbGlua01lYXN1cmUgPSAwLjA7XHJcbiAgICBsZXQgbGlua0V4aXN0ID0gZmFsc2U7XHJcbiAgICBmb3IgKGxldCBsaW5rIG9mIGxpbmtzKSB7XHJcbiAgICAgICAgaWYgKGxpbmsubGluayA9PT0gcXVlcnkuZ2V0VGFyZ2V0KCkpIHtcclxuICAgICAgICAgICAgbGlua0V4aXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgbGlua01lYXN1cmUgPSBsaW5rTWVhc3VyZSArIHJlbmRlckluZm8uY29uc3RWYWx1ZVtxdWVyeS5nZXRJZCgpXTtcclxuICAgICAgICAgICAgcXVlcnkuYWRkTnVtVGFyZ2V0cygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgbGlua1ZhbHVlID0gbnVsbDtcclxuICAgIGlmIChsaW5rRXhpc3QpIHtcclxuICAgICAgICBsaW5rVmFsdWUgPSBsaW5rTWVhc3VyZTtcclxuICAgIH1cclxuICAgIGxldCB4VmFsdWUgPSB4VmFsdWVNYXAuZ2V0KHJlbmRlckluZm8ueERhdGFzZXRbcXVlcnkuZ2V0SWQoKV0pO1xyXG4gICAgYWRkVG9EYXRhTWFwKGRhdGFNYXAsIHhWYWx1ZSwgcXVlcnksIGxpbmtWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb2xsZWN0RGF0YUZyb21JbmxpbmVUYWcoXHJcbiAgICBjb250ZW50OiBzdHJpbmcsXHJcbiAgICBxdWVyeTogUXVlcnksXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgZGF0YU1hcDogRGF0YU1hcCxcclxuICAgIHhWYWx1ZU1hcDogWFZhbHVlTWFwXHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coY29udGVudCk7XHJcbiAgICAvLyBUZXN0IHRoaXMgaW4gUmVnZXgxMDFcclxuICAgIC8vIChefFxccykjdGFnTmFtZShcXC9bXFx3LV0rKSooOig/PHZhbHVlcz5bXFxkXFwuXFwvLV0qKVthLXpBLVpdKik/KFtcXFxcLiEsXFxcXD87fi1dKik/KFxcc3wkKVxyXG4gICAgbGV0IHRhZ05hbWUgPSBxdWVyeS5nZXRUYXJnZXQoKTtcclxuICAgIGlmIChxdWVyeS5nZXRQYXJlbnRUYXJnZXQoKSkge1xyXG4gICAgICAgIHRhZ05hbWUgPSBxdWVyeS5nZXRQYXJlbnRUYXJnZXQoKTsgLy8gdXNlIHBhcmVudCB0YWcgbmFtZSBmb3IgbXVsdGlwbGUgdmFsdWVzXHJcbiAgICB9XHJcbiAgICBpZiAodGFnTmFtZS5sZW5ndGggPiAxICYmIHRhZ05hbWUuc3RhcnRzV2l0aChcIiNcIikpIHtcclxuICAgICAgICB0YWdOYW1lID0gdGFnTmFtZS5zdWJzdHJpbmcoMSk7XHJcbiAgICB9XHJcbiAgICBsZXQgc3RySGFzaHRhZ1JlZ2V4ID1cclxuICAgICAgICBcIihefFxcXFxzKSNcIiArXHJcbiAgICAgICAgdGFnTmFtZSArXHJcbiAgICAgICAgXCIoXFxcXC9bXFxcXHctXSspKig6KD88dmFsdWVzPltcXFxcZFxcXFwuXFxcXC8tXSopW2EtekEtWl0qKT8oW1xcXFwuISxcXFxcPzt+LV0qKT8oXFxcXHN8JClcIjtcclxuICAgIC8vIGNvbnNvbGUubG9nKHN0ckhhc2h0YWdSZWdleCk7XHJcbiAgICBsZXQgaGFzaFRhZ1JlZ2V4ID0gbmV3IFJlZ0V4cChzdHJIYXNodGFnUmVnZXgsIFwiZ21cIik7XHJcbiAgICBsZXQgbWF0Y2g7XHJcbiAgICBsZXQgdGFnTWVhc3VyZSA9IDAuMDtcclxuICAgIGxldCB0YWdFeGlzdCA9IGZhbHNlO1xyXG4gICAgd2hpbGUgKChtYXRjaCA9IGhhc2hUYWdSZWdleC5leGVjKGNvbnRlbnQpKSkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1hdGNoKTtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICFyZW5kZXJJbmZvLmlnbm9yZUF0dGFjaGVkVmFsdWVbcXVlcnkuZ2V0SWQoKV0gJiZcclxuICAgICAgICAgICAgdHlwZW9mIG1hdGNoLmdyb3VwcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgbWF0Y2guZ3JvdXBzLnZhbHVlcyAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInZhbHVlLWF0dGFjaGVkIHRhZ1wiKTtcclxuICAgICAgICAgICAgbGV0IHZhbHVlcyA9IG1hdGNoLmdyb3Vwcy52YWx1ZXM7XHJcbiAgICAgICAgICAgIGxldCBzcGxpdHRlZCA9IHZhbHVlcy5zcGxpdChxdWVyeS5nZXRTZXBhcmF0b3IoKSk7XHJcbiAgICAgICAgICAgIGlmICghc3BsaXR0ZWQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBpZiAoc3BsaXR0ZWQubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInNpbmdsZS12YWx1ZVwiKTtcclxuICAgICAgICAgICAgICAgIGxldCB0b1BhcnNlID0gc3BsaXR0ZWRbMF0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJldFBhcnNlID0gaGVscGVyLnBhcnNlRmxvYXRGcm9tQW55KHRvUGFyc2UpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJldFBhcnNlLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJldFBhcnNlLnR5cGUgPT09IFZhbHVlVHlwZS5UaW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ01lYXN1cmUgPSByZXRQYXJzZS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeS52YWx1ZVR5cGUgPSBWYWx1ZVR5cGUuVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkuYWRkTnVtVGFyZ2V0cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFyZW5kZXJJbmZvLmlnbm9yZVplcm9WYWx1ZVtxdWVyeS5nZXRJZCgpXSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0UGFyc2UudmFsdWUgIT09IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWdNZWFzdXJlICs9IHJldFBhcnNlLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkuYWRkTnVtVGFyZ2V0cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgICAgICAgICAgc3BsaXR0ZWQubGVuZ3RoID4gcXVlcnkuZ2V0QWNjZXNzb3IoKSAmJlxyXG4gICAgICAgICAgICAgICAgcXVlcnkuZ2V0QWNjZXNzb3IoKSA+PSAwXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRvUGFyc2UgPSBzcGxpdHRlZFtxdWVyeS5nZXRBY2Nlc3NvcigpXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmV0UGFyc2UgPSBoZWxwZXIucGFyc2VGbG9hdEZyb21BbnkodG9QYXJzZSk7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHJldFBhcnNlKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZXRQYXJzZS52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXRQYXJzZS50eXBlID09PSBWYWx1ZVR5cGUuVGltZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdNZWFzdXJlID0gcmV0UGFyc2UudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ0V4aXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkudmFsdWVUeXBlID0gVmFsdWVUeXBlLlRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LmFkZE51bVRhcmdldHMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdNZWFzdXJlICs9IHJldFBhcnNlLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdFeGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LmFkZE51bVRhcmdldHMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInNpbXBsZS10YWdcIik7XHJcbiAgICAgICAgICAgIHRhZ01lYXN1cmUgPSB0YWdNZWFzdXJlICsgcmVuZGVySW5mby5jb25zdFZhbHVlW3F1ZXJ5LmdldElkKCldO1xyXG4gICAgICAgICAgICB0YWdFeGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgIHF1ZXJ5LmFkZE51bVRhcmdldHMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHZhbHVlID0gbnVsbDtcclxuICAgIGlmICh0YWdFeGlzdCkge1xyXG4gICAgICAgIHZhbHVlID0gdGFnTWVhc3VyZTtcclxuICAgIH1cclxuICAgIGxldCB4VmFsdWUgPSB4VmFsdWVNYXAuZ2V0KHJlbmRlckluZm8ueERhdGFzZXRbcXVlcnkuZ2V0SWQoKV0pO1xyXG4gICAgYWRkVG9EYXRhTWFwKGRhdGFNYXAsIHhWYWx1ZSwgcXVlcnksIHZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbGxlY3REYXRhRnJvbVRleHQoXHJcbiAgICBjb250ZW50OiBzdHJpbmcsXHJcbiAgICBxdWVyeTogUXVlcnksXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgZGF0YU1hcDogRGF0YU1hcCxcclxuICAgIHhWYWx1ZU1hcDogWFZhbHVlTWFwXHJcbikge1xyXG4gICAgbGV0IHN0clRleHRSZWdleCA9IHF1ZXJ5LmdldFRhcmdldCgpO1xyXG4gICAgLy8gY29uc29sZS5sb2coc3RyVGV4dFJlZ2V4KTtcclxuICAgIGxldCB0ZXh0UmVnZXggPSBuZXcgUmVnRXhwKHN0clRleHRSZWdleCwgXCJnbVwiKTtcclxuICAgIGxldCBtYXRjaDtcclxuICAgIGxldCB0ZXh0TWVhc3VyZSA9IDAuMDtcclxuICAgIGxldCB0ZXh0RXhpc3QgPSBmYWxzZTtcclxuICAgIHdoaWxlICgobWF0Y2ggPSB0ZXh0UmVnZXguZXhlYyhjb250ZW50KSkpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhtYXRjaCk7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAhcmVuZGVySW5mby5pZ25vcmVBdHRhY2hlZFZhbHVlW3F1ZXJ5LmdldElkKCldICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiBtYXRjaC5ncm91cHMgIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgLy8gbWF0Y2hbMF0gd2hvbGUgbWF0Y2hcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJ2YWx1ZWQtdGV4dFwiKTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtYXRjaC5ncm91cHMudmFsdWUgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgIC8vIHNldCBhcyBudWxsIGZvciBtaXNzaW5nIHZhbHVlIGlmIGl0IGlzIHZhbHVlZC10YWdcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHBhcnNlRmxvYXQobWF0Y2guZ3JvdXBzLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGlmICghTnVtYmVyLmlzTmFOKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgIXJlbmRlckluZm8uaWdub3JlWmVyb1ZhbHVlW3F1ZXJ5LmdldElkKCldIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICE9PSAwXHJcbiAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRNZWFzdXJlICs9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0RXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeS5hZGROdW1UYXJnZXRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJzaW1wbGUtdGV4dFwiKTtcclxuICAgICAgICAgICAgdGV4dE1lYXN1cmUgPSB0ZXh0TWVhc3VyZSArIHJlbmRlckluZm8uY29uc3RWYWx1ZVtxdWVyeS5nZXRJZCgpXTtcclxuICAgICAgICAgICAgdGV4dEV4aXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgcXVlcnkuYWRkTnVtVGFyZ2V0cygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodGV4dEV4aXN0KSB7XHJcbiAgICAgICAgbGV0IHhWYWx1ZSA9IHhWYWx1ZU1hcC5nZXQocmVuZGVySW5mby54RGF0YXNldFtxdWVyeS5nZXRJZCgpXSk7XHJcbiAgICAgICAgYWRkVG9EYXRhTWFwKGRhdGFNYXAsIHhWYWx1ZSwgcXVlcnksIHRleHRNZWFzdXJlKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbGxlY3REYXRhRnJvbUZpbGVNZXRhKFxyXG4gICAgZmlsZTogVEZpbGUsXHJcbiAgICBjb250ZW50OiBzdHJpbmcsXHJcbiAgICBxdWVyeTogUXVlcnksXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgZGF0YU1hcDogRGF0YU1hcCxcclxuICAgIHhWYWx1ZU1hcDogWFZhbHVlTWFwXHJcbikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJjb2xsZWN0RGF0YUZyb21GaWxlTWV0YVwiKTtcclxuXHJcbiAgICBpZiAoZmlsZSAmJiBmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhmaWxlLnN0YXQpO1xyXG5cclxuICAgICAgICBsZXQgdGFyZ2V0ID0gcXVlcnkuZ2V0VGFyZ2V0KCk7XHJcbiAgICAgICAgbGV0IHhWYWx1ZSA9IHhWYWx1ZU1hcC5nZXQocmVuZGVySW5mby54RGF0YXNldFtxdWVyeS5nZXRJZCgpXSk7XHJcblxyXG4gICAgICAgIGlmICh0YXJnZXQgPT09IFwiY0RhdGVcIikge1xyXG4gICAgICAgICAgICBsZXQgY3RpbWUgPSBmaWxlLnN0YXQuY3RpbWU7XHJcbiAgICAgICAgICAgIHF1ZXJ5LnZhbHVlVHlwZSA9IFZhbHVlVHlwZS5EYXRlO1xyXG4gICAgICAgICAgICBxdWVyeS5hZGROdW1UYXJnZXRzKCk7XHJcbiAgICAgICAgICAgIGFkZFRvRGF0YU1hcChkYXRhTWFwLCB4VmFsdWUsIHF1ZXJ5LCBjdGltZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgPT09IFwibURhdGVcIikge1xyXG4gICAgICAgICAgICBsZXQgbXRpbWUgPSBmaWxlLnN0YXQubXRpbWU7XHJcbiAgICAgICAgICAgIHF1ZXJ5LnZhbHVlVHlwZSA9IFZhbHVlVHlwZS5EYXRlO1xyXG4gICAgICAgICAgICBxdWVyeS5hZGROdW1UYXJnZXRzKCk7XHJcbiAgICAgICAgICAgIGFkZFRvRGF0YU1hcChkYXRhTWFwLCB4VmFsdWUsIHF1ZXJ5LCBtdGltZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgPT09IFwic2l6ZVwiKSB7XHJcbiAgICAgICAgICAgIGxldCBzaXplID0gZmlsZS5zdGF0LnNpemU7XHJcbiAgICAgICAgICAgIHF1ZXJ5LmFkZE51bVRhcmdldHMoKTtcclxuICAgICAgICAgICAgYWRkVG9EYXRhTWFwKGRhdGFNYXAsIHhWYWx1ZSwgcXVlcnksIHNpemUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ID09PSBcIm51bVdvcmRzXCIpIHtcclxuICAgICAgICAgICAgbGV0IG51bVdvcmRzID0gaGVscGVyLmdldFdvcmRDb3VudChjb250ZW50KTtcclxuICAgICAgICAgICAgYWRkVG9EYXRhTWFwKGRhdGFNYXAsIHhWYWx1ZSwgcXVlcnksIG51bVdvcmRzKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldCA9PT0gXCJudW1DaGFyc1wiKSB7XHJcbiAgICAgICAgICAgIGxldCBudW1DaGFycyA9IGhlbHBlci5nZXRDaGFyYWN0ZXJDb3VudChjb250ZW50KTtcclxuICAgICAgICAgICAgcXVlcnkuYWRkTnVtVGFyZ2V0cygpO1xyXG4gICAgICAgICAgICBhZGRUb0RhdGFNYXAoZGF0YU1hcCwgeFZhbHVlLCBxdWVyeSwgbnVtQ2hhcnMpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ID09PSBcIm51bVNlbnRlbmNlc1wiKSB7XHJcbiAgICAgICAgICAgIGxldCBudW1TZW50ZW5jZXMgPSBoZWxwZXIuZ2V0U2VudGVuY2VDb3VudChjb250ZW50KTtcclxuICAgICAgICAgICAgcXVlcnkuYWRkTnVtVGFyZ2V0cygpO1xyXG4gICAgICAgICAgICBhZGRUb0RhdGFNYXAoZGF0YU1hcCwgeFZhbHVlLCBxdWVyeSwgbnVtU2VudGVuY2VzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb2xsZWN0RGF0YUZyb21EdkZpZWxkKFxyXG4gICAgY29udGVudDogc3RyaW5nLFxyXG4gICAgcXVlcnk6IFF1ZXJ5LFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGRhdGFNYXA6IERhdGFNYXAsXHJcbiAgICB4VmFsdWVNYXA6IFhWYWx1ZU1hcFxyXG4pIHtcclxuICAgIGxldCBkdlRhcmdldCA9IHF1ZXJ5LmdldFRhcmdldCgpO1xyXG4gICAgaWYgKHF1ZXJ5LmdldFBhcmVudFRhcmdldCgpKSB7XHJcbiAgICAgICAgZHZUYXJnZXQgPSBxdWVyeS5nZXRQYXJlbnRUYXJnZXQoKTsgLy8gdXNlIHBhcmVudCB0YWcgbmFtZSBmb3IgbXVsdGlwbGUgdmFsdWVzXHJcbiAgICB9XHJcbiAgICAvLyBEYXRhdmlldyBhc2sgdXNlciB0byBhZGQgZGFzaGVzIGZvciBzcGFjZXMgYXMgc2VhcmNoIHRhcmdldFxyXG4gICAgLy8gU28gYSBkYXNoIG1heSBzdGFuZHMgZm9yIGEgcmVhbCBkYXNoIG9yIGEgc3BhY2VcclxuICAgIGR2VGFyZ2V0ID0gZHZUYXJnZXQucmVwbGFjZShcIi1cIiwgXCJbXFxcXHNcXFxcLV1cIik7XHJcblxyXG4gICAgLy8gVGVzdCB0aGlzIGluIFJlZ2V4MTAxXHJcbiAgICAvLyAoXnxcXHMpXFwqezAsMn1kdlRhcmdldFxcKnswLDJ9KDo6XFxzKig/PHZhbHVlcz5bXFxkXFwuXFwvXFwtXFx3LEA7XFxzXSopKShcXHN8JClcclxuICAgIGxldCBzdHJIYXNodGFnUmVnZXggPVxyXG4gICAgICAgIFwiKF58XFxcXHMpXFxcXCp7MCwyfVwiICtcclxuICAgICAgICBkdlRhcmdldCArXHJcbiAgICAgICAgXCJcXFxcKnswLDJ9KDo6XFxcXHMqKD88dmFsdWVzPltcXFxcZFxcXFwuXFxcXC9cXFxcLVxcXFx3LEA7XFxcXHNdKikpKFxccj9cXG58XFxyfCQpXCI7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhzdHJIYXNodGFnUmVnZXgpO1xyXG4gICAgbGV0IGhhc2hUYWdSZWdleCA9IG5ldyBSZWdFeHAoc3RySGFzaHRhZ1JlZ2V4LCBcImdtXCIpO1xyXG4gICAgbGV0IG1hdGNoO1xyXG4gICAgbGV0IHRhZ01lYXN1cmUgPSAwLjA7XHJcbiAgICBsZXQgdGFnRXhpc3QgPSBmYWxzZTtcclxuICAgIHdoaWxlICgobWF0Y2ggPSBoYXNoVGFnUmVnZXguZXhlYyhjb250ZW50KSkpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhtYXRjaCk7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICB0eXBlb2YgbWF0Y2guZ3JvdXBzICE9PSBcInVuZGVmaW5lZFwiICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiBtYXRjaC5ncm91cHMudmFsdWVzICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZXMgPSBtYXRjaC5ncm91cHMudmFsdWVzLnRyaW0oKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2codmFsdWVzKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocXVlcnkuZ2V0U2VwYXJhdG9yKCkpO1xyXG4gICAgICAgICAgICBsZXQgc3BsaXR0ZWQgPSB2YWx1ZXMuc3BsaXQocXVlcnkuZ2V0U2VwYXJhdG9yKCkpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhzcGxpdHRlZCk7XHJcbiAgICAgICAgICAgIGlmICghc3BsaXR0ZWQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBpZiAoc3BsaXR0ZWQubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInNpbmdsZS12YWx1ZVwiKTtcclxuICAgICAgICAgICAgICAgIGxldCB0b1BhcnNlID0gc3BsaXR0ZWRbMF07XHJcbiAgICAgICAgICAgICAgICBsZXQgcmV0UGFyc2UgPSBoZWxwZXIucGFyc2VGbG9hdEZyb21BbnkodG9QYXJzZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmV0UGFyc2UudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmV0UGFyc2UudHlwZSA9PT0gVmFsdWVUeXBlLlRpbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnTWVhc3VyZSA9IHJldFBhcnNlLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdFeGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LnZhbHVlVHlwZSA9IFZhbHVlVHlwZS5UaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeS5hZGROdW1UYXJnZXRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIXJlbmRlckluZm8uaWdub3JlWmVyb1ZhbHVlW3F1ZXJ5LmdldElkKCldIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXRQYXJzZS52YWx1ZSAhPT0gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ01lYXN1cmUgKz0gcmV0UGFyc2UudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWdFeGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeS5hZGROdW1UYXJnZXRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgICAgICAgICBzcGxpdHRlZC5sZW5ndGggPiBxdWVyeS5nZXRBY2Nlc3NvcigpICYmXHJcbiAgICAgICAgICAgICAgICBxdWVyeS5nZXRBY2Nlc3NvcigpID49IDBcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBpdCdzIG5vdCBlZmZpY2VudCB0byByZXRyaWV2ZSBvbmUgdmFsdWUgYXQgYSB0aW1lLCBlbmhhbmNlIHRoaXNcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwibXVsdGlwbGUtdmFsdWVzXCIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHRvUGFyc2UgPSBzcGxpdHRlZFtxdWVyeS5nZXRBY2Nlc3NvcigpXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmV0UGFyc2UgPSBoZWxwZXIucGFyc2VGbG9hdEZyb21BbnkodG9QYXJzZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmV0UGFyc2UudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmV0UGFyc2UudHlwZSA9PT0gVmFsdWVUeXBlLlRpbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnTWVhc3VyZSA9IHJldFBhcnNlLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdFeGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LnZhbHVlVHlwZSA9IFZhbHVlVHlwZS5UaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeS5hZGROdW1UYXJnZXRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnTWVhc3VyZSArPSByZXRQYXJzZS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeS5hZGROdW1UYXJnZXRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJzaW1wbGUtdGFnXCIpO1xyXG4gICAgICAgICAgICB0YWdNZWFzdXJlID0gdGFnTWVhc3VyZSArIHJlbmRlckluZm8uY29uc3RWYWx1ZVtxdWVyeS5nZXRJZCgpXTtcclxuICAgICAgICAgICAgdGFnRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICBxdWVyeS5hZGROdW1UYXJnZXRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxldCB2YWx1ZSA9IG51bGw7XHJcbiAgICBpZiAodGFnRXhpc3QpIHtcclxuICAgICAgICB2YWx1ZSA9IHRhZ01lYXN1cmU7XHJcbiAgICB9XHJcbiAgICBsZXQgeFZhbHVlID0geFZhbHVlTWFwLmdldChyZW5kZXJJbmZvLnhEYXRhc2V0W3F1ZXJ5LmdldElkKCldKTtcclxuICAgIGFkZFRvRGF0YU1hcChkYXRhTWFwLCB4VmFsdWUsIHF1ZXJ5LCB2YWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb2xsZWN0RGF0YUZyb21UYXNrKFxyXG4gICAgY29udGVudDogc3RyaW5nLFxyXG4gICAgcXVlcnk6IFF1ZXJ5LFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGRhdGFNYXA6IERhdGFNYXAsXHJcbiAgICB4VmFsdWVNYXA6IFhWYWx1ZU1hcFxyXG4pIHtcclxuICAgIGxldCBzZWFyY2hUeXBlID0gcXVlcnkuZ2V0VHlwZSgpO1xyXG4gICAgLy8gY29uc29sZS5sb2coc2VhcmNoVHlwZSk7XHJcblxyXG4gICAgbGV0IHN0clRleHRSZWdleCA9IHF1ZXJ5LmdldFRhcmdldCgpO1xyXG4gICAgaWYgKHNlYXJjaFR5cGUgPT09IFNlYXJjaFR5cGUuVGFzaykge1xyXG4gICAgICAgIHN0clRleHRSZWdleCA9IFwiXFxcXFtbXFxcXHN4XVxcXFxdXFxcXHNcIiArIHN0clRleHRSZWdleDtcclxuICAgIH0gZWxzZSBpZiAoc2VhcmNoVHlwZSA9PT0gU2VhcmNoVHlwZS5UYXNrRG9uZSkge1xyXG4gICAgICAgIHN0clRleHRSZWdleCA9IFwiXFxcXFt4XFxcXF1cXFxcc1wiICsgc3RyVGV4dFJlZ2V4O1xyXG4gICAgfSBlbHNlIGlmIChzZWFyY2hUeXBlID09PSBTZWFyY2hUeXBlLlRhc2tOb3REb25lKSB7XHJcbiAgICAgICAgc3RyVGV4dFJlZ2V4ID0gXCJcXFxcW1xcXFxzXFxcXF1cXFxcc1wiICsgc3RyVGV4dFJlZ2V4O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBhbGxcclxuICAgICAgICBzdHJUZXh0UmVnZXggPSBcIlxcXFxbW1xcXFxzeF1cXFxcXVxcXFxzXCIgKyBzdHJUZXh0UmVnZXg7XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhzdHJUZXh0UmVnZXgpO1xyXG5cclxuICAgIGxldCB0ZXh0UmVnZXggPSBuZXcgUmVnRXhwKHN0clRleHRSZWdleCwgXCJnbVwiKTtcclxuICAgIGxldCBtYXRjaDtcclxuICAgIGxldCB0ZXh0TWVhc3VyZSA9IDAuMDtcclxuICAgIGxldCB0ZXh0RXhpc3QgPSBmYWxzZTtcclxuICAgIHdoaWxlICgobWF0Y2ggPSB0ZXh0UmVnZXguZXhlYyhjb250ZW50KSkpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhtYXRjaCk7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAhcmVuZGVySW5mby5pZ25vcmVBdHRhY2hlZFZhbHVlW3F1ZXJ5LmdldElkKCldICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiBtYXRjaC5ncm91cHMgIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgLy8gbWF0Y2hbMF0gd2hvbGUgbWF0Y2hcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJ2YWx1ZWQtdGV4dFwiKTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtYXRjaC5ncm91cHMudmFsdWUgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgIC8vIHNldCBhcyBudWxsIGZvciBtaXNzaW5nIHZhbHVlIGlmIGl0IGlzIHZhbHVlZC10YWdcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHBhcnNlRmxvYXQobWF0Y2guZ3JvdXBzLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGlmICghTnVtYmVyLmlzTmFOKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgIXJlbmRlckluZm8uaWdub3JlWmVyb1ZhbHVlW3F1ZXJ5LmdldElkKCldIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICE9PSAwXHJcbiAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRNZWFzdXJlICs9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0RXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeS5hZGROdW1UYXJnZXRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJzaW1wbGUtdGV4dFwiKTtcclxuICAgICAgICAgICAgdGV4dE1lYXN1cmUgPSB0ZXh0TWVhc3VyZSArIHJlbmRlckluZm8uY29uc3RWYWx1ZVtxdWVyeS5nZXRJZCgpXTtcclxuICAgICAgICAgICAgdGV4dEV4aXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgcXVlcnkuYWRkTnVtVGFyZ2V0cygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodGV4dEV4aXN0KSB7XHJcbiAgICAgICAgbGV0IHhWYWx1ZSA9IHhWYWx1ZU1hcC5nZXQocmVuZGVySW5mby54RGF0YXNldFtxdWVyeS5nZXRJZCgpXSk7XHJcbiAgICAgICAgYWRkVG9EYXRhTWFwKGRhdGFNYXAsIHhWYWx1ZSwgcXVlcnksIHRleHRNZWFzdXJlKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBBcHAsIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IFRyYWNrZXIgZnJvbSBcIi4vbWFpblwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUcmFja2VyU2V0dGluZ3Mge1xyXG4gICAgZm9sZGVyOiBzdHJpbmc7XHJcbiAgICBkYXRlRm9ybWF0OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1NFVFRJTkdTOiBUcmFja2VyU2V0dGluZ3MgPSB7XHJcbiAgICBmb2xkZXI6IFwiL1wiLFxyXG4gICAgZGF0ZUZvcm1hdDogXCJZWVlZLU1NLUREXCIsXHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgVHJhY2tlclNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuICAgIHBsdWdpbjogVHJhY2tlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBUcmFja2VyKSB7XHJcbiAgICAgICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xyXG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG4gICAgfVxyXG5cclxuICAgIGRpc3BsYXkoKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XHJcblxyXG4gICAgICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZShcIkRlZmF1bHQgZm9sZGVyIGxvY2F0aW9uXCIpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKFxyXG4gICAgICAgICAgICAgICAgXCJGaWxlcyBpbiB0aGlzIGZvbGRlciB3aWxsIGJlIHBhcnNlZCBhbmQgdXNlZCBhcyBpbnB1dCBkYXRhIG9mIHRoZSB0cmFja2VyIHBsdWdpbi5cXG5Zb3UgY2FuIGFsc28gb3ZlcnJpZGUgaXQgdXNpbmcgJ2ZvbGRlcicgYXJndW1lbnQgaW50IHRoZSB0cmFja2VyIGNvZGVibG9jay5cIlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PlxyXG4gICAgICAgICAgICAgICAgdGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihcIkZvbGRlciBQYXRoXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcilcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlciA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoXCJEZWZhdWx0IGRhdGUgZm9ybWF0XCIpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKFxyXG4gICAgICAgICAgICAgICAgXCJUaGlzIGZvcm1hdCBpcyB1c2VkIHRvIHBhcnNlIHRoZSBkYXRlIGluIHlvdXIgZGlhcnkgdGl0bGUuXFxuWW91IGNhbiBhbHNvIG92ZXJyaWRlIGl0IHVzaW5nICdkYXRlLWZvcm1hdCcgYXJndW1lbnQgaW4gdGhlIHRyYWNrZXIgY29kZWJsb2NrLlwiXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgLmFkZFRleHQoKHRleHQpID0+XHJcbiAgICAgICAgICAgICAgICB0ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKFwiWVlZWS1NTS1ERFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kYXRlRm9ybWF0KVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZGF0ZUZvcm1hdCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEFwcCwgQ2FjaGVkTWV0YWRhdGEsIFBsdWdpbiB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LCBNYXJrZG93blZpZXcsIEVkaXRvciB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBURmlsZSwgVEZvbGRlciwgbm9ybWFsaXplUGF0aCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyByZW5kZXIsIHJlbmRlckVycm9yTWVzc2FnZSB9IGZyb20gXCIuL3JlbmRlcmluZ1wiO1xyXG5pbXBvcnQgeyBnZXRSZW5kZXJJbmZvRnJvbVlhbWwgfSBmcm9tIFwiLi9wYXJzaW5nXCI7XHJcbmltcG9ydCB7XHJcbiAgICBEYXRhc2V0cyxcclxuICAgIFF1ZXJ5LFxyXG4gICAgUXVlcnlWYWx1ZVBhaXIsXHJcbiAgICBHcmFwaFR5cGUsXHJcbiAgICBTZWFyY2hUeXBlLFxyXG4gICAgVGFibGVEYXRhLFxyXG4gICAgUmVuZGVySW5mbyxcclxuICAgIFhWYWx1ZU1hcCxcclxuICAgIERhdGFNYXAsXHJcbiAgICBDdXN0b21EYXRhc2V0SW5mbyxcclxufSBmcm9tIFwiLi9kYXRhXCI7XHJcbmltcG9ydCAqIGFzIGNvbGxlY3RpbmcgZnJvbSBcIi4vY29sbGVjdGluZ1wiO1xyXG5pbXBvcnQge1xyXG4gICAgVHJhY2tlclNldHRpbmdzLFxyXG4gICAgREVGQVVMVF9TRVRUSU5HUyxcclxuICAgIFRyYWNrZXJTZXR0aW5nVGFiLFxyXG59IGZyb20gXCIuL3NldHRpbmdzXCI7XHJcbmltcG9ydCAqIGFzIGhlbHBlciBmcm9tIFwiLi9oZWxwZXJcIjtcclxuaW1wb3J0IHsgTW9tZW50IH0gZnJvbSBcIm1vbWVudFwiO1xyXG4vLyBpbXBvcnQgeyBnZXREYWlseU5vdGVTZXR0aW5ncyB9IGZyb20gXCJvYnNpZGlhbi1kYWlseS1ub3Rlcy1pbnRlcmZhY2VcIjtcclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgICAgIGFwcDogQXBwO1xyXG4gICAgICAgIG1vbWVudDogKCkgPT4gTW9tZW50O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFja2VyIGV4dGVuZHMgUGx1Z2luIHtcclxuICAgIHNldHRpbmdzOiBUcmFja2VyU2V0dGluZ3M7XHJcblxyXG4gICAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwibG9hZGluZyBvYnNpZGlhbi10cmFja2VyIHBsdWdpblwiKTtcclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBUcmFja2VyU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xyXG5cclxuICAgICAgICB0aGlzLnJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IoXHJcbiAgICAgICAgICAgIFwidHJhY2tlclwiLFxyXG4gICAgICAgICAgICB0aGlzLnBvc3Rwcm9jZXNzb3IuYmluZCh0aGlzKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgICAgICAgIGlkOiBcImFkZC1saW5lLWNoYXJ0LXRyYWNrZXJcIixcclxuICAgICAgICAgICAgbmFtZTogXCJBZGQgTGluZSBDaGFydCBUcmFja2VyXCIsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB0aGlzLmFkZENvZGVCbG9jayhHcmFwaFR5cGUuTGluZSksXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgICAgICAgIGlkOiBcImFkZC1iYXItY2hhcnQtdHJhY2tlclwiLFxyXG4gICAgICAgICAgICBuYW1lOiBcIkFkZCBCYXIgQ2hhcnQgVHJhY2tlclwiLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4gdGhpcy5hZGRDb2RlQmxvY2soR3JhcGhUeXBlLkJhciksXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgICAgICAgIGlkOiBcImFkZC1zdW1tYXJ5LXRyYWNrZXJcIixcclxuICAgICAgICAgICAgbmFtZTogXCJBZGQgU3VtbWFyeSBUcmFja2VyXCIsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB0aGlzLmFkZENvZGVCbG9jayhHcmFwaFR5cGUuU3VtbWFyeSksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKFxyXG4gICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgREVGQVVMVF9TRVRUSU5HUyxcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkRGF0YSgpXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcclxuICAgIH1cclxuXHJcbiAgICBvbnVubG9hZCgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcInVubG9hZGluZyBvYnNpZGlhbi10cmFja2VyIHBsdWdpblwiKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRGaWxlc0luRm9sZGVyKFxyXG4gICAgICAgIGZvbGRlcjogVEZvbGRlcixcclxuICAgICAgICBpbmNsdWRlU3ViRm9sZGVyczogYm9vbGVhbiA9IHRydWVcclxuICAgICk6IFRGaWxlW10ge1xyXG4gICAgICAgIGxldCBmaWxlczogVEZpbGVbXSA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpdGVtIG9mIGZvbGRlci5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFRGaWxlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5leHRlbnNpb24gPT09IFwibWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGVzLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFRGb2xkZXIgJiYgaW5jbHVkZVN1YkZvbGRlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWxlcyA9IGZpbGVzLmNvbmNhdCh0aGlzLmdldEZpbGVzSW5Gb2xkZXIoaXRlbSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmlsZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RmlsZXMoZm9sZGVyVG9TZWFyY2g6IHN0cmluZywgaW5jbHVkZVN1YkZvbGRlcnM6IGJvb2xlYW4gPSB0cnVlKSB7XHJcbiAgICAgICAgbGV0IGZpbGVzOiBURmlsZVtdID0gW107XHJcblxyXG4gICAgICAgIGxldCBmb2xkZXIgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoXHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZVBhdGgoZm9sZGVyVG9TZWFyY2gpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoIWZvbGRlciB8fCAhKGZvbGRlciBpbnN0YW5jZW9mIFRGb2xkZXIpKSB7XHJcbiAgICAgICAgICAgIC8vIEZvbGRlciBub3QgZXhpc3RzXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZmlsZXMgPSBmaWxlcy5jb25jYXQodGhpcy5nZXRGaWxlc0luRm9sZGVyKGZvbGRlcikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZpbGVzO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3Rwcm9jZXNzb3IoXHJcbiAgICAgICAgc291cmNlOiBzdHJpbmcsXHJcbiAgICAgICAgZWw6IEhUTUxFbGVtZW50LFxyXG4gICAgICAgIGN0eDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dFxyXG4gICAgKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJwb3N0cHJvY2Vzc1wiKTtcclxuICAgICAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG5cclxuICAgICAgICBsZXQgeWFtbFRleHQgPSBzb3VyY2UudHJpbSgpO1xyXG4gICAgICAgIGxldCByZXRSZW5kZXJJbmZvID0gZ2V0UmVuZGVySW5mb0Zyb21ZYW1sKHlhbWxUZXh0LCB0aGlzKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldFJlbmRlckluZm8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IHJldFJlbmRlckluZm87XHJcbiAgICAgICAgICAgIHJlbmRlckVycm9yTWVzc2FnZShjYW52YXMsIGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGNhbnZhcyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHJlbmRlckluZm8gPSByZXRSZW5kZXJJbmZvIGFzIFJlbmRlckluZm87XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mbyk7XHJcblxyXG4gICAgICAgIC8vIEdldCBmaWxlc1xyXG4gICAgICAgIGxldCBmaWxlczogVEZpbGVbXTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBmaWxlcyA9IHRoaXMuZ2V0RmlsZXMocmVuZGVySW5mby5mb2xkZXIpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IGUubWVzc2FnZTtcclxuICAgICAgICAgICAgcmVuZGVyRXJyb3JNZXNzYWdlKGNhbnZhcywgZXJyb3JNZXNzYWdlKTtcclxuICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoY2FudmFzKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhmaWxlcyk7XHJcblxyXG4gICAgICAgIC8vIGxldCBkYWlseU5vdGVzU2V0dGluZ3MgPSBnZXREYWlseU5vdGVTZXR0aW5ncygpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGRhaWx5Tm90ZXNTZXR0aW5ncyk7XHJcbiAgICAgICAgLy8gSSBhbHdheXMgZ290IFlZWVktTU0tREQgZnJvbSBkYWlseU5vdGVzU2V0dGluZ3MuZm9ybWF0XHJcbiAgICAgICAgLy8gVXNlIG93biBzZXR0aW5ncyBwYW5lbCBmb3Igbm93XHJcblxyXG4gICAgICAgIC8vIENvbGxlY3RpbmcgZGF0YSB0byBkYXRhTWFwIGZpcnN0XHJcbiAgICAgICAgbGV0IG1pbkRhdGUgPSB3aW5kb3cubW9tZW50KFwiXCIpO1xyXG4gICAgICAgIGxldCBtYXhEYXRlID0gd2luZG93Lm1vbWVudChcIlwiKTtcclxuICAgICAgICBsZXQgZmlsZUNvdW50ZXIgPSAwO1xyXG5cclxuICAgICAgICBsZXQgZGF0YU1hcDogRGF0YU1hcCA9IG5ldyBNYXAoKTsgLy8ge3N0ckRhdGU6IFtxdWVyeTogdmFsdWUsIC4uLl19XHJcbiAgICAgICAgLy8gQ29sbGVjdCBkYXRhIGZyb20gZmlsZXMsIGVhY2ggZmlsZSBoYXMgb25lIGRhdGEgcG9pbnQgZm9yIGVhY2ggcXVlcnlcclxuICAgICAgICBjb25zdCBsb29wRmlsZVByb21pc2VzID0gZmlsZXMubWFwKGFzeW5jIChmaWxlKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGZpbGUuYmFzZW5hbWUpO1xyXG4gICAgICAgICAgICAvLyBHZXQgZmlsZUNhY2hlIGFuZCBjb250ZW50XHJcbiAgICAgICAgICAgIGxldCBmaWxlQ2FjaGU6IENhY2hlZE1ldGFkYXRhID0gbnVsbDtcclxuICAgICAgICAgICAgbGV0IG5lZWRGaWxlQ2FjaGUgPSByZW5kZXJJbmZvLnF1ZXJpZXMuc29tZSgocSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IHR5cGUgPSBxLmdldFR5cGUoKTtcclxuICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSBxLmdldFRhcmdldCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT09IFNlYXJjaFR5cGUuRnJvbnRtYXR0ZXIgfHxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlID09PSBTZWFyY2hUeXBlLlRhZyB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT09IFNlYXJjaFR5cGUuV2lraVxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAobmVlZEZpbGVDYWNoZSkge1xyXG4gICAgICAgICAgICAgICAgZmlsZUNhY2hlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBjb250ZW50OiBzdHJpbmcgPSBudWxsO1xyXG4gICAgICAgICAgICBsZXQgbmVlZENvbnRlbnQgPSByZW5kZXJJbmZvLnF1ZXJpZXMuc29tZSgocSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IHR5cGUgPSBxLmdldFR5cGUoKTtcclxuICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSBxLmdldFRhcmdldCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT09IFNlYXJjaFR5cGUuVGFnIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PT0gU2VhcmNoVHlwZS5UZXh0IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PT0gU2VhcmNoVHlwZS5kdkZpZWxkIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PT0gU2VhcmNoVHlwZS5UYXNrIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PT0gU2VhcmNoVHlwZS5UYXNrRG9uZSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT09IFNlYXJjaFR5cGUuVGFza05vdERvbmVcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBTZWFyY2hUeXBlLkZpbGVNZXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPT09IFwibnVtV29yZHNcIiB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPT09IFwibnVtQ2hhcnNcIiB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPT09IFwibnVtU2VudGVuY2VzXCJcclxuICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKG5lZWRDb250ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5yZWFkKGZpbGUucGF0aCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEdldCB4VmFsdWUgYW5kIGFkZCBpdCBpbnRvIHhWYWx1ZU1hcCBmb3IgbGF0ZXIgdXNlXHJcbiAgICAgICAgICAgIGxldCB4VmFsdWVNYXA6IFhWYWx1ZU1hcCA9IG5ldyBNYXAoKTsgLy8gcXVlcnlJZDogeFZhbHVlIGZvciB0aGlzIGZpbGVcclxuICAgICAgICAgICAgbGV0IHNraXBUaGlzRmlsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLnhEYXRhc2V0KTtcclxuICAgICAgICAgICAgZm9yIChsZXQgeERhdGFzZXRJZCBvZiByZW5kZXJJbmZvLnhEYXRhc2V0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXhWYWx1ZU1hcC5oYXMoeERhdGFzZXRJZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgeERhdGUgPSB3aW5kb3cubW9tZW50KFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh4RGF0YXNldElkID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEZWZhdWx0IHVzaW5nIGRhdGUgaW4gZmlsZW5hbWUgYXMgeFZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhEYXRlID0gY29sbGVjdGluZy5nZXREYXRlRnJvbUZpbGVuYW1lKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckluZm9cclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coeERhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB4RGF0YXNldFF1ZXJ5ID0gcmVuZGVySW5mby5xdWVyaWVzW3hEYXRhc2V0SWRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh4RGF0YXNldFF1ZXJ5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh4RGF0YXNldFF1ZXJ5LmdldFR5cGUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBTZWFyY2hUeXBlLkZyb250bWF0dGVyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhEYXRlID0gY29sbGVjdGluZy5nZXREYXRlRnJvbUZyb250bWF0dGVyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlQ2FjaGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhEYXRhc2V0UXVlcnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckluZm9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBTZWFyY2hUeXBlLlRhZzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4RGF0ZSA9IGNvbGxlY3RpbmcuZ2V0RGF0ZUZyb21UYWcoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhEYXRhc2V0UXVlcnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckluZm9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBTZWFyY2hUeXBlLlRleHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeERhdGUgPSBjb2xsZWN0aW5nLmdldERhdGVGcm9tVGV4dChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeERhdGFzZXRRdWVyeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySW5mb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFNlYXJjaFR5cGUuZHZGaWVsZDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4RGF0ZSA9IGNvbGxlY3RpbmcuZ2V0RGF0ZUZyb21EdkZpZWxkKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4RGF0YXNldFF1ZXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJJbmZvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU2VhcmNoVHlwZS5GaWxlTWV0YTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4RGF0ZSA9IGNvbGxlY3RpbmcuZ2V0RGF0ZUZyb21GaWxlTWV0YShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeERhdGFzZXRRdWVyeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySW5mb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFNlYXJjaFR5cGUuVGFzazpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU2VhcmNoVHlwZS5UYXNrRG9uZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU2VhcmNoVHlwZS5UYXNrTm90RG9uZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4RGF0ZSA9IGNvbGxlY3RpbmcuZ2V0RGF0ZUZyb21UYXNrKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4RGF0YXNldFF1ZXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJJbmZvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF4RGF0ZS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJJbnZhbGlkIHhEYXRlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwVGhpc0ZpbGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiZmlsZSBcIiArIGZpbGUuYmFzZW5hbWUgKyBcIiBhY2NlcHRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbmRlckluZm8uc3RhcnREYXRlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeERhdGUgPCByZW5kZXJJbmZvLnN0YXJ0RGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBUaGlzRmlsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbmRlckluZm8uZW5kRGF0ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHhEYXRlID4gcmVuZGVySW5mby5lbmREYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcFRoaXNGaWxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFza2lwVGhpc0ZpbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeFZhbHVlTWFwLnNldChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhEYXRhc2V0SWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwZXIuZGF0ZVRvU3RyKHhEYXRlLCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVDb3VudGVyKys7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgbWluL21heCBkYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlQ291bnRlciA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5EYXRlID0geERhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heERhdGUgPSB4RGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHhEYXRlIDwgbWluRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbkRhdGUgPSB4RGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHhEYXRlID4gbWF4RGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heERhdGUgPSB4RGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChza2lwVGhpc0ZpbGUpIHJldHVybjtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coeFZhbHVlTWFwKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYG1pbkRhdGU6ICR7bWluRGF0ZX1gKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYG1heERhdGU6ICR7bWF4RGF0ZX1gKTtcclxuXHJcbiAgICAgICAgICAgIC8vIExvb3Agb3ZlciBxdWVyaWVzXHJcbiAgICAgICAgICAgIGxldCB5RGF0YXNldFF1ZXJpZXMgPSByZW5kZXJJbmZvLnF1ZXJpZXMuZmlsdGVyKChxKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcS5nZXRUeXBlKCkgIT09IFNlYXJjaFR5cGUuVGFibGUgJiYgIXEudXNlZEFzWERhdGFzZXQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjb25zdCBsb29wUXVlcnlQcm9taXNlcyA9IHlEYXRhc2V0UXVlcmllcy5tYXAoYXN5bmMgKHF1ZXJ5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBHZXQgeFZhbHVlIGZyb20gZmlsZSBpZiB4RGF0YXNldCBhc3NpZ25lZFxyXG4gICAgICAgICAgICAgICAgLy8gaWYgKHJlbmRlckluZm8ueERhdGFzZXQgIT09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAvLyBsZXQgeERhdGFzZXRJZCA9IHJlbmRlckluZm8ueERhdGFzZXQ7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJTZWFyY2ggZnJvbnRtYXR0ZXIgdGFnc1wiKTtcclxuICAgICAgICAgICAgICAgIGlmIChmaWxlQ2FjaGUgJiYgcXVlcnkuZ2V0VHlwZSgpID09PSBTZWFyY2hUeXBlLlRhZykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCBmcm9udG1hdHRlciB0YWdzLCBhbGxvdyBzaW1wbGUgdGFnIG9ubHlcclxuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW5nLmNvbGxlY3REYXRhRnJvbUZyb250bWF0dGVyVGFnKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlQ2FjaGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJJbmZvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhTWFwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4VmFsdWVNYXBcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSAvLyBTZWFyY2ggZnJvbnRtYXR0ZXIgdGFnc1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiU2VhcmNoIGZyb250bWF0dGVyIGtleXNcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsZUNhY2hlICYmXHJcbiAgICAgICAgICAgICAgICAgICAgcXVlcnkuZ2V0VHlwZSgpID09PSBTZWFyY2hUeXBlLkZyb250bWF0dGVyICYmXHJcbiAgICAgICAgICAgICAgICAgICAgcXVlcnkuZ2V0VGFyZ2V0KCkgIT09IFwidGFnc1wiXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW5nLmNvbGxlY3REYXRhRnJvbUZyb250bWF0dGVyS2V5KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlQ2FjaGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJJbmZvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhTWFwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4VmFsdWVNYXBcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSAvLyBjb25zb2xlLmxvZyhcIlNlYXJjaCBmcm9udG1hdHRlciBrZXlzXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiU2VhcmNoIHdpa2kgbGlua3NcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmlsZUNhY2hlICYmIHF1ZXJ5LmdldFR5cGUoKSA9PT0gU2VhcmNoVHlwZS5XaWtpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGluZy5jb2xsZWN0RGF0YUZyb21XaWtpKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlQ2FjaGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJJbmZvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhTWFwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4VmFsdWVNYXBcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiU2VhcmNoIGlubGluZSB0YWdzXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQgJiYgcXVlcnkuZ2V0VHlwZSgpID09PSBTZWFyY2hUeXBlLlRhZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3RpbmcuY29sbGVjdERhdGFGcm9tSW5saW5lVGFnKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySW5mbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU1hcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeFZhbHVlTWFwXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH0gLy8gU2VhcmNoIGlubGluZSB0YWdzXHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJTZWFyY2ggVGV4dFwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb250ZW50ICYmIHF1ZXJ5LmdldFR5cGUoKSA9PT0gU2VhcmNoVHlwZS5UZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGluZy5jb2xsZWN0RGF0YUZyb21UZXh0KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySW5mbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU1hcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeFZhbHVlTWFwXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH0gLy8gU2VhcmNoIHRleHRcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlNlYXJjaCBGaWxlTWV0YVwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChxdWVyeS5nZXRUeXBlKCkgPT09IFNlYXJjaFR5cGUuRmlsZU1ldGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW5nLmNvbGxlY3REYXRhRnJvbUZpbGVNZXRhKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySW5mbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU1hcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeFZhbHVlTWFwXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH0gLy8gU2VhcmNoIEZpbGVNZXRhXHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJTZWFyY2ggZHZGaWVsZFwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb250ZW50ICYmIHF1ZXJ5LmdldFR5cGUoKSA9PT0gU2VhcmNoVHlwZS5kdkZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGluZy5jb2xsZWN0RGF0YUZyb21EdkZpZWxkKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySW5mbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU1hcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeFZhbHVlTWFwXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH0gLy8gc2VhcmNoIGR2RmllbGRcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlNlYXJjaCBUYXNrXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgJiZcclxuICAgICAgICAgICAgICAgICAgICAocXVlcnkuZ2V0VHlwZSgpID09PSBTZWFyY2hUeXBlLlRhc2sgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkuZ2V0VHlwZSgpID09PSBTZWFyY2hUeXBlLlRhc2tEb25lIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LmdldFR5cGUoKSA9PT0gU2VhcmNoVHlwZS5UYXNrTm90RG9uZSlcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3RpbmcuY29sbGVjdERhdGFGcm9tVGFzayhcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckluZm8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFNYXAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhWYWx1ZU1hcFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9IC8vIHNlYXJjaCBUYXNrXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChsb29wUXVlcnlQcm9taXNlcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwobG9vcEZpbGVQcm9taXNlcyk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coZGF0YU1hcCk7XHJcblxyXG4gICAgICAgIC8vIENvbGxlY3QgZGF0YSBmcm9tIGEgZmlsZSwgb25lIGZpbGUgY29udGFpbnMgZnVsbCBkYXRhc2V0XHJcbiAgICAgICAgbGV0IHRhYmxlUXVlcmllcyA9IHJlbmRlckluZm8ucXVlcmllcy5maWx0ZXIoXHJcbiAgICAgICAgICAgIChxKSA9PiBxLmdldFR5cGUoKSA9PT0gU2VhcmNoVHlwZS5UYWJsZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGFibGVRdWVyaWVzKTtcclxuICAgICAgICAvLyBTZXBhcmF0ZSBxdWVyaWVzIGJ5IHRhYmxlcyBhbmQgeERhdGFzZXRzL3lEYXRhc2V0c1xyXG4gICAgICAgIGxldCB0YWJsZXM6IEFycmF5PFRhYmxlRGF0YT4gPSBbXTtcclxuICAgICAgICBsZXQgdGFibGVGaWxlTm90Rm91bmQgPSBmYWxzZTtcclxuICAgICAgICBmb3IgKGxldCBxdWVyeSBvZiB0YWJsZVF1ZXJpZXMpIHtcclxuICAgICAgICAgICAgbGV0IGZpbGVQYXRoID0gcXVlcnkuZ2V0UGFyZW50VGFyZ2V0KCk7XHJcbiAgICAgICAgICAgIGxldCBmaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKFxyXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplUGF0aChmaWxlUGF0aCArIFwiLm1kXCIpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGlmICghZmlsZSB8fCAhKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkpIHtcclxuICAgICAgICAgICAgICAgIHRhYmxlRmlsZU5vdEZvdW5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgdGFibGVJbmRleCA9IHF1ZXJ5LmdldEFjY2Vzc29yKCk7XHJcbiAgICAgICAgICAgIGxldCBpc1ggPSBxdWVyeS51c2VkQXNYRGF0YXNldDtcclxuXHJcbiAgICAgICAgICAgIGxldCB0YWJsZSA9IHRhYmxlcy5maW5kKFxyXG4gICAgICAgICAgICAgICAgKHQpID0+IHQuZmlsZVBhdGggPT09IGZpbGVQYXRoICYmIHQudGFibGVJbmRleCA9PT0gdGFibGVJbmRleFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBpZiAodGFibGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc1gpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS54RGF0YXNldCA9IHF1ZXJ5O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS55RGF0YXNldHMucHVzaChxdWVyeSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFibGVEYXRhID0gbmV3IFRhYmxlRGF0YShmaWxlUGF0aCwgdGFibGVJbmRleCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNYKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGVEYXRhLnhEYXRhc2V0ID0gcXVlcnk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlRGF0YS55RGF0YXNldHMucHVzaChxdWVyeSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0YWJsZXMucHVzaCh0YWJsZURhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRhYmxlcyk7XHJcblxyXG4gICAgICAgIGlmICh0YWJsZUZpbGVOb3RGb3VuZCkge1xyXG4gICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gXCJGaWxlIGNvbnRhaW5pbmcgdGFibGVzIG5vdCBmb3VuZFwiO1xyXG4gICAgICAgICAgICByZW5kZXJFcnJvck1lc3NhZ2UoY2FudmFzLCBlcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChjYW52YXMpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCB0YWJsZURhdGEgb2YgdGFibGVzKSB7XHJcbiAgICAgICAgICAgIC8vZXh0cmFjdCB4RGF0YXNldCBmcm9tIHF1ZXJ5XHJcbiAgICAgICAgICAgIGxldCB4RGF0YXNldFF1ZXJ5ID0gdGFibGVEYXRhLnhEYXRhc2V0O1xyXG4gICAgICAgICAgICBpZiAoIXhEYXRhc2V0UXVlcnkpIHtcclxuICAgICAgICAgICAgICAgIC8vIG1pc3NpbmcgeERhdGFzZXRcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCB5RGF0YXNldFF1ZXJpZXMgPSB0YWJsZURhdGEueURhdGFzZXRzO1xyXG4gICAgICAgICAgICBsZXQgZmlsZVBhdGggPSB4RGF0YXNldFF1ZXJ5LmdldFBhcmVudFRhcmdldCgpO1xyXG4gICAgICAgICAgICBsZXQgdGFibGVJbmRleCA9IHhEYXRhc2V0UXVlcnkuZ2V0QWNjZXNzb3IoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEdldCB0YWJsZSB0ZXh0XHJcbiAgICAgICAgICAgIGxldCB0ZXh0VGFibGUgPSBcIlwiO1xyXG4gICAgICAgICAgICBmaWxlUGF0aCA9IGZpbGVQYXRoICsgXCIubWRcIjtcclxuICAgICAgICAgICAgbGV0IGZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoXHJcbiAgICAgICAgICAgICAgICBub3JtYWxpemVQYXRoKGZpbGVQYXRoKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBpZiAoZmlsZSAmJiBmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcclxuICAgICAgICAgICAgICAgIGZpbGVDb3VudGVyKys7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIucmVhZChmaWxlLnBhdGgpO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coY29udGVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVGVzdCB0aGlzIGluIFJlZ2V4MTAxXHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgbm90LXNvLXN0cmljdCB0YWJsZSBzZWxlY3RvclxyXG4gICAgICAgICAgICAgICAgLy8gKChcXHI/XFxuKXsyfXxeKShbXlxcclxcbl0qXFx8W15cXHJcXG5dKihcXHI/XFxuKT8pKyg/PShcXHI/XFxuKXsyfXwkKVxyXG4gICAgICAgICAgICAgICAgbGV0IHN0ck1EVGFibGVSZWdleCA9XHJcbiAgICAgICAgICAgICAgICAgICAgXCIoKFxcXFxyP1xcXFxuKXsyfXxeKShbXlxcXFxyXFxcXG5dKlxcXFx8W15cXFxcclxcXFxuXSooXFxcXHI/XFxcXG4pPykrKD89KFxcXFxyP1xcXFxuKXsyfXwkKVwiO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc3RyTURUYWJsZVJlZ2V4KTtcclxuICAgICAgICAgICAgICAgIGxldCBtZFRhYmxlUmVnZXggPSBuZXcgUmVnRXhwKHN0ck1EVGFibGVSZWdleCwgXCJnbVwiKTtcclxuICAgICAgICAgICAgICAgIGxldCBtYXRjaDtcclxuICAgICAgICAgICAgICAgIGxldCBpbmRUYWJsZSA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKChtYXRjaCA9IG1kVGFibGVSZWdleC5leGVjKGNvbnRlbnQpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG1hdGNoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kVGFibGUgPT09IHRhYmxlSW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFRhYmxlID0gbWF0Y2hbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpbmRUYWJsZSsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gZmlsZSBub3QgZXhpc3RzXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0ZXh0VGFibGUpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHRhYmxlTGluZXMgPSB0ZXh0VGFibGUuc3BsaXQoL1xccj9cXG4vKTtcclxuICAgICAgICAgICAgdGFibGVMaW5lcyA9IHRhYmxlTGluZXMuZmlsdGVyKChsaW5lKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGluZSAhPT0gXCJcIjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGxldCBudW1Db2x1bW5zID0gMDtcclxuICAgICAgICAgICAgbGV0IG51bURhdGFSb3dzID0gMDtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGFibGVMaW5lcyk7XHJcblxyXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgaXQgaXMgYSB2YWxpZCB0YWJsZSBmaXJzdFxyXG4gICAgICAgICAgICBpZiAodGFibGVMaW5lcy5sZW5ndGggPj0gMikge1xyXG4gICAgICAgICAgICAgICAgLy8gTXVzdCBoYXZlIGhlYWRlciBhbmQgc2VwYXJhdG9yIGxpbmVcclxuICAgICAgICAgICAgICAgIGxldCBoZWFkZXJMaW5lID0gdGFibGVMaW5lcy5zaGlmdCgpLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgIGhlYWRlckxpbmUgPSBoZWxwZXIudHJpbUJ5Q2hhcihoZWFkZXJMaW5lLCBcInxcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgaGVhZGVyU3BsaXR0ZWQgPSBoZWFkZXJMaW5lLnNwbGl0KFwifFwiKTtcclxuICAgICAgICAgICAgICAgIG51bUNvbHVtbnMgPSBoZWFkZXJTcGxpdHRlZC5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHNlcExpbmUgPSB0YWJsZUxpbmVzLnNoaWZ0KCkudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgc2VwTGluZSA9IGhlbHBlci50cmltQnlDaGFyKHNlcExpbmUsIFwifFwiKTtcclxuICAgICAgICAgICAgICAgIGxldCBzcGVwTGluZVNwbGl0dGVkID0gc2VwTGluZS5zcGxpdChcInxcIik7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjb2wgb2Ygc3BlcExpbmVTcGxpdHRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY29sLmluY2x1ZGVzKFwiLVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhazsgLy8gTm90IGEgdmFsaWQgc2VwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIG51bURhdGFSb3dzID0gdGFibGVMaW5lcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChudW1EYXRhUm93cyA9PSAwKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgIC8vIGdldCB4IGRhdGFcclxuICAgICAgICAgICAgbGV0IGNvbHVtblhEYXRhc2V0ID0geERhdGFzZXRRdWVyeS5nZXRBY2Nlc3NvcigxKTtcclxuICAgICAgICAgICAgaWYgKGNvbHVtblhEYXRhc2V0ID49IG51bUNvbHVtbnMpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBsZXQgeFZhbHVlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgbGV0IGluZExpbmUgPSAwO1xyXG4gICAgICAgICAgICBmb3IgKGxldCB0YWJsZUxpbmUgb2YgdGFibGVMaW5lcykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGRhdGFSb3cgPSBoZWxwZXIudHJpbUJ5Q2hhcih0YWJsZUxpbmUudHJpbSgpLCBcInxcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGF0YVJvd1NwbGl0dGVkID0gZGF0YVJvdy5zcGxpdChcInxcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uWERhdGFzZXQgPCBkYXRhUm93U3BsaXR0ZWQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBkYXRhUm93U3BsaXR0ZWRbY29sdW1uWERhdGFzZXRdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZGF0ZSA9IGhlbHBlci5zdHJUb0RhdGUoZGF0YSwgcmVuZGVySW5mby5kYXRlRm9ybWF0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGUuaXNWYWxpZCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhWYWx1ZXMucHVzaChkYXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWluRGF0ZS5pc1ZhbGlkKCkgJiYgIW1heERhdGUuaXNWYWxpZCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5EYXRlID0gZGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4RGF0ZSA9IGRhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRlIDwgbWluRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbkRhdGUgPSBkYXRlLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0ZSA+IG1heERhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhEYXRlID0gZGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeFZhbHVlcy5wdXNoKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeFZhbHVlcy5wdXNoKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaW5kTGluZSsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHhWYWx1ZXMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHhWYWx1ZXMuZXZlcnkoKHYpID0+IHYgPT09IG51bGwpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gXCJObyB2YWxpZCBYIHZhbHVlIGZvdW5kXCI7XHJcbiAgICAgICAgICAgICAgICByZW5kZXJFcnJvck1lc3NhZ2UoY2FudmFzLCBlcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoY2FudmFzKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZ2V0IHkgZGF0YVxyXG4gICAgICAgICAgICBmb3IgKGxldCB5RGF0YXNldFF1ZXJ5IG9mIHlEYXRhc2V0UXVlcmllcykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbHVtbk9mSW50ZXJlc3QgPSB5RGF0YXNldFF1ZXJ5LmdldEFjY2Vzc29yKDEpO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYGNvbHVtbk9mSW50ZXJlc3Q6ICR7Y29sdW1uT2ZJbnRlcmVzdH0sIG51bUNvbHVtbnM6ICR7bnVtQ29sdW1uc31gKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb2x1bW5PZkludGVyZXN0ID49IG51bUNvbHVtbnMpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBpbmRMaW5lID0gMDtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHRhYmxlTGluZSBvZiB0YWJsZUxpbmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGFSb3cgPSBoZWxwZXIudHJpbUJ5Q2hhcih0YWJsZUxpbmUudHJpbSgpLCBcInxcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGFSb3dTcGxpdHRlZCA9IGRhdGFSb3cuc3BsaXQoXCJ8XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2x1bW5PZkludGVyZXN0IDwgZGF0YVJvd1NwbGl0dGVkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IGRhdGFSb3dTcGxpdHRlZFtjb2x1bW5PZkludGVyZXN0XS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzcGxpdHRlZCA9IGRhdGEuc3BsaXQoeURhdGFzZXRRdWVyeS5nZXRTZXBhcmF0b3IoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3BsaXR0ZWQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3BsaXR0ZWQubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBwYXJzZUZsb2F0KHNwbGl0dGVkWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOdW1iZXIodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRMaW5lIDwgeFZhbHVlcy5sZW5ndGggJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeFZhbHVlc1tpbmRMaW5lXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW5nLmFkZFRvRGF0YU1hcChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFNYXAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwZXIuZGF0ZVRvU3RyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhWYWx1ZXNbaW5kTGluZV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySW5mby5kYXRlRm9ybWF0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeURhdGFzZXRRdWVyeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BsaXR0ZWQubGVuZ3RoID4geURhdGFzZXRRdWVyeS5nZXRBY2Nlc3NvcigyKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeURhdGFzZXRRdWVyeS5nZXRBY2Nlc3NvcigyKSA+PSAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzcGxpdHRlZFBhcnQgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwbGl0dGVkW3lEYXRhc2V0UXVlcnkuZ2V0QWNjZXNzb3IoMildLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyc2VGbG9hdChzcGxpdHRlZFBhcnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE51bWJlci5pc051bWJlcih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZExpbmUgPCB4VmFsdWVzLmxlbmd0aCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4VmFsdWVzW2luZExpbmVdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxlY3RpbmcuYWRkVG9EYXRhTWFwKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU1hcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlci5kYXRlVG9TdHIoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeFZhbHVlc1tpbmRMaW5lXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmRhdGVGb3JtYXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5RGF0YXNldFF1ZXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGluZExpbmUrKztcclxuICAgICAgICAgICAgICAgIH0gLy8gTG9vcCBvdmVyIHRhYmxlTGluZXNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGZpbGVDb3VudGVyID09PSAwKSB7XHJcbiAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPVxyXG4gICAgICAgICAgICAgICAgXCJObyBub3RlcyBmb3VuZCB1bmRlciB0aGUgZ2l2ZW4gc2VhcmNoIGNvbmRpdGlvblwiO1xyXG4gICAgICAgICAgICByZW5kZXJFcnJvck1lc3NhZ2UoY2FudmFzLCBlcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChjYW52YXMpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1pbkRhdGUpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1heERhdGUpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGRhdGFNYXApO1xyXG5cclxuICAgICAgICAvLyBDaGVjayBkYXRlIHJhbmdlXHJcbiAgICAgICAgaWYgKCFtaW5EYXRlLmlzVmFsaWQoKSB8fCAhbWF4RGF0ZS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBkYXRlIHJhbmdlXCI7XHJcbiAgICAgICAgICAgIHJlbmRlckVycm9yTWVzc2FnZShjYW52YXMsIGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGNhbnZhcyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlbmRlckluZm8uc3RhcnREYXRlID09PSBudWxsICYmIHJlbmRlckluZm8uZW5kRGF0ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyBObyBkYXRlIGFyZ3VtZW50c1xyXG4gICAgICAgICAgICByZW5kZXJJbmZvLnN0YXJ0RGF0ZSA9IG1pbkRhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5lbmREYXRlID0gbWF4RGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uc3RhcnREYXRlICE9PSBudWxsICYmXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZW5kRGF0ZSA9PT0gbnVsbFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAocmVuZGVySW5mby5zdGFydERhdGUgPCBtYXhEYXRlKSB7XHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmVuZERhdGUgPSBtYXhEYXRlLmNsb25lKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGRhdGUgcmFuZ2VcIjtcclxuICAgICAgICAgICAgICAgIHJlbmRlckVycm9yTWVzc2FnZShjYW52YXMsIGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChjYW52YXMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICAgICAgcmVuZGVySW5mby5lbmREYXRlICE9PSBudWxsICYmXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uc3RhcnREYXRlID09PSBudWxsXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmIChyZW5kZXJJbmZvLmVuZERhdGUgPiBtaW5EYXRlKSB7XHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLnN0YXJ0RGF0ZSA9IG1pbkRhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgZGF0ZSByYW5nZVwiO1xyXG4gICAgICAgICAgICAgICAgcmVuZGVyRXJyb3JNZXNzYWdlKGNhbnZhcywgZXJyb3JNZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGNhbnZhcyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBzdGFydERhdGUgYW5kIGVuZERhdGUgYXJlIHZhbGlkXHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIChyZW5kZXJJbmZvLnN0YXJ0RGF0ZSA8IG1pbkRhdGUgJiZcclxuICAgICAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmVuZERhdGUgPCBtaW5EYXRlKSB8fFxyXG4gICAgICAgICAgICAgICAgKHJlbmRlckluZm8uc3RhcnREYXRlID4gbWF4RGF0ZSAmJiByZW5kZXJJbmZvLmVuZERhdGUgPiBtYXhEYXRlKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgZGF0ZSByYW5nZVwiO1xyXG4gICAgICAgICAgICAgICAgcmVuZGVyRXJyb3JNZXNzYWdlKGNhbnZhcywgZXJyb3JNZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGNhbnZhcyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby5zdGFydERhdGUpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uZW5kRGF0ZSk7XHJcblxyXG4gICAgICAgIC8vIFJlc2hhcGUgZGF0YSBmb3IgcmVuZGVyaW5nXHJcbiAgICAgICAgbGV0IGRhdGFzZXRzID0gbmV3IERhdGFzZXRzKHJlbmRlckluZm8uc3RhcnREYXRlLCByZW5kZXJJbmZvLmVuZERhdGUpO1xyXG4gICAgICAgIGZvciAobGV0IHF1ZXJ5IG9mIHJlbmRlckluZm8ucXVlcmllcykge1xyXG4gICAgICAgICAgICAvLyBXZSBzdGlsbCBjcmVhdGUgYSBkYXRhc2V0IGZvciB4RGF0YXNldCxcclxuICAgICAgICAgICAgLy8gdG8ga2VlcCB0aGUgc2VxdWVuY2UgYW5kIG9yZGVyIG9mIHRhcmdldHNcclxuICAgICAgICAgICAgbGV0IGRhdGFzZXQgPSBkYXRhc2V0cy5jcmVhdGVEYXRhc2V0KHF1ZXJ5LCByZW5kZXJJbmZvKTtcclxuICAgICAgICAgICAgLy8gQWRkIG51bWJlciBvZiB0YXJnZXRzIHRvIHRoZSBkYXRhc2V0XHJcbiAgICAgICAgICAgIC8vIE51bWJlciBvZiB0YXJnZXRzIGhhcyBiZWVuIGFjY3VtdWxhdGVkIHdoaWxlIGNvbGxlY3RpbmcgZGF0YVxyXG4gICAgICAgICAgICBkYXRhc2V0LmFkZE51bVRhcmdldHMocXVlcnkuZ2V0TnVtVGFyZ2V0cygpKTtcclxuICAgICAgICAgICAgZm9yIChcclxuICAgICAgICAgICAgICAgIGxldCBjdXJEYXRlID0gcmVuZGVySW5mby5zdGFydERhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgIGN1ckRhdGUgPD0gcmVuZGVySW5mby5lbmREYXRlO1xyXG4gICAgICAgICAgICAgICAgY3VyRGF0ZS5hZGQoMSwgXCJkYXlzXCIpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coY3VyRGF0ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gZGF0YU1hcCAtLT4ge2RhdGU6IFtxdWVyeTogdmFsdWUsIC4uLl19XHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YU1hcC5oYXMoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlci5kYXRlVG9TdHIoY3VyRGF0ZSwgcmVuZGVySW5mby5kYXRlRm9ybWF0KVxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBxdWVyeVZhbHVlUGFpcnMgPSBkYXRhTWFwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXQoaGVscGVyLmRhdGVUb1N0cihjdXJEYXRlLCByZW5kZXJJbmZvLmRhdGVGb3JtYXQpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChwYWlyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFpci5xdWVyeS5lcXVhbFRvKHF1ZXJ5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXJ5VmFsdWVQYWlycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1lcmdlIHZhbHVlcyBvZiB0aGUgc2FtZSBkYXkgc2FtZSBxdWVyeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluZFBhaXIgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kUGFpciA8IHF1ZXJ5VmFsdWVQYWlycy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRQYWlyKytcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29sbGVjdGVkID0gcXVlcnlWYWx1ZVBhaXJzW2luZFBhaXJdLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE51bWJlci5pc051bWJlcihjb2xsZWN0ZWQpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIU51bWJlci5pc05hTihjb2xsZWN0ZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBjb2xsZWN0ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gY29sbGVjdGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhoYXNWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhc2V0LnNldFZhbHVlKGN1ckRhdGUsIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZW5kZXJJbmZvLmRhdGFzZXRzID0gZGF0YXNldHM7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby5kYXRhc2V0cyk7XHJcblxyXG4gICAgICAgIGxldCByZXN1bHQgPSByZW5kZXIoY2FudmFzLCByZW5kZXJJbmZvKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gcmVzdWx0O1xyXG4gICAgICAgICAgICByZW5kZXJFcnJvck1lc3NhZ2UoY2FudmFzLCBlcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChjYW52YXMpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlbC5hcHBlbmRDaGlsZChjYW52YXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEVkaXRvcigpOiBFZGl0b3Ige1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpLmVkaXRvcjtcclxuICAgIH1cclxuXHJcbiAgICBhZGRDb2RlQmxvY2sob3V0cHV0VHlwZTogR3JhcGhUeXBlKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgY3VycmVudFZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZi52aWV3O1xyXG5cclxuICAgICAgICBpZiAoIShjdXJyZW50VmlldyBpbnN0YW5jZW9mIE1hcmtkb3duVmlldykpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGNvZGVibG9ja1RvSW5zZXJ0ID0gXCJcIjtcclxuICAgICAgICBzd2l0Y2ggKG91dHB1dFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBHcmFwaFR5cGUuTGluZTpcclxuICAgICAgICAgICAgICAgIGNvZGVibG9ja1RvSW5zZXJ0ID0gYFxcYFxcYFxcYCB0cmFja2VyXHJcbnNlYXJjaFR5cGU6IHRhZ1xyXG5zZWFyY2hUYXJnZXQ6IHRhZ05hbWVcclxuZm9sZGVyOiAvXHJcbnN0YXJ0RGF0ZTpcclxuZW5kRGF0ZTpcclxubGluZTpcclxuICAgIHRpdGxlOiBcIkxpbmUgQ2hhcnRcIlxyXG4gICAgeEF4aXNMYWJlbDogRGF0ZVxyXG4gICAgeUF4aXNMYWJlbDogVmFsdWVcclxuXFxgXFxgXFxgYDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEdyYXBoVHlwZS5CYXI6XHJcbiAgICAgICAgICAgICAgICBjb2RlYmxvY2tUb0luc2VydCA9IGBcXGBcXGBcXGAgdHJhY2tlclxyXG5zZWFyY2hUeXBlOiB0YWdcclxuc2VhcmNoVGFyZ2V0OiB0YWdOYW1lXHJcbmZvbGRlcjogL1xyXG5zdGFydERhdGU6XHJcbmVuZERhdGU6XHJcbmJhcjpcclxuICAgIHRpdGxlOiBcIkJhciBDaGFydFwiXHJcbiAgICB4QXhpc0xhYmVsOiBEYXRlXHJcbiAgICB5QXhpc0xhYmVsOiBWYWx1ZVxyXG5cXGBcXGBcXGBgO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgR3JhcGhUeXBlLlN1bW1hcnk6XHJcbiAgICAgICAgICAgICAgICBjb2RlYmxvY2tUb0luc2VydCA9IGBcXGBcXGBcXGAgdHJhY2tlclxyXG5zZWFyY2hUeXBlOiB0YWdcclxuc2VhcmNoVGFyZ2V0OiB0YWdOYW1lXHJcbmZvbGRlcjogL1xyXG5zdGFydERhdGU6XHJcbmVuZERhdGU6XHJcbnN1bW1hcnk6XHJcbiAgICB0ZW1wbGF0ZTogXCJBdmVyYWdlIHZhbHVlIG9mIHRhZ05hbWUgaXMge3thdmVyYWdlfX1cIlxyXG4gICAgc3R5bGU6IFwiY29sb3I6d2hpdGU7XCJcclxuXFxgXFxgXFxgYDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29kZWJsb2NrVG9JbnNlcnQgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgbGV0IHRleHRJbnNlcnRlZCA9IHRoaXMuaW5zZXJ0VG9OZXh0TGluZShjb2RlYmxvY2tUb0luc2VydCk7XHJcbiAgICAgICAgICAgIGlmICghdGV4dEluc2VydGVkKSB7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaW5zZXJ0VG9OZXh0TGluZSh0ZXh0OiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICBsZXQgZWRpdG9yID0gdGhpcy5nZXRFZGl0b3IoKTtcclxuXHJcbiAgICAgICAgaWYgKGVkaXRvcikge1xyXG4gICAgICAgICAgICBsZXQgY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpO1xyXG4gICAgICAgICAgICBsZXQgbGluZU51bWJlciA9IGN1cnNvci5saW5lO1xyXG4gICAgICAgICAgICBsZXQgbGluZSA9IGVkaXRvci5nZXRMaW5lKGxpbmVOdW1iZXIpO1xyXG5cclxuICAgICAgICAgICAgY3Vyc29yLmNoID0gbGluZS5sZW5ndGg7XHJcbiAgICAgICAgICAgIGVkaXRvci5zZXRTZWxlY3Rpb24oY3Vyc29yKTtcclxuICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24oXCJcXG5cIiArIHRleHQpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJhIiwiYiIsIk5hTiIsImYiLCJkZWx0YSIsImNvbXBhcmUiLCJsZWZ0IiwieCIsImxvIiwiaGkiLCJsZW5ndGgiLCJtaWQiLCJkIiwiYXNjZW5kaW5nIiwiYXNjZW5kaW5nQ29tcGFyYXRvciIsImNlbnRlciIsImkiLCJyaWdodCIsImJpc2VjdFJpZ2h0IiwiYmlzZWN0b3IiLCJlMTAiLCJNYXRoIiwic3FydCIsImU1IiwiZTIiLCJ0aWNrSW5jcmVtZW50Iiwic3RhcnQiLCJzdG9wIiwiY291bnQiLCJtYXgiLCJwb3dlciIsImZsb29yIiwibG9nIiwiTE4xMCIsImVycm9yIiwicG93IiwidGlja1N0ZXAiLCJzdGVwMCIsImFicyIsInN0ZXAxIiwidmFsdWVzIiwidmFsdWVvZiIsInVuZGVmaW5lZCIsImluZGV4IiwibWluIiwicXVpY2tzZWxlY3QiLCJhcnJheSIsImsiLCJuIiwibSIsInoiLCJzIiwiZXhwIiwic2QiLCJ0IiwiaiIsInN3YXAiLCJxdWFudGlsZSIsInAiLCJGbG9hdDY0QXJyYXkiLCJmcm9tIiwibnVtYmVycyIsImkwIiwidmFsdWUwIiwic3ViYXJyYXkiLCJhcmd1bWVudHMiLCJjZWlsIiwicmFuZ2UiLCJBcnJheSIsInN1bSIsInNsaWNlIiwicHJvdG90eXBlIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJ5IiwibnVtYmVyIiwic2NhbGUiLCJvZmZzZXQiLCJiYW5kd2lkdGgiLCJyb3VuZCIsImVudGVyaW5nIiwidGhpcyIsIl9fYXhpcyIsImF4aXMiLCJvcmllbnQiLCJ0aWNrQXJndW1lbnRzIiwidGlja1ZhbHVlcyIsInRpY2tGb3JtYXQiLCJ0aWNrU2l6ZUlubmVyIiwidGlja1NpemVPdXRlciIsInRpY2tQYWRkaW5nIiwid2luZG93IiwiZGV2aWNlUGl4ZWxSYXRpbyIsInRyYW5zZm9ybSIsImNvbnRleHQiLCJ0aWNrcyIsImRvbWFpbiIsImZvcm1hdCIsImlkZW50aXR5Iiwic3BhY2luZyIsInJhbmdlMCIsInJhbmdlMSIsInBvc2l0aW9uIiwiY29weSIsInNlbGVjdGlvbiIsInBhdGgiLCJzZWxlY3RBbGwiLCJkYXRhIiwidGljayIsIm9yZGVyIiwidGlja0V4aXQiLCJleGl0IiwidGlja0VudGVyIiwiZW50ZXIiLCJhcHBlbmQiLCJhdHRyIiwibGluZSIsInNlbGVjdCIsInRleHQiLCJtZXJnZSIsImluc2VydCIsInRyYW5zaXRpb24iLCJpc0Zpbml0ZSIsImdldEF0dHJpYnV0ZSIsInBhcmVudE5vZGUiLCJyZW1vdmUiLCJmaWx0ZXIiLCJlYWNoIiwiXyIsImNhbGwiLCJ0aWNrU2l6ZSIsImF4aXNCb3R0b20iLCJheGlzTGVmdCIsIm5vb3AiLCJkaXNwYXRjaCIsInRlc3QiLCJFcnJvciIsIkRpc3BhdGNoIiwicGFyc2VUeXBlbmFtZXMiLCJ0eXBlbmFtZXMiLCJ0eXBlcyIsInRyaW0iLCJzcGxpdCIsIm1hcCIsIm5hbWUiLCJpbmRleE9mIiwiaGFzT3duUHJvcGVydHkiLCJ0eXBlIiwiZ2V0IiwiYyIsInNldCIsImNhbGxiYWNrIiwiY29uY2F0IiwicHVzaCIsImNvbnN0cnVjdG9yIiwib24iLCJ0eXBlbmFtZSIsIlQiLCJ0aGF0IiwiYXJncyIsInhodG1sIiwic3ZnIiwieGxpbmsiLCJ4bWwiLCJ4bWxucyIsInByZWZpeCIsIm5hbWVzcGFjZXMiLCJzcGFjZSIsImxvY2FsIiwiY3JlYXRvckluaGVyaXQiLCJkb2N1bWVudCIsIm93bmVyRG9jdW1lbnQiLCJ1cmkiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRvckZpeGVkIiwiZnVsbG5hbWUiLCJuYW1lc3BhY2UiLCJub25lIiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwiZW1wdHkiLCJxdWVyeVNlbGVjdG9yQWxsIiwibWF0Y2hlcyIsImNoaWxkTWF0Y2hlciIsIm5vZGUiLCJmaW5kIiwiY2hpbGRGaXJzdCIsImZpcnN0RWxlbWVudENoaWxkIiwiY2hpbGRyZW4iLCJ1cGRhdGUiLCJFbnRlck5vZGUiLCJwYXJlbnQiLCJkYXR1bSIsIl9uZXh0IiwiX3BhcmVudCIsIl9fZGF0YV9fIiwiYmluZEluZGV4IiwiZ3JvdXAiLCJncm91cExlbmd0aCIsImRhdGFMZW5ndGgiLCJiaW5kS2V5Iiwia2V5Iiwia2V5VmFsdWUiLCJub2RlQnlLZXlWYWx1ZSIsIk1hcCIsImtleVZhbHVlcyIsImhhcyIsImRlbGV0ZSIsImF0dHJSZW1vdmUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJhdHRyUmVtb3ZlTlMiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsImF0dHJDb25zdGFudCIsInNldEF0dHJpYnV0ZSIsImF0dHJDb25zdGFudE5TIiwic2V0QXR0cmlidXRlTlMiLCJhdHRyRnVuY3Rpb24iLCJ2IiwiYXR0ckZ1bmN0aW9uTlMiLCJkZWZhdWx0VmlldyIsInN0eWxlUmVtb3ZlIiwic3R5bGUiLCJyZW1vdmVQcm9wZXJ0eSIsInN0eWxlQ29uc3RhbnQiLCJwcmlvcml0eSIsInNldFByb3BlcnR5Iiwic3R5bGVGdW5jdGlvbiIsInN0eWxlVmFsdWUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInByb3BlcnR5UmVtb3ZlIiwicHJvcGVydHlDb25zdGFudCIsInByb3BlcnR5RnVuY3Rpb24iLCJjbGFzc0FycmF5Iiwic3RyaW5nIiwiY2xhc3NMaXN0IiwiQ2xhc3NMaXN0IiwiX25vZGUiLCJfbmFtZXMiLCJjbGFzc2VkQWRkIiwibmFtZXMiLCJsaXN0IiwiYWRkIiwiY2xhc3NlZFJlbW92ZSIsImNsYXNzZWRUcnVlIiwiY2xhc3NlZEZhbHNlIiwiY2xhc3NlZEZ1bmN0aW9uIiwidGV4dFJlbW92ZSIsInRleHRDb250ZW50IiwidGV4dENvbnN0YW50IiwidGV4dEZ1bmN0aW9uIiwiaHRtbFJlbW92ZSIsImlubmVySFRNTCIsImh0bWxDb25zdGFudCIsImh0bWxGdW5jdGlvbiIsInJhaXNlIiwibmV4dFNpYmxpbmciLCJhcHBlbmRDaGlsZCIsImxvd2VyIiwicHJldmlvdXNTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RDaGlsZCIsImNvbnN0YW50TnVsbCIsInJlbW92ZUNoaWxkIiwic2VsZWN0aW9uX2Nsb25lU2hhbGxvdyIsImNsb25lIiwiY2xvbmVOb2RlIiwic2VsZWN0aW9uX2Nsb25lRGVlcCIsIm9uUmVtb3ZlIiwiX19vbiIsIm8iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibGlzdGVuZXIiLCJvcHRpb25zIiwib25BZGQiLCJldmVudCIsImNvbnRleHRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJkaXNwYXRjaEV2ZW50IiwicGFyYW1zIiwiQ3VzdG9tRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwiZGlzcGF0Y2hDb25zdGFudCIsImRpc3BhdGNoRnVuY3Rpb24iLCJjaGlsZCIsImpvaW4iLCJzcGxpY2UiLCJjb250YWlucyIsInJvb3QiLCJTZWxlY3Rpb24iLCJncm91cHMiLCJwYXJlbnRzIiwiX2dyb3VwcyIsIl9wYXJlbnRzIiwiZmFjdG9yeSIsImV4dGVuZCIsImRlZmluaXRpb24iLCJPYmplY3QiLCJjcmVhdGUiLCJDb2xvciIsInN1Ymdyb3VwcyIsInN1Ym5vZGUiLCJzdWJncm91cCIsImFycmF5QWxsIiwic2VsZWN0b3JBbGwiLCJzZWxlY3RDaGlsZCIsIm1hdGNoIiwiY2hpbGRGaW5kIiwic2VsZWN0Q2hpbGRyZW4iLCJjaGlsZHJlbkZpbHRlciIsIm1hdGNoZXIiLCJiaW5kIiwiY29uc3RhbnQiLCJlbnRlckdyb3VwIiwidXBkYXRlR3JvdXAiLCJleGl0R3JvdXAiLCJwcmV2aW91cyIsImkxIiwiX2VudGVyIiwiX2V4aXQiLCJzcGFyc2UiLCJvbmVudGVyIiwib251cGRhdGUiLCJvbmV4aXQiLCJncm91cHMwIiwiZ3JvdXBzMSIsIm0wIiwibTEiLCJtZXJnZXMiLCJncm91cDAiLCJncm91cDEiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsInNvcnQiLCJjb21wYXJlTm9kZSIsInNvcnRncm91cHMiLCJzb3J0Z3JvdXAiLCJub2RlcyIsInNpemUiLCJnZXRBdHRyaWJ1dGVOUyIsInByb3BlcnR5IiwiY2xhc3NlZCIsImh0bWwiLCJjcmVhdG9yIiwiYmVmb3JlIiwiZGVlcCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiYnJpZ2h0ZXIiLCJyZUkiLCJyZU4iLCJyZVAiLCJyZUhleCIsInJlUmdiSW50ZWdlciIsIlJlZ0V4cCIsInJlUmdiUGVyY2VudCIsInJlUmdiYUludGVnZXIiLCJyZVJnYmFQZXJjZW50IiwicmVIc2xQZXJjZW50IiwicmVIc2xhUGVyY2VudCIsIm5hbWVkIiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWUiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImdyZXkiLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJjb2xvcl9mb3JtYXRIZXgiLCJyZ2IiLCJmb3JtYXRIZXgiLCJjb2xvcl9mb3JtYXRSZ2IiLCJmb3JtYXRSZ2IiLCJjb2xvciIsImwiLCJ0b0xvd2VyQ2FzZSIsImV4ZWMiLCJwYXJzZUludCIsInJnYm4iLCJSZ2IiLCJyZ2JhIiwiaHNsYSIsInIiLCJnIiwicmdiQ29udmVydCIsIm9wYWNpdHkiLCJyZ2JfZm9ybWF0SGV4IiwiaGV4IiwicmdiX2Zvcm1hdFJnYiIsImlzTmFOIiwidG9TdHJpbmciLCJoIiwiSHNsIiwiaHNsQ29udmVydCIsImhzbDJyZ2IiLCJtMiIsImRlZmluZSIsImNoYW5uZWxzIiwiYXNzaWduIiwiZGlzcGxheWFibGUiLCJmb3JtYXRIc2wiLCJkYXJrZXIiLCJyYWRpYW5zIiwiUEkiLCJkZWdyZWVzIiwidDAiLCJ0MSIsInQyIiwibGFiQ29udmVydCIsIkxhYiIsIkhjbCIsImhjbDJsYWIiLCJyZ2IybHJnYiIsInh5ejJsYWIiLCJsYWIiLCJsYWIyeHl6IiwibHJnYjJyZ2IiLCJoY2xDb252ZXJ0IiwiYXRhbjIiLCJjb3MiLCJzaW4iLCJ0YXNrSGVhZCIsInRhc2tUYWlsIiwiZnJhbWUiLCJ0aW1lb3V0IiwiaW50ZXJ2YWwiLCJjbG9ja0xhc3QiLCJjbG9ja05vdyIsImNsb2NrU2tldyIsImNsb2NrIiwicGVyZm9ybWFuY2UiLCJub3ciLCJEYXRlIiwic2V0RnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRUaW1lb3V0IiwiY2xlYXJOb3ciLCJUaW1lciIsIl9jYWxsIiwiX3RpbWUiLCJ0aW1lciIsImRlbGF5IiwidGltZSIsInJlc3RhcnQiLCJ3YWtlIiwidGltZXJGbHVzaCIsIkluZmluaXR5Iiwic2xlZXAiLCJuYXAiLCJwb2tlIiwiY2xlYXJUaW1lb3V0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiZWxhcHNlZCIsIlR5cGVFcnJvciIsImVtcHR5T24iLCJlbXB0eVR3ZWVuIiwiaWQiLCJ0aW1pbmciLCJzY2hlZHVsZXMiLCJfX3RyYW5zaXRpb24iLCJzZWxmIiwidHdlZW4iLCJzY2hlZHVsZSIsInN0YXRlIiwiZHVyYXRpb24iLCJlYXNlIiwiaW5pdCIsImdhbW1hIiwibm9nYW1tYSIsImV4cG9uZW50aWFsIiwibGluZWFyIiwicmdiR2FtbWEiLCJlbmQiLCJjb2xvclJnYiIsInJlQSIsInJlQiIsInNvdXJjZSIsImFtIiwiYm0iLCJicyIsImJpIiwibGFzdEluZGV4IiwicSIsIm9uZSIsInplcm8iLCJzdmdOb2RlIiwicm90YXRlIiwic2tld1giLCJzY2FsZVgiLCJzY2FsZVkiLCJhdGFuIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm0iLCJwYXJzZSIsInB4Q29tbWEiLCJweFBhcmVuIiwiZGVnUGFyZW4iLCJwb3AiLCJ4YSIsInlhIiwieGIiLCJ5YiIsInRyYW5zbGF0ZSIsImludGVycG9sYXRlVHJhbnNmb3JtQ3NzIiwiRE9NTWF0cml4IiwiV2ViS2l0Q1NTTWF0cml4IiwiaXNJZGVudGl0eSIsImRlY29tcG9zZSIsImludGVycG9sYXRlVHJhbnNmb3JtU3ZnIiwiYmFzZVZhbCIsImNvbnNvbGlkYXRlIiwibWF0cml4IiwidHdlZW5SZW1vdmUiLCJ0d2VlbjAiLCJ0d2VlbjEiLCJ0d2VlbkZ1bmN0aW9uIiwidHdlZW5WYWx1ZSIsIl9pZCIsImludGVycG9sYXRlTnVtYmVyIiwiaW50ZXJwb2xhdGVSZ2IiLCJpbnRlcnBvbGF0ZVN0cmluZyIsImludGVycG9sYXRlIiwidmFsdWUxIiwic3RyaW5nMDAiLCJpbnRlcnBvbGF0ZTAiLCJzdHJpbmcxIiwic3RyaW5nMCIsInN0cmluZzEwIiwiYXR0ckludGVycG9sYXRlIiwiYXR0ckludGVycG9sYXRlTlMiLCJhdHRyVHdlZW5OUyIsIl92YWx1ZSIsImF0dHJUd2VlbiIsImRlbGF5RnVuY3Rpb24iLCJkZWxheUNvbnN0YW50IiwiZHVyYXRpb25GdW5jdGlvbiIsImR1cmF0aW9uQ29uc3RhbnQiLCJlYXNlQ29uc3RhbnQiLCJvbkZ1bmN0aW9uIiwib24wIiwib24xIiwic2l0IiwiZXZlcnkiLCJzdHlsZUludGVycG9sYXRlIiwic3R5bGVUd2VlbiIsInRleHRJbnRlcnBvbGF0ZSIsInRleHRUd2VlbiIsIlRyYW5zaXRpb24iLCJfbmFtZSIsIm5ld0lkIiwic2VsZWN0aW9uX3Byb3RvdHlwZSIsImluaGVyaXQiLCJpZDAiLCJpZDEiLCJzdHlsZU51bGwiLCJsaXN0ZW5lcjAiLCJzdHlsZU1heWJlUmVtb3ZlIiwicmVtb3ZlRnVuY3Rpb24iLCJlYXNlVmFyeWluZyIsImNhbmNlbCIsImludGVycnVwdCIsImRlZmF1bHRUaW1pbmciLCJhY3RpdmUiLCJwaSIsInRhdSIsInRhdUVwc2lsb24iLCJQYXRoIiwiX3gwIiwiX3kwIiwiX3gxIiwiX3kxIiwiZm9ybWF0RGVjaW1hbFBhcnRzIiwidG9FeHBvbmVudGlhbCIsImNvZWZmaWNpZW50IiwibW92ZVRvIiwiY2xvc2VQYXRoIiwibGluZVRvIiwicXVhZHJhdGljQ3VydmVUbyIsIngxIiwieTEiLCJiZXppZXJDdXJ2ZVRvIiwieDIiLCJ5MiIsImFyY1RvIiwieDAiLCJ5MCIsIngyMSIsInkyMSIsIngwMSIsInkwMSIsImwwMV8yIiwieDIwIiwieTIwIiwibDIxXzIiLCJsMjBfMiIsImwyMSIsImwwMSIsImFjb3MiLCJ0MDEiLCJ0MjEiLCJhcmMiLCJhMCIsImExIiwiY2N3IiwiZHgiLCJkeSIsImN3IiwiZGEiLCJyZWN0IiwidyIsInByZWZpeEV4cG9uZW50IiwicmUiLCJmb3JtYXRTcGVjaWZpZXIiLCJzcGVjaWZpZXIiLCJGb3JtYXRTcGVjaWZpZXIiLCJmaWxsIiwiYWxpZ24iLCJzaWduIiwic3ltYm9sIiwid2lkdGgiLCJjb21tYSIsInByZWNpc2lvbiIsImV4cG9uZW50IiwidG9GaXhlZCIsInRvTG9jYWxlU3RyaW5nIiwicmVwbGFjZSIsInRvUHJlY2lzaW9uIiwiZm9ybWF0Um91bmRlZCIsIlgiLCJ0b1VwcGVyQ2FzZSIsImxvY2FsZSIsImZvcm1hdFByZWZpeCIsInByZWZpeGVzIiwiZ3JvdXBpbmciLCJ0aG91c2FuZHMiLCJOdW1iZXIiLCJzdWJzdHJpbmciLCJyZXZlcnNlIiwiY3VycmVuY3lQcmVmaXgiLCJjdXJyZW5jeSIsImN1cnJlbmN5U3VmZml4IiwiZGVjaW1hbCIsIm51bWVyYWxzIiwiZm9ybWF0TnVtZXJhbHMiLCJTdHJpbmciLCJwZXJjZW50IiwibWludXMiLCJuYW4iLCJuZXdGb3JtYXQiLCJmb3JtYXRUeXBlcyIsInN1ZmZpeCIsImZvcm1hdFR5cGUiLCJtYXliZVN1ZmZpeCIsInZhbHVlUHJlZml4IiwidmFsdWVTdWZmaXgiLCJ2YWx1ZU5lZ2F0aXZlIiwib3V0IiwiZm9ybWF0VHJpbSIsImNoYXJDb2RlQXQiLCJwYWRkaW5nIiwiZm9ybWF0TG9jYWxlIiwiY29sb3JMYWIiLCJpbml0UmFuZ2UiLCJpbXBsaWNpdCIsIm9yZGluYWwiLCJ1bmtub3duIiwiZ2VuZXJpY0FycmF5IiwibmIiLCJuYSIsInNldFRpbWUiLCJkYXRlIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJEYXRhVmlldyIsImlzTnVtYmVyQXJyYXkiLCJudW1iZXJBcnJheSIsImlzQXJyYXkiLCJ2YWx1ZU9mIiwib2JqZWN0IiwidW5pdCIsIm5vcm1hbGl6ZSIsImJpbWFwIiwiZDAiLCJkMSIsInIwIiwicjEiLCJwb2x5bWFwIiwiYmlzZWN0IiwidGFyZ2V0IiwiY2xhbXAiLCJ0cmFuc2Zvcm1lciIsInVudHJhbnNmb3JtIiwicGllY2V3aXNlIiwib3V0cHV0IiwiaW5wdXQiLCJpbnRlcnBvbGF0ZVZhbHVlIiwicmVzY2FsZSIsImludmVydCIsInJhbmdlUm91bmQiLCJpbnRlcnBvbGF0ZVJvdW5kIiwidSIsImNvbnRpbnVvdXMiLCJwcmVjaXNpb25QcmVmaXgiLCJwcmVjaXNpb25Sb3VuZCIsInByZWNpc2lvbkZpeGVkIiwibGluZWFyaXNoIiwibmljZSIsInByZXN0ZXAiLCJtYXhJdGVyIiwibmV3SW50ZXJ2YWwiLCJmbG9vcmkiLCJvZmZzZXRpIiwiZmllbGQiLCJtaWxsaXNlY29uZCIsInNlY29uZCIsImdldE1pbGxpc2Vjb25kcyIsImdldFVUQ1NlY29uZHMiLCJtaW51dGUiLCJnZXRTZWNvbmRzIiwiZHVyYXRpb25TZWNvbmQiLCJnZXRNaW51dGVzIiwiaG91ciIsImR1cmF0aW9uTWludXRlIiwiZ2V0SG91cnMiLCJkYXkiLCJzZXRIb3VycyIsInNldERhdGUiLCJnZXREYXRlIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJkdXJhdGlvbkhvdXIiLCJ3ZWVrZGF5IiwiZ2V0RGF5IiwiZHVyYXRpb25EYXkiLCJzdW5kYXkiLCJtb25kYXkiLCJ0aHVyc2RheSIsIm1vbnRoIiwic2V0TW9udGgiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwieWVhciIsInNldEZ1bGxZZWFyIiwic2V0VVRDU2Vjb25kcyIsImdldFVUQ01pbnV0ZXMiLCJzZXRVVENNaW51dGVzIiwiZ2V0VVRDSG91cnMiLCJ1dGNEYXkiLCJzZXRVVENIb3VycyIsInNldFVUQ0RhdGUiLCJnZXRVVENEYXRlIiwidXRjV2Vla2RheSIsImdldFVUQ0RheSIsInV0Y1N1bmRheSIsInV0Y01vbmRheSIsInV0Y1RodXJzZGF5Iiwic2V0VVRDTW9udGgiLCJnZXRVVENNb250aCIsImdldFVUQ0Z1bGxZZWFyIiwidXRjWWVhciIsInNldFVUQ0Z1bGxZZWFyIiwidGltZVRpY2tzIiwidGltZVRpY2tJbnRlcnZhbCIsIndlZWsiLCJ0aWNrSW50ZXJ2YWxzIiwidGlja0ludGVydmFsIiwidGlja2VyIiwibG9jYWxEYXRlIiwiSCIsIk0iLCJTIiwiTCIsInV0Y0RhdGUiLCJVVEMiLCJuZXdEYXRlIiwidGltZUZvcm1hdCIsInBhZHMiLCJudW1iZXJSZSIsInBlcmNlbnRSZSIsInJlcXVvdGVSZSIsInBhZCIsInJlcXVvdGUiLCJmb3JtYXRSZSIsImZvcm1hdExvb2t1cCIsInBhcnNlV2Vla2RheU51bWJlclN1bmRheSIsInBhcnNlV2Vla2RheU51bWJlck1vbmRheSIsInBhcnNlV2Vla051bWJlclN1bmRheSIsIlUiLCJwYXJzZVdlZWtOdW1iZXJJU08iLCJWIiwicGFyc2VXZWVrTnVtYmVyTW9uZGF5IiwiVyIsInBhcnNlRnVsbFllYXIiLCJwYXJzZVllYXIiLCJwYXJzZVpvbmUiLCJaIiwicGFyc2VRdWFydGVyIiwicGFyc2VNb250aE51bWJlciIsInBhcnNlRGF5T2ZNb250aCIsInBhcnNlRGF5T2ZZZWFyIiwicGFyc2VIb3VyMjQiLCJwYXJzZU1pbnV0ZXMiLCJwYXJzZVNlY29uZHMiLCJwYXJzZU1pbGxpc2Vjb25kcyIsInBhcnNlTWljcm9zZWNvbmRzIiwicGFyc2VMaXRlcmFsUGVyY2VudCIsInBhcnNlVW5peFRpbWVzdGFtcCIsIlEiLCJwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzIiwiZm9ybWF0RGF5T2ZNb250aCIsImZvcm1hdEhvdXIyNCIsImZvcm1hdEhvdXIxMiIsImZvcm1hdERheU9mWWVhciIsInRpbWVEYXkiLCJ0aW1lWWVhciIsImZvcm1hdE1pbGxpc2Vjb25kcyIsImZvcm1hdE1pY3Jvc2Vjb25kcyIsImZvcm1hdE1vbnRoTnVtYmVyIiwiZm9ybWF0TWludXRlcyIsImZvcm1hdFNlY29uZHMiLCJmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5IiwiZm9ybWF0V2Vla051bWJlclN1bmRheSIsInRpbWVTdW5kYXkiLCJkSVNPIiwidGltZVRodXJzZGF5IiwiZm9ybWF0V2Vla051bWJlcklTTyIsImZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRXZWVrTnVtYmVyTW9uZGF5IiwidGltZU1vbmRheSIsImZvcm1hdFllYXIiLCJmb3JtYXRZZWFySVNPIiwiZm9ybWF0RnVsbFllYXIiLCJmb3JtYXRGdWxsWWVhcklTTyIsImZvcm1hdFpvbmUiLCJmb3JtYXRVVENEYXlPZk1vbnRoIiwiZm9ybWF0VVRDSG91cjI0IiwiZm9ybWF0VVRDSG91cjEyIiwiZm9ybWF0VVRDRGF5T2ZZZWFyIiwiZm9ybWF0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZm9ybWF0VVRDTWljcm9zZWNvbmRzIiwiZm9ybWF0VVRDTW9udGhOdW1iZXIiLCJmb3JtYXRVVENNaW51dGVzIiwiZm9ybWF0VVRDU2Vjb25kcyIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXkiLCJkb3ciLCJmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5IiwiVVRDZElTTyIsImZvcm1hdFVUQ1dlZWtOdW1iZXJJU08iLCJmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5IiwiZm9ybWF0VVRDV2Vla051bWJlck1vbmRheSIsImZvcm1hdFVUQ1llYXIiLCJmb3JtYXRVVENZZWFySVNPIiwiZm9ybWF0VVRDRnVsbFllYXIiLCJmb3JtYXRVVENGdWxsWWVhcklTTyIsImZvcm1hdFVUQ1pvbmUiLCJmb3JtYXRMaXRlcmFsUGVyY2VudCIsImZvcm1hdFVuaXhUaW1lc3RhbXAiLCJmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyIsImNhbGVuZGFyIiwiZm9ybWF0TWlsbGlzZWNvbmQiLCJmb3JtYXRTZWNvbmQiLCJmb3JtYXRNaW51dGUiLCJmb3JtYXRIb3VyIiwiZm9ybWF0RGF5IiwiZm9ybWF0V2VlayIsImZvcm1hdE1vbnRoIiwibG9jYWxlX2RhdGVUaW1lIiwiZGF0ZVRpbWUiLCJsb2NhbGVfZGF0ZSIsImxvY2FsZV90aW1lIiwibG9jYWxlX3BlcmlvZHMiLCJwZXJpb2RzIiwibG9jYWxlX3dlZWtkYXlzIiwiZGF5cyIsImxvY2FsZV9zaG9ydFdlZWtkYXlzIiwic2hvcnREYXlzIiwibG9jYWxlX21vbnRocyIsIm1vbnRocyIsImxvY2FsZV9zaG9ydE1vbnRocyIsInNob3J0TW9udGhzIiwicGVyaW9kUmUiLCJwZXJpb2RMb29rdXAiLCJ3ZWVrZGF5UmUiLCJ3ZWVrZGF5TG9va3VwIiwic2hvcnRXZWVrZGF5UmUiLCJzaG9ydFdlZWtkYXlMb29rdXAiLCJtb250aFJlIiwibW9udGhMb29rdXAiLCJzaG9ydE1vbnRoUmUiLCJzaG9ydE1vbnRoTG9va3VwIiwiZm9ybWF0cyIsIkEiLCJCIiwiRyIsIkkiLCJZIiwidXRjRm9ybWF0cyIsInBhcnNlcyIsInBhcnNlU3BlY2lmaWVyIiwiY2hhckF0IiwibmV3UGFyc2UiLCJ1dGNGb3JtYXQiLCJ1dGNQYXJzZSIsImRlZmF1bHRMb2NhbGUiLCJTZWFyY2hUeXBlIiwiR3JhcGhUeXBlIiwiVmFsdWVUeXBlIiwiaGFsZlBpIiwiYXNpbiIsImFyY0lubmVyUmFkaXVzIiwiaW5uZXJSYWRpdXMiLCJhcmNPdXRlclJhZGl1cyIsIm91dGVyUmFkaXVzIiwiYXJjU3RhcnRBbmdsZSIsInN0YXJ0QW5nbGUiLCJhcmNFbmRBbmdsZSIsImVuZEFuZ2xlIiwiYXJjUGFkQW5nbGUiLCJwYWRBbmdsZSIsImludGVyc2VjdCIsIngzIiwieTMiLCJ4MTAiLCJ5MTAiLCJ4MzIiLCJ5MzIiLCJjb3JuZXJUYW5nZW50cyIsInJjIiwib3giLCJveSIsIngxMSIsInkxMSIsIngwMCIsInkwMCIsImQyIiwiRCIsImN4MCIsImN5MCIsImN4MSIsImN5MSIsImR4MCIsImR5MCIsImR4MSIsImR5MSIsImN4IiwiY3kiLCJjb3JuZXJSYWRpdXMiLCJwYWRSYWRpdXMiLCJidWZmZXIiLCJhMDEiLCJhMTEiLCJhMDAiLCJhMTAiLCJkYTAiLCJkYTEiLCJhcCIsInJwIiwicmMwIiwicmMxIiwicDAiLCJwMSIsIm9jIiwiYXgiLCJheSIsImJ4IiwiYnkiLCJrYyIsImxjIiwiY2VudHJvaWQiLCJMaW5lYXIiLCJfY29udGV4dCIsImFyZWFTdGFydCIsIl9saW5lIiwiYXJlYUVuZCIsImxpbmVTdGFydCIsIl9wb2ludCIsImxpbmVFbmQiLCJwb2ludCIsIkRhdGFQb2ludCIsIlF1ZXJ5Iiwic2VhcmNoVHlwZSIsInNlYXJjaFRhcmdldCIsInNlcGFyYXRvciIsImFjY2Vzc29yIiwiYWNjZXNzb3IxIiwiYWNjZXNzb3IyIiwidmFsdWVUeXBlIiwidXNlZEFzWERhdGFzZXQiLCJudW1UYXJnZXRzIiwiVGFibGUiLCJyZWdleCIsInBhcnNlRmxvYXQiLCJpc051bWJlciIsInBhcmVudFRhcmdldCIsImVxdWFsVG8iLCJvdGhlciIsImdldFR5cGUiLCJnZXRUYXJnZXQiLCJnZXRQYXJlbnRUYXJnZXQiLCJnZXRJZCIsImdldEFjY2Vzc29yIiwic2V0U2VwYXJhdG9yIiwic2VwIiwiZ2V0U2VwYXJhdG9yIiwiYWRkTnVtVGFyZ2V0cyIsIm51bSIsImdldE51bVRhcmdldHMiLCJEYXRhc2V0IiwicXVlcnkiLCJ5TWluIiwieU1heCIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJsaW5lSW5mbyIsImJhckluZm8iLCJpc1RtcERhdGFzZXQiLCJpbmQiLCJnZXREYXRlcyIsImNsb25lVG9UbXBEYXRhc2V0IiwidG1wRGF0YXNldCIsImdldE5hbWUiLCJzZXROYW1lIiwic2V0SWQiLCJnZXRWYWx1ZSIsImRheVNoaWZ0IiwiZ2V0SW5kZXhPZkRhdGUiLCJzZXRWYWx1ZSIsInJlY2FsY3VsYXRlTWluTWF4IiwiZ2V0WU1pbiIsImdldFlNYXgiLCJnZXRTdGFydERhdGUiLCJnZXRFbmREYXRlIiwic2hpZnQiLCJzaGlmdEFtb3VudCIsInNldFBlbmFsdHkiLCJwZW5hbHR5IiwiZ2V0UXVlcnkiLCJhY2N1bXVsYXRlVmFsdWVzIiwiYWNjdW1WYWx1ZSIsImdldFZhbHVlcyIsImdldExlbmd0aCIsImdldExlbmd0aE5vdE51bGwiLCJjb3VudE5vdE51bGwiLCJjdXJyZW50SW5kZXgiLCJEYXRhc2V0cyIsImRhdGVzIiwiZGF0YXNldHMiLCJkYXRlRm9ybWF0IiwiY3JlYXRpb25EYXRhIiwiY3VyRGF0ZSIsIm1vbWVudCIsImNyZWF0ZURhdGFzZXQiLCJyZW5kZXJJbmZvIiwiZGF0YXNldCIsImRhdGFzZXROYW1lIiwiZ2V0RGF0YXNldEJ5UXVlcnkiLCJnZXREYXRhc2V0QnlJZCIsImdldFhEYXRhc2V0SWRzIiwiaWRzIiwiaW5jbHVkZXMiLCJnZXROYW1lcyIsIlJlbmRlckluZm8iLCJxdWVyaWVzIiwieERhdGFzZXQiLCJmb2xkZXIiLCJkYXRlRm9ybWF0UHJlZml4IiwiZGF0ZUZvcm1hdFN1ZmZpeCIsImNvbnN0VmFsdWUiLCJpZ25vcmVBdHRhY2hlZFZhbHVlIiwiaWdub3JlWmVyb1ZhbHVlIiwiYWNjdW0iLCJ2YWx1ZVNoaWZ0IiwiZGF0YUFyZWFTaXplIiwiU2l6ZSIsIm1hcmdpbiIsIk1hcmdpbiIsInRvb2x0aXBTaXplIiwiZml4ZWRTY2FsZSIsImZpdFBhbmVsV2lkdGgiLCJiYXIiLCJwaWUiLCJzdW1tYXJ5IiwiaGVhdG1hcCIsImJ1bGxldCIsImN1c3RvbURhdGFzZXQiLCJnZXRRdWVyeUJ5SWQiLCJDdXN0b21EYXRhc2V0SW5mbyIsInhEYXRhIiwieURhdGEiLCJDb21tb25DaGFydEluZm8iLCJ0aXRsZSIsInhBeGlzTGFiZWwiLCJ4QXhpc0NvbG9yIiwieEF4aXNMYWJlbENvbG9yIiwieUF4aXNMYWJlbCIsInlBeGlzQ29sb3IiLCJ5QXhpc0xhYmVsQ29sb3IiLCJ5QXhpc1VuaXQiLCJyZXZlcnNlWUF4aXMiLCJhbGxvd0luc3BlY3REYXRhIiwic2hvd0xlZ2VuZCIsImxlZ2VuZFBvc2l0aW9uIiwibGVnZW5kT3JpZW50YXRpb24iLCJsZWdlbmRCZ0NvbG9yIiwibGVnZW5kQm9yZGVyQ29sb3IiLCJHZXRHcmFwaFR5cGUiLCJVbmtub3duIiwiTGluZUluZm8iLCJzdXBlciIsImxpbmVDb2xvciIsImxpbmVXaWR0aCIsInNob3dMaW5lIiwic2hvd1BvaW50IiwicG9pbnRDb2xvciIsInBvaW50Qm9yZGVyQ29sb3IiLCJwb2ludEJvcmRlcldpZHRoIiwicG9pbnRTaXplIiwiZmlsbEdhcCIsInlBeGlzTG9jYXRpb24iLCJMaW5lIiwiQmFySW5mbyIsImJhckNvbG9yIiwiQmFyIiwiUGllSW5mbyIsImRhdGFDb2xvciIsImRhdGFOYW1lIiwibGFiZWwiLCJoaWRlTGFiZWxMZXNzVGhhbiIsImV4dExhYmVsIiwic2hvd0V4dExhYmVsT25seUlmTm9MYWJlbCIsInJhdGlvSW5uZXJSYWRpdXMiLCJQaWUiLCJTdW1tYXJ5SW5mbyIsInRlbXBsYXRlIiwiU3VtbWFyeSIsIk1vbnRoSW5mbyIsIm1vZGUiLCJzdGFydFdlZWtPbiIsInRocmVzaG9sZCIsInNob3dDaXJjbGUiLCJkaW1Ob3RJbk1vbnRoIiwic2hvd1N0cmVhayIsInNob3dUb2RheVJpbmciLCJzaG93U2VsZWN0ZWRWYWx1ZSIsInNob3dTZWxlY3RlZFJpbmciLCJjaXJjbGVDb2xvciIsImNpcmNsZUNvbG9yQnlWYWx1ZSIsImhlYWRlclllYXJDb2xvciIsImhlYWRlck1vbnRoQ29sb3IiLCJkaXZpZGluZ0xpbmVDb2xvciIsInRvZGF5UmluZ0NvbG9yIiwic2VsZWN0ZWRSaW5nQ29sb3IiLCJpbml0TW9udGgiLCJzZWxlY3RlZERhdGUiLCJzZWxlY3RlZERhdGFzZXQiLCJNb250aCIsIkhlYXRtYXBJbmZvIiwib3JpZW50YXRpb24iLCJIZWF0bWFwIiwiQnVsbGV0SW5mbyIsInZhbHVlVW5pdCIsInZhbHVlQ29sb3IiLCJyYW5nZUNvbG9yIiwic2hvd01hcmtlciIsIm1hcmtlclZhbHVlIiwibWFya2VyQ29sb3IiLCJCdWxsZXQiLCJoZWlnaHQiLCJ0b3AiLCJib3R0b20iLCJUcmFuc2Zvcm0iLCJUYWJsZURhdGEiLCJmaWxlUGF0aCIsInRhYmxlSW5kZXgiLCJ5RGF0YXNldHMiLCJzdHJUb0RhdGUiLCJzdHJEYXRlIiwic3RhcnRzV2l0aCIsImVuZHNXaXRoIiwiSVNPXzg2MDEiLCJzdGFydE9mIiwicmVsRGF0ZVN0cmluZ1RvRGF0ZSIsInJlbERhdGVTdHJpbmciLCJyZWxEYXRlUmVnZXgiLCJnZXREYXRlVG9kYXkiLCJpc1ZhbGlkIiwiZGF0ZVRvU3RyIiwiZ2V0RGF0ZUZyb21Vbml4VGltZSIsInVuaXhUaW1lIiwiZGVlcFZhbHVlIiwib2JqIiwic3RyIiwidHJpbUJ5Q2hhciIsImNoYXIiLCJhcnIiLCJmaXJzdCIsImZpbmRJbmRleCIsImxhc3QiLCJwYXJzZUZsb2F0RnJvbUFueSIsInRvUGFyc2UiLCJuZWdhdGl2ZVZhbHVlIiwidGltZVZhbHVlIiwiZGlmZiIsIlRpbWUiLCJtZWFzdXJlVGV4dFNpemUiLCJzdHlsZUNsYXNzIiwiY29udGFpbmVyIiwiZDMuc2VsZWN0IiwidGV4dEJsb2NrIiwiZ2V0QkJveCIsImV4cGFuZEFyZWEiLCJhcmVhIiwiYWRkVyIsImFkZEgiLCJuZXdXaWR0aCIsIm5ld0hlaWdodCIsIm1vdmVBcmVhIiwic2hpZnRYIiwic2hpZnRZIiwidHJhbnMiLCJjbGVhblRleHQiLCJDT01QT1VORCIsIk1FTUJFUl9FWFAiLCJMSVRFUkFMIiwidGhyb3dFcnJvciIsIm1lc3NhZ2UiLCJkZXNjcmlwdGlvbiIsInVuYXJ5X29wcyIsImJpbmFyeV9vcHMiLCJhZGRpdGlvbmFsX2lkZW50aWZpZXJfY2hhcnMiLCIkIiwiZ2V0TWF4S2V5TGVuIiwibGVuIiwibWF4X2xlbiIsIm1heF91bm9wX2xlbiIsIm1heF9iaW5vcF9sZW4iLCJsaXRlcmFscyIsInRydWUiLCJmYWxzZSIsIm51bGwiLCJiaW5hcnlQcmVjZWRlbmNlIiwib3BfdmFsIiwiY3JlYXRlQmluYXJ5RXhwcmVzc2lvbiIsIm9wZXJhdG9yIiwiaXNEZWNpbWFsRGlnaXQiLCJjaCIsImlzSWRlbnRpZmllclN0YXJ0IiwiZnJvbUNoYXJDb2RlIiwiaXNJZGVudGlmaWVyUGFydCIsImpzZXAiLCJleHByIiwiY2hfaSIsImNoYXJBdEZ1bmMiLCJjaGFyQ29kZUF0RnVuYyIsImV4cHJJIiwiZXhwcklDb2RlIiwiZ29iYmxlU3BhY2VzIiwiZ29iYmxlRXhwcmVzc2lvbiIsImNvbnNlcXVlbnQiLCJhbHRlcm5hdGUiLCJnb2JibGVCaW5hcnlFeHByZXNzaW9uIiwiZ29iYmxlQmluYXJ5T3AiLCJ0b19jaGVjayIsInN1YnN0ciIsInRjX2xlbiIsImJpb3AiLCJwcmVjIiwic3RhY2siLCJiaW9wX2luZm8iLCJjdXJfYmlvcCIsImdvYmJsZVRva2VuIiwiZ29iYmxlTnVtZXJpY0xpdGVyYWwiLCJnb2JibGVTdHJpbmdMaXRlcmFsIiwiZ29iYmxlQXJyYXkiLCJhcmd1bWVudCIsImdvYmJsZUlkZW50aWZpZXIiLCJnb2JibGVHcm91cCIsImNvbXB1dGVkIiwiZ29iYmxlQXJndW1lbnRzIiwiY2FsbGVlIiwiY2hDb2RlIiwicmF3IiwicXVvdGUiLCJjbG9zZWQiLCJpZGVudGlmaWVyIiwidGVybWluYXRpb24iLCJzZXBhcmF0b3JfY291bnQiLCJhcmciLCJlbGVtZW50cyIsImJvZHkiLCJ2ZXJzaW9uIiwiYWRkVW5hcnlPcCIsIm9wX25hbWUiLCJhZGRCaW5hcnlPcCIsInByZWNlZGVuY2UiLCJhZGRJZGVudGlmaWVyQ2hhciIsImFkZExpdGVyYWwiLCJsaXRlcmFsX25hbWUiLCJsaXRlcmFsX3ZhbHVlIiwicmVtb3ZlVW5hcnlPcCIsInJlbW92ZUFsbFVuYXJ5T3BzIiwicmVtb3ZlSWRlbnRpZmllckNoYXIiLCJyZW1vdmVCaW5hcnlPcCIsInJlbW92ZUFsbEJpbmFyeU9wcyIsInJlbW92ZUxpdGVyYWwiLCJyZW1vdmVBbGxMaXRlcmFscyIsIm1vZHVsZSIsImV4cG9ydHMiLCJub3Rfc3RyaW5nIiwibm90X2Jvb2wiLCJub3RfdHlwZSIsIm5vdF9wcmltaXRpdmUiLCJudW1lcmljX2FyZyIsImpzb24iLCJub3RfanNvbiIsIm1vZHVsbyIsInBsYWNlaG9sZGVyIiwia2V5X2FjY2VzcyIsImluZGV4X2FjY2VzcyIsInNwcmludGYiLCJzcHJpbnRmX2Zvcm1hdCIsInNwcmludGZfcGFyc2UiLCJ2c3ByaW50ZiIsImZtdCIsImFyZ3YiLCJwYXJzZV90cmVlIiwicGgiLCJwYWRfY2hhcmFjdGVyIiwicGFkX2xlbmd0aCIsImlzX3Bvc2l0aXZlIiwiY3Vyc29yIiwidHJlZV9sZW5ndGgiLCJrZXlzIiwicGFyYW1fbm8iLCJGdW5jdGlvbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJwYWRfY2hhciIsInJlcGVhdCIsInNwcmludGZfY2FjaGUiLCJfZm10IiwiYXJnX25hbWVzIiwiU3ludGF4RXJyb3IiLCJmaWVsZF9saXN0IiwicmVwbGFjZW1lbnRfZmllbGQiLCJmaWVsZF9tYXRjaCIsImNoZWNrRGl2aXNvciIsImRpdmlzb3IiLCJzb21lIiwiZm5NYXBEYXRhc2V0VG9WYWx1ZSIsImQzLm1pbiIsIm1pbkRhdGUiLCJhcnJheURhdGFzZXQiLCJkYXRhUG9pbnQiLCJkMy5tYXgiLCJtYXhEYXRlIiwiZDMuc3VtIiwibnVtRGF5cyIsIm51bURheXNIYXZpbmdEYXRhIiwibWF4U3RyZWFrIiwic3RyZWFrIiwibWF4U3RyZWFrU3RhcnQiLCJzdHJlYWtTdGFydCIsIm1heFN0cmVha0VuZCIsInN0cmVha0VuZCIsIm5leHRQb2ludCIsIm1heEJyZWFrcyIsImJyZWFrcyIsIm1heEJyZWFrc1N0YXJ0IiwiYnJlYWtzU3RhcnQiLCJtYXhCcmVha3NFbmQiLCJicmVha3NFbmQiLCJsYXN0U3RyZWFrIiwiY3VycmVudFN0cmVhayIsImN1cnJlbnRTdHJlYWtTdGFydCIsImN1cnJlbnRTdHJlYWtFbmQiLCJjdXJyZW50QnJlYWtzIiwiY3VycmVudEJyZWFrc1N0YXJ0IiwiY3VycmVudEJyZWFrc0VuZCIsImF2ZXJhZ2UiLCJtZWRpYW4iLCJ2YXJpYW5jZSIsIm1lYW4iLCJkMy52YXJpYW5jZSIsImZuTWFwVW5pcnlPcCIsImZvckVhY2giLCJmbk1hcEJpbmFyeU9wIiwiZm5NYXBEYXRhc2V0VG9EYXRhc2V0Iiwibm9ybWFsaXplZCIsInNldE1pc3NpbmdWYWx1ZXMiLCJtaXNzaW5nVmFsdWUiLCJuZXdEYXRhc2V0IiwiZXZhbHVhdGUiLCJpZGVudGlmaWVyTmFtZSIsInVuaXJ5RXhwciIsInJldFVuaXJ5QXJnIiwiYmluYXJ5RXhwciIsImxlZnRWYWx1ZSIsInJpZ2h0VmFsdWUiLCJyZXRDaGVjayIsImlzTW9tZW50IiwiY2hlY2tCaW5hcnlPcGVyYW50VHlwZSIsImNhbGxFeHByIiwiZm5OYW1lIiwiZXZhbHVhdGVkQXJncyIsImV2YWx1YXRlQXJyYXkiLCJkYXRhc2V0SWQiLCJkcyIsImV4cHJNYXAiLCJleHByUmVnZXgiLCJmdWxsbWF0Y2giLCJhc3QiLCJlcnIiLCJyZXNvbHZlVGVtcGxhdGUiLCJyZXRSZXNvbHZlIiwiZXhwclJlc29sdmVkIiwic3RyVmFsdWUiLCJoZWxwZXIuZGF0ZVRvU3RyIiwicmVwbGFjZUFsbCIsInJlc29sdmVWYWx1ZSIsInJlbmRlclBpZSIsImNhbnZhcyIsImNoYXJ0RWxlbWVudHMiLCJwaWVJbmZvIiwiZXJyb3JNZXNzYWdlIiwicmFkaXVzIiwib3V0dGVyUmFkaXVzIiwic3RyRXhwciIsInJldFZhbHVlIiwiZXhwci5yZXNvbHZlVmFsdWUiLCJsYWJlbHMiLCJyZXRMYWJlbCIsImV4cHIucmVzb2x2ZVRlbXBsYXRlIiwibGFiZWxTaXplcyIsImhlbHBlci5tZWFzdXJlVGV4dFNpemUiLCJleHRMYWJlbHMiLCJyZXRFeHRMYWJlbCIsImV4dExhYmVsU2l6ZXMiLCJjb2xvclNjYWxlIiwiZDMuc2NhbGVPcmRpbmFsIiwic2VjdG9yc0dyb3VwIiwiZGF0YUFyZWEiLCJzb3J0VmFsdWVzIiwiZGVzY2VuZGluZyIsImFyY3MiLCJwYSIsImQzLnBpZSIsInBpZVZhbHVlcyIsInNlY3RvcnMiLCJkMy5hcmMiLCJoaWRkZW5BcmMiLCJkM1xyXG4gICAgICAgIC5hcmMiLCJpc0xhYmVsSGlkZGVuIiwiYXJjT2JqIiwiZ2V0TWlkQW5nbGUiLCJnZXRQb2ludHNGb3JDb25uZWN0aW9uTGluZXMiLCJsYWJlbFdpZHRoIiwiZXh0TGFiZWxXaWR0aCIsIm1pZEFuZ2xlIiwicG9zTGFiZWwiLCJwb3NNaWRkbGUiLCJwb3NFeHRMYWJlbCIsImRpc3RNaWRkbGVUb0xhYmVsIiwicmVuZGVyUGllQ2hhcnQiLCJwcm9wcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJkM1xyXG4gICAgICAgIC5zZWxlY3QiLCJncmFwaEFyZWEiLCJjcmVhdGVBcmVhcyIsInRpdGxlU2l6ZSIsImhlbHBlci5leHBhbmRBcmVhIiwiaGVscGVyLm1vdmVBcmVhIiwicmVuZGVyVGl0bGUiLCJ0aXRsZUhlaWdodCIsIm5hbWVTaXplcyIsImluZE1heE5hbWUiLCJtYXhOYW1lV2lkdGgiLCJjaGFyYWN0ZXJXaWR0aCIsIm5hbWVIZWlnaHQiLCJudW1OYW1lcyIsInhTcGFjaW5nIiwieVNwYWNpbmciLCJtYXJrZXJXaWR0aCIsImxlZ2VuZFdpZHRoIiwibGVnZW5kSGVpZ2h0IiwibGVnZW5kWCIsImxlZ2VuZFkiLCJsZWdlbmQiLCJsZWdlbmRCZyIsImZpcnN0TWFya2VyWCIsImZpcnN0TWFya2VyWSIsImZpcnN0TGFiZWxYIiwiZmlyc3RMYWJlbFkiLCJjdXJyUmVuZGVyUG9zWCIsInJlbmRlckxlZ2VuZCIsInJlbmRlclN1bW1hcnkiLCJzdW1tYXJ5SW5mbyIsIm91dHB1dFN1bW1hcnkiLCJyZXRSZXNvbHZlZFRlbXBsYXRlIiwib3V0cHV0TGluZXMiLCJvdXRwdXRMaW5lIiwidG9OZXh0RGF0YXNldCIsIm1vbnRoSW5mbyIsImRhdGFzZXRJZHMiLCJjdXJEYXRhc2V0SWQiLCJjdXJJbmRleCIsImNsZWFyU2VsZWN0aW9uIiwiY2lyY2xlcyIsImNpcmNsZSIsIm1vbml0b3IiLCJyZW5kZXJNb250aEhlYWRlciIsImN1ck1vbnRoRGF0ZSIsImRheXNJbk1vbnRoIiwibWF4RGF5VGV4dFNpemUiLCJjZWxsU2l6ZSIsImhlYWRlclllYXJUZXh0IiwiaGVhZGVyTW9udGhUZXh0IiwiaGVhZGVyWWVhclNpemUiLCJoZWFkZXJNb250aFNpemUiLCJoZWFkZXJIZWlnaHQiLCJoZWFkZXJHcm91cCIsImhlYWRlck1vbnRoIiwiaGVhZGVyWWVhciIsImRhdGFzZXROYW1lU2l6ZSIsImRhdGFzZXRSb3RhdG9yIiwicmVmcmVzaCIsIm1vbml0b3JUZXh0U2l6ZSIsImFycm93U2l6ZSIsInByZXZNb250aERhdGUiLCJuZXh0TW9udGhEYXRlIiwidG9kYXlEYXRlIiwiaGVscGVyLmdldERhdGVUb2RheSIsIndlZWtkYXlOYW1lcyIsIndlZWtkYXlOYW1lU2l6ZSIsImRpdmlkaW5nTGluZSIsInJlbmRlck1vbnRoRGF5cyIsImN1ckRhdGFzZXRJbmRleCIsImRvdFJhZGl1cyIsInN0cmVha1dpZHRoIiwiYWxsb3dTY2FsZWRWYWx1ZSIsIm1vbnRoU3RhcnREYXRlIiwic3VidHJhY3QiLCJtb250aEVuZERhdGUiLCJlbmRPZiIsImRhdGFTdGFydERhdGUiLCJkYXRhRW5kRGF0ZSIsImRheXNJbk1vbnRoVmlldyIsImluZENvbCIsImluZFJvdyIsImlzSW5UaGlzTW9udGgiLCJpc091dE9mRGF0YVJhbmdlIiwiY3VyVmFsdWUiLCJzY2FsZWRWYWx1ZSIsIm5leHRWYWx1ZSIsInByZXZWYWx1ZSIsInN0cmVha0luIiwic3RyZWFrT3V0IiwiZGF5SW5Nb250aCIsInJvdyIsImNvbCIsInRvdGFsRGF5QmxvY2tXaWR0aCIsImQzXHJcbiAgICAgICAgLnNjYWxlTGluZWFyIiwic3RyZWFrQ29sb3IiLCJzdHJlYWtIZWlnaHQiLCJkMy5pbnRlcnBvbGF0ZUxhYiIsInRvZGF5IiwidG9kYXlSaW5ncyIsInZhbHVlVGV4dCIsInN2Z1dpZHRoIiwic3ZnSGVpZ2h0IiwiZ3JhcGhBcmVhV2lkdGgiLCJncmFwaEFyZWFIZWlnaHQiLCJ0b3RhbEhlaWdodCIsImhlYWRlciIsInRvdGFsV2lkdGgiLCJyZW5kZXJNb250aCIsIm51bUF2YWlsYWJsZURhdGFzZXQiLCJtb250aERhdGUiLCJyZW5kZXJIZWF0bWFwIiwiaGVhdG1hcEluZm8iLCJyZW5kZXJCdWxsZXQiLCJidWxsZXRJbmZvIiwicmV0UmVuZGVyQXhpcyIsImxhc3RSYW5nZSIsInRpY2tGb3JtYXRGbiIsImQzLnRpY2tGb3JtYXQiLCJtYXhUaWNrTGFiZWxTaXplIiwiZDMuc2NhbGVMaW5lYXIiLCJheGlzR2VuIiwiZDMuYXhpc0JvdHRvbSIsImQzLmF4aXNMZWZ0IiwicmVuZGVyQXhpcyIsInhNaWRkbGUiLCJheGlzV2lkdGgiLCJ1bml0U2l6ZSIsImxhc3RCb3VuZCIsInJlbmRlckJhY2tQYW5lbCIsInJldFJlbmRlckJhciIsInJldEFjdHVhbFZhbHVlIiwiYWN0dWFsVmFsdWUiLCJiYXJXaWR0aCIsInJlbmRlckJhciIsIm1hcmtlckxlbmd0aCIsInJlbmRlck1hcmsiLCJfY2FudmFzIiwic2V0Q2hhcnRTY2FsZSIsImdldFlUaWNrRm9ybWF0IiwieUxvd2VyIiwieVVwcGVyIiwic2tpcCIsImFic0V4dGVudCIsInRpY2tUaW1lIiwiaW50ZXJsZWF2ZSIsInJlbmRlclhBeGlzIiwiY2hhcnRJbmZvIiwieERvbWFpbiIsImQzLmV4dGVudCIsInhTY2FsZSIsInRpbWVNb250aCIsInRpbWVXZWVrIiwidGltZUhvdXIiLCJ0aW1lTWludXRlIiwidGltZVNlY29uZCIsImQzXHJcbiAgICAgICAgLnNjYWxlVGltZSIsImQzLnRpbWVEYXkiLCJkMy50aW1lV2VlayIsImQzLnRpbWVNb250aCIsImQzLnRpbWVZZWFyIiwiZ2V0WFRpY2tJbnRlcnZhbCIsImQzLnRpbWVGb3JtYXQiLCJnZXRYVGlja0Zvcm1hdCIsInhBeGlzR2VuIiwiZDNcclxuICAgICAgICAuYXhpc0JvdHRvbSIsInhBeGlzIiwidGV4dFNpemUiLCJ4QXhpc1RpY2tMYWJlbHMiLCJ0aWNrTGFiZWxIZWlnaHQiLCJyZW5kZXJZQXhpcyIsInlNaW5PZkRhdGFzZXRzIiwieU1heE9mRGF0YXNldHMiLCJ0bXBWYWx1ZUlzVGltZSIsInZhbHVlSXNUaW1lIiwieU1pbkFzc2lnbmVkIiwieU1heEFzc2lnbmVkIiwieVRtcCIsInlUbXBBc3NpZ25lZCIsInlFeHRlbnQiLCJ5U2NhbGUiLCJ5QXhpc0xhYmVsVGV4dCIsInlBeGlzR2VuIiwieUF4aXNVbml0VGV4dCIsImQzLnJhbmdlIiwiZ2V0WVRpY2tWYWx1ZXMiLCJ5QXhpcyIsInlBeGlzTGluZSIsInlBeGlzVGlja3MiLCJ5QXhpc1RpY2tMYWJlbHMiLCJ5VGlja0Zvcm1hdCIsInlMb3dlckxhYmVsU2l6ZSIsInlVcHBlckxhYmVsU2l6ZSIsIm1heFRpY2tMYWJlbFdpZHRoIiwieUF4aXNMYWJlbFNpemUiLCJ5QXhpc1dpZHRoIiwicmVuZGVyTGluZSIsImxlZnRZU2NhbGUiLCJyaWdodFlTY2FsZSIsImxpbmVHZW4iLCJkZWZpbmVkIiwiY3VydmUiLCJjdXJ2ZUxpbmVhciIsImRlZmluZWQwIiwicG9pbnRYIiwicG9pbnRZIiwiZDNcclxuICAgICAgICAgICAgLmxpbmUiLCJyZW5kZXJQb2ludHMiLCJkb3RzIiwiaXNJbnRlZ2VyIiwidG9vbHRpcCIsInRvb2x0aXBMYWJlbCIsInRvb2x0aXBMYWJlbERhdGUiLCJ0b29sdGlwTGFiZWxWYWx1ZSIsImRhdGVWYWx1ZSIsInNvdXJjZUV2ZW50IiwiY3VycmVudFRhcmdldCIsIm93bmVyU1ZHRWxlbWVudCIsImNyZWF0ZVNWR1BvaW50IiwiY2xpZW50WCIsImNsaWVudFkiLCJtYXRyaXhUcmFuc2Zvcm0iLCJnZXRTY3JlZW5DVE0iLCJpbnZlcnNlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50TGVmdCIsImNsaWVudFRvcCIsInBhZ2VYIiwicGFnZVkiLCJkMy5wb2ludGVyIiwiY3VyckJhclNldCIsInRvdGFsTnVtT2ZCYXJTZXRzIiwiYmFyU2V0V2lkdGgiLCJiYXJzIiwicG9ydGlvblZpc2libGUiLCJsZWZ0WUF4aXMiLCJyaWdodFlBeGlzIiwieEF4aXNIZWlnaHQiLCJsZWZ0WUF4aXNXaWR0aCIsInJpZ2h0WUF4aXNXaWR0aCIsInhEYXRhc2V0SWRzIiwibnVtRWxlbXNFeGNsdWRlZCIsIm5hbWVMYWJlbHMiLCJjdXJyUmVuZGVyUG9zWDIiLCJyZW5kZXJMaW5lQ2hhcnQiLCJkYXRhc2V0T25MZWZ0WUF4aXMiLCJkYXRhc2V0T25SaWdodFlBeGlzIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJyZXRSZW5kZXJMZWZ0WUF4aXMiLCJyZXRSZW5kZXJSaWdodFlBeGlzIiwicmVuZGVyQmFyQ2hhcnQiLCJyZW5kZXJFcnJvck1lc3NhZ2UiLCJzdHJUb0Jvb2wiLCJ2YWxpZGF0ZVNlYXJjaFR5cGUiLCJ2YWxpZGF0ZVlBeGlzTG9jYXRpb24iLCJsb2NhdGlvbiIsInZhbGlkYXRlQ29sb3IiLCJnZXRCb29sQXJyYXlGcm9tSW5wdXQiLCJudW1EYXRhc2V0IiwiZGVmYXVsdFZhbHVlIiwiYWxsb3dOb1ZhbGlkVmFsdWUiLCJudW1WYWxpZFZhbHVlIiwiY3VyciIsInByZXYiLCJzcGxpdHRlZCIsImN1cnJCb29sIiwiaW5wdXRCb29sIiwiZ2V0TnVtYmVyQXJyYXlGcm9tSW5wdXQiLCJoZWxwZXIucGFyc2VGbG9hdEZyb21BbnkiLCJjdXJyTnVtIiwiaW5wdXROdW0iLCJnZXRTdHJpbmdBcnJheUZyb21JbnB1dCIsInZhbGlkYXRvciIsImdldE51bWJlckFycmF5IiwibnVtQXJyYXkiLCJlbGVtIiwicGllY2UiLCJnZXRTdHJpbmdBcnJheSIsInN0ckFycmF5IiwicGFyc2VDb21tb25DaGFydEluZm8iLCJ5YW1sIiwicmV0WUF4aXNMYWJlbCIsInJldFlBeGlzQ29sb3IiLCJyZXRZQXhpc0xhYmVsQ29sb3IiLCJyZXRZQXhpc1VuaXQiLCJyZXRZTWluIiwicmV0WU1heCIsInJldFJldmVyc2VZQXhpcyIsImdldEF2YWlsYWJsZUtleXNPZkNsYXNzIiwib2JqZWN0S2V5cyIsImdldERhdGVGcm9tRmlsZW5hbWUiLCJmaWxlIiwiZmlsZUJhc2VOYW1lIiwiYmFzZW5hbWUiLCJoZWxwZXIuc3RyVG9EYXRlIiwiZ2V0RGF0ZUZyb21Gcm9udG1hdHRlciIsImZpbGVDYWNoZSIsImZyb250TWF0dGVyIiwiZnJvbnRtYXR0ZXIiLCJoZWxwZXIuZGVlcFZhbHVlIiwiZ2V0RGF0ZUZyb21UYWciLCJjb250ZW50IiwidGFnTmFtZSIsImhhc2hUYWdSZWdleCIsImdldERhdGVGcm9tVGV4dCIsInN0clRleHRSZWdleCIsInRleHRSZWdleCIsImdldERhdGVGcm9tRHZGaWVsZCIsImR2VGFyZ2V0IiwiZ2V0RGF0ZUZyb21GaWxlTWV0YSIsIlRGaWxlIiwiaGVscGVyLmdldERhdGVGcm9tVW5peFRpbWUiLCJzdGF0IiwiY3RpbWUiLCJtdGltZSIsImdldERhdGVGcm9tVGFzayIsIlRhc2siLCJUYXNrRG9uZSIsIlRhc2tOb3REb25lIiwiYWRkVG9EYXRhTWFwIiwiZGF0YU1hcCIsInF1ZXJ5VmFsdWVQYWlycyIsImNvbGxlY3REYXRhRnJvbUZpbGVNZXRhIiwieFZhbHVlTWFwIiwieFZhbHVlIiwicGF0dGVybiIsImhlbHBlci5nZXRXb3JkQ291bnQiLCJudW1DaGFycyIsIm51bVNlbnRlbmNlcyIsImhlbHBlci5nZXRTZW50ZW5jZUNvdW50IiwiREVGQVVMVF9TRVRUSU5HUyIsIlRyYWNrZXJTZXR0aW5nVGFiIiwiUGx1Z2luU2V0dGluZ1RhYiIsImFwcCIsInBsdWdpbiIsImRpc3BsYXkiLCJjb250YWluZXJFbCIsIlNldHRpbmciLCJzZXREZXNjIiwiYWRkVGV4dCIsInNldFBsYWNlaG9sZGVyIiwic2V0dGluZ3MiLCJvbkNoYW5nZSIsInNhdmVTZXR0aW5ncyIsIlRyYWNrZXIiLCJQbHVnaW4iLCJvbmxvYWQiLCJjb25zb2xlIiwibG9hZFNldHRpbmdzIiwiYWRkU2V0dGluZ1RhYiIsInJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IiLCJwb3N0cHJvY2Vzc29yIiwiYWRkQ29tbWFuZCIsImFkZENvZGVCbG9jayIsImxvYWREYXRhIiwic2F2ZURhdGEiLCJvbnVubG9hZCIsImdldEZpbGVzSW5Gb2xkZXIiLCJpbmNsdWRlU3ViRm9sZGVycyIsImZpbGVzIiwiaXRlbSIsImV4dGVuc2lvbiIsIlRGb2xkZXIiLCJnZXRGaWxlcyIsImZvbGRlclRvU2VhcmNoIiwidmF1bHQiLCJnZXRBYnN0cmFjdEZpbGVCeVBhdGgiLCJub3JtYWxpemVQYXRoIiwiZWwiLCJjdHgiLCJyZXRSZW5kZXJJbmZvIiwieWFtbFRleHQiLCJwYXJzZVlhbWwiLCJrZXlzRm91bmRJbllBTUwiLCJudW1EYXRhc2V0cyIsInJldFNlYXJjaFR5cGUiLCJzdHJUeXBlIiwiVGFnIiwiRnJvbnRtYXR0ZXIiLCJXaWtpIiwiVGV4dCIsImR2RmllbGQiLCJGaWxlTWV0YSIsIm11bHRpcGxlVmFsdWVTcGFyYXRvciIsInJldE11bHRpcGxlVmFsdWVTcGFyYXRvciIsInJldFhEYXRhc2V0Iiwia2V5c09mUmVuZGVySW5mbyIsImFkZGl0aW9uYWxBbGxvd2VkS2V5cyIsInlhbWxMaW5lS2V5cyIsInlhbWxCYXJLZXlzIiwieWFtbFBpZUtleXMiLCJ5YW1sU3VtbWFyeUtleXMiLCJ5YW1sTW9udGhLZXlzIiwieWFtbEhlYXRtYXBLZXlzIiwieWFtbEJ1bGxldEtleXMiLCJ5YW1sQ3VzdG9tRGF0YXNldEtleXMiLCJjdXN0b21EYXRhc2V0SWQiLCJzdHJDdXN0b21EYXRhc2V0SWQiLCJhYnN0cmFjdEZvbGRlciIsInN0clN0YXJ0RGF0ZSIsImlzU3RhcnREYXRlVmFsaWQiLCJoZWxwZXIucmVsRGF0ZVN0cmluZ1RvRGF0ZSIsInN0ckVuZERhdGUiLCJpc0VuZERhdGVWYWxpZCIsInJldERhdGFzZXROYW1lIiwiaW5kVW50aXRsZWQiLCJTZXQiLCJyZXRDb25zdFZhbHVlIiwicmV0SWdub3JlQXR0YWNoZWRWYWx1ZSIsInJldElnbm9yZVplcm9WYWx1ZSIsInJldEFjY3VtIiwicmV0UGVuYWx0eSIsInJldFZhbHVlU2hpZnQiLCJyZXRNYXJnaW4iLCJkYXRhc2V0S2V5IiwieWFtbEN1c3RvbURhdGFzZXQiLCJrZXlzT2ZDdXN0b21EYXRhc2V0SW5mbyIsInJldFhEYXRhIiwibnVtWERhdGEiLCJyZXRZRGF0YSIsImxpbmVLZXkiLCJ5YW1sTGluZSIsImtleXNPZkxpbmVJbmZvIiwicmV0UGFyc2VDb21tb25DaGFydEluZm8iLCJyZXRMaW5lQ29sb3IiLCJyZXRMaW5lV2lkdGgiLCJyZXRTaG93TGluZSIsInJldFNob3dQb2ludCIsInJldFBvaW50Q29sb3IiLCJyZXRQb2ludEJvcmRlckNvbG9yIiwicmV0UG9pbnRCb3JkZXJXaWR0aCIsInJldFBvaW50U2l6ZSIsInJldEZpbGxHYXAiLCJyZXRZQXhpc0xvY2F0aW9uIiwiYmFyS2V5IiwieWFtbEJhciIsImtleXNPZkJhckluZm8iLCJyZXRCYXJDb2xvciIsInBpZUtleSIsInlhbWxQaWUiLCJrZXlzT2ZQaWVJbmZvIiwicmV0RGF0YSIsIm51bURhdGEiLCJyZXREYXRhQ29sb3IiLCJyZXREYXRhTmFtZSIsInN1bW1hcnlLZXkiLCJ5YW1sU3VtbWFyeSIsImtleXNPZlN1bW1hcnlJbmZvIiwibW9udGhLZXkiLCJ5YW1sTW9udGgiLCJrZXlzT2ZNb250aEluZm8iLCJyZXREYXRhc2V0IiwicmV0VGhyZXNob2xkIiwiaW5kRGF0YXNldCIsImhlYXRtYXBLZXkiLCJ5YW1sSGVhdG1hcCIsImtleXNPZkhlYXRtYXBJbmZvIiwiYnVsbGV0S2V5IiwieWFtbEJ1bGxldCIsImtleXNPZkJ1bGxldEluZm8iLCJyZXRSYW5nZSIsIm51bVJhbmdlIiwicmV0UmFuZ2VDb2xvciIsImdldFJlbmRlckluZm9Gcm9tWWFtbCIsImZpbGVDb3VudGVyIiwibG9vcEZpbGVQcm9taXNlcyIsIm1ldGFkYXRhQ2FjaGUiLCJnZXRGaWxlQ2FjaGUiLCJhZGFwdGVyIiwicmVhZCIsInNraXBUaGlzRmlsZSIsInhEYXRhc2V0SWQiLCJ4RGF0ZSIsImNvbGxlY3RpbmcuZ2V0RGF0ZUZyb21GaWxlbmFtZSIsInhEYXRhc2V0UXVlcnkiLCJjb2xsZWN0aW5nLmdldERhdGVGcm9tRnJvbnRtYXR0ZXIiLCJjb2xsZWN0aW5nLmdldERhdGVGcm9tVGFnIiwiY29sbGVjdGluZy5nZXREYXRlRnJvbVRleHQiLCJjb2xsZWN0aW5nLmdldERhdGVGcm9tRHZGaWVsZCIsImNvbGxlY3RpbmcuZ2V0RGF0ZUZyb21GaWxlTWV0YSIsImNvbGxlY3RpbmcuZ2V0RGF0ZUZyb21UYXNrIiwibG9vcFF1ZXJ5UHJvbWlzZXMiLCJmcm9udE1hdHRlclRhZ3MiLCJ0YWdzIiwidGFnTWVhc3VyZSIsInRhZ0V4aXN0IiwidGFnIiwiY29sbGVjdGluZy5jb2xsZWN0RGF0YUZyb21Gcm9udG1hdHRlclRhZyIsInJldFBhcnNlIiwiY29sbGVjdGluZy5jb2xsZWN0RGF0YUZyb21Gcm9udG1hdHRlcktleSIsImxpbmtzIiwibGlua01lYXN1cmUiLCJsaW5rRXhpc3QiLCJsaW5rIiwibGlua1ZhbHVlIiwiY29sbGVjdGluZy5jb2xsZWN0RGF0YUZyb21XaWtpIiwiY29sbGVjdGluZy5jb2xsZWN0RGF0YUZyb21JbmxpbmVUYWciLCJ0ZXh0TWVhc3VyZSIsInRleHRFeGlzdCIsImNvbGxlY3RpbmcuY29sbGVjdERhdGFGcm9tVGV4dCIsImNvbGxlY3RpbmcuY29sbGVjdERhdGFGcm9tRmlsZU1ldGEiLCJjb2xsZWN0aW5nLmNvbGxlY3REYXRhRnJvbUR2RmllbGQiLCJjb2xsZWN0aW5nLmNvbGxlY3REYXRhRnJvbVRhc2siLCJhbGwiLCJ0YWJsZVF1ZXJpZXMiLCJ0YWJsZXMiLCJ0YWJsZUZpbGVOb3RGb3VuZCIsImlzWCIsInRhYmxlIiwidGFibGVEYXRhIiwieURhdGFzZXRRdWVyaWVzIiwidGV4dFRhYmxlIiwibWRUYWJsZVJlZ2V4IiwiaW5kVGFibGUiLCJ0YWJsZUxpbmVzIiwibnVtQ29sdW1ucyIsIm51bURhdGFSb3dzIiwiaGVhZGVyTGluZSIsImhlbHBlci50cmltQnlDaGFyIiwic2VwTGluZSIsInNwZXBMaW5lU3BsaXR0ZWQiLCJjb2x1bW5YRGF0YXNldCIsInhWYWx1ZXMiLCJ0YWJsZUxpbmUiLCJkYXRhUm93U3BsaXR0ZWQiLCJ5RGF0YXNldFF1ZXJ5IiwiY29sdW1uT2ZJbnRlcmVzdCIsImluZExpbmUiLCJjb2xsZWN0aW5nLmFkZFRvRGF0YU1hcCIsInNwbGl0dGVkUGFydCIsInBhaXIiLCJpbmRQYWlyIiwiY29sbGVjdGVkIiwicmV0IiwicGllLnJlbmRlclBpZUNoYXJ0Iiwic3VtbWFyeS5yZW5kZXJTdW1tYXJ5IiwiYnVsbGV0LnJlbmRlckJ1bGxldCIsIm1vbnRoLnJlbmRlck1vbnRoIiwiaGVhdG1hcC5yZW5kZXJIZWF0bWFwIiwicmVuZGVyIiwiZ2V0RWRpdG9yIiwid29ya3NwYWNlIiwiZ2V0QWN0aXZlVmlld09mVHlwZSIsIk1hcmtkb3duVmlldyIsImVkaXRvciIsIm91dHB1dFR5cGUiLCJhY3RpdmVMZWFmIiwidmlldyIsImNvZGVibG9ja1RvSW5zZXJ0IiwiaW5zZXJ0VG9OZXh0TGluZSIsImdldEN1cnNvciIsImxpbmVOdW1iZXIiLCJnZXRMaW5lIiwic2V0U2VsZWN0aW9uIiwicmVwbGFjZVNlbGVjdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Z0ZBcUVPLFNBQVNBLEVBQVVDLEVBQVNDLEVBQVlDLEVBQUdDLEdBRTlDLE9BQU8sSUFBS0QsSUFBTUEsRUFBSUUsV0FBVSxTQUFVQyxFQUFTQyxHQUMvQyxTQUFTQyxFQUFVQyxHQUFTLElBQU1DLEVBQUtOLEVBQVVPLEtBQUtGLElBQVcsTUFBT0csR0FBS0wsRUFBT0ssSUFDcEYsU0FBU0MsRUFBU0osR0FBUyxJQUFNQyxFQUFLTixFQUFpQixNQUFFSyxJQUFXLE1BQU9HLEdBQUtMLEVBQU9LLElBQ3ZGLFNBQVNGLEVBQUtJLEdBSmxCLElBQWVMLEVBSWFLLEVBQU9DLEtBQU9ULEVBQVFRLEVBQU9MLFFBSjFDQSxFQUl5REssRUFBT0wsTUFKaERBLGFBQWlCTixFQUFJTSxFQUFRLElBQUlOLEdBQUUsU0FBVUcsR0FBV0EsRUFBUUcsT0FJVE8sS0FBS1IsRUFBV0ssR0FDbEdILEdBQU1OLEVBQVlBLEVBQVVhLE1BQU1oQixFQUFTQyxHQUFjLEtBQUtTLFdDM0V2RCxXQUFTTyxFQUFHQyxH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

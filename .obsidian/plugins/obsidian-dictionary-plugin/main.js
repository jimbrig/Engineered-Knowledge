/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository (https://github.com/phibr0/obsidian-dictionary)
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

// العربية
var ar = {};

// čeština
var cz = {};

// Dansk
var da = {};

// Deutsch
var de = {
    //main.ts
    'Open Dictionary View': 'Öffne Wörterbuch',
    'Open Language Switcher': 'Sprache wechseln',
    //_constants.ts
    'Dictionary': 'Wörterbuch',
    //customContextMenu.ts
    'Cut': 'Ausschneiden',
    'Copy': 'Kopieren',
    'Paste': 'Einfügen',
    'Show Synonyms': 'Zeige Synonyme',
    'Look up': 'Nachschlagen',
    //settingsTab.ts
    "Reset to default": "Zurücksetzen",
    'Dictionary Settings': 'Wörterbuch Einstellungen',
    'Language': 'Sprache',
    'The Language the Plugin will use to search for Definitions and Pronunciations.': 'Die Sprache, welche von dieser Erweiterung verwendet wird, um nach Definitionen zu suchen.',
    'Synonym Suggestions': 'Synonym Vorschläge',
    'Show synonyms for highlighted words': 'Zeige Synonyme für markierte Wörter',
    'Enabling this will allow the Plugin to analyze full sentences to better suggest synonyms based on the context.': 'Dies wird der Erweiterung erlauben ganze Sätze zu analysieren, um anschließend bessere Vorschläge für Synonyme basierend auf dem Kontext bereitzustellen.',
    'Click ': 'Klicke ',
    'here': 'hier',
    ' for Privacy Concerns.': ' bei Datenschutzbedenken',
    'Advanced Synonym Search': 'Erweiterte Synonym Suche',
    'Show Options in Context Menu': 'Zeige Optionen im Kontextmenü',
    'Enable custom Context Menu with options to search for synonyms (only if the auto suggestions are disabled) and to look up a full definition in the Sidebar. Warning: This will override Obsidian\'s default Context Menu.': 'Aktiviere das benutzerdefinierte Kontextmenü mit mehr Einstellungen, um Synoynme anzuzeigen (falls die automatischen Vorschläge deaktiviert sind) oder ein Wort nachzuschlagen.',
    'Click Here': 'Klicke hier',
    'Definition Provider': 'Definitionen Anbieter',
    'The API the Plugin will use to search for Definitions.': 'Die API die von der Erweiterung verwendet werden wird, um Definitionen zu suchen.',
    'Synonym Provider': 'Synonym Anbieter',
    'The API the Plugin will use to search for Synonyms.': 'Die API die von der Erweiterung verwendet werden wird, um Synonyme zu suchen.',
    'More Information': 'Mehr Informationen',
    'View Information about the API\'s and the Plugin itself.': 'Schau dir mehr Informationen über die APIs und die Erweiterung an.',
    'More Info': 'Mehr Infos',
    'Donate': 'Spenden',
    'If you like this Plugin, consider donating to support continued development:': 'Wenn du die Erweiterung hilfreich findest, kannst du hier etwas spenden um die weitere Entwicklung zu unterstützen:',
    'Local Dictionary Folder': 'Ordner für das Lokale Wörterbuch',
    'Specify a Folder, where all new Notes created by the Dictionary are placed. Please note that this Folder needs to already exist.': 'Gebe einen Ordner an, in dem alle vom Wörterbuch erstellten neuen Notizen abgelegt werden. Bitte beachte, dass dieser Ordner bereits vorhanden sein muss.',
    'Capitalize File Name': 'Dateinamen groß schreiben',
    'If you disable this, the names of newly created files will be all lowercase.': 'Wenn dies deaktiviert wird, werden die Namen neu erstellter Dateien nur in Kleinbuchstaben geschrieben.',
    'Filename Prefix and Suffix': 'Dateinamen-Präfix und -Suffix',
    'Here you can add a Prefix and Suffix for your newly created Files.': 'Hier kann ein ein Präfix und ein Suffix für neu erstellte Dateien hinzugefügt werden. Hier kann die {{lang}} Variable verwendet werden, um die momentane Sprache einzufügen.',
    "Prefix": "Prefix",
    "Suffix": "Suffix",
    'Here you can edit the Template for newly created Files.': 'Hier kann die Vorlage für neu erstellte Dateien angepasst werden.',
    'Click for a List of Variables': 'Klicke hier für eine Liste aller Variablen.',
    'Template': 'Vorlage',
    "Local-Dictionary-Builder Settings": "Einstellungen für den lokalen Wörterbuch-Builder",
    "Miscellaneous": "Sonstiges",
    "Caching Settings": "Zwischenspeicher Einstellungen",
    "Use Caching": "Nutze den Zwischenspeicher",
    "Enable or disable caching. Caching provides a semi-offline experience by saving every result for later use.": "Aktiviere oder deaktivere den Zwischenspeicher. Durch den Zwischenspeicher kannst du das Wörterbuch teilweise offline nutzen.",
    'Here you can delete all cached Data.': 'Hier kannst du alle zwischengespeicherten Daten löschen.',
    "You currently have ": "Momentan hast du ",
    " cached Definitions and ": " gespeicherte Definitionen und ",
    " cached Synonyms.": " gespeicherte Synonyme.",
    "Delete Cache": "Zwischenspeicher löschen",
    "Delete": "Löschen",
    "Success": "Erfolgreich gelöscht",
    'Use Language specific Subfolders': "Verwende untergeordnete Ordner für jede Sprache",
    'Create Subfolders for every language, e.g. "Dictionary/en-US/Cake"': "Verwende untergeordnete Ordner für jede Sprache, zum Beispiel \"Vokabeln/de/Kuchen\"",
    //localDictionaryBuilder.ts
    'Autogenerated by Obsidian Dictionary Plugin': 'Automatisch erstellt durch die Wörterbuch Erweiterung',
    "No, keep the old File.": "Nein, behalte die alte Datei",
    "Yes, overwrite the old File.": "Ja, überschreibe die alte Datei",
    "A existing File with the same Name was found, do you want to overwrite it?": "Eine bereits existierende Datei mit dem gleichen Namen wurde gefunden, möchtest du diese überschreiben?",
    "Meaning {{i}}": "Bedeutung {{i}}",
    //infoModal.svelte
    'API Information': 'API Informationen',
    'Definition API\'s': 'Definitionen APIs',
    'Website': 'Webseite',
    'Synonym API\'s': 'Synonym APIs',
    'Part of Speech API\'s': 'Wortart APIs',
    'This Plugin is using <a href="https://feathericons.com/">Feather Icons</a>': 'Diese Erweiterung verwendet <a href="https://feathericons.com/">Feather Icons</a>',
    //dictionaryView.svelte
    'Enter a word': 'Gebe ein Wort ein',
    'Pronunciation': 'Aussprache',
    'Meanings': 'Bedeutungen',
    "Origin": "Ursprung",
    'New Note': 'Neue Notiz',
    "View Error": "Fehler anzeigen",
    //errorComponent.ts
    'I can\'t find the word you are looking for or the server can\'t be reached. You can try again in a few minutes.': 'Ich kann das Wort nicht finden oder der Server kann nicht erreicht werden. Bitte probiere es in eingigen Minuten nocheinmal.',
    //meaningComponent.ts
    'Definition:': 'Definition:',
    'Synonyms:': 'Synonyme:',
    //modals
    "Choose a Definition Provider Service": "API für Definitionen auswählen",
    "Choose a Language": "Sprache auswählen",
    "Choose a Synonym Provider Service": "API für Synonyme auswählen",
};

// English
var en = {
    //main.ts
    'Open Dictionary View': 'Open Dictionary View',
    'Open Language Switcher': 'Open Language Switcher',
    //_constants.ts
    'Dictionary': 'Dictionary',
    //customContextMenu.ts
    'Cut': 'Cut',
    'Copy': 'Copy',
    'Paste': 'Paste',
    'Show Synonyms': 'Show Synonyms',
    'Look up': 'Look up',
    //settingsTab.ts
    "Reset to default": "Reset to default",
    'Dictionary Settings': 'Dictionary Settings',
    'Language': 'Language',
    'The Language the Plugin will use to search for Definitions and Pronunciations.': 'The Language the Plugin will use to search for Definitions and Pronunciations.',
    'Synonym Suggestions': 'Synonym Suggestions',
    'Show synonyms for highlighted words': 'Show synonyms for highlighted words',
    'Enabling this will allow the Plugin to analyze full sentences to better suggest synonyms based on the context.': 'Enabling this will allow the Plugin to analyze full sentences to better suggest synonyms based on the context.',
    'Click ': 'Click ',
    'here': 'here',
    ' for Privacy Concerns.': ' for Privacy Concerns.',
    'Advanced Synonym Search': 'Advanced Synonym Search',
    'Show Options in Context Menu': 'Show Options in Context Menu',
    'Enable custom Context Menu with options to search for synonyms (only if the auto suggestions are disabled) and to look up a full definition in the Sidebar. Warning: This will override Obsidian\'s default Context Menu.': 'Enable custom Context Menu with options to search for synonyms (only if the auto suggestions are disabled) and to look up a full definition in the Sidebar.',
    'Click Here': 'Click Here',
    'Definition Provider': 'Definition Provider',
    'The API the Plugin will use to search for Definitions.': 'The API the Plugin will use to search for Definitions.',
    'Synonym Provider': 'Synonym Provider',
    'The API the Plugin will use to search for Synonyms.': 'The API the Plugin will use to search for Synonyms.',
    'More Information': 'More Information',
    'View Information about the API\'s and the Plugin itself.': 'View Information about the API\'s and the Plugin itself.',
    'More Info': 'More Info',
    'Donate': 'Donate',
    'If you like this Plugin, consider donating to support continued development:': 'If you like this Plugin, consider donating to support continued development:',
    'Local Dictionary Folder': 'Local Dictionary Folder',
    'Specify a Folder, where all new Notes created by the Dictionary are placed. Please note that this Folder needs to already exist.': 'Specify a Folder, where all new Notes created by the Dictionary are placed. Please note that this Folder needs to already exist.',
    'Capitalize File Name': 'Capitalize File Name',
    'If you disable this, the names of newly created files will be all lowercase.': 'If you disable this, the names of newly created files will be all lowercase.',
    'Filename Prefix and Suffix': 'Filename Prefix and Suffix',
    'Here you can add a Prefix and Suffix for your newly created Files.': 'Here you can add a Prefix and Suffix for your newly created Files. You can use the {{lang}} variable here.',
    "Prefix": "Prefix",
    "Suffix": "Suffix",
    'Here you can edit the Template for newly created Files.': 'Here you can edit the Template for newly created Files.',
    'Click for a List of Variables': 'Click for a List of Variables',
    'Template': 'Template',
    "Local-Dictionary-Builder Settings": "Local-Dictionary-Builder Settings",
    "Miscellaneous": "Miscellaneous",
    "Caching Settings": "Caching Settings",
    "Use Caching": "Use Caching",
    "Enable or disable caching. Caching provides a semi-offline experience by saving every result for later use.": "Enable or disable caching. Caching provides a semi-offline experience by saving every result for later use.",
    'Here you can delete all cached Data.': 'Here you can delete all cached Data.',
    "You currently have ": "You currently have ",
    " cached Definitions and ": " cached Definitions and ",
    " cached Synonyms.": " cached Synonyms.",
    "Delete Cache": "Delete Cache",
    "Delete": "Delete",
    "Success": "Success",
    'Use Language specific Subfolders': 'Use Language specific Subfolders',
    'Create Subfolders for every language, e.g. "Dictionary/en-US/Cake"': 'Create Subfolders for every language, e.g. "Dictionary/en-US/Cake"',
    //localDictionaryBuilder.ts
    'Autogenerated by Obsidian Dictionary Plugin': 'Autogenerated by Obsidian Dictionary Plugin',
    "Yes, overwrite the old File.": "Yes, overwrite the old File.",
    "A existing File with the same Name was found, do you want to overwrite it?": "A existing File with the same Name was found, do you want to overwrite it?",
    "No, keep the old File.": "No, keep the old File.",
    "Meaning {{i}}": "Meaning {{i}}",
    //infoModal.svelte
    'API Information': 'API Information',
    'Definition API\'s': 'Definition API\'s',
    'Website': 'Website',
    'Synonym API\'s': 'Synonym API\'s',
    'Part of Speech API\'s': 'Part of Speech API\'s',
    'This Plugin is using <a href="https://feathericons.com/">Feather Icons</a>': 'This Plugin is using <a href="https://feathericons.com/">Feather Icons</a>',
    //dictionaryView.svelte
    'Enter a word': 'Enter a word',
    'Pronunciation': 'Pronunciation',
    'Meanings': 'Meanings',
    "Origin": "Origin",
    'New Note': 'New Note',
    "View Error": "View Error",
    //errorComponent.ts
    'I can\'t find the word you are looking for or the server can\'t be reached. You can try again in a few minutes.': 'I can\'t find the word you are looking for or the server can\'t be reached. You can try again in a few minutes.',
    //meaningComponent.ts
    'Definition:': 'Definition:',
    'Synonyms:': 'Synonyms:',
    //modals
    "Choose a Definition Provider Service": "Choose a Definition Provider Service",
    "Choose a Language": "Choose a Language",
    "Choose a Synonym Provider Service": "Choose a Synonym Provider Service",
};

// British English
var enGB = {};

// Español
var es = {};

// français
var fr = {};

// हिन्दी
var hi = {};

// Bahasa Indonesia
var id = {};

// Italiano
var it = {};

// 日本語
var ja = {};

// 한국어
var ko = {};

// Nederlands
var nl = {};

// Norsk
var no = {};

// język polski
var pl = {};

// Português
var pt = {};

// Português do Brasil
// Brazilian Portuguese
var ptBR = {};

// Română
var ro = {};

// русский
var ru = {};

// Türkçe
var tr = {};

// 简体中文
var zhCN = {
    //main.ts
    'Open Dictionary View': '打开查词面板',
    //_constants.ts
    'Dictionary': '词典',
    //customContextMenu.ts
    'Cut': '剪切',
    'Copy': '复制',
    'Paste': '粘贴',
    'Show Synonyms': '显示同义词',
    'Look up': '查询',
    //settingsTab.ts
    'Dictionary Settings': '词典设置',
    'Language': '语言',
    'The Language the Plugin will use to search for Definitions and Pronunciations.': '插件会根据该语言来搜索语义以及发音',
    'Synonym Suggestions': '同义词建议',
    'Show synonyms for highlighted words': '展示被高亮的词的同义词',
    'Enabling this will allow the Plugin to analyze full sentences to better suggest synonyms based on the context.': '允许该选项将会对整段文本进行分析来建议更好的同义词',
    'Click ': '点击 ',
    'here': '这里',
    ' for Privacy Concerns.': ' 来获取相关隐私解释',
    'Advanced Synonym Search': '同义词搜索进阶',
    'Show Options in Context Menu': '在右键菜单中显示选项',
    'Enable custom Context Menu with options to search for synonyms (only if the auto suggestions are disabled) and to look up a full definition in the Sidebar. Warning: This will override Obsidian\'s default Context Menu.': '允许自定义右键菜单来更方便搜索同义词（需要关闭自动建议）且在侧栏的词典面板展示相关释义。注意，这会覆盖掉 Obsidian 的默认右键菜单。',
    'Definition Provider': '释义来源',
    'The API the Plugin will use to search for Definitions.': '将基于该 API 去搜索释义',
    'Synonym Provider': '同义词来源',
    'The API the Plugin will use to search for Synonyms.': '将基于该 API 去搜索同义词',
    'More Information': '更多信息',
    'View Information about the API\'s and the Plugin itself.': '了解关于插件以及 API 的信息',
    'More Info': '更多信息',
    'Donate': '捐赠',
    'If you like this Plugin, consider donating to support continued development:': '如果你喜欢该插件，可以考虑打赏支持：',
    'Local Dictionary Folder': '本地词典文件夹',
    'Specify a Folder, where all new Notes created by the Dictionary are placed. Please note that this Folder needs to already exist.': '指定词典创建的新笔记所存放的位置，注意文件夹需要存在',
    //localDictionaryBuilder.ts
    'Autogenerated by Obsidian Dictionary Plugin': '由 Obsidian Dictionary Plugin 插件自动生成',
    //infoModal.svelte
    'API Information': 'API 信息',
    'Definition API\'s': '定义 API',
    'Website': '网站',
    'Synonym API\'s': '定义同义词 API',
    'Part of Speech API\'s': '语音 API',
    'This Plugin is using <a href="https://feathericons.com/">Feather Icons</a>': '这个插件使用 <a href="https://feathericons.com/">Feather 图标</a>',
    //dictionaryView.svelte
    'Enter a word': '输入单词',
    'Pronunciation': '发音',
    'Meanings': '词义',
    'New Note': '新笔记',
    //errorComponent.ts
    'I can\'t find the word you are looking for or the server can\'t be reached. You can try again in a few minutes.': '无法找到你搜索的单词或者服务器当前不可用，你可以几分钟后再试一下。',
    //meaningComponent.ts
    'Definition:': '词义：',
    'Synonyms:': '同义词：',
};

// 繁體中文
var zhTW = {};

const localeMap = {
    ar,
    cs: cz,
    da,
    de,
    en,
    "en-gb": enGB,
    es,
    fr,
    hi,
    id,
    it,
    ja,
    ko,
    nl,
    nn: no,
    pl,
    pt,
    "pt-br": ptBR,
    ro,
    ru,
    tr,
    "zh-cn": zhCN,
    "zh-tw": zhTW,
};
const locale = localeMap[obsidian.moment.locale()];
function t(str) {
    if (!locale) {
        console.error("Error: dictionary locale not found", obsidian.moment.locale());
    }
    return (locale && locale[str]) || en[str];
}

const VIEW_TYPE = 'dictionary-view';
const VIEW_DISPLAY_TEXT = t('Dictionary');
const VIEW_ICON = 'quote-glyph';
const LANGUAGES = {
    "en_US": "English (US)",
    "hi": "हिन्दी (Hindi)",
    "es": "Español (Spanish)",
    "fr": "Français (French)",
    "ja": "日本語 (Japanese)",
    "ru": "Русский (Russian)",
    "en_GB": "English (UK)",
    "de": "Deutsch (German)",
    "it": "Italiano (Italian)",
    "ko": "한국어 (Korean)",
    "pt_BR": "Português do Brasil (Brazilian Portuguese)",
    "ar": "اَلْعَرَبِيَّةُ‎ (Arabic)",
    "tr": "Türkçe (Turkish)",
    "cn": "中国人 (Chinese)"
};
const RFC = {
    "en_US": "en-US",
    "hi": "hi",
    "es": "es",
    "fr": "fr",
    "ja": "ja",
    "ru": "ru",
    "en_GB": "en-GB",
    "de": "de",
    "it": "it",
    "ko": "ko",
    "pt_BR": "pt-BR",
    "ar": "ar",
    "tr": "tr",
    "cn": "zh"
};
const DEFAULT_CACHE = {
    cachedDefinitions: [],
    cachedSynonyms: [],
};
const DEFAULT_SETTINGS = {
    defaultLanguage: "en_US",
    shouldShowSynonymPopover: true,
    shouldShowCustomContextMenu: false,
    definitionApiName: "Free Dictionary API",
    synonymApiName: "Free Dictionary API",
    partOfSpeechApiName: "Systran API",
    advancedSynonymAnalysis: false,
    useCaching: false,
    folder: '',
    capitalizedFileName: true,
    prefix: "",
    suffix: " ({{lang}})",
    template: `---
# {{notice}}
aliases: ["{{word}}"]
---

# {{word}}

## {{pronunciationHeader}}

{{phoneticList}}

## {{meaningHeader}}

{{meanings}}
`,
    languageSpecificSubFolders: false
};

/**
 * Transform the case in `value` (`string`) to match that of `base` (`string`).
 *
 * @param {string} value
 * @param {string} base
 * @returns {string}
 */
function matchCasing(value, base) {
  var index = -1;
  /** @type {string} */
  var char;
  /** @type {string} */
  var rest;
  /** @type {boolean} */
  var cap;

  if (base.toUpperCase() === base) {
    return value.toUpperCase()
  }

  if (base.toLowerCase() === base) {
    return value.toLowerCase()
  }

  while (++index < base.length) {
    char = base.charAt(index);

    if (char.toUpperCase() !== char.toLowerCase()) {
      rest = base.slice(index + 1);
      cap = char === char.toUpperCase() && rest === rest.toLowerCase();
      break
    }
  }

  if (cap) {
    index = -1;

    while (++index < value.length) {
      char = value.charAt(index).toUpperCase();

      if (char !== char.toLowerCase()) {
        return (
          value.slice(0, index) + char + value.slice(index + 1).toLowerCase()
        )
      }
    }
  }

  return value
}

function noop() { }
const identity = x => x;
function is_promise(value) {
    return value && typeof value === 'object' && typeof value.then === 'function';
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
let src_url_equal_anchor;
function src_url_equal(element_src, url) {
    if (!src_url_equal_anchor) {
        src_url_equal_anchor = document.createElement('a');
    }
    src_url_equal_anchor.href = url;
    return element_src === src_url_equal_anchor.href;
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function action_destroyer(action_result) {
    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}

const is_client = typeof window !== 'undefined';
let now = is_client
    ? () => window.performance.now()
    : () => Date.now();
let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

const tasks = new Set();
function run_tasks(now) {
    tasks.forEach(task => {
        if (!task.c(now)) {
            tasks.delete(task);
            task.f();
        }
    });
    if (tasks.size !== 0)
        raf(run_tasks);
}
/**
 * Creates a new task that runs on each raf frame
 * until it returns a falsy value or is aborted
 */
function loop(callback) {
    let task;
    if (tasks.size === 0)
        raf(run_tasks);
    return {
        promise: new Promise(fulfill => {
            tasks.add(task = { c: callback, f: fulfill });
        }),
        abort() {
            tasks.delete(task);
        }
    };
}
function append(target, node) {
    target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
    const append_styles_to = get_root_for_style(target);
    if (!append_styles_to.getElementById(style_sheet_id)) {
        const style = element('style');
        style.id = style_sheet_id;
        style.textContent = styles;
        append_stylesheet(append_styles_to, style);
    }
}
function get_root_for_style(node) {
    if (!node)
        return document;
    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    if (root.host) {
        return root;
    }
    return document;
}
function append_empty_stylesheet(node) {
    const style_element = element('style');
    append_stylesheet(get_root_for_style(node), style_element);
    return style_element;
}
function append_stylesheet(node, style) {
    append(node.head || node, style);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.wholeText !== data)
        text.data = data;
}
function set_input_value(input, value) {
    input.value = value == null ? '' : value;
}
function set_style(node, key, value, important) {
    node.style.setProperty(key, value, important ? 'important' : '');
}
function custom_event(type, detail, bubbles = false) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, bubbles, false, detail);
    return e;
}

const active_docs = new Set();
let active = 0;
// https://github.com/darkskyapp/string-hash/blob/master/index.js
function hash(str) {
    let hash = 5381;
    let i = str.length;
    while (i--)
        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
    return hash >>> 0;
}
function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
    const step = 16.666 / duration;
    let keyframes = '{\n';
    for (let p = 0; p <= 1; p += step) {
        const t = a + (b - a) * ease(p);
        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
    }
    const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
    const name = `__svelte_${hash(rule)}_${uid}`;
    const doc = get_root_for_style(node);
    active_docs.add(doc);
    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);
    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
    if (!current_rules[name]) {
        current_rules[name] = true;
        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
    }
    const animation = node.style.animation || '';
    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
    active += 1;
    return name;
}
function delete_rule(node, name) {
    const previous = (node.style.animation || '').split(', ');
    const next = previous.filter(name
        ? anim => anim.indexOf(name) < 0 // remove specific animation
        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
    );
    const deleted = previous.length - next.length;
    if (deleted) {
        node.style.animation = next.join(', ');
        active -= deleted;
        if (!active)
            clear_rules();
    }
}
function clear_rules() {
    raf(() => {
        if (active)
            return;
        active_docs.forEach(doc => {
            const stylesheet = doc.__svelte_stylesheet;
            let i = stylesheet.cssRules.length;
            while (i--)
                stylesheet.deleteRule(i);
            doc.__svelte_rules = {};
        });
        active_docs.clear();
    });
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error('Function called outside component initialization');
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}

let promise;
function wait() {
    if (!promise) {
        promise = Promise.resolve();
        promise.then(() => {
            promise = null;
        });
    }
    return promise;
}
function dispatch(node, direction, kind) {
    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
const null_transition = { duration: 0 };
function create_in_transition(node, fn, params) {
    let config = fn(node, params);
    let running = false;
    let animation_name;
    let task;
    let uid = 0;
    function cleanup() {
        if (animation_name)
            delete_rule(node, animation_name);
    }
    function go() {
        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
        if (css)
            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
        tick(0, 1);
        const start_time = now() + delay;
        const end_time = start_time + duration;
        if (task)
            task.abort();
        running = true;
        add_render_callback(() => dispatch(node, true, 'start'));
        task = loop(now => {
            if (running) {
                if (now >= end_time) {
                    tick(1, 0);
                    dispatch(node, true, 'end');
                    cleanup();
                    return running = false;
                }
                if (now >= start_time) {
                    const t = easing((now - start_time) / duration);
                    tick(t, 1 - t);
                }
            }
            return running;
        });
    }
    let started = false;
    return {
        start() {
            if (started)
                return;
            started = true;
            delete_rule(node);
            if (is_function(config)) {
                config = config();
                wait().then(go);
            }
            else {
                go();
            }
        },
        invalidate() {
            started = false;
        },
        end() {
            if (running) {
                cleanup();
                running = false;
            }
        }
    };
}

function handle_promise(promise, info) {
    const token = info.token = {};
    function update(type, index, key, value) {
        if (info.token !== token)
            return;
        info.resolved = value;
        let child_ctx = info.ctx;
        if (key !== undefined) {
            child_ctx = child_ctx.slice();
            child_ctx[key] = value;
        }
        const block = type && (info.current = type)(child_ctx);
        let needs_flush = false;
        if (info.block) {
            if (info.blocks) {
                info.blocks.forEach((block, i) => {
                    if (i !== index && block) {
                        group_outros();
                        transition_out(block, 1, 1, () => {
                            if (info.blocks[i] === block) {
                                info.blocks[i] = null;
                            }
                        });
                        check_outros();
                    }
                });
            }
            else {
                info.block.d(1);
            }
            block.c();
            transition_in(block, 1);
            block.m(info.mount(), info.anchor);
            needs_flush = true;
        }
        info.block = block;
        if (info.blocks)
            info.blocks[index] = block;
        if (needs_flush) {
            flush();
        }
    }
    if (is_promise(promise)) {
        const current_component = get_current_component();
        promise.then(value => {
            set_current_component(current_component);
            update(info.then, 1, info.value, value);
            set_current_component(null);
        }, error => {
            set_current_component(current_component);
            update(info.catch, 2, info.error, error);
            set_current_component(null);
            if (!info.hasCatch) {
                throw error;
            }
        });
        // if we previously had a then/catch block, destroy it
        if (info.current !== info.pending) {
            update(info.pending, 0);
            return true;
        }
    }
    else {
        if (info.current !== info.then) {
            update(info.then, 1, info.value, promise);
            return true;
        }
        info.resolved = promise;
    }
}
function update_await_block_branch(info, ctx, dirty) {
    const child_ctx = ctx.slice();
    const { resolved } = info;
    if (info.current === info.then) {
        child_ctx[info.value] = resolved;
    }
    if (info.current === info.catch) {
        child_ctx[info.error] = resolved;
    }
    info.block.p(child_ctx, dirty);
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor, customElement) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) {
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
    }
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : options.context || []),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false,
        root: options.target || parent_component.$$.root
    };
    append_styles && append_styles($$.root);
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

/* src/ui/settings/infoModal.svelte generated by Svelte v3.42.2 */

function add_css$6(target) {
	append_styles(target, "svelte-ja9vc4", "h3.svelte-ja9vc4{font-weight:400;margin:0}.feather.svelte-ja9vc4{text-align:center;color:var(--text-muted);font-size:0.9rem}");
}

function get_each_context$3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

function get_each_context_1$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

// (13:4) {#if definition.offline === false}
function create_if_block_1$3(ctx) {
	let div2;
	let div1;
	let div0;
	let t0_value = /*definition*/ ctx[9].name + "";
	let t0;
	let t1;
	let a;
	let t2_value = t("Website") + "";
	let t2;
	let a_href_value;

	return {
		c() {
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			a = element("a");
			t2 = text(t2_value);
			attr(div0, "class", "setting-item-name");
			attr(div1, "class", "setting-item-info");
			attr(a, "class", "setting-item-control");
			attr(a, "href", a_href_value = /*definition*/ ctx[9].url);
			attr(div2, "class", "setting-item");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div1);
			append(div1, div0);
			append(div0, t0);
			append(div2, t1);
			append(div2, a);
			append(a, t2);
		},
		p(ctx, dirty) {
			if (dirty & /*definitionAPIs*/ 2 && t0_value !== (t0_value = /*definition*/ ctx[9].name + "")) set_data(t0, t0_value);

			if (dirty & /*definitionAPIs*/ 2 && a_href_value !== (a_href_value = /*definition*/ ctx[9].url)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div2);
		}
	};
}

// (12:2) {#each definitionAPIs as definition}
function create_each_block_2(ctx) {
	let if_block_anchor;
	let if_block = /*definition*/ ctx[9].offline === false && create_if_block_1$3(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*definition*/ ctx[9].offline === false) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$3(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (26:4) {#if synonym.offline === false}
function create_if_block$4(ctx) {
	let div2;
	let div1;
	let div0;
	let t0_value = /*synonym*/ ctx[6].name + "";
	let t0;
	let t1;
	let a;
	let t2_value = t("Website") + "";
	let t2;
	let a_href_value;

	return {
		c() {
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			a = element("a");
			t2 = text(t2_value);
			attr(div0, "class", "setting-item-name");
			attr(div1, "class", "setting-item-info");
			attr(a, "class", "setting-item-control");
			attr(a, "href", a_href_value = /*synonym*/ ctx[6].url);
			attr(div2, "class", "setting-item");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div1);
			append(div1, div0);
			append(div0, t0);
			append(div2, t1);
			append(div2, a);
			append(a, t2);
		},
		p(ctx, dirty) {
			if (dirty & /*synonymAPIs*/ 1 && t0_value !== (t0_value = /*synonym*/ ctx[6].name + "")) set_data(t0, t0_value);

			if (dirty & /*synonymAPIs*/ 1 && a_href_value !== (a_href_value = /*synonym*/ ctx[6].url)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div2);
		}
	};
}

// (25:2) {#each synonymAPIs as synonym}
function create_each_block_1$2(ctx) {
	let if_block_anchor;
	let if_block = /*synonym*/ ctx[6].offline === false && create_if_block$4(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*synonym*/ ctx[6].offline === false) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$4(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (38:2) {#each partOfSpeechAPIs as pos}
function create_each_block$3(ctx) {
	let div2;
	let div1;
	let div0;
	let t0_value = /*pos*/ ctx[3].name + "";
	let t0;
	let t1;
	let a;
	let t2_value = t("Website") + "";
	let t2;
	let a_href_value;
	let t3;

	return {
		c() {
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			a = element("a");
			t2 = text(t2_value);
			t3 = space();
			attr(div0, "class", "setting-item-name");
			attr(div1, "class", "setting-item-info");
			attr(a, "class", "setting-item-control");
			attr(a, "href", a_href_value = /*pos*/ ctx[3].url);
			attr(div2, "class", "setting-item");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div1);
			append(div1, div0);
			append(div0, t0);
			append(div2, t1);
			append(div2, a);
			append(a, t2);
			append(div2, t3);
		},
		p(ctx, dirty) {
			if (dirty & /*partOfSpeechAPIs*/ 4 && t0_value !== (t0_value = /*pos*/ ctx[3].name + "")) set_data(t0, t0_value);

			if (dirty & /*partOfSpeechAPIs*/ 4 && a_href_value !== (a_href_value = /*pos*/ ctx[3].url)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div2);
		}
	};
}

function create_fragment$6(ctx) {
	let div;
	let h2;
	let t1;
	let h30;
	let t3;
	let t4;
	let h31;
	let t6;
	let t7;
	let h32;
	let t9;
	let t10;
	let p;
	let raw_value = t('This Plugin is using <a href="https://feathericons.com/">Feather Icons</a>') + "";
	let each_value_2 = /*definitionAPIs*/ ctx[1];
	let each_blocks_2 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	let each_value_1 = /*synonymAPIs*/ ctx[0];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
	}

	let each_value = /*partOfSpeechAPIs*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");
			h2 = element("h2");
			h2.textContent = `${t("API Information")}`;
			t1 = space();
			h30 = element("h3");
			h30.textContent = `${t("Definition API's")}`;
			t3 = space();

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t4 = space();
			h31 = element("h3");
			h31.textContent = `${t("Synonym API's")}`;
			t6 = space();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t7 = space();
			h32 = element("h3");
			h32.textContent = `${t("Part of Speech API's")}`;
			t9 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t10 = space();
			p = element("p");
			attr(h30, "class", "svelte-ja9vc4");
			attr(h31, "class", "svelte-ja9vc4");
			attr(h32, "class", "svelte-ja9vc4");
			attr(div, "class", "vertical-tab-content");
			attr(p, "class", "feather svelte-ja9vc4");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h2);
			append(div, t1);
			append(div, h30);
			append(div, t3);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].m(div, null);
			}

			append(div, t4);
			append(div, h31);
			append(div, t6);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div, null);
			}

			append(div, t7);
			append(div, h32);
			append(div, t9);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			insert(target, t10, anchor);
			insert(target, p, anchor);
			p.innerHTML = raw_value;
		},
		p(ctx, [dirty]) {
			if (dirty & /*definitionAPIs, t*/ 2) {
				each_value_2 = /*definitionAPIs*/ ctx[1];
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_2[i]) {
						each_blocks_2[i].p(child_ctx, dirty);
					} else {
						each_blocks_2[i] = create_each_block_2(child_ctx);
						each_blocks_2[i].c();
						each_blocks_2[i].m(div, t4);
					}
				}

				for (; i < each_blocks_2.length; i += 1) {
					each_blocks_2[i].d(1);
				}

				each_blocks_2.length = each_value_2.length;
			}

			if (dirty & /*synonymAPIs, t*/ 1) {
				each_value_1 = /*synonymAPIs*/ ctx[0];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1$2(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div, t7);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*partOfSpeechAPIs, t*/ 4) {
				each_value = /*partOfSpeechAPIs*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$3(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks_2, detaching);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t10);
			if (detaching) detach(p);
		}
	};
}

function instance$6($$self, $$props, $$invalidate) {
	
	let { synonymAPIs } = $$props;
	let { definitionAPIs } = $$props;
	let { partOfSpeechAPIs } = $$props;

	$$self.$$set = $$props => {
		if ('synonymAPIs' in $$props) $$invalidate(0, synonymAPIs = $$props.synonymAPIs);
		if ('definitionAPIs' in $$props) $$invalidate(1, definitionAPIs = $$props.definitionAPIs);
		if ('partOfSpeechAPIs' in $$props) $$invalidate(2, partOfSpeechAPIs = $$props.partOfSpeechAPIs);
	};

	return [synonymAPIs, definitionAPIs, partOfSpeechAPIs];
}

class InfoModal$1 extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$6,
			create_fragment$6,
			safe_not_equal,
			{
				synonymAPIs: 0,
				definitionAPIs: 1,
				partOfSpeechAPIs: 2
			},
			add_css$6
		);
	}
}

class SettingsTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl, plugin } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: t('Dictionary Settings') });
        new obsidian.Setting(containerEl)
            .setName(t('Language'))
            .setDesc(t('The Language the Plugin will use to search for Definitions and Pronunciations.'))
            .addDropdown((dropdown) => {
            for (const language in LANGUAGES) {
                dropdown.addOption(language, LANGUAGES[language]);
            }
            dropdown.setValue(plugin.settings.defaultLanguage)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                plugin.settings.defaultLanguage = value;
                yield this.save();
                this.display();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName(t('Definition Provider'))
            .setDesc(t('The API the Plugin will use to search for Definitions.'))
            .addDropdown((dropdown) => {
            for (const api of plugin.manager.definitionProvider) {
                if (api.supportedLanguages.contains(plugin.settings.defaultLanguage)) {
                    dropdown.addOption(api.name, api.name);
                }
            }
            dropdown.setValue(plugin.settings.definitionApiName)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                plugin.settings.definitionApiName = value;
                yield this.save();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName(t('Synonym Provider'))
            .setDesc(t('The API the Plugin will use to search for Synonyms.'))
            .addDropdown((dropdown) => {
            for (const api of plugin.manager.synonymProvider) {
                if (api.supportedLanguages.contains(plugin.settings.defaultLanguage)) {
                    dropdown.addOption(api.name, api.name);
                }
            }
            dropdown.setValue(plugin.settings.synonymApiName)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                plugin.settings.synonymApiName = value;
                yield this.save();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName(t('Synonym Suggestions'))
            .setDesc(t('Show synonyms for highlighted words'))
            .addToggle(toggle => {
            if (plugin.settings.shouldShowSynonymPopover) {
                toggle.setValue(true);
            }
            else {
                toggle.setValue(false);
            }
            toggle.onChange((value) => __awaiter(this, void 0, void 0, function* () {
                plugin.settings.shouldShowSynonymPopover = value;
                yield this.save();
            }));
        });
        const desc = document.createDocumentFragment();
        desc.append(t('Enabling this will allow the Plugin to analyze full sentences to better suggest synonyms based on the context.'), desc.createEl("br"), t('Click '), desc.createEl("a", {
            href: "https://github.com/phibr0/obsidian-dictionary#privacy",
            text: t('here')
        }), t(' for Privacy Concerns.'));
        new obsidian.Setting(containerEl)
            .setName(t('Advanced Synonym Search'))
            .setDesc(desc)
            .addToggle(toggle => {
            toggle.setValue(plugin.settings.advancedSynonymAnalysis);
            toggle.onChange((value) => __awaiter(this, void 0, void 0, function* () {
                plugin.settings.advancedSynonymAnalysis = value;
                yield this.save();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName(t('Show Options in Context Menu'))
            .setDesc(t('Enable custom Context Menu with options to search for synonyms (only if the auto suggestions are disabled) and to look up a full definition in the Sidebar. Warning: This will override Obsidian\'s default Context Menu.'))
            .addToggle(toggle => {
            if (plugin.settings.shouldShowCustomContextMenu) {
                toggle.setValue(true);
            }
            else {
                toggle.setValue(false);
            }
            toggle.onChange((value) => __awaiter(this, void 0, void 0, function* () {
                plugin.settings.shouldShowCustomContextMenu = value;
                yield this.save();
            }));
        });
        containerEl.createEl('h3', { text: t("Local-Dictionary-Builder Settings") });
        new obsidian.Setting(containerEl)
            .setName(t('Local Dictionary Folder'))
            .setDesc(t('Specify a Folder, where all new Notes created by the Dictionary are placed. Please note that this Folder needs to already exist.'))
            .addText(text => text
            .setPlaceholder(t('Dictionary'))
            .setValue(plugin.settings.folder)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            plugin.settings.folder = value;
            yield this.save();
        })));
        new obsidian.Setting(containerEl)
            .setName(t('Use Language specific Subfolders'))
            .setDesc(t('Create Subfolders for every language, e.g. "Dictionary/en-US/Cake"'))
            .addToggle(toggle => {
            toggle.setValue(plugin.settings.languageSpecificSubFolders);
            toggle.onChange((value) => __awaiter(this, void 0, void 0, function* () {
                plugin.settings.languageSpecificSubFolders = value;
                yield this.save();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName(t('Capitalize File Name'))
            .setDesc(t('If you disable this, the names of newly created files will be all lowercase.'))
            .addToggle(toggle => {
            toggle.setValue(plugin.settings.capitalizedFileName);
            toggle.onChange((value) => __awaiter(this, void 0, void 0, function* () {
                plugin.settings.capitalizedFileName = value;
                yield this.save();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName(t('Filename Prefix and Suffix'))
            .setDesc(t('Here you can add a Prefix and Suffix for your newly created Files.'))
            .setClass("dictionaryprefixsuffix")
            .addText(text => text
            .setPlaceholder(t("Prefix"))
            .setValue(plugin.settings.prefix)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            plugin.settings.prefix = value;
            yield this.save();
        })))
            .addText(text => text
            .setPlaceholder(t("Suffix"))
            .setValue(plugin.settings.suffix)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            plugin.settings.suffix = value;
            yield this.save();
        })));
        const templateDescription = document.createDocumentFragment();
        templateDescription.append(t('Here you can edit the Template for newly created Files.'), templateDescription.createEl("br"), templateDescription.createEl("a", {
            href: "https://github.com/phibr0/obsidian-dictionary#variables",
            text: t('Click for a List of Variables'),
        }));
        new obsidian.Setting(containerEl)
            .setName(t('Template'))
            .setDesc(templateDescription)
            .setClass("dictionarytextarea")
            .addTextArea(text => text
            .setPlaceholder(DEFAULT_SETTINGS.template)
            .setValue(plugin.settings.template)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            plugin.settings.template = value;
            yield this.save();
        })))
            .addExtraButton(cb => {
            cb.setIcon("reset")
                .setTooltip(t("Reset to default"))
                .setDisabled(this.plugin.settings.template === DEFAULT_SETTINGS.template)
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.template = DEFAULT_SETTINGS.template;
                yield this.plugin.saveSettings();
            }));
        });
        containerEl.createEl('h3', { text: t("Caching Settings") });
        new obsidian.Setting(containerEl)
            .setName(t("Use Caching"))
            .setDesc(t("Enable or disable caching. Caching provides a semi-offline experience by saving every result for later use."))
            .addToggle(toggle => {
            toggle.setValue(plugin.settings.useCaching);
            toggle.onChange((value) => __awaiter(this, void 0, void 0, function* () {
                plugin.settings.useCaching = value;
                yield this.save();
            }));
        });
        const cachingInfo = document.createDocumentFragment();
        cachingInfo.append(t('Here you can delete all cached Data.'), templateDescription.createEl("br"), t("You currently have "), plugin.cache.cachedDefinitions.length.toString(), t(" cached Definitions and "), plugin.cache.cachedSynonyms.length.toString(), t(" cached Synonyms."));
        new obsidian.Setting(containerEl)
            .setName(t("Delete Cache"))
            .setDesc(cachingInfo)
            .addButton(button => {
            button.setDisabled(!plugin.settings.useCaching);
            button.setButtonText(t("Delete"));
            button.onClick(() => __awaiter(this, void 0, void 0, function* () {
                plugin.cache.cachedSynonyms = [];
                plugin.cache.cachedDefinitions = [];
                yield this.plugin.saveCache();
                new obsidian.Notice(t("Success"));
                this.display();
            }));
        });
        containerEl.createEl('h3', { text: t("Miscellaneous") });
        new obsidian.Setting(containerEl)
            .setName(t('More Information'))
            .setDesc(t('View Information about the API\'s and the Plugin itself.'))
            .setClass("extra")
            .addButton((bt) => {
            bt.setButtonText(t('More Info'));
            bt.onClick((_) => {
                new InfoModal(plugin).open();
            });
        });
        new obsidian.Setting(containerEl)
            .setName(t('Donate'))
            .setDesc(t('If you like this Plugin, consider donating to support continued development:'))
            .setClass("extra")
            .addButton((bt) => {
            bt.buttonEl.outerHTML = `<a href="https://www.buymeacoffee.com/phibr0"><img src="https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&emoji=&slug=phibr0&button_colour=5F7FFF&font_colour=ffffff&font_family=Inter&outline_colour=000000&coffee_colour=FFDD00"></a>`;
        });
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.plugin.saveSettings();
        });
    }
}
class InfoModal extends obsidian.Modal {
    constructor(plugin) {
        super(plugin.app);
        this.plugin = plugin;
    }
    onOpen() {
        this.contentEl.parentElement.style.padding = "10px 12px";
        this._view = new InfoModal$1({
            target: this.contentEl,
            props: {
                synonymAPIs: this.plugin.manager.synonymProvider,
                definitionAPIs: this.plugin.manager.definitionProvider,
                partOfSpeechAPIs: this.plugin.manager.partOfSpeechProvider,
            }
        });
    }
    onClose() {
        this._view.$destroy();
        this.contentEl.empty();
    }
}

/* src/ui/dictionary/phoneticComponent.svelte generated by Svelte v3.42.2 */

function add_css$5(target) {
	append_styles(target, "svelte-jpkc8o", ".main.svelte-jpkc8o.svelte-jpkc8o.svelte-jpkc8o{background-color:var(--background-secondary);padding-left:0.6rem;padding-right:0.6rem;padding-top:0.3rem;padding-bottom:0.3rem;margin-bottom:0.3rem;border-radius:0.3rem}audio.svelte-jpkc8o.svelte-jpkc8o.svelte-jpkc8o{margin-top:0.3rem}details[open].svelte-jpkc8o summary.svelte-jpkc8o~.svelte-jpkc8o{animation:svelte-jpkc8o-open 0.2s ease-in-out}@keyframes svelte-jpkc8o-open{0%{opacity:0}100%{opacity:1}}");
}

// (14:2) {:else}
function create_else_block(ctx) {
	let t_value = /*text*/ ctx[0].replace("/", "").replace("/", "") + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 1 && t_value !== (t_value = /*text*/ ctx[0].replace("/", "").replace("/", "") + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (6:2) {#if audio}
function create_if_block$3(ctx) {
	let details;
	let summary;
	let t0_value = /*text*/ ctx[0].replace("/", "").replace("/", "") + "";
	let t0;
	let t1;
	let audio_1;
	let source;
	let source_src_value;

	return {
		c() {
			details = element("details");
			summary = element("summary");
			t0 = text(t0_value);
			t1 = space();
			audio_1 = element("audio");
			source = element("source");
			attr(summary, "class", "svelte-jpkc8o");

			if (!src_url_equal(source.src, source_src_value = /*audio*/ ctx[1].startsWith("http")
			? /*audio*/ ctx[1]
			: "https:" + /*audio*/ ctx[1])) attr(source, "src", source_src_value);

			attr(source, "type", "audio/mpeg");
			audio_1.controls = true;
			attr(audio_1, "class", "svelte-jpkc8o");
			attr(details, "class", "svelte-jpkc8o");
		},
		m(target, anchor) {
			insert(target, details, anchor);
			append(details, summary);
			append(summary, t0);
			append(details, t1);
			append(details, audio_1);
			append(audio_1, source);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 1 && t0_value !== (t0_value = /*text*/ ctx[0].replace("/", "").replace("/", "") + "")) set_data(t0, t0_value);

			if (dirty & /*audio*/ 2 && !src_url_equal(source.src, source_src_value = /*audio*/ ctx[1].startsWith("http")
			? /*audio*/ ctx[1]
			: "https:" + /*audio*/ ctx[1])) {
				attr(source, "src", source_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(details);
		}
	};
}

function create_fragment$5(ctx) {
	let div;

	function select_block_type(ctx, dirty) {
		if (/*audio*/ ctx[1]) return create_if_block$3;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div = element("div");
			if_block.c();
			attr(div, "class", "main svelte-jpkc8o");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if_block.m(div, null);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if_block.d();
		}
	};
}

function instance$5($$self, $$props, $$invalidate) {
	let { text } = $$props;
	let { audio } = $$props;

	$$self.$$set = $$props => {
		if ('text' in $$props) $$invalidate(0, text = $$props.text);
		if ('audio' in $$props) $$invalidate(1, audio = $$props.audio);
	};

	return [text, audio];
}

class PhoneticComponent extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$5, create_fragment$5, safe_not_equal, { text: 0, audio: 1 }, add_css$5);
	}
}

/* src/ui/dictionary/meaningComponent.svelte generated by Svelte v3.42.2 */

function add_css$4(target) {
	append_styles(target, "svelte-nmuzfy", ".main.svelte-nmuzfy.svelte-nmuzfy.svelte-nmuzfy{background-color:var(--background-secondary);padding-left:0.6rem;padding-right:0.6rem;padding-top:0.3rem;padding-bottom:0.3rem;margin-bottom:0.3rem;border-radius:0.3rem}.main.svelte-nmuzfy details.svelte-nmuzfy>summary.svelte-nmuzfy{text-transform:capitalize}.main.svelte-nmuzfy blockquote.svelte-nmuzfy.svelte-nmuzfy{font-style:italic;margin:0 0 1rem;padding-left:1rem;border-left:1px solid var(--background-modifier-border)}.main.svelte-nmuzfy .mark{box-shadow:inset 0 -2px var(--text-faint)}.label.svelte-nmuzfy.svelte-nmuzfy.svelte-nmuzfy{font-size:0.875em;font-weight:bold}details[open].svelte-nmuzfy summary.svelte-nmuzfy~.svelte-nmuzfy{animation:svelte-nmuzfy-open 0.3s ease-in-out}@keyframes svelte-nmuzfy-open{0%{opacity:0}100%{opacity:1}}.synonyms.svelte-nmuzfy.svelte-nmuzfy.svelte-nmuzfy{padding-top:1rem}.synonyms.svelte-nmuzfy>p.svelte-nmuzfy.svelte-nmuzfy,.definition.svelte-nmuzfy>p.svelte-nmuzfy.svelte-nmuzfy{margin-top:0}.definition.svelte-nmuzfy.svelte-nmuzfy.svelte-nmuzfy{padding:1.5rem 0;border-bottom:1px solid var(--background-modifier-border)}.definition.svelte-nmuzfy.svelte-nmuzfy.svelte-nmuzfy:last-child{border-bottom:none}");
}

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	child_ctx[5] = i;
	return child_ctx;
}

function get_each_context_1$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	child_ctx[5] = i;
	return child_ctx;
}

// (14:8) {#if definition.definition}
function create_if_block_3$1(ctx) {
	let div;
	let t1;
	let p;
	let t2_value = /*definition*/ ctx[3].definition + "";
	let t2;

	return {
		c() {
			div = element("div");
			div.textContent = `${t('Definition:')}`;
			t1 = space();
			p = element("p");
			t2 = text(t2_value);
			attr(div, "class", "label svelte-nmuzfy");
			attr(p, "class", "svelte-nmuzfy");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			insert(target, t1, anchor);
			insert(target, p, anchor);
			append(p, t2);
		},
		p(ctx, dirty) {
			if (dirty & /*definitions*/ 2 && t2_value !== (t2_value = /*definition*/ ctx[3].definition + "")) set_data(t2, t2_value);
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching) detach(t1);
			if (detaching) detach(p);
		}
	};
}

// (18:8) {#if definition.example}
function create_if_block_2$1(ctx) {
	let blockquote;
	let raw_value = /*definition*/ ctx[3].example.replace(new RegExp(`(${/*word*/ ctx[0]})`, "gi"), '<i class="mark">$1</i>') + "";

	return {
		c() {
			blockquote = element("blockquote");
			attr(blockquote, "class", "svelte-nmuzfy");
		},
		m(target, anchor) {
			insert(target, blockquote, anchor);
			blockquote.innerHTML = raw_value;
		},
		p(ctx, dirty) {
			if (dirty & /*definitions, word*/ 3 && raw_value !== (raw_value = /*definition*/ ctx[3].example.replace(new RegExp(`(${/*word*/ ctx[0]})`, "gi"), '<i class="mark">$1</i>') + "")) blockquote.innerHTML = raw_value;		},
		d(detaching) {
			if (detaching) detach(blockquote);
		}
	};
}

// (28:8) {#if definition.synonyms && definition.synonyms[i]}
function create_if_block$2(ctx) {
	let div1;
	let div0;
	let t1;
	let p;
	let each_value_1 = /*definition*/ ctx[3].synonyms;
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			div0.textContent = `${t('Synonyms:')}`;
			t1 = space();
			p = element("p");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div0, "class", "label svelte-nmuzfy");
			attr(p, "class", "svelte-nmuzfy");
			attr(div1, "class", "synonyms svelte-nmuzfy");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div1, t1);
			append(div1, p);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(p, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*definitions*/ 2) {
				each_value_1 = /*definition*/ ctx[3].synonyms;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(p, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (33:25) {#if i < definition.synonyms.length - 1}
function create_if_block_1$2(ctx) {
	let t_1_value = ", " + "";
	let t_1;

	return {
		c() {
			t_1 = text(t_1_value);
		},
		m(target, anchor) {
			insert(target, t_1, anchor);
		},
		d(detaching) {
			if (detaching) detach(t_1);
		}
	};
}

// (32:14) {#each definition.synonyms as synonym, i}
function create_each_block_1$1(ctx) {
	let t_1_value = /*synonym*/ ctx[6] + "";
	let t_1;
	let if_block_anchor;
	let if_block = /*i*/ ctx[5] < /*definition*/ ctx[3].synonyms.length - 1 && create_if_block_1$2();

	return {
		c() {
			t_1 = text(t_1_value);
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			insert(target, t_1, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*definitions*/ 2 && t_1_value !== (t_1_value = /*synonym*/ ctx[6] + "")) set_data(t_1, t_1_value);

			if (/*i*/ ctx[5] < /*definition*/ ctx[3].synonyms.length - 1) {
				if (if_block) ; else {
					if_block = create_if_block_1$2();
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) detach(t_1);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (12:4) {#each definitions as definition, i}
function create_each_block$2(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let if_block0 = /*definition*/ ctx[3].definition && create_if_block_3$1(ctx);
	let if_block1 = /*definition*/ ctx[3].example && create_if_block_2$1(ctx);
	let if_block2 = /*definition*/ ctx[3].synonyms && /*definition*/ ctx[3].synonyms[/*i*/ ctx[5]] && create_if_block$2(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			attr(div, "class", "definition svelte-nmuzfy");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			if (if_block1) if_block1.m(div, null);
			append(div, t1);
			if (if_block2) if_block2.m(div, null);
			append(div, t2);
		},
		p(ctx, dirty) {
			if (/*definition*/ ctx[3].definition) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_3$1(ctx);
					if_block0.c();
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*definition*/ ctx[3].example) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_2$1(ctx);
					if_block1.c();
					if_block1.m(div, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*definition*/ ctx[3].synonyms && /*definition*/ ctx[3].synonyms[/*i*/ ctx[5]]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block$2(ctx);
					if_block2.c();
					if_block2.m(div, t2);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
		}
	};
}

function create_fragment$4(ctx) {
	let div;
	let details;
	let summary;
	let t0_value = (/*partOfSpeech*/ ctx[2] ?? "") + "";
	let t0;
	let t1;
	let each_value = /*definitions*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");
			details = element("details");
			summary = element("summary");
			t0 = text(t0_value);
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(summary, "class", "svelte-nmuzfy");
			attr(details, "class", "svelte-nmuzfy");
			attr(div, "class", "main svelte-nmuzfy");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, details);
			append(details, summary);
			append(summary, t0);
			append(details, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(details, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*partOfSpeech*/ 4 && t0_value !== (t0_value = (/*partOfSpeech*/ ctx[2] ?? "") + "")) set_data(t0, t0_value);

			if (dirty & /*definitions, t, RegExp, word*/ 3) {
				each_value = /*definitions*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(details, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance$4($$self, $$props, $$invalidate) {
	
	let { word } = $$props;
	let { definitions } = $$props;
	let { partOfSpeech } = $$props;

	$$self.$$set = $$props => {
		if ('word' in $$props) $$invalidate(0, word = $$props.word);
		if ('definitions' in $$props) $$invalidate(1, definitions = $$props.definitions);
		if ('partOfSpeech' in $$props) $$invalidate(2, partOfSpeech = $$props.partOfSpeech);
	};

	return [word, definitions, partOfSpeech];
}

class MeaningComponent extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$4, create_fragment$4, safe_not_equal, { word: 0, definitions: 1, partOfSpeech: 2 }, add_css$4);
	}
}

/* src/ui/dictionary/errorComponent.svelte generated by Svelte v3.42.2 */

function add_css$3(target) {
	append_styles(target, "svelte-1lk7r5d", ".error.svelte-1lk7r5d{text-align:center;width:100%;color:var(--text-muted)}.errorDescription.svelte-1lk7r5d{text-align:center;width:100%;font-size:0.9em;color:var(--text-faint)}");
}

function create_fragment$3(ctx) {
	let div;
	let p0;
	let t1;
	let p1;
	let t3;
	let details;
	let summary;
	let t5_value = (/*error*/ ctx[0] ?? "") + "";
	let t5;

	return {
		c() {
			div = element("div");
			p0 = element("p");
			p0.textContent = "Something went wrong..";
			t1 = space();
			p1 = element("p");
			p1.textContent = `${t('I can\'t find the word you are looking for or the server can\'t be reached. You can try again in a few minutes.')}`;
			t3 = space();
			details = element("details");
			summary = element("summary");
			summary.textContent = `${t("View Error")}`;
			t5 = text(t5_value);
			attr(p0, "class", "error svelte-1lk7r5d");
			attr(p1, "class", "errorDescription svelte-1lk7r5d");
			attr(details, "class", "errorDescription svelte-1lk7r5d");
			attr(div, "class", "main");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, p0);
			append(div, t1);
			append(div, p1);
			append(div, t3);
			append(div, details);
			append(details, summary);
			append(details, t5);
		},
		p(ctx, [dirty]) {
			if (dirty & /*error*/ 1 && t5_value !== (t5_value = (/*error*/ ctx[0] ?? "") + "")) set_data(t5, t5_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function instance$3($$self, $$props, $$invalidate) {
	let { error } = $$props;

	onMount(() => {
		console.error(error);
	});

	$$self.$$set = $$props => {
		if ('error' in $$props) $$invalidate(0, error = $$props.error);
	};

	return [error];
}

class ErrorComponent extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { error: 0 }, add_css$3);
	}
}

/* src/ui/dictionary/originComponent.svelte generated by Svelte v3.42.2 */

function add_css$2(target) {
	append_styles(target, "svelte-1ylo9n6", ".main.svelte-1ylo9n6{background-color:var(--background-secondary);padding-left:0.6rem;padding-right:0.6rem;padding-top:0.3rem;padding-bottom:0.3rem;margin-bottom:0.3rem;border-radius:0.3rem}");
}

function create_fragment$2(ctx) {
	let div;
	let t_value = /*data*/ ctx[0].origin + "";
	let t;

	return {
		c() {
			div = element("div");
			t = text(t_value);
			attr(div, "class", "main svelte-1ylo9n6");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, [dirty]) {
			if (dirty & /*data*/ 1 && t_value !== (t_value = /*data*/ ctx[0].origin + "")) set_data(t, t_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	
	let { data } = $$props;

	$$self.$$set = $$props => {
		if ('data' in $$props) $$invalidate(0, data = $$props.data);
	};

	return [data];
}

class OriginComponent extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { data: 0 }, add_css$2);
	}
}

/* src/ui/dictionary/dictionaryView.svelte generated by Svelte v3.42.2 */

function add_css$1(target) {
	append_styles(target, "svelte-19jc5lb", ".results.svelte-19jc5lb.svelte-19jc5lb{display:flex;flex-wrap:wrap}.nn.svelte-19jc5lb.svelte-19jc5lb{color:var(--text-faint);transition:0.2s;width:100%;display:inline-block;text-align:center;margin-top:1.5rem;font-size:1em}.nn.svelte-19jc5lb.svelte-19jc5lb:hover{color:var(--text)}.container.svelte-19jc5lb.svelte-19jc5lb{max-width:30vw;width:100%;margin:auto;background-color:var(--background-primary-alt);padding-left:0.5rem;padding-right:0.5rem;padding-top:0.3rem;padding-bottom:0.3rem;margin-top:0.5rem;border-radius:0.3rem}.container.svelte-19jc5lb>h3.svelte-19jc5lb{margin-top:0.3rem;margin-bottom:0.3rem;font-weight:normal}.searchbox.svelte-19jc5lb.svelte-19jc5lb{margin-top:0.1rem;display:flex}.searchbox.svelte-19jc5lb>input.svelte-19jc5lb{width:100%;margin-right:0.8rem;margin-left:0.8rem}.dictionary-button.svelte-19jc5lb.svelte-19jc5lb{margin-right:0px}.searchIcon.svelte-19jc5lb.svelte-19jc5lb{box-sizing:border-box;position:relative;display:block;transform:scale(var(--ggs, 1));width:16px;height:16px;border:2px solid;border-radius:100%;margin-left:-4px;margin-top:-4px}.searchIcon.svelte-19jc5lb.svelte-19jc5lb::after{content:\"\";display:block;box-sizing:border-box;position:absolute;border-radius:3px;width:2px;height:8px;background:currentColor;transform:rotate(-45deg);top:10px;left:12px}.languageIcon.svelte-19jc5lb.svelte-19jc5lb,.languageIcon.svelte-19jc5lb.svelte-19jc5lb::after,.languageIcon.svelte-19jc5lb.svelte-19jc5lb::before{display:block;box-sizing:border-box;height:18px;border:2px solid}.languageIcon.svelte-19jc5lb.svelte-19jc5lb{position:relative;transform:scale(var(--ggs, 1));width:18px;border-radius:22px}.languageIcon.svelte-19jc5lb.svelte-19jc5lb::after,.languageIcon.svelte-19jc5lb.svelte-19jc5lb::before{content:\"\";position:absolute;width:8px;border-radius:100%;top:-2px;left:3px}.languageIcon.svelte-19jc5lb.svelte-19jc5lb::after{width:24px;height:20px;border:2px solid transparent;border-bottom:2px solid;top:-11px;left:-5px}.center.svelte-19jc5lb.svelte-19jc5lb{margin:auto;width:100%;margin-top:2rem}@keyframes svelte-19jc5lb-spinner{0%{transform:translate3d(-50%, -50%, 0) rotate(0deg)}100%{transform:translate3d(-50%, -50%, 0) rotate(360deg)}}.spinner.svelte-19jc5lb.svelte-19jc5lb{height:3rem;opacity:1;position:relative;transition:opacity linear 0.1s}.spinner.svelte-19jc5lb.svelte-19jc5lb::before{animation:2s linear infinite svelte-19jc5lb-spinner;border:solid 3px var(--background-modifier-border);border-bottom-color:var(--interactive-accent);border-radius:50%;content:\"\";height:40px;left:50%;opacity:inherit;position:absolute;top:50%;transform:translate3d(-50%, -50%, 0);transform-origin:center;width:40px;will-change:transform}");
}

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i].definitions;
	child_ctx[10] = list[i].partOfSpeech;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i].text;
	child_ctx[14] = list[i].audio;
	return child_ctx;
}

// (47:2) {#if promise && query.trim()}
function create_if_block$1(ctx) {
	let await_block_anchor;
	let promise_1;
	let current;

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: true,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 8,
		error: 17,
		blocks: [,,,]
	};

	handle_promise(promise_1 = /*promise*/ ctx[2], info);

	return {
		c() {
			await_block_anchor = empty();
			info.block.c();
		},
		m(target, anchor) {
			insert(target, await_block_anchor, anchor);
			info.block.m(target, info.anchor = anchor);
			info.mount = () => await_block_anchor.parentNode;
			info.anchor = await_block_anchor;
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			info.ctx = ctx;

			if (dirty & /*promise*/ 4 && promise_1 !== (promise_1 = /*promise*/ ctx[2]) && handle_promise(promise_1, info)) ; else {
				update_await_block_branch(info, ctx, dirty);
			}
		},
		i(local) {
			if (current) return;
			transition_in(info.block);
			current = true;
		},
		o(local) {
			for (let i = 0; i < 3; i += 1) {
				const block = info.blocks[i];
				transition_out(block);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(await_block_anchor);
			info.block.d(detaching);
			info.token = null;
			info = null;
		}
	};
}

// (82:4) {:catch error}
function create_catch_block(ctx) {
	let errorcomponent;
	let current;
	errorcomponent = new ErrorComponent({ props: { error: /*error*/ ctx[17] } });

	return {
		c() {
			create_component(errorcomponent.$$.fragment);
		},
		m(target, anchor) {
			mount_component(errorcomponent, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const errorcomponent_changes = {};
			if (dirty & /*promise*/ 4) errorcomponent_changes.error = /*error*/ ctx[17];
			errorcomponent.$set(errorcomponent_changes);
		},
		i(local) {
			if (current) return;
			transition_in(errorcomponent.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(errorcomponent.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(errorcomponent, detaching);
		}
	};
}

// (52:4) {:then data}
function create_then_block(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*query*/ ctx[0] === /*data*/ ctx[8].word && create_if_block_1$1(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*query*/ ctx[0] === /*data*/ ctx[8].word) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*query, promise*/ 5) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (53:6) {#if query === data.word}
function create_if_block_1$1(ctx) {
	let div1;
	let show_if = /*data*/ ctx[8].phonetics.first().text;
	let t0;
	let div0;
	let h3;
	let t2;
	let t3;
	let t4;
	let span;
	let current;
	let mounted;
	let dispose;
	let if_block0 = show_if && create_if_block_3(ctx);
	let each_value = /*data*/ ctx[8].meanings;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	let if_block1 = /*data*/ ctx[8].origin && create_if_block_2(ctx);

	function click_handler() {
		return /*click_handler*/ ctx[7](/*data*/ ctx[8]);
	}

	return {
		c() {
			div1 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			div0 = element("div");
			h3 = element("h3");
			h3.textContent = `${t("Meanings")}`;
			t2 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t3 = space();
			if (if_block1) if_block1.c();
			t4 = space();
			span = element("span");
			span.textContent = `${t("New Note")}`;
			attr(h3, "class", "svelte-19jc5lb");
			attr(div0, "class", "container svelte-19jc5lb");
			attr(div1, "class", "results svelte-19jc5lb");
			attr(span, "class", "nn svelte-19jc5lb");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block0) if_block0.m(div1, null);
			append(div1, t0);
			append(div1, div0);
			append(div0, h3);
			append(div0, t2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			append(div1, t3);
			if (if_block1) if_block1.m(div1, null);
			insert(target, t4, anchor);
			insert(target, span, anchor);
			current = true;

			if (!mounted) {
				dispose = listen(span, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*promise*/ 4) show_if = /*data*/ ctx[8].phonetics.first().text;

			if (show_if) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*promise*/ 4) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div1, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (dirty & /*promise*/ 4) {
				each_value = /*data*/ ctx[8].meanings;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div0, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (/*data*/ ctx[8].origin) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*promise*/ 4) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block0) if_block0.d();
			destroy_each(each_blocks, detaching);
			if (if_block1) if_block1.d();
			if (detaching) detach(t4);
			if (detaching) detach(span);
			mounted = false;
			dispose();
		}
	};
}

// (55:10) {#if data.phonetics.first().text}
function create_if_block_3(ctx) {
	let div;
	let h3;
	let t1;
	let current;
	let each_value_1 = /*data*/ ctx[8].phonetics;
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div = element("div");
			h3 = element("h3");
			h3.textContent = `${t("Pronunciation")}`;
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(h3, "class", "svelte-19jc5lb");
			attr(div, "class", "container svelte-19jc5lb");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h3);
			append(div, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*promise*/ 4) {
				each_value_1 = /*data*/ ctx[8].phonetics;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (58:14) {#each data.phonetics as { text, audio }}
function create_each_block_1(ctx) {
	let phoneticcomponent;
	let current;

	phoneticcomponent = new PhoneticComponent({
			props: {
				audio: /*audio*/ ctx[14],
				text: /*text*/ ctx[13]
			}
		});

	return {
		c() {
			create_component(phoneticcomponent.$$.fragment);
		},
		m(target, anchor) {
			mount_component(phoneticcomponent, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const phoneticcomponent_changes = {};
			if (dirty & /*promise*/ 4) phoneticcomponent_changes.audio = /*audio*/ ctx[14];
			if (dirty & /*promise*/ 4) phoneticcomponent_changes.text = /*text*/ ctx[13];
			phoneticcomponent.$set(phoneticcomponent_changes);
		},
		i(local) {
			if (current) return;
			transition_in(phoneticcomponent.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(phoneticcomponent.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(phoneticcomponent, detaching);
		}
	};
}

// (65:12) {#each data.meanings as { definitions, partOfSpeech }}
function create_each_block$1(ctx) {
	let meaningcomponent;
	let current;

	meaningcomponent = new MeaningComponent({
			props: {
				word: /*data*/ ctx[8].word,
				partOfSpeech: /*partOfSpeech*/ ctx[10],
				definitions: /*definitions*/ ctx[9]
			}
		});

	return {
		c() {
			create_component(meaningcomponent.$$.fragment);
		},
		m(target, anchor) {
			mount_component(meaningcomponent, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const meaningcomponent_changes = {};
			if (dirty & /*promise*/ 4) meaningcomponent_changes.word = /*data*/ ctx[8].word;
			if (dirty & /*promise*/ 4) meaningcomponent_changes.partOfSpeech = /*partOfSpeech*/ ctx[10];
			if (dirty & /*promise*/ 4) meaningcomponent_changes.definitions = /*definitions*/ ctx[9];
			meaningcomponent.$set(meaningcomponent_changes);
		},
		i(local) {
			if (current) return;
			transition_in(meaningcomponent.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(meaningcomponent.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(meaningcomponent, detaching);
		}
	};
}

// (69:10) {#if data.origin}
function create_if_block_2(ctx) {
	let div;
	let h3;
	let t1;
	let origincomponent;
	let current;
	origincomponent = new OriginComponent({ props: { data: /*data*/ ctx[8] } });

	return {
		c() {
			div = element("div");
			h3 = element("h3");
			h3.textContent = `${t("Origin")}`;
			t1 = space();
			create_component(origincomponent.$$.fragment);
			attr(h3, "class", "svelte-19jc5lb");
			attr(div, "class", "container svelte-19jc5lb");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h3);
			append(div, t1);
			mount_component(origincomponent, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const origincomponent_changes = {};
			if (dirty & /*promise*/ 4) origincomponent_changes.data = /*data*/ ctx[8];
			origincomponent.$set(origincomponent_changes);
		},
		i(local) {
			if (current) return;
			transition_in(origincomponent.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(origincomponent.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(origincomponent);
		}
	};
}

// (48:20)        <div class="center">         <div class="spinner" />       </div>     {:then data}
function create_pending_block(ctx) {
	let div1;

	return {
		c() {
			div1 = element("div");
			div1.innerHTML = `<div class="spinner svelte-19jc5lb"></div>`;
			attr(div1, "class", "center svelte-19jc5lb");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

function create_fragment$1(ctx) {
	let div1;
	let div0;
	let button0;
	let t0;
	let input;
	let t1;
	let button1;
	let t2;
	let show_if = /*promise*/ ctx[2] && /*query*/ ctx[0].trim();
	let current;
	let mounted;
	let dispose;
	let if_block = show_if && create_if_block$1(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			button0 = element("button");
			button0.innerHTML = `<i class="languageIcon svelte-19jc5lb" alt="Language"></i>`;
			t0 = space();
			input = element("input");
			t1 = space();
			button1 = element("button");
			button1.innerHTML = `<i class="searchIcon svelte-19jc5lb" alt="Search"></i>`;
			t2 = space();
			if (if_block) if_block.c();
			attr(button0, "class", "dictionary-button svelte-19jc5lb");
			attr(input, "type", "text");
			attr(input, "spellcheck", "true");
			attr(input, "placeholder", t("Enter a word"));
			attr(input, "class", "svelte-19jc5lb");
			attr(button1, "class", "dictionary-button svelte-19jc5lb");
			attr(div0, "class", "searchbox svelte-19jc5lb");
			attr(div1, "class", "main");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, button0);
			append(div0, t0);
			append(div0, input);
			set_input_value(input, /*query*/ ctx[0]);
			append(div0, t1);
			append(div0, button1);
			append(div1, t2);
			if (if_block) if_block.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", languageModal),
					listen(input, "input", /*input_input_handler*/ ctx[6]),
					listen(input, "keydown", /*handleKeyDown*/ ctx[4]),
					listen(button1, "click", /*search*/ ctx[3])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*query*/ 1 && input.value !== /*query*/ ctx[0]) {
				set_input_value(input, /*query*/ ctx[0]);
			}

			if (dirty & /*promise, query*/ 5) show_if = /*promise*/ ctx[2] && /*query*/ ctx[0].trim();

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*promise, query*/ 5) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function languageModal() {
	dispatchEvent(new Event("dictionary-open-language-switcher"));
}

function instance$1($$self, $$props, $$invalidate) {
	
	
	
	let { manager } = $$props;
	let { localDictionary } = $$props;
	let { query = "" } = $$props;
	let promise;

	function search() {
		if (query.trim()) {
			$$invalidate(2, promise = manager.requestDefinitions(query));
		}
	}

	addEventListener("obsidian-dictionary-plugin-search", () => {
		search();
	});

	function handleKeyDown(e) {
		if (e.key === "Enter") {
			search();
		}
	}

	function input_input_handler() {
		query = this.value;
		$$invalidate(0, query);
	}

	const click_handler = async data => await localDictionary.newNote(data);

	$$self.$$set = $$props => {
		if ('manager' in $$props) $$invalidate(5, manager = $$props.manager);
		if ('localDictionary' in $$props) $$invalidate(1, localDictionary = $$props.localDictionary);
		if ('query' in $$props) $$invalidate(0, query = $$props.query);
	};

	return [
		query,
		localDictionary,
		promise,
		search,
		handleKeyDown,
		manager,
		input_input_handler,
		click_handler
	];
}

class DictionaryView$1 extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { manager: 5, localDictionary: 1, query: 0 }, add_css$1);
	}
}

class SynonymProviderChooser extends obsidian.FuzzySuggestModal {
    constructor(app, plugin) {
        super(app);
        this.available = [];
        this.plugin = plugin;
        this.plugin.manager.synonymProvider.forEach((api) => {
            if (api.supportedLanguages.contains(this.plugin.settings.defaultLanguage)) {
                this.available.push(api.name);
            }
        });
        this.setPlaceholder(t("Choose a Synonym Provider Service"));
    }
    onOpen() {
        var _a;
        if (this.available.length <= 1) {
            this.onChooseItem((_a = this.available.first()) !== null && _a !== void 0 ? _a : "");
        }
        super.onOpen();
    }
    getItems() {
        return this.available;
    }
    getItemText(item) {
        return item;
    }
    onChooseItem(item) {
        return __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.synonymApiName = item;
            yield this.plugin.saveSettings();
            this.close();
        });
    }
}

class DefinitionProviderChooser extends obsidian.FuzzySuggestModal {
    constructor(app, plugin) {
        super(app);
        this.available = [];
        this.plugin = plugin;
        this.plugin.manager.definitionProvider.forEach((api) => {
            if (api.supportedLanguages.contains(this.plugin.settings.defaultLanguage)) {
                this.available.push(api.name);
            }
        });
        this.setPlaceholder(t("Choose a Definition Provider Service"));
    }
    onOpen() {
        var _a;
        if (this.available.length <= 1) {
            this.onChooseItem((_a = this.available.first()) !== null && _a !== void 0 ? _a : "");
        }
        super.onOpen();
    }
    getItems() {
        return this.available;
    }
    getItemText(item) {
        return item;
    }
    onChooseItem(item) {
        return __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.definitionApiName = item;
            yield this.plugin.saveSettings();
            this.close();
            new SynonymProviderChooser(this.app, this.plugin).open();
        });
    }
}

class LanguageChooser extends obsidian.FuzzySuggestModal {
    constructor(app, plugin) {
        super(app);
        this.plugin = plugin;
        this.setPlaceholder(t("Choose a Language"));
    }
    getItems() {
        const items = [];
        for (const lang in LANGUAGES) {
            items.push(lang);
        }
        return items;
    }
    getItemText(item) {
        if (item == this.plugin.settings.defaultLanguage) {
            return LANGUAGES[item] + ' 🗸';
        }
        else {
            return LANGUAGES[item];
        }
    }
    onChooseItem(item) {
        return __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.defaultLanguage = item;
            yield this.plugin.saveSettings();
            this.close();
            new DefinitionProviderChooser(this.app, this.plugin).open();
        });
    }
}

class DictionaryView extends obsidian.ItemView {
    constructor(leaf, plugin) {
        super(leaf);
        this.plugin = plugin;
    }
    query(query) {
        this._view.$set({
            query: query
        });
        dispatchEvent(new Event("obsidian-dictionary-plugin-search"));
    }
    getViewType() {
        return VIEW_TYPE;
    }
    getDisplayText() {
        return VIEW_DISPLAY_TEXT;
    }
    getIcon() {
        return VIEW_ICON;
    }
    onClose() {
        this._view.$destroy();
        return super.onClose();
    }
    onOpen() {
        this._view = new DictionaryView$1({
            target: this.contentEl,
            props: {
                manager: this.plugin.manager,
                localDictionary: this.plugin.localDictionary,
            }
        });
        addEventListener('dictionary-open-language-switcher', () => {
            new LanguageChooser(this.app, this.plugin).open();
        });
        return super.onOpen();
    }
}

class OfflineDictionary {
    constructor(manager) {
        this.name = "Offline Dictionary";
        this.supportedLanguages = ["en_US", "en_GB", "cn"];
        this.offline = true;
        this.manager = manager;
    }
    requestDefinitions(query, lang) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = (yield this.getOfflineDictionary())[query.toLowerCase()];
            if (!data) {
                return Promise.reject("Word doesnt exist in Offline Dictionary");
            }
            const phonetics = [];
            data.readings.forEach(element => {
                phonetics.push({ text: element });
            });
            const meanings = [];
            data.defs.forEach(element => {
                var _a, _b, _c, _d, _e;
                const definition = [];
                definition.push({
                    definition: lang === "cn" ? element.def_cn : element.def_en,
                    example: lang === "cn" ? (_b = (_a = element.ext) === null || _a === void 0 ? void 0 : _a.first()) === null || _b === void 0 ? void 0 : _b.ext_cn : (_e = (_d = (_c = element.ext) === null || _c === void 0 ? void 0 : _c.first()) === null || _d === void 0 ? void 0 : _d.ext_en) !== null && _e !== void 0 ? _e : ""
                });
                meanings.push({
                    partOfSpeech: lang === "cn" ? element.pos_cn : element.pos_en,
                    definitions: definition
                });
            });
            const dictionaryWord = {
                word: query,
                phonetics: phonetics,
                meanings: meanings
            };
            return dictionaryWord;
        });
    }
    getOfflineDictionary() {
        return __awaiter(this, void 0, void 0, function* () {
            const { plugin } = this.manager;
            const { adapter } = plugin.app.vault;
            const path = obsidian.normalizePath(`${plugin.manifest.dir}/offlineDictionary.json`);
            if (!this.offlineDic) {
                if (!(yield adapter.exists(path))) {
                    const data = yield obsidian.request({ url: `https://github.com/phibr0/obsidian-dictionary/releases/download/${plugin.manifest.version}/dictionary.json` });
                    yield adapter.write(path, data);
                }
                this.offlineDic = JSON.parse(yield adapter.read(path));
            }
            return this.offlineDic;
        });
    }
}

var PartOfSpeech;
(function (PartOfSpeech) {
    PartOfSpeech[PartOfSpeech["Noun"] = 0] = "Noun";
    PartOfSpeech[PartOfSpeech["Verb"] = 1] = "Verb";
    PartOfSpeech[PartOfSpeech["Adjective"] = 2] = "Adjective";
    PartOfSpeech[PartOfSpeech["Adverb"] = 3] = "Adverb";
})(PartOfSpeech || (PartOfSpeech = {}));
var Pos_cn;
(function (Pos_cn) {
    Pos_cn["Adj"] = "ADJ";
    Pos_cn["COMBInADJ"] = "COMB in ADJ";
    Pos_cn["Empty"] = "";
    Pos_cn["\u4E0D\u53EF\u6570\u540D\u8BCD"] = "\u4E0D\u53EF\u6570\u540D\u8BCD";
    Pos_cn["\u4E0D\u53EF\u6570\u540D\u8BCD\u590D\u6570\u540D\u8BCD"] = "\u4E0D\u53EF\u6570\u540D\u8BCD\uFF1B\u590D\u6570\u540D\u8BCD";
    Pos_cn["\u4E0D\u53EF\u6570\u540D\u8BCD\u611F\u53F9\u8BCD"] = "\u4E0D\u53EF\u6570\u540D\u8BCD\uFF1B\u611F\u53F9\u8BCD";
    Pos_cn["\u4E0D\u53EF\u6570\u96C6\u5408\u540D\u8BCD"] = "\u4E0D\u53EF\u6570\u96C6\u5408\u540D\u8BCD";
    Pos_cn["\u4E0D\u5B9A\u4EE3\u8BCD"] = "\u4E0D\u5B9A\u4EE3\u8BCD";
    Pos_cn["\u4E0D\u5B9A\u526F\u8BCD"] = "\u4E0D\u5B9A\u526F\u8BCD";
    Pos_cn["\u4E0E\u526F\u8BCD\u6784\u6210\u7684\u8BCD"] = "\u4E0E\u526F\u8BCD\u6784\u6210\u7684\u8BCD";
    Pos_cn["\u4E0E\u52A8\u8BCD\u6784\u6210\u7684\u8BCD"] = "\u4E0E\u52A8\u8BCD\u6784\u6210\u7684\u8BCD";
    Pos_cn["\u4E0E\u540D\u8BCD\u6784\u6210\u7684\u8BCD"] = "\u4E0E\u540D\u8BCD\u6784\u6210\u7684\u8BCD";
    Pos_cn["\u4E0E\u5F62\u5BB9\u8BCD\u53EF\u6570\u540D\u8BCD\u6784\u6210\u7684\u8BCD"] = "\u4E0E\u5F62\u5BB9\u8BCD\uFF0C\u53EF\u6570\u540D\u8BCD\u6784\u6210\u7684\u8BCD";
    Pos_cn["\u4E0E\u5F62\u5BB9\u8BCD\u540D\u8BCD\u6784\u6210\u7684\u8BCD"] = "\u4E0E\u5F62\u5BB9\u8BCD\uFF0C\u540D\u8BCD\u6784\u6210\u7684\u8BCD";
    Pos_cn["\u4E0E\u5F62\u5BB9\u8BCD\u6784\u6210\u7684\u8BCD"] = "\u4E0E\u5F62\u5BB9\u8BCD\u6784\u6210\u7684\u8BCD";
    Pos_cn["\u4E0E\u6570\u91CF\u8BCD\u6784\u6210\u7684\u8BCD"] = "\u4E0E\u6570\u91CF\u8BCD\u6784\u6210\u7684\u8BCD";
    Pos_cn["\u4E0E\u989C\u8272\u8BCD\u6784\u6210\u7684\u8BCD"] = "\u4E0E\u989C\u8272\u8BCD\u6784\u6210\u7684\u8BCD";
    Pos_cn["\u4E13\u6709\u540D\u8BCD"] = "\u4E13\u6709\u540D\u8BCD";
    Pos_cn["\u4E13\u6709\u540D\u8BCD\u53EF\u6570\u540D\u8BCD"] = "\u4E13\u6709\u540D\u8BCD\uFF1B\u53EF\u6570\u540D\u8BCD";
    Pos_cn["\u4E13\u6709\u540D\u8BCD\u79F0\u547C\u540D\u8BCD"] = "\u4E13\u6709\u540D\u8BCD\uFF1B\u79F0\u547C\u540D\u8BCD";
    Pos_cn["\u4E13\u6709\u590D\u6570\u540D\u8BCD"] = "\u4E13\u6709\u590D\u6570\u540D\u8BCD";
    Pos_cn["\u4E13\u6709\u96C6\u5408\u540D\u8BCD"] = "\u4E13\u6709\u96C6\u5408\u540D\u8BCD";
    Pos_cn["\u4ECB\u8BCD"] = "\u4ECB\u8BCD";
    Pos_cn["\u4EE3\u8BCD"] = "\u4EE3\u8BCD";
    Pos_cn["\u4F5C\u8005\u540D"] = "\u4F5C\u8005\u540D";
    Pos_cn["\u5173\u7CFB\u4EE3\u8BCD"] = "\u5173\u7CFB\u4EE3\u8BCD";
    Pos_cn["\u5206\u6570\u8BCD"] = "\u5206\u6570\u8BCD";
    Pos_cn["\u524D\u7F00"] = "\u524D\u7F00";
    Pos_cn["\u524D\u7F6E\u9650\u5B9A\u8BCD"] = "\u524D\u7F6E\u9650\u5B9A\u8BCD";
    Pos_cn["\u526F\u8BCD"] = "\u526F\u8BCD";
    Pos_cn["\u526F\u8BCD\u6700\u9AD8\u7EA7\u5F62\u5F0F"] = "\u526F\u8BCD\u6700\u9AD8\u7EA7\u5F62\u5F0F";
    Pos_cn["\u526F\u8BCD\u6BD4\u8F83\u7EA7\u5F62\u5F0F"] = "\u526F\u8BCD\u6BD4\u8F83\u7EA7\u5F62\u5F0F";
    Pos_cn["\u52A8\u8BCD"] = "\u52A8\u8BCD";
    Pos_cn["\u52A9\u52A8\u8BCD"] = "\u52A9\u52A8\u8BCD";
    Pos_cn["\u5355\u6570\u540D\u8BCD"] = "\u5355\u6570\u540D\u8BCD";
    Pos_cn["\u5355\u6570\u540D\u8BCD\u58F0\u97F3\u8BCD"] = "\u5355\u6570\u540D\u8BCD\uFF1B\u58F0\u97F3\u8BCD";
    Pos_cn["\u5355\u6570\u540D\u8BCD\u5934\u8854\u540D\u8BCD"] = "\u5355\u6570\u540D\u8BCD\uFF1B\u5934\u8854\u540D\u8BCD";
    Pos_cn["\u5355\u6570\u578B\u4EE3\u8BCD"] = "\u5355\u6570\u578B\u4EE3\u8BCD";
    Pos_cn["\u5355\u6570\u96C6\u5408\u540D\u8BCD"] = "\u5355\u6570\u96C6\u5408\u540D\u8BCD";
    Pos_cn["\u5355\u6570\u96C6\u5408\u540D\u8BCD\u4E13\u6709\u96C6\u5408\u540D\u8BCD"] = "\u5355\u6570\u96C6\u5408\u540D\u8BCD\uFF1B\u4E13\u6709\u96C6\u5408\u540D\u8BCD";
    Pos_cn["\u53CA\u7269\u4E0D\u53CA\u7269\u52A8\u8BCD"] = "\u53CA\u7269/\u4E0D\u53CA\u7269\u52A8\u8BCD";
    Pos_cn["\u53CD\u8EAB\u4EE3\u8BCD"] = "\u53CD\u8EAB\u4EE3\u8BCD";
    Pos_cn["\u53EF\u53D8\u540D\u8BCD"] = "\u53EF\u53D8\u540D\u8BCD";
    Pos_cn["\u53EF\u53D8\u540D\u8BCD\u540D\u79F0\u540D\u8BCD"] = "\u53EF\u53D8\u540D\u8BCD\uFF1B\u540D\u79F0\u540D\u8BCD";
    Pos_cn["\u53EF\u53D8\u96C6\u5408\u540D\u8BCD"] = "\u53EF\u53D8\u96C6\u5408\u540D\u8BCD";
    Pos_cn["\u53EF\u6570\u540D\u8BCD"] = "\u53EF\u6570\u540D\u8BCD";
    Pos_cn["\u53EF\u6570\u540D\u8BCD\u4E13\u6709\u540D\u8BCD"] = "\u53EF\u6570\u540D\u8BCD\uFF1B\u4E13\u6709\u540D\u8BCD";
    Pos_cn["\u53EF\u6570\u540D\u8BCD\u540D\u79F0\u540D\u8BCD"] = "\u53EF\u6570\u540D\u8BCD\uFF1B\u540D\u79F0\u540D\u8BCD";
    Pos_cn["\u53EF\u6570\u540D\u8BCD\u58F0\u97F3\u8BCD"] = "\u53EF\u6570\u540D\u8BCD\uFF1B\u58F0\u97F3\u8BCD";
    Pos_cn["\u53EF\u6570\u540D\u8BCD\u5934\u8854\u540D\u8BCD"] = "\u53EF\u6570\u540D\u8BCD\uFF1B\u5934\u8854\u540D\u8BCD";
    Pos_cn["\u53EF\u6570\u540D\u8BCD\u5934\u8854\u540D\u8BCD\u79F0\u547C\u540D\u8BCD"] = "\u53EF\u6570\u540D\u8BCD\uFF1B\u5934\u8854\u540D\u8BCD\uFF1B\u79F0\u547C\u540D\u8BCD";
    Pos_cn["\u53EF\u6570\u540D\u8BCD\u79F0\u547C\u540D\u8BCD"] = "\u53EF\u6570\u540D\u8BCD\uFF1B\u79F0\u547C\u540D\u8BCD";
    Pos_cn["\u53EF\u6570\u96C6\u5408\u540D\u8BCD"] = "\u53EF\u6570\u96C6\u5408\u540D\u8BCD";
    Pos_cn["\u53EF\u6570\u96C6\u5408\u540D\u8BCD\u540D\u79F0\u540D\u8BCD"] = "\u53EF\u6570\u96C6\u5408\u540D\u8BCD\uFF1B\u540D\u79F0\u540D\u8BCD";
    Pos_cn["\u540D\u79F0\u540D\u8BCD"] = "\u540D\u79F0\u540D\u8BCD";
    Pos_cn["\u540D\u79F0\u540D\u8BCD\u540D\u79F0\u540D\u8BCD"] = "\u540D\u79F0\u540D\u8BCD\uFF1B\u540D\u79F0\u540D\u8BCD";
    Pos_cn["\u540E\u7F00"] = "\u540E\u7F00";
    Pos_cn["\u5426\u5B9A\u4E0D\u5B9A\u4EE3\u8BCD"] = "\u5426\u5B9A\u4E0D\u5B9A\u4EE3\u8BCD";
    Pos_cn["\u5426\u5B9A\u4E0D\u5B9A\u526F\u8BCD"] = "\u5426\u5B9A\u4E0D\u5B9A\u526F\u8BCD";
    Pos_cn["\u5426\u5B9A\u526F\u8BCD"] = "\u5426\u5B9A\u526F\u8BCD";
    Pos_cn["\u5426\u5B9A\u8BCD"] = "\u5426\u5B9A\u8BCD";
    Pos_cn["\u5426\u5B9A\u9650\u5B9A\u8BCD"] = "\u5426\u5B9A\u9650\u5B9A\u8BCD";
    Pos_cn["\u58F0\u97F3\u8BCD"] = "\u58F0\u97F3\u8BCD";
    Pos_cn["\u590D\u6570\u540D\u8BCD"] = "\u590D\u6570\u540D\u8BCD";
    Pos_cn["\u590D\u6570\u540D\u8BCD\u540D\u79F0\u540D\u8BCD"] = "\u590D\u6570\u540D\u8BCD\uFF1B\u540D\u79F0\u540D\u8BCD";
    Pos_cn["\u590D\u6570\u578B\u4EE3\u8BCD"] = "\u590D\u6570\u578B\u4EE3\u8BCD";
    Pos_cn["\u590D\u6570\u6570\u91CF\u8BCD"] = "\u590D\u6570\u6570\u91CF\u8BCD";
    Pos_cn["\u5934\u8854\u540D\u8BCD"] = "\u5934\u8854\u540D\u8BCD";
    Pos_cn["\u5934\u8854\u540D\u8BCD\u53EF\u6570\u540D\u8BCD"] = "\u5934\u8854\u540D\u8BCD\uFF1B\u53EF\u6570\u540D\u8BCD";
    Pos_cn["\u5934\u8854\u540D\u8BCD\u53EF\u6570\u540D\u8BCD\u79F0\u547C\u540D\u8BCD"] = "\u5934\u8854\u540D\u8BCD\uFF1B\u53EF\u6570\u540D\u8BCD\uFF1B\u79F0\u547C\u540D\u8BCD";
    Pos_cn["\u5934\u8854\u540D\u8BCD\u79F0\u547C\u540D\u8BCD"] = "\u5934\u8854\u540D\u8BCD\uFF1B\u79F0\u547C\u540D\u8BCD";
    Pos_cn["\u5934\u8854\u540D\u8BCD\u79F0\u547C\u540D\u8BCD\u53EF\u6570\u540D\u8BCD"] = "\u5934\u8854\u540D\u8BCD\uFF1B\u79F0\u547C\u540D\u8BCD\uFF1B\u53EF\u6570\u540D\u8BCD";
    Pos_cn["\u5BB6\u5EAD\u6210\u5458\u540D\u8BCD"] = "\u5BB6\u5EAD\u6210\u5458\u540D\u8BCD";
    Pos_cn["\u5BB6\u5EAD\u6210\u5458\u540D\u8BCD\u5934\u8854\u540D\u8BCD"] = "\u5BB6\u5EAD\u6210\u5458\u540D\u8BCD\uFF1B\u5934\u8854\u540D\u8BCD";
    Pos_cn["\u5E7F\u4E49\u5426\u5B9A\u7ED3\u6784\u526F\u8BCD"] = "\u5E7F\u4E49\u5426\u5B9A\u7ED3\u6784\u526F\u8BCD";
    Pos_cn["\u5E8F\u6570\u8BCD"] = "\u5E8F\u6570\u8BCD";
    Pos_cn["\u5F3A\u8C03\u4EE3\u8BCD"] = "\u5F3A\u8C03\u4EE3\u8BCD";
    Pos_cn["\u5F3A\u8C03\u53CD\u8EAB\u4EE3\u8BCD"] = "\u5F3A\u8C03\u53CD\u8EAB\u4EE3\u8BCD";
    Pos_cn["\u5F62\u5BB9\u8BCD"] = "\u5F62\u5BB9\u8BCD";
    Pos_cn["\u5F62\u5BB9\u8BCD\u6700\u9AD8\u7EA7\u5F62\u5F0F"] = "\u5F62\u5BB9\u8BCD\u6700\u9AD8\u7EA7\u5F62\u5F0F";
    Pos_cn["\u5F62\u5BB9\u8BCD\u6BD4\u8F83\u7EA7\u5F62\u5F0F"] = "\u5F62\u5BB9\u8BCD\u6BD4\u8F83\u7EA7\u5F62\u5F0F";
    Pos_cn["\u5F62\u5BB9\u8BCD\u901A\u5E38\u7528\u4E8E\u540D\u8BCD\u524D"] = "\u5F62\u5BB9\u8BCD  \u901A\u5E38\u7528\u4E8E\u540D\u8BCD\u524D";
    Pos_cn["\u60C5\u6001\u52A8\u8BCD"] = "\u60C5\u6001\u52A8\u8BCD";
    Pos_cn["\u60C5\u6001\u52A8\u8BCD\u77ED\u8BED"] = "\u60C5\u6001\u52A8\u8BCD\u77ED\u8BED";
    Pos_cn["\u60EF\u7528\u8BED"] = "\u60EF\u7528\u8BED";
    Pos_cn["\u611F\u53F9\u8BCD\u4E0D\u53EF\u6570\u540D\u8BCD"] = "\u611F\u53F9\u8BCD\uFF1B\u4E0D\u53EF\u6570\u540D\u8BCD";
    Pos_cn["\u611F\u53F9\u8BED"] = "\u611F\u53F9\u8BED";
    Pos_cn["\u6240\u6709\u683C\u4EE3\u8BCD"] = "\u6240\u6709\u683C\u4EE3\u8BCD";
    Pos_cn["\u6240\u6709\u683C\u9650\u5B9A\u8BCD"] = "\u6240\u6709\u683C\u9650\u5B9A\u8BCD";
    Pos_cn["\u6570\u8BCD"] = "\u6570\u8BCD";
    Pos_cn["\u6570\u91CF\u8BCD"] = "\u6570\u91CF\u8BCD";
    Pos_cn["\u6784\u8BCD\u6210\u5206"] = "\u6784\u8BCD\u6210\u5206";
    Pos_cn["\u7269\u8D28\u540D\u8BCD"] = "\u7269\u8D28\u540D\u8BCD";
    Pos_cn["\u7591\u95EE\u8BCD"] = "\u7591\u95EE\u8BCD";
    Pos_cn["\u76F8\u4E92\u4EE3\u8BCD"] = "\u76F8\u4E92\u4EE3\u8BCD";
    Pos_cn["\u76F8\u4E92\u52A8\u8BCD"] = "\u76F8\u4E92\u52A8\u8BCD";
    Pos_cn["\u76F8\u4E92\u52A8\u8BCD\u4E60\u8BED"] = "\u76F8\u4E92\u52A8\u8BCD\u4E60\u8BED";
    Pos_cn["\u76F8\u4E92\u52A8\u8BCD\u77ED\u8BED"] = "\u76F8\u4E92\u52A8\u8BCD\u77ED\u8BED";
    Pos_cn["\u76F8\u4E92\u77ED\u8BED"] = "\u76F8\u4E92\u77ED\u8BED";
    Pos_cn["\u77ED\u8BED"] = "\u77ED\u8BED";
    Pos_cn["\u77ED\u8BED\u4ECB\u8BCD"] = "\u77ED\u8BED\u4ECB\u8BCD";
    Pos_cn["\u77ED\u8BED\u52A8\u8BCD"] = "\u77ED\u8BED\u52A8\u8BCD";
    Pos_cn["\u79F0\u547C\u540D\u8BCD"] = "\u79F0\u547C\u540D\u8BCD";
    Pos_cn["\u79F0\u547C\u540D\u8BCD\u4E13\u6709\u540D\u8BCD"] = "\u79F0\u547C\u540D\u8BCD\uFF1B\u4E13\u6709\u540D\u8BCD";
    Pos_cn["\u79F0\u547C\u540D\u8BCD\u5355\u6570\u540D\u8BCD"] = "\u79F0\u547C\u540D\u8BCD\uFF1B\u5355\u6570\u540D\u8BCD";
    Pos_cn["\u79F0\u547C\u540D\u8BCD\u53EF\u6570\u540D\u8BCD"] = "\u79F0\u547C\u540D\u8BCD\uFF1B\u53EF\u6570\u540D\u8BCD";
    Pos_cn["\u79F0\u547C\u540D\u8BCD\u590D\u6570\u540D\u8BCD"] = "\u79F0\u547C\u540D\u8BCD\uFF1B\u590D\u6570\u540D\u8BCD";
    Pos_cn["\u79F0\u547C\u540D\u8BCD\u5934\u8854\u540D\u8BCD\u53EF\u6570\u540D\u8BCD"] = "\u79F0\u547C\u540D\u8BCD\uFF1B\u5934\u8854\u540D\u8BCD\uFF1B\u53EF\u6570\u540D\u8BCD";
    Pos_cn["\u80FD\u88AB\u8868\u793A\u7A0B\u5EA6\u7684\u526F\u8BCD\u6216\u4ECB\u8BCD\u8BCD\u7EC4\u4FEE\u9970\u7684\u5F62\u5BB9\u8BCD"] = "\u80FD\u88AB\u8868\u793A\u7A0B\u5EA6\u7684\u526F\u8BCD\u6216\u4ECB\u8BCD\u8BCD\u7EC4\u4FEE\u9970\u7684\u5F62\u5BB9\u8BCD";
    Pos_cn["\u8868\u793A\u8BF4\u8BDD\u65F6\u7684\u8BED\u6C14\u6216\u611F\u60C5"] = "\u8868\u793A\u8BF4\u8BDD\u65F6\u7684\u8BED\u6C14\u6216\u611F\u60C5";
    Pos_cn["\u88AB\u52A8\u4EE3\u8BCD\u4E60\u8BED"] = "\u88AB\u52A8\u4EE3\u8BCD\u4E60\u8BED";
    Pos_cn["\u88AB\u52A8\u52A8\u8BCD"] = "\u88AB\u52A8\u52A8\u8BCD";
    Pos_cn["\u88AB\u52A8\u52A8\u8BCD\u77ED\u8BED"] = "\u88AB\u52A8\u52A8\u8BCD\u77ED\u8BED";
    Pos_cn["\u88AB\u52A8\u76F8\u4E92\u52A8\u8BCD"] = "\u88AB\u52A8\u76F8\u4E92\u52A8\u8BCD";
    Pos_cn["\u8AD6\u58C7"] = "\u8AD6\u58C7";
    Pos_cn["\u8FDE\u7CFB\u52A8\u8BCD"] = "\u8FDE\u7CFB\u52A8\u8BCD";
    Pos_cn["\u8FDE\u7CFB\u52A8\u8BCD\u53CA\u7269\u4E0D\u53CA\u7269"] = "\u8FDE\u7CFB\u52A8\u8BCD\uFF08\u53CA\u7269/\u4E0D\u53CA\u7269\uFF09";
    Pos_cn["\u8FDE\u7CFB\u52A8\u8BCD\u77ED\u8BED"] = "\u8FDE\u7CFB\u52A8\u8BCD\u77ED\u8BED";
    Pos_cn["\u8FDE\u8BCD"] = "\u8FDE\u8BCD";
    Pos_cn["\u9650\u5B9A\u8BCD"] = "\u9650\u5B9A\u8BCD";
    Pos_cn["\u989C\u8272\u8BCD"] = "\u989C\u8272\u8BCD";
})(Pos_cn || (Pos_cn = {}));
var Pos_en;
(function (Pos_en) {
    Pos_en["ADJUsuADJN"] = "ADJ usu ADJ n";
    Pos_en["ADVAsReply"] = "ADV as reply";
    Pos_en["Adj"] = "ADJ";
    Pos_en["AdjCompar"] = "ADJ-COMPAR";
    Pos_en["AdjGraded"] = "ADJ-GRADED";
    Pos_en["AdjSuperl"] = "ADJ-SUPERL";
    Pos_en["AdjUngraded"] = "ADJ-UNGRADED";
    Pos_en["Adv"] = "ADV";
    Pos_en["AdvBrdNeg"] = "ADV-BRD-NEG";
    Pos_en["AdvCompar"] = "ADV-COMPAR";
    Pos_en["AdvGraded"] = "ADV-GRADED";
    Pos_en["AdvIndef"] = "ADV-INDEF";
    Pos_en["AdvIndefNeg"] = "ADV-INDEF-NEG";
    Pos_en["AdvNeg"] = "ADV-NEG";
    Pos_en["AdvSuperl"] = "ADV-SUPERL";
    Pos_en["Author"] = "AUTHOR";
    Pos_en["Aux"] = "AUX";
    Pos_en["COMBInADJ"] = "COMB in ADJ";
    Pos_en["COMBInADJAndN"] = "COMB in ADJ and N";
    Pos_en["COMBInADJAndNCOUNT"] = "COMB in ADJ and N-COUNT";
    Pos_en["COMBInADJGRADED"] = "COMB in ADJ-GRADED";
    Pos_en["COMBInADV"] = "COMB in ADV";
    Pos_en["COMBInCOLOUR"] = "COMB in COLOUR";
    Pos_en["COMBInN"] = "COMB in N";
    Pos_en["COMBInNCOUNT"] = "COMB in N-COUNT";
    Pos_en["COMBInNCOUNTCOMBInADJ"] = "COMB in N-COUNT, COMB in ADJ";
    Pos_en["COMBInNUNCOUNT"] = "COMB in N-UNCOUNT";
    Pos_en["COMBInNUNCOUNTADJ"] = "COMB in N-UNCOUNT, ADJ";
    Pos_en["COMBInQUANT"] = "COMB in QUANT";
    Pos_en["COMBInVERB"] = "COMB in VERB";
    Pos_en["Colour"] = "COLOUR";
    Pos_en["Comb"] = "COMB";
    Pos_en["ConjCoord"] = "CONJ-COORD";
    Pos_en["ConjCoordNeg"] = "CONJ-COORD-NEG";
    Pos_en["ConjSubord"] = "CONJ-SUBORD";
    Pos_en["Convention"] = "CONVENTION";
    Pos_en["Det"] = "DET";
    Pos_en["DetNeg"] = "DET-NEG";
    Pos_en["DetPoss"] = "DET-POSS";
    Pos_en["Exclam"] = "EXCLAM";
    Pos_en["ExclamNUncount"] = "EXCLAM; N-UNCOUNT";
    Pos_en["Forum"] = "FORUM";
    Pos_en["Fraction"] = "FRACTION";
    Pos_en["Interj"] = "INTERJ";
    Pos_en["Modal"] = "MODAL";
    Pos_en["NCOUNTAlsoNINNAMES"] = "N-COUNT; also N-IN-NAMES";
    Pos_en["NCOUNTAlsoNVOC"] = "N-COUNT; also N-VOC";
    Pos_en["NCount"] = "N-COUNT";
    Pos_en["NCountColl"] = "N-COUNT-COLL";
    Pos_en["NCountCollNInNames"] = "N-COUNT-COLL; N-IN-NAMES";
    Pos_en["NCountNInNames"] = "N-COUNT; N-IN-NAMES";
    Pos_en["NCountNProper"] = "N-COUNT; N-PROPER";
    Pos_en["NCountNTitle"] = "N-COUNT; N-TITLE";
    Pos_en["NCountNTitleNVoc"] = "N-COUNT; N-TITLE; N-VOC";
    Pos_en["NCountNVoc"] = "N-COUNT; N-VOC";
    Pos_en["NCountSound"] = "N-COUNT; SOUND";
    Pos_en["NFamily"] = "N-FAMILY";
    Pos_en["NFamilyNTitle"] = "N-FAMILY; N-TITLE";
    Pos_en["NInNames"] = "N-IN-NAMES";
    Pos_en["NMass"] = "N-MASS";
    Pos_en["NPROPERAlsoNCOUNT"] = "N-PROPER; also N-COUNT";
    Pos_en["NPlural"] = "N-PLURAL";
    Pos_en["NPluralNInNames"] = "N-PLURAL; N-IN-NAMES";
    Pos_en["NProper"] = "N-PROPER";
    Pos_en["NProperColl"] = "N-PROPER-COLL";
    Pos_en["NProperNVoc"] = "N-PROPER; N-VOC";
    Pos_en["NProperPlural"] = "N-PROPER-PLURAL";
    Pos_en["NSing"] = "N-SING";
    Pos_en["NSingColl"] = "N-SING-COLL";
    Pos_en["NSingCollNProperColl"] = "N-SING-COLL; N-PROPER-COLL";
    Pos_en["NSingNTitle"] = "N-SING; N-TITLE";
    Pos_en["NSingSound"] = "N-SING; SOUND";
    Pos_en["NTitle"] = "N-TITLE";
    Pos_en["NTitleNCount"] = "N-TITLE; N-COUNT";
    Pos_en["NTitleNCountNVoc"] = "N-TITLE; N-COUNT; N-VOC";
    Pos_en["NTitleNVoc"] = "N-TITLE; N-VOC";
    Pos_en["NTitleNVocNCount"] = "N-TITLE; N-VOC; N-COUNT";
    Pos_en["NUNCOUNTAlsoEXCLAM"] = "N-UNCOUNT, also EXCLAM";
    Pos_en["NUNCOUNTAlsoNPLURAL"] = "N-UNCOUNT; also N-PLURAL";
    Pos_en["NUncount"] = "N-UNCOUNT";
    Pos_en["NUncountColl"] = "N-UNCOUNT-COLL";
    Pos_en["NUncountExclam"] = "N-UNCOUNT; EXCLAM";
    Pos_en["NVARNum"] = "N-VAR num";
    Pos_en["NVar"] = "N-VAR";
    Pos_en["NVarColl"] = "N-VAR-COLL";
    Pos_en["NVarNInNames"] = "N-VAR; N-IN-NAMES";
    Pos_en["NVoc"] = "N-VOC";
    Pos_en["NVocNCount"] = "N-VOC; N-COUNT";
    Pos_en["NVocNPlural"] = "N-VOC; N-PLURAL";
    Pos_en["NVocNProper"] = "N-VOC; N-PROPER";
    Pos_en["NVocNSing"] = "N-VOC; N-SING";
    Pos_en["NVocNTitleNCount"] = "N-VOC; N-TITLE; N-COUNT";
    Pos_en["Neg"] = "NEG";
    Pos_en["Num"] = "NUM";
    Pos_en["Ord"] = "ORD";
    Pos_en["PHRWithCl"] = "PHR with cl";
    Pos_en["PhrConjCoord"] = "PHR-CONJ-COORD";
    Pos_en["PhrConjSubord"] = "PHR-CONJ-SUBORD";
    Pos_en["PhrErg"] = "PHR-ERG";
    Pos_en["PhrModal"] = "PHR-MODAL";
    Pos_en["PhrRecip"] = "PHR-RECIP";
    Pos_en["PhrVLink"] = "PHR-V-LINK";
    Pos_en["PhrVPassive"] = "PHR-V-PASSIVE";
    Pos_en["PhrVRecip"] = "PHR-V-RECIP";
    Pos_en["PhrasalVerb"] = "PHRASAL VERB";
    Pos_en["PhrasalVerbErg"] = "PHRASAL VERB-ERG";
    Pos_en["PhrasalVerbPassive"] = "PHRASAL VERB-PASSIVE";
    Pos_en["PhrasalVerbRecip"] = "PHRASAL VERB-RECIP";
    Pos_en["PhrasalVerbRecipErg"] = "PHRASAL VERB-RECIP-ERG";
    Pos_en["Phrase"] = "PHRASE";
    Pos_en["Predet"] = "PREDET";
    Pos_en["Prefix"] = "PREFIX";
    Pos_en["Prep"] = "PREP";
    Pos_en["PrepPhrase"] = "PREP-PHRASE";
    Pos_en["Pron"] = "PRON";
    Pos_en["PronEmph"] = "PRON-EMPH";
    Pos_en["PronIndef"] = "PRON-INDEF";
    Pos_en["PronIndefNeg"] = "PRON-INDEF-NEG";
    Pos_en["PronPlural"] = "PRON-PLURAL";
    Pos_en["PronPoss"] = "PRON-POSS";
    Pos_en["PronRecip"] = "PRON-RECIP";
    Pos_en["PronRefl"] = "PRON-REFL";
    Pos_en["PronReflEmph"] = "PRON-REFL-EMPH";
    Pos_en["PronRel"] = "PRON-REL";
    Pos_en["PronSing"] = "PRON-SING";
    Pos_en["Quant"] = "QUANT";
    Pos_en["QuantPlural"] = "QUANT-PLURAL";
    Pos_en["Quest"] = "QUEST";
    Pos_en["Sound"] = "SOUND";
    Pos_en["Suffix"] = "SUFFIX";
    Pos_en["ToInf"] = "to inf";
    Pos_en["VERBNoPassive"] = "VERB: no passive";
    Pos_en["VErg"] = "V-ERG";
    Pos_en["VLink"] = "V-LINK";
    Pos_en["VLinkErg"] = "V-LINK-ERG";
    Pos_en["VLinkWorthAmount"] = "v-link worth amount";
    Pos_en["VLinkWorthIng"] = "v-link worth -ing";
    Pos_en["VLinkWorthNIng"] = "v-link worth n/-ing";
    Pos_en["VPassive"] = "V-PASSIVE";
    Pos_en["VPhr"] = "V PHR";
    Pos_en["VRecip"] = "V-RECIP";
    Pos_en["VRecipErg"] = "V-RECIP-ERG";
    Pos_en["VRecipPassive"] = "V-RECIP-PASSIVE";
    Pos_en["Verb"] = "VERB";
})(Pos_en || (Pos_en = {}));

class Base {
    constructor() {
        this.API_END_POINT = "https://api.dictionaryapi.dev/api/v2/entries/";
        this.name = "Free Dictionary API";
        this.url = "https://dictionaryapi.dev/";
        this.offline = false;
        this.languageCodes = {
            "en_US": "en_US",
            "hi": "hi",
            "es": "es",
            "fr": "fr",
            "ja": "ja",
            "ru": "ru",
            "en_GB": "en_GB",
            "de": "de",
            "it": "it",
            "ko": "ko",
            "pt_BR": "pt-BR",
            "ar": "ar",
            "tr": "tr",
        };
    }
    /**
     * @param query - The term you want to look up
     * @returns Returns the URL in REST schema
     */
    constructRequest(query, lang) {
        return this.API_END_POINT + lang + '/' + query;
        //SCHEMA: https://api.dictionaryapi.dev/api/v2/entries/<language_code>/<word>
    }
}
class FreeDictionaryDefinitionProvider extends Base {
    constructor() {
        super(...arguments);
        this.supportedLanguages = [
            "en_US",
            "hi",
            "es",
            "fr",
            "ja",
            "ru",
            "en_GB",
            "de",
            "it",
            "ko",
            "pt_BR",
            "ar",
            "tr",
        ];
    }
    /**
     * Sends a request with the passed query to the End Point and returns the Result
     *
     * @param query - The term you want to look up
     * @param lang - The language to use
     * @param _ - For now unused parameter, debouncing mechanism planned
     * @returns The API Response of the API as Promise<DictionaryWord>
     */
    requestDefinitions(query, lang, _ = true) {
        return __awaiter(this, void 0, void 0, function* () {
            let result;
            try {
                const url = this.constructRequest(encodeURIComponent(query), this.languageCodes[lang]);
                result = yield obsidian.request({ url });
            }
            catch (error) {
                return Promise.reject(error);
            }
            const json = yield JSON.parse(result);
            if (!json || json["title"]) {
                return Promise.reject(json["title"]);
            }
            return json.first();
        });
    }
}
class FreeDictionarySynonymProvider extends Base {
    constructor() {
        super(...arguments);
        this.supportedLanguages = [
            "en_US",
        ];
    }
    /**
     * @param meaning - The Meaning to compare the POS to
     * @param pos - The part of speech of the target word
     * @returns True if the meaning is the same part of speech as pos
     */
    getDoesPosMatch(meaning, pos) {
        switch (pos) {
            case PartOfSpeech.Noun:
                return meaning.partOfSpeech.toLowerCase().contains('noun');
            case PartOfSpeech.Verb:
                return meaning.partOfSpeech.toLowerCase().contains('verb');
            case PartOfSpeech.Adjective:
                return meaning.partOfSpeech.toLowerCase().contains('adjective');
            case PartOfSpeech.Adverb:
                return meaning.partOfSpeech.toLowerCase().contains('adverb');
        }
        return false;
    }
    /**
     *
     * @param query - The word to look up synonyms for
     * @param lang - The host language
     * @param pos - The part of speech of the target word
     * @returns A list of Synonyms
     */
    requestSynonyms(query, lang, pos) {
        return __awaiter(this, void 0, void 0, function* () {
            let result;
            try {
                result = yield obsidian.request({ url: this.constructRequest(query, this.languageCodes[lang]) });
            }
            catch (error) {
                return Promise.reject(error);
            }
            if (!result) {
                return Promise.reject("Word doesnt exist in this Dictionary");
            }
            const meanings = (yield JSON.parse(result)).first().meanings;
            const synonyms = [];
            // The default POS provider seems pretty wonky at the moment,
            // so let's include non-matches in the results as well
            const nonPOSMatch = [];
            meanings.forEach(meaning => {
                if (Number.isNumber(pos) && !this.getDoesPosMatch(meaning, pos)) {
                    meaning.definitions.forEach(def => {
                        if (def.synonyms) {
                            def.synonyms.forEach(synonym => {
                                nonPOSMatch.push({
                                    word: synonym,
                                });
                            });
                        }
                    });
                    return;
                }
                meaning.definitions.forEach(def => {
                    if (def.synonyms) {
                        def.synonyms.forEach(synonym => {
                            synonyms.push({
                                word: synonym,
                            });
                        });
                    }
                });
            });
            return synonyms.concat(nonPOSMatch);
        });
    }
}

class OpenThesaurusSynonymAPI {
    constructor() {
        this.API_END_POINT = "https://www.openthesaurus.de/synonyme/search?q=";
        this.name = "OpenThesaurus";
        this.url = "https://www.openthesaurus.de/";
        this.supportedLanguages = ["de"];
        this.offline = false;
    }
    /**
     * @param query - The term you want to look up
     * @returns Returns the URL in REST schema
     */
    constructRequest(query) {
        return this.API_END_POINT + query + "&format=application/json";
        //SCHEMA: https://www.openthesaurus.de/synonyme/search?q=<QUERY>&format=application/json
    }
    requestSynonyms(query) {
        return __awaiter(this, void 0, void 0, function* () {
            let result;
            try {
                result = yield obsidian.request({ url: this.constructRequest(query) });
            }
            catch (error) {
                return Promise.reject(error);
            }
            if (!result) {
                return Promise.reject("Word doesnt exist in this Dictionary");
            }
            const response = yield JSON.parse(result);
            if (response.synsets.length <= 0) {
                return Promise.reject("No Synonym found");
            }
            const synonymList = response.synsets[0].terms;
            const synonyms = [];
            synonymList.forEach((synonym) => {
                const word = synonym["term"];
                if (query != word) {
                    synonyms.push({ word: word });
                }
            });
            return synonyms;
        });
    }
}

const langMap = {
    ar: "ar",
    de: "de",
    en_US: "en",
    en_GB: "en",
    es: "es",
    fr: "fr",
    ru: "ru",
    it: "it",
    ko: "ko",
    pt: "pt",
    pt_BR: "pt",
    hi: "hi",
};
/**
 * Systran is used to determine the part of speech of a particular word
 * More languages are supported than listed, but I'm unable to retrieve the entire
 * list at the moment
 */
class SystranPOSProvider {
    constructor() {
        this.API_END_POINT = "https://systran-systran-platform-for-language-processing-v1.p.rapidapi.com/nlp/morphology/extract/pos";
        // This is a free endpoint but still requires a key.
        // The key is encoded to thwart bots, not humans.
        this.key = "NWUxYWZmNGE4ZG1zaDI5ZTZlZmJkMGE2NmUwZXAxYzliNTVqc24zMWI3ODRlMTVhMTc";
        this.name = "Systran API";
        this.url = "https://systran-systran-platform-for-language-processing-v1.p.rapidapi.com/";
        this.offline = false;
        this.supportedLanguages = [
            "ar",
            "de",
            "en_US",
            "en_GB",
            "es",
            "fr",
            "ru",
            "it",
            "ko",
            "pt",
            "pt-BR",
            "hi",
        ];
    }
    /**
     * @param lang - The language defined in settings
     * @returns A language code systran supports
     */
    mapLanguage(lang) {
        return langMap[lang];
    }
    /**
     * @param word - Target word
     * @param leftContext - The sentence content before the word
     * @param rightContext - The sentence content after the word
     * @param lang - The host language
     * @returns - The PartOfSpeech of the word, or null
     */
    requestPartOfSpeech(word, leftContext, rightContext, lang) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            let result;
            try {
                result = yield fetch(this.constructRequest(leftContext + word + rightContext, lang), {
                    method: "GET",
                    headers: {
                        "x-rapidapi-key": atob(this.key),
                        "x-rapidapi-host": "systran-systran-platform-for-language-processing-v1.p.rapidapi.com",
                    },
                });
            }
            catch (error) {
                return Promise.reject(error);
            }
            const words = (yield result.json());
            let match = (_a = words.partsOfSpeech) === null || _a === void 0 ? void 0 : _a.find((pos) => pos.start === leftContext.length);
            if (!match && words.partsOfSpeech) {
                match = words.partsOfSpeech.find(pos => {
                    return pos.text.contains(word);
                });
            }
            if (match) {
                const posStr = match.pos.split("/")[1];
                if (posStr.startsWith("noun"))
                    return PartOfSpeech.Noun;
                if (posStr.startsWith("verb"))
                    return PartOfSpeech.Verb;
                if (posStr.startsWith("adj"))
                    return PartOfSpeech.Adjective;
                if (posStr.startsWith("adv"))
                    return PartOfSpeech.Adverb;
            }
            return null;
        });
    }
    constructRequest(input, lang) {
        return (this.API_END_POINT +
            `?input=${encodeURIComponent(input)}&lang=${this.mapLanguage(lang)}`);
    }
}

class AltervistaSynonymProvider {
    constructor() {
        this.name = "Altervista";
        this.url = "http://thesaurus.altervista.org/";
        this.offline = false;
        //Look up more later
        this.supportedLanguages = [
            "es",
            "it",
            "fr",
            "de",
        ];
        this.languageCodes = {
            "es": "es_ES",
            "it": "it_IT",
            "fr": "fr_FR",
            "de": "de_DE",
        };
        //This is limited to 5000 queries/day
        this.TOKEN = "P4QAmqYIN1DY6XjlQJht";
    }
    requestSynonyms(query, lang, _) {
        return __awaiter(this, void 0, void 0, function* () {
            const synonyms = [];
            let result;
            try {
                result = yield obsidian.request({ url: this.constructRequest(encodeURIComponent(query), lang) });
            }
            catch (error) {
                return Promise.reject(error);
            }
            if (!result) {
                return Promise.reject("Word doesnt exist in this Dictionary");
            }
            const json = yield JSON.parse(result);
            for (const c of json.response) {
                const words = c.list.synonyms.split('|');
                words.forEach((word) => {
                    synonyms.push({ word: word });
                });
            }
            return synonyms;
        });
    }
    constructRequest(query, lang) {
        return `http://thesaurus.altervista.org/thesaurus/v1?word=${query}&key=${this.TOKEN}&language=${this.languageCodes[lang]}&output=json`;
    }
}

/*
HOW TO ADD A NEW API:

1. Add a new class that implements DefinitionProvider or
SynonymProvider (or both) and put the file in /src/api/
2. Push the new Provider to the right list in the
APIManager, as seen below
3. Test the Solution
4. Create a new Pull Request on GitHub
*/
class APIManager {
    constructor(plugin) {
        // Adds new API's to the Definition Providers
        this.definitionProvider = [
            new FreeDictionaryDefinitionProvider(),
            new OfflineDictionary(this)
        ];
        // Adds new API's to the Synonym Providers
        this.synonymProvider = [
            new FreeDictionarySynonymProvider(),
            new OpenThesaurusSynonymAPI(),
            // new SynonymoSynonymProvider(), see #44
            new AltervistaSynonymProvider(),
        ];
        // Adds new API's to the Part Of Speech Providers
        this.partOfSpeechProvider = [
            new SystranPOSProvider(),
        ];
        this.plugin = plugin;
    }
    /**
     * Sends a request with the passed query to the chosen API and returns the Result
     *
     * @param query - The term you want to look up
     * @returns The API Response of the chosen API as Promise<DictionaryWord>
     */
    requestDefinitions(query) {
        return __awaiter(this, void 0, void 0, function* () {
            //Get the currently enabled API
            const api = this.getDefinitionAPI();
            const { cache, settings } = this.plugin;
            if (settings.useCaching && !api.name.toLowerCase().contains("offline")) {
                //Get any cached Definitions
                const cachedDefinition = cache.cachedDefinitions.find((c) => { return c.content.word.toLowerCase() == query.toLowerCase() && c.lang == settings.defaultLanguage && c.api == api.name; });
                //If cachedDefiniton exists return it as a Promise
                if (cachedDefinition) {
                    return new Promise((resolve) => resolve(cachedDefinition.content));
                }
                else {
                    //If it doesnt exist request a new Definition
                    const result = api.requestDefinitions(query, settings.defaultLanguage);
                    //If the word gets found by the API cache it for later use
                    const awaitedResult = yield result;
                    if (awaitedResult) {
                        cache.cachedDefinitions.push({ content: awaitedResult, api: api.name, lang: settings.defaultLanguage });
                        yield this.plugin.saveCache();
                    }
                    //finally return the Promise so it can be awaited by the UI
                    return result;
                }
            }
            else {
                return api.requestDefinitions(query, this.plugin.settings.defaultLanguage);
            }
        });
    }
    /**
     * Sends a request with the passed query to the chosen API and returns the resulting Synonyms
     *
     * @param query - The term you want to look up
     * @param pos - The part of speech of the target word
     * @returns The API Response of the chosen API as Promise<Synonym[]>
     */
    requestSynonyms(query, pos) {
        return __awaiter(this, void 0, void 0, function* () {
            const api = this.getSynonymAPI();
            if (!api) {
                throw ("No Synonym API selected/available");
            }
            const { cache, settings } = this.plugin;
            if (settings.useCaching && !api.name.toLowerCase().contains("offline")) {
                const cachedSynonymCollection = cache.cachedSynonyms.find((s) => { return s.word.toLowerCase() == query.toLowerCase() && s.lang == settings.defaultLanguage && s.api == api.name; });
                if (cachedSynonymCollection) {
                    return new Promise((resolve) => resolve(cachedSynonymCollection.content));
                }
                else {
                    const result = api.requestSynonyms(query, settings.defaultLanguage);
                    const awaitedResult = yield result;
                    if (awaitedResult) {
                        cache.cachedSynonyms.push({ content: awaitedResult, api: api.name, word: query, lang: settings.defaultLanguage });
                        yield this.plugin.saveCache();
                    }
                    return result;
                }
            }
            else {
                return api.requestSynonyms(query, this.plugin.settings.defaultLanguage, pos);
            }
        });
    }
    /**
     * Sends a request with the passed word to the chosen API and returns the detected part of speech
     *
     * @param word - The word you want to look up
     * @param leftContext - The sentence content before the word
     * @param rightContext - The sentence content after the word
     * @returns The API Response of the chosen API as Promise<PartOfSpeech>
     */
    requestPartOfSpeech(word, leftContext, rightContext) {
        var _a;
        return (_a = this.getPartOfSpeechAPI()) === null || _a === void 0 ? void 0 : _a.requestPartOfSpeech(word, leftContext, rightContext, this.plugin.settings.defaultLanguage);
    }
    /**
     * @returns Returns the currently selected Definition API
     */
    getDefinitionAPI() {
        return this.definitionProvider.find((api) => api.name == this.plugin.settings.definitionApiName);
    }
    /**
     * @returns Returns the currently selected Synonym API
     */
    getSynonymAPI() {
        return this.synonymProvider.find((api) => api.name == this.plugin.settings.synonymApiName);
    }
    /**
     * @returns Returns the currently selected part of speech API
     */
    getPartOfSpeechAPI() {
        return this.partOfSpeechProvider.find(this.plugin.settings.advancedSynonymAnalysis
            ? (api) => api.name == this.plugin.settings.partOfSpeechApiName
            : null);
    }
}

function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
    const o = +getComputedStyle(node).opacity;
    return {
        delay,
        duration,
        easing,
        css: t => `opacity: ${t * o}`
    };
}

/* src/ui/synonyms/synonymPopover.svelte generated by Svelte v3.42.2 */

function add_css(target) {
	append_styles(target, "svelte-1j3cg25", ".dict-s-popover.svelte-1j3cg25.svelte-1j3cg25{min-width:210px;max-width:250px;max-height:200px;background-color:var(--background-primary);border:1px solid var(--background-modifier-border);position:absolute;z-index:var(--layer-popover);border-radius:5px;box-shadow:0px 15px 25px rgba(0, 0, 0, 0.2);font-size:14px;overflow-y:auto;overflow-x:hidden;line-height:1.4}.dict-s-popover__select-option.svelte-1j3cg25.svelte-1j3cg25{cursor:pointer;padding:10px;border-bottom:1px solid var(--background-modifier-border)}.dict-s-popover__select-option.svelte-1j3cg25.svelte-1j3cg25:hover{background-color:var(--background-secondary)}.dict-s-popover.svelte-1j3cg25>.dict-s-popover__select-option.svelte-1j3cg25:last-child{border-bottom:none}.dict-s-popover__select-label.svelte-1j3cg25.svelte-1j3cg25{display:flex;justify-content:space-between;align-items:center}.dict-s-popover__meta-description.svelte-1j3cg25.svelte-1j3cg25,.dict-s-popover__meta-pos.svelte-1j3cg25.svelte-1j3cg25{font-size:12px;color:var(--text-muted)}.dict-s-popover__meta-pos.svelte-1j3cg25.svelte-1j3cg25{display:inline-block;margin-left:10px}");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (39:8) {#if !!synonym.partsOfSpeech?.length}
function create_if_block_1(ctx) {
	let div;
	let t_value = /*synonym*/ ctx[6].partsOfSpeech.join(", ") + "";
	let t;

	return {
		c() {
			div = element("div");
			t = text(t_value);
			attr(div, "class", "dict-s-popover__meta-pos svelte-1j3cg25");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*synonyms*/ 2 && t_value !== (t_value = /*synonym*/ ctx[6].partsOfSpeech.join(", ") + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (43:6) {#if synonym.description}
function create_if_block(ctx) {
	let div;
	let t_value = /*synonym*/ ctx[6].description + "";
	let t;

	return {
		c() {
			div = element("div");
			t = text(t_value);
			attr(div, "class", "dict-s-popover__meta-description svelte-1j3cg25");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*synonyms*/ 2 && t_value !== (t_value = /*synonym*/ ctx[6].description + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (35:2) {#each synonyms as synonym}
function create_each_block(ctx) {
	let div2;
	let div1;
	let div0;
	let t0_value = /*synonym*/ ctx[6].word + "";
	let t0;
	let t1;
	let t2;
	let t3;
	let mounted;
	let dispose;
	let if_block0 = !!/*synonym*/ ctx[6].partsOfSpeech?.length && create_if_block_1(ctx);
	let if_block1 = /*synonym*/ ctx[6].description && create_if_block(ctx);

	function click_handler() {
		return /*click_handler*/ ctx[5](/*synonym*/ ctx[6]);
	}

	return {
		c() {
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			attr(div0, "class", "dict-s-popover__term");
			attr(div1, "class", "dict-s-popover__select-label svelte-1j3cg25");
			attr(div2, "class", "dict-s-popover__select-option svelte-1j3cg25");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div1);
			append(div1, div0);
			append(div0, t0);
			append(div1, t1);
			if (if_block0) if_block0.m(div1, null);
			append(div2, t2);
			if (if_block1) if_block1.m(div2, null);
			append(div2, t3);

			if (!mounted) {
				dispose = listen(div2, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*synonyms*/ 2 && t0_value !== (t0_value = /*synonym*/ ctx[6].word + "")) set_data(t0, t0_value);

			if (!!/*synonym*/ ctx[6].partsOfSpeech?.length) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(div1, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*synonym*/ ctx[6].description) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(div2, t3);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div;
	let div_intro;
	let mounted;
	let dispose;
	let each_value = /*synonyms*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			set_style(div, "left", /*coords*/ ctx[0].left + "px");
			set_style(div, "top", /*coords*/ ctx[0].bottom + "px");
			attr(div, "class", "dict-s-popover svelte-1j3cg25");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			if (!mounted) {
				dispose = action_destroyer(/*init*/ ctx[3].call(null, div));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*onSelect, synonyms*/ 6) {
				each_value = /*synonyms*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*coords*/ 1) {
				set_style(div, "left", /*coords*/ ctx[0].left + "px");
			}

			if (dirty & /*coords*/ 1) {
				set_style(div, "top", /*coords*/ ctx[0].bottom + "px");
			}
		},
		i(local) {
			if (!div_intro) {
				add_render_callback(() => {
					div_intro = create_in_transition(div, fade, { duration: 50 });
					div_intro.start();
				});
			}
		},
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	
	let { coords } = $$props;
	let { synonyms } = $$props;
	let { onSelect } = $$props;
	let { onClickOutside } = $$props;

	function init(node) {
		// Reposition the popover to fit on screen, if needed
		const height = node.clientHeight;

		const width = node.clientWidth;

		if (coords.bottom + height > window.innerHeight) {
			node.style.setProperty("top", `${coords.top - height}px`);
		}

		if (coords.left + width > window.innerWidth) {
			node.style.setProperty("left", `${window.innerWidth - width - 15}px`);
		}

		// Fire onClickOutside if anything but the popover is clicked
		function onBodyPointerUp(e) {
			if (!node.contains(e.target)) {
				document.body.removeEventListener("pointerup", onBodyPointerUp);
				onClickOutside();
			}
		}

		document.body.addEventListener("pointerup", onBodyPointerUp);
	}

	const click_handler = synonym => onSelect(synonym.word);

	$$self.$$set = $$props => {
		if ('coords' in $$props) $$invalidate(0, coords = $$props.coords);
		if ('synonyms' in $$props) $$invalidate(1, synonyms = $$props.synonyms);
		if ('onSelect' in $$props) $$invalidate(2, onSelect = $$props.onSelect);
		if ('onClickOutside' in $$props) $$invalidate(4, onClickOutside = $$props.onClickOutside);
	};

	return [coords, synonyms, onSelect, init, onClickOutside, click_handler];
}

class SynonymPopover$1 extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				coords: 0,
				synonyms: 1,
				onSelect: 2,
				onClickOutside: 4
			},
			add_css
		);
	}
}

class SynonymPopover {
    constructor(settings) {
        this.isDestroyed = false;
        this.settings = settings;
        this.openSynonymPopover();
    }
    destroy() {
        var _a;
        (_a = this._view) === null || _a === void 0 ? void 0 : _a.$destroy();
        this.isDestroyed = true;
    }
    openSynonymPopover() {
        return __awaiter(this, void 0, void 0, function* () {
            const { cursor, coords, line, selection, apiManager, onSelect } = this.settings;
            const sentences = line.split(/[.!?]/g);
            let seen = 0;
            // Loop through each sentence until we find our target word
            for (const sentence of sentences) {
                if (seen <= cursor.ch && cursor.ch <= seen + sentence.length) {
                    // Split the sentence to get the left and right contexts
                    const before = sentence.substr(0, cursor.ch - seen);
                    const after = sentence.substr(cursor.ch - seen + selection.length);
                    let pos;
                    if (this.settings.advancedPoS) {
                        try {
                            pos = yield apiManager.requestPartOfSpeech(selection, before, after);
                        }
                        catch (e) {
                            console.error(`Error determining part of speech for word ${selection}`, e);
                        }
                    }
                    let synonyms;
                    // Return early if we've been destroyed
                    if (this.isDestroyed)
                        return;
                    try {
                        synonyms = yield apiManager.requestSynonyms(selection, pos);
                    }
                    catch (e) {
                        console.error(`Error requesting synonyms for word ${selection}`, e);
                    }
                    // Return early if we've been destroyed
                    if (this.isDestroyed)
                        return;
                    if (!(synonyms === null || synonyms === void 0 ? void 0 : synonyms.length))
                        return;
                    // Open the synonym popover
                    this._view = new SynonymPopover$1({
                        intro: true,
                        target: document.body,
                        props: {
                            coords,
                            synonyms,
                            onSelect: (selection) => {
                                onSelect(selection);
                                this.destroy();
                            },
                            onClickOutside: () => {
                                this.destroy();
                            }
                        }
                    });
                    break;
                }
                seen += sentence.length + 1;
            }
        });
    }
}

function handleContextMenu(menu, instance, plugin) {
    if (!plugin.settings.shouldShowCustomContextMenu) {
        return;
    }
    if (instance.getSelection()) {
        if (!plugin.settings.shouldShowSynonymPopover) {
            menu.addItem((item) => {
                item.setTitle(t('Show Synonyms'))
                    .setIcon('synonyms')
                    .onClick((_) => __awaiter(this, void 0, void 0, function* () {
                    plugin.handlePointerUp();
                }));
            });
        }
        menu.addItem((item) => {
            item.setTitle(t('Look up'))
                .setIcon('quote-glyph')
                .onClick((_) => __awaiter(this, void 0, void 0, function* () {
                let leaf = plugin.app.workspace.getLeavesOfType(VIEW_TYPE).first();
                if (!leaf) {
                    leaf = plugin.app.workspace.getRightLeaf(false);
                    yield leaf.setViewState({
                        type: VIEW_TYPE,
                    });
                }
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                //@ts-ignore
                leaf.view.query(instance.getSelection());
                plugin.app.workspace.revealLeaf(leaf);
            }));
        });
    }
}

const icons = {
    copy: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" fill-opacity="0.0" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-copy"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>`,
    synonyms: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" fill-opacity="0.0" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-book-open"><path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"></path><path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"></path></svg>`,
};
const addIcons = () => {
    Object.keys(icons).forEach((key) => {
        obsidian.addIcon(key, icons[key]);
    });
};

//This really needs a refactor
class LocalDictionaryBuilder {
    constructor(plugin) {
        this.plugin = plugin;
        this.settings = plugin.settings;
    }
    cap(string) {
        if (string) {
            const words = string.split(" ");
            return words.map((word) => {
                return word[0].toUpperCase() + word.substring(1);
            }).join(" ");
        }
        return string;
    }
    newNote(content) {
        return __awaiter(this, void 0, void 0, function* () {
            const { plugin, settings } = this;
            let audioLinks = '';
            content.phonetics.forEach((value, i, a) => {
                if (value.audio) {
                    audioLinks += '- ' + (value.audio.startsWith("http") ? value.audio : "https:" + value.audio);
                    if (i != a.length - 1) {
                        audioLinks += '\n';
                    }
                }
            });
            let phonetics = '';
            content.phonetics.forEach((value, i, a) => {
                if (value.text) {
                    phonetics += '- ' + (value.audio ? `<details><summary>${value.text}</summary><audio controls><source src="${value.audio.startsWith("http") ? value.audio : "https:" + value.audio}"></audio></details>` : value.text);
                    if (i != a.length - 1) {
                        phonetics += '\n';
                    }
                }
            });
            let meanings = '';
            content.meanings.forEach((value, i) => {
                var _a;
                meanings += '### ' + this.cap((_a = value.partOfSpeech) !== null && _a !== void 0 ? _a : t("Meaning {{i}}").replace(/{{i}}/g, (i + 1).toString())) + '\n\n';
                value.definitions.forEach((def, j, b) => {
                    meanings += def.definition + '\n\n';
                    if (def.example) {
                        meanings += '> ' + def.example + '\n\n';
                    }
                    if (def.synonyms && def.synonyms.length != 0) {
                        def.synonyms.forEach((syn, i, a) => {
                            meanings += syn;
                            if (i != a.length - 1) {
                                meanings += ', ';
                            }
                        });
                        meanings += '\n\n';
                    }
                    if (j != b.length - 1) {
                        meanings += '---\n\n';
                    }
                });
            });
            let file;
            const langString = RFC[settings.defaultLanguage];
            const path = `${settings.folder ? settings.folder + '/' : ''}${settings.languageSpecificSubFolders ? langString + '/' : ''}${settings.prefix.replace(/{{lang}}/ig, langString)}${settings.capitalizedFileName ? this.cap(content.word) : content.word}${settings.suffix.replace(/{{lang}}/ig, langString)}.md`;
            const contents = settings.template
                .replace(/{{notice}}/ig, t('Autogenerated by Obsidian Dictionary Plugin'))
                .replace(/{{word}}/ig, settings.capitalizedFileName ? this.cap(content.word) : content.word)
                .replace(/{{pronunciationheader}}/ig, t('Pronunciation'))
                .replace(/{{phoneticlist}}/ig, phonetics)
                .replace(/{{meaningheader}}/ig, t('Meanings'))
                .replace(/{{meanings}}/ig, meanings)
                .replace(/{{lang}}/ig, langString)
                .replace(/{{audioLinks}}/ig, audioLinks);
            try {
                if (!(yield plugin.app.vault.adapter.exists(obsidian.normalizePath(`${settings.folder ? settings.folder + '/' : ''}${settings.languageSpecificSubFolders ? langString + '/' : ''}`)))) {
                    yield plugin.app.vault.createFolder(obsidian.normalizePath(`${settings.folder ? settings.folder + '/' : ''}${settings.languageSpecificSubFolders ? langString + '/' : ''}`));
                }
                file = yield plugin.app.vault.create(obsidian.normalizePath(path), contents);
                const leaf = plugin.app.workspace.splitActiveLeaf();
                yield leaf.openFile(file);
                plugin.app.workspace.setActiveLeaf(leaf);
            }
            catch (error) {
                new OverwriteModal(this.plugin, obsidian.normalizePath(path), contents).open();
            }
        });
    }
}
class OverwriteModal extends obsidian.Modal {
    constructor(plugin, path, content) {
        super(plugin.app);
        this.path = path;
        this.content = content;
    }
    onOpen() {
        this.contentEl.appendChild(createEl("p", { text: t("A existing File with the same Name was found, do you want to overwrite it?"), cls: "dictionarycenter" }));
        const buttonDiv = this.contentEl.appendChild(createDiv({ cls: "dictionarybuttons" }));
        buttonDiv.appendChild(createEl("button", { text: t("Yes, overwrite the old File."), cls: "mod-cta" })).onClickEvent(() => __awaiter(this, void 0, void 0, function* () {
            yield this.app.vault.delete(this.app.vault.getAbstractFileByPath(this.path));
            const file = yield this.app.vault.create(this.path, this.content);
            const leaf = this.app.workspace.splitActiveLeaf();
            yield leaf.openFile(file);
            this.close();
            this.app.workspace.setActiveLeaf(leaf);
        }));
        buttonDiv.appendChild(createEl("button", { text: t("No, keep the old File."), cls: "mod-cta" })).onClickEvent(() => {
            this.close();
        });
    }
}

function copy(string) {
    navigator.clipboard.writeText(string);
}

class DictionaryPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.synonymPopover = null;
        this.handleContextMenuHelper = (menu, editor, _) => {
            handleContextMenu(menu, editor, this);
        };
        // Open the synonym popover if a word is selected
        // This is debounced to handle double clicks
        this.handlePointerUp = obsidian.debounce(() => {
            const activeLeaf = this.app.workspace.activeLeaf;
            if ((activeLeaf === null || activeLeaf === void 0 ? void 0 : activeLeaf.view) instanceof obsidian.MarkdownView) {
                const view = activeLeaf.view;
                if (view.getMode() === 'source') {
                    const editor = view.editor;
                    const selection = editor.getSelection();
                    // Return early if we don't have anything selected, or if
                    // multiple words are selected
                    if (!selection || /\s/.test(selection))
                        return;
                    const cursor = editor.getCursor('from');
                    const line = editor.getLine(cursor.line);
                    let coords;
                    // Get the cursor position using the appropriate CM5 or CM6 interface
                    if (editor.cursorCoords) {
                        coords = editor.cursorCoords(true, 'window');
                    }
                    else if (editor.coordsAtPos) {
                        const offset = editor.posToOffset(cursor);
                        coords = editor.coordsAtPos(offset);
                    }
                    else {
                        return;
                    }
                    this.synonymPopover = new SynonymPopover({
                        apiManager: this.manager,
                        advancedPoS: this.settings.advancedSynonymAnalysis,
                        coords,
                        cursor,
                        line,
                        selection,
                        onSelect: (replacement) => {
                            editor.replaceSelection(matchCasing(replacement, selection));
                        }
                    });
                }
            }
        }, 300, true);
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading dictionary');
            yield Promise.all([this.loadSettings(), this.loadCache()]);
            addIcons();
            this.addSettingTab(new SettingsTab(this.app, this));
            this.manager = new APIManager(this);
            this.registerView(VIEW_TYPE, (leaf) => {
                return new DictionaryView(leaf, this);
            });
            this.addCommand({
                id: 'dictionary-open-view',
                name: t('Open Dictionary View'),
                callback: () => __awaiter(this, void 0, void 0, function* () {
                    if (this.app.workspace.getLeavesOfType(VIEW_TYPE).length == 0) {
                        yield this.app.workspace.getRightLeaf(false).setViewState({
                            type: VIEW_TYPE,
                        });
                    }
                    this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(VIEW_TYPE).first());
                }),
            });
            this.addCommand({
                id: 'dictionary-open-language-switcher',
                name: t('Open Language Switcher'),
                callback: () => {
                    new LanguageChooser(this.app, this).open();
                },
            });
            this.registerDomEvent(document.body, "pointerup", () => {
                if (!this.settings.shouldShowSynonymPopover) {
                    return;
                }
                this.handlePointerUp();
            });
            this.registerDomEvent(window, "keydown", () => {
                // Destroy the popover if it's open
                if (this.synonymPopover) {
                    this.synonymPopover.destroy();
                    this.synonymPopover = null;
                }
            });
            this.registerDomEvent(document.body, "contextmenu", (event) => {
                var _a, _b;
                //@ts-ignore
                if (this.settings.shouldShowCustomContextMenu && event.path.find(((el, i) => 
                //@ts-ignore
                i != event.path.length - 1 || i != event.path.length - 2 && el.hasClass("markdown-preview-view")))) {
                    if (window.getSelection().toString() && ((_b = (_a = this.app.workspace.activeLeaf) === null || _a === void 0 ? void 0 : _a.getViewState()) === null || _b === void 0 ? void 0 : _b.state.mode) === "preview") {
                        event.preventDefault();
                        const fileMenu = new obsidian.Menu(this.app);
                        fileMenu.addItem((item) => {
                            item.setTitle(t('Copy'))
                                .setIcon('copy')
                                .onClick((_) => {
                                copy(window.getSelection().toString());
                            });
                        });
                        fileMenu.addItem((item) => {
                            item.setTitle(t('Look up'))
                                .setIcon('quote-glyph')
                                .onClick((_) => __awaiter(this, void 0, void 0, function* () {
                                let leaf = this.app.workspace.getLeavesOfType(VIEW_TYPE).first();
                                if (!leaf) {
                                    leaf = this.app.workspace.getRightLeaf(false);
                                    yield leaf.setViewState({
                                        type: VIEW_TYPE,
                                    });
                                }
                                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                                //@ts-ignore
                                leaf.view.query(window.getSelection().toString());
                                this.app.workspace.revealLeaf(leaf);
                            }));
                        });
                        fileMenu.showAtPosition({ x: event.clientX, y: event.clientY });
                    }
                }
            });
            this.localDictionary = new LocalDictionaryBuilder(this);
            // Remove this ignore when the obsidian package is updated on npm
            // Editor mode
            // @ts-ignore
            this.registerEvent(this.app.workspace.on('editor-menu', this.handleContextMenuHelper));
        });
    }
    onunload() {
        console.log('unloading dictionary');
        this.app.workspace.off('editor-menu', this.handleContextMenuHelper);
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
            //Remove in a few Updates, remove the old Cache
            //@ts-ignore
            this.settings.cachedDefinitions = undefined;
            //@ts-ignore
            this.settings.cachedSynonyms = undefined;
        });
    }
    loadCache() {
        return __awaiter(this, void 0, void 0, function* () {
            this.cache = Object.assign({}, DEFAULT_CACHE, yield this.loadCacheFromDisk());
        });
    }
    loadCacheFromDisk() {
        return __awaiter(this, void 0, void 0, function* () {
            const path = obsidian.normalizePath(`${this.manifest.dir}/cache.json`);
            if (!(yield this.app.vault.adapter.exists(path))) {
                yield this.app.vault.adapter.write(path, "{}");
            }
            return JSON.parse(yield this.app.vault.adapter.read(path));
        });
    }
    saveCache() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.app.vault.adapter.write(obsidian.normalizePath(`${this.manifest.dir}/cache.json`), JSON.stringify(this.cache));
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = DictionaryPlugin;
//# sourceMappingURL=main.js.map

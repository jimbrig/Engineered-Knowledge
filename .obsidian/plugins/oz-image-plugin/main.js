/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class WidgetHandler {
}
// Remove Widgets in CodeMirror Editor
WidgetHandler.clearWidgets = (cm) => {
    var lastLine = cm.lastLine();
    for (let i = 0; i <= lastLine; i++) {
        const line = cm.lineInfo(i);
        WidgetHandler.clearLineWidgets(line);
    }
};
// Clear Single Line Widget
WidgetHandler.clearLineWidgets = (line) => {
    if (line.widgets) {
        for (const wid of line.widgets) {
            if (wid.className === 'oz-image-widget') {
                wid.clear();
            }
        }
    }
};
class LinkHandler {
}
LinkHandler.link_regex = /(http[s]?:\/\/)([^\/\s]+\/)(.*)/;
LinkHandler.image_http_regex_3 = /!\[\[[a-z][a-z0-9+\-.]+:\/.*\]\]/;
LinkHandler.image_http_regex_4 = /!\[[^)]*\]\([a-z][a-z0-9+\-.]+:\/[^)]*\)/;
// Check if String is a link
LinkHandler.path_is_a_link = (path) => {
    let match = path.match(LinkHandler.link_regex);
    return match ? true : false;
};
// Check line if it is a link
LinkHandler.get_link_in_line = (line) => {
    const match_3 = line.match(LinkHandler.image_http_regex_3);
    const match_4 = line.match(LinkHandler.image_http_regex_4);
    if (match_3) {
        return { result: match_3, linkType: 3 };
    }
    else if (match_4) {
        return { result: match_4, linkType: 4 };
    }
    return { result: false, linkType: 0 };
};
class PDFHandler {
}
// Regex for [[ ]] format
PDFHandler.pdf_regex_1 = /!\[\[.*(pdf)(.*)?\]\]/;
PDFHandler.pdf_name_regex_1 = /(?<=\[\[).*.pdf/;
// Regex for ![ ]( ) format
PDFHandler.pdf_regex_2 = /!\[(^$|.*)\]\(.*(pdf)(.*)?\)/;
PDFHandler.pdf_name_regex_2 = /(?<=\().*.pdf/;
// Check line if it is a PDF
PDFHandler.get_pdf_in_line = (line) => {
    const match_1 = line.match(PDFHandler.pdf_regex_1);
    const match_2 = line.match(PDFHandler.pdf_regex_2);
    if (match_1) {
        return { result: match_1, linkType: 1 };
    }
    else if (match_2) {
        return { result: match_2, linkType: 2 };
    }
    return { result: false, linkType: 0 };
};
PDFHandler.get_pdf_name = (linkType, match) => {
    let pdf_name_regex;
    if (linkType == 1)
        pdf_name_regex = PDFHandler.pdf_name_regex_1;
    if (linkType == 2)
        pdf_name_regex = PDFHandler.pdf_name_regex_2;
    var file_name_match = match[0].match(pdf_name_regex);
    return file_name_match[0];
};
PDFHandler.get_pdf_page_number = (match) => {
    const reg = new RegExp('#page=[0-9]+');
    const page_match = match[0].match(reg);
    if (page_match)
        return page_match[0];
    return false;
};
class ImageHandler {
}
// General Image Regex
ImageHandler.image_regex = /.*.(jpe?g|png|gif|svg|bmp|excalidraw|md)/;
// Regex for [[ ]] format
ImageHandler.image_line_regex_1 = /!\[\[.*?(jpe?g|png|gif|svg|bmp|excalidraw|md).*?\]\]/;
ImageHandler.file_name_regex_1 = /(?<=\[\[).*(jpe?g|png|gif|svg|bmp|excalidraw|md)/;
// Regex for ![ ]( ) format
ImageHandler.image_line_regex_2 = /!\[(^$|.*?)\]\(.*?(jpe?g|png|gif|svg|bmp|excalidraw|md)\)/;
ImageHandler.file_name_regex_2 = /(?<=\().*(jpe?g|png|gif|svg|bmp|excalidraw|md)/;
// Regex for Links
ImageHandler.file_name_regex_3 = /(?<=\[\[).*(?=\|)|(?<=\[\[).*(?=\]\])/;
ImageHandler.file_name_regex_4 = /(?<=\().*(?=\))/;
// Check line if it is image
ImageHandler.get_image_in_line = (line) => {
    const match_1 = line.match(ImageHandler.image_line_regex_1);
    const match_2 = line.match(ImageHandler.image_line_regex_2);
    if (match_1) {
        return { result: match_1, linkType: 1 };
    }
    else if (match_2) {
        return { result: match_2, linkType: 2 };
    }
    return { result: false, linkType: 0 };
};
// Image Name and Alt Text
ImageHandler.getFileNameAndAltText = (linkType, match) => {
    /*
        linkType 1: ![[myimage.jpg|#x-small]], linkType 3: ![[https://image|#x-small]],
        linkType 2: ![#x-small](myimage.jpg),  linkType 4: ![#x-small](https://image)
        returns { fileName: '', altText: '' }
    */
    var file_name_regex;
    var alt_regex;
    if (linkType == 1 || linkType == 3) {
        if (linkType == 1)
            file_name_regex = ImageHandler.file_name_regex_1;
        if (linkType == 3)
            file_name_regex = ImageHandler.file_name_regex_3;
        alt_regex = /(?<=\|).*(?=]])/;
    }
    else if (linkType == 2 || linkType == 4) {
        if (linkType == 2)
            file_name_regex = ImageHandler.file_name_regex_2;
        if (linkType == 4)
            file_name_regex = ImageHandler.file_name_regex_4;
        alt_regex = /(?<=\[)(^$|.*)(?=\])/;
    }
    var file_match = match[0].match(file_name_regex);
    var alt_match = match[0].match(alt_regex);
    return {
        fileName: file_match ? file_match[0] : '',
        altText: alt_match ? alt_match[0] : '',
    };
};
// Checking the Alt 100x100 (WIDTHxHEIGHT) format
ImageHandler.altWidthHeight = (altText) => {
    const widthHeightRegex = /[0-9]+x[0-9]+/;
    const widthRegex = /[0-9]+/;
    var match = altText.match(widthHeightRegex);
    if (match) {
        var index = match[0].indexOf('x');
        return {
            width: parseInt(match[0].substr(0, index)),
            height: parseInt(match[0].substr(index + 1)),
        };
    }
    else {
        var widthMatch = altText.match(widthRegex);
        if (widthMatch)
            return { width: parseInt(widthMatch[0]) };
    }
    return false;
};
// Check if path is an image
ImageHandler.is_an_image = (path) => {
    var match = path.match(ImageHandler.image_regex);
    if (match)
        return true;
    return false;
};
// Return Blob Object from Url
ImageHandler.getBlobObject = (blobLink) => __awaiter(void 0, void 0, void 0, function* () {
    return fetch(blobLink).then((res) => res.blob());
});
// Add a context menu for image widget
ImageHandler.addContextMenu = (event, plugin, imageFile) => {
    const fileMenu = new obsidian.Menu(plugin.app);
    fileMenu.addItem((menuItem) => {
        menuItem.setTitle('Copy Image to Clipboard');
        menuItem.setIcon('image-file');
        menuItem.onClick((e) => __awaiter(void 0, void 0, void 0, function* () {
            var buffer = yield plugin.app.vault.adapter.readBinary(imageFile.path);
            var arr = new Uint8Array(buffer);
            var blob = new Blob([arr], { type: 'image/png' });
            // @ts-ignore
            const item = new ClipboardItem({ 'image/png': blob });
            // @ts-ignore
            window.navigator['clipboard'].write([item]);
        }));
    });
    plugin.app.workspace.trigger('file-menu', fileMenu, imageFile, 'file-explorer');
    fileMenu.showAtPosition({ x: event.pageX, y: event.pageY });
    return false;
};
class ExcalidrawHandler {
}
ExcalidrawHandler.pluginActive = (app) => {
    // @ts-ignore
    return app.plugins.getPlugin('obsidian-excalidraw-plugin');
};
ExcalidrawHandler.isDrawing = (imageFile) => {
    return (imageFile.extension === 'excalidraw' ||
        // @ts-ignore
        (ExcalidrawAutomate.isExcalidrawFile && ExcalidrawAutomate.isExcalidrawFile(imageFile)));
};
ExcalidrawHandler.createPNG = (imageFile) => __awaiter(void 0, void 0, void 0, function* () {
    // @ts-ignore
    ExcalidrawAutomate.reset();
    // @ts-ignore
    var image = yield ExcalidrawAutomate.createPNG(imageFile.path);
    return image;
});
class IframeHandler {
}
IframeHandler.iframeRegex = /(?:<iframe[^>]*)(?:(?:\/>)|(?:>.*?<\/iframe>))/;
IframeHandler.get_iframe_in_line = (line) => {
    const match = line.match(IframeHandler.iframeRegex);
    if (match)
        return { result: match, linkType: 'iframe' };
    return { result: false, linkType: 0 };
};
IframeHandler.create_iframe_node = (match) => {
    var iframeNode = document.createElement('div');
    iframeNode.innerHTML = match[0].trim();
    return iframeNode;
};
class ObsidianHelpers {
}
// Getting Active Markdown File
ObsidianHelpers.getActiveNoteFile = (workspace) => {
    return workspace.getActiveFile();
};
// Get Active Editor
ObsidianHelpers.getCmEditor = (workspace) => {
    var _a, _b;
    return (_b = (_a = workspace.getActiveViewOfType(obsidian.MarkdownView)) === null || _a === void 0 ? void 0 : _a.sourceMode) === null || _b === void 0 ? void 0 : _b.cmEditor;
};
// Get Full Path of the image
ObsidianHelpers.getPathOfImage = (vault, image) => {
    return vault.getResourcePath(image) + '?' + image.stat.mtime;
};
ObsidianHelpers.getFileCmBelongsTo = (cm, workspace) => {
    var _a;
    let leafs = workspace.getLeavesOfType('markdown');
    for (let i = 0; i < leafs.length; i++) {
        // @ts-ignore
        if (leafs[i].view instanceof obsidian.MarkdownView && ((_a = leafs[i].view.sourceMode) === null || _a === void 0 ? void 0 : _a.cmEditor) == cm) {
            // @ts-ignore
            return leafs[i].view.file;
        }
    }
    return null;
};

// Check Single Line
const check_line = (cm, line_number, targetFile, plugin, changedFilePath) => __awaiter(void 0, void 0, void 0, function* () {
    // Get the Line edited
    const line = cm.lineInfo(line_number);
    if (line === null)
        return;
    // Check if the line is an internet link
    const link_in_line = LinkHandler.get_link_in_line(line.text);
    const img_in_line = ImageHandler.get_image_in_line(line.text);
    // Clear the widget if link was removed
    var line_image_widget = line.widgets
        ? line.widgets.filter((wid) => wid.className === 'oz-image-widget')
        : false;
    if (line_image_widget && !(img_in_line.result || link_in_line.result))
        line_image_widget[0].clear();
    var sourcePath = '';
    /* ------------------ IFRAME RENDER  ------------------ */
    if (plugin.settings && plugin.settings.renderIframe) {
        // Check if the line is a Iframe
        const iframe_in_line = IframeHandler.get_iframe_in_line(line.text);
        // If Regex Matches
        if (iframe_in_line.result) {
            // Clear the Line Widgets
            WidgetHandler.clearLineWidgets(line);
            // Create Iframe Node
            var iframeNode = IframeHandler.create_iframe_node(iframe_in_line.result);
            // Add Widget in Line
            cm.addLineWidget(line_number, iframeNode, { className: 'oz-image-widget', showIfHidden: false });
            // End Rendering of the line
            return;
        }
    }
    /* ------------------ PDF RENDER  ------------------ */
    if (plugin.settings && plugin.settings.renderPDF) {
        // Check if the line is a  PDF
        const pdf_in_line = PDFHandler.get_pdf_in_line(line.text);
        // If PDF Regex Matches
        if (pdf_in_line.result) {
            // Clear the Line Widgets
            WidgetHandler.clearLineWidgets(line);
            // Get Source Path
            if (targetFile != null)
                sourcePath = targetFile.path;
            // Get PDF File
            var pdf_name = PDFHandler.get_pdf_name(pdf_in_line.linkType, pdf_in_line.result);
            // Create URL for Link and Local PDF
            var pdf_path = '';
            if (LinkHandler.path_is_a_link(pdf_name)) {
                pdf_path = pdf_name;
            }
            else {
                // Get the PDF File Object
                var pdfFile = plugin.app.metadataCache.getFirstLinkpathDest(decodeURIComponent(pdf_name), sourcePath);
                // Create Object URL
                var buffer = yield plugin.app.vault.adapter.readBinary(obsidian.normalizePath(pdfFile.path));
                var arr = new Uint8Array(buffer);
                var blob = new Blob([arr], { type: 'application/pdf' });
                pdf_path = URL.createObjectURL(blob);
                // Add Page Number
                var pdf_page_nr = PDFHandler.get_pdf_page_number(pdf_in_line.result);
                if (pdf_page_nr)
                    pdf_path = pdf_path + pdf_page_nr;
            }
            // Create the Widget
            var pdf_widget = document.createElement('embed');
            pdf_widget.src = pdf_path;
            pdf_widget.type = 'application/pdf';
            pdf_widget.width = '100%';
            pdf_widget.height = '800px';
            // Add Widget in Line
            cm.addLineWidget(line_number, pdf_widget, { className: 'oz-image-widget', showIfHidden: false });
            // End Rendering of the line
            return;
        }
    }
    /* ------------------ EXCALIDRAW & IMAGE RENDER ------------------ */
    // If any of regex matches, it will add image widget
    if (link_in_line.result || img_in_line.result) {
        // Get the file name and alt text depending on format
        var filename = '';
        var alt = '';
        if (link_in_line.result) {
            // linkType 3 and 4
            filename = ImageHandler.getFileNameAndAltText(link_in_line.linkType, link_in_line.result).fileName;
            alt = ImageHandler.getFileNameAndAltText(link_in_line.linkType, link_in_line.result).altText;
        }
        else if (img_in_line.result) {
            filename = ImageHandler.getFileNameAndAltText(img_in_line.linkType, img_in_line.result).fileName;
            alt = ImageHandler.getFileNameAndAltText(img_in_line.linkType, img_in_line.result).altText;
        }
        // Create Image
        const img = document.createElement('img');
        var image = null;
        // Prepare the src for the Image
        if (link_in_line.result) {
            // Local File URL Correction (Outside of Vault)
            if (filename.startsWith('file:///'))
                filename = filename.replace('file:///', 'app://local/');
            img.src = decodeURI(filename);
        }
        else {
            // Source Path
            if (targetFile != null) {
                sourcePath = targetFile.path;
            }
            else {
                let activeNoteFile = ObsidianHelpers.getActiveNoteFile(plugin.app.workspace);
                sourcePath = activeNoteFile ? activeNoteFile.path : '';
            }
            // Get Image File
            var imageFile = plugin.app.metadataCache.getFirstLinkpathDest(decodeURIComponent(filename), sourcePath);
            if (!imageFile)
                return;
            // Additional Check for Changed Files - helps updating only for changed image
            if (changedFilePath && imageFile && changedFilePath !== imageFile.path)
                return;
            /* ------------------ EXCALIDRAW RENDER ------------------ */
            if (['md', 'excalidraw'].contains(imageFile.extension)) {
                // Do not render drawing if option turned off
                if (!plugin.settings.renderExcalidraw)
                    return;
                // md, excalidraw file check to be rendered
                if (ExcalidrawHandler.pluginActive && ExcalidrawHandler.isDrawing(imageFile)) {
                    // The file is an excalidraw drawing
                    if (plugin.imagePromiseList.contains(imageFile.path))
                        return;
                    plugin.addToImagePromiseList(imageFile.path);
                    var image = yield ExcalidrawHandler.createPNG(imageFile);
                    // Check if Object or Alt Changed
                    if (line.handle.widgets) {
                        var currentImageNode = line.handle.widgets[0].node;
                        var blobLink = currentImageNode.currentSrc;
                        var existingBlop = yield ImageHandler.getBlobObject(blobLink);
                        if (existingBlop.size === image.size && currentImageNode.alt === alt) {
                            // Drawing hasn't changed
                            plugin.removeFromImagePromiseList(imageFile.path);
                            return;
                        }
                    }
                    // Generate New Link for new Drawing
                    img.src = URL.createObjectURL(image);
                    plugin.removeFromImagePromiseList(imageFile.path);
                }
                else {
                    return;
                }
            }
            /* ------------------ ALL IMAGE RENDERS ------------------ */
            if (['jpeg', 'jpg', 'png', 'gif', 'svg', 'bmp'].contains(imageFile.extension)) {
                img.src = ObsidianHelpers.getPathOfImage(plugin.app.vault, imageFile);
                img.setAttr('data-path', imageFile.path);
            }
        }
        // Clear the image widgets if exists
        WidgetHandler.clearLineWidgets(line);
        // Image Properties
        var altSizer = ImageHandler.altWidthHeight(alt);
        if (altSizer) {
            img.width = altSizer.width;
            if (altSizer.height)
                img.height = altSizer.height;
        }
        img.alt = alt;
        // Add Image widget under the Image Markdown
        cm.addLineWidget(line_number, img, { className: 'oz-image-widget', showIfHidden: false });
    }
});
// Check All Lines Function
const check_lines = (cm, from, to, plugin, changedFilePath) => {
    // Last Used Line Number in Code Mirror
    var file = ObsidianHelpers.getFileCmBelongsTo(cm, plugin.app.workspace);
    for (let i = from; i <= to; i++) {
        check_line(cm, i, file, plugin, changedFilePath);
    }
};

const DEFAULT_SETTINGS = {
    renderAll: true,
    renderPDF: false,
    renderIframe: false,
    renderExcalidraw: false,
    refreshImagesAfterChange: false,
    WYSIWYG: false,
};
class OzanImagePluginSettingsTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Image in Editor Settings' });
        containerEl.createEl('h2', { text: 'Render Options' });
        new obsidian.Setting(containerEl)
            .setName('Render Toggle')
            .setDesc("Turn off this option if you want to stop rendering images, PDF and drawings. If you turn off, the other settings won't have an effect")
            .addToggle((toggle) => toggle.setValue(this.plugin.settings.renderAll).onChange((value) => {
            this.plugin.handleToggleRenderAll(value);
            this.plugin.settings.renderAll = value;
            this.plugin.saveSettings();
        }));
        new obsidian.Setting(containerEl)
            .setName('Render PDFs in Editor')
            .setDesc('Turn on this option if you want also PDF files to be rendered in Editor')
            .addToggle((toggle) => toggle.setValue(this.plugin.settings.renderPDF).onChange((value) => {
            this.plugin.settings.renderPDF = value;
            this.plugin.saveSettings();
        }));
        new obsidian.Setting(containerEl)
            .setName('Render Iframes in Editor')
            .setDesc('Turn on this option if you want iframes to be rendered in Editor')
            .addToggle((toggle) => toggle.setValue(this.plugin.settings.renderIframe).onChange((value) => {
            this.plugin.settings.renderIframe = value;
            this.plugin.saveSettings();
        }));
        new obsidian.Setting(containerEl)
            .setName('Render Excalidraw in Editor')
            .setDesc('Turn on this option if you want drawings to be rendered in Editor')
            .addToggle((toggle) => toggle.setValue(this.plugin.settings.renderExcalidraw).onChange((value) => {
            this.plugin.settings.renderExcalidraw = value;
            this.plugin.saveSettings();
        }));
        this.containerEl.createEl('h2', { text: 'Alternative Settings' });
        new obsidian.Setting(containerEl)
            .setName('Refresh Images after Changes')
            .setDesc('Turn on this option if you want images to refreshed once you edit the original file')
            .addToggle((toggle) => toggle.setValue(this.plugin.settings.refreshImagesAfterChange).onChange((value) => {
            this.plugin.handleRefreshImages(value);
            this.plugin.settings.refreshImagesAfterChange = value;
            this.plugin.saveSettings();
        }));
        new obsidian.Setting(containerEl)
            .setName('WYSIWYG Like Experience')
            .setDesc('Turn on this option if you want WYSIWYG style to be loaded for editor view')
            .addToggle((toggle) => toggle.setValue(this.plugin.settings.WYSIWYG).onChange((value) => {
            this.plugin.settings.WYSIWYG = value;
            this.plugin.handleWYSIWYG(value);
            this.plugin.saveSettings();
        }));
    }
}

const WYSIWYG_Style = `

/* Not Active Lines */
div:not(.CodeMirror-activeline) >
.CodeMirror-line span.cm-formatting:not(.cm-formatting-list):not(.cm-image):not(.cm-url):not(.cm-link) /* not(.cm-formatting-code-block) */ {
  display: none !important;
}

/* H1 Underline */
.cm-s-obsidian pre.HyperMD-header-1:after {
  content: "";
  position: absolute;
  bottom: 5px;
  left: 5px;
  width: calc(100% - 10px);
  height: 1px;
  background: var(--text-accent);
}

.cm-s-obsidian pre.HyperMD-header-1{
  padding-bottom: 5px;
}

/* except numbered list */
div:not(.CodeMirror-activeline)>.CodeMirror-line span.cm-formatting-list {
   display: inline !important;
}

span.cm-formatting-list,
span.cm-formatting-code-block.cm-hmd-codeblock,
span.cm-formatting-header {
  display: inline !important;
}

/* and task checkboxes */
span.cm-formatting-task {
  display: inline !important;
  font-family: monospace;
}

/* Checkboxes instead of brackets in edit mode */
div:not(.CodeMirror-activeline)>.CodeMirror-line span.cm-formatting-task.cm-meta,
div:not(.CodeMirror-activeline)>.CodeMirror-line span.cm-formatting-task.cm-property {
    color: transparent;
    position: relative;
    display: inline !important;
    margin-right: -0.1rem;
}

div:not(.CodeMirror-activeline)>.CodeMirror-line span.cm-formatting-task.cm-meta:after,
div:not(.CodeMirror-activeline)>.CodeMirror-line span.cm-formatting-task.cm-property:after {
    content: "○";
    position: absolute;
    top: 3px;
    left: 4px;
    color: rgb(219, 95, 12);
    font-size: calc(var(--editor-font-size) * 1.2);
    text-align: center;
}

div:not(.CodeMirror-activeline)>.CodeMirror-line span.cm-formatting-task.cm-property:after {
  content: "✓";
  color: rgb(124, 131, 124) !important;
}

span.cm-formatting-task.cm-property ~ span {
  text-decoration: line-through;
  color: rgb(124, 131, 124) !important;
}

/* highlight (==) not visible anymore if not active line */
div:not(.CodeMirror-activeline) > .CodeMirror-line .cm-formatting-highlight.cm-highlight {
 font-size: 0;
}

/* Blockquote */
div:not(.CodeMirror-activeline)>.CodeMirror-line span.cm-formatting.cm-formatting-quote,
div:not(.CodeMirror-activeline)>.CodeMirror-line span.cm-hmd-indent-in-quote {
  display: inline !important;
  color: transparent !important;
}

div:not(.CodeMirror-activeline)>.HyperMD-quote {
	 background-color: var(--background-primary-alt);
   border-left: 3px solid var(--text-selection);
   border-color: red !important;
   font-size: var(--editor-font-size) !important;
   line-height: 1.5em;
   margin-left: 5px;
   padding: 10px 6px 10px 6px;
   display: inline-block;
   width: 100%;
}

/* Tags */
div:not(.CodeMirror-activeline) > .CodeMirror-line span.cm-hashtag-end:before {
   content: '';
}

.tag, div:not(.CodeMirror-activeline) > .CodeMirror-line span.cm-hashtag-end {
  background-color: var(--text-accent);
  border: none;
  color: white;
  font-size: var(--editor-font-size) !important;
  padding: 0px 6px !important;
  padding-top: -2px;
  padding-bottom: 2px;
  text-align: center;
  text-decoration: none !important;
  display: inline-block;
  margin: 0.5px 0.5px;
  cursor: pointer;
  border-radius: 14px;
}

`;

class OzanImagePlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.imagePromiseList = [];
        // Context Menu for Rendered Images
        this.onImageMenu = (event, target) => {
            const file = this.app.vault.getAbstractFileByPath(target.dataset.path);
            if (!(file instanceof obsidian.TFile))
                return;
            event.preventDefault();
            event.stopPropagation();
            ImageHandler.addContextMenu(event, this, file);
            return false;
        };
        // Line Edit Changes
        this.codemirrorLineChanges = (cm, change) => {
            check_lines(cm, change.from.line, change.from.line + change.text.length - 1, this);
        };
        // Only Triggered during initial Load
        this.handleInitialLoad = (cm) => {
            var lastLine = cm.lastLine();
            var file = ObsidianHelpers.getFileCmBelongsTo(cm, this.app.workspace);
            for (let i = 0; i < lastLine + 1; i++) {
                check_line(cm, i, file, this);
            }
        };
        // Handle Toggle for renderAll
        this.handleToggleRenderAll = (newRenderAll) => {
            if (newRenderAll) {
                this.registerCodeMirror((cm) => {
                    cm.on('change', this.codemirrorLineChanges);
                    this.handleInitialLoad(cm);
                });
                if (this.settings.refreshImagesAfterChange)
                    this.app.vault.on('modify', this.handleFileModify);
            }
            else {
                this.app.workspace.iterateCodeMirrors((cm) => {
                    cm.off('change', this.codemirrorLineChanges);
                    WidgetHandler.clearWidgets(cm);
                });
                this.app.vault.off('modify', this.handleFileModify);
            }
        };
        // Handle Toggle for Refresh Images Settings
        this.handleRefreshImages = (newRefreshImages) => {
            if (newRefreshImages) {
                this.app.vault.on('modify', this.handleFileModify);
            }
            else {
                this.app.vault.off('modify', this.handleFileModify);
            }
        };
        // Handle File Changes to Refhres Images
        this.handleFileModify = (file) => {
            if (!(file instanceof obsidian.TFile))
                return;
            if (!ImageHandler.is_an_image(file.path))
                return;
            this.app.workspace.iterateCodeMirrors((cm) => {
                var lastLine = cm.lastLine();
                check_lines(cm, 0, lastLine, this, file.path);
            });
        };
        // Handle WYSIWYG Toggle
        this.handleWYSIWYG = (newWYSIWYG) => {
            if (newWYSIWYG) {
                this.load_WYSIWYG_Styles();
            }
            else {
                this.unload_WYSIWYG_Styles();
            }
        };
        this.load_WYSIWYG_Styles = () => {
            this.loadedStyles = Array(0);
            var style = document.createElement('style');
            style.innerHTML = WYSIWYG_Style;
            document.head.appendChild(style);
            this.loadedStyles.push(style);
        };
        this.unload_WYSIWYG_Styles = () => {
            if (!this.loadedStyles || typeof this.loadedStyles[Symbol.iterator] !== 'function')
                return;
            for (let style of this.loadedStyles) {
                document.head.removeChild(style);
            }
            this.loadedStyles = Array(0);
        };
        this.addToImagePromiseList = (path) => {
            if (!this.imagePromiseList.contains(path)) {
                this.imagePromiseList.push(path);
            }
        };
        this.removeFromImagePromiseList = (path) => {
            if (this.imagePromiseList.contains(path)) {
                this.imagePromiseList = this.imagePromiseList.filter((crPath) => crPath !== path);
            }
        };
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Image in Editor Plugin is loaded');
            this.addSettingTab(new OzanImagePluginSettingsTab(this.app, this));
            yield this.loadSettings();
            // Register event for each change
            this.addCommand({
                id: 'toggle-render-all',
                name: 'Toggle Render All',
                callback: () => {
                    this.handleToggleRenderAll(!this.settings.renderAll);
                    this.settings.renderAll = !this.settings.renderAll;
                    this.saveSettings();
                },
            });
            this.addCommand({
                id: 'toggle-WYSIWYG',
                name: 'Toggle WYSIWYG',
                callback: () => {
                    this.handleWYSIWYG(!this.settings.WYSIWYG);
                    this.settings.WYSIWYG = !this.settings.WYSIWYG;
                    this.saveSettings();
                },
            });
            this.addCommand({
                id: 'toggle-render-pdf',
                name: 'Toggle Render PDF',
                callback: () => {
                    this.settings.renderPDF = !this.settings.renderPDF;
                    this.app.workspace.iterateCodeMirrors((cm) => {
                        this.handleInitialLoad(cm);
                    });
                    this.saveSettings();
                },
            });
            this.addCommand({
                id: 'toggle-render-iframe',
                name: 'Toggle Render Iframe',
                callback: () => {
                    this.settings.renderIframe = !this.settings.renderIframe;
                    this.app.workspace.iterateCodeMirrors((cm) => {
                        this.handleInitialLoad(cm);
                    });
                    this.saveSettings();
                },
            });
            this.addCommand({
                id: 'toggle-refresh-images-after-changes',
                name: 'Toggle Refresh Images After Changes',
                callback: () => {
                    this.handleRefreshImages(!this.settings.refreshImagesAfterChange);
                    this.settings.refreshImagesAfterChange = !this.settings.refreshImagesAfterChange;
                    this.saveSettings();
                },
            });
            document.on('contextmenu', `div.CodeMirror-linewidget.oz-image-widget > img[data-path]`, this.onImageMenu, false);
            if (this.settings.WYSIWYG)
                this.load_WYSIWYG_Styles();
            if (!this.settings.renderAll)
                return;
            this.registerCodeMirror((cm) => {
                cm.on('change', this.codemirrorLineChanges);
                this.handleInitialLoad(cm);
            });
            if (!this.settings.refreshImagesAfterChange)
                return;
            this.app.vault.on('modify', this.handleFileModify);
        });
    }
    onunload() {
        this.app.workspace.iterateCodeMirrors((cm) => {
            cm.off('change', this.codemirrorLineChanges);
            WidgetHandler.clearWidgets(cm);
        });
        this.app.vault.off('modify', this.handleFileModify);
        document.off('contextmenu', `div.CodeMirror-linewidget.oz-image-widget > img[data-path]`, this.onImageMenu, false);
        this.unload_WYSIWYG_Styles();
        console.log('Image in Editor Plugin is unloaded');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = OzanImagePlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
